(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([[0],{

/***/ "../../libs/element-ui/lib/mixins/migrating.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var _util = __webpack_require__("../../libs/element-ui/lib/utils/util.js");
/**
 * Show migrating guide in browser console.
 *
 * Usage:
 * import Migrating from '@cognitoforms/element-ui/src/mixins/migrating';
 *
 * mixins: [Migrating]
 *
 * add getMigratingConfig method for your component.
 *  getMigratingConfig() {
 *    return {
 *      props: {
 *        'allow-no-selection': 'allow-no-selection is removed.',
 *        'selection-mode': 'selection-mode is removed.'
 *      },
 *      events: {
 *        selectionchange: 'selectionchange is renamed to selection-change.'
 *      }
 *    };
 *  },
 */
var _default = exports.default = {
  mounted() {
    if (false) {}
    if (!this.$vnode) return;
    const {
      props = {},
      events = {}
    } = this.getMigratingConfig();
    const {
      data,
      componentOptions
    } = this.$vnode;
    const definedProps = data.attrs || {};
    const definedEvents = componentOptions.listeners || {};
    for (let propName in definedProps) {
      propName = (0, _util.kebabCase)(propName); // compatible with camel case
      if (props[propName]) {
        console.warn(`[Element Migrating][${this.$options.name}][Attribute]: ${props[propName]}`);
      }
    }
    for (let eventName in definedEvents) {
      eventName = (0, _util.kebabCase)(eventName); // compatible with camel case
      if (events[eventName]) {
        console.warn(`[Element Migrating][${this.$options.name}][Event]: ${events[eventName]}`);
      }
    }
  },
  methods: {
    getMigratingConfig() {
      return {
        props: {},
        events: {}
      };
    }
  }
};

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L2xpYnMvZWxlbWVudC11aS9saWIvbWl4aW5zL21pZ3JhdGluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTs7QUFFYjtBQUNBO0FBQ0EsWUFBWSxtQkFBTyxDQUFDLHlDQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFFBQVEsS0FBcUMsRUFBRSxFQUFPO0FBQ3REO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBLDRDQUE0QyxtQkFBbUIsZ0JBQWdCLGdCQUFnQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQSw0Q0FBNEMsbUJBQW1CLFlBQVksa0JBQWtCO0FBQzdGO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRSIsImZpbGUiOiIwLjk1YjJmYjNlY2Y1YmVkMzg2OTUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi4vLi4vbGliL3V0aWxzL3V0aWxcIik7XG4vKipcbiAqIFNob3cgbWlncmF0aW5nIGd1aWRlIGluIGJyb3dzZXIgY29uc29sZS5cbiAqXG4gKiBVc2FnZTpcbiAqIGltcG9ydCBNaWdyYXRpbmcgZnJvbSAnQGNvZ25pdG9mb3Jtcy9lbGVtZW50LXVpL3NyYy9taXhpbnMvbWlncmF0aW5nJztcbiAqXG4gKiBtaXhpbnM6IFtNaWdyYXRpbmddXG4gKlxuICogYWRkIGdldE1pZ3JhdGluZ0NvbmZpZyBtZXRob2QgZm9yIHlvdXIgY29tcG9uZW50LlxuICogIGdldE1pZ3JhdGluZ0NvbmZpZygpIHtcbiAqICAgIHJldHVybiB7XG4gKiAgICAgIHByb3BzOiB7XG4gKiAgICAgICAgJ2FsbG93LW5vLXNlbGVjdGlvbic6ICdhbGxvdy1uby1zZWxlY3Rpb24gaXMgcmVtb3ZlZC4nLFxuICogICAgICAgICdzZWxlY3Rpb24tbW9kZSc6ICdzZWxlY3Rpb24tbW9kZSBpcyByZW1vdmVkLidcbiAqICAgICAgfSxcbiAqICAgICAgZXZlbnRzOiB7XG4gKiAgICAgICAgc2VsZWN0aW9uY2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlIGlzIHJlbmFtZWQgdG8gc2VsZWN0aW9uLWNoYW5nZS4nXG4gKiAgICAgIH1cbiAqICAgIH07XG4gKiAgfSxcbiAqL1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBtb3VudGVkKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLiR2bm9kZSkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHByb3BzID0ge30sXG4gICAgICBldmVudHMgPSB7fVxuICAgIH0gPSB0aGlzLmdldE1pZ3JhdGluZ0NvbmZpZygpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBjb21wb25lbnRPcHRpb25zXG4gICAgfSA9IHRoaXMuJHZub2RlO1xuICAgIGNvbnN0IGRlZmluZWRQcm9wcyA9IGRhdGEuYXR0cnMgfHwge307XG4gICAgY29uc3QgZGVmaW5lZEV2ZW50cyA9IGNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzIHx8IHt9O1xuICAgIGZvciAobGV0IHByb3BOYW1lIGluIGRlZmluZWRQcm9wcykge1xuICAgICAgcHJvcE5hbWUgPSAoMCwgX3V0aWwua2ViYWJDYXNlKShwcm9wTmFtZSk7IC8vIGNvbXBhdGlibGUgd2l0aCBjYW1lbCBjYXNlXG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW0VsZW1lbnQgTWlncmF0aW5nXVske3RoaXMuJG9wdGlvbnMubmFtZX1dW0F0dHJpYnV0ZV06ICR7cHJvcHNbcHJvcE5hbWVdfWApO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gZGVmaW5lZEV2ZW50cykge1xuICAgICAgZXZlbnROYW1lID0gKDAsIF91dGlsLmtlYmFiQ2FzZSkoZXZlbnROYW1lKTsgLy8gY29tcGF0aWJsZSB3aXRoIGNhbWVsIGNhc2VcbiAgICAgIGlmIChldmVudHNbZXZlbnROYW1lXSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFtFbGVtZW50IE1pZ3JhdGluZ11bJHt0aGlzLiRvcHRpb25zLm5hbWV9XVtFdmVudF06ICR7ZXZlbnRzW2V2ZW50TmFtZV19YCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0TWlncmF0aW5nQ29uZmlnKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJvcHM6IHt9LFxuICAgICAgICBldmVudHM6IHt9XG4gICAgICB9O1xuICAgIH1cbiAgfVxufTsiXSwic291cmNlUm9vdCI6IiJ9