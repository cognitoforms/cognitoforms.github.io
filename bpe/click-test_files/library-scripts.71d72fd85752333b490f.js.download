(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["library-scripts"],{

/***/ "../../../Cognito.Services/Scripts/component/cognito-dialog.js":
/*!******************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/component/cognito-dialog.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

; (function ($) {
	var Dialog = function (options, element) {
		this._options = $.extend({}, Dialog.defaults, options);
		this._dialogVisible = false;
		this._hasTemplate = false;
		this._checkpoint = null;
		this._isExecuting = new ExoWeb.Signal();
		this._defaultButton = null;
		this._accelerators = {};

		// If an instance/property was specified, but no buttons, create default buttons
		if (this._options.instance) {
			if (!this._options.buttons) {
				this._options.buttons = [
					{
						label: "Cancel",
						isCancel: true
					},
					{
						label: "Ok",
						autoClose: false,
						click: function () {
							this._checkpoint = null;
							this.close(false);
						}
					}
				]
			}
		} else if (!this._options.buttons) {
			this._options.buttons = {
				"Ok": function () {
					this.close(false);
				}
			}
		}

		if (element) {
			this.$element = $(element);
			this.$element.bind("click", this.open.bind(this, element));
		}

		//this.$element.append(this._create());
		this._dialog = this._create();

		// Create and add the dialog UI elements once the DOM is ready
		var that = this;
		var readyDeps = ["ExoWeb.dom"];
		if (this._options.templateDep)
			readyDeps.push(this._options.templateDep);
		Cognito.ready("append-dialog-" + options.title, readyDeps, function ($) {
			var cognitoContainer = $('.c-app-container');
			var cognitoDiv = cognitoContainer.length ? cognitoContainer : $('.cognito:first');
			that._dialog.appendTo(cognitoDiv.length == 0 || Cognito.config.flags.AppNav ? document.body : cognitoDiv);

			// Force activation if using templates
			if (that._options.templateName)
				Sys.Application.activateElement(that._dialog[0]);
		});
	};

	Dialog.defaults = {
		title: "",
		width: 400,
		height: 200,
		text: "",
		source: "",
		open: undefined,
		cancel: undefined,
		instance: null,
		property: null,
		templateName: null,
		closeOnEscape: true,
		includeCloseButton: true,
		contentSelector: null,
		closeOnOverlayClick: true,
		modalClass: "",
		contentClass: "",
		onClose: null
	};

	Dialog.activeDialogs = [];

	const zModalOverlay = 1040;

	Dialog.prototype = {
		_create: function () {
			var dialogPane = $("<div class='c-modal scrollbar' />");
			dialogPane.addClass(this._options.modalClass)
								.append("<div class='c-modal-overlay'></div>")
			var dialogContainer = dialogPane;

			dialogContainer.append(this._createContent());

			// Only include the title bar if a title was specified
			if (this._options.title) {
				dialogContainer.prepend(this._createTitle());
			}
			else
				dialogContainer.children().css({ "padding-top": "0px" });

			dialogContainer.append(this._createButtons());

			// Ensure that clicks inside the dialog do not propagate beyond the dialog context
			dialogPane.click(function (event) {
				(event.originalEvent || event).dialog = true;
			});

			return dialogPane;
		},
		_createTitle: function () {
			var titlePane = $("<div class='c-modal-title-bar' />");
			titlePane.append("<div class='c-modal-title'>" + this._options.title + "</div>")

			if (this._options.includeCloseButton) {
				var closePane = $("<div class='c-modal-close' />") // close button
				closePane.append("<i class='icon-remove' />");
				closePane.bind("click", this.close.bind(this));
				titlePane.append(closePane);
			}

			return titlePane;
		},
		_createContent: function () {
			var contentContainer = $("<div class='c-modal-content-container' />");
			var contentPane = $("<div class='c-modal-content' />");
			contentContainer.addClass(this._options.contentClass);
			contentContainer.append(contentPane);
			if (this._options.text) {
				var textContainer = $("<p>");
				if (this._options.text.constructor === String)
					textContainer.html(this._options.text);
				contentPane.append(textContainer);
			} else if (this._options.contentSelector) {
				contentPane.append($(this._options.contentSelector).show());
			}

			// If template name provided, load existing, otherwise create new template
			if (this._options.instance && this._options.templateName)
				contentPane.append(this._loadTemplate());
			else if (this._options.instance)
				contentPane.append(this._createTemplate());

			return contentContainer;
		},
		_createButtons: function () {
			var that = this;
			var buttonPane = $("<div class='c-modal-button-bar' />");
			var leftButtons = $("<div class='c-modal-buttons-left' />");
			var rightButtons = $("<div class='c-modal-buttons-right' />");
			if (this._options.buttons) {
				$.each(this._options.buttons, function (name, props) {
					var button;
					var execute = function () { };
					var autoClose = true;
					var isAlignedRight = true;
					var isAction = false;
					var isDefault = false;
					var isTab = false;
					var isCancel = false;

					// Can use array to pass in additional options
					if (Array.isArray(that._options.buttons)) {
						name = props.label;
						if ($.isFunction(props.click)) execute = props.click;
						if (props.align === "left") isAlignedRight = false;
						autoClose = props.autoClose != false;
						isAction = props.isAction;
						isTab = props.isTab;
						isCancel = props.isCancel;
						isDefault = props.isDefault;
					}
					else {
						if ($.isFunction(props)) {
							execute = props;
						} else {
							if (props.execute && $.isFunction(props.execute)) execute = props.execute;
							isDefault = props.isDefault;
						}
					}

					// Tabbed button
					if (isTab) {
						button = props.isDefaultTab ? $("<a class='c-modal-tab c-modal-tab-active'>" + name + "</a>") : $("<a class='c-modal-tab'>" + name + "</a>");
						isAlignedRight = false;
					}
					else {
						var actionStyle = isAction ? " c-modal-button-action" : "";
						actionStyle += isCancel ? " c-modal-button-cancel button--secondary" : " button--primary";
						button = isAlignedRight ? $("<a class='c-modal-button" + actionStyle + "'>" + name + "</a>") : $("<a class='c-modal-button c-modal-button-left" + actionStyle + "'>" + name + "</a>");
					}
					if (isDefault) that._defaultButton = button;

					var acceleratorChar = null;
					for (var i = 0; i < name.length && !acceleratorChar; i++) {
						if (!that._accelerators[name[i].toLowerCase()]) acceleratorChar = name[i].toLowerCase();
					}

					that._accelerators[acceleratorChar] = button;

					button.bind("click", that._buttonWrapper.bind(that, buttonPane, execute, autoClose, isCancel, button));
					isAlignedRight ? rightButtons.append(button) : leftButtons.append(button);
				});

				buttonPane.append(leftButtons);
				buttonPane.append(rightButtons);
			}

			return buttonPane;
		},
		_createTemplate: function () {
			var templatePane = $("<div class='sys-template' sys:attach='dataview' dataview:data='{~ " + this._options.instance + " }' sys:content-template='form' />");
			templatePane.append("<div sys:attach='content' content:data='{@ " + this._options.property + "}' />");

			return templatePane;
		},
		_loadTemplate: function () {
			return $("<div sys:attach='content' content:data='{~ " + this._options.instance + " }' content:template='" + this._options.templateName + "'></div>");
		},
		_buttonWrapper: function (buttonPane, buttonFunc, autoClose, isCancel, button, event) {
			if (this._isExecuting.isActive()) return;

			if (!isCancel && button.hasClass("c-modal-button"))
				button.addClass("c-modal-button-executing");

			buttonFunc.call(this, event, button);

			var that = this;
			this._isExecuting.waitForAll(function () {
				if (autoClose && that._dialogVisible) that.close(isCancel);
			});
		},
		_bindTo: function (element) {
			if (element) $(element).bind("click", this.open.bind(this));
		},
		_createCheckpoint: function () {
			this._checkpoint = context.server.checkpoint();
		},
		open: function (origEvt) {			
			if (this._options.open) {
				if (!this._options.open.call(this, origEvt))

					// Indicate that the dialog was not opened
					return false;
			}

			$('body').addClass('c-modal-active');

			if (this._options.url) {
				this._dialog.find(".c-modal-content").remove();

				var contentContainer = this._dialog.find(".c-modal-content-container");

				this.frame = $("<iframe"
					+ (this._options.name ? " name='" + this._options.name + "'" : "")
					+ " style='width: 100%; height: 100%; overflow-x: hidden; overflow-y: hidden; -ms-overflow-style: scrollbar'"
					+ " src='" + this._options.url + "'"
					+ "></iframe>")
					.appendTo(contentContainer)
					.get(0);
			}
			else if (this._options.text instanceof Function)
				this._dialog.find(".c-modal-content p").html(this._options.text());

			if (origEvt) {
				this.$element = $(origEvt.currentTarget);
				if (origEvt.preventDefault instanceof Function)
					origEvt.preventDefault();
			}

			// Expose the event that caused the dialog to open
			this.event = origEvt;

			if (this._options.checkpoint) {
				window.context.server.beginCapturingChanges();
				this._checkpoint = context.server.checkpoint();
			}

			// Show the overlay and support automatic closure when the overlay is clicked
			if (Cognito.showOverlay && Dialog.activeDialogs.length == 0) {
				Cognito.showOverlay(function () {
					var dialogs = Dialog.activeDialogs;
					Dialog.activeDialogs = [];
					for (var d = dialogs.length - 1; d >= 0; d--) {
						var dialog = dialogs[d];
						if (dialog._options.closeOnOverlayClick)
							dialog.close(true);
					}
				});
			}

			// Set the width and height
			this._dialog.css({
				"max-width": this._options.width + ($.isNumeric(this._options.width) ? "px" : "")
			});

			// Show the dialog
			this._dialog.css("opacity", 1)
									.addClass("is-active")
									.fadeIn();

			// Fade in an overlay above the active dialog, if stacking
			if (Dialog.activeDialogs.length > 0) {
				var dialog = Dialog.activeDialogs[Dialog.activeDialogs.length - 1];
				$(dialog._dialog).css("z-index", zModalOverlay - 1);
				dialog._dialog.find(".c-modal-overlay").fadeIn();
			}

			// Add the dialog to the active dialog stack
			Dialog.activeDialogs.push(this);

			this._dialogVisible = true;

			// Indicate that the dialog was opened
			return true;
		},
		close: function (isCancel) {

			if (this.frame) {
				var frame = this.frame;

				// Clean up the iframe
				// http://stackoverflow.com/questions/12128458/iframes-and-memory-management-in-javascript
				frame.src = "about:blank";
				setTimeout(function () {
					frame.contentWindow.location.reload();
					setTimeout(function () {
						$(frame).remove();
					}, 1000);
				});

				delete this.frame;
			}

			if ($('.c-modal.is-active, .c-modal[style*="display: block"]').length === 1)
				$('body').removeClass('c-modal-active');

			var that = this;
			if (this._checkpoint && this._options.checkpoint) {
				if (isCancel)
					context.server.rollback(this._checkpoint);
				context.server.stopCapturingChanges();
			}

			if (isCancel && this._options.cancel) {
				this._options.cancel.call(this);
			}

			if (typeof (this._options.onClose) === "function")
				this._options.onClose.call(this);

			$(".c-modal-button:visible").removeClass("c-modal-button-executing");
			this._dialog.removeClass("is-active");
			this._dialog.fadeOut(function () { that._isExecuting = new ExoWeb.Signal(); that._dialog.find(".c-modal-overlay").hide() });

			Dialog.activeDialogs.pop(this);

			// Fade out the overlay above the active dialog, if stacking
			if (Dialog.activeDialogs.length > 0) {
				var dialog = Dialog.activeDialogs[Dialog.activeDialogs.length - 1];
				$(dialog._dialog).css("z-index", "");
				dialog._dialog.find(".c-modal-overlay").fadeOut();
			}

			// Hide the overlay, if this is the final dialog
			else
				window.Cognito && Cognito.hideOverlay();

			this._dialogVisible = false;
		},
		pending: function (callback) {
			return this._isExecuting.pending(callback);
		},
		orPending: function (callback) {
			return this._isExecuting.orPending(callback);
		}
	};

	var that = this;

	// For some unknown reason, the event is being bounded multiple times.  To ensure the event is only bounded once, the event is unbind before it is bind.
	$(document)
		.on("keyup.cognito.dialog", function (e) {
			if (Dialog.activeDialogs.length > 0) {
				var dialog = Dialog.activeDialogs[Dialog.activeDialogs.length - 1];

				if (e.altKey || e.ctrlKey)
					return;

				switch (e.keyCode) {
					case 27:
						if (dialog._options.closeOnEscape) {
							dialog.close.call(dialog, true);
							e.preventDefault();
						}
						break;
					default:
						if (!$(e.target).is("input, textarea")) {
							var charCode = e.which || e.keyCode;
							var char = String.fromCharCode(charCode).toLowerCase();
							if (dialog._accelerators[char] && !dialog._accelerators[char].is("[disabled], .disabled"))
								dialog._accelerators[char].trigger("click");
							e.preventDefault();
						}
				}
			}
		})

		// Hide the dialog when the title bar is clicked (so users can peek under the dialog)
		.on("mousedown.cognito.dialog", ".c-modal-title-bar", function (event) {
			if (Dialog.activeDialogs.length > 0 && $(event.srcElement).closest(".c-modal-close").length == 0) {
				var dialog = Dialog.activeDialogs[Dialog.activeDialogs.length - 1];
				$(dialog._dialog).css("opacity", 0.05);
				$(document).on("mousemove.cognito.dialog", function () {
					$(dialog._dialog).css("opacity", 1);
					$(document).off("mousemove.cognito.dialog");
				});
			}
		})

		// Hide the dialog when the title bar is clicked (so users can peek under the dialog)
		.on("click", ".c-modal-overlay", function () {
			if (Dialog.activeDialogs.length > 0) {
				var dialog = Dialog.activeDialogs[Dialog.activeDialogs.length - 1];
				dialog.close(true);
			}
		});

	$.fn.dialog = function (options) {
		try {
			// Determine if the page is hosted in an iframe dialog.
			var frame = window.frameElement;
			if (frame && $(frame.parentElement).is(".c-modal-content-container")) {
				// Determine if the iframe's parent window contains the Cognito jQuery dialog function.
				if (window.parent.$ && window.parent.$.fn && window.parent.$.fn.dialog) {

					// Convert content selectors into text before promoting to parent window
					if (options.contentSelector) {
						options.text = $(options.contentSelector).html();
						options.contentSelector = null;
					}

					// Call the dialog function on the parent window so that all dialogs open in
					// the outermost window, so they don't have to be nested within one another.
					return window.parent.$.fn.dialog(options);
				}
			}
		} catch (e) {
			// Ignore potential cross-domain errors when attempting to access the frame element...
		}

		var dialog = new Dialog(options);

		// Called in the context of a selector
		if (this.length > 0) {
			return this.each(function () {
				var $this = $(this);
				var data = $this.data("cognito.dialog");

				if (!data) $this.data("cognito.dialog", (data = dialog));

				data._bindTo(this);
			});
		}

		// Called in the context of an assignment
		var viewport = $((options.viewport || (options.viewport = document.body)));
		var storage = viewport.data("cognito.dialog");
		if (!storage) viewport.data("cognito.dialog", (storage = []));

		var data = dialog;
		storage.push(data);

		return data;
	};

	$.fn.dialog.constructor = Dialog;
})(jQuery);

/***/ }),

/***/ "../../../Cognito.Services/Scripts/jquery/jquery-1.8.3.min.js":
/*!*****************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/jquery/jquery-1.8.3.min.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;﻿/*!
 * jQuery JavaScript Library v1.8.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Tue Nov 13 2012 08:20:33 GMT-0500 (Eastern Standard Time)
 */
(function(n,t){function hf(n){var t=yt[n]={};return i.each(n.split(h),function(n,i){t[i]=!0}),t}function li(n,r,u){if(u===t&&n.nodeType===1){var f="data-"+r.replace(ci,"-$1").toLowerCase();if(u=n.getAttribute(f),typeof u=="string"){try{u=u==="true"?!0:u==="false"?!1:u==="null"?null:+u+""===u?+u:hi.test(u)?i.parseJSON(u):u}catch(e){}i.data(n,r,u)}else u=t}return u}function pt(n){for(var t in n)if((t!=="data"||!i.isEmptyObject(n[t]))&&t!=="toJSON")return!1;return!0}function v(){return!1}function it(){return!0}function k(n){return!n||!n.parentNode||n.parentNode.nodeType===11}function nr(n,t){do n=n[t];while(n&&n.nodeType!==1);return n}function tr(n,t,r){if(t=t||0,i.isFunction(t))return i.grep(n,function(n,i){var u=!!t.call(n,i,n);return u===r});if(t.nodeType)return i.grep(n,function(n){return n===t===r});if(typeof t=="string"){var u=i.grep(n,function(n){return n.nodeType===1});if(df.test(t))return i.filter(t,u,!r);t=i.filter(t,u)}return i.grep(n,function(n){return i.inArray(n,t)>=0===r})}function ir(n){var i=rr.split("|"),t=n.createDocumentFragment();if(t.createElement)while(i.length)t.createElement(i.pop());return t}function oe(n,t){return n.getElementsByTagName(t)[0]||n.appendChild(n.ownerDocument.createElement(t))}function hr(n,t){if(t.nodeType===1&&i.hasData(n)){var u,f,o,s=i._data(n),r=i._data(t,s),e=s.events;if(e){delete r.handle;r.events={};for(u in e)for(f=0,o=e[u].length;f<o;f++)i.event.add(t,u,e[u][f])}r.data&&(r.data=i.extend({},r.data))}}function cr(n,t){var r;t.nodeType===1&&(t.clearAttributes&&t.clearAttributes(),t.mergeAttributes&&t.mergeAttributes(n),r=t.nodeName.toLowerCase(),r==="object"?(t.parentNode&&(t.outerHTML=n.outerHTML),i.support.html5Clone&&n.innerHTML&&!i.trim(t.innerHTML)&&(t.innerHTML=n.innerHTML)):r==="input"&&er.test(n.type)?(t.defaultChecked=t.checked=n.checked,t.value!==n.value&&(t.value=n.value)):r==="option"?t.selected=n.defaultSelected:r==="input"||r==="textarea"?t.defaultValue=n.defaultValue:r==="script"&&t.text!==n.text&&(t.text=n.text),t.removeAttribute(i.expando))}function rt(n){return typeof n.getElementsByTagName!="undefined"?n.getElementsByTagName("*"):typeof n.querySelectorAll!="undefined"?n.querySelectorAll("*"):[]}function lr(n){er.test(n.type)&&(n.defaultChecked=n.checked)}function pr(n,t){if(t in n)return t;for(var r=t.charAt(0).toUpperCase()+t.slice(1),u=t,i=yr.length;i--;)if(t=yr[i]+r,t in n)return t;return u}function ft(n,t){return n=t||n,i.css(n,"display")==="none"||!i.contains(n.ownerDocument,n)}function wr(n,t){for(var r,o,e=[],f=0,s=n.length;f<s;f++)(r=n[f],r.style)&&(e[f]=i._data(r,"olddisplay"),t?(e[f]||r.style.display!=="none"||(r.style.display=""),r.style.display===""&&ft(r)&&(e[f]=i._data(r,"olddisplay",gr(r.nodeName)))):(o=u(r,"display"),e[f]||o==="none"||i._data(r,"olddisplay",o)));for(f=0;f<s;f++)(r=n[f],r.style)&&(t&&r.style.display!=="none"&&r.style.display!==""||(r.style.display=t?e[f]||"":"none"));return n}function br(n,t,i){var r=le.exec(t);return r?Math.max(0,r[1]-(i||0))+(r[2]||"px"):t}function kr(n,t,r,f){for(var e=r===(f?"border":"content")?4:t==="width"?1:0,o=0;e<4;e+=2)r==="margin"&&(o+=i.css(n,r+c[e],!0)),f?(r==="content"&&(o-=parseFloat(u(n,"padding"+c[e]))||0),r!=="margin"&&(o-=parseFloat(u(n,"border"+c[e]+"Width"))||0)):(o+=parseFloat(u(n,"padding"+c[e]))||0,r!=="padding"&&(o+=parseFloat(u(n,"border"+c[e]+"Width"))||0));return o}function dr(n,t,r){var f=t==="width"?n.offsetWidth:n.offsetHeight,e=!0,o=i.support.boxSizing&&i.css(n,"boxSizing")==="border-box";if(f<=0||f==null){if(f=u(n,t),(f<0||f==null)&&(f=n.style[t]),ut.test(f))return f;e=o&&(i.support.boxSizingReliable||f===n.style[t]);f=parseFloat(f)||0}return f+kr(n,t,r||(o?"border":"content"),e)+"px"}function gr(n){if(ni[n])return ni[n];var f=i("<"+n+">").appendTo(r.body),t=f.css("display");return f.remove(),(t==="none"||t==="")&&(y=r.body.appendChild(y||i.extend(r.createElement("iframe"),{frameBorder:0,width:0,height:0})),p&&y.createElement||(p=(y.contentWindow||y.contentDocument).document,p.write("<!doctype html><html><body>"),p.close()),f=p.body.appendChild(p.createElement(n)),t=u(f,"display"),r.body.removeChild(y)),ni[n]=t,t}function ti(n,t,r,u){var f;if(i.isArray(t))i.each(t,function(t,i){r||we.test(n)?u(n,i):ti(n+"["+(typeof i=="object"?t:"")+"]",i,r,u)});else if(r||i.type(t)!=="object")u(n,t);else for(f in t)ti(n+"["+f+"]",t[f],r,u)}function eu(n){return function(t,r){typeof t!="string"&&(r=t,t="*");var u,o,f,s=t.toLowerCase().split(h),e=0,c=s.length;if(i.isFunction(r))for(;e<c;e++)u=s[e],f=/^\+/.test(u),f&&(u=u.substr(1)||"*"),o=n[u]=n[u]||[],o[f?"unshift":"push"](r)}}function et(n,i,r,u,f,e){f=f||i.dataTypes[0];e=e||{};e[f]=!0;for(var o,s=n[f],h=0,l=s?s.length:0,c=n===ii;h<l&&(c||!o);h++)o=s[h](i,r,u),typeof o=="string"&&(!c||e[o]?o=t:(i.dataTypes.unshift(o),o=et(n,i,r,u,o,e)));return!c&&o||e["*"]||(o=et(n,i,r,u,"*",e)),o}function ou(n,r){var u,f,e=i.ajaxSettings.flatOptions||{};for(u in r)r[u]!==t&&((e[u]?n:f||(f={}))[u]=r[u]);f&&i.extend(!0,n,f)}function uo(n,i,r){var o,u,e,s,h=n.contents,f=n.dataTypes,c=n.responseFields;for(u in c)u in r&&(i[c[u]]=r[u]);while(f[0]==="*")f.shift(),o===t&&(o=n.mimeType||i.getResponseHeader("content-type"));if(o)for(u in h)if(h[u]&&h[u].test(o)){f.unshift(u);break}if(f[0]in r)e=f[0];else{for(u in r){if(!f[0]||n.converters[u+" "+f[0]]){e=u;break}s||(s=u)}e=e||s}if(e)return e!==f[0]&&f.unshift(e),r[e]}function fo(n,t){var i,o,r,e,s=n.dataTypes.slice(),f=s[0],u={},h=0;if(n.dataFilter&&(t=n.dataFilter(t,n.dataType)),s[1])for(i in n.converters)u[i.toLowerCase()]=n.converters[i];for(;r=s[++h];)if(r!=="*"){if(f!=="*"&&f!==r){if(i=u[f+" "+r]||u["* "+r],!i)for(o in u)if(e=o.split(" "),e[1]===r&&(i=u[f+" "+e[0]]||u["* "+e[0]],i)){i===!0?i=u[o]:u[o]!==!0&&(r=e[0],s.splice(h--,0,r));break}if(i!==!0)if(i&&n.throws)t=i(t);else try{t=i(t)}catch(c){return{state:"parsererror",error:i?c:"No conversion from "+f+" to "+r}}}f=r}return{state:"success",data:t}}function cu(){try{return new n.XMLHttpRequest}catch(t){}}function so(){try{return new n.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function lu(){return setTimeout(function(){b=t},0),b=i.now()}function ao(n,t){i.each(t,function(t,i){for(var u=(d[t]||[]).concat(d["*"]),r=0,f=u.length;r<f;r++)if(u[r].call(n,t,i))return})}function au(n,t,r){var e,o=0,c=ct.length,f=i.Deferred().always(function(){delete h.elem}),h=function(){for(var o=b||lu(),t=Math.max(0,u.startTime+u.duration-o),s=t/u.duration||0,i=1-s,r=0,e=u.tweens.length;r<e;r++)u.tweens[r].run(i);return f.notifyWith(n,[u,i,t]),i<1&&e?t:(f.resolveWith(n,[u]),!1)},u=f.promise({elem:n,props:i.extend({},t),opts:i.extend(!0,{specialEasing:{}},r),originalProperties:t,originalOptions:r,startTime:b||lu(),duration:r.duration,tweens:[],createTween:function(t,r){var f=i.Tween(n,u.opts,t,r,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(f),f},stop:function(t){for(var i=0,r=t?u.tweens.length:0;i<r;i++)u.tweens[i].run(1);return t?f.resolveWith(n,[u,t]):f.rejectWith(n,[u,t]),this}}),s=u.props;for(vo(s,u.opts.specialEasing);o<c;o++)if(e=ct[o].call(u,n,s,u.opts),e)return e;return ao(u,s),i.isFunction(u.opts.start)&&u.opts.start.call(n,u),i.fx.timer(i.extend(h,{anim:u,queue:u.opts.queue,elem:n})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function vo(n,t){var r,f,e,u,o;for(r in n)if(f=i.camelCase(r),e=t[f],u=n[r],i.isArray(u)&&(e=u[1],u=n[r]=u[0]),r!==f&&(n[f]=u,delete n[r]),o=i.cssHooks[f],o&&"expand"in o){u=o.expand(u);delete n[f];for(r in u)r in n||(n[r]=u[r],t[r]=e)}else t[f]=e}function yo(n,t,r){var o,u,a,v,s,y,l,f,b,h=this,e=n.style,p={},w=[],c=n.nodeType&&ft(n);r.queue||(f=i._queueHooks(n,"fx"),f.unqueued==null&&(f.unqueued=0,b=f.empty.fire,f.empty.fire=function(){f.unqueued||b()}),f.unqueued++,h.always(function(){h.always(function(){f.unqueued--;i.queue(n,"fx").length||f.empty.fire()})}));n.nodeType===1&&("height"in t||"width"in t)&&(r.overflow=[e.overflow,e.overflowX,e.overflowY],i.css(n,"display")==="inline"&&i.css(n,"float")==="none"&&(i.support.inlineBlockNeedsLayout&&gr(n.nodeName)!=="inline"?e.zoom=1:e.display="inline-block"));r.overflow&&(e.overflow="hidden",i.support.shrinkWrapBlocks||h.done(function(){e.overflow=r.overflow[0];e.overflowX=r.overflow[1];e.overflowY=r.overflow[2]}));for(o in t)if(a=t[o],ho.exec(a)){if(delete t[o],y=y||a==="toggle",a===(c?"hide":"show"))continue;w.push(o)}if(v=w.length,v)for(s=i._data(n,"fxshow")||i._data(n,"fxshow",{}),("hidden"in s)&&(c=s.hidden),y&&(s.hidden=!c),c?i(n).show():h.done(function(){i(n).hide()}),h.done(function(){var t;i.removeData(n,"fxshow",!0);for(t in p)i.style(n,t,p[t])}),o=0;o<v;o++)u=w[o],l=h.createTween(u,c?s[u]:0),p[u]=s[u]||i.style(n,u),u in s||(s[u]=l.start,c&&(l.end=l.start,l.start=u==="width"||u==="height"?1:0))}function f(n,t,i,r,u){return new f.prototype.init(n,t,i,r,u)}function lt(n,t){var r,i={height:n},u=0;for(t=t?1:0;u<4;u+=2-t)r=c[u],i["margin"+r]=i["padding"+r]=n;return t&&(i.opacity=i.width=n),i}function vu(n){return i.isWindow(n)?n:n.nodeType===9?n.defaultView||n.parentWindow:!1}var ui,g,r=n.document,yu=n.location,pu=n.navigator,wu=n.jQuery,bu=n.$,fi=Array.prototype.push,o=Array.prototype.slice,ei=Array.prototype.indexOf,ku=Object.prototype.toString,at=Object.prototype.hasOwnProperty,vt=String.prototype.trim,i=function(n,t){return new i.fn.init(n,t,ui)},nt=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,du=/\S/,h=/\s+/,gu=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,nf=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,oi=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,tf=/^[\],:{}\s]*$/,rf=/(?:^|:|,)(?:\s*\[)+/g,uf=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,ff=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,ef=/^-ms-/,of=/-([\da-z])/gi,sf=function(n,t){return(t+"").toUpperCase()},tt=function(){r.addEventListener?(r.removeEventListener("DOMContentLoaded",tt,!1),i.ready()):r.readyState==="complete"&&(r.detachEvent("onreadystatechange",tt),i.ready())},si={},yt,hi,ci,w,st,hu,ri;i.fn=i.prototype={constructor:i,init:function(n,u,f){var e,o,s;if(!n)return this;if(n.nodeType)return this.context=this[0]=n,this.length=1,this;if(typeof n=="string"){if(e=n.charAt(0)==="<"&&n.charAt(n.length-1)===">"&&n.length>=3?[null,n,null]:nf.exec(n),e&&(e[1]||!u)){if(e[1])return u=u instanceof i?u[0]:u,s=u&&u.nodeType?u.ownerDocument||u:r,n=i.parseHTML(e[1],s,!0),oi.test(e[1])&&i.isPlainObject(u)&&this.attr.call(n,u,!0),i.merge(this,n);if(o=r.getElementById(e[2]),o&&o.parentNode){if(o.id!==e[2])return f.find(n);this.length=1;this[0]=o}return this.context=r,this.selector=n,this}return!u||u.jquery?(u||f).find(n):this.constructor(u).find(n)}return i.isFunction(n)?f.ready(n):(n.selector!==t&&(this.selector=n.selector,this.context=n.context),i.makeArray(n,this))},selector:"",jquery:"1.8.3",length:0,size:function(){return this.length},toArray:function(){return o.call(this)},get:function(n){return n==null?this.toArray():n<0?this[this.length+n]:this[n]},pushStack:function(n,t,r){var u=i.merge(this.constructor(),n);return u.prevObject=this,u.context=this.context,t==="find"?u.selector=this.selector+(this.selector?" ":"")+r:t&&(u.selector=this.selector+"."+t+"("+r+")"),u},each:function(n,t){return i.each(this,n,t)},ready:function(n){return i.ready.promise().done(n),this},eq:function(n){return n=+n,n===-1?this.slice(n):this.slice(n,n+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(o.apply(this,arguments),"slice",o.call(arguments).join(","))},map:function(n){return this.pushStack(i.map(this,function(t,i){return n.call(t,i,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:fi,sort:[].sort,splice:[].splice};i.fn.init.prototype=i.fn;i.extend=i.fn.extend=function(){var o,e,u,r,s,h,n=arguments[0]||{},f=1,l=arguments.length,c=!1;for(typeof n=="boolean"&&(c=n,n=arguments[1]||{},f=2),typeof n=="object"||i.isFunction(n)||(n={}),l===f&&(n=this,--f);f<l;f++)if((o=arguments[f])!=null)for(e in o)(u=n[e],r=o[e],n!==r)&&(c&&r&&(i.isPlainObject(r)||(s=i.isArray(r)))?(s?(s=!1,h=u&&i.isArray(u)?u:[]):h=u&&i.isPlainObject(u)?u:{},n[e]=i.extend(c,h,r)):r!==t&&(n[e]=r));return n};i.extend({noConflict:function(t){return n.$===i&&(n.$=bu),t&&n.jQuery===i&&(n.jQuery=wu),i},isReady:!1,readyWait:1,holdReady:function(n){n?i.readyWait++:i.ready(!0)},ready:function(n){if(n===!0?!--i.readyWait:!i.isReady){if(!r.body)return setTimeout(i.ready,1);(i.isReady=!0,n!==!0&&--i.readyWait>0)||(g.resolveWith(r,[i]),i.fn.trigger&&i(r).trigger("ready").off("ready"))}},isFunction:function(n){return i.type(n)==="function"},isArray:Array.isArray||function(n){return i.type(n)==="array"},isWindow:function(n){return n!=null&&n==n.window},isNumeric:function(n){return!isNaN(parseFloat(n))&&isFinite(n)},type:function(n){return n==null?String(n):si[ku.call(n)]||"object"},isPlainObject:function(n){if(!n||i.type(n)!=="object"||n.nodeType||i.isWindow(n))return!1;try{if(n.constructor&&!at.call(n,"constructor")&&!at.call(n.constructor.prototype,"isPrototypeOf"))return!1}catch(u){return!1}for(var r in n);return r===t||at.call(n,r)},isEmptyObject:function(n){for(var t in n)return!1;return!0},error:function(n){throw new Error(n);},parseHTML:function(n,t,u){var f;return!n||typeof n!="string"?null:(typeof t=="boolean"&&(u=t,t=0),t=t||r,f=oi.exec(n))?[t.createElement(f[1])]:(f=i.buildFragment([n],t,u?null:[]),i.merge([],(f.cacheable?i.clone(f.fragment):f.fragment).childNodes))},parseJSON:function(t){if(!t||typeof t!="string")return null;if(t=i.trim(t),n.JSON&&n.JSON.parse)return n.JSON.parse(t);if(tf.test(t.replace(uf,"@").replace(ff,"]").replace(rf,"")))return new Function("return "+t)();i.error("Invalid JSON: "+t)},parseXML:function(r){var u,f;if(!r||typeof r!="string")return null;try{n.DOMParser?(f=new DOMParser,u=f.parseFromString(r,"text/xml")):(u=new ActiveXObject("Microsoft.XMLDOM"),u.async="false",u.loadXML(r))}catch(e){u=t}return u&&u.documentElement&&!u.getElementsByTagName("parsererror").length||i.error("Invalid XML: "+r),u},noop:function(){},globalEval:function(t){t&&du.test(t)&&(n.execScript||function(t){n.eval.call(n,t)})(t)},camelCase:function(n){return n.replace(ef,"ms-").replace(of,sf)},nodeName:function(n,t){return n.nodeName&&n.nodeName.toLowerCase()===t.toLowerCase()},each:function(n,r,u){var f,e=0,o=n.length,s=o===t||i.isFunction(n);if(u){if(s){for(f in n)if(r.apply(n[f],u)===!1)break}else for(;e<o;)if(r.apply(n[e++],u)===!1)break}else if(s){for(f in n)if(r.call(n[f],f,n[f])===!1)break}else for(;e<o;)if(r.call(n[e],e,n[e++])===!1)break;return n},trim:vt&&!vt.call("﻿ ")?function(n){return n==null?"":vt.call(n)}:function(n){return n==null?"":(n+"").replace(gu,"")},makeArray:function(n,t){var r,u=t||[];return n!=null&&(r=i.type(n),n.length==null||r==="string"||r==="function"||r==="regexp"||i.isWindow(n)?fi.call(u,n):i.merge(u,n)),u},inArray:function(n,t,i){var r;if(t){if(ei)return ei.call(t,n,i);for(r=t.length,i=i?i<0?Math.max(0,r+i):i:0;i<r;i++)if(i in t&&t[i]===n)return i}return-1},merge:function(n,i){var f=i.length,u=n.length,r=0;if(typeof f=="number")for(;r<f;r++)n[u++]=i[r];else while(i[r]!==t)n[u++]=i[r++];return n.length=u,n},grep:function(n,t,i){var u,f=[],r=0,e=n.length;for(i=!!i;r<e;r++)u=!!t(n[r],r),i!==u&&f.push(n[r]);return f},map:function(n,r,u){var f,h,e=[],s=0,o=n.length,c=n instanceof i||o!==t&&typeof o=="number"&&(o>0&&n[0]&&n[o-1]||o===0||i.isArray(n));if(c)for(;s<o;s++)f=r(n[s],s,u),f!=null&&(e[e.length]=f);else for(h in n)f=r(n[h],h,u),f!=null&&(e[e.length]=f);return e.concat.apply([],e)},guid:1,proxy:function(n,r){var f,e,u;return(typeof r=="string"&&(f=n[r],r=n,n=f),!i.isFunction(n))?t:(e=o.call(arguments,2),u=function(){return n.apply(r,e.concat(o.call(arguments)))},u.guid=n.guid=n.guid||i.guid++,u)},access:function(n,r,u,f,e,o,s){var c,l=u==null,h=0,a=n.length;if(u&&typeof u=="object"){for(h in u)i.access(n,r,h,u[h],1,o,f);e=1}else if(f!==t){if(c=s===t&&i.isFunction(f),l&&(c?(c=r,r=function(n,t,r){return c.call(i(n),r)}):(r.call(n,f),r=null)),r)for(;h<a;h++)r(n[h],u,c?f.call(n[h],h,r(n[h],u)):f,s);e=1}return e?n:l?r.call(n):a?r(n[0],u):o},now:function(){return(new Date).getTime()}});i.ready.promise=function(t){if(!g)if(g=i.Deferred(),r.readyState==="complete")setTimeout(i.ready,1);else if(r.addEventListener)r.addEventListener("DOMContentLoaded",tt,!1),n.addEventListener("load",i.ready,!1);else{r.attachEvent("onreadystatechange",tt);n.attachEvent("onload",i.ready);var u=!1;try{u=n.frameElement==null&&r.documentElement}catch(e){}u&&u.doScroll&&function f(){if(!i.isReady){try{u.doScroll("left")}catch(n){return setTimeout(f,50)}i.ready()}}()}return g.promise(t)};i.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(n,t){si["[object "+t+"]"]=t.toLowerCase()});ui=i(r);yt={};i.Callbacks=function(n){n=typeof n=="string"?yt[n]||hf(n):i.extend({},n);var f,c,o,l,s,e,r=[],u=!n.once&&[],a=function(t){for(f=n.memory&&t,c=!0,e=l||0,l=0,s=r.length,o=!0;r&&e<s;e++)if(r[e].apply(t[0],t[1])===!1&&n.stopOnFalse){f=!1;break}o=!1;r&&(u?u.length&&a(u.shift()):f?r=[]:h.disable())},h={add:function(){if(r){var t=r.length;(function u(t){i.each(t,function(t,f){var e=i.type(f);e==="function"?n.unique&&h.has(f)||r.push(f):f&&f.length&&e!=="string"&&u(f)})})(arguments);o?s=r.length:f&&(l=t,a(f))}return this},remove:function(){return r&&i.each(arguments,function(n,t){for(var u;(u=i.inArray(t,r,u))>-1;)r.splice(u,1),o&&(u<=s&&s--,u<=e&&e--)}),this},has:function(n){return i.inArray(n,r)>-1},empty:function(){return r=[],this},disable:function(){return r=u=f=t,this},disabled:function(){return!r},lock:function(){return u=t,f||h.disable(),this},locked:function(){return!u},fireWith:function(n,t){return t=t||[],t=[n,t.slice?t.slice():t],r&&(!c||u)&&(o?u.push(t):a(t)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!c}};return h};i.extend({Deferred:function(n){var u=[["resolve","done",i.Callbacks("once memory"),"resolved"],["reject","fail",i.Callbacks("once memory"),"rejected"],["notify","progress",i.Callbacks("memory")]],f="pending",r={state:function(){return f},always:function(){return t.done(arguments).fail(arguments),this},then:function(){var n=arguments;return i.Deferred(function(r){i.each(u,function(u,f){var e=f[0],o=n[u];t[f[1]](i.isFunction(o)?function(){var n=o.apply(this,arguments);n&&i.isFunction(n.promise)?n.promise().done(r.resolve).fail(r.reject).progress(r.notify):r[e+"With"](this===t?r:this,[n])}:r[e])});n=null}).promise()},promise:function(n){return n!=null?i.extend(n,r):r}},t={};return r.pipe=r.then,i.each(u,function(n,i){var e=i[2],o=i[3];r[i[1]]=e.add;o&&e.add(function(){f=o},u[n^1][2].disable,u[2][2].lock);t[i[0]]=e.fire;t[i[0]+"With"]=e.fireWith}),r.promise(t),n&&n.call(t,t),t},when:function(n){var t=0,u=o.call(arguments),r=u.length,e=r!==1||n&&i.isFunction(n.promise)?r:0,f=e===1?n:i.Deferred(),c=function(n,t,i){return function(r){t[n]=this;i[n]=arguments.length>1?o.call(arguments):r;i===s?f.notifyWith(t,i):--e||f.resolveWith(t,i)}},s,l,h;if(r>1)for(s=new Array(r),l=new Array(r),h=new Array(r);t<r;t++)u[t]&&i.isFunction(u[t].promise)?u[t].promise().done(c(t,h,u)).fail(f.reject).progress(c(t,l,s)):--e;return e||f.resolveWith(h,u),f.promise()}});i.support=function(){var u,h,e,c,l,f,o,a,v,s,y,t=r.createElement("div");if(t.setAttribute("className","t"),t.innerHTML="  <link/><table><\/table><a href='/a'>a<\/a><input type='checkbox'/>",h=t.getElementsByTagName("*"),e=t.getElementsByTagName("a")[0],!h||!e||!h.length)return{};c=r.createElement("select");l=c.appendChild(r.createElement("option"));f=t.getElementsByTagName("input")[0];e.style.cssText="top:1px;float:left;opacity:.5";u={leadingWhitespace:t.firstChild.nodeType===3,tbody:!t.getElementsByTagName("tbody").length,htmlSerialize:!!t.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.5/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:f.value==="on",optSelected:l.selected,getSetAttribute:t.className!=="t",enctype:!!r.createElement("form").enctype,html5Clone:r.createElement("nav").cloneNode(!0).outerHTML!=="<:nav><\/:nav>",boxModel:r.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1};f.checked=!0;u.noCloneChecked=f.cloneNode(!0).checked;c.disabled=!0;u.optDisabled=!l.disabled;try{delete t.test}catch(p){u.deleteExpando=!1}if(!t.addEventListener&&t.attachEvent&&t.fireEvent&&(t.attachEvent("onclick",y=function(){u.noCloneEvent=!1}),t.cloneNode(!0).fireEvent("onclick"),t.detachEvent("onclick",y)),f=r.createElement("input"),f.value="t",f.setAttribute("type","radio"),u.radioValue=f.value==="t",f.setAttribute("checked","checked"),f.setAttribute("name","t"),t.appendChild(f),o=r.createDocumentFragment(),o.appendChild(t.lastChild),u.checkClone=o.cloneNode(!0).cloneNode(!0).lastChild.checked,u.appendChecked=f.checked,o.removeChild(f),o.appendChild(t),t.attachEvent)for(v in{submit:!0,change:!0,focusin:!0})a="on"+v,s=a in t,s||(t.setAttribute(a,"return;"),s=typeof t[a]=="function"),u[v+"Bubbles"]=s;return i(function(){var i,t,f,e,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",o=r.getElementsByTagName("body")[0];o&&(i=r.createElement("div"),i.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",o.insertBefore(i,o.firstChild),t=r.createElement("div"),i.appendChild(t),t.innerHTML="<table><tr><td><\/td><td>t<\/td><\/tr><\/table>",f=t.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",s=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",u.reliableHiddenOffsets=s&&f[0].offsetHeight===0,t.innerHTML="",t.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",u.boxSizing=t.offsetWidth===4,u.doesNotIncludeMarginInBodyOffset=o.offsetTop!==1,n.getComputedStyle&&(u.pixelPosition=(n.getComputedStyle(t,null)||{}).top!=="1%",u.boxSizingReliable=(n.getComputedStyle(t,null)||{width:"4px"}).width==="4px",e=r.createElement("div"),e.style.cssText=t.style.cssText=h,e.style.marginRight=e.style.width="0",t.style.width="1px",t.appendChild(e),u.reliableMarginRight=!parseFloat((n.getComputedStyle(e,null)||{}).marginRight)),typeof t.style.zoom!="undefined"&&(t.innerHTML="",t.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",u.inlineBlockNeedsLayout=t.offsetWidth===3,t.style.display="block",t.style.overflow="visible",t.innerHTML="<div><\/div>",t.firstChild.style.width="5px",u.shrinkWrapBlocks=t.offsetWidth!==3,i.style.zoom=1),o.removeChild(i),i=t=f=e=null)}),o.removeChild(t),h=e=c=l=f=o=t=null,u}();hi=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/;ci=/([A-Z])/g;i.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(i.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(n){return n=n.nodeType?i.cache[n[i.expando]]:n[i.expando],!!n&&!pt(n)},data:function(n,r,u,f){if(i.acceptData(n)){var s,h,c=i.expando,a=typeof r=="string",l=n.nodeType,o=l?i.cache:n,e=l?n[c]:n[c]&&c;if(e&&o[e]&&(f||o[e].data)||!a||u!==t)return e||(l?n[c]=e=i.deletedIds.pop()||i.guid++:e=c),o[e]||(o[e]={},l||(o[e].toJSON=i.noop)),(typeof r=="object"||typeof r=="function")&&(f?o[e]=i.extend(o[e],r):o[e].data=i.extend(o[e].data,r)),s=o[e],f||(s.data||(s.data={}),s=s.data),u!==t&&(s[i.camelCase(r)]=u),a?(h=s[r],h==null&&(h=s[i.camelCase(r)])):h=s,h}},removeData:function(n,t,r){if(i.acceptData(n)){var e,o,h,s=n.nodeType,u=s?i.cache:n,f=s?n[i.expando]:i.expando;if(u[f]){if(t&&(e=r?u[f]:u[f].data,e)){for(i.isArray(t)||(t in e?t=[t]:(t=i.camelCase(t),t=t in e?[t]:t.split(" "))),o=0,h=t.length;o<h;o++)delete e[t[o]];if(!(r?pt:i.isEmptyObject)(e))return}(r||(delete u[f].data,pt(u[f])))&&(s?i.cleanData([n],!0):i.support.deleteExpando||u!=u.window?delete u[f]:u[f]=null)}}},_data:function(n,t,r){return i.data(n,t,r,!0)},acceptData:function(n){var t=n.nodeName&&i.noData[n.nodeName.toLowerCase()];return!t||t!==!0&&n.getAttribute("classid")===t}});i.fn.extend({data:function(n,r){var u,s,h,o,l,e=this[0],c=0,f=null;if(n===t){if(this.length&&(f=i.data(e),e.nodeType===1&&!i._data(e,"parsedAttrs"))){for(h=e.attributes,l=h.length;c<l;c++)o=h[c].name,o.indexOf("data-")||(o=i.camelCase(o.substring(5)),li(e,o,f[o]));i._data(e,"parsedAttrs",!0)}return f}return typeof n=="object"?this.each(function(){i.data(this,n)}):(u=n.split(".",2),u[1]=u[1]?"."+u[1]:"",s=u[1]+"!",i.access(this,function(r){if(r===t)return f=this.triggerHandler("getData"+s,[u[0]]),f===t&&e&&(f=i.data(e,n),f=li(e,n,f)),f===t&&u[1]?this.data(u[0]):f;u[1]=r;this.each(function(){var t=i(this);t.triggerHandler("setData"+s,u);i.data(this,n,r);t.triggerHandler("changeData"+s,u)})},null,r,arguments.length>1,null,!1))},removeData:function(n){return this.each(function(){i.removeData(this,n)})}});i.extend({queue:function(n,t,r){var u;if(n)return t=(t||"fx")+"queue",u=i._data(n,t),r&&(!u||i.isArray(r)?u=i._data(n,t,i.makeArray(r)):u.push(r)),u||[]},dequeue:function(n,t){t=t||"fx";var r=i.queue(n,t),e=r.length,u=r.shift(),f=i._queueHooks(n,t),o=function(){i.dequeue(n,t)};u==="inprogress"&&(u=r.shift(),e--);u&&(t==="fx"&&r.unshift("inprogress"),delete f.stop,u.call(n,o,f));!e&&f&&f.empty.fire()},_queueHooks:function(n,t){var r=t+"queueHooks";return i._data(n,r)||i._data(n,r,{empty:i.Callbacks("once memory").add(function(){i.removeData(n,t+"queue",!0);i.removeData(n,r,!0)})})}});i.fn.extend({queue:function(n,r){var u=2;return(typeof n!="string"&&(r=n,n="fx",u--),arguments.length<u)?i.queue(this[0],n):r===t?this:this.each(function(){var t=i.queue(this,n,r);i._queueHooks(this,n);n==="fx"&&t[0]!=="inprogress"&&i.dequeue(this,n)})},dequeue:function(n){return this.each(function(){i.dequeue(this,n)})},delay:function(n,t){return n=i.fx?i.fx.speeds[n]||n:n,t=t||"fx",this.queue(t,function(t,i){var r=setTimeout(t,n);i.stop=function(){clearTimeout(r)}})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,r){var u,e=1,o=i.Deferred(),f=this,s=this.length,h=function(){--e||o.resolveWith(f,[f])};for(typeof n!="string"&&(r=n,n=t),n=n||"fx";s--;)u=i._data(f[s],n+"queueHooks"),u&&u.empty&&(e++,u.empty.add(h));return h(),o.promise(r)}});var s,ai,vi,yi=/[\t\r\n]/g,cf=/\r/g,lf=/^(?:button|input)$/i,af=/^(?:button|input|object|select|textarea)$/i,vf=/^a(?:rea|)$/i,pi=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,wi=i.support.getSetAttribute;i.fn.extend({attr:function(n,t){return i.access(this,i.attr,n,t,arguments.length>1)},removeAttr:function(n){return this.each(function(){i.removeAttr(this,n)})},prop:function(n,t){return i.access(this,i.prop,n,t,arguments.length>1)},removeProp:function(n){return n=i.propFix[n]||n,this.each(function(){try{this[n]=t;delete this[n]}catch(i){}})},addClass:function(n){var r,f,o,t,e,u,s;if(i.isFunction(n))return this.each(function(t){i(this).addClass(n.call(this,t,this.className))});if(n&&typeof n=="string")for(r=n.split(h),f=0,o=this.length;f<o;f++)if(t=this[f],t.nodeType===1)if(t.className||r.length!==1){for(e=" "+t.className+" ",u=0,s=r.length;u<s;u++)e.indexOf(" "+r[u]+" ")<0&&(e+=r[u]+" ");t.className=i.trim(e)}else t.className=n;return this},removeClass:function(n){var e,r,u,f,s,o,c;if(i.isFunction(n))return this.each(function(t){i(this).removeClass(n.call(this,t,this.className))});if(n&&typeof n=="string"||n===t)for(e=(n||"").split(h),o=0,c=this.length;o<c;o++)if(u=this[o],u.nodeType===1&&u.className){for(r=(" "+u.className+" ").replace(yi," "),f=0,s=e.length;f<s;f++)while(r.indexOf(" "+e[f]+" ")>=0)r=r.replace(" "+e[f]+" "," ");u.className=n?i.trim(r):""}return this},toggleClass:function(n,t){var r=typeof n,u=typeof t=="boolean";return i.isFunction(n)?this.each(function(r){i(this).toggleClass(n.call(this,r,this.className,t),t)}):this.each(function(){if(r==="string")for(var f,s=0,o=i(this),e=t,c=n.split(h);f=c[s++];)e=u?e:!o.hasClass(f),o[e?"addClass":"removeClass"](f);else(r==="undefined"||r==="boolean")&&(this.className&&i._data(this,"__className__",this.className),this.className=this.className||n===!1?"":i._data(this,"__className__")||"")})},hasClass:function(n){for(var i=" "+n+" ",t=0,r=this.length;t<r;t++)if(this[t].nodeType===1&&(" "+this[t].className+" ").replace(yi," ").indexOf(i)>=0)return!0;return!1},val:function(n){var r,u,e,f=this[0];return arguments.length?(e=i.isFunction(n),this.each(function(u){var f,o=i(this);this.nodeType===1&&(f=e?n.call(this,u,o.val()):n,f==null?f="":typeof f=="number"?f+="":i.isArray(f)&&(f=i.map(f,function(n){return n==null?"":n+""})),r=i.valHooks[this.type]||i.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,f,"value")!==t||(this.value=f))})):f?(r=i.valHooks[f.type]||i.valHooks[f.nodeName.toLowerCase()],r&&"get"in r&&(u=r.get(f,"value"))!==t)?u:(u=f.value,typeof u=="string"?u.replace(cf,""):u==null?"":u):void 0}});i.extend({valHooks:{option:{get:function(n){var t=n.attributes.value;return!t||t.specified?n.value:n.text}},select:{get:function(n){for(var e,t,o=n.options,r=n.selectedIndex,u=n.type==="select-one"||r<0,s=u?null:[],h=u?r+1:o.length,f=r<0?h:u?r:0;f<h;f++)if(t=o[f],(t.selected||f===r)&&(i.support.optDisabled?!t.disabled:t.getAttribute("disabled")===null)&&(!t.parentNode.disabled||!i.nodeName(t.parentNode,"optgroup"))){if(e=i(t).val(),u)return e;s.push(e)}return s},set:function(n,t){var r=i.makeArray(t);return i(n).find("option").each(function(){this.selected=i.inArray(i(this).val(),r)>=0}),r.length||(n.selectedIndex=-1),r}}},attrFn:{},attr:function(n,r,u,f){var e,o,h,c=n.nodeType;if(n&&c!==3&&c!==8&&c!==2){if(f&&i.isFunction(i.fn[r]))return i(n)[r](u);if(typeof n.getAttribute=="undefined")return i.prop(n,r,u);if(h=c!==1||!i.isXMLDoc(n),h&&(r=r.toLowerCase(),o=i.attrHooks[r]||(pi.test(r)?ai:s)),u!==t){if(u===null){i.removeAttr(n,r);return}return o&&"set"in o&&h&&(e=o.set(n,u,r))!==t?e:(n.setAttribute(r,u+""),u)}return o&&"get"in o&&h&&(e=o.get(n,r))!==null?e:(e=n.getAttribute(r),e===null?t:e)}},removeAttr:function(n,t){var u,f,r,e,o=0;if(t&&n.nodeType===1)for(f=t.split(h);o<f.length;o++)r=f[o],r&&(u=i.propFix[r]||r,e=pi.test(r),e||i.attr(n,r,""),n.removeAttribute(wi?r:u),e&&u in n&&(n[u]=!1))},attrHooks:{type:{set:function(n,t){if(lf.test(n.nodeName)&&n.parentNode)i.error("type property can't be changed");else if(!i.support.radioValue&&t==="radio"&&i.nodeName(n,"input")){var r=n.value;return n.setAttribute("type",t),r&&(n.value=r),t}}},value:{get:function(n,t){return s&&i.nodeName(n,"button")?s.get(n,t):t in n?n.value:null},set:function(n,t,r){if(s&&i.nodeName(n,"button"))return s.set(n,t,r);n.value=t}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(n,r,u){var e,f,s,o=n.nodeType;if(n&&o!==3&&o!==8&&o!==2)return s=o!==1||!i.isXMLDoc(n),s&&(r=i.propFix[r]||r,f=i.propHooks[r]),u!==t?f&&"set"in f&&(e=f.set(n,u,r))!==t?e:n[r]=u:f&&"get"in f&&(e=f.get(n,r))!==null?e:n[r]},propHooks:{tabIndex:{get:function(n){var i=n.getAttributeNode("tabindex");return i&&i.specified?parseInt(i.value,10):af.test(n.nodeName)||vf.test(n.nodeName)&&n.href?0:t}}}});ai={get:function(n,r){var u,f=i.prop(n,r);return f===!0||typeof f!="boolean"&&(u=n.getAttributeNode(r))&&u.nodeValue!==!1?r.toLowerCase():t},set:function(n,t,r){var u;return t===!1?i.removeAttr(n,r):(u=i.propFix[r]||r,u in n&&(n[u]=!0),n.setAttribute(r,r.toLowerCase())),r}};wi||(vi={name:!0,id:!0,coords:!0},s=i.valHooks.button={get:function(n,i){var r;return r=n.getAttributeNode(i),r&&(vi[i]?r.value!=="":r.specified)?r.value:t},set:function(n,t,i){var u=n.getAttributeNode(i);return u||(u=r.createAttribute(i),n.setAttributeNode(u)),u.value=t+""}},i.each(["width","height"],function(n,t){i.attrHooks[t]=i.extend(i.attrHooks[t],{set:function(n,i){if(i==="")return n.setAttribute(t,"auto"),i}})}),i.attrHooks.contenteditable={get:s.get,set:function(n,t,i){t===""&&(t="false");s.set(n,t,i)}});i.support.hrefNormalized||i.each(["href","src","width","height"],function(n,r){i.attrHooks[r]=i.extend(i.attrHooks[r],{get:function(n){var i=n.getAttribute(r,2);return i===null?t:i}})});i.support.style||(i.attrHooks.style={get:function(n){return n.style.cssText.toLowerCase()||t},set:function(n,t){return n.style.cssText=t+""}});i.support.optSelected||(i.propHooks.selected=i.extend(i.propHooks.selected,{get:function(n){var t=n.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}));i.support.enctype||(i.propFix.enctype="encoding");i.support.checkOn||i.each(["radio","checkbox"],function(){i.valHooks[this]={get:function(n){return n.getAttribute("value")===null?"on":n.value}}});i.each(["radio","checkbox"],function(){i.valHooks[this]=i.extend(i.valHooks[this],{set:function(n,t){if(i.isArray(t))return n.checked=i.inArray(i(n).val(),t)>=0}})});var wt=/^(?:textarea|input|select)$/i,bi=/^([^\.]*|)(?:\.(.+)|)$/,yf=/(?:^|\s)hover(\.\S+|)\b/,pf=/^key/,wf=/^(?:mouse|contextmenu)|click/,ki=/^(?:focusinfocus|focusoutblur)$/,di=function(n){return i.event.special.hover?n:n.replace(yf,"mouseenter$1 mouseleave$1")};i.event={add:function(n,r,u,f,e){var a,s,v,y,p,o,b,l,w,c,h;if(n.nodeType!==3&&n.nodeType!==8&&r&&u&&(a=i._data(n))){for(u.handler&&(w=u,u=w.handler,e=w.selector),u.guid||(u.guid=i.guid++),v=a.events,v||(a.events=v={}),s=a.handle,s||(a.handle=s=function(n){return typeof i!="undefined"&&(!n||i.event.triggered!==n.type)?i.event.dispatch.apply(s.elem,arguments):t},s.elem=n),r=i.trim(di(r)).split(" "),y=0;y<r.length;y++)p=bi.exec(r[y])||[],o=p[1],b=(p[2]||"").split(".").sort(),h=i.event.special[o]||{},o=(e?h.delegateType:h.bindType)||o,h=i.event.special[o]||{},l=i.extend({type:o,origType:p[1],data:f,handler:u,guid:u.guid,selector:e,needsContext:e&&i.expr.match.needsContext.test(e),namespace:b.join(".")},w),c=v[o],c||(c=v[o]=[],c.delegateCount=0,h.setup&&h.setup.call(n,f,b,s)!==!1||(n.addEventListener?n.addEventListener(o,s,!1):n.attachEvent&&n.attachEvent("on"+o,s))),h.add&&(h.add.call(n,l),l.handler.guid||(l.handler.guid=u.guid)),e?c.splice(c.delegateCount++,0,l):c.push(l),i.event.global[o]=!0;n=null}},global:{},remove:function(n,t,r,u,f){var l,p,e,w,h,b,a,v,c,o,s,y=i.hasData(n)&&i._data(n);if(y&&(v=y.events)){for(t=i.trim(di(t||"")).split(" "),l=0;l<t.length;l++){if(p=bi.exec(t[l])||[],e=w=p[1],h=p[2],!e){for(e in v)i.event.remove(n,e+t[l],r,u,!0);continue}for(c=i.event.special[e]||{},e=(u?c.delegateType:c.bindType)||e,o=v[e]||[],b=o.length,h=h?new RegExp("(^|\\.)"+h.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null,a=0;a<o.length;a++)s=o[a],(f||w===s.origType)&&(!r||r.guid===s.guid)&&(!h||h.test(s.namespace))&&(!u||u===s.selector||u==="**"&&s.selector)&&(o.splice(a--,1),s.selector&&o.delegateCount--,c.remove&&c.remove.call(n,s));o.length===0&&b!==o.length&&(c.teardown&&c.teardown.call(n,h,y.handle)!==!1||i.removeEvent(n,e,y.handle),delete v[e])}i.isEmptyObject(v)&&(delete y.handle,i.removeData(n,"events",!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(u,f,e,o){if(!e||e.nodeType!==3&&e.nodeType!==8){var w,d,c,h,l,v,a,y,p,k,s=u.type||u,b=[];if(!ki.test(s+i.event.triggered)&&(s.indexOf("!")>=0&&(s=s.slice(0,-1),d=!0),s.indexOf(".")>=0&&(b=s.split("."),s=b.shift(),b.sort()),e&&!i.event.customEvent[s]||i.event.global[s])){if(u=typeof u=="object"?u[i.expando]?u:new i.Event(s,u):new i.Event(s),u.type=s,u.isTrigger=!0,u.exclusive=d,u.namespace=b.join("."),u.namespace_re=u.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,v=s.indexOf(":")<0?"on"+s:"",!e){w=i.cache;for(c in w)w[c].events&&w[c].events[s]&&i.event.trigger(u,f,w[c].handle.elem,!0);return}if(u.result=t,u.target||(u.target=e),f=f!=null?i.makeArray(f):[],f.unshift(u),a=i.event.special[s]||{},!a.trigger||a.trigger.apply(e,f)!==!1){if(p=[[e,a.bindType||s]],!o&&!a.noBubble&&!i.isWindow(e)){for(k=a.delegateType||s,h=ki.test(k+s)?e:e.parentNode,l=e;h;h=h.parentNode)p.push([h,k]),l=h;l===(e.ownerDocument||r)&&p.push([l.defaultView||l.parentWindow||n,k])}for(c=0;c<p.length&&!u.isPropagationStopped();c++)h=p[c][0],u.type=p[c][1],y=(i._data(h,"events")||{})[u.type]&&i._data(h,"handle"),y&&y.apply(h,f),y=v&&h[v],y&&i.acceptData(h)&&y.apply&&y.apply(h,f)===!1&&u.preventDefault();return u.type=s,o||u.isDefaultPrevented()||a._default&&a._default.apply(e.ownerDocument,f)!==!1||s==="click"&&i.nodeName(e,"a")||!i.acceptData(e)||v&&e[s]&&(s!=="focus"&&s!=="blur"||u.target.offsetWidth!==0)&&!i.isWindow(e)&&(l=e[v],l&&(e[v]=null),i.event.triggered=s,e[s](),i.event.triggered=t,l&&(e[v]=l)),u.result}}}},dispatch:function(r){r=i.event.fix(r||n.event);var f,c,e,l,a,h,v,u,s,y=(i._data(this,"events")||{})[r.type]||[],p=y.delegateCount,k=o.call(arguments),d=!r.exclusive&&!r.namespace,w=i.event.special[r.type]||{},b=[];if(k[0]=r,r.delegateTarget=this,!w.preDispatch||w.preDispatch.call(this,r)!==!1){if(p&&!(r.button&&r.type==="click"))for(e=r.target;e!=this;e=e.parentNode||this)if(e.disabled!==!0||r.type!=="click"){for(a={},v=[],f=0;f<p;f++)u=y[f],s=u.selector,a[s]===t&&(a[s]=u.needsContext?i(s,this).index(e)>=0:i.find(s,this,null,[e]).length),a[s]&&v.push(u);v.length&&b.push({elem:e,matches:v})}for(y.length>p&&b.push({elem:this,matches:y.slice(p)}),f=0;f<b.length&&!r.isPropagationStopped();f++)for(h=b[f],r.currentTarget=h.elem,c=0;c<h.matches.length&&!r.isImmediatePropagationStopped();c++)u=h.matches[c],(d||!r.namespace&&!u.namespace||r.namespace_re&&r.namespace_re.test(u.namespace))&&(r.data=u.data,r.handleObj=u,l=((i.event.special[u.origType]||{}).handle||u.handler).apply(h.elem,k),l!==t&&(r.result=l,l===!1&&(r.preventDefault(),r.stopPropagation())));return w.postDispatch&&w.postDispatch.call(this,r),r.result}},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(n,t){return n.which==null&&(n.which=t.charCode!=null?t.charCode:t.keyCode),n}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(n,i){var o,u,f,e=i.button,s=i.fromElement;return n.pageX==null&&i.clientX!=null&&(o=n.target.ownerDocument||r,u=o.documentElement,f=o.body,n.pageX=i.clientX+(u&&u.scrollLeft||f&&f.scrollLeft||0)-(u&&u.clientLeft||f&&f.clientLeft||0),n.pageY=i.clientY+(u&&u.scrollTop||f&&f.scrollTop||0)-(u&&u.clientTop||f&&f.clientTop||0)),!n.relatedTarget&&s&&(n.relatedTarget=s===n.target?i.toElement:s),n.which||e===t||(n.which=e&1?1:e&2?3:e&4?2:0),n}},fix:function(n){if(n[i.expando])return n;var f,e,t=n,u=i.event.fixHooks[n.type]||{},o=u.props?this.props.concat(u.props):this.props;for(n=i.Event(t),f=o.length;f;)e=o[--f],n[e]=t[e];return n.target||(n.target=t.srcElement||r),n.target.nodeType===3&&(n.target=n.target.parentNode),n.metaKey=!!n.metaKey,u.filter?u.filter(n,t):n},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(n,t,r){i.isWindow(this)&&(this.onbeforeunload=r)},teardown:function(n,t){this.onbeforeunload===t&&(this.onbeforeunload=null)}}},simulate:function(n,t,r,u){var f=i.extend(new i.Event,r,{type:n,isSimulated:!0,originalEvent:{}});u?i.event.trigger(f,null,t):i.event.dispatch.call(t,f);f.isDefaultPrevented()&&r.preventDefault()}};i.event.handle=i.event.dispatch;i.removeEvent=r.removeEventListener?function(n,t,i){n.removeEventListener&&n.removeEventListener(t,i,!1)}:function(n,t,i){var r="on"+t;n.detachEvent&&(typeof n[r]=="undefined"&&(n[r]=null),n.detachEvent(r,i))};i.Event=function(n,t){if(!(this instanceof i.Event))return new i.Event(n,t);n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||n.returnValue===!1||n.getPreventDefault&&n.getPreventDefault()?it:v):this.type=n;t&&i.extend(this,t);this.timeStamp=n&&n.timeStamp||i.now();this[i.expando]=!0};i.Event.prototype={preventDefault:function(){this.isDefaultPrevented=it;var n=this.originalEvent;n&&(n.preventDefault?n.preventDefault():n.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=it;var n=this.originalEvent;n&&(n.stopPropagation&&n.stopPropagation(),n.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it;this.stopPropagation()},isDefaultPrevented:v,isPropagationStopped:v,isImmediatePropagationStopped:v};i.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(n,t){i.event.special[n]={delegateType:t,bindType:t,handle:function(n){var f,e=this,r=n.relatedTarget,u=n.handleObj,o=u.selector;return r&&(r===e||i.contains(e,r))||(n.type=u.origType,f=u.handler.apply(this,arguments),n.type=t),f}}});i.support.submitBubbles||(i.event.special.submit={setup:function(){if(i.nodeName(this,"form"))return!1;i.event.add(this,"click._submit keypress._submit",function(n){var u=n.target,r=i.nodeName(u,"input")||i.nodeName(u,"button")?u.form:t;r&&!i._data(r,"_submit_attached")&&(i.event.add(r,"submit._submit",function(n){n._submit_bubble=!0}),i._data(r,"_submit_attached",!0))})},postDispatch:function(n){n._submit_bubble&&(delete n._submit_bubble,this.parentNode&&!n.isTrigger&&i.event.simulate("submit",this.parentNode,n,!0))},teardown:function(){if(i.nodeName(this,"form"))return!1;i.event.remove(this,"._submit")}});i.support.changeBubbles||(i.event.special.change={setup:function(){if(wt.test(this.nodeName))return(this.type==="checkbox"||this.type==="radio")&&(i.event.add(this,"propertychange._change",function(n){n.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),i.event.add(this,"click._change",function(n){this._just_changed&&!n.isTrigger&&(this._just_changed=!1);i.event.simulate("change",this,n,!0)})),!1;i.event.add(this,"beforeactivate._change",function(n){var t=n.target;wt.test(t.nodeName)&&!i._data(t,"_change_attached")&&(i.event.add(t,"change._change",function(n){!this.parentNode||n.isSimulated||n.isTrigger||i.event.simulate("change",this.parentNode,n,!0)}),i._data(t,"_change_attached",!0))})},handle:function(n){var t=n.target;if(this!==t||n.isSimulated||n.isTrigger||t.type!=="radio"&&t.type!=="checkbox")return n.handleObj.handler.apply(this,arguments)},teardown:function(){return i.event.remove(this,"._change"),!wt.test(this.nodeName)}});i.support.focusinBubbles||i.each({focus:"focusin",blur:"focusout"},function(n,t){var u=0,f=function(n){i.event.simulate(t,n.target,i.event.fix(n),!0)};i.event.special[t]={setup:function(){u++==0&&r.addEventListener(n,f,!0)},teardown:function(){--u==0&&r.removeEventListener(n,f,!0)}}});i.fn.extend({on:function(n,r,u,f,e){var o,s;if(typeof n=="object"){typeof r!="string"&&(u=u||r,r=t);for(s in n)this.on(s,r,u,n[s],e);return this}if(u==null&&f==null?(f=r,u=r=t):f==null&&(typeof r=="string"?(f=u,u=t):(f=u,u=r,r=t)),f===!1)f=v;else if(!f)return this;return e===1&&(o=f,f=function(n){return i().off(n),o.apply(this,arguments)},f.guid=o.guid||(o.guid=i.guid++)),this.each(function(){i.event.add(this,n,f,u,r)})},one:function(n,t,i,r){return this.on(n,t,i,r,1)},off:function(n,r,u){var f,e;if(n&&n.preventDefault&&n.handleObj)return f=n.handleObj,i(n.delegateTarget).off(f.namespace?f.origType+"."+f.namespace:f.origType,f.selector,f.handler),this;if(typeof n=="object"){for(e in n)this.off(e,r,n[e]);return this}return(r===!1||typeof r=="function")&&(u=r,r=t),u===!1&&(u=v),this.each(function(){i.event.remove(this,n,u,r)})},bind:function(n,t,i){return this.on(n,null,t,i)},unbind:function(n,t){return this.off(n,null,t)},live:function(n,t,r){i(this.context).on(n,this.selector,t,r);return this},die:function(n,t){return i(this.context).off(n,this.selector||"**",t),this},delegate:function(n,t,i,r){return this.on(t,n,i,r)},undelegate:function(n,t,i){return arguments.length===1?this.off(n,"**"):this.off(t,n||"**",i)},trigger:function(n,t){return this.each(function(){i.event.trigger(n,t,this)})},triggerHandler:function(n,t){if(this[0])return i.event.trigger(n,t,this[0],!0)},toggle:function(n){var t=arguments,u=n.guid||i.guid++,r=0,f=function(u){var f=(i._data(this,"lastToggle"+n.guid)||0)%r;return i._data(this,"lastToggle"+n.guid,f+1),u.preventDefault(),t[f].apply(this,arguments)||!1};for(f.guid=u;r<t.length;)t[r++].guid=u;return this.click(f)},hover:function(n,t){return this.mouseenter(n).mouseleave(t||n)}});i.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(n,t){i.fn[t]=function(n,i){return i==null&&(i=n,n=null),arguments.length>0?this.on(t,null,n,i):this.trigger(t)};pf.test(t)&&(i.event.fixHooks[t]=i.event.keyHooks);wf.test(t)&&(i.event.fixHooks[t]=i.event.mouseHooks)});
/*!
	 * Sizzle CSS Selector Engine
	 * Copyright 2012 jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://sizzlejs.com/
	 */
(function(n,t){function r(n,t,i,r){i=i||[];t=t||h;var e,u,o,f,s=t.nodeType;if(!n||typeof n!="string")return i;if(s!==1&&s!==9)return[];if(o=g(t),!o&&!r&&(e=wi.exec(n)))if(f=e[1]){if(s===9)if(u=t.getElementById(f),u&&u.parentNode){if(u.id===f)return i.push(u),i}else return i;else if(t.ownerDocument&&(u=t.ownerDocument.getElementById(f))&&gt(t,u)&&u.id===f)return i.push(u),i}else{if(e[2])return p.apply(i,w.call(t.getElementsByTagName(n),0)),i;if((f=e[3])&&oi&&t.getElementsByClassName)return p.apply(i,w.call(t.getElementsByClassName(f),0)),i}return dt(n.replace(it,"$1"),t,i,r,o)}function k(n){return function(t){var i=t.nodeName.toLowerCase();return i==="input"&&t.type===n}}function si(n){return function(t){var i=t.nodeName.toLowerCase();return(i==="input"||i==="button")&&t.type===n}}function y(n){return s(function(t){return t=+t,s(function(i,r){for(var u,f=n([],i.length,t),e=f.length;e--;)i[u=f[e]]&&(i[u]=!(r[u]=i[u]))})})}function ut(n,t,i){if(n===t)return i;for(var r=n.nextSibling;r;){if(r===t)return-1;r=r.nextSibling}return 1}function ft(n,t){var o,f,h,s,i,c,l,a=ri[e][n+" "];if(a)return t?0:a.slice(0);for(i=n,c=[],l=u.preFilter;i;){(!o||(f=vi.exec(i)))&&(f&&(i=i.slice(f[0].length)||i),c.push(h=[]));o=!1;(f=yi.exec(i))&&(h.push(o=new ti(f.shift())),i=i.slice(o.length),o.type=f[0].replace(it," "));for(s in u.filter)(f=rt[s].exec(i))&&(!l[s]||(f=l[s](f)))&&(h.push(o=new ti(f.shift())),i=i.slice(o.length),o.type=s,o.matches=f);if(!o)break}return t?i.length:i?r.error(n):ri(n,c).slice(0)}function pt(n,t,i){var r=t.dir,u=i&&t.dir==="parentNode",f=ci++;return t.first?function(t,i,f){while(t=t[r])if(u||t.nodeType===1)return n(t,i,f)}:function(t,i,o){if(o){while(t=t[r])if((u||t.nodeType===1)&&n(t,i,o))return t}else for(var s,h=tt+" "+f+" ",c=h+ot;t=t[r];)if(u||t.nodeType===1){if((s=t[e])===c)return t.sizset;if(typeof s=="string"&&s.indexOf(h)===0){if(t.sizset)return t}else{if(t[e]=c,n(t,i,o))return t.sizset=!0,t;t.sizset=!1}}}}function wt(n){return n.length>1?function(t,i,r){for(var u=n.length;u--;)if(!n[u](t,i,r))return!1;return!0}:n[0]}function et(n,t,i,r,u){for(var e,o=[],f=0,s=n.length,h=t!=null;f<s;f++)(e=n[f])&&(!i||i(e,r,u))&&(o.push(e),h&&t.push(f));return o}function bt(n,t,i,r,u,f){return r&&!r[e]&&(r=bt(r)),u&&!u[e]&&(u=bt(u,f)),s(function(f,e,o,s){var l,c,a,w=[],y=[],b=e.length,k=f||rr(t||"*",o.nodeType?[o]:o,[]),v=n&&(f||!t)?et(k,w,n,o,s):k,h=i?u||(f?n:b||r)?[]:e:v;if(i&&i(v,h,o,s),r)for(l=et(h,y),r(l,[],o,s),c=l.length;c--;)(a=l[c])&&(h[y[c]]=!(v[y[c]]=a));if(f){if(u||n){if(u){for(l=[],c=h.length;c--;)(a=h[c])&&l.push(v[c]=a);u(null,h=[],l,s)}for(c=h.length;c--;)(a=h[c])&&(l=u?lt.call(f,a):w[c])>-1&&(f[l]=!(e[l]=a))}}else h=et(h===e?h.splice(b,h.length):h),u?u(null,e,h,s):p.apply(e,h)})}function kt(n){for(var s,r,i,o=n.length,h=u.relative[n[0].type],c=h||u.relative[" "],t=h?1:0,l=pt(function(n){return n===s},c,!0),a=pt(function(n){return lt.call(s,n)>-1},c,!0),f=[function(n,t,i){return!h&&(i||t!==nt)||((s=t).nodeType?l(n,t,i):a(n,t,i))}];t<o;t++)if(r=u.relative[n[t].type])f=[pt(wt(f),r)];else{if(r=u.filter[n[t].type].apply(null,n[t].matches),r[e]){for(i=++t;i<o;i++)if(u.relative[n[i].type])break;return bt(t>1&&wt(f),t>1&&n.slice(0,t-1).join("").replace(it,"$1"),r,t<i&&kt(n.slice(t,i)),i<o&&kt(n=n.slice(i)),i<o&&n.join(""))}f.push(r)}return wt(f)}function ir(n,t){var f=t.length>0,e=n.length>0,i=function(o,s,c,l,a){var y,b,k,w=[],d=0,v="0",g=o&&[],it=a!=null,rt=nt,ft=o||e&&u.find.TAG("*",a&&s.parentNode||s),ut=tt+=rt==null?1:Math.E;for(it&&(nt=s!==h&&s,ot=i.el);(y=ft[v])!=null;v++){if(e&&y){for(b=0;k=n[b];b++)if(k(y,s,c)){l.push(y);break}it&&(tt=ut,ot=++i.el)}f&&((y=!k&&y)&&d--,o&&g.push(y))}if(d+=v,f&&v!==d){for(b=0;k=t[b];b++)k(g,w,s,c);if(o){if(d>0)while(v--)g[v]||w[v]||(w[v]=li.call(l));w=et(w)}p.apply(l,w);it&&!o&&w.length>0&&d+t.length>1&&r.uniqueSort(l)}return it&&(tt=ut,nt=rt),g};return i.el=0,f?s(i):i}function rr(n,t,i){for(var u=0,f=t.length;u<f;u++)r(n,t[u],i);return i}function dt(n,t,i,r,f){var o,e,s,c,l,h=ft(n),a=h.length;if(!r&&h.length===1){if(e=h[0]=h[0].slice(0),e.length>2&&(s=e[0]).type==="ID"&&t.nodeType===9&&!f&&u.relative[e[1].type]){if(t=u.find.ID(s.matches[0].replace(v,""),t,f)[0],!t)return i;n=n.slice(e.shift().length)}for(o=rt.POS.test(n)?-1:e.length-1;o>=0;o--){if(s=e[o],u.relative[c=s.type])break;if((l=u.find[c])&&(r=l(s.matches[0].replace(v,""),yt.test(e[0].type)&&t.parentNode||t,f))){if(e.splice(o,1),n=r.length&&e.join(""),!n)return p.apply(i,w.call(r,0)),i;break}}}return ht(n,h)(r,t,f,i,yt.test(n)),i}function hi(){}var ot,st,u,d,g,gt,ht,ct,b,nt,ni=!0,c="undefined",e=("sizcache"+Math.random()).replace(".",""),ti=String,h=n.document,o=h.documentElement,tt=0,ci=0,li=[].pop,p=[].push,w=[].slice,lt=[].indexOf||function(n){for(var t=0,i=this.length;t<i;t++)if(this[t]===n)return t;return-1},s=function(n,t){return n[e]=t==null||t,n},at=function(){var n={},t=[];return s(function(i,r){return t.push(i)>u.cacheLength&&delete n[t.shift()],n[i+" "]=r},n)},ii=at(),ri=at(),ui=at(),f="[\\x20\\t\\r\\n\\f]",a="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",ai=a.replace("w","w#"),fi="\\["+f+"*("+a+")"+f+"*(?:([*^$|!~]?=)"+f+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+ai+")|)|)"+f+"*\\]",vt=":("+a+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+fi+")|[^:]|\\\\.)*|.*))\\)|)",ei=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+f+"*((?:-\\d)?\\d*)"+f+"*\\)|)(?=[^-]|$)",it=new RegExp("^"+f+"+|((?:^|[^\\\\])(?:\\\\.)*)"+f+"+$","g"),vi=new RegExp("^"+f+"*,"+f+"*"),yi=new RegExp("^"+f+"*([\\x20\\t\\r\\n\\f>+~])"+f+"*"),pi=new RegExp(vt),wi=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,yt=/[\x20\t\r\n\f]*[+~]/,bi=/h\d/i,ki=/input|select|textarea|button/i,v=/\\(?!\\)/g,rt={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),NAME:new RegExp("^\\[name=['\"]?("+a+")['\"]?\\]"),TAG:new RegExp("^("+a.replace("w","w*")+")"),ATTR:new RegExp("^"+fi),PSEUDO:new RegExp("^"+vt),POS:new RegExp(ei,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+f+"*(even|odd|(([+-]|)(\\d*)n|)"+f+"*(?:([+-]|)"+f+"*(\\d+)|))"+f+"*\\)|)","i"),needsContext:new RegExp("^"+f+"*[>+~]|"+ei,"i")},l=function(n){var t=h.createElement("div");try{return n(t)}catch(i){return!1}finally{t=null}},di=l(function(n){return n.appendChild(h.createComment("")),!n.getElementsByTagName("*").length}),gi=l(function(n){return n.innerHTML="<a href='#'><\/a>",n.firstChild&&typeof n.firstChild.getAttribute!==c&&n.firstChild.getAttribute("href")==="#"}),nr=l(function(n){n.innerHTML="<select><\/select>";var t=typeof n.lastChild.getAttribute("multiple");return t!=="boolean"&&t!=="string"}),oi=l(function(n){return(n.innerHTML="<div class='hidden e'><\/div><div class='hidden'><\/div>",!n.getElementsByClassName||!n.getElementsByClassName("e").length)?!1:(n.lastChild.className="e",n.getElementsByClassName("e").length===2)}),tr=l(function(n){n.id=e+0;n.innerHTML="<a name='"+e+"'><\/a><div name='"+e+"'><\/div>";o.insertBefore(n,o.firstChild);var t=h.getElementsByName&&h.getElementsByName(e).length===2+h.getElementsByName(e+0).length;return st=!h.getElementById(e),o.removeChild(n),t});try{w.call(o.childNodes,0)[0].nodeType}catch(ur){w=function(n){for(var t,i=[];t=this[n];n++)i.push(t);return i}}r.matches=function(n,t){return r(n,null,null,t)};r.matchesSelector=function(n,t){return r(t,null,null,[n]).length>0};d=r.getText=function(n){var r,i="",u=0,t=n.nodeType;if(t){if(t===1||t===9||t===11){if(typeof n.textContent=="string")return n.textContent;for(n=n.firstChild;n;n=n.nextSibling)i+=d(n)}else if(t===3||t===4)return n.nodeValue}else for(;r=n[u];u++)i+=d(r);return i};g=r.isXML=function(n){var t=n&&(n.ownerDocument||n).documentElement;return t?t.nodeName!=="HTML":!1};gt=r.contains=o.contains?function(n,t){var r=n.nodeType===9?n.documentElement:n,i=t&&t.parentNode;return n===i||!!(i&&i.nodeType===1&&r.contains&&r.contains(i))}:o.compareDocumentPosition?function(n,t){return t&&!!(n.compareDocumentPosition(t)&16)}:function(n,t){while(t=t.parentNode)if(t===n)return!0;return!1};r.attr=function(n,t){var i,r=g(n);return(r||(t=t.toLowerCase()),i=u.attrHandle[t])?i(n):r||nr?n.getAttribute(t):(i=n.getAttributeNode(t),i?typeof n[t]=="boolean"?n[t]?t:null:i.specified?i.value:null:null)};u=r.selectors={cacheLength:50,createPseudo:s,match:rt,attrHandle:gi?{}:{href:function(n){return n.getAttribute("href",2)},type:function(n){return n.getAttribute("type")}},find:{ID:st?function(n,t,i){if(typeof t.getElementById!==c&&!i){var r=t.getElementById(n);return r&&r.parentNode?[r]:[]}}:function(n,i,r){if(typeof i.getElementById!==c&&!r){var u=i.getElementById(n);return u?u.id===n||typeof u.getAttributeNode!==c&&u.getAttributeNode("id").value===n?[u]:t:[]}},TAG:di?function(n,t){if(typeof t.getElementsByTagName!==c)return t.getElementsByTagName(n)}:function(n,t){var f=t.getElementsByTagName(n),i,r,u;if(n==="*"){for(r=[],u=0;i=f[u];u++)i.nodeType===1&&r.push(i);return r}return f},NAME:tr&&function(n,t){if(typeof t.getElementsByName!==c)return t.getElementsByName(name)},CLASS:oi&&function(n,t,i){if(typeof t.getElementsByClassName!==c&&!i)return t.getElementsByClassName(n)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(n){return n[1]=n[1].replace(v,""),n[3]=(n[4]||n[5]||"").replace(v,""),n[2]==="~="&&(n[3]=" "+n[3]+" "),n.slice(0,4)},CHILD:function(n){return n[1]=n[1].toLowerCase(),n[1]==="nth"?(n[2]||r.error(n[0]),n[3]=+(n[3]?n[4]+(n[5]||1):2*(n[2]==="even"||n[2]==="odd")),n[4]=+(n[6]+n[7]||n[2]==="odd")):n[2]&&r.error(n[0]),n},PSEUDO:function(n){var t,i;return rt.CHILD.test(n[0])?null:(n[3]?n[2]=n[3]:(t=n[4])&&(pi.test(t)&&(i=ft(t,!0))&&(i=t.indexOf(")",t.length-i)-t.length)&&(t=t.slice(0,i),n[0]=n[0].slice(0,i)),n[2]=t),n.slice(0,3))}},filter:{ID:st?function(n){return n=n.replace(v,""),function(t){return t.getAttribute("id")===n}}:function(n){return n=n.replace(v,""),function(t){var i=typeof t.getAttributeNode!==c&&t.getAttributeNode("id");return i&&i.value===n}},TAG:function(n){return n==="*"?function(){return!0}:(n=n.replace(v,"").toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===n})},CLASS:function(n){var t=ii[e][n+" "];return t||(t=new RegExp("(^|"+f+")"+n+"("+f+"|$)"))&&ii(n,function(n){return t.test(n.className||typeof n.getAttribute!==c&&n.getAttribute("class")||"")})},ATTR:function(n,t,i){return function(u){var f=r.attr(u,n);return f==null?t==="!=":t?(f+="",t==="="?f===i:t==="!="?f!==i:t==="^="?i&&f.indexOf(i)===0:t==="*="?i&&f.indexOf(i)>-1:t==="$="?i&&f.substr(f.length-i.length)===i:t==="~="?(" "+f+" ").indexOf(i)>-1:t==="|="?f===i||f.substr(0,i.length+1)===i+"-":!1):!0}},CHILD:function(n,t,i,r){return n==="nth"?function(n){var t,u,f=n.parentNode;if(i===1&&r===0)return!0;if(f)for(u=0,t=f.firstChild;t;t=t.nextSibling)if(t.nodeType===1&&(u++,n===t))break;return u-=r,u===i||u%i==0&&u/i>=0}:function(t){var i=t;switch(n){case"only":case"first":while(i=i.previousSibling)if(i.nodeType===1)return!1;if(n==="first")return!0;i=t;case"last":while(i=i.nextSibling)if(i.nodeType===1)return!1;return!0}}},PSEUDO:function(n,t){var f,i=u.pseudos[n]||u.setFilters[n.toLowerCase()]||r.error("unsupported pseudo: "+n);return i[e]?i(t):i.length>1?(f=[n,n,"",t],u.setFilters.hasOwnProperty(n.toLowerCase())?s(function(n,r){for(var u,f=i(n,t),e=f.length;e--;)u=lt.call(n,f[e]),n[u]=!(r[u]=f[e])}):function(n){return i(n,0,f)}):i}},pseudos:{not:s(function(n){var i=[],r=[],t=ht(n.replace(it,"$1"));return t[e]?s(function(n,i,r,u){for(var e,o=t(n,null,u,[]),f=n.length;f--;)(e=o[f])&&(n[f]=!(i[f]=e))}):function(n,u,f){return i[0]=n,t(i,null,f,r),!r.pop()}}),has:s(function(n){return function(t){return r(n,t).length>0}}),contains:s(function(n){return function(t){return(t.textContent||t.innerText||d(t)).indexOf(n)>-1}}),enabled:function(n){return n.disabled===!1},disabled:function(n){return n.disabled===!0},checked:function(n){var t=n.nodeName.toLowerCase();return t==="input"&&!!n.checked||t==="option"&&!!n.selected},selected:function(n){return n.parentNode&&n.parentNode.selectedIndex,n.selected===!0},parent:function(n){return!u.pseudos.empty(n)},empty:function(n){var t;for(n=n.firstChild;n;){if(n.nodeName>"@"||(t=n.nodeType)===3||t===4)return!1;n=n.nextSibling}return!0},header:function(n){return bi.test(n.nodeName)},text:function(n){var t,i;return n.nodeName.toLowerCase()==="input"&&(t=n.type)==="text"&&((i=n.getAttribute("type"))==null||i.toLowerCase()===t)},radio:k("radio"),checkbox:k("checkbox"),file:k("file"),password:k("password"),image:k("image"),submit:si("submit"),reset:si("reset"),button:function(n){var t=n.nodeName.toLowerCase();return t==="input"&&n.type==="button"||t==="button"},input:function(n){return ki.test(n.nodeName)},focus:function(n){var t=n.ownerDocument;return n===t.activeElement&&(!t.hasFocus||t.hasFocus())&&!!(n.type||n.href||~n.tabIndex)},active:function(n){return n===n.ownerDocument.activeElement},first:y(function(){return[0]}),last:y(function(n,t){return[t-1]}),eq:y(function(n,t,i){return[i<0?i+t:i]}),even:y(function(n,t){for(var i=0;i<t;i+=2)n.push(i);return n}),odd:y(function(n,t){for(var i=1;i<t;i+=2)n.push(i);return n}),lt:y(function(n,t,i){for(var r=i<0?i+t:i;--r>=0;)n.push(r);return n}),gt:y(function(n,t,i){for(var r=i<0?i+t:i;++r<t;)n.push(r);return n})}};ct=o.compareDocumentPosition?function(n,t){return n===t?(b=!0,0):(!n.compareDocumentPosition||!t.compareDocumentPosition?n.compareDocumentPosition:n.compareDocumentPosition(t)&4)?-1:1}:function(n,t){var i;if(n===t)return b=!0,0;if(n.sourceIndex&&t.sourceIndex)return n.sourceIndex-t.sourceIndex;var e,h,u=[],f=[],o=n.parentNode,s=t.parentNode,r=o;if(o===s)return ut(n,t);if(o){if(!s)return 1}else return-1;while(r)u.unshift(r),r=r.parentNode;for(r=s;r;)f.unshift(r),r=r.parentNode;for(e=u.length,h=f.length,i=0;i<e&&i<h;i++)if(u[i]!==f[i])return ut(u[i],f[i]);return i===e?ut(n,f[i],-1):ut(u[i],t,1)};[0,0].sort(ct);ni=!b;r.uniqueSort=function(n){var r,u=[],t=1,i=0;if(b=ni,n.sort(ct),b){for(;r=n[t];t++)r===n[t-1]&&(i=u.push(t));while(i--)n.splice(u[i],1)}return n};r.error=function(n){throw new Error("Syntax error, unrecognized expression: "+n);};ht=r.compile=function(n,t){var r,u=[],f=[],i=ui[e][n+" "];if(!i){for(t||(t=ft(n)),r=t.length;r--;)i=kt(t[r]),i[e]?u.push(i):f.push(i);i=ui(n,ir(f,u))}return i};h.querySelectorAll&&function(){var u,s=dt,h=/'|\\/g,c=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,n=[":focus"],t=[":active"],i=o.matchesSelector||o.mozMatchesSelector||o.webkitMatchesSelector||o.oMatchesSelector||o.msMatchesSelector;l(function(t){t.innerHTML="<select><option selected=''><\/option><\/select>";t.querySelectorAll("[selected]").length||n.push("\\["+f+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)");t.querySelectorAll(":checked").length||n.push(":checked")});l(function(t){t.innerHTML="<p test=''><\/p>";t.querySelectorAll("[test^='']").length&&n.push("[*^$]="+f+"*(?:\"\"|'')");t.innerHTML="<input type='hidden'/>";t.querySelectorAll(":enabled").length||n.push(":enabled",":disabled")});n=new RegExp(n.join("|"));dt=function(t,i,r,u,f){if(!u&&!f&&!n.test(t)){var o,l,a=!0,c=e,y=i,v=i.nodeType===9&&t;if(i.nodeType===1&&i.nodeName.toLowerCase()!=="object"){for(o=ft(t),(a=i.getAttribute("id"))?c=a.replace(h,"\\$&"):i.setAttribute("id",c),c="[id='"+c+"'] ",l=o.length;l--;)o[l]=c+o[l].join("");y=yt.test(t)&&i.parentNode||i;v=o.join(",")}if(v)try{return p.apply(r,w.call(y.querySelectorAll(v),0)),r}catch(b){}finally{a||i.removeAttribute("id")}}return s(t,i,r,u,f)};i&&(l(function(n){u=i.call(n,"div");try{i.call(n,"[test!='']:sizzle");t.push("!=",vt)}catch(r){}}),t=new RegExp(t.join("|")),r.matchesSelector=function(f,e){if(e=e.replace(c,"='$1']"),!g(f)&&!t.test(e)&&!n.test(e))try{var o=i.call(f,e);if(o||u||f.document&&f.document.nodeType!==11)return o}catch(s){}return r(e,null,null,[f]).length>0})}();u.pseudos.nth=u.pseudos.eq;u.filters=hi.prototype=u.pseudos;u.setFilters=new hi;r.attr=i.attr;i.find=r;i.expr=r.selectors;i.expr[":"]=i.expr.pseudos;i.unique=r.uniqueSort;i.text=r.getText;i.isXMLDoc=r.isXML;i.contains=r.contains})(n);var bf=/Until$/,kf=/^(?:parents|prev(?:Until|All))/,df=/^.[^:#\[\.,]*$/,gi=i.expr.match.needsContext,gf={children:!0,contents:!0,next:!0,prev:!0};i.fn.extend({find:function(n){var t,f,o,u,e,r,s=this;if(typeof n!="string")return i(n).filter(function(){for(t=0,f=s.length;t<f;t++)if(i.contains(s[t],this))return!0});for(r=this.pushStack("","find",n),t=0,f=this.length;t<f;t++)if(o=r.length,i.find(n,this[t],r),t>0)for(u=o;u<r.length;u++)for(e=0;e<o;e++)if(r[e]===r[u]){r.splice(u--,1);break}return r},has:function(n){var t,r=i(n,this),u=r.length;return this.filter(function(){for(t=0;t<u;t++)if(i.contains(this,r[t]))return!0})},not:function(n){return this.pushStack(tr(this,n,!1),"not",n)},filter:function(n){return this.pushStack(tr(this,n,!0),"filter",n)},is:function(n){return!!n&&(typeof n=="string"?gi.test(n)?i(n,this.context).index(this[0])>=0:i.filter(n,this).length>0:this.filter(n).length>0)},closest:function(n,t){for(var r,f=0,o=this.length,u=[],e=gi.test(n)||typeof n!="string"?i(n,t||this.context):0;f<o;f++)for(r=this[f];r&&r.ownerDocument&&r!==t&&r.nodeType!==11;){if(e?e.index(r)>-1:i.find.matchesSelector(r,n)){u.push(r);break}r=r.parentNode}return u=u.length>1?i.unique(u):u,this.pushStack(u,"closest",n)},index:function(n){return n?typeof n=="string"?i.inArray(this[0],i(n)):i.inArray(n.jquery?n[0]:n,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(n,t){var u=typeof n=="string"?i(n,t):i.makeArray(n&&n.nodeType?[n]:n),r=i.merge(this.get(),u);return this.pushStack(k(u[0])||k(r[0])?r:i.unique(r))},addBack:function(n){return this.add(n==null?this.prevObject:this.prevObject.filter(n))}});i.fn.andSelf=i.fn.addBack;i.each({parent:function(n){var t=n.parentNode;return t&&t.nodeType!==11?t:null},parents:function(n){return i.dir(n,"parentNode")},parentsUntil:function(n,t,r){return i.dir(n,"parentNode",r)},next:function(n){return nr(n,"nextSibling")},prev:function(n){return nr(n,"previousSibling")},nextAll:function(n){return i.dir(n,"nextSibling")},prevAll:function(n){return i.dir(n,"previousSibling")},nextUntil:function(n,t,r){return i.dir(n,"nextSibling",r)},prevUntil:function(n,t,r){return i.dir(n,"previousSibling",r)},siblings:function(n){return i.sibling((n.parentNode||{}).firstChild,n)},children:function(n){return i.sibling(n.firstChild)},contents:function(n){return i.nodeName(n,"iframe")?n.contentDocument||n.contentWindow.document:i.merge([],n.childNodes)}},function(n,t){i.fn[n]=function(r,u){var f=i.map(this,t,r);return bf.test(n)||(u=r),u&&typeof u=="string"&&(f=i.filter(u,f)),f=this.length>1&&!gf[n]?i.unique(f):f,this.length>1&&kf.test(n)&&(f=f.reverse()),this.pushStack(f,n,o.call(arguments).join(","))}});i.extend({filter:function(n,t,r){return r&&(n=":not("+n+")"),t.length===1?i.find.matchesSelector(t[0],n)?[t[0]]:[]:i.find.matches(n,t)},dir:function(n,r,u){for(var e=[],f=n[r];f&&f.nodeType!==9&&(u===t||f.nodeType!==1||!i(f).is(u));)f.nodeType===1&&e.push(f),f=f[r];return e},sibling:function(n,t){for(var i=[];n;n=n.nextSibling)n.nodeType===1&&n!==t&&i.push(n);return i}});var rr="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",ne=/ jQuery\d+="(?:null|\d+)"/g,bt=/^\s+/,ur=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,fr=/<([\w:]+)/,te=/<tbody/i,ie=/<|&#?\w+;/,re=/<(?:script|style|link)/i,ue=/<(?:script|object|embed|option|style)/i,kt=new RegExp("<(?:"+rr+")[\\s/>]","i"),er=/^(?:checkbox|radio)$/,or=/checked\s*(?:[^=]|=\s*.checked.)/i,fe=/\/(java|ecma)script/i,ee=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,e={option:[1,"<select multiple='multiple'>","<\/select>"],legend:[1,"<fieldset>","<\/fieldset>"],thead:[1,"<table>","<\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],col:[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"],area:[1,"<map>","<\/map>"],_default:[0,"",""]},sr=ir(r),dt=sr.appendChild(r.createElement("div"));e.optgroup=e.option;e.tbody=e.tfoot=e.colgroup=e.caption=e.thead;e.th=e.td;i.support.htmlSerialize||(e._default=[1,"X<div>","<\/div>"]);i.fn.extend({text:function(n){return i.access(this,function(n){return n===t?i.text(this):this.empty().append((this[0]&&this[0].ownerDocument||r).createTextNode(n))},null,n,arguments.length)},wrapAll:function(n){if(i.isFunction(n))return this.each(function(t){i(this).wrapAll(n.call(this,t))});if(this[0]){var t=i(n,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]);t.map(function(){for(var n=this;n.firstChild&&n.firstChild.nodeType===1;)n=n.firstChild;return n}).append(this)}return this},wrapInner:function(n){return i.isFunction(n)?this.each(function(t){i(this).wrapInner(n.call(this,t))}):this.each(function(){var t=i(this),r=t.contents();r.length?r.wrapAll(n):t.append(n)})},wrap:function(n){var t=i.isFunction(n);return this.each(function(r){i(this).wrapAll(t?n.call(this,r):n)})},unwrap:function(){return this.parent().each(function(){i.nodeName(this,"body")||i(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(n){(this.nodeType===1||this.nodeType===11)&&this.appendChild(n)})},prepend:function(){return this.domManip(arguments,!0,function(n){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(n,this.firstChild)})},before:function(){if(!k(this[0]))return this.domManip(arguments,!1,function(n){this.parentNode.insertBefore(n,this)});if(arguments.length){var n=i.clean(arguments);return this.pushStack(i.merge(n,this),"before",this.selector)}},after:function(){if(!k(this[0]))return this.domManip(arguments,!1,function(n){this.parentNode.insertBefore(n,this.nextSibling)});if(arguments.length){var n=i.clean(arguments);return this.pushStack(i.merge(this,n),"after",this.selector)}},remove:function(n,t){for(var r,u=0;(r=this[u])!=null;u++)(!n||i.filter(n,[r]).length)&&(t||r.nodeType!==1||(i.cleanData(r.getElementsByTagName("*")),i.cleanData([r])),r.parentNode&&r.parentNode.removeChild(r));return this},empty:function(){for(var n,t=0;(n=this[t])!=null;t++)for(n.nodeType===1&&i.cleanData(n.getElementsByTagName("*"));n.firstChild;)n.removeChild(n.firstChild);return this},clone:function(n,t){return n=n==null?!1:n,t=t==null?n:t,this.map(function(){return i.clone(this,n,t)})},html:function(n){return i.access(this,function(n){var r=this[0]||{},u=0,f=this.length;if(n===t)return r.nodeType===1?r.innerHTML.replace(ne,""):t;if(typeof n=="string"&&!re.test(n)&&(i.support.htmlSerialize||!kt.test(n))&&(i.support.leadingWhitespace||!bt.test(n))&&!e[(fr.exec(n)||["",""])[1].toLowerCase()]){n=n.replace(ur,"<$1><\/$2>");try{for(;u<f;u++)r=this[u]||{},r.nodeType===1&&(i.cleanData(r.getElementsByTagName("*")),r.innerHTML=n);r=0}catch(o){}}r&&this.empty().append(n)},null,n,arguments.length)},replaceWith:function(n){return k(this[0])?this.length?this.pushStack(i(i.isFunction(n)?n():n),"replaceWith",n):this:i.isFunction(n)?this.each(function(t){var r=i(this),u=r.html();r.replaceWith(n.call(this,t,u))}):(typeof n!="string"&&(n=i(n).detach()),this.each(function(){var t=this.nextSibling,r=this.parentNode;i(this).remove();t?i(t).before(n):i(r).append(n)}))},detach:function(n){return this.remove(n,!0)},domManip:function(n,r,u){n=[].concat.apply([],n);var h,o,f,a,e=0,s=n[0],c=[],l=this.length;if(!i.support.checkClone&&l>1&&typeof s=="string"&&or.test(s))return this.each(function(){i(this).domManip(n,r,u)});if(i.isFunction(s))return this.each(function(f){var e=i(this);n[0]=s.call(this,f,r?e.html():t);e.domManip(n,r,u)});if(this[0]){if(h=i.buildFragment(n,this,c),f=h.fragment,o=f.firstChild,f.childNodes.length===1&&(f=o),o)for(r=r&&i.nodeName(o,"tr"),a=h.cacheable||l-1;e<l;e++)u.call(r&&i.nodeName(this[e],"table")?oe(this[e],"tbody"):this[e],e===a?f:i.clone(f,!0,!0));f=o=null;c.length&&i.each(c,function(n,t){t.src?i.ajax?i.ajax({url:t.src,type:"GET",dataType:"script",async:!1,global:!1,throws:!0}):i.error("no ajax"):i.globalEval((t.text||t.textContent||t.innerHTML||"").replace(ee,""));t.parentNode&&t.parentNode.removeChild(t)})}return this}});i.buildFragment=function(n,u,f){var o,s,h,e=n[0];return u=u||r,u=!u.nodeType&&u[0]||u,u=u.ownerDocument||u,n.length===1&&typeof e=="string"&&e.length<512&&u===r&&e.charAt(0)==="<"&&!ue.test(e)&&(i.support.checkClone||!or.test(e))&&(i.support.html5Clone||!kt.test(e))&&(s=!0,o=i.fragments[e],h=o!==t),o||(o=u.createDocumentFragment(),i.clean(n,u,o,f),s&&(i.fragments[e]=h&&o)),{fragment:o,cacheable:s}};i.fragments={};i.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,t){i.fn[n]=function(r){var o,u=0,s=[],f=i(r),h=f.length,e=this.length===1&&this[0].parentNode;if((e==null||e&&e.nodeType===11&&e.childNodes.length===1)&&h===1)return f[t](this[0]),this;for(;u<h;u++)o=(u>0?this.clone(!0):this).get(),i(f[u])[t](o),s=s.concat(o);return this.pushStack(s,n,f.selector)}});i.extend({clone:function(n,t,r){var f,o,u,e;if(i.support.html5Clone||i.isXMLDoc(n)||!kt.test("<"+n.nodeName+">")?e=n.cloneNode(!0):(dt.innerHTML=n.outerHTML,dt.removeChild(e=dt.firstChild)),(!i.support.noCloneEvent||!i.support.noCloneChecked)&&(n.nodeType===1||n.nodeType===11)&&!i.isXMLDoc(n))for(cr(n,e),f=rt(n),o=rt(e),u=0;f[u];++u)o[u]&&cr(f[u],o[u]);if(t&&(hr(n,e),r))for(f=rt(n),o=rt(e),u=0;f[u];++u)hr(f[u],o[u]);return f=o=null,e},clean:function(n,t,u,f){var h,c,o,p,v,d,s,w,a,b,k,y=t===r&&sr,l=[];for(t&&typeof t.createDocumentFragment!="undefined"||(t=r),h=0;(o=n[h])!=null;h++)if(typeof o=="number"&&(o+=""),o){if(typeof o=="string")if(ie.test(o)){for(y=y||ir(t),s=t.createElement("div"),y.appendChild(s),o=o.replace(ur,"<$1><\/$2>"),p=(fr.exec(o)||["",""])[1].toLowerCase(),v=e[p]||e._default,d=v[0],s.innerHTML=v[1]+o+v[2];d--;)s=s.lastChild;if(!i.support.tbody)for(w=te.test(o),a=p==="table"&&!w?s.firstChild&&s.firstChild.childNodes:v[1]==="<table>"&&!w?s.childNodes:[],c=a.length-1;c>=0;--c)i.nodeName(a[c],"tbody")&&!a[c].childNodes.length&&a[c].parentNode.removeChild(a[c]);!i.support.leadingWhitespace&&bt.test(o)&&s.insertBefore(t.createTextNode(bt.exec(o)[0]),s.firstChild);o=s.childNodes;s.parentNode.removeChild(s)}else o=t.createTextNode(o);o.nodeType?l.push(o):i.merge(l,o)}if(s&&(o=s=y=null),!i.support.appendChecked)for(h=0;(o=l[h])!=null;h++)i.nodeName(o,"input")?lr(o):typeof o.getElementsByTagName!="undefined"&&i.grep(o.getElementsByTagName("input"),lr);if(u)for(b=function(n){if(!n.type||fe.test(n.type))return f?f.push(n.parentNode?n.parentNode.removeChild(n):n):u.appendChild(n)},h=0;(o=l[h])!=null;h++)i.nodeName(o,"script")&&b(o)||(u.appendChild(o),typeof o.getElementsByTagName!="undefined"&&(k=i.grep(i.merge([],o.getElementsByTagName("script")),b),l.splice.apply(l,[h+1,0].concat(k)),h+=k.length));return l},cleanData:function(n,t){for(var f,u,r,e,h=0,o=i.expando,s=i.cache,c=i.support.deleteExpando,l=i.event.special;(r=n[h])!=null;h++)if((t||i.acceptData(r))&&(u=r[o],f=u&&s[u],f)){if(f.events)for(e in f.events)l[e]?i.event.remove(r,e):i.removeEvent(r,e,f.handle);s[u]&&(delete s[u],c?delete r[o]:r.removeAttribute?r.removeAttribute(o):r[o]=null,i.deletedIds.push(u))}}}),function(){var t,n;i.uaMatch=function(n){n=n.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(n)||/(webkit)[ \/]([\w.]+)/.exec(n)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(n)||/(msie) ([\w.]+)/.exec(n)||n.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(n)||[];return{browser:t[1]||"",version:t[2]||"0"}};t=i.uaMatch(pu.userAgent);n={};t.browser&&(n[t.browser]=!0,n.version=t.version);n.chrome?n.webkit=!0:n.webkit&&(n.safari=!0);i.browser=n;i.sub=function(){function n(t,i){return new n.fn.init(t,i)}i.extend(!0,n,this);n.superclass=this;n.fn=n.prototype=this();n.fn.constructor=n;n.sub=this.sub;n.fn.init=function(r,u){return u&&u instanceof i&&!(u instanceof n)&&(u=n(u)),i.fn.init.call(this,r,u,t)};n.fn.init.prototype=n.fn;var t=n(r);return n}}();var u,y,p,gt=/alpha\([^)]*\)/i,se=/opacity=([^)]*)/,he=/^(top|right|bottom|left)$/,ce=/^(none|table(?!-c[ea]).+)/,ar=/^margin/,le=new RegExp("^("+nt+")(.*)$","i"),ut=new RegExp("^("+nt+")(?!px)[a-z%]+$","i"),ae=new RegExp("^([-+])=("+nt+")","i"),ni={BODY:"block"},ve={position:"absolute",visibility:"hidden",display:"block"},vr={letterSpacing:0,fontWeight:400},c=["Top","Right","Bottom","Left"],yr=["Webkit","O","Moz","ms"],ye=i.fn.toggle;i.fn.extend({css:function(n,r){return i.access(this,function(n,r,u){return u!==t?i.style(n,r,u):i.css(n,r)},n,r,arguments.length>1)},show:function(){return wr(this,!0)},hide:function(){return wr(this)},toggle:function(n,t){var r=typeof n=="boolean";return i.isFunction(n)&&i.isFunction(t)?ye.apply(this,arguments):this.each(function(){(r?n:ft(this))?i(this).show():i(this).hide()})}});i.extend({cssHooks:{opacity:{get:function(n,t){if(t){var i=u(n,"opacity");return i===""?"1":i}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:i.support.cssFloat?"cssFloat":"styleFloat"},style:function(n,r,u,f){if(n&&n.nodeType!==3&&n.nodeType!==8&&n.style){var o,s,e,h=i.camelCase(r),c=n.style;if(r=i.cssProps[h]||(i.cssProps[h]=pr(c,h)),e=i.cssHooks[r]||i.cssHooks[h],u!==t){if(s=typeof u,s==="string"&&(o=ae.exec(u))&&(u=(o[1]+1)*o[2]+parseFloat(i.css(n,r)),s="number"),u==null||s==="number"&&isNaN(u))return;if(s!=="number"||i.cssNumber[h]||(u+="px"),!e||!("set"in e)||(u=e.set(n,u,f))!==t)try{c[r]=u}catch(l){}}else return e&&"get"in e&&(o=e.get(n,!1,f))!==t?o:c[r]}},css:function(n,r,f,e){var o,c,s,h=i.camelCase(r);return(r=i.cssProps[h]||(i.cssProps[h]=pr(n.style,h)),s=i.cssHooks[r]||i.cssHooks[h],s&&"get"in s&&(o=s.get(n,!0,e)),o===t&&(o=u(n,r)),o==="normal"&&r in vr&&(o=vr[r]),f||e!==t)?(c=parseFloat(o),f||i.isNumeric(c)?c||0:o):o},swap:function(n,t,i){var u,r,f={};for(r in t)f[r]=n.style[r],n.style[r]=t[r];u=i.call(n);for(r in t)n.style[r]=f[r];return u}});n.getComputedStyle?u=function(t,r){var f,o,s,h,e=n.getComputedStyle(t,null),u=t.style;return e&&(f=e.getPropertyValue(r)||e[r],f!==""||i.contains(t.ownerDocument,t)||(f=i.style(t,r)),ut.test(f)&&ar.test(r)&&(o=u.width,s=u.minWidth,h=u.maxWidth,u.minWidth=u.maxWidth=u.width=f,f=e.width,u.width=o,u.minWidth=s,u.maxWidth=h)),f}:r.documentElement.currentStyle&&(u=function(n,t){var f,u,i=n.currentStyle&&n.currentStyle[t],r=n.style;return i==null&&r&&r[t]&&(i=r[t]),ut.test(i)&&!he.test(t)&&(f=r.left,u=n.runtimeStyle&&n.runtimeStyle.left,u&&(n.runtimeStyle.left=n.currentStyle.left),r.left=t==="fontSize"?"1em":i,i=r.pixelLeft+"px",r.left=f,u&&(n.runtimeStyle.left=u)),i===""?"auto":i});i.each(["height","width"],function(n,t){i.cssHooks[t]={get:function(n,r,f){if(r)return n.offsetWidth===0&&ce.test(u(n,"display"))?i.swap(n,ve,function(){return dr(n,t,f)}):dr(n,t,f)},set:function(n,r,u){return br(n,r,u?kr(n,t,u,i.support.boxSizing&&i.css(n,"boxSizing")==="border-box"):0)}}});i.support.opacity||(i.cssHooks.opacity={get:function(n,t){return se.test((t&&n.currentStyle?n.currentStyle.filter:n.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(n,t){var r=n.style,u=n.currentStyle,e=i.isNumeric(t)?"alpha(opacity="+t*100+")":"",f=u&&u.filter||r.filter||"";(r.zoom=1,t>=1&&i.trim(f.replace(gt,""))===""&&r.removeAttribute&&(r.removeAttribute("filter"),u&&!u.filter))||(r.filter=gt.test(f)?f.replace(gt,e):f+" "+e)}});i(function(){i.support.reliableMarginRight||(i.cssHooks.marginRight={get:function(n,t){return i.swap(n,{display:"inline-block"},function(){if(t)return u(n,"marginRight")})}});!i.support.pixelPosition&&i.fn.position&&i.each(["top","left"],function(n,t){i.cssHooks[t]={get:function(n,r){if(r){var f=u(n,t);return ut.test(f)?i(n).position()[t]+"px":f}}}})});i.expr&&i.expr.filters&&(i.expr.filters.hidden=function(n){return n.offsetWidth===0&&n.offsetHeight===0||!i.support.reliableHiddenOffsets&&(n.style&&n.style.display||u(n,"display"))==="none"},i.expr.filters.visible=function(n){return!i.expr.filters.hidden(n)});i.each({margin:"",padding:"",border:"Width"},function(n,t){i.cssHooks[n+t]={expand:function(i){for(var u=typeof i=="string"?i.split(" "):[i],f={},r=0;r<4;r++)f[n+c[r]+t]=u[r]||u[r-2]||u[0];return f}};ar.test(n)||(i.cssHooks[n+t].set=br)});var pe=/%20/g,we=/\[\]$/,nu=/\r?\n/g,be=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ke=/^(?:select|textarea)/i;i.fn.extend({serialize:function(){return i.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?i.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ke.test(this.nodeName)||be.test(this.type))}).map(function(n,t){var r=i(this).val();return r==null?null:i.isArray(r)?i.map(r,function(n){return{name:t.name,value:n.replace(nu,"\r\n")}}):{name:t.name,value:r.replace(nu,"\r\n")}}).get()}});i.param=function(n,r){var u,f=[],e=function(n,t){t=i.isFunction(t)?t():t==null?"":t;f[f.length]=encodeURIComponent(n)+"="+encodeURIComponent(t)};if(r===t&&(r=i.ajaxSettings&&i.ajaxSettings.traditional),i.isArray(n)||n.jquery&&!i.isPlainObject(n))i.each(n,function(){e(this.name,this.value)});else for(u in n)ti(u,n[u],r,e);return f.join("&").replace(pe,"+")};var l,a,de=/#.*$/,ge=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,no=/^(?:GET|HEAD)$/,to=/^\/\//,tu=/\?/,io=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,ro=/([?&])_=[^&]*/,iu=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,ru=i.fn.load,ii={},uu={},fu=["*/"]+["*"];try{a=yu.href}catch(po){a=r.createElement("a");a.href="";a=a.href}l=iu.exec(a.toLowerCase())||[];i.fn.load=function(n,r,u){if(typeof n!="string"&&ru)return ru.apply(this,arguments);if(!this.length)return this;var f,o,s,h=this,e=n.indexOf(" ");return e>=0&&(f=n.slice(e,n.length),n=n.slice(0,e)),i.isFunction(r)?(u=r,r=t):r&&typeof r=="object"&&(o="POST"),i.ajax({url:n,type:o,dataType:"html",data:r,complete:function(n,t){u&&h.each(u,s||[n.responseText,t,n])}}).done(function(n){s=arguments;h.html(f?i("<div>").append(n.replace(io,"")).find(f):n)}),this};i.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(n,t){i.fn[t]=function(n){return this.on(t,n)}});i.each(["get","post"],function(n,r){i[r]=function(n,u,f,e){return i.isFunction(u)&&(e=e||f,f=u,u=t),i.ajax({type:r,url:n,data:u,success:f,dataType:e})}});i.extend({getScript:function(n,r){return i.get(n,t,r,"script")},getJSON:function(n,t,r){return i.get(n,t,r,"json")},ajaxSetup:function(n,t){return t?ou(n,i.ajaxSettings):(t=n,n=i.ajaxSettings),ou(n,t),n},ajaxSettings:{url:a,isLocal:/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/.test(l[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":fu},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":n.String,"text html":!0,"text json":i.parseJSON,"text xml":i.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:eu(ii),ajaxTransport:eu(uu),ajax:function(n,r){function b(n,r,h,l){var a,tt,b,it,p,v=r;e!==2&&(e=2,d&&clearTimeout(d),c=t,k=l||"",f.readyState=n>0?4:0,h&&(it=uo(u,f,h)),n>=200&&n<300||n===304?(u.ifModified&&(p=f.getResponseHeader("Last-Modified"),p&&(i.lastModified[o]=p),p=f.getResponseHeader("Etag"),p&&(i.etag[o]=p)),n===304?(v="notmodified",a=!0):(a=fo(u,it),v=a.state,tt=a.data,b=a.error,a=!b)):(b=v,(!v||n)&&(v="error",n<0&&(n=0))),f.status=n,f.statusText=(r||v)+"",a?nt.resolveWith(s,[tt,v,f]):nt.rejectWith(s,[f,v,b]),f.statusCode(w),w=t,y&&g.trigger("ajax"+(a?"Success":"Error"),[f,u,a?tt:b]),rt.fireWith(s,[f,v]),y&&(g.trigger("ajaxComplete",[f,u]),--i.active||i.event.trigger("ajaxStop")))}var tt,it;typeof n=="object"&&(r=n,n=t);r=r||{};var o,k,p,c,d,a,y,v,u=i.ajaxSetup({},r),s=u.context||u,g=s!==u&&(s.nodeType||s instanceof i)?i(s):i.event,nt=i.Deferred(),rt=i.Callbacks("once memory"),w=u.statusCode||{},ut={},ft={},e=0,ot="canceled",f={readyState:0,setRequestHeader:function(n,t){if(!e){var i=n.toLowerCase();n=ft[i]=ft[i]||n;ut[n]=t}return this},getAllResponseHeaders:function(){return e===2?k:null},getResponseHeader:function(n){var i;if(e===2){if(!p)for(p={};i=ge.exec(k);)p[i[1].toLowerCase()]=i[2];i=p[n.toLowerCase()]}return i===t?null:i},overrideMimeType:function(n){return e||(u.mimeType=n),this},abort:function(n){return n=n||ot,c&&c.abort(n),b(0,n),this}};if(nt.promise(f),f.success=f.done,f.error=f.fail,f.complete=rt.add,f.statusCode=function(n){if(n){var t;if(e<2)for(t in n)w[t]=[w[t],n[t]];else t=n[f.status],f.always(t)}return this},u.url=((n||u.url)+"").replace(de,"").replace(to,l[1]+"//"),u.dataTypes=i.trim(u.dataType||"*").toLowerCase().split(h),u.crossDomain==null&&(a=iu.exec(u.url.toLowerCase()),u.crossDomain=!!(a&&(a[1]!==l[1]||a[2]!==l[2]||(a[3]||(a[1]==="http:"?80:443))!=(l[3]||(l[1]==="http:"?80:443))))),u.data&&u.processData&&typeof u.data!="string"&&(u.data=i.param(u.data,u.traditional)),et(ii,u,r,f),e===2)return f;y=u.global;u.type=u.type.toUpperCase();u.hasContent=!no.test(u.type);y&&i.active++==0&&i.event.trigger("ajaxStart");u.hasContent||(u.data&&(u.url+=(tu.test(u.url)?"&":"?")+u.data,delete u.data),o=u.url,u.cache===!1&&(tt=i.now(),it=u.url.replace(ro,"$1_="+tt),u.url=it+(it===u.url?(tu.test(u.url)?"&":"?")+"_="+tt:"")));(u.data&&u.hasContent&&u.contentType!==!1||r.contentType)&&f.setRequestHeader("Content-Type",u.contentType);u.ifModified&&(o=o||u.url,i.lastModified[o]&&f.setRequestHeader("If-Modified-Since",i.lastModified[o]),i.etag[o]&&f.setRequestHeader("If-None-Match",i.etag[o]));f.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+(u.dataTypes[0]!=="*"?", "+fu+"; q=0.01":""):u.accepts["*"]);for(v in u.headers)f.setRequestHeader(v,u.headers[v]);if(u.beforeSend&&(u.beforeSend.call(s,f,u)===!1||e===2))return f.abort();ot="abort";for(v in{success:1,error:1,complete:1})f[v](u[v]);if(c=et(uu,u,r,f),c){f.readyState=1;y&&g.trigger("ajaxSend",[f,u]);u.async&&u.timeout>0&&(d=setTimeout(function(){f.abort("timeout")},u.timeout));try{e=1;c.send(ut,b)}catch(st){if(e<2)b(-1,st);else throw st;}}else b(-1,"No Transport");return f},active:0,lastModified:{},etag:{}});var su=[],eo=/\?/,ot=/(=)\?(?=&|$)|\?\?/,oo=i.now();i.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=su.pop()||i.expando+"_"+oo++;return this[n]=!0,n}});i.ajaxPrefilter("json jsonp",function(r,u,f){var e,s,o,h=r.data,c=r.url,l=r.jsonp!==!1,a=l&&ot.test(c),v=l&&!a&&typeof h=="string"&&!(r.contentType||"").indexOf("application/x-www-form-urlencoded")&&ot.test(h);if(r.dataTypes[0]==="jsonp"||a||v)return e=r.jsonpCallback=i.isFunction(r.jsonpCallback)?r.jsonpCallback():r.jsonpCallback,s=n[e],a?r.url=c.replace(ot,"$1"+e):v?r.data=h.replace(ot,"$1"+e):l&&(r.url+=(eo.test(c)?"&":"?")+r.jsonp+"="+e),r.converters["script json"]=function(){return o||i.error(e+" was not called"),o[0]},r.dataTypes[0]="json",n[e]=function(){o=arguments},f.always(function(){n[e]=s;r[e]&&(r.jsonpCallback=u.jsonpCallback,su.push(e));o&&i.isFunction(s)&&s(o[0]);o=s=t}),"script"});i.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(n){return i.globalEval(n),n}}});i.ajaxPrefilter("script",function(n){n.cache===t&&(n.cache=!1);n.crossDomain&&(n.type="GET",n.global=!1)});i.ajaxTransport("script",function(n){if(n.crossDomain){var i,u=r.head||r.getElementsByTagName("head")[0]||r.documentElement;return{send:function(f,e){i=r.createElement("script");i.async="async";n.scriptCharset&&(i.charset=n.scriptCharset);i.src=n.url;i.onload=i.onreadystatechange=function(n,r){(r||!i.readyState||/loaded|complete/.test(i.readyState))&&(i.onload=i.onreadystatechange=null,u&&i.parentNode&&u.removeChild(i),i=t,r||e(200,"success"))};u.insertBefore(i,u.firstChild)},abort:function(){if(i)i.onload(0,1)}}}});st=n.ActiveXObject?function(){for(var n in w)w[n](0,1)}:!1;hu=0;i.ajaxSettings.xhr=n.ActiveXObject?function(){return!this.isLocal&&cu()||so()}:cu,function(n){i.extend(i.support,{ajax:!!n,cors:!!n&&"withCredentials"in n})}(i.ajaxSettings.xhr());i.support.ajax&&i.ajaxTransport(function(r){if(!r.crossDomain||i.support.cors){var u;return{send:function(f,e){var h,s,o=r.xhr();if(r.username?o.open(r.type,r.url,r.async,r.username,r.password):o.open(r.type,r.url,r.async),r.xhrFields)for(s in r.xhrFields)o[s]=r.xhrFields[s];r.mimeType&&o.overrideMimeType&&o.overrideMimeType(r.mimeType);r.crossDomain||f["X-Requested-With"]||(f["X-Requested-With"]="XMLHttpRequest");try{for(s in f)o.setRequestHeader(s,f[s])}catch(c){}o.send(r.hasContent&&r.data||null);u=function(n,f){var s,a,v,c,l;try{if(u&&(f||o.readyState===4))if(u=t,h&&(o.onreadystatechange=i.noop,st&&delete w[h]),f)o.readyState!==4&&o.abort();else{s=o.status;v=o.getAllResponseHeaders();c={};l=o.responseXML;l&&l.documentElement&&(c.xml=l);try{c.text=o.responseText}catch(p){}try{a=o.statusText}catch(p){a=""}s||!r.isLocal||r.crossDomain?s===1223&&(s=204):s=c.text?200:404}}catch(y){f||e(-1,y)}c&&e(s,a,c,v)};r.async?o.readyState===4?setTimeout(u,0):(h=++hu,st&&(w||(w={},i(n).unload(st)),w[h]=u),o.onreadystatechange=u):u()},abort:function(){u&&u(0,1)}}}});var b,ht,ho=/^(?:toggle|show|hide)$/,co=new RegExp("^(?:([-+])=|)("+nt+")([a-z%]*)$","i"),lo=/queueHooks$/,ct=[yo],d={"*":[function(n,t){var o,s,r=this.createTween(n,t),e=co.exec(t),h=r.cur(),u=+h||0,f=1,c=20;if(e){if(o=+e[2],s=e[3]||(i.cssNumber[n]?"":"px"),s!=="px"&&u){u=i.css(r.elem,n,!0)||o||1;do f=f||".5",u=u/f,i.style(r.elem,n,u+s);while(f!==(f=r.cur()/h)&&f!==1&&--c)}r.unit=s;r.start=u;r.end=e[1]?u+(e[1]+1)*o:o}return r}]};i.Animation=i.extend(au,{tweener:function(n,t){i.isFunction(n)?(t=n,n=["*"]):n=n.split(" ");for(var r,u=0,f=n.length;u<f;u++)r=n[u],d[r]=d[r]||[],d[r].unshift(t)},prefilter:function(n,t){t?ct.unshift(n):ct.push(n)}});i.Tween=f;f.prototype={constructor:f,init:function(n,t,r,u,f,e){this.elem=n;this.prop=r;this.easing=f||"swing";this.options=t;this.start=this.now=this.cur();this.end=u;this.unit=e||(i.cssNumber[r]?"":"px")},cur:function(){var n=f.propHooks[this.prop];return n&&n.get?n.get(this):f.propHooks._default.get(this)},run:function(n){var t,r=f.propHooks[this.prop];return this.pos=this.options.duration?t=i.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):t=n,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):f.propHooks._default.set(this),this}};f.prototype.init.prototype=f.prototype;f.propHooks={_default:{get:function(n){var t;return n.elem[n.prop]!=null&&(!n.elem.style||n.elem.style[n.prop]==null)?n.elem[n.prop]:(t=i.css(n.elem,n.prop,!1,""),!t||t==="auto"?0:t)},set:function(n){i.fx.step[n.prop]?i.fx.step[n.prop](n):n.elem.style&&(n.elem.style[i.cssProps[n.prop]]!=null||i.cssHooks[n.prop])?i.style(n.elem,n.prop,n.now+n.unit):n.elem[n.prop]=n.now}}};f.propHooks.scrollTop=f.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}};i.each(["toggle","show","hide"],function(n,t){var r=i.fn[t];i.fn[t]=function(u,f,e){return u==null||typeof u=="boolean"||!n&&i.isFunction(u)&&i.isFunction(f)?r.apply(this,arguments):this.animate(lt(t,!0),u,f,e)}});i.fn.extend({fadeTo:function(n,t,i,r){return this.filter(ft).css("opacity",0).show().end().animate({opacity:t},n,i,r)},animate:function(n,t,r,u){var e=i.isEmptyObject(n),f=i.speed(t,r,u),o=function(){var t=au(this,i.extend({},n),f);e&&t.stop(!0)};return e||f.queue===!1?this.each(o):this.queue(f.queue,o)},stop:function(n,r,u){var f=function(n){var t=n.stop;delete n.stop;t(u)};return typeof n!="string"&&(u=r,r=n,n=t),r&&n!==!1&&this.queue(n||"fx",[]),this.each(function(){var o=!0,t=n!=null&&n+"queueHooks",e=i.timers,r=i._data(this);if(t)r[t]&&r[t].stop&&f(r[t]);else for(t in r)r[t]&&r[t].stop&&lo.test(t)&&f(r[t]);for(t=e.length;t--;)e[t].elem===this&&(n==null||e[t].queue===n)&&(e[t].anim.stop(u),o=!1,e.splice(t,1));(o||!u)&&i.dequeue(this,n)})}});i.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,t){i.fn[n]=function(n,i,r){return this.animate(t,n,i,r)}});i.speed=function(n,t,r){var u=n&&typeof n=="object"?i.extend({},n):{complete:r||!r&&t||i.isFunction(n)&&n,duration:n,easing:r&&t||t&&!i.isFunction(t)&&t};return u.duration=i.fx.off?0:typeof u.duration=="number"?u.duration:u.duration in i.fx.speeds?i.fx.speeds[u.duration]:i.fx.speeds._default,(u.queue==null||u.queue===!0)&&(u.queue="fx"),u.old=u.complete,u.complete=function(){i.isFunction(u.old)&&u.old.call(this);u.queue&&i.dequeue(this,u.queue)},u};i.easing={linear:function(n){return n},swing:function(n){return.5-Math.cos(n*Math.PI)/2}};i.timers=[];i.fx=f.prototype.init;i.fx.tick=function(){var u,n=i.timers,r=0;for(b=i.now();r<n.length;r++)u=n[r],u()||n[r]!==u||n.splice(r--,1);n.length||i.fx.stop();b=t};i.fx.timer=function(n){n()&&i.timers.push(n)&&!ht&&(ht=setInterval(i.fx.tick,i.fx.interval))};i.fx.interval=13;i.fx.stop=function(){clearInterval(ht);ht=null};i.fx.speeds={slow:600,fast:200,_default:400};i.fx.step={};i.expr&&i.expr.filters&&(i.expr.filters.animated=function(n){return i.grep(i.timers,function(t){return n===t.elem}).length});ri=/^(?:body|html)$/i;i.fn.offset=function(n){if(arguments.length)return n===t?this:this.each(function(t){i.offset.setOffset(this,n,t)});var u,o,s,h,c,l,a,f={top:0,left:0},r=this[0],e=r&&r.ownerDocument;if(e)return(o=e.body)===r?i.offset.bodyOffset(r):(u=e.documentElement,!i.contains(u,r))?f:(typeof r.getBoundingClientRect!="undefined"&&(f=r.getBoundingClientRect()),s=vu(e),h=u.clientTop||o.clientTop||0,c=u.clientLeft||o.clientLeft||0,l=s.pageYOffset||u.scrollTop,a=s.pageXOffset||u.scrollLeft,{top:f.top+l-h,left:f.left+a-c})};i.offset={bodyOffset:function(n){var t=n.offsetTop,r=n.offsetLeft;return i.support.doesNotIncludeMarginInBodyOffset&&(t+=parseFloat(i.css(n,"marginTop"))||0,r+=parseFloat(i.css(n,"marginLeft"))||0),{top:t,left:r}},setOffset:function(n,t,r){var f=i.css(n,"position");f==="static"&&(n.style.position="relative");var e=i(n),o=e.offset(),l=i.css(n,"top"),a=i.css(n,"left"),v=(f==="absolute"||f==="fixed")&&i.inArray("auto",[l,a])>-1,u={},s={},h,c;v?(s=e.position(),h=s.top,c=s.left):(h=parseFloat(l)||0,c=parseFloat(a)||0);i.isFunction(t)&&(t=t.call(n,r,o));t.top!=null&&(u.top=t.top-o.top+h);t.left!=null&&(u.left=t.left-o.left+c);"using"in t?t.using.call(n,u):e.css(u)}};i.fn.extend({position:function(){if(this[0]){var u=this[0],n=this.offsetParent(),t=this.offset(),r=ri.test(n[0].nodeName)?{top:0,left:0}:n.offset();return t.top-=parseFloat(i.css(u,"marginTop"))||0,t.left-=parseFloat(i.css(u,"marginLeft"))||0,r.top+=parseFloat(i.css(n[0],"borderTopWidth"))||0,r.left+=parseFloat(i.css(n[0],"borderLeftWidth"))||0,{top:t.top-r.top,left:t.left-r.left}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent||r.body;n&&!ri.test(n.nodeName)&&i.css(n,"position")==="static";)n=n.offsetParent;return n||r.body})}});i.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(n,r){var u=/Y/.test(r);i.fn[n]=function(f){return i.access(this,function(n,f,e){var o=vu(n);if(e===t)return o?r in o?o[r]:o.document.documentElement[f]:n[f];o?o.scrollTo(u?i(o).scrollLeft():e,u?e:i(o).scrollTop()):n[f]=e},n,f,arguments.length,null)}});i.each({Height:"height",Width:"width"},function(n,r){i.each({padding:"inner"+n,content:r,"":"outer"+n},function(u,f){i.fn[f]=function(f,e){var o=arguments.length&&(u||typeof f!="boolean"),s=u||(f===!0||e===!0?"margin":"border");return i.access(this,function(r,u,f){var e;return i.isWindow(r)?r.document.documentElement["client"+n]:r.nodeType===9?(e=r.documentElement,Math.max(r.body["scroll"+n],e["scroll"+n],r.body["offset"+n],e["offset"+n],e["client"+n])):f===t?i.css(r,u,f,s):i.style(r,u,f,s)},r,o?f:t,o,null)}})});n.jQuery=n.$=i; true&&__webpack_require__(/*! !webpack amd options */ "../../node_modules/.pnpm/webpack@4.46.0_webpack-cli@3.3.12/node_modules/webpack/buildin/amd-options.js").jQuery&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return i}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))})(window);
//# sourceMappingURL=jquery-1.8.3.min.js.map


/***/ }),

/***/ "../../../Cognito.Services/Scripts/required/Cognito-init-exoweb.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/required/Cognito-init-exoweb.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Add support for "mailto" in links when rendering templates
Sys.UI.Template.allowedProtocols.push("mailto");
Sys.UI.Template.allowedProtocols.push("file");
Sys.UI.Template.allowedProtocols.push("intent");

ExoWeb.config.autoActivation = false;
ExoWeb.config.allowTypeLazyLoading = false;
ExoWeb.config.enableBatchChanges = false;
ExoWeb.config.allowObjectLazyLoading = true;
ExoWeb.config.allowListLazyLoading = true;
ExoWeb.config.calculationErrorDefault = null;

(function ($) {
	ExoWeb.setLogErrorProvider(function (message, e) {
		// This method does nothing, but it is needed in order to override the default
		// "log error provider" registered in WebService.js in ExoWeb
	});


	function updateNativeTimeField() {
		if (this.value) {
			$(this).removeClass("c-timepicker-empty");
		} else {
			$(this).addClass("c-timepicker-empty");
		}
	}

	function setupNativeTimeField() {
		var fifteenMinutesInSeconds = 900;

		$(this).attr("step", fifteenMinutesInSeconds);

		$(this).attr("novalidate", "");

		// Add a class to an ancestor hide the icon in case removal fails due to changes in DOM structure
		$(this).closest(".c-editor").addClass("c-use-native-datetime-fields");

		$(this).closest(".c-editor-time").next(".c-editor-time-icon").remove();

		updateNativeTimeField.call(this);

		// Don't allow tabbing into the text field on mobile devices
		$(this).siblings('[type="text"]').attr('tabindex', -1);

		// Don't change focus on iOS, since it causes the picker to hide and appears to transfer the
		// HH:mm time value to the focussed text field, also, iOS doesn't show focus indication anyway
		if (!Cognito.isDeviceType('iphone|ipod|ipad')) {

			if (Cognito.isDeviceType('android')) {
				// Don't allow tabbing into the time field in android
				// This emulates the native behavior of the 'time' field (as well as 'select') on android
				$(this).attr('tabindex', -1);
			}

			// Set focus to faux input when native time input is clicked (for visual focus indication)
			$(this).on('click', function () {
				$(this).siblings('[type="text"]').focus();
			});

		}
	}

	function createTimePicker() {
		// only enable timepicker for cultures that are compatible with en-US
		var longTimePattern = Sys.CultureInfo.CurrentCulture.dateTimeFormat.LongTimePattern;
		if (longTimePattern.match("^h?h[:.]mm[:.]ss tt$") ){
			$(this).timepicker({
				AMDesignator: Sys.CultureInfo.CurrentCulture.dateTimeFormat.AMDesignator,
				PMDesignator: Sys.CultureInfo.CurrentCulture.dateTimeFormat.PMDesignator,
				timeSeparator: Sys.CultureInfo.CurrentCulture.dateTimeFormat.TimeSeparator,
				twoDigitHourFormat: longTimePattern.substring(0, 2) == "hh"
			})
			.on("changeTime.timepicker", function (e) {
				$simulateMutationEvent(this, "change", false, true);
			});
		}
		// 24 hour time
		else if (longTimePattern.match("^H?H[:.]mm[:.]ss$")) {
			$(this).timepicker({
				showMeridian: false,
				timeSeparator: Sys.CultureInfo.CurrentCulture.dateTimeFormat.TimeSeparator,
				twoDigitHourFormat: longTimePattern.substring(0, 2) == "HH"
			})
			.on("changeTime.timepicker", function (e) {
				$simulateMutationEvent(this, "change", false, true);
			});
		}
	}

	function createSignature() {

		var sig = $(this).parent();

		window.setTimeout(function () {
			var jsignature = sig.children().first();
			var img = sig.find("img");

			// If no controls found, abort
			if (!jsignature.length || !img.length) return;

			// Initialize the signature control
			jsignature.jSignature({ "background-color": "transparent", color: img.css("color"), "decor-color": "#eee", height: 150, width: "100%" });

			// Hide the signature control if a signature is already present
			// The .not is to exlcude the c-readonly added to container c-field and c-section for read-only support
			if (img.attr("src").length || sig.closest(".c-readonly").not(".c-field, .c-section").length) {
				jsignature.hide();

				if (img.attr("src").length) {
					sig.addClass("c-signature-present");

					// To have symmetry with other signature html
					sig.closest('.c-editor').find('> div').addClass("c-signature-present");
					jsignature.jSignature("importData", img.attr("src"));
				}
			}

			// Otherwise, hide the image placeholder
			else
				img.hide();

			if ($(jsignature).parents(".c-signature").hasClass("c-readonly")) {
				$(jsignature).jSignature("disable")
			}

			// Subscribe to change event
			jsignature.bind('change', function (e) {

				// Get the signature
				var signature = $parentContextData(this);

				// No signature present
				if (jsignature.jSignature("getData", "native").length !== 0 && jsignature.is(":visible")) {
					// Set the signature SVG and PNG properties
					signature.set_Svg("data:" + jsignature.jSignature("getData", "svgbase64").join(","));
					signature.set_Png("data:" + jsignature.jSignature("getData", "image").join(","));

					// Add a class to indicate that a signature is present
					jsignature.parent().addClass("c-signature-present");
				}
			});
		}, 0);
	}

	function createAutoComplete() {
		$(this).typeahead({
		    minLength: 0,
            source: null
		});
	}

	// The toggle has been re-implemented to no longer depend on cognito-toggle.js
	//function createToggle() {
	//	var that = $(this);
	//	$(this)['bootstrapSwitch']();
	//	$(this).bootstrapSwitch('setAnimated', true);
	//	$(this).parents(".has-switch").on("switch-change", function () {
	//		$simulateMutationEvent(that[0], "change", false, true);
	//	});
	//}

	function createPlaceholder() {
		if (!$.fn.placeholder) return;

		$(this).placeholder();
	}

	$(document.documentElement).ever({
		selector: "div.c-signature img",
		bound: createSignature
	});

	$(document.documentElement).ever({
		selector: "input[type=text].c-timepicker",
		bound: createTimePicker
	});

	$(document.documentElement).ever({
		selector: "input[type=time].c-timepicker",
		bound: setupNativeTimeField
	});

	$(document.documentElement).on("input change focus", "input[type=time].c-timepicker", updateNativeTimeField);

	$(document.documentElement).ever({
		selector: "input.c-autocomplete",
		bound: createAutoComplete
	});

	// The toggle has been re-implemented to no longer depend on cognito-toggle.js
	//$(document.documentElement).ever({
	//	selector: "input.c-toggle",
	//	bound: createToggle
	//});

	$(document.documentElement).ever({
		selector: "input,textarea",
		bound: createPlaceholder
	});

	$(document.documentElement).ever({
		selector: "input.c-mask",
		bound: function () {
			var mask = $(this).attr("data-mask");
			$(this).mask(mask, { autoclear: false, autoinit: false });
		},
		unbound: function () {
			$(this).unmask();
		}
	});

	// Clear signatures when delete button is clicked
	$(document.documentElement).on("click", ".c-signature-present .c-signature-glyph", function () {
		// Get the signature
		var signature = $parentContextData(this);

		// Clear the signature SVG and PNG properties
		signature.set_Svg(null);
		signature.set_Png(null);

		// Remove signature indicator
		$(this).parent().removeClass("c-signature-present");

		// Reset and show the signature control
		$(this).parent().children().first().jSignature("reset").show();
		$(this).parent().children("img").hide();
		window.setTimeout(Cognito.resize);
	});

	// Toggle
	// Trigger toggle with JS instead of <label> per AXE report
	$(document.documentElement).on('click', '.c-toggle--container', function () {
		$(this).siblings('[type="checkbox"]').trigger('click').trigger('focus');
	});

})(ExoJQuery || jQuery);


/***/ }),

/***/ "../../../Cognito.Services/Scripts/required/cognito-init-dependencies.js":
/*!****************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/required/cognito-init-dependencies.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.Cognito = window.Cognito || {};

(function(window, jQuery) {
	if (!jQuery) {
		console.error("jQuery not loaded.  Cognito depends on jQuery 1.7+");
	}
	
	window.ExoJQuery = jQuery.noConflict(true);
})(window, jQuery);

/***/ }),

/***/ "../../../Cognito.Services/Scripts/required/jquery.xdr.js":
/*!*************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/required/jquery.xdr.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

﻿if (window.XDomainRequest) {
	jQuery.ajaxTransport(function (s) {
		if (s.crossDomain /*&& s.async*/) {
			if (s.timeout) {
				s.xdrTimeout = s.timeout;
				delete s.timeout;
			}
			var xdr;
			return {
				send: function (_, complete) {
					function callback(status, statusText, response, responseHeaders) {
						xdr.onload = xdr.onerror = xdr.ontimeout = xdr.onprogress = function() { };
						xdr = undefined;

						if (response.text.slice(0, 9) === "ie9error:") {
							var data = JSON.parse(response.text.substring(9));
							status = data.status;
							statusText = data.description;
							response.text = "";
						}

						complete(status, statusText, response, responseHeaders);
					}
					xdr = new XDomainRequest();

					if (s.url.slice(0, 5) === "https" && window.location.protocol === "http:") {
						s.url = s.url.replace("https", "http");
					}

					xdr.open(s.type, s.url);
					xdr.onload = function () {
						callback(200, "OK", {
							text: xdr.responseText
						}, "Content-Type: " + xdr.contentType);
					};
					xdr.onerror = function () {
						callback(500, "General error.");
					};
					xdr.onprogress = function () { };
					if (s.xdrTimeout) {
						xdr.ontimeout = function () {
							callback(0, "timeout");
						};
						xdr.timeout = s.xdrTimeout;
					}
					xdr.send((s.hasContent && s.data) || null);
				},
				abort: function () {
					if (xdr) {
						xdr.onerror = function () { };
						xdr.abort();
					}
				}
			};
		}
	});
}


/***/ }),

/***/ "../../../Public/ExoWeb/ExoWeb/client/dist/exoweb-msajax.js":
/*!***************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Public/ExoWeb/ExoWeb/client/dist/exoweb-msajax.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.ExoWeb = {};
window.ExoWeb.Model = {};
window.ExoWeb.Mapper = {};
window.ExoWeb.UI = {};
window.ExoWeb.View = {};
window.ExoWeb.DotNet = {};

(function(jQuery) {

	// #region ExoWeb.Config
	//////////////////////////////////////////////////

	var config = {
		// Avoid patterns that can make debugging more difficult, try/catch for example.
		debug: false,

		// Indicates that signal should use window.setTimeout when invoking callbacks. This is
		// done in order to get around problems with browser complaining about long-running script.
		signalTimeout: false,

		// The maximum number of pending signals to execute as a batch.
		// By default this is null, which means that no maximum is enforced.
		signalMaxBatchSize: null,

		// Causes the query processing to load model roots in the query individually. By default they are batch-loaded.
		individualQueryLoading: false,

		// Uniquely identifies this application if more than one app is hosted under the same domain name.
		appInstanceId: "?",

		// Automatic DOM activation when document.ready fires
		autoActivation: true,

		// Controls different whether lazy loading are allowed. If set to false, an error is raised when lazy loading occurs.
		allowTypeLazyLoading: true,
		allowObjectLazyLoading: true,
		allowListLazyLoading: true,

		// Allows additional scope variables to be introduced for dynamically compiled expressions
		expressionScope: null,

		// Specifies the default defaultIfError value for CalculatedPropertyRule instances
		calculationErrorDefault: undefined,

		// Specifies whether the adapter should update a control's value when the display
		// value is updated while being set, for example due to applying a format.
		autoReformat: true,

		// Specifies whether changes should be collected in logical batches.
		enableBatchChanges: true,

		// Specifies whether "runaway" rules should be detected, e.g. the case where a
		// rule causes itself to be re-entered continually (wheter directly or indirectly).
		detectRunawayRules: false,

		// Controls the maximum number of times that a child event scope can transfer events
		// to its parent while the parent scope is exiting. A large number indicates that
		// rules are not reaching steady-state. Technically something other than rules could
		// cause this scenario, but in practice they are the primary use-case for event scope. 
		nonExitingScopeNestingCount: 100
	};

	ExoWeb.config = config;

	// #endregion

	// #region ExoWeb.Unload
	//////////////////////////////////////////////////

	// Attach to the unload event and change the page state so that scripts can
	// toggle their behavior and not do things that will fail during unload. 
	ExoWeb.windowIsUnloading = false;
	if (window.addEventListener) {
		window.addEventListener("unload", function () {
			ExoWeb.windowIsUnloading = true;
		}, false);
	} else if (window.attachEvent) {
		window.attachEvent("onunload", function () {
			ExoWeb.windowIsUnloading = true;
		});
	}

	// #endregion

	// #region ExoWeb.Errors
	//////////////////////////////////////////////////

	function ArgumentTypeError(argumentName, expectedType, actualValue) {
		/// <summary locid="M:J#ArgumentTypeError.#ctor">
		/// An error type that is raised when an argument to a function
		/// is of the wrong type.
		/// </summary>
		/// <param name="argumentName" type="String">The name of the argument that was of the wrong type.</param>
		/// <param name="expectedType" type="String">The expected type of the arguments.</param>
		/// <param name="value">The actual number of arguments that were given.</param>

		if (arguments.length !== 3) throw new ArgumentsLengthError(3, arguments.length);
		if (argumentName == null) throw new ArgumentNullError("argumentName");
		if (typeof(argumentName) !== "string") throw new ArgumentTypeError("argumentName", "string", argumentName);
		if (expectedType == null) throw new ArgumentNullError("expectedType");
		if (typeof(expectedType) !== "string") throw new ArgumentTypeError("expectedType", "string", expectedType);

		this.name = "ArgumentTypeError";
		this.argumentName = argumentName;
		this.expectedType = expectedType;
		this.actualValue = actualValue;
		this.message = "Argument '" + argumentName + "' must be of type " + expectedType + ": " + actualValue + ".";
	}

	ArgumentTypeError.prototype = new Error();
	ArgumentTypeError.prototype.constructor = ArgumentTypeError;

	ExoWeb.ArgumentTypeError = ArgumentTypeError;
	window.ArgumentTypeError = ArgumentTypeError;

	function ArgumentsLengthError(expected, actual) {
		/// <summary locid="M:J#ArgumentsLengthError.#ctor">
		/// An error type that is raised when the wrong number
		/// of arguments is passed to a function.
		/// </summary>
		/// <param name="expected" type="Number">The expected number of arguments.</param>
		/// <param name="actual" type="Number">The actual number of arguments that were given.</param>

		if (arguments.length !== 2) throw new ArgumentsLengthError(2, arguments.length);
		if (expected == null) throw new ArgumentNullError("expected");
		if (actual == null) throw new ArgumentNullError("actual");
		if (typeof(expected) !== "number") throw new ArgumentTypeError("expected", "number", expected);
		if (typeof(actual) !== "number") throw new ArgumentTypeError("actual", "number", actual);

		this.name = "ArgumentsLengthError";
		this.expected = expected;
		this.actual = actual;
		this.message = "The number of arguments is not correct, expected " + expected + ", actual " + actual + ".";
	}

	ArgumentsLengthError.prototype = new Error();
	ArgumentsLengthError.prototype.constructor = ArgumentsLengthError;

	ExoWeb.ArgumentsLengthError = ArgumentsLengthError;
	window.ArgumentsLengthError = ArgumentsLengthError;

	function ArgumentNullError(argumentName, reason) {
		/// <summary locid="M:J#ArgumentNullError.#ctor">
		/// An error type that is raised when an argument is
		/// null or undefined and it must have a value.
		/// </summary>
		/// <param name="argumentName" type="String">The name of the argument that was null.</param>
		/// <param name="reason" type="String">The reason that the argument cannot be null.</param>

		if (arguments.length < 1 && arguments.length > 2) throw new ArgumentsLengthError(2, arguments.length);
		if (argumentName == null) throw new ArgumentNullError("argumentName");
		if (typeof(argumentName) !== "string") throw new ArgumentTypeError("argumentName", "string", argumentName);
		if (reason != null && typeof(reason) !== "string") throw new ArgumentTypeError("reason", "string", reason);

		this.name = "ArgumentNullError";
		this.argumentName = argumentName;
		this.reason = reason;
		this.message = "Argument '" + argumentName + "' cannot be null or undefined" + (reason ? ": " + reason + "." : ".");
	}

	ArgumentNullError.prototype = new Error();
	ArgumentNullError.prototype.constructor = ArgumentNullError;

	ExoWeb.ArgumentNullError = ArgumentNullError;
	window.ArgumentNullError = ArgumentNullError;

	function ArgumentError(argumentName, reason) {
		/// <summary locid="M:J#ArgumentNullError.#ctor">
		/// An error type that is raised when an argument has an invalid value.
		/// </summary>
		/// <param name="argumentName" type="String">The name of the argument that was null.</param>
		/// <param name="reason" type="String">The reason that the argument cannot be null.</param>

		if (arguments.length !== 2) throw new ArgumentsLengthError(2, arguments.length);
		if (argumentName == null) throw new ArgumentNullError("argumentName");
		if (typeof (argumentName) !== "string") throw new ArgumentTypeError("argumentName", "string", argumentName);
		if (reason == null) throw new ArgumentNullError("reason");
		if (typeof (reason) !== "string") throw new ArgumentTypeError("reason", "string", reason);

		this.name = "ArgumentError";
		this.argumentName = argumentName;
		this.reason = reason;
		this.message = "Argument '" + argumentName + "' has an invalid value" + (reason ? ": " + reason + "." : ".");
	}

	ArgumentError.prototype = new Error();
	ArgumentError.prototype.constructor = ArgumentError;

	ExoWeb.ArgumentError = ArgumentError;
	window.ArgumentError = ArgumentError;

	var logErrorProvider = null;

	function setLogErrorProvider(fn) {
		/// <summary>
		/// Provide an implementation of the LogError provider.
		/// </summary>
		/// <remarks>
		///
		/// Event propogation
		/// =================
		///
		/// When the global error event occurs, the log error handler is called last
		/// before exiting.  This allows existing subscribers to handle the error and
		/// prevent propogation, also preventing the error from being logged. Subscribers
		/// that attach to the error event after the log error handler is subscribed
		/// (i.e. after the framework script has loaded) should execute their logic
		/// first, then call the original event handler.  Unlike other handlers, the
		/// log error handler may NOT signal that the error was handled to prevent
		/// propogation.  The ExoWeb.error event can be used for that purpose. If the
		/// error reaches the logging phase it is assumed that it will not be handled.  
		///
		/// The event handler's argument(s)
		/// ===============================
		///
		/// The function is called with a single object, referred to as "errorData".
		/// The default object that is passed contains the following properties, which
		/// correspond to the format of the ServiceError object:
		///
		///		"message": The error message.
		///		"type": The type of error.  By default this is simply "Error".  A custom event
		///			handler may choose to attempt to infer the error type from the message.
		///		"url": The URL where the error occurred.  By default this is the current URL.
		///		"refererUrl": By default this is the `document.referrer` property.
		///		"additionalInfo": By default this is an object with `url` and `lineNumber`
		///			properties, which correspond to the arguments of that name which were
		///			passed to the global error event.  Custom error	handlers can remove these
		///			properties and/or include custom data.  Additional properties should use
		///			primative types, and should be only one level deep.  In other words,
		///			`errorData["Foo.Bar"] = 1`, not `errorData.Foo = { Bar: 1 }`.
		///
		/// </remarks>
		/// <param name="fn" type="Function">The error provider function.</param>

		if (arguments.length !== 1) throw new ArgumentsLengthError(1, arguments.length);
		if (fn == null) throw new ArgumentNullError("fn");
		if (typeof(fn) !== "function") throw new ArgumentTypeError("fn", "function", fn);

		logErrorProvider = fn;
	}

	ExoWeb.setLogErrorProvider = setLogErrorProvider;

	var errorEventFns = [];

	function addError (fn) {
		/// <summary>
		/// Attach an event handler to the global error event.
		/// </summary>
		/// <remarks>
		///
		/// Timing of event
		/// ===============
		///
		/// The ExoWeb error event is called when a global error event is raised, immediately
		/// before the "log error" provider is called.
		///
		/// The event handler's argument(s)
		/// ===============================
		///
		/// The event handler is passed four arguments in total: the original three arguments
		/// of the global error handler (message, url, lineNumber, colNumber, errorObj), as well as the "errorData"
		/// object, which will ultimately be passed to the "log error" provider. The event
		/// handler may choose to modified any of the errorData object's properties.
		/// 
		/// </remarks>
		/// <param name="fn" type="Function">The error event function. Signature: f (message, url, lineNumber, colNumber, errorObj, errorData).</param>

		if (fn == null) throw new ArgumentNullError("fn");
		if (typeof(fn) !== "function") throw new ArgumentTypeError("fn", "function", fn);

		errorEventFns.push(fn);
	}

	ExoWeb.addError = addError;

	function removeError(fn) {
		/// <summary>
		/// Removes an event handler to the global error event.
		/// </summary>
		/// <param name="fn" type="Function">The error event function.</param>

		if (fn == null) throw new ArgumentNullError("fn");
		if (typeof (fn) !== "function") throw new ArgumentTypeError("fn", "function", fn);

		var idx = errorEventFns.indexOf(fn);
		if (idx < 0) {
			throw new ArgumentError("fn", "The given function was not found in the list of error handlers.");
		}
		errorEventFns.splice(idx, 1);
	}

	ExoWeb.removeError = removeError;

	/*
	* Handles an error that 
	*/
	function handleError(message, url, lineNumber, colNumber, errorObj, customErrorData, raiseEvents, onSuccess, onFailure) {

		// Initialize the default error data based on the error.
		var cancelled = false,
			errorData = jQuery.extend({
				message: message,
				type: "Error",
				url: window.location.href,
				refererUrl: document.referrer,
				stackTrace: errorObj ? errorObj.stack : "",
				additionalInfo: {
					url: url,
					lineNumber: lineNumber,
					columnNumber: colNumber
				}
			}, customErrorData);

		if (raiseEvents) {
			// The error was not handled, so raise the error event.
			errorEventFns.forEach(function (fn) {
				// Skip if the event has been cancelled.
				if (cancelled) {
					return;
				}

				var result = fn(message, url, lineNumber, colNumber, errorObj, errorData);
				if (result === true) {
					// Cancel the event if the result indicates that the event was handled.
					cancelled = true;
				}
			});
		}

		if (!cancelled && logErrorProvider) {
			// Log the error.
			logErrorProvider(errorData, onSuccess, onFailure);
		}

	}

	/*
	* Explicitly logs an error without throwing.
	* Raising the 'error' event is optional.
	*/
	function logError(message, url, lineNumber, colNumber, errorObj, errorData, raiseEvents, onSuccess, onFailure) {
		/// <summary>
		/// Logs an error.
		/// 
		/// Signature:
		/// ExoWeb.logError(message or error[, url, lineNumber][, errorData][, raiseEvents][, onSuccess][, onFailure]);
		/// 
		/// Examples:
		/// 
		/// ExoWeb.logError(e);
		/// ExoWeb.logError('Message', 'http://...', 14);
		/// ExoWeb.logError('Message', 'http://...', 14, 12);
		/// ExoWeb.logError('Message', 'http://...', 14, 12, e);
		/// ExoWeb.logError(e, { foo: "bar" }, function () { /* on success */ });
		/// ExoWeb.logError('Message', 'http://...', 14, 12, true, function () { /* on success */ }, function () { /* on failure */ });
		/// ExoWeb.logError('Message', 'http://...', 14, 12, { foo: "bar" }, true);
		/// </summary>
		/// <param name="message" type="String">The error message.</param>
		/// <param name="url" type="String" optional="true">The url where the error occurred.</param>
		/// <param name="lineNumber" type="Number" integer="true" optional="true">The line number where the error occurred.</param>
		/// <param name="colNumber" type="Number" integer="true" optional="true">The column number where the error occurred.</param>
		/// <param name="errorObj" type="Error" optional="true">Native Error object.</param>
		/// <param name="errorData" type="Object" optional="true">Custom data to include with the error.</param>
		/// <param name="raiseEvents" type="Boolean" optional="true">
		/// Whether or not to raise the error event when handling the error. When called via internal framework
		/// methods (e.g. the global error event handler) the events will be raised, but when called externally
		/// the caller must specify that they want events to be raised to avoid unwanted side-effects.
		/// </param>
		/// <param name="onSuccess" type="Function" optional="true">The callback to invoke when logging the error succeeds.</param>
		/// <param name="onFailure" type="Function" optional="true">The callback to invoke when logging the error fails.</param>

		// Ensure that the message (or error) argument was passed in
		if (message == null) throw new ArgumentNullError("message");

		if (arguments.length > 9) {
			throw new ArgumentsLengthError(9, arguments.length);
		}

		var args = Array.prototype.slice.call(arguments),
			successCallback = null,
			failureCallback = null,
			error = null,
			raiseErrorEvents = false,
			customErrorData = null;

		if (isFunction(args[args.length - 1])) {
			successCallback = args.pop();
			if (isFunction(args[args.length - 1])) {
				failureCallback = successCallback;
				successCallback = args.pop();
			}
		}

		if (isBoolean(args[args.length - 1])) {
			raiseErrorEvents = args.pop();
		}

		if (args.length > 1 && args[args.length - 1] instanceof Object && !(args[args.length - 1] instanceof Error)) {
			customErrorData = args.pop();
		}

		// An Error or string was passed in
		if (args.length === 1) {
			if (message instanceof Error) {
				// Rewrite arguments
				error = message;

				// Pass along the information from the error
				handleError(error.message, error.fileName, error.lineNumber, error.columnNumber, message, customErrorData, raiseErrorEvents, successCallback, failureCallback);
			}
			else {
				// Pass along the message and simulate the other information
				handleError(message.toString(), "?", "-1", "-1", null, customErrorData, raiseErrorEvents, successCallback, failureCallback);
			}
		}
		// Check for {message, url, lineNumber} mode
		else if (args.length >= 3) {
			// Validate args
			if (!(message.constructor === String)) throw new ArgumentTypeError("message", "string", message);
			if (url.constructor !== String) throw new ArgumentTypeError("url", "string", url);
			if (lineNumber != null && typeof (lineNumber) !== "number") throw new ArgumentTypeError("lineNumber", "number", lineNumber);

			// Pass along the information
			handleError(message, url, lineNumber, typeof colNumber === "number" ? colNumber : -1, errorObj instanceof Error ? errorObj : null, customErrorData, raiseErrorEvents, successCallback, failureCallback);
		}
		// Incorrect number of arguments
		else {
			throw new ArgumentsLengthError(3, arguments.length);
		}
	}

	ExoWeb.logError = logError;

	/*
	* Attaches to the global error event and logs the error if
	* logging is implemented and the error is not handled.
	*/
	var oldOnError = window.onerror;
	window.onerror = function (message, url, lineNumber, colNumber, errorObj) {

		if (!window.ExoWeb || ExoWeb.windowIsUnloading) {
			return false;
		}

		// Call previous handler.
		if (oldOnError && oldOnError.apply(this, arguments) === true) {
			// Previous handler has handled the error, so exit now and prevent propogation.
			return true;
		}

		// Pass the error along to event subscribers and then log.
		handleError(message, url, lineNumber, colNumber, errorObj, null, true);

		// Let default handler run.
		return false;

	};

	// #endregion

	// #region ExoWeb.Warnings
	//////////////////////////////////////////////////

	var logWarningProvider = function (message) {
		// if the console is defined then log the message
		if (typeof (console) !== "undefined") {
			if (console.warn) {
				console.warn(message);
			}
		}
	};

	function setLogWarningProvider(fn) {
		/// <summary>
		/// Provide an implementation of the logWarning provider.
		/// </summary>
		/// <remarks>
		///
		/// The event handler's argument(s)
		/// ===============================
		///
		/// The function is called with a single value, the warning message.
		//
		/// </remarks>
		/// <param name="fn" type="Function">The warning provider function.</param>

		if (arguments.length !== 1) throw new ArgumentsLengthError(1, arguments.length);
		if (fn == null) throw new ArgumentNullError("fn");
		if (typeof(fn) !== "function") throw new ArgumentTypeError("fn", "function", fn);

		logWarningProvider = fn;
	}

	ExoWeb.setLogWarningProvider = setLogWarningProvider;

	function logWarning(message) {
		if (logWarningProvider) {
			// Log the warning.
			logWarningProvider(message);
		}
	}

	ExoWeb.logWarning = logWarning;

	// #endregion

	// #region ExoWeb.TypeChecking
	//////////////////////////////////////////////////

	var typeExpr = /\s([a-z|A-Z]+)/;

	function type(obj) {
		if (obj === undefined) {
			return "undefined";
		}
		else if (obj === null) {
			return "null";
		}
		else {
			return Object.prototype.toString.call(obj).match(typeExpr)[1].toLowerCase();
		}
	}
	ExoWeb.type = type;

	function isNullOrUndefined(obj) {
		return obj === null || obj === undefined;
	}
	ExoWeb.isNullOrUndefined = isNullOrUndefined;

	function isArray(obj) {
		return type(obj) === "array";
	}
	ExoWeb.isArray = isArray;

	function isString(obj) {
		return type(obj) === "string";
	}
	ExoWeb.isString = isString;

	function isNumber(obj) {
		return type(obj) === "number";
	}
	ExoWeb.isNumber = isNumber;

	var integerExpr = /^-?[0-9]{1,10}$/;

	function isInteger(obj) {
		return isNumber(obj) && !isNaN(obj) && integerExpr.test(obj.toString()) && (obj >= -2147483648 && obj <= 2147483647);
	}
	ExoWeb.isInteger = isInteger;

	function isNatural(obj) {
		return isInteger(obj) && obj > 0;
	}
	ExoWeb.isNatural = isNatural;

	function isWhole(obj) {
		return isInteger(obj) && obj >= 0;
	}
	ExoWeb.isWhole = isWhole;

	var decimalExpr = /^-?[0-9]+\.[0-9]+$/;

	function isDecimal(obj) {
		return isNumber(obj) && !isNaN(obj) && decimalExpr.test(obj.toString());
	}
	ExoWeb.isDecimal = isDecimal;

	function isFunction(obj) {
		return type(obj) === "function";
	}
	ExoWeb.isFunction = isFunction;

	function isBoolean(obj) {
		return type(obj) === "boolean";
	}
	ExoWeb.isBoolean = isBoolean;

	function isDate(obj) {
		return type(obj) === "date";
	}
	ExoWeb.isDate = isDate;

	function isObject(obj) {
		return type(obj) === "object" || (obj && obj instanceof Object);
	}
	ExoWeb.isObject = isObject;

	// #endregion

	// #region ExoWeb.Random
	//////////////////////////////////////////////////

	function randomInteger(min, max) {
		var scale;
		if (arguments.length === 0) {
			min = 0;
			max = 9;
		}
		else if (arguments.length === 1) {
			if (!isInteger(min)) {
				throw new Error("Minimum argument must be an integer.");
			}

			if (min < 0) {
				max = 0;
			}
			else {
				max = min;
				min = 0;
			}
		}
		else if (!isInteger(min)) {
			throw new Error("Minimum argument must be an integer.");
		}
		else if (!isInteger(max)) {
			throw new Error("Maximum argument must be an integer.");
		}
		else if (min >= max) {
			throw new Error("Minimum argument must be less than maximum argument.");
		}

		var rand = Math.random();
		return rand === 1 ? max : Math.floor(rand * (max - min + 1)) + min;
	}

	ExoWeb.randomInteger = randomInteger;

	function randomText(len, includeDigits) {
		if (arguments.length === 0) {
			throw new Error("Length argument is required.");
		}
		else if (!isNatural(len)) {
			throw new Error("Length argument must be a natural number.");
		}

		var result = "";
		for (var i = 0; i < len; i++) {
			var min = 0;
			var max = includeDigits ? 35 : 25;
			var rand = randomInteger(min, max);
			var charCode;
			if (rand <= 25) {
				// Alpha: add 97 for 'a'
				charCode = rand + 97;
			}
			else {
				// Num: start at 0 and add 48 for 0
				charCode = (rand - 26) + 48;
			}
			result += String.fromCharCode(charCode);
		}
		return result;
	}

	ExoWeb.randomText = randomText;

	// #endregion

	// #region ExoWeb.Function
	//////////////////////////////////////////////////

	var overridableNonEnumeratedMethods;

	for (var m in {}) {
		if (m == "toString") {
			overridableNonEnumeratedMethods = [];
			break;
		}
	}

	if (!overridableNonEnumeratedMethods)
		overridableNonEnumeratedMethods = ["toString", "toLocaleString", "valueOf"];

	function addPrototypeMember(obj, name, member) {

		// method
		if (member instanceof Function) {
			obj[name] = member;
		}

		// property
		else if (member instanceof Object) {
			Object.defineProperty(obj, name, member);
		}

		// field
		else {
			obj[name] = member;
		}
	}

	Function.prototype.mixin = function mixin(members, obj) {
		if (!obj) {
			obj = this.prototype;
		}

		for (var m in members) {
			var member = members[m];
			if (members.hasOwnProperty(m)) {
				addPrototypeMember(obj, m, member);
			}
		}

		// IE's "in" operator doesn't return keys for native properties on the Object prototype
		overridableNonEnumeratedMethods.forEach(function (m) {
			var member = members[m];
			if (members.hasOwnProperty(m)) {
				addPrototypeMember(obj, m, member);
			}
		});
	};

	Function.prototype.dontDoubleUp = function Function$dontDoubleUp(options) {
		var proceed = this;
		var calls = [];
	
		// Is the function already being called with the same arguments?
		return function dontDoubleUp() {
			var i, ilen, j, jlen, origCallback, origThisPtr, partitionedArg, partitionedArgIdx, groupBy, callsInProgress, call, shouldJoinCall, otherPartitionedArg, partitionedInCall, joinArgIdx, args;
	
			// Make a copy of the invocation arguments.
			args = Array.prototype.slice.call(arguments);

			// Extract callback and thisPtr arguments, if they exist.
			if (options.callbackArg < arguments.length) {
				origCallback = arguments[options.callbackArg];
			}
			if (options.thisPtrArg < arguments.length) {
				origThisPtr = arguments[options.thisPtrArg];
			}

			// Determine what arguments can be partitioned into separate calls
			if (options.partitionedArg !== null && options.partitionedArg !== undefined) {
				partitionedArg = arguments[options.partitionedArg];
				if (!(partitionedArg instanceof Array)) {
					throw new Error("The partitioned argument must be an array.");
				}

				// Create a copy of the argument.
				partitionedArg = partitionedArg.copy();

				partitionedArgIdx = -1;
			}

			// Determine what values to use to group callers
			groupBy = [];
			if (options.groupBy && options.groupBy instanceof Array) {
				for (i = 0, ilen = options.groupBy.length; i < ilen; i++) {
					if (partitionedArg !== undefined && options.groupBy[i] === options.partitionedArg) {
						partitionedArgIdx = groupBy.length;
					}
					groupBy.push(arguments[options.groupBy[i]]);
				}
			}
			else if (options.groupBy !== null && options.groupBy !== undefined) {
				groupBy.push(arguments[options.groupBy]);
				if (options.groupBy === options.partitionedArg) {
					partitionedArgIdx = 0;
				}
			}
			else {
				for (i = 0, ilen = arguments.length; i < ilen; ++i) {
					if (i !== options.callbackArg && i !== options.thisPtrArg) {
						if (partitionedArg !== undefined && i === options.partitionedArg) {
							partitionedArgIdx = groupBy.length;
						}
						groupBy.push(arguments[i]);
					}
				}
			}

			// Verify that the the partitioned argument is part of the grouping.
			if (partitionedArgIdx === -1) {
				throw new Error("Invalid partitionedArg option.");
			}

			// Is this call already in progress?
			callsInProgress = [];
			for (i = 0, ilen = calls.length; (partitionedArg === undefined || partitionedArg.length > 0) && i < ilen; i++) {
				call = calls[i];

				// TODO: handle optional params better
				if (groupBy.length != call.groupBy.length) {
					continue;
				}

				// Only join calls together if they were called on the same object.
				shouldJoinCall = this === call.context;

				// Make sure all of the arguments match.
				for (j = 0, jlen = groupBy.length; shouldJoinCall && j < jlen; j++) {
					if (j === partitionedArgIdx) {	
						// Attempt to find items in partitioned argument that are in progress and remove them
						shouldJoinCall = call.groupBy[j].some(function(p) {
							return partitionedArg.indexOf(p) >= 0;
						});
					}
					else if (groupBy[j] !== call.groupBy[j]) {
						shouldJoinCall = false;
					}
				}

				if (shouldJoinCall) {

					partitionedInCall = [];

					// Remove partitioned args that will be satisfied by the call in progress.
					if (partitionedArg !== undefined) {
						otherPartitionedArg = call.groupBy[partitionedArgIdx];
						for (j = 0, jlen = otherPartitionedArg.length; j < jlen; j++) {
							joinArgIdx = partitionedArg.indexOf(otherPartitionedArg[j]);
							if (joinArgIdx >= 0) {
								partitionedInCall.push(otherPartitionedArg[j]);
								partitionedArg.splice(joinArgIdx, 1);
							}
						}
					}

					callsInProgress.push({ call: call, partitioned: partitionedInCall });

				}
			}

			if (callsInProgress.length === 0 || (partitionedArg !== undefined && partitionedArg.length > 0)) {

				// track the next call that is about to be made
				call = { callback: Functor(), groupBy: groupBy, context: this };
			
				calls.push(call);

				// make sure the original callback is invoked and that cleanup occurs
				call.callback.add(function() {
					if (calls.indexOf(call) < 0) {
						throw new Error("Call not found.");
					}
					if (origCallback) {
						origCallback.apply(origThisPtr || this, arguments);
					}
					if (options.memoize === true) {
						call.complete = true;
						call.response = {
							thisPtr: this,
							args: Array.prototype.slice.call(arguments)
						};
					}
					else {
						calls.remove(call);
					}
				});

				// Copy the args
				newArgs = args.slice();

				// use remaining partitioned args if in effect
				if (partitionedArg !== undefined && partitionedArg.length > 0) {
					newArgs[options.partitionedArg] = partitionedArg;
				}

				// pass the new callback to the inner function
				newArgs[options.callbackArg] = call.callback;

				call.args = newArgs;

				proceed.apply(this, newArgs);

			}

			if (callsInProgress.length > 0 && origCallback) {
		
				// wait for the original call to complete
				forEach(callsInProgress, function(call) {

					var invocationArgs;

					if (options.partitionedFilter) {
						invocationArgs = args.slice();
						invocationArgs[options.partitionedArg] = call.partitioned;
						invocationArgs[options.callbackArg] = origCallback;
					}

					var callbackArgs;

					if (call.call.complete === true) {
						if (options.partitionedFilter) {
							callbackArgs = Array.prototype.slice.call(call.call.response.args);
							options.partitionedFilter.call(origThisPtr || this, call.call.args, invocationArgs, callbackArgs);
						}
						else {
							callbackArgs = call.call.response.args;
						}

						origCallback.apply(origThisPtr || call.call.response.thisPtr, callbackArgs);
					}
					else {
						call.call.callback.add(function() {
							if (options.partitionedFilter) {
								callbackArgs = Array.prototype.slice.call(arguments);
								options.partitionedFilter.call(origThisPtr || this, call.call.args, invocationArgs, callbackArgs);
							}
							else {
								callbackArgs = arguments;
							}
	
							origCallback.apply(origThisPtr || this, callbackArgs);
						});
					}
				});

			}
		};
	};

	Function.prototype.cached = function Function$cached(options) {
		var proceed = this;
		var cache = {};

		var keygen = (options && options.key) || function(arg) { return arg; };

		return function cached() {
			var key = keygen.apply(this, arguments);
			return cache.hasOwnProperty(key) ? cache[key] : (cache[key] = proceed.apply(this, arguments));
		};
	};

	function bind(obj) {
		var slice = [].slice,
			args = slice.call(arguments, 1),
			self = this,
			nop = function () {},
			bound = function () {
				return self.apply(this instanceof nop ? this : (obj || {}),
					args.concat(slice.call(arguments)));
			};

		nop.prototype = self.prototype;
		bound.prototype = new nop();

		return bound;
	}

	// Function.prototype.bind polyfill
	if (!Function.prototype.bind)
		Function.prototype.bind = bind;

	Function.prototype.prepare = function prepare(thisPtr, args) {
		/// <summary>
		/// Returns a function that will invoke this function with the given
		/// this value and arguments, regardless of how the returned 
		/// function is invoked.
		/// </summary>

		var func = this;
		return function prepare$fn() {
			return func.apply(thisPtr || this, args || []);
		};
	};

	Function.prototype.prependArguments = function prependArguments(/* arg1, arg2, ... */) {
		var func = this;
		var additional = Array.prototype.slice.call(arguments);
		return function prependArguments$fn() {
			var args = [];
			Array.prototype.push.apply(args, additional);
			Array.prototype.push.apply(args, Array.prototype.slice.call(arguments));
			return func.apply(this, args);
		};
	};

	Function.prototype.appendArguments = function appendArguments(/* arg1, arg2, ... */) {
		var func = this;
		var additional = Array.prototype.slice.call(arguments);
		return function appendArguments$fn() {
			var args = Array.prototype.slice.call(arguments);
			Array.prototype.push.apply(args, additional);
			return func.apply(this, args);
		};
	};

	Function.prototype.spliceArguments = function spliceArguments(/* start, howmany, item1, item2, ... */) {
		var func = this;
		var spliceArgs = arguments;
		return function spliceArguments$fn() {
			var args = Array.prototype.slice.call(arguments);
			args.splice.apply(args, spliceArgs);
			return func.apply(this, args);
		};
	};

	Function.prototype.sliceArguments = function sliceArguments(/* start, end */) {
		var func = this;
		var sliceArgs = arguments;
		return function spliceArguments$fn() {
			var args = Array.prototype.slice.call(arguments);
			args = args.slice.apply(args, sliceArgs);
			return func.apply(this, args);
		};
	};

	function mergeFunctions(fn1, fn2, options) {
		// return early if one or both functions are not defined
		if (!fn1 && !fn2) return;
		if (!fn2) return fn1;
		if (!fn1) return fn2;

		if (options && options.async === true) {
			return function () {
				var idx = options.callbackIndex || 0;
				var callback = arguments[idx];

				// Ensure that there is a callback function
				if (callback == null) throw new ArgumentNullError("callback", "'mergeFunctions' was called in async mode");
				if (typeof(callback) !== "function") throw new ArgumentTypeError("callback", "function", callback);

				var signal = new Signal("mergeFunctions");

				// replace callback function with signal pending and invoke callback when both are complete
				var args1 = Array.prototype.slice.call(arguments);
				args1.splice(idx, 1, signal.pending());
				fn1.apply(this, args1);

				var args2 = Array.prototype.slice.call(arguments);
				args2.splice(idx, 1, signal.pending());
				fn2.apply(this, args2);

				signal.waitForAll(callback, (options.thisPtrIndex && arguments[options.thisPtrIndex]) || this);
			};
		}
		else if (options && options.andResults === true) {
			return function () {
				return fn1.apply(this, arguments) && fn2.apply(this, arguments);
			};
		}
		else if (options && options.orResults === true) {
			return function () {
				return fn1.apply(this, arguments) || fn2.apply(this, arguments);
			};
		}
		else {
			return function () {
				fn1.apply(this, arguments);
				fn2.apply(this, arguments);
			};
		}
	}

	function equals(obj) {
		return function(other) {
			return obj === other;
		};
	}

	function not(fn) {
		return function() {
			return !fn.apply(this, arguments);
		};
	}

	function before(original, fn) {
		return function() {
			fn.apply(this, arguments);
			original.apply(this, arguments);
		};
	}

	function after(original, fn) {
		return function() {
			original.apply(this, arguments);
			fn.apply(this, arguments);
		};
	}

	function callArgument(arg) {
		arg.call();
	}

	var funcRegex = /function\s*([\w_\$]*)/i;
	function parseFunctionName(f) {
		var result = funcRegex.exec(f);
		return result ? (result[1] || "{anonymous}") : "{anonymous}";
	}

	// #endregion

	// #region ExoWeb.Array
	//////////////////////////////////////////////////

	function addRange(arr, items) {
		arr.push.apply(arr, items);
	}

	function contains(arr, item, from) {
		return arr.indexOf(item, from) >= 0;
	}

	function copy(arr) {
		return Array.prototype.slice.call(arr);
	}

	// Filters out duplicate items from the given array.
	/////////////////////////////////////////////////////
	function distinct(arr) {
		var result = [];

		for(var i = 0, len = arr.length; i < len; i++)
			if (result.indexOf(arr[i]) < 0)
				result.push(arr[i]);

		return result;
	}

	function every(arr, callback, thisPtr) {
		for (var i = 0, len = arr.length; i < len; i++)
			if (i in arr && !callback.call(thisPtr || this, arr[i], i, arr))
				return false;

		return true;
	}

	// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#polyfill
	function fill(arr, value) {
		// Steps 1-2.
		if (arr == null) {
			throw new TypeError('Array is null or not defined');
		}

		var O = Object(arr);

		// Steps 3-5.
		var len = O.length >>> 0;

		// Steps 6-7.
		var start = arguments[2];
		var relativeStart = start >> 0;

		// Step 8.
		var k = relativeStart < 0 ?
			Math.max(len + relativeStart, 0) :
			Math.min(relativeStart, len);

		// Steps 9-10.
		var end = arguments[3];
		var relativeEnd = end === undefined ?
			len : end >> 0;

		// Step 11.
		var finalValue = relativeEnd < 0 ?
			Math.max(len + relativeEnd, 0) :
			Math.min(relativeEnd, len);

		// Step 12.
		while (k < finalValue) {
			O[k] = value;
			k++;
		}

		// Step 13.
		return O;
	}

	function filter(arr, callback, thisPtr) {
		var result = [];
		for (var i = 0, len = arr.length; i < len; i++) {
			if (i in arr) {
				var val = arr[i]; // callback may mutate original item
				if (callback.call(thisPtr || this, val, i, arr))
					result.push(val);
			}
		}

		return result;
	}

	// Based on https://vanillajstoolkit.com/polyfills/arrayfind/
	function find(arr, callback) {
		// 1. Let O be ? ToObject(this value).
		if (arr == null) {
			throw new TypeError('Array is null or not defined');
		}

		var o = Object(arr);

		// 2. Let len be ? ToLength(? Get(O, "length")).
		var len = o.length >>> 0;

		// 3. If IsCallable(callback) is false, throw a TypeError exception.
		if (typeof callback !== 'function') {
			throw new TypeError('callback must be a function');
		}

		// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
		var thisArg = arguments[2];

		// 5. Let k be 0.
		var k = 0;

		// 6. Repeat, while k < len
		while (k < len) {
			// a. Let Pk be ! ToString(k).
			// b. Let kValue be ? Get(O, Pk).
			// c. Let testResult be ToBoolean(? Call(callback, T, ï¿½ kValue, k, O ï¿½)).
			// d. If testResult is true, return kValue.
			var kValue = o[k];
			if (callback.call(thisArg, kValue, k, o)) {
				return kValue;
			}
			// e. Increase k by 1.
			k++;
		}

		// 7. Return undefined.
		return undefined;
	}

	// Based on https://vanillajstoolkit.com/polyfills/arrayfindindex/
	function findIndex(arr, predicate) {
		if (arr == null) {
			throw new TypeError('Array is null or not defined');
		}

		// 1. Let O be ? ToObject(this value).
		var o = Object(arr);

		// 2. Let len be ? ToLength(? Get(O, "length")).
		var len = o.length >>> 0;

		// 3. If IsCallable(predicate) is false, throw a TypeError exception.
		if (typeof predicate !== 'function') {
			throw new TypeError('predicate must be a function');
		}

		// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
		var thisArg = arguments[2];

		// 5. Let k be 0.
		var k = 0;

		// 6. Repeat, while k < len
		while (k < len) {
			// a. Let Pk be ! ToString(k).
			// b. Let kValue be ? Get(O, Pk).
			// c. Let testResult be ToBoolean(? Call(predicate, T, ï¿½ kValue, k, O ï¿½)).
			// d. If testResult is true, return k.
			var kValue = o[k];
			if (predicate.call(thisArg, kValue, k, o)) {
				return k;
			}
			// e. Increase k by 1.
			k++;
		}

		// 7. Return -1.
		return -1;
	}

	function first(arr, callback, thisPtr) {
		for (var i = 0, len = arr.length; i < len; i++) {
			if (i in arr) {
				var val = arr[i];
				if (!callback || callback.call(thisPtr || this, val, i, arr) === true) {
					return val;
				}
			}
		}

		return null;
	}

	// Based on https://vanillajstoolkit.com/polyfills/arrayflat/
	function flat(arr, depth) {
		// If no depth is specified, default to 1
		if (depth === undefined) {
			depth = 1;
		}

		// Recursively reduce sub-arrays to the specified depth
		var flatten = function (arr, depth) {

			// If depth is 0, return the array as-is
			if (depth < 1) {
				return arr.slice();
			}

			// Otherwise, concatenate into the parent array
			return arr.reduce(function (acc, val) {
				return acc.concat(Array.isArray(val) ? flatten(val, depth - 1) : val);
			}, []);

		};

		return flatten(arr, depth);
	}

	function flatMap(arr, callbackFn) {
		return flat(Array.prototype.map.apply(arr, Array.prototype.slice.call(arguments, 1)), 1);
	}

	function forEach(arr, callback, thisPtr) {
		for (var i = 0, len = arr.length; i < len; i++)
			if (i in arr)
				callback.call(thisPtr || this, arr[i], i, arr);
	}

	function indexOf(arr, elt, from) {
		var len = arr.length;
		from = Number(from) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);
		if (from < 0) from += len;

		for (; from < len; from++)
			if (from in arr && arr[from] === elt)
				return from;

		return -1;
	}

	function insert(arr, index, item) {
		arr.splice.call(arr, index, 0, item);
	}

	function insertRange(arr, index, items) {
		var args = items.slice();
		args.splice(0, 0, index, 0);
		arr.splice.apply(arr, args);
	}

	// Finds the set intersection of the two given arrays.  The items
	// in the resulting list are distinct and in no particular order.
	///////////////////////////////////////////////////////////////////
	function intersect(arr1, arr2) {
		return distinct(filter(arr1, function(item) {
			return arr2.indexOf(item) >= 0;
		}));
	}

	function last(arr, callback, thisPtr) {
		var result = null;

		for (var i = 0, len = arr.length; i < len; i++) {
			if (i in arr) {
				var val = arr[i];
				if (!callback || callback.call(thisPtr || this, val, i, arr) === true) {
					result = val;
				}
			}
		}

		return result;
	}

	function lastIndexOf(arr, item, from) {
		var len = arr.length;

		if (len === 0) return -1;

		var n = len;
		if (from) {
			n = Number(from);

			if (n !== n)
				n = 0;
			else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0))
				n = (n > 0 || -1) * Math.floor(Math.abs(n));
		}

		var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);

		while (k >= 0)
			if (k in arr && arr[k] === item)
				return k;

		return -1;
	}

	function map(arr, callback, thisPtr) {
		var result = [];

		for (var i = 0, len = arr.length; i < len; i++)
			if (i in arr)
				result[i] = callback.call(thisPtr || this, arr[i], i, arr);

		return result;
	}

	function mapToArray(arr, callback, thisPtr) {
		var result = [];

		forEach(arr, function(item, i, a) {
			addRange(result, callback.call(thisPtr || this, item, i, a));
		});

		return result;
	}

	function observableSplice(arr, events, index, removeCount, addItems) {
		var removedItems;

		if (removeCount) {
			if (removeCount > 1 && arr.removeRange) {
				removedItems = arr.removeRange(index, removeCount);
			}
			else if (removeCount === 1 && arr.removeAt) {
				removedItems = [arr.removeAt(index)];
			}
			else {
				removedItems = arr.splice(index, removeCount);
			}
	
			if (events) {
				events.push({
					action: Sys.NotifyCollectionChangedAction.remove,
					oldStartingIndex: index,
					oldItems: removedItems,
					newStartingIndex: null,
					newItems: null
				});
			}
		}

		if (addItems.length > 0) {
			if (addItems.length > 1 && arr.insertRange) {
				arr.insertRange(index, addItems);
			}
			else if (addItems.length === 1 && arr.insert) {
				arr.insert(index, addItems[0]);
			}
			else {
				insertRange(arr, index, addItems);
			}

			if (events) {
				events.push({
					action: Sys.NotifyCollectionChangedAction.add,
					oldStartingIndex: null,
					oldItems: null,
					newStartingIndex: index,
					newItems: addItems
				});
			}
		}
	}

	function peek(arr) {
		var peekVal = arr.pop();
		arr.push(peekVal);
		return peekVal;
	}

	function purge(arr, callback, thisPtr) {
		var result = null;

		for (var i = 0; i < arr.length; i++) {
			if (callback.call(thisPtr || this, arr[i], i, arr) === true) {
				// Invoke removeAt method if it exists.
				if (arr.removeAt)
					arr.removeAt(i);
				else
					arr.splice(i, 1);

				// Lazy create result array.
				if (result === null) {
					result = [];
				}

				// Add index (accounting for previously removed
				// items that are now in the return value).
				result.push(i + result.length);

				// Decrement to account for removal.
				i--;
			}
		}

		return result;
	}

	function reduce(arr, accumlator, initialValue){
		var i = 0, len = arr.length, curr;

		if(typeof(accumlator) !== "function")
			throw new TypeError("First argument is not a function.");

		if(!len && arguments.length <= 2)
			throw new TypeError("Array length is 0 and no intial value was given.");

		if(arguments.length <= 2) {
			if (len === 0)
				throw new TypeError("Empty array and no second argument");

			curr = arr[i++]; // Increase i to start searching the secondly defined element in the array
		}
		else {
			curr = arguments[2];
		}

		for(; i < len; i++) {
			if (i in arr) {
				curr = accumlator.call(undefined, curr, arr[i], i, arr);
			}
		}

		return curr;
	}

	function remove(arr, item) {
		var idx = arr.indexOf(item);
		if (idx < 0)
			return false;

		arr.splice(idx, 1);
		return true;
	}

	function removeAt(arr, index) {
		arr.splice(index, 1);
	}

	function removeRange(arr, index, count) {
		return arr.splice(index, count);
	}

	function single(arr, callback, thisPtr) {
		var items;
		if (callback !== undefined) {
			items = filter(arr, callback, thisPtr);
		}
		else {
			items = arr;
		}

		if (items.length > 1)
			throw new Error("Expected a single item, but found " + items.length + ".");

		if (items.length === 0) {
			throw new Error("Expected a single item, but did not find a match.");
		}

		return items[0];
	}

	function some(arr, callback, thisPtr) {
		for (var i = 0, len = arr.length; i < len; i++)
			if (i in arr && callback.call(thisPtr || this, arr[i], i, arr))
				return true;

		return false;
	}

	function update(arr, target/*, trackEvents, equalityFn*/) {
		var source = arr, trackEvents = arguments[2], events = trackEvents ? [] : null, pointer = 0, srcSeek = 0, tgtSeek = 0, equalityFn = arguments[3];

		while (srcSeek < source.length) {
			if (source[srcSeek] === target[tgtSeek]) {
				if (pointer === srcSeek && pointer === tgtSeek) {
					// items match, so advance
					pointer = srcSeek = tgtSeek = pointer + 1;
				}
				else {
					// remove range from source and add range from target
					observableSplice(source, events, pointer, srcSeek - pointer, target.slice(pointer, tgtSeek));

					// reset to index follow target seek location since arrays match up to that point
					pointer = srcSeek = tgtSeek = tgtSeek + 1;
				}
			}
			else if (tgtSeek >= target.length) {
				// reached the end of the target array, so advance the src pointer and test again
				tgtSeek = pointer;
				srcSeek += 1;
			}
			else {
				// advance to the next target item to test
				tgtSeek += 1;
			}
		}

		observableSplice(source, events, pointer, srcSeek - pointer, target.slice(pointer, Math.max(tgtSeek, target.length)));

		return events;
	}

	if (!Array.prototype.addRange)
		Array.prototype.addRange = function(items) { addRange(this, items); };
	if (!Array.prototype.copy)
		Array.prototype.copy = function() { return copy(this); };
	if (!Array.prototype.clear)
		Array.prototype.clear = function () { this.length = 0; };
	if (!Array.prototype.contains)
		Array.prototype.contains = function (elt/*, from*/) { return contains(this, elt, arguments[1]); };
	if (!Array.prototype.dequeue)
		Array.prototype.dequeue = function() { return this.shift(); };
	if (!Array.prototype.distinct)
		Array.prototype.distinct = function() { return distinct(this); };
	if (!Array.prototype.every)
		Array.prototype.every = function(fun /*, thisp*/) { return every(this, fun, arguments[1]); };
	if (!Array.prototype.fill)
		Array.prototype.fill = function(value, times) { return fill(this, value, times); };
	if (!Array.prototype.filter)
		Array.prototype.filter = function(fun/*, thisp */) { return filter(this, fun, arguments[1]); };
	if (!Array.prototype.find)
		Array.prototype.find = function(callbackFn, thisArg) { return find(this, callbackFn, thisArg); };
	if (!Array.prototype.findIndex)
		Array.prototype.findIndex = function(predicate, thisArg) { return findIndex(this, predicate, thisArg); };
	if (!Array.prototype.first)
		Array.prototype.first = function(fun/*, thisp */) { return first(this, fun, arguments[1]); };
	if (!Array.prototype.flat)
		Array.prototype.flat = function(depth) { return flat(this, depth); };
	if (!Array.prototype.flatMap)
		Array.prototype.flatMap = function(callbackFn) { return flatMap(this, callbackFn); };
	if (!Array.prototype.forEach)
		Array.prototype.forEach = function(fun /*, thisp*/) { forEach(this, fun, arguments[1]); };
	if (!Array.prototype.indexOf)
		Array.prototype.indexOf = function(elt/*, from*/) { return indexOf(this, elt, arguments[1]); };
	if (!Array.prototype.intersect)
		Array.prototype.intersect = function(items) { return intersect(this, items); };
	if (!Array.prototype.last)
		Array.prototype.last = function(fun/*, thisp */) { return last(this, fun, arguments[1]); };
	if (!Array.prototype.lastIndexOf)
		Array.prototype.lastIndexOf = function (item/*, from*/) { return lastIndexOf(this, item, arguments[1]); };
	if (!Array.prototype.map)
		Array.prototype.map = function(fun /*, thisp*/) { return map(this, fun, arguments[1]); };
	if (!Array.prototype.mapToArray)
		Array.prototype.mapToArray = function(fun/*, thisp*/) { return mapToArray(this, fun, arguments[1]); };
	if (!Array.prototype.peek)
		Array.prototype.peek = function() { return peek(this); };
	if (!Array.prototype.purge)
		Array.prototype.purge = function(fun/*, thisp*/) { return purge(this, fun, arguments[1]); };
	if (!Array.prototype.reduce)
		Array.prototype.reduce = function(accumulator, intialValue) { return reduce(this, accumulator, intialValue); };
	if (!Array.prototype.remove)
		Array.prototype.remove = function(item) { return remove(this, item); };
	if (!Array.prototype.single)
		Array.prototype.single = function(fun/*, thisp */) { return single(this, fun, arguments[1]); };
	if (!Array.prototype.some)
		Array.prototype.some = function(fun /*, thisp*/) { return some(this, fun, arguments[1]); };

	// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#polyfill
	var from = (function () {
		var symbolIterator;
		try {
			symbolIterator = Symbol.iterator
				? Symbol.iterator
				: 'Symbol(Symbol.iterator)';
		} catch (e) {
			symbolIterator = 'Symbol(Symbol.iterator)';
		}

		var toStr = Object.prototype.toString;
		var isCallable = function (fn) {
			return (
				typeof fn === 'function' ||
				toStr.call(fn) === '[object Function]'
			);
		};
		var toInteger = function (value) {
			var number = Number(value);
			if (isNaN(number)) return 0;
			if (number === 0 || !isFinite(number)) return number;
			return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
		};
		var maxSafeInteger = Math.pow(2, 53) - 1;
		var toLength = function (value) {
			var len = toInteger(value);
			return Math.min(Math.max(len, 0), maxSafeInteger);
		};

		var setGetItemHandler = function setGetItemHandler(isIterator, items) {
			var iterator = isIterator && items[symbolIterator]();
			return function getItem(k) {
				return isIterator ? iterator.next() : items[k];
			};
		};

		var getArray = function getArray(
			T,
			A,
			len,
			getItem,
			isIterator,
			mapFn
		) {
			// 16. Let k be 0.
			var k = 0;

			// 17. Repeat, while k < lenï¿½ or while iterator is done (also steps a - h)
			while (k < len || isIterator) {
				var item = getItem(k);
				var kValue = isIterator ? item.value : item;

				if (isIterator && item.done) {
					return A;
				} else {
					if (mapFn) {
						A[k] =
							typeof T === 'undefined'
								? mapFn(kValue, k)
								: mapFn.call(T, kValue, k);
					} else {
						A[k] = kValue;
					}
				}
				k += 1;
			}

			if (isIterator) {
				throw new TypeError(
					'Array.from: provided arrayLike or iterator has length more then 2 ** 52 - 1'
				);
			} else {
				A.length = len;
			}

			return A;
		};

		// The length property of the from method is 1.
		return function from(arrayLikeOrIterator /*, mapFn, thisArg */) {
			// 1. Let C be the this value.
			var C = this;

			// 2. Let items be ToObject(arrayLikeOrIterator).
			var items = Object(arrayLikeOrIterator);
			var isIterator = isCallable(items[symbolIterator]);

			// 3. ReturnIfAbrupt(items).
			if (arrayLikeOrIterator == null && !isIterator) {
				throw new TypeError(
					'Array.from requires an array-like object or iterator - not null or undefined'
				);
			}

			// 4. If mapfn is undefined, then let mapping be false.
			var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
			var T;
			if (typeof mapFn !== 'undefined') {
				// 5. else
				// 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
				if (!isCallable(mapFn)) {
					throw new TypeError(
						'Array.from: when provided, the second argument must be a function'
					);
				}

				// 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
				if (arguments.length > 2) {
					T = arguments[2];
				}
			}

			// 10. Let lenValue be Get(items, "length").
			// 11. Let len be ToLength(lenValue).
			var len = toLength(items.length);

			// 13. If IsConstructor(C) is true, then
			// 13. a. Let A be the result of calling the [[Construct]] internal method
			// of C with an argument list containing the single item len.
			// 14. a. Else, Let A be ArrayCreate(len).
			var A = isCallable(C) ? Object(new C(len)) : new Array(len);

			return getArray(
				T,
				A,
				len,
				setGetItemHandler(isIterator, items),
				isIterator,
				mapFn
			);
		};
	})();

	// Based on https://vanillajstoolkit.com/polyfills/arrayisarray/
	function isArray(value) {
		return Object.prototype.toString.call(value) === '[object Array]';
	}

	function of() {
		return Array.prototype.slice.call(arguments);
	}

	if (!Array.from)
		Array.from = from;
	if (!Array.isArray)
		Array.isArray = isArray;
	if (!Array.of)
		Array.of = of;

	// #endregion

	// #region ExoWeb.String
	//////////////////////////////////////////////////

	// Add String.trim() if not natively supported
	if (typeof String.prototype.trim !== 'function') {
		String.prototype.trim = function () {
			return this.replace(/^\s+|\s+$/g, '');
		}
	}
	function isNullOrEmpty(str) {
		return str === null || str === undefined || str === "";
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringendswith/
	function endsWith(str, searchStr, position) {
		// This works much better than >= because
		// it compensates for NaN:
		if (!(position < str.length)) {
			position = str.length;
		} else {
			position |= 0; // round position
		}
		return str.substr(position - searchStr.length, searchStr.length) === searchStr;
	}

	function includes(str, search, start) {
		if (search instanceof RegExp) {
			throw TypeError('first argument must not be a RegExp');
		}
		if (start === undefined) { start = 0; }
		return str.indexOf(search, start) !== -1;
	}

	// https://gist.github.com/TheBrenny/039add509c87a3143b9c077f76aa550b
	function matchAll (str, rx) {
		if (typeof rx === "string") rx = new RegExp(rx, "g"); // coerce a string to be a global regex
		rx = new RegExp(rx); // Clone the regex so we don't update the last index on the regex they pass us
		var cap = []; // the single capture
		var all = []; // all the captures (return this)
		while ((cap = rx.exec(str)) !== null) all.push(cap); // execute and add
		return all; // profit!
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringpadend/
	function padEnd(str, targetLength, padString) {
		targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
		padString = String((typeof padString !== 'undefined' ? padString : ' '));
		if (str.length > targetLength) {
			return String(str);
		}
		else {
			targetLength = targetLength - str.length;
			if (targetLength > padString.length) {
				padString += repeat(padString, targetLength / padString.length); //append to original to ensure we are longer than needed
			}
			return String(str) + padString.slice(0, targetLength);
		}
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringpadstart/
	function padStart(str, targetLength, padString) {
		targetLength = targetLength >> 0; //truncate if number or convert non-number to 0;
		padString = String((typeof padString !== 'undefined' ? padString : ' '));
		if (str.length > targetLength) {
			return String(str);
		}
		else {
			targetLength = targetLength - str.length;
			if (targetLength > padString.length) {
				padString += repeat(padString, targetLength / padString.length); //append to original to ensure we are longer than needed
			}
			return padString.slice(0, targetLength) + String(str);
		}
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringrepeat/
	function repeat(str, count) {
		if (str == null)
			throw new TypeError('can\'t convert ' + str + ' to object');

		var result = '' + str;
		// To convert string to integer.
		count = +count;
		// Check NaN
		if (count != count)
			count = 0;

		if (count < 0)
			throw new RangeError('repeat count must be non-negative');

		if (count == Infinity)
			throw new RangeError('repeat count must be less than infinity');

		count = Math.floor(count);
		if (result.length == 0 || count == 0)
			return '';

		// Ensuring count is a 31-bit integer allows us to heavily optimize the
		// main part. But anyway, most current (August 2014) browsers can't handle
		// strings 1 << 28 chars or longer, so:
		if (result.length * count >= 1 << 28)
			throw new RangeError('repeat count must not overflow maximum string size');

		var maxCount = result.length * count;
		count = Math.floor(Math.log(count) / Math.log(2));
		while (count) {
			result += result;
			count--;
		}
		result += result.substring(0, maxCount - result.length);
		return result;
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringreplaceall/
	function replaceAll(str, substr, newSubstr) {
		// If a regex pattern
		if (Object.prototype.toString.call(substr).toLowerCase() === '[object regexp]') {
			return str.replace(substr, newSubstr);
		}

		// If a string
		return str.replace(new RegExp(substr, 'g'), newSubstr);
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringstartswith/
	function startsWith(str, searchString, position) {
		return str.slice(position || 0, searchString.length) === searchString;
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringtrimend/
	function trimEnd(str) {
		return str.replace(new RegExp(/[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/.source + '$', 'g'), '');
	}

	// Based on https://vanillajstoolkit.com/polyfills/stringtrimstart/
	function trimStart(str) {
		return str.replace(new RegExp('^' + /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/.source, 'g'), '');
	}

	if (!String.prototype.endsWith)
		String.prototype.endsWith = function (searchStr /*, position*/) { return endsWith(this, rx, arguments[1]); };
	if (!String.prototype.includes)
		String.prototype.includes = function (search /*, start*/) { return includes(this, search, arguments[1]); };
	if (!String.prototype.matchAll)
		String.prototype.matchAll = function (regexp) { return matchAll(this, regexp); };
	if (!String.prototype.padEnd)
		String.prototype.padEnd = function (targetLength /*, padString*/) { return padEnd(this, targetLength, arguments[1]); };
	if (!String.prototype.padStart)
		String.prototype.padStart = function (targetLength /*, padString*/) { return padStart(this, targetLength, arguments[1]); };
	if (!String.prototype.repeat)
		String.prototype.repeat = function (count) { return repeat(this, count); };
	if (!String.prototype.replaceAll)
		String.prototype.replaceAll = function (substr, newSubstr) { return replaceAll(this, substr, newSubstr); };
	if (!String.prototype.startsWith)
		String.prototype.startsWith = function (searchString /*, position*/) { return startsWith(this, searchString, arguments[1]); };
	if (!String.prototype.trimEnd)
		String.prototype.trimEnd = function () { return trimEnd(this); };
	if (!String.prototype.trimStart)
		String.prototype.trimStart = function () { return trimStart(this); };

	// #endregion

	// #region ExoWeb.Cache
	//////////////////////////////////////////////////

	var cacheInited = false;

	var scriptTag = document.getElementsByTagName("script");
	var referrer = scriptTag[scriptTag.length - 1].src;

	var cacheHash;

	var match = /[?&]cachehash=([^&]*)/i.exec(referrer);
	if (match) {
		cacheHash = match[1];
	}

	ExoWeb.cacheHash = cacheHash;

	// Determine if local storage is supported, understanding 
	var useLocalStorage = false;
	try {
		var testLS = "c-localStorage";
		window.localStorage.setItem(testLS, testLS);
		window.localStorage.removeItem(testLS);
		useLocalStorage = true;
	}
	catch (e)
	{ }

	if (useLocalStorage) {

		ExoWeb.cache = function (key, value) {
			var localKey = key;

			// defer init of the cache so that the appInstanceId can be set
			if (!cacheInited) {
				cacheInited = true;

				// if there's an older version of caching, clear the entire cache (the old way)
				if (window.localStorage.getItem("cacheHash"))
					window.localStorage.clear();

				// Flush the local storage cache if the cache hash has changed
				if (cacheHash && ExoWeb.cache("cacheHash") != cacheHash) {
					ExoWeb.clearCache();
					ExoWeb.cache("cacheHash", cacheHash);
				}
			}

			// scope the cache to ExoWeb and to a particular app if there are multiple apps hosted at the same domain.
			localKey = "ExoWeb:cache:" + ExoWeb.config.appInstanceId + ":" + localKey;

			if (arguments.length == 1) {
				value = window.localStorage.getItem(localKey);
				return value ? JSON.parse(value) : null;
			}
			else if (arguments.length == 2) {
				var json = JSON.stringify(value);
				try {
					window.localStorage.setItem(localKey, json);
				}
				catch (e) {
					logWarning(e.message);
				}
				return value;
			}
		};

		ExoWeb.clearCache = function () {
			window.localStorage.clear();
		};
	}

	// Caching Not Supported
	else {
		ExoWeb.cache = function (key, value) { return null; };
		ExoWeb.clearCache = function () { };
	}

	// #endregion

	// #region ExoWeb.Activity
	//////////////////////////////////////////////////

	var activityCallbacks = [];

	function registerActivity(label, callback, thisPtr) {
		if (label == null) throw new ArgumentNullError("label");
		if (typeof (label) !== "string") throw new ArgumentTypeError("label", "string", label);
		if (callback == null) throw new ArgumentNullError("callback");
		if (typeof (callback) !== "function") throw new ArgumentTypeError("callback", "function", callback);

		var item = { label: label, callback: callback };

		if (thisPtr) {
			callback.thisPtr = thisPtr;
		}

		activityCallbacks.push(item);
	}

	ExoWeb.registerActivity = registerActivity;

	function isBusy(/* logBusyLabel */) {
		var busy = false;
		var logBusyLabel = arguments[0];

		getBusyItems(function (item) {
			busy = true;

			if (logBusyLabel) {
				console.log("Item \"" + item.label + "\" is busy.");
				return false;
			}
			else {
				return true;
			}
		});

		return busy;
	}

	ExoWeb.isBusy = isBusy;

	function getBusyItems(onBusyItemFound) {
		var busyItems = [];

		for (var i = 0, len = activityCallbacks.length; i < len; i++) {
			var item = activityCallbacks[i];

			if (item.callback.call(item.thisPtr || this) === true) {
				busyItems.push(item);

				if (onBusyItemFound && onBusyItemFound(item) === true)
					return busyItems;
			}
		}

		return busyItems;
	}

	ExoWeb.getBusyItems = getBusyItems;

	// #endregion

	// #region ExoWeb.Batch
	//////////////////////////////////////////////////

	var batchIndex = 0;
	var allBatches = [];
	var currentBatch = null;

	function Batch(label) {
		this._index = batchIndex++;
		this._labels = [label];
		this._rootLabel = label;
		this._subscribers = [];

		allBatches.push(this);
	}

	registerActivity("Batch", function() {
		return Batch.all().length > 0;
	});

	Batch.all = function Batch_$all(includeEnded) {
		return allBatches.filter(function(e) {
			return includeEnded || !e.isEnded();
		});
	};

	Batch.current = function Batch_$current() {
		return currentBatch;
	};

	Batch.suspendCurrent = function Batch_$suspendCurrent(message) {
		if (currentBatch !== null) {
			var batch = currentBatch;
			currentBatch = null;
			return batch;
		}
	};

	Batch.start = function Batch_$start(label) {
		if (currentBatch) {
			currentBatch._begin(label);
		}
		else {
			currentBatch = new Batch(label);
		}

		return currentBatch;
	};

	Batch.resume = function Batch_$resume(batch) {
		if (batch) {
			(batch._transferredTo || batch)._resume();
		}
	};

	Batch.end = function Batch_$end(batch) {
		(batch._transferredTo || batch)._end();
	};

	Batch.whenDone = function Batch_$whenDone(fn, thisPtr) {
		if (currentBatch) {
			currentBatch.whenDone(fn, thisPtr);
		}
		else {
			fn.call(thisPtr || this);
		}
	};

	Batch.current = function Batch_$current() {
		return currentBatch;
	};

	Batch.mixin({
		_begin: function Batch$_begin(label) {
			this._labels.push(label);

			return this;
		},
		_end: function Batch$_end() {
			// Cannot end a batch that has already been ended.
			if (this.isEnded()) {
				return this;
			}

			// Remove the last label from the list.
			var label = this._labels.pop();

			if (this.isEnded()) {
				// If we are ending the current batch, then null out the current batch 
				// variable so that new batches can be created with a new root label.
				if (currentBatch === this) {
					currentBatch = null;
				}

				// Invoke the subscribers.
				var subscriber = this._subscribers.dequeue();
				while (subscriber) {
					subscriber.fn.apply(subscriber.thisPtr || this, arguments);
					subscriber = this._subscribers.dequeue();
				}
			}

			return this;
		},
		_transferTo: function Batch$_transferTo(otherBatch) {
			// Transfers this batch's labels and subscribers to the
			// given batch.  From this point forward this batch defers
			// its behavior to the given batch.

			// Transfer labels from one batch to another.
			otherBatch._labels.addRange(this._labels);
			this._labels.clear();
			otherBatch._subscribers.addRange(this._subscribers);
			this._subscribers.clear();
			this._transferredTo = otherBatch;
		},
		_resume: function Batch$_resume() {
			// Ignore resume on a batch that has already been ended.
			if (this.isEnded()) {
				return;
			}

			if (currentBatch !== null) {
				// If there is a current batch then simple transfer the labels to it.
				this._transferTo(currentBatch);
				return currentBatch;
			}

			currentBatch = this;

			return this;
		},
		isEnded: function Batch$isEnded() {
			return this._labels.length === 0;
		},
		whenDone: function Batch$whenDone(fn, thisPtr) {
			this._subscribers.push({ fn: fn, thisPtr: thisPtr });

			return this;
		}
	});

	ExoWeb.Batch = Batch;

	// #endregion

	// #region ExoWeb.Signal
	//////////////////////////////////////////////////

	var pendingSignalTimeouts = null;

	function Signal(debugLabel) {
		this._waitForAll = [];
		this._pending = 0;
		this._debugLabel = debugLabel;
	}

	var setupCallbacks = function setupCallbacks() {
		window.setTimeout(function () {
			var callbacks, maxBatch = isNumber(config.signalMaxBatchSize) ? config.signalMaxBatchSize : null;
			if (maxBatch && pendingSignalTimeouts.length > maxBatch) {
				// Exceeds max batch size, so only invoke the max number and delay the rest
				callbacks = pendingSignalTimeouts.splice(0, maxBatch);
				setupCallbacks();
			}
			else {
				// No max batch, or does not exceed size, so call all pending callbacks
				callbacks = pendingSignalTimeouts;
				pendingSignalTimeouts = null;
			}
			// Call each callback in order
			callbacks.forEach(callArgument);
		}, 1);
	};

	function doCallback(name, thisPtr, callback, args, executeImmediately) {
		if (executeImmediately === false || (config.signalTimeout === true && executeImmediately !== true)) {
			var batch = Batch.suspendCurrent("_doCallback");

			// manage a queue of callbacks to ensure the order of execution

			var setup = false;
			if (pendingSignalTimeouts === null) {
				pendingSignalTimeouts = [];
				setup = true;
			}

			pendingSignalTimeouts.push(function() {
				Batch.resume(batch);
				callback.apply(thisPtr, args || []);
			});

			if (setup) {
				setupCallbacks();
			}
		}
		else {
			callback.apply(thisPtr, args || []);
		}
	}

	Signal.mixin({
		pending: function Signal$pending(callback, thisPtr, executeImmediately) {
			if (this._pending === 0) {
				Signal.allPending.push(this);
			}

			this._pending++;
			return this._genCallback(callback, thisPtr, executeImmediately);
		},
		orPending: function Signal$orPending(callback, thisPtr, executeImmediately) {
			return this._genCallback(callback, thisPtr, executeImmediately);
		},
		_doCallback: function Signal$_doCallback(name, thisPtr, callback, args, executeImmediately) {
			doCallback.apply(this, arguments);
		},
		_genCallback: function Signal$_genCallback(callback, thisPtr, executeImmediately) {
			var signal = this, called = false;
			return function Signal$_genCallback$result() {
				signal._doCallback("pending", thisPtr || this, function Signal$_genCallback$fn() {

					// Throw an error if the signal callback has already been called
					if (called) throw new Error("(" + signal._debugLabel + ") signal callback was called more than once.");

					// Record the fact that the callback has already been called in case it is called again
					called = true;

					// Invoke the callback if it exists
					if (callback) callback.apply(this, arguments);

					// Signal that the callback is complete
					signal.oneDone();

				}, arguments, executeImmediately);
			};
		},
		waitForAll: function Signal$waitForAll(callback, thisPtr, executeImmediately) {
			if (!callback) {
				return;
			}

			if (this._pending === 0) {
				this._doCallback("waitForAll", thisPtr, callback, [], executeImmediately);
			}
			else {
				this._waitForAll.push({ "callback": callback, "thisPtr": thisPtr, "executeImmediately": executeImmediately });
			}
		},
		oneDone: function Signal$oneDone() {
			--this._pending;

			if (this._pending === 0) {
				Signal.allPending.remove(this);
			}

			while (this._pending === 0 && this._waitForAll.length > 0) {
				var item = this._waitForAll.dequeue();
				this._doCallback("waitForAll", item.thisPtr, item.callback, [], item.executeImmediately);
			}
		},
		isActive: function Signal$isActive() {
			return this._pending > 0;
		}
	});

	Signal.allPending = [];

	Signal.begin = function (debugLabel) {
		return new Signal(debugLabel);
	};

	ExoWeb.Signal = Signal;

	// #endregion

	// #region ExoWeb.Functor
	//////////////////////////////////////////////////

	function Functor() {
		var funcs = [];

		var f = function Functor$fn() {
			for (var i = 0; i < funcs.length; ++i) {
				var item = funcs[i];

				// Don't re-run one-time subscriptions that have already been applied.
				if (item.applied === true) {
					continue;
				}

				// Ensure that there is either no filter or the filter passes.
				if (!item.filter || item.filter.apply(this, arguments) === true) {
					// If handler is set to execute once,
					// remove the handler before calling.
					if (item.once === true) {
						// Mark as applied but leave item in array to avoid potential
						// problems due to re-entry into event invalidating iteration
						// index. In some cases re-entry would be a red-flag, but for
						// "global" events, where the context of the event is derived
						// from the arguments, the event could easily be re-entered
						// in a different context with different arguments.
						item.applied = true;
					}

					// Call the handler function.
					item.fn.apply(this, arguments);
				}
			}
		};

		f._funcs = funcs;
		f.add = Functor$add;
		f.remove = Functor$remove;
		f.isEmpty = Functor$isEmpty;
		f.clear = Functor$clear;

		return f;
	}

	function Functor$add(fn, filter, once) {
		var item = { fn: fn };

		if (filter !== undefined) {
			item.filter = filter;
		}

		if (once !== undefined) {
			item.once = once;
		}

		this._funcs.push(item);

		return fn;
	}

	function Functor$remove(old) {
		for (var i = this._funcs.length - 1; i >= 0; --i) {
			if (this._funcs[i].fn === old) {
				this._funcs.splice(i, 1);
				return true;
			}
		}

		return false;
	}

	function Functor$clear() {
		this._funcs.length = 0;
	}

	function Functor$isEmpty(args) {
		return !this._funcs.some(function (item) { return item.applied !== true && (!args || !item.filter || item.filter.apply(this, args)); }, this);
	}

	var functorEventsInProgress = 0;

	// busy if there are any events in progress
	registerActivity("Functor", function() {
		return functorEventsInProgress > 0;
	});

	Functor.eventing = {
		_addEvent: function Functor$_addEvent(name, func, filter, once) {
			if (!this["_" + name]) {
				this["_" + name] = new Functor();
			}

			this["_" + name].add(func, filter, once);

			return func;
		},
		_removeEvent: function Functor$_removeEvent(name, func) {
			var handler = this["_" + name];
			if (handler) {
				handler.remove(func);
				return true;
			}

			return false;
		},
		_raiseEvent: function Functor$_raiseEvent(name, argsArray) {
			var handler = this["_" + name];
			if (handler) {
				try {
					functorEventsInProgress++;
					handler.apply(this, argsArray || []);
				}
				finally {
					functorEventsInProgress--;
				}
			}
		},
		_clearEvent: function Functor$_clearEvent(name) {
			var evtName = "_" + name;
			if (this.hasOwnProperty(evtName)) {
				this[evtName] = null;
			}
		},
		_getEventHandler: function Functor$_getEventHandler(name) {
			return this["_" + name];
		}
	};

	ExoWeb.Functor = Functor;

	// #endregion

	// #region ExoWeb.FunctionChain
	//////////////////////////////////////////////////

	function FunctionChain(steps, thisPtr) {
		if (!(steps instanceof Array)) {
			throw new ArgumentTypeError("steps", "array", steps);
		}

		this._steps = steps;
		this._thisPtr = thisPtr;
	}

	FunctionChain.prepare = function FunctionChain$_invoke() {
		// Return a function that can be invoked with callback and thisPtr.
		// Useful for assigning to a prototype member, since "this" is used
		// as the thisPtr for the chain if "thisPtr" argument is not supplied,
		// while "thisPtr" of invocation is used as the argument to "invoke".

		var steps,
			thisPtrOuter = null;

		// no args => empty chain
		if (arguments.length === 0) {
			steps = [];
		} else if (arguments.length === 1 && arguments[0] instanceof Array) {
			// One array arg => array of steps
			steps = arguments[0];
		} else if (arguments.length === 2 && arguments[0] instanceof Array) {
			// Two args (first array) => array of steps and this pointer
			steps = arguments[0];
			thisPtrOuter = arguments[1];
		} else {
			// Otherwise, assume arguments correspond to steps
			steps = Array.prototype.slice.call(arguments);
		}

		return function(callback, thisPtr) {
			var chain = new FunctionChain(steps, thisPtrOuter || this);
			chain.invoke(callback, thisPtr);
		};
	};

	FunctionChain.forEachAsync = function (items, stepFunction, callback) {
		if (items.length === 0) {
			if (callback) {
				callback();
			}
			return;
		}

		var chain = new FunctionChain(items.map(function (item) {
			return function (cb, thisPtr) {
				stepFunction.call(thisPtr || this, item, cb, thisPtr || this);
			};
		}));
		chain.invoke(callback);
	};

	function doStep(idx, callback, thisPtr) {
		var outerCallback = callback;
		var outerThisPtr = thisPtr;
		var nextStep = idx + 1 < this._steps.length ?
			doStep.prependArguments(idx + 1, outerCallback, outerThisPtr).bind(this) :
			function() {
				if (outerCallback && outerCallback instanceof Function) {
					outerCallback.apply(outerThisPtr || this, arguments);
				}
			};

		this._steps[idx].call(this._thisPtr || this, nextStep);
	}

	FunctionChain.mixin({
		invoke: function(callback, thisPtr) {
			doStep.call(this, 0, callback, thisPtr);
		}
	});

	ExoWeb.FunctionChain = FunctionChain;

	// #endregion

	// #region ExoWeb.EventScope
	//////////////////////////////////////////////////

	var currentEventScope = null;

	function EventScope() {
		// If there is a current event scope
		// then it will be the parent of the new event scope
		var parent = currentEventScope;

		// Define the parent property
		Object.defineProperty(this, "parent", { value: parent });

		// Define the isActive property
		this.isActive = true;

		// Set this to be the current event scope
		currentEventScope = this;
	}

	EventScope.mixin(Functor.eventing);

	EventScope.mixin({
		abort: function () {
			if (!this.isActive) {
				throw new Error("The event scope cannot be aborted because it is not active.");
			}

			try {
				var abortHandler = this._getEventHandler("abort");
				if (abortHandler && !abortHandler.isEmpty()) {
					// Invoke all subscribers
					abortHandler();
				}

				// Clear the events to ensure that they aren't
				// inadvertantly raised again through this scope
				this._clearEvent("abort");
				this._clearEvent("exit");
			}
			finally {
				// The event scope is no longer active
				this.isActive = false;

				if (currentEventScope && currentEventScope === this) {
					// Roll back to the closest active scope
					while (currentEventScope && !currentEventScope.isActive) {
						currentEventScope = currentEventScope.parent;
					}
				}
			}
		},
		exit: function() {
			if (!this.isActive) {
				throw new Error("The event scope cannot be exited because it is not active.");
			}

			try {
				var exitHandler = this._getEventHandler("exit");
				if (exitHandler && !exitHandler.isEmpty()) {

					// If there is no parent scope, then go ahead and execute the 'exit' event
					if (this.parent === null || !this.parent.isActive) {

						// Record the initial version and initial number of subscribers
						this._exitEventVersion = 0;
						this._exitEventHandlerCount = exitHandler._funcs.length;

						// Invoke all subscribers
						exitHandler();

						// Delete the fields to indicate that raising the exit event suceeded
						delete this._exitEventHandlerCount;
						delete this._exitEventVersion;

					}
					else {
						if (typeof window.ExoWeb.config.nonExitingScopeNestingCount === "number") {
							var maxNesting = window.ExoWeb.config.nonExitingScopeNestingCount - 1;
							if (this.parent.hasOwnProperty("_exitEventVersion") && this.parent._exitEventVersion >= maxNesting) {
								this.abort();
								logWarning("Event scope 'exit' subscribers were discarded due to non-exiting.");
								return;
							}
						}

						// Move subscribers to the parent scope
						this.parent._addEvent("exit", exitHandler);

						if (this.parent.hasOwnProperty("_exitEventVersion")) {
							this.parent._exitEventVersion++;
						}
					}

					// Clear the events to ensure that they aren't
					// inadvertantly raised again through this scope
					this._clearEvent("exit");
					this._clearEvent("abort");
				}
			}
			finally {
				// The event scope is no longer active
				this.isActive = false;

				if (currentEventScope && currentEventScope === this) {
					// Roll back to the closest active scope
					while (currentEventScope && !currentEventScope.isActive) {
						currentEventScope = currentEventScope.parent;
					}
				}
			}
		}
	});

	function EventScope$onExit(callback, thisPtr) {
		if (currentEventScope === null) {
			// Immediately invoke the callback
			if (thisPtr) {
				callback.call(thisPtr);
			}
			else {
				callback();
			}
		}
		else if (!currentEventScope.isActive) {
			throw new Error("The current event scope cannot be inactive.");
		}
		else {
			// Subscribe to the exit event
			currentEventScope._addEvent("exit", callback.bind(thisPtr));
		}
	}

	function EventScope$onAbort(callback, thisPtr) {
		if (currentEventScope !== null) {
			if (!currentEventScope.isActive) {
				throw new Error("The current event scope cannot be inactive.");
			}

			// Subscribe to the abort event
			currentEventScope._addEvent("abort", callback.bind(thisPtr));
		}
	}

	function EventScope$perform(callback, thisPtr) {
		// Create an event scope
		var scope = new EventScope();
		try {
			// Invoke the callback
			if (thisPtr) {
				callback.call(thisPtr);
			}
			else {
				callback();
			}
		}
		finally {
			// Exit the event scope
			scope.exit();
		}
	}

	// Export public functions
	var eventScopeApi = {
		onExit: EventScope$onExit,
		onAbort: EventScope$onAbort,
		perform: EventScope$perform
	};

	ExoWeb.EventScope = eventScopeApi;

	// #endregion

	// #region ExoWeb.EvalWrapper
	//////////////////////////////////////////////////

	// Helper class for interpreting expressions
	function EvalWrapper(value) {
		this.value = value;
	}

	EvalWrapper.mixin({
		get: function EvalWrapper$get(member) {
			var propValue = getValue(this.value, member);

			if (propValue === undefined) {
				propValue = window[member];
			}

			if (propValue === undefined) {
				throw new TypeError(member + " is undefined");
			}

			return new EvalWrapper(propValue);
		}
	});

	ExoWeb.EvalWrapper = EvalWrapper;

	// #endregion

	// #region ExoWeb.Transform
	//////////////////////////////////////////////////

	function Transform(array, forLive) {
		if (array == null) throw new ArgumentNullError("array", "transform input is required");
		if (!(array instanceof Array)) throw new ArgumentTypeError("array", "array", array);

		this._array = array;
		this.rootInput = array;
		if (forLive === true) {
			this._livePending = true;
			this._liveComplete = false;
		}
	}

	function TransformGroup(group, items) {
		this.group = group;
		this.items = items;
	}

	var compileFilterFunction = (function Transform$compileFilterFunction(filter) {
		var parser = /(([a-z_$][0-9a-z_$]*)([.]?))|(('([^']|\')*')|("([^"]|\")*"))/gi;
		var skipWords = ["true", "false", "$index", "null"];

		filter = filter.replace(parser, function (match, ignored, name, more, strLiteral) {
			if ((strLiteral !== undefined && strLiteral !== null && strLiteral.length > 0) || skipWords.indexOf(name) >= 0) {
				return match;
			}

			if (name === "$item") {
				return more ? "" : name;
			}

			if (more.length > 0) {
				return "get('" + name + "')" + more;
			}

			return "get('" + name + "').value";
		});

		return new Function("$item", "$index", "with(new ExoWeb.EvalWrapper($item)){ return (" + filter + ");}");
	}).cached();

	var compileSelectFunction = (function Transform$compileSelectFunction(selector) {
		return new Function("$item", "$index", "return ExoWeb.evalPath($item, '" + selector + "');");
	}).cached();

	var compileSelectManyFunction = (function Transform$compileSelectManyFunction(selector) {
		return new Function("$item", "$index", "return ExoWeb.evalPath($item, '" + selector + "');");
	}).cached();

	var compileGroupsFunction = (function Transform$compileGroupsFunction(groups) {
		return new Function("$item", "$index", "return ExoWeb.evalPath($item, '" + groups + "');");
	}).cached();

	var compileOrderingFunction = (function Transform$compileOrderingFunction(ordering) {
		var orderings = [];
		var parser = /\s*([a-z0-9_.]+)(\s+null)?(\s+(asc|desc))?(\s+null)? *(,|$)/gi;

		ordering.replace(parser, function (match, path, nullsFirst, ws, dir, nullsLast) {
			var isNullsFirst = (nullsFirst !== undefined && nullsFirst !== null && nullsFirst.length > 0);
			var isNullsLast = (nullsLast !== undefined && nullsLast !== null && nullsLast.length > 0);
			orderings.push({
				path: path,
				ab: dir === "desc" ? 1 : -1,
				nulls: isNullsLast || (!ws && isNullsFirst) ? 1 : -1
			});
		});

		function before(a, b) {
			if (a !== null && a !== undefined && a.constructor === String && b !== null && b !== undefined && b.constructor === String) {
				a = a.toLowerCase();
				b = b.toLowerCase();
			}
			return a < b;
		}

		return function compare(aObj, bObj) {
			for (var i = 0; i < orderings.length; ++i) {
				var order = orderings[i];

				var a = evalPath(aObj, order.path, null, null);
				var b = evalPath(bObj, order.path, null, null);

				if (a === null && b !== null) {
					return order.nulls;
				}
				if (a !== null && b === null) {
					return -order.nulls;
				}
				if (before(a, b)) {
					return order.ab;
				}
				if (before(b, a)) {
					return -order.ab;
				}
			}

			return 0;
		};
	}).cached();

	var transforms = {
		where: function where(input, filter, thisPtr) {
			var filterFn = filter instanceof Function ? filter : compileFilterFunction(filter);
			return input.filter(filterFn, thisPtr);
		},
		select: function select(input, selector, thisPtr) {
			var mapFn = selector instanceof Function ? selector : compileSelectFunction(selector);
			return input.map(mapFn, thisPtr);
		},
		selectMany: function select(input, selector, thisPtr) {
			var mapFn = selector instanceof Function ? selector : compileSelectFunction(selector);
			return input.mapToArray(mapFn, thisPtr);
		},
		groupBy: function groupBy(input, groups, thisPtr) {
			var groupFn = groups instanceof Function ? groups : compileGroupsFunction(groups);

			var result = [];
			var len = input.length;
			for (var i = 0; i < len; i++) {
				var item = input[i];
				var groupKey = groupFn.apply(thisPtr || item, [item, i]);

				var group = null;
				for (var g = 0; g < result.length; ++g) {
					if (result[g].group == groupKey) {
						group = result[g];
						group.items.push(item);
						break;
					}
				}

				if (!group) {
					result.push(new TransformGroup(groupKey, [item]));
				}
			}

			return result;
		},
		orderBy: function orderBy(input, ordering, thisPtr) {
			var sortFn = ordering instanceof Function ? ordering : compileOrderingFunction(ordering);
			return input.copy().sort(thisPtr ? sortFn.bind(thisPtr) : sortFn);
		}
	};

	function copyTransform(steps, array, live) {
		var result = $transform(array, live);
		steps.forEach(function (step) {
			result = result[step._transform.method].call(result, step._transform.arg, step._transform.thisPtr)
		});
		return result;
	}

	function makeTransform(array, priorTransform, method, arg, thisPtr) {
		// Make sure that the same transform is not made live more than once since this can cause collisions.
		if (priorTransform._liveComplete === true) {
			throw new Error("Cannot call live on the same transform multiple times.");
		}

		var result;

		// When creating a live transform, the result cannot be used directly as an array to
		// discourage using part of the result when the intention is to eventually call "live".
		// When live mode is not used, then if live is eventually called it will result in a non-optimal
		// copying of the transform.
		if (priorTransform._livePending === true) {
			result = new Transform(array, true);
		}
		else {
			Function.mixin(Transform.prototype, array);
			result = array;
		}

		result._prior = priorTransform;
		result.rootInput = priorTransform.rootInput;
		result._transform = { method: method, arg: arg, thisPtr: thisPtr };
		return result;
	}

	Transform.mixin({
		input: function Transform$input() {
			return this._array || this;
		},
		where: function Transform$where(filter, thisPtr) {
			var output = transforms.where(this.input(), filter, thisPtr);
			return makeTransform(output, this, "where", filter, thisPtr);
		},
		select: function Transform$select(selector, thisPtr) {
			var output = transforms.select(this.input(), selector, thisPtr);
			return makeTransform(output, this, "select", selector, thisPtr);
		},
		selectMany: function Transform$selectMany(selector, thisPtr) {
			var output = transforms.selectMany(this.input(), selector, thisPtr);
			return makeTransform(output, this, "selectMany", selector, thisPtr);
		},
		groupBy: function Transform$groupBy(groups, thisPtr) {
			var output = transforms.groupBy(this.input(), groups, thisPtr);
			if (this._livePending) {
				// make the items array observable if the transform is in live mode
				output.forEach(function (group) {
					ExoWeb.Observer.makeObservable(group.items);
				});
			}
			return makeTransform(output, this, "groupBy", groups, thisPtr);
		},
		orderBy: function Transform$orderBy(ordering, thisPtr) {
			var output = transforms.orderBy(this.input(), ordering, thisPtr);
			return makeTransform(output, this, "orderBy", ordering, thisPtr);
		},
		live: function Transform$live() {
			// Watches for changes on the root input into the transform
			// and raises observable change events on this item as the 
			// results change.

			var transform, steps = [], rootStep;

			// determine the set of transform steps and the level of nested grouping
			for (var step = this; step; step = step._prior) {
				if (step._prior) {
					steps.splice(0, 0, step);
				}
				else {
					rootStep = step;
				}
			}

			// copy and return a live-mode transform if live mode was not used originally
			if (this._livePending !== true) {
				return copyTransform(steps, rootStep.input(), true).live();
			}

			// make a copy of the final transformed data and make it observable
			var output = this.input().copy();
			ExoWeb.Observer.makeObservable(output);
			output.rootInput = this.rootInput;

			// watch for changes to root input and update the transform steps as needed
			ExoWeb.Observer.addCollectionChanged(rootStep.input(), function Transform$live$collectionChanged(sender, args) {
				var changes, stepInput, stepResult, modifiedItemsArrays = [];

				//Sys.NotifyCollectionChangedAction.add;

				// copy the set of changes since they will be manipulated
				changes = args.get_changes().map(function (c) {
					return {
						action: c.action,
						oldItems: c.oldItems ? c.oldItems.copy() : null,
						oldStartingIndex: c.oldStartingIndex,
						newItems: c.newItems ? c.newItems.copy() : null,
						newStartingIndex: c.newStartingIndex
					};
				});

				// make a copied version of the input so that it can be manipulated without affecting the result
				stepInput = rootStep.input().copy();

				// re-run the transform on the newly changed input
				steps.forEach(function (step) {
					// store a reference to the output of this step
					stepResult = step.input();

					if (step._transform.method === "where") {
						changes.purge(function (change) {
							if (change.oldItems) {
								var oldItems = change.oldItems;
								// determine which removed items made it through the filter
								change.oldItems = transforms[step._transform.method](change.oldItems, step._transform.arg, step._transform.thisPtr);
								if (change.oldItems.length === 0) {
									// none of the removed items make it through the filter, so discard
									change.oldItems = null;
									change.oldStartingIndex = null;
									return true;
								}
								else {
									// find the actual index of the first removed item in the resulting array
									change.oldStartingIndex = stepResult.indexOf(change.oldItems[0]);

									// remove the filtered items from the result array
									stepResult.splice(change.oldStartingIndex, change.oldItems.length);
								}
							}
							else if (change.newItems) {
								var newItems = change.newItems;
								// determine which added items will make it through the filter
								change.newItems = transforms[step._transform.method](change.newItems, step._transform.arg, step._transform.thisPtr);
								if (change.newItems.length === 0) {
									// none of the new items will make it through the filter, so discard
									change.newItems = null;
									change.newStartingIndex = null;
									return true;
								}
								else {
									// if not added to the beginning or end of the list, determine
									// the real starting index by finding the index of the previous item
									if (change.newStartingIndex !== 0 && (change.newStartingIndex + change.newItems.length) !== stepInput.length) {
										var found = false;
										for (var idx = change.newStartingIndex - 1; !found && idx >= 0; idx--) {
											if (stepResult.indexOf(stepInput[idx]) >= 0) {
												found = true;
											}
										}
										change.newStartingIndex = idx + 1;
									}

									// splice the filtered items into the result array
									var spliceArgs = change.newItems.copy();
									spliceArgs.splice(0, 0, change.newStartingIndex, 0);
									Array.prototype.splice.apply(stepResult, spliceArgs);
								}
							}
							else {
								return true;
							}
						});
					}
					else if (step._transform.method === "select") {
						changes.forEach(function (change) {
							if (change.oldItems) {
								change.oldItems = stepResult.splice(change.oldStartingIndex, change.oldItems.length);
							}
							else if (change.newItems) {
								var mapFn = step._transform.arg instanceof Function ? step._transform.arg : compileSelectFunction(step._transform.arg);
								change.newItems = change.newItems.map(function (item) {
									return mapFn.call(step._transform.thisPtr || item, item);
								});

								// splice the filtered items into the result array
								var spliceArgs = change.newItems.copy();
								spliceArgs.splice(0, 0, change.newStartingIndex, 0);
								Array.prototype.splice.apply(stepResult, spliceArgs);
							}
						});
					}
					else if (step._transform.method === "selectMany") {
						changes.forEach(function (change) {
							if (change.oldItems) {
								var mapFn = step._transform.arg instanceof Function ? step._transform.arg : compileSelectManyFunction(step._transform.arg);
								var oldItemsMany = change.oldItems.mapToArray(function (item) {
									return mapFn.call(step._transform.thisPtr || item, item);
								});
								var oldPreceeding = stepInput.slice(0, change.oldStartingIndex);
								var oldPreceedingMany = oldPreceeding.mapToArray(function (item) {
									return mapFn.call(step._transform.thisPtr || item, item);
								});
								change.oldItems = stepResult.splice(oldPreceedingMany.length, oldItemsMany.length);
								change.oldStartingIndex = oldPreceedingMany.length;
							}
							else if (change.newItems) {
								var mapFn = step._transform.arg instanceof Function ? step._transform.arg : compileSelectManyFunction(step._transform.arg);
								change.newItems = change.newItems.mapToArray(function (item) {
									return mapFn.call(step._transform.thisPtr || item, item);
								});

								// splice the filtered items into the result array
								var spliceArgs = change.newItems.copy();
								spliceArgs.splice(0, 0, change.newStartingIndex, 0);
								Array.prototype.splice.apply(stepResult, spliceArgs);
							}
						});
					}
					else if (step._transform.method === "groupBy") {
						var groupFn = step._transform.arg instanceof Function ? step._transform.arg : compileGroupsFunction(step._transform.arg);
						var copyOfResults = stepResult.copy();
						changes.forEach(function (change) {
							if (change.oldItems) {
								change.oldItems.forEach(function (item) {
									var groupKey = groupFn.call(step._transform.thisPtr || item, item);
									var group = copyOfResults.filter(function (g) { return g.group === groupKey; })[0];
									// begin and end update on items array
									if (modifiedItemsArrays.indexOf(group.items) < 0) {
										group.items.beginUpdate();
										modifiedItemsArrays.push(group.items);
									}
									// remove the item
									var idx = group.items.indexOf(item);
									group.items.remove(item);
									if (idx === 0) {
										var groupIndex = copyOfResults.indexOf(group),
											sourceIndex = stepInput.indexOf(group.items[0]),
											targetIndex = null;
										for (i = 0; i < copyOfResults.length; i++) {
											if (sourceIndex > stepInput.indexOf(copyOfResults[i].items[0])) {
												targetIndex = i + 1;
												break;
											}
										}
										if (targetIndex !== null) {
											copyOfResults.splice(groupIndex, 1);
											copyOfResults.splice(targetIndex, 0, group);
										}
									}
									if (group.items.length === 0) {
										// remove the group from the copy of the array
										copyOfResults.splice(copyOfResults.indexOf(group), 1);
									}
								});
							}
							else if (change.newItems) {
								change.newItems.forEach(function (item) {
									var groupKey = groupFn.call(step._transform.thisPtr || item, item),
										group = copyOfResults.filter(function (g) { return g.group === groupKey; })[0],
										sourceIndex,
										targetIndex,
										resequenceGroup = false,
										groupIndex,
										i;

									if (group) {
										// begin and end update on items array
										if (modifiedItemsArrays.indexOf(group.items) < 0) {
											group.items.beginUpdate();
											modifiedItemsArrays.push(group.items);
										}
										sourceIndex = stepInput.indexOf(item), targetIndex = null;
										for (i = 0; i < group.items.length; i++) {
											if (sourceIndex < stepInput.indexOf(group.items[i])) {
												targetIndex = i;
												break;
											}
										}
										if (targetIndex !== null) {
											group.items.insert(targetIndex, item);
											// group's index may have changed as a result
											if (targetIndex === 0) {
												resequenceGroup = true;
											}
										}
										else {
											group.items.add(item);
										}
									}
									else {
										group = new TransformGroup(groupKey, [item]);
										ExoWeb.Observer.makeObservable(group.items);
										copyOfResults.push(group);
										resequenceGroup = true;
									}

									if (resequenceGroup === true) {
										groupIndex = copyOfResults.indexOf(group);
										sourceIndex = stepInput.indexOf(group.items[0]);
										targetIndex = null;
										for (i = 0; i < groupIndex; i++) {
											if (sourceIndex < stepInput.indexOf(copyOfResults[i].items[0])) {
												targetIndex = i;
												break;
											}
										}
										if (targetIndex !== null) {
											copyOfResults.splice(groupIndex, 1);
											copyOfResults.splice(targetIndex, 0, group);
										}
									}
								});
							}
						});

						// collect new changes to groups
						changes = update(stepResult, copyOfResults, true);
					}
					else if (step._transform.method === "orderBy") {
						// sort the input and update the step result to match
						var sorted = transforms[step._transform.method](stepInput, step._transform.arg, step._transform.thisPtr);
						changes = update(stepResult, sorted, true);
					}

					// move the input forward to the result of the current step
					stepInput = stepResult;
				});

				// apply changes to the ouput array
				output.beginUpdate();
				changes.forEach(function (change) {
					if (change.oldItems) {
						output.removeRange(change.oldStartingIndex, change.oldItems.length);
					}
					else if (change.newItems) {
						output.insertRange(change.newStartingIndex, change.newItems);
					}
				});
				output.endUpdate();

				// release changes to items arrays of groups, changes to the array occur first to allow
				// for changes to groups' items to be ignored if the group is no longer a part of the output
				modifiedItemsArrays.forEach(function (items) {
					items.endUpdate();
				});
			});

			// mark the transform steps as live complete
			rootStep._liveComplete = true;
			steps.forEach(function (step) {
				step._liveComplete = true;
			});

			return output;
		}
	});

	ExoWeb.Transform = Transform;
	window.$transform = function transform(array, forLive) { return new Transform(array, forLive); };

	// #endregion

	// #region ExoWeb.Translator
	//////////////////////////////////////////////////

	function Translator() {
		this._forwardDictionary = {};
		this._reverseDictionary = {};
	}

	Translator.prototype = {
		lookup: function Translator$lookup(source, category, key) {
			if (source[category]) {
				return source[category][key] || null;
			}
		},
		forward: function Translator$forward(category, key) {
			return this.lookup(this._forwardDictionary, category, key);
		},
		reverse: function Translator$reverse(category, key) {
			return this.lookup(this._reverseDictionary, category, key);
		},
		add: function Translator$addMapping(category, key, value/*, suppressReverse*/) {
			// look for optional suppress reverse lookup argument
			var suppressReverse = (arguments.length == 4 && arguments[3].constructor === Boolean) ? arguments[3] : false;

			// lazy initialize the forward dictionary for the category
			if (!this._forwardDictionary[category]) {
				this._forwardDictionary[category] = {};
			}
			this._forwardDictionary[category][key] = value;

			// don't add to the reverse dictionary if the suppress flag is specified
			if (!suppressReverse) {
				// lazy initialize the reverse dictionary for the category
				if (!this._reverseDictionary[category]) {
					this._reverseDictionary[category] = {};
				}
				this._reverseDictionary[category][value] = key;
			}
		}
	};

	ExoWeb.Translator = Translator;

	// #endregion

	// #region ExoWeb.Utilities
	//////////////////////////////////////////////////

	// determine whether Object.defineProperty is supported and add legacy support is necessary/possible
	var definePropertySupported = false;
	var defineProperty;

	function defineLegacyProperty() {
		Object.defineProperty = function (obj, prop, desc) {

			// assume getter will only need to calculate once following the constructor
			if ("get" in desc) {
				if (!desc.init) throw new Error("Getters are not supported by the current browser.  Use definePropertySupported to check for full support.");

				// assume objects with prototypes are instances and go ahead and initialize the property using the getter
				if (obj.prototype) {
					obj[prop] = desc.get.call(obj, obj);
				}

				// otherwise, configure the prototype to initialize the property when the constructor is called
				else if (obj.constructor) {
					var initProperties = obj.constructor.__initProperties;
					if (!initProperties) {
						obj.constructor.__initProperties = initProperties = {};
					}
					initProperties[prop] = desc.get;
				}
			}

			// assume it is just a data property
			else {
				obj[prop] = desc.value;
			}

			// throw an exception if the property has a setter, which is definitely not supported
			if ("set" in desc) throw new Error("Setters are not supported by the current browser.  Use definePropertySupported to check for full support.");
		};
	}

	try {
		// emulate ES5 getter/setter API using legacy APIs
		if (Object.prototype.__defineGetter__ && !Object.defineProperty) {
			Object.defineProperty = function (obj, prop, desc) {

				// property with getter
				if ("get" in desc) obj.__defineGetter__(prop, desc.get);

				// property with setter
				if ("set" in desc) obj.__defineSetter__(prop, desc.set);

				// data only property
				if (!("get" in desc || "set" in desc)) {

					// read/write property
					if (desc.writable) {
						var value = desc.value;
						obj.__defineGetter__(prop, function () { return value; });
						obj.__defineSetter__(prop, function (val) { value = val; });
					}

					// read only property
					else {
						var value = desc.value;
						obj.__defineGetter__(prop, function () { return value; });
					}
				}
			};
			definePropertySupported = true;
		}

		// otherwise, ensure defineProperty actually works
		else if (Object.defineProperty && Object.defineProperty({}, "x", { get: function () { return true } }).x) {
			definePropertySupported = true;
		}

		// enable legacy support
		else {
			defineLegacyProperty();
		}
	} 

	// no getter/setter support
	catch (e) {

		// enable legacy support
		defineLegacyProperty();
	}

	// classes that call define property should
	function initializeLegacyProperties(obj) {
		if (definePropertySupported) return;
		var initProperties = obj.constructor.__initProperties;
		if (initProperties) {
			for (var p in initProperties) {
				obj[p] = initProperties[p].call(obj, obj);
			}
		}
	}

	// evalPath internal utility function
	function evalPath(obj, path, nullValue, undefinedValue) {
		var i, name, steps = path.split("."), source, value = obj;

		if (value === null) {
			return arguments.length >= 3 ? nullValue : null;
		}
		if (value === undefined) {
			return arguments.length >= 4 ? undefinedValue : undefined;
		}

		for (i = 0; i < steps.length; ++i) {
			name = steps[i];
			source = value;
			value = getValue(source, name);

			if (value === null) {
				return arguments.length >= 3 ? nullValue : null;
			}
			if (value === undefined) {
				return arguments.length >= 4 ? undefinedValue : undefined;
			}
		}

		return value;
	}

	ExoWeb.evalPath = evalPath;

	function getLastTarget(target, propertyPath) {
		var i, pathArray, finalTarget = target;

		if (propertyPath == null) throw new ArgumentNullError("propertyPath");

		if (propertyPath.constructor == String) {
			pathArray = propertyPath.split(".");
		}
		else {
			if (!(propertyPath instanceof Array)) throw ArgumentTypeError("propertyPath", "string|array", propertyPath);
			pathArray = propertyPath;
		}

		for (i = 0; i < pathArray.length - 1; i++) {
			if (finalTarget) {
				finalTarget = getValue(finalTarget, pathArray[i]);
			}
		}

		return finalTarget;
	}

	ExoWeb.getLastTarget = getLastTarget;
	window.$lastTarget = getLastTarget;

	// If a getter method matching the given property name is found on the target it is invoked and returns the 
	// value, unless the the value is undefined, in which case null is returned instead.  This is done so that 
	// calling code can interpret a return value of undefined to mean that the property it requested does not exist.
	// TODO: better name
	function getValue(target, property) {
		var value;

		// the see if there is an explicit getter function for the property
		var getter = target["get_" + property];
		if (getter) {
			value = getter.call(target);
			if (value === undefined) {
				value = null;
			}
		}

		// otherwise search for the property
		else {
			if ((isObject(target) && property in target) ||
				Object.prototype.hasOwnProperty.call(target, property) ||
				(target.constructor === String && /^[0-9]+$/.test(property) && parseInt(property, 10) < target.length)) {
				value = target[property];
				if (value === undefined) {
					value = null;
				}
			}
			else if (/\./.test(property)) {
				logWarning("Possible incorrect usage of \"getValue()\", the path \"" + property + "\" does not exist on the target and appears to represent a multi-hop path.");
			}
		}

		return value;
	}

	ExoWeb.getValue = getValue;

	function getCtor(type) {

		// Only return a value if the argument is defined
		if (type !== undefined && type !== null) {

			// If the argument is a function then return it immediately.
			if (isType(type, Function)) {
				return type;

			}
			else {
				var ctor;

				if (isType(type, String)) {
					// remove "window." from the type name since it is implied
					type = type.replace(/(window\.)?(.*)/, "$2");

					// evaluate the path
					ctor = evalPath(window, type);
				}

				// warn (and implicitly return undefined) if the result is not a javascript function
				if (ctor !== undefined && ctor !== null && !isType(ctor, Function)) {
					logWarning("The given type \"" + type + "\" is not a function.");
				}
				else {
					return ctor;
				}
			}
		}
	}

	ExoWeb.getCtor = getCtor;

	function isType(val, type) {

		// Exit early for checking function type
		if (val !== undefined && val !== null && val === Function && type !== undefined && type !== null && type === Function) {
			return true;
		}

		var ctor = getCtor(type);

		// ensure a defined value and constructor
		return val !== undefined && val !== null &&
				ctor !== undefined && ctor !== null &&
				// accomodate objects (instanceof) as well as intrinsic value types (String, Number, etc)
				(val instanceof ctor || val.constructor === ctor);
	}

	ExoWeb.isType = isType;

	function eachProp(obj, callback, thisPtr) {
		var prop;
		for (prop in obj) {
			if (obj.hasOwnProperty(prop)) {
				if (callback.apply(thisPtr || this, [prop, obj[prop]]) === false) {
					break;
				}
			}
		}
	}

	ExoWeb.eachProp = eachProp;

	function objectToArray(obj) {
		var list = [];
		eachProp(obj, function(prop, value) {
			list.push(value);
		});
		return list;
	}

	ExoWeb.objectToArray = objectToArray;

	function $format(str, values) {
		var source;

		if (arguments.length < 2) {
			return str;
		}

		if (arguments.length > 2) {
			// use arguments passed to function as array
			source = Array.prototype.slice.call(arguments, 1);
		}
		else {
			source = !(values instanceof Array) ? [values] : values;
		}

		return str.replace(/\{([0-9]+)\}/ig, function (match, indexStr) {
			var index = parseInt(indexStr, 10);
			var result = source[index];

			if (result !== null && result !== undefined && result.constructor !== String) {
				result = result.toString();
			}

			return result;
		});
	}

	window.$format = $format;

	function makeHumanReadable(text) {
		return text.replace(/([^A-Z]+)([A-Z])/g, "$1 $2");
	}

	ExoWeb.makeHumanReadable = makeHumanReadable;

	// #endregion

	// #region ExoWeb.TimeSpan
	//////////////////////////////////////////////////

	function TimeSpan(ms) {
		/// <field name="totalSeconds" type="Number">The target entity the condition is associated with.</field>

		this.totalMilliseconds = ms;

		initializeLegacyProperties(this);
	}

	TimeSpan.mixin({
		totalSeconds: { get: function () { return this.totalMilliseconds / 1000; }, init: true },
		totalMinutes: { get: function () { return this.totalSeconds / 60; }, init: true },
		totalHours: { get: function () { return this.totalMinutes / 60; }, init: true },
		totalDays: { get: function () { return this.totalHours / 24; }, init: true },
		milliseconds: { get: function () { return Math.floor(this.totalMilliseconds % 1000); }, init: true },
		seconds: { get: function () { return Math.floor(this.totalSeconds % 60); }, init: true },
		minutes: { get: function () { return Math.floor(this.totalMinutes % 60); }, init: true },
		hours: { get: function () { return Math.floor(this.totalHours % 24); }, init: true },
		days: { get: function () { return Math.floor(this.totalDays); }, init: true },
		toObject: function() {
			return {
				Hours: this.hours,
				Minutes: this.minutes,
				Seconds: this.seconds,
				Milliseconds: this.milliseconds,
				Ticks: this.totalMilliseconds * 1000000 / 100,
				Days: this.days,
				TotalDays: this.totalDays,
				TotalHours: this.totalHours,
				TotalMilliseconds: this.totalMilliseconds,
				TotalMinutes: this.totalMinutes,
				TotalSeconds: this.totalSeconds
			};
		},
		valueOf: function() {
			return this.totalMilliseconds;
		},
		toString: function TimeSpan$toString() { 
			var num;
			var label;

			if (this.totalHours < 1) {
				num = Math.round(this.totalMinutes);
				label = "minute";
			}
			else if (this.totalDays < 1) {
				num = Math.round(this.totalHours * 100) / 100;
				label = "hour";
			}
			else {
				num = Math.round(this.totalDays * 100) / 100;
				label = "day";
			}

			return num == 1 ? (num + " " + label) : (num + " " + label + "s");
		}
	});

	window.TimeSpan = TimeSpan;

	Date.mixin({
		subtract: function Date$subtract(d) {
			return new TimeSpan(this - d);
		},
		add: function Date$add(timeSpan) {
			return new Date(this.getTime() + timeSpan.totalMilliseconds);
		}
	});

	// #endregion

	// #region ExoWeb.Date
	//////////////////////////////////////////////////

	var dayOfWeek = {};
	var days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
	days.forEach(function(day, i) {
		dayOfWeek[day] = i;
	});

	Date.prototype.toDate = function toDate() {
		return new Date(this.getFullYear(), this.getMonth(), this.getDate());
	};

	Date.prototype.addYears = function addYears(numYears) {
		return new Date(this.getFullYear() + numYears, this.getMonth(), this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
	};

	Date.prototype.addDays = function addDays(numDays, requireWeekDay) {
		var date = new Date(this.getFullYear(), this.getMonth(), this.getDate() + numDays, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());

		// If requireWeekDay is true and the day falls on a Saturday or Sunday, then
		// the the result will be moved back to the preceeding friday (when subtracting days)
		// or forward to the next monday (when adding days).
		if (requireWeekDay === true) {
			// Sunday
			if (date.getDay() === 0) {
				date.setDate(date.getDate() + (numDays >= 0 ? 1 : -2));
			}
			// Saturday 
			else if (date.getDay() === 6) {
				date.setDate(date.getDate() + (numDays >= 0 ? 2 : -1));
			}
		}

		return date;
	};

	var oneHourInMilliseconds = 1000 * 60 * 60;

	Date.prototype.addHours = function addHours(numHours) {
		return new Date(+this + (oneHourInMilliseconds * numHours));
	};

	function getDayOfWeek(day) {
		if (day !== undefined && day !== null && day.constructor === String)
			day = days.indexOf(day.toLowerCase());
		else if (day !== undefined && day !== null && day.constructor !== Number)
			day = null;

		return day >= 0 && day < days.length ? day : null;
	}

	Date.prototype.startOfWeek = function(startOfWeekDay) {
		var startOfWeek = getDayOfWeek(startOfWeekDay) || dayOfWeek.monday; // monday by default
		return this.addDays(startOfWeek - this.getDay());
	};

	Date.prototype.weekOfYear = function(startOfWeekDay) {
		var startOfWeek = getDayOfWeek(startOfWeekDay) || dayOfWeek.monday; // monday by default

		if (this.startOfWeek(startOfWeek).getYear() < this.getYear()) {
			return 0;
		}

		var firstDayOfYear = new Date(this.getFullYear(), 0, 1);
		var firstWeek = firstDayOfYear.startOfWeek(startOfWeek);
		if (firstWeek.getFullYear() < firstDayOfYear.getFullYear()) {
			firstWeek = firstWeek.addDays(7);
		}

		var weeks = 0;
		var target = this.toDate();
		for (var day = firstWeek; day <= target; day = day.addDays(7)) {
			weeks++;
		}

		return weeks;
	};

	Date.prototype.weekDifference = function (other, startOfWeek) {
		var isNegative = other <= this;
		var a = this, b = other;

		if (isNegative)
		{
			a = other;
			b = this;
		}

		var aWeek = a.weekOfYear(startOfWeek);
		var bWeek = b.weekOfYear(startOfWeek);

		for (var i = a.getFullYear(); i < b.getFullYear(); i++)
			bWeek += (new Date(i, 11, 31)).weekOfYear(startOfWeek);

		return isNegative ? aWeek - bWeek : bWeek - aWeek;
	};

	// #endregion

	// #region ExoWeb.Object
	//////////////////////////////////////////////////

	// original code grabbed from http://oranlooney.com/functional-javascript/
	Object.copy = function Object$Copy(obj, options/*, level*/) {
		if (!options) {
			options = {};
		}

		// initialize max level to default value
		if (!options.maxLevel) {
			options.maxLevel = 25;
		}

		// initialize level to default value
		var level = arguments.length > 2 ? arguments[2] : 0;

		if (level >= options.maxLevel || typeof obj !== 'object' || obj === null || obj === undefined) {
			return obj;  // non-object have value sematics, so obj is already a copy.
		}
		else {
			if (obj instanceof Array) {
				var result = [];
				for (var i = 0; i < obj.length; i++) {
					result.push(Object.copy(obj[i]));
				}
				return result;
			}
			else {
				var value = obj.valueOf();
				if (obj != value) {
					// the object is a standard object wrapper for a native type, say String.
					// we can make a copy by instantiating a new object around the value.
					return new obj.constructor(value);
				} else {
					// don't clone entities
					if (typeof(Entity) !== "undefined" && obj instanceof Entity) {
						return obj;
					}
					else {
						// ok, we have a normal object. copy the whole thing, property-by-property.
						var c = {};
						for (var property in obj) {
							// Optionally copy property values as well
							if (options.copyChildren) {
								c[property] = Object.copy(obj[property], options, level + 1);
							}
							else {
								c[property] = obj[property];
							}

						}
						return c;
					}
				}
			}
		}
	};

	// Based on https://vanillajstoolkit.com/polyfills/objectassign/
	function assign(target, varArgs) {
		if (target == null) { // TypeError if undefined or null
			throw new TypeError('Cannot convert undefined or null to object');
		}

		var to = Object(target);

		for (var index = 1; index < arguments.length; index++) {
			var nextSource = arguments[index];

			if (nextSource != null) { // Skip over if undefined or null
				for (var nextKey in nextSource) {
					// Avoid bugs when hasOwnProperty is shadowed
					if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
						to[nextKey] = nextSource[nextKey];
					}
				}
			}
		}
		return to;
	}

	// Based on https://vanillajstoolkit.com/polyfills/objectentries/
	function entries(obj) {
		var ownProps = Object.keys(obj),
			i = ownProps.length,
			resArray = new Array(i); // preallocate the Array

		while (i--)
			resArray[i] = [ownProps[i], obj[ownProps[i]]];

		return resArray;
	}

	if (!Object.assign)
		Object.assign = assign;
	if (!Object.entries)
		Object.entries = entries;

	// #endregion

	// #region ExoWeb.Observer
	//////////////////////////////////////////////////

	var Observer = { };

	Observer.addPathChanged = function Observer$addPathChanged(target, path, handler, allowNoTarget) {
		// Throw an error if the target is null or undefined, unless the calling code specifies that this is ok
		if (target == null) {
			if (allowNoTarget === true) return;
			else throw new ArgumentNullError("target", "'allowNoTarget' is false - path = \"" + (path instanceof Array ? path.join(".") : path) + "\"");
		}

		// Ensure a set of path change handlers
		if (!target.__pathChangeHandlers) {
			target.__pathChangeHandlers = {};
		}

		var list = path;
		if (path instanceof Array) {
			path = path.join(".");
		}
		else {
			list = path.split(".");
		}

		var roots = [];

		function processStep(parent, item, index) {
			var observers = [];

			function addObserver(value) {
				var obs = new PropertyObserver(item);

				observers.push(obs);
				if (index === 0) {
					roots.push(obs);
				}

				obs.start(value, handler);

				// Continue to next steps if there are any
				if (index + 1 < list.length) {
					processStep(obs, list[index + 1], index + 1);
				}
			}

			function removeObserver(value) {
				for (var i = 0; i < observers.length; i++) {
					var obs = observers[i];
					if (obs._source === value) {
						Array.removeAt(observers, i--);
						if (index === 0) {
							Array.remove(roots, obs);
						}

						obs.stop();
					}
				}
			}

			// If there is a step before this one, then respond to 
			// changes to the value(s) at that step.
			if (parent) {
				parent._addEvent("valueCaptured", addObserver);
				parent._addEvent("valueReleased", removeObserver);
			}

			var source = index === 0 ? target : parent.value();
			if (source !== undefined && source !== null) {
				if (source instanceof Array) {
					Array.forEach(source, addObserver);

					// Watch for changes to the target if it is an array, so that we can
					// add new observers, remove old ones, and call the handler.
					if (index === 0) {
						Observer.addCollectionChanged(source, function(sender, args) {
							var changes = args.get_changes();

							Array.forEach(changes.removed || [], removeObserver);
							Array.forEach(changes.added || [], addObserver);
							handler();
						});
					}
				}
				else {
					addObserver(source);
				}
			}
		}

		// Start processing the path
		processStep(null, list[0], 0);

		// Store the observer on the object
		var pathChangeHandlers = target.__pathChangeHandlers[path];
		if (!pathChangeHandlers) {
			target.__pathChangeHandlers[path] = pathChangeHandlers = [];
		}
		pathChangeHandlers.push({ roots: roots, handler: handler });
	};

	Observer.removePathChanged = function Sys$Observer$removePathChanged(target, path, handler) {
		path = (path instanceof Array) ? path.join(".") : path;

		var pathChangeHandlers = target.__pathChangeHandlers ? target.__pathChangeHandlers[path] : null;

		if (pathChangeHandlers) {
			// Search the list for handlers that match the given handler and stop and remove them
			pathChangeHandlers.purge(function(pathChangeHandler) {
				if (pathChangeHandler.handler === handler) {
					Array.forEach(pathChangeHandler.roots, function(observer) {
						observer.stop();
					});
					return true;
				}
			});

			// If there are no more handlers for this path then remove it from the cache
			if (pathChangeHandlers.length === 0) {
				// delete the data specific to this path
				delete target.__pathChangeHandlers[path];

				// determine if there are any other paths being watched
				var hasHandlers = false;
				for (var remainingHandler in target.__pathChangeHandlers) {
					if (target.__pathChangeHandlers.hasOwnProperty(remainingHandler)) {
						hasHandlers = true;
					}
				}

				// null out the property of the target if there are no longer any paths being watched
				if (!hasHandlers) {
					target.__pathChangeHandlers = null;
				}
			}
		}
	};

	var observableInterface = {
		makeObservable: function (target) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		disposeObservable: function (target) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		addCollectionChanged: function (target, handler) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		removeCollectionChanged: function (target, handler) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		addPropertyChanged: function (target, property, handler) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		removePropertyChanged: function (target, property, handler) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		raisePropertyChanged: function (target, property) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		},
		setValue: function (target, property, value) {
			throw new Error("Observable provider has not been implemented.  Call ExoWeb.Model.setObservableProvider().");
		}
	};

	// sets the observer provider to use, verifying that it matches the defined interface.
	function setObserverProvider(provider) {
		for (var method in observableInterface) {
			var definition = provider[method];
			if (!(definition instanceof Function)) {
				throw new Error("Observable provider does not implement '" + method + "'.");
			}
			Observer[method] = definition;
		}
	}

	// expose publicly
	ExoWeb.Observer = Observer;

	// #endregion

	// #region ExoWeb.PropertyObserver
	//////////////////////////////////////////////////

	function PropertyObserver(prop) {
		this._source = null;
		this._prop = prop;
		this._handler = null;
	}

	PropertyObserver.mixin(Functor.eventing);

	PropertyObserver.mixin({
		value: function PropertyObserver$value() {
			return ExoWeb.getValue(this._source, this._prop);
		},
		release: function PropertyObserver$release(value) {
			// Notify subscribers that the old value should be released
			if (value instanceof Array) {
				Array.forEach(value, function(item) {
					this._raiseEvent("valueReleased", [item]);
				}, this);
			}
			else {
				this._raiseEvent("valueReleased", [value]);
			}
		},
		capture: function PropertyObserver$capture(value) {
			// Notify subscribers that a new value was captured
			if (value instanceof Array) {
				Array.forEach(value, function(item) {
					this._raiseEvent("valueCaptured", [item]);
				}, this);

				var _this = this;

				// Have to store the array since if the value changes we won't necessarily be able to retrieve the original array
				if (this._collectionTarget !== undefined && this._collectionTarget !== null) {
					Observer.removeCollectionChanged(this._collectionTarget, this._collectionHandler);
				}

				this._collectionTarget = value;

				this._collectionHandler = function collectionHandler(sender, args) {
					var changes = args.get_changes();

					// Call the actual handler
					_this._handler.apply(this, arguments);

					// remove old observers and add new observers
					Array.forEach(changes.removed || [], function(removed) {
						_this._raiseEvent("valueReleased", [removed]);
					});
					Array.forEach(changes.added || [], function(added) {
						_this._raiseEvent("valueCaptured", [added]);
					});
				};

				Observer.addCollectionChanged(this._collectionTarget, this._collectionHandler);
			}
			else {
				this._raiseEvent("valueCaptured", [value]);
			}
		},
		start: function PropertyObserver$start(source, handler) {
			if (this._source) {
				throw new Error("Cannot start an observer that is already started.");
			}

			var _this = this;

			this._source = source;
			this._handler = handler;

			var value = this.value();

			this._propHandler = function propHandler(sender, args) {
				// Call the actual handler.
				_this._handler.apply(this, arguments);

				// Release the old value
				if (value !== undefined && value !== null) {
					_this.release(value);
				}

				value = _this.value();

				// Release the old value
				if (value !== undefined && value !== null) {
					_this.capture(value);
				}
			};

			Observer.addPropertyChanged(this._source, this._prop, this._propHandler);

			// If we currently have a value, then notify subscribers
			if (value !== undefined && value !== null) {
				this.capture(value);
			}
		},
		stop: function PropertyObserver$stop() {
			if (this._source) {
				// Remove the registered event(s)
				Observer.removePropertyChanged(this._source, this._prop, this._propHandler);

				// Have to store the array since if the value changes we won't necessarily be able to retrieve the original array
				if (this._collectionTarget !== undefined && this._collectionTarget !== null) {
					Observer.removeCollectionChanged(this._collectionTarget, this._collectionHandler);
					this.release(this._collectionTarget);
				}
				else {
					var value = this.value();
					if (value !== undefined && value !== null) {
						this.release(value);
					}
				}

				// Null out the source to indicate that it is no longer watching that object
				this._source = null;
			}
		}
	});

	ExoWeb.PropertyObserver = PropertyObserver;

	// #endregion

	// #region ExoWeb.Model.Resource
	//////////////////////////////////////////////////

	var Resource = {
		"allowed-values":							"{property} is not in the list of allowed values.",
		"compare-after":							"{property} must be after {compareSource}.",
		"compare-before":							"{property} must be before {compareSource}.",
		"compare-equal":							"{property} must be the same as {compareSource}.",
		"compare-greater-than":						"{property} must be greater than {compareSource}.",
		"compare-greater-than-or-equal":			"{property} must be greater than or equal to {compareSource}.",
		"compare-less-than":						"{property} must be less than {compareSource}.",
		"compare-less-than-or-equal":				"{property} must be less than or equal to {compareSource}.",
		"compare-not-equal":						"{property} must be different from {compareSource}.",
		"compare-on-or-after":						"{property} must be on or after {compareSource}.",
		"compare-on-or-before":						"{property} must be on or before {compareSource}.",
		"listlength-at-least":						"Please specify at least {min} {property}.",
		"listlength-at-most":						"Please specify no more than {max} {property}.",
		"listlength-between":						"Please specify between {min} and {max} {property}.",
		"range-at-least":							"{property} must be at least {min}.",
		"range-at-most":							"{property} must be at most {max}.",
		"range-between":							"{property} must be between {min} and {max}.",
		"range-on-or-after":						"{property} must be on or after {min}.",
		"range-on-or-before":						"{property} must be on or before {max}.",
		"required":									"{property} is required.",
		"required-if-after":						"{property} is required when {compareSource} is after {compareValue}.",
		"required-if-before":						"{property} is required when {compareSource} is before {compareValue}.",
		"required-if-equal":						"{property} is required when {compareSource} is {compareValue}.",
		"required-if-exists":						"{property} is required when {compareSource} is specified.",
		"required-if-greater-than":					"{property} is required when {compareSource} is greater than {compareValue}.",
		"required-if-greater-than-or-equal":		"{property} is required when {compareSource} is greater than or equal to {compareValue}.",
		"required-if-less-than":					"{property} is required when {compareSource} is less than {compareValue}.",
		"required-if-less-than-or-equal":			"{property} is required when {compareSource} is less than or equal to {compareValue}.",
		"required-if-not-equal":					"{property} is required when {compareSource} is not {compareValue}.",
		"required-if-not-exists":					"{property} is required when {compareSource} is not specified.",
		"required-if-on-or-after":					"{property} is required when {compareSource} is on or after {compareValue}.",
		"required-if-on-or-before":					"{property} is required when {compareSource} is on or before {compareValue}.",
		"string-format":							"{property} must be formatted as {formatDescription}.",
		"string-length-at-least":					"{property} must be at least {min} characters.",
		"string-length-at-most":					"{property} must be at most {max} characters.",
		"string-length-between":                    "{property} must be between {min} and {max} characters.",
	    "format-with-description":                  "{property} must be formatted as {description}.",
		"format-without-description":               "{property} is not properly formatted.",
	    "format-currency":                          "$#,###.##",
	    "format-percentage":                        "#.##%",
	    "format-integer":                           "#,###",
	    "format-decimal":                           "#,###.##",

		// gets the resource with the specified name
		get: function Resource$get(name) {
			return this[name];
		}
	}

	// publicly export the resource object
	ExoWeb.Model.Resource = Resource;

	// #endregion

	// #region ExoWeb.Model.FormatCompiler
	//////////////////////////////////////////////////

	var formatTemplateParser = /\[([_a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][_.0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]*)(\:(.+?))?\]/ig;

	var metaPathParser = /^(.*\.|)meta(\..*|)$/;

	function createTemplateParser(template) {
	    var parse = function parseFormatTemplate() {
	        if (!this._tokens) {
	            this._tokens = [];

	            // Replace escaped \, [ or ] characters with placeholders
	            template = template.replace(/\\\\/g, '\u0000').replace(/\\\[/g, '\u0001').replace(/\\\]/g, '\u0002');
	            var index = 0;
	            formatTemplateParser.lastIndex = 0;
	            var match = formatTemplateParser.exec(template);

	            // Process each token match
	            while (match) {
	                var path = match[1];

	                // Create a token for the current match, including the prefix, path and format
	                this._tokens.push({
	                    prefix: template.substring(index, formatTemplateParser.lastIndex - match[0].length).replace(/\u0000/g, '\\').replace(/\u0001/g, '[').replace(/\u0002/g, ']'),
	                    path: path,
	                    format: match[3] ? match[3].replace(/\u0000/g, '\\').replace(/\u0001/g, '[').replace(/\u0002/g, ']') : null
	                });

	                // Track the last index and find the next match
	                index = formatTemplateParser.lastIndex;
	                match = formatTemplateParser.exec(template);
	            }

	            // Capture any trailing literal text as a token without a path
	            if (index < template.length) {
	                this._tokens.push({
	                    prefix: template.substring(index).replace(/\u0000/g, '\\').replace(/\u0001/g, '[').replace(/\u0002/g, ']')
	                });
	            }
	        }
	    };
	    return parse;
	}

	function createTemplateCompiler(type) {
		var logWarning = function logCompileFormatTemplateWarning(message) {
			if (typeof console !== "undefined") {
				if (console.warn && typeof console.warn === "function")
					console.warn(message);
				else if (console.log && typeof console.log === "function")
					console.log("WARN: " + message);
			}
		};

	    var compile = function compileFormatTemplate(callback, thisPtr) {
	        // First, ensure that the template is parsed
	        this._parse.call(this);

	        // Detect whether the template is being compiled in async mode
	        var isAsync = callback && callback instanceof Function;

	        // If the template is currently being compiled, then wait for it to complete
	        if (this._compileSignal && isAsync) {
	            this._compileSignal.waitForAll(callback, thisPtr);
	            return;
	        }

	        // If the template has already been compiled, then invoke the callback immediately
	        if (this._paths && isAsync) {
	            callback.call(thisPtr || this);
	            return;
	        }

	        if (!this._paths) {
	            if (isAsync) {
	                this._compileSignal = new Signal("compileFormatTemplate");
	            }

	            this._paths = [];

	            this._tokens.forEach(function (token) {
	                var path = token.path;
	                if (path) {
	                    var propertyPath = path;

	                    // See if the path represents a property path in the model
	                    try {
	                        // Detect property path followed by ".meta..."
	                        propertyPath = propertyPath.replace(metaPathParser, "$1");
	                        var isMetaPath = propertyPath.length > 0 && propertyPath.length < path.length;
	                        var allowFormat = !isMetaPath;
	                        if (isMetaPath) {
	                            propertyPath = propertyPath.substring(0, propertyPath.length - 1);
	                        }

	                        // If a property path remains, then attempt to find a default format and paths for the format
	                        if (propertyPath) {
	                            var processFormatProperty = function (property) {
									if (property) {
										// Only allow formats for a property path that is not followed by ".meta..."
										if (allowFormat) {
											// Determine the default property format
											var defaultFormat = property.get_format();

											// If the path references one or more entity properties, include paths for the property format. Otherwise, just add the path.
											var lastIndex = formatTemplateParser.lastIndex;
											if (defaultFormat && defaultFormat.constructor === Format && defaultFormat !== this && defaultFormat.getPaths().length > 0)
												this._paths.addRange(defaultFormat.getPaths().map(function (p) { return propertyPath + "." + p; }));
											else
												this._paths.push(propertyPath);
											formatTemplateParser.lastIndex = lastIndex;
											// Use the default format for the property
											if (!token.format) {
												token.format = defaultFormat;
											}
										}
										// Formats are not allowed, so just add the path
										else {
											this._paths.push(propertyPath);
										}
									} else {
										logWarning("Path '" + propertyPath + "' is not valid.");
									}
	                            };

								// Get the property and process it either immediately, or when the path is available (if compiling in async mode)
								if (isAsync) {
									Model.property(propertyPath, type, false, this._compileSignal.pending(processFormatProperty, this), this, false);
								} else {
									var property = Model.property(propertyPath, type);
									if (property) {
										processFormatProperty.call(this, property);
									} else {
										logWarning("Path '" + propertyPath + "' is not valid.");
									}
								}
	                        }
	                    }
						catch (e) {
							logWarning(e);
	                    }
	                }
	            }, this);

	            // If the format is being compiled async, then invoke the callback when complete
	            if (isAsync) {
	                this._compileSignal.waitForAll(function () {
	                    callback.call(thisPtr || this);
	                    delete this._compileSignal;
	                }, this);
	            }
	        }
	    };
	    return compile;
	}

	// #endregion

	// #region ExoWeb.Model.Format
	//////////////////////////////////////////////////

	function Format(options) {
		if (!options.hasOwnProperty("specifier") || !isString(options.specifier)) {
			throw new Error("Format specifier string must be provided.");
		}
		this._specifier = options.specifier;
		this._paths = options.paths;
		this._convert = options.convert;
		this._convertBack = options.convertBack;
		this._parse = options.parse;
		this._compile = options.compile;
		this._description = options.description;
		this._nullString = options.nullString || "";
		this._undefinedString = options.undefinedString || "";
		this._getFormattedValue = function (obj) {
			var result = "";
			for (var index = 0; index < this._tokens.length; index++) {
				var token = this._tokens[index];
				if (token.prefix)
					result = result + token.prefix;
				if (token.path) {
					var value = evalPath(obj, token.path);
					if (value === undefined || value === null)
						value = "";
					else if (token.format) {
						if (token.format.constructor === String) {
							token.format = getFormat(value.constructor, token.format);
						}

						if (value instanceof Array)
							value = value.map(function (v) { return token.format.convert(v); }).join(", ");
						else
							value = token.format.convert(value);

						if (this._formatEval)
							value = this._formatEval(value);
					}
					result = result + value;
				}
			}

			return result;
		};

		// function to perform additional post formatting
		this._formatEval = options.formatEval;
	}

	Format.fromTemplate = function Format$fromTemplate(type, template, formatEval) {

		return new Format({
			specifier: template,

			parse: createTemplateParser(template),

			compile: createTemplateCompiler(type),

			convert: function convert(obj) {
				if (obj === null || obj === undefined) {
					return "";
				}

				// Ensure the format has been compiled
				this._compile();

				var result = "";
				if (obj instanceof Array)
					for (var i = 0; i < obj.length; i++) {
						var value = this._getFormattedValue(obj[i]);

						if (result !== "" && value !== "")
							result = result + ", " + value;
						else
							result = result + value;
					}
				else
					result = this._getFormattedValue(obj);

				return result;
			},

			formatEval: formatEval
		});
	};

	Format.mixin({
		getTokens: function () {
			if (this._parse)
				this._parse();
			return this._tokens || [];
		},
		getPaths: function (callback, thisPtr) {
			if (this._compile) {
				if (callback && callback instanceof Function) {
					this._compile.call(this, function () {
						var paths = this._paths || [];
						callback.call(thisPtr || this, paths);
					}, this);
				} else {
					this._compile();
					return this._paths || [];
				}
			} else {
				return this._paths || [];
			}
		},
		convert: function (val) {
			if (val === undefined) {
				return this._undefinedString;
			}

			if (val === null) {
				return this._nullString;
			}

			if (val instanceof FormatError) {
				return val.get_invalidValue();
			}

			if (!this._convert) {
				return val;
			}

			return this._convert(val);
		},
		convertBack: function (val) {
			if (val === null || val == this._nullString) {
				return null;
			}

			if (val === undefined || val == this._undefinedString) {
				return;
			}

			if (val.constructor == String) {
				val = val.trim();

				if (val.length === 0) {
					return null;
				}
			}

			if (!this._convertBack) {
				return val;
			}

			try {
				return this._convertBack(val);
			}
			catch (err) {
				if (err instanceof FormatError) {
					return err;
				}
				else {
				    return new FormatError(this._description ? 
	                    Resource.get("format-with-description").replace('{description}', this._description) :
						Resource.get("format-without-description"),
								val);
				}
			}
		},
		toString: function() {
			return this._specifier;
		}	
	});

	Format.hasTokens = function hasTokens(template) {
		formatTemplateParser.lastIndex = 0;
		return formatTemplateParser.test(template);
	}

	ExoWeb.Model.Format = Format;

	// #endregion

	// #region ExoWeb.Model.Model
	//////////////////////////////////////////////////

	function Model() {
		this._types = {};
		this._ruleQueue = [];
	}

	Model.mixin(Functor.eventing);

	Model.mixin({
		dispose: function Model$dispose() {
			for (var key in this._types) {
				delete window[key];
			}
		},
		addType: function Model$addType(name, base, origin, format) {
			var type = new Type(this, name, base, origin, format);
			this._types[name] = type;
			return type;
		},
		type: function (name) {
			return this._types[name];
		},
		types: function (filter) {
			var result = [], typeName, type;
			for (typeName in this._types) {
				type = this._types[typeName];
				if (!filter || filter(type)) {
					result.push(type);
				}
			}
			return result;
		},
		addBeforeContextReady: function (handler) {
			// Only executes the given handler once, since the event should only fire once
			if (!this._contextReady) {
				this._addEvent("beforeContextReady", handler, null, true);
			}
			else {
				handler();
			}
		},

		// queues a rule to be registered
		registerRule: function Model$registerRule(rule) {
			if (!this._contextReady) {
				this._ruleQueue.push(rule);
			} else {
				rule.register();
			}
		},

		// register rules pending registration
		registerRules: function Model$registerRules() {
			var i, rules = this._ruleQueue;
			this._ruleQueue = [];
			for (i = 0; i < rules.length; i += 1) {
				rules[i].register();
			}
		},
		notifyBeforeContextReady: function () {
			this._contextReady = true;
			this.registerRules();
			this._raiseEvent("beforeContextReady", []);
		},
		addAfterPropertySet: function (handler) {
			this._addEvent("afterPropertySet", handler);
		},
		notifyAfterPropertySet: function (obj, property, newVal, oldVal) {
			this._raiseEvent("afterPropertySet", [obj, property, newVal, oldVal]);
		},
		addObjectRegistered: function (func, objectOrFunction, once) {
			this._addEvent("objectRegistered", func, objectOrFunction ? (objectOrFunction instanceof Function ? objectOrFunction : equals(objectOrFunction)) : null, once);
		},
		removeObjectRegistered: function (func) {
			this._removeEvent("objectRegistered", func);
		},
		notifyObjectRegistered: function (obj) {
			this._raiseEvent("objectRegistered", [obj]);
		},
		addObjectUnregistered: function (func) {
			this._addEvent("objectUnregistered", func);
		},
		notifyObjectUnregistered: function (obj) {
			this._raiseEvent("objectUnregistered", [obj]);
		},
		addListChanged: function (func) {
			this._addEvent("listChanged", func);
		},
		notifyListChanged: function (obj, property, changes) {
			this._raiseEvent("listChanged", [obj, property, changes]);
		},
		_ensureNamespace: function Model$_ensureNamespace(name, parentNamespace) {
			var result, nsTokens, target = parentNamespace;

			if (target.constructor === String) {
				nsTokens = target.split(".");
				target = window;
				Array.forEach(nsTokens, function (token) {
					target = target[token];

					if (target === undefined) {
						throw new Error("Parent namespace \"" + parentNamespace + "\" could not be found.");
					}
				});
			} else if (target === undefined || target === null) {
				target = window;
			}

			// create the namespace object if it doesn't exist, otherwise return the existing namespace
			if (!(name in target)) {
				result = target[name] = {};
				return result;
			} else {
				return target[name];
			}
		}
	});

	function ensureType(type, forceLoad, callback) {

		// immediately invoke the callback if no type was specified or the type is loaded
		if (!type || LazyLoader.isLoaded(type)) {
			return callback();
		}

		// force type loading if requested
		if (forceLoad) {
			LazyLoader.load(type, null, false, callback);
		}

		// otherwise, only continue processing when and if dependent types are loaded
		else {
			$extend(type._fullName, callback);
		}

		return null;
	}

	Model.property = function Model$property(path, thisType/*, forceLoadTypes, callback, thisPtr, waitForGlobals*/) {

		var type,
			loadProperty,
			singlePropertyName,
			tokens = null,
			forceLoadTypes = arguments.length >= 3 && typeof arguments[2] === "boolean" ? arguments[2] : false,
			callback = arguments[3],
			thisPtr = arguments[4],
			waitForGlobals = arguments.length >= 6 && typeof arguments[5] === "boolean" ? arguments[5] : true;

		// Allow the path argument to be either a string or PathTokens instance.
		if (path.constructor === PathTokens) {
			tokens = path;
			path = tokens.expression;
		}

		// Return cached property chains as soon as possible (in other words,
		// do as little as possible prior to returning the cached chain).
		if (thisType && thisType._chains && thisType._chains[path]) {
			if (callback) {
				callback.call(thisPtr || this, thisType._chains[path]);
				return null;
			} else {
				return thisType._chains[path];
			}
		}

		// The path argument was a string, so use it to create a PathTokens object.
		// Delay doing this as an optimization for cached property chains.
		if (!tokens) {
			tokens = new PathTokens(path);
		}

		// get the instance type, if specified
		type = thisType instanceof Function ? thisType.meta : thisType;

		// determine if a typecast was specified for the path to identify a specific subclass to use as the root type
		if (tokens.steps[0].property === "this" && tokens.steps[0].cast) {

			//Try and resolve cast to an actual type in the model
			type = Model.getJsType(tokens.steps[0].cast, false).meta;
			tokens.steps.dequeue();
		}

		// create a function to lazily load a property 
		loadProperty = function (containingType, propertyName, propertyCallback) {
			ensureType(containingType, forceLoadTypes, function () {
				propertyCallback.call(thisPtr || this, containingType.property(propertyName));
			});
		};

		// Optimize for a single property expression, as it is neither static nor a chain.
		if (tokens.steps.length === 1) {
			singlePropertyName = tokens.steps[0].property;
			if (callback) {
				loadProperty(type, singlePropertyName, callback);
			} else {
				var singleProperty = type.property(singlePropertyName);
				if (singleProperty) {
					return singleProperty;
				} else {
					throw new Error("Path '" + path + "' is not valid.");
				}
			}
		}

		// otherwise, first see if the path represents a property chain, and if not, a global property
		else {

			// predetermine the global type name and property name before seeing if the path is an instance path
			var globalTypeName = tokens.steps
				.slice(0, tokens.steps.length - 1)
				.map(function (item) { return item.property; })
				.join(".");

			var globalPropertyName = tokens.steps[tokens.steps.length - 1].property;

			// Copy of the Model.property arguments for async re-entry.
			var outerArgs = Array.prototype.slice.call(arguments);

			// create a function to see if the path is a global property if instance processing fails
			var processGlobal = function (instanceParseError) {

				// Retrieve the javascript type by name.
				type = Model.getJsType(globalTypeName, true);

				// Handle non-existant or non-loaded type.
				if (!type) {
					if (callback) {
						if (waitForGlobals) {
							// Retry when type is loaded
							$extend(globalTypeName, Model.property.prepare(Model, outerArgs));
							return null;
						} else {
							callback(null);
							return null;
						}
					} else {
						return null;
					}
				}

				// Get the corresponding meta type.
				type = type.meta;

				// return the static property
				if (callback) {
					loadProperty(type, globalPropertyName, callback);
				} else {
					return type.property(globalPropertyName);
				}
			};

			if (callback) {
				PropertyChain.create(type, tokens, forceLoadTypes, thisPtr ? callback.bind(thisPtr) : callback, processGlobal);
			} else {
				var result = PropertyChain.create(type, tokens, forceLoadTypes) || processGlobal();
				if (result) {
					return result;
				} else {
					throw new Error("Path '" + path + "' is not valid.");
				}
			}
		}
	};

	Model.intrinsicJsTypes = ["Object", "String", "Number", "Boolean", "Date", "TimeSpan", "Array"];
	Model.types = {};
	Model.getJsType = function Model$getJsType(name, allowUndefined) {
		/// <summary>
		/// Retrieves the JavaScript constructor function corresponding to the given full type name.
		/// </summary>
		/// <returns type="Object" />

		var obj = Model.types;
		var steps = name.split(".");
		if (steps.length === 1 && Model.intrinsicJsTypes.indexOf(name) > -1) {
			return window[name];
		}
		else {
			for (var i = 0; i < steps.length; i++) {
				var step = steps[i];
				obj = obj[step];
				if (obj === undefined) {
					if (allowUndefined) {
						return;
					}
					else {
						throw new Error($format("The type \"{0}\" could not be found.  Failed on step \"{1}\".", [name, step]));
					}
				}
			}
			return obj;
		}
	};

	ExoWeb.Model.Model = Model;

	// #endregion

	// #region ExoWeb.Model.Entity
	//////////////////////////////////////////////////

	function Entity() {
	}

	function forEachProperty(obj, callback, thisPtr) {
		for (var prop in obj) {
			callback.call(thisPtr || this, prop, obj[prop]);
		}
	}

	function getProperties(/*[properties] or [propName, propValue] */) {
		if (arguments.length === 2) {
			var properties = {};
			properties[arguments[0]] = arguments[1];
			return properties;
		}
		else {
			return arguments[0];
		}
	}

	Entity.mixin({
		init: function Entity$init(/*[properties] or [propName, propValue] */) {
			forEachProperty(getProperties.apply(this, arguments), function (name, value) {
				var prop = this.meta.type.property(name);

				if (!prop) {
					throw new Error("Could not find property \"" + name + "\" on type \"" + this.meta.type.get_fullName() + "\".");
				}

				// Initialization is not force.  If the propery already has a value it will be ignored.
				Property$_init.call(prop, this, value);
			}, this);
		},
		set: function Entity$set(/*[properties] or [propName, propValue] */) {
			forEachProperty(getProperties.apply(this, arguments), function (name, value) {
				var prop = this.meta.type.property(name);
				if (!prop) {
					throw new Error("Could not find property \"" + name + "\" on type \"" + this.meta.type.get_fullName() + "\".");
				}

				Property$_setter.call(prop, this, value, false);
			}, this);
		},
		get: function Entity$get(propName) {
			return this.meta.type.property(propName).value(this);
		},
		toString: function Entity$toString(format) {
			if (format) {
				format = getFormat(this.constructor, format);
			}
			else {
				format = this.meta.type.get_format();
			}

			if (format)
				return format.convert(this);
			else
				return Entity.toIdString(this);
		}
	});

	// Gets the typed string id suitable for roundtripping via fromIdString
	Entity.toIdString = function Entity$toIdString(obj) {
		return $format("{0}|{1}", [obj.meta.type.get_fullName(), obj.meta.id]);
	};

	// Gets or loads the entity with the specified typed string id
	Entity.fromIdString = function Entity$fromIdString(idString) {
		// Typed identifiers take the form "type|id".
	    var type = idString.substring(0, idString.indexOf("|"));
	    var id = idString.substring(type.length + 1);

		// Use the left-hand portion of the id string as the object's type.
		var jstype = ExoWeb.Model.Model.getJsType(type);

		// Retrieve the object with the given id.
		return jstype.meta.get(id,
			// Typed identifiers may or may not be the exact type of the instance.
			// An id string may be constructed with only knowledge of the base type.
			false
		);
	};

	ExoWeb.Model.Entity = Entity;

	// #endregion

	// #region ExoWeb.Model.Type
	//////////////////////////////////////////////////

	function Type(model, name, baseType, origin) {
		this._fullName = name;

		// if origin is not provided it is assumed to be client
		this._origin = origin || "client";
		this._originForNewProperties = this._origin;

		this._pool = {};
		this._legacyPool = {};
		this._counter = 0;
		this._properties = {}; 
		this._instanceProperties = {};
		this._staticProperties = {};
		this._pendingInit = [];
		this._pendingInvocation = [];

		// define properties
		Object.defineProperty(this, "model", { value: model });
		Object.defineProperty(this, "rules", { value: [] });

		// generate class and constructor
		var jstype = Model.getJsType(name, true);

		// create namespaces as needed
		var nameTokens = name.split("."),
			token = nameTokens.dequeue(),
			namespaceObj = Model.types,
			globalObj = window;

		while (nameTokens.length > 0) {
			namespaceObj = model._ensureNamespace(token, namespaceObj);
			globalObj = model._ensureNamespace(token, globalObj);
			token = nameTokens.dequeue();
		}

		// the final name to use is the last token
		var finalName = token;
		jstype = generateClass(this);

		this._jstype = jstype;

		// If the namespace already contains a type with this name, append a '$' to the name
		if (!namespaceObj[finalName]) {
			namespaceObj[finalName] = jstype;
		}
		else {
			namespaceObj['$' + finalName] = jstype;
		}

		// If the global object already contains a type with this name, append a '$' to the name
		if (!globalObj[finalName]) {
			globalObj[finalName] = jstype;
		}
		else {
			globalObj['$' + finalName] = jstype;
		}

		// setup inheritance
		this.derivedTypes = [];
		var baseJsType;

		if (baseType) {
			baseJsType = baseType._jstype;

			this.baseType = baseType;
			baseType.derivedTypes.push(this);
		
			// inherit all shortcut properties that have aleady been defined
			inheritBaseTypePropShortcuts(jstype, baseType);
		}
		else {
			baseJsType = Entity;
			this.baseType = null;
		}

		disableConstruction = true;
		this._jstype.prototype = new baseJsType();
		disableConstruction = false;

		this._jstype.prototype.constructor = this._jstype;

		// helpers
		jstype.meta = this;

		// Add self-reference to decrease the likelihood of errors
		// due to an absence of the necessary type vs. entity.
		this.type = this;
	}

	// copy shortcut properties from a base meta type (recursively) to a target jstype
	function inheritBaseTypePropShortcuts(jstype, baseType) {
		for (var propName in baseType._properties) {
			jstype["$" + propName] = baseType._properties[propName];
		}

		// recursively add base type properties
		if (baseType.baseType) {
			inheritBaseTypePropShortcuts(jstype, baseType.baseType);
		}
	}

	var disableConstruction = false;

	var validateId = function Type$validateId(type, id) {
		if (id === null || id === undefined) {
			throw new Error($format("Id cannot be {0} (entity = {1}).", id === null ? "null" : "undefined", type.get_fullName()));
		}
		else if (!ExoWeb.isString(id)) {
			throw new Error($format("Id must be a string:  encountered id {0} of type \"{1}\" (entity = {2}).",
				id.toString(), parseFunctionName(id.constructor), type.get_fullName()));
		}
		else if (id === "") {
			throw new Error($format("Id cannot be a blank string (entity = {0}).", type.get_fullName()));
		}
	};

	function generateClass(type) {
		function construct(idOrProps, props, suppressModelEvent) {
			if (!disableConstruction) {
				if (idOrProps && idOrProps.constructor === String) {
					var id = idOrProps;
					var obj = type.get(id,
						// When a constructor is called we do not want to silently
						// return an instance of a sub type, so fetch using exact type.
						true,
						// Indicate that an object is currently being constructed.
						true);

					// If the instance already exists, then initialize properties and return it.
					if (obj) {
						if (props) {
							obj.init(props);
						}
						return obj;
					}

					// Register the newly constructed existing instance.
					type.register(this, id, suppressModelEvent);

					// Initialize properties if provided.
					if (props) {
						this.init(props);
					}
				}
				else {
					// Register the newly constructed new instance. It will
					// be assigned a sequential client-generated id.
					type.register(this, null, suppressModelEvent);

					// Set properties passed into constructor.
					if (idOrProps) {
						this.set(idOrProps);
					}

					// Raise initNew event if registered.
					for (var t = type; t; t = t.baseType) {
						var handler = t._getEventHandler("initNew");
						if (handler) {
							handler(this, {});
						}
					}
				}
			}
		}

		return construct;
	}

	var newIdPrefix = "+c";

	Type.getNewIdPrefix = function getNewIdPrefix() {
		if (arguments.length > 0) throw new Error("The method getNewIdPrefix does not accept arguments");
		return newIdPrefix.substring(1);
	};

	Type.setNewIdPrefix = function setNewIdPrefix(prefix) {
		if (prefix === null || prefix === undefined) throw new Error("The new id prefix argument is required");
		if (typeof(prefix) !== "string") throw new TypeError("The new id prefix must be a string, found " + prefix.toString());
		if (prefix.length === 0) throw new Error("The new id prefix cannot be empty string");
		newIdPrefix = "+" + prefix;
	};

	Type.prototype = {
		// gets and optionally sets the pending initialization status for a static property on the type
		pendingInvocation: function Type$pendingInvocation(rule, value) {
			var indexOfRule = this._pendingInvocation.indexOf(rule);
			if (arguments.length > 1) {
				if (value && indexOfRule < 0) {
					this._pendingInvocation.push(rule);
				}
				else if (!value && indexOfRule >= 0) {
					this._pendingInvocation.splice(indexOfRule, 1);
				}
			}
			return indexOfRule >= 0;
		},

		addInitNew: function Type$addInitNew(handler, obj, once) {
			this._addEvent("initNew", handler, obj ? equals(obj) : null, once);
			return this;
		},

		// gets and optionally sets the pending initialization status for a static property on the type
		pendingInit: function Type$pendingInit(prop, value) {
			var result = this[prop._fieldName] === undefined || this._pendingInit[prop.get_name()] === true;
			if (arguments.length > 1) {
				if (value) {
					this._pendingInit[prop.get_name()] = true;
				}
				else {
					delete this._pendingInit[prop.get_name()];
				}
			}
			return result;
		},
		addInitExisting: function Type$addInitExisting(handler, obj, once) {
			this._addEvent("initExisting", handler, obj ? equals(obj) : null, once);
			return this;
		},
		newId: function Type$newId() {
			// Get the next id for this type's heirarchy.
			for (var nextId, type = this; type; type = type.baseType) {
				nextId = Math.max(nextId || 0, type._counter);
			}

			// Update the counter for each type in the heirarchy.
			for (var type = this; type; type = type.baseType) {
				type._counter = nextId + 1;
			}

			// Return the new id.
			return newIdPrefix + nextId;
		},
		register: function Type$register(obj, id, suppressModelEvent) {
			// register is called with single argument from default constructor
			if (arguments.length === 2) {
				validateId(this, id);
			}

			obj.meta = new ObjectMeta(this, obj);

			if (!id) {
				id = this.newId();
				obj.meta.isNew = true;
			}

			var key = id.toLowerCase();

			obj.meta.id = id;
			Observer.makeObservable(obj);

			for (var t = this; t; t = t.baseType) {
				if (t._pool.hasOwnProperty(key)) {
					throw new Error($format("Object \"{0}|{1}\" has already been registered.", this.get_fullName(), id));
				}

				t._pool[key] = obj;
				if (t._known) {
					t._known.add(obj);
				}
			}

			if (!suppressModelEvent) {
				this.model.notifyObjectRegistered(obj);
			}
		},
		changeObjectId: function Type$changeObjectId(oldId, newId) {
			validateId(this, oldId);
			validateId(this, newId);

			var oldKey = oldId.toLowerCase();
			var newKey = newId.toLowerCase();

			var obj = this._pool[oldKey];

			if (obj) {
				obj.meta.legacyId = oldId;

				for (var t = this; t; t = t.baseType) {
					t._pool[newKey] = obj;

					delete t._pool[oldKey];

					t._legacyPool[oldKey] = obj;
				}

				obj.meta.id = newId;

				return obj;
			}
			else {
				logWarning($format("Attempting to change id: Instance of type \"{0}\" with id = \"{1}\" could not be found.", this.get_fullName(), oldId));
			}
		},
		unregister: function Type$unregister(obj) {
			for (var t = this; t; t = t.baseType) {
				delete t._pool[obj.meta.id.toLowerCase()];

				if (obj.meta.legacyId) {
					delete t._legacyPool[obj.meta.legacyId.toLowerCase()];
				}

				if (t._known) {
					t._known.remove(obj);
				}
			}

			this.model.notifyObjectUnregistered(obj);
		},
		get: function Type$get(id, exactTypeOnly) {
			validateId(this, id);

			var key = id.toLowerCase();
			var obj = this._pool[key] || this._legacyPool[key];

			// If exactTypeOnly is specified, don't return sub-types.
			if (obj && exactTypeOnly === true && obj.meta.type !== this) {
				throw new Error($format("The entity with id='{0}' is expected to be of type '{1}' but found type '{2}'.", id, this._fullName, obj.meta.type._fullName));
			}

			return obj;
		},
		// Gets an array of all objects of this type that have been registered.
		// The returned array is observable and collection changed events will be raised
		// when new objects are registered or unregistered.
		// The array is in no particular order.
		known: function Type$known() {
			var list = this._known;
			if (!list) {
				list = this._known = [];

				for (var id in this._pool) {
					list.push(this._pool[id]);
				}

				Observer.makeObservable(list);
			}

			return list;
		},
		addPropertyAdded: function (handler) {
			this._addEvent("propertyAdded", handler);
		},
		addRule: function Type$addRule(def) {
			return new Rule(this, def);
		},
		addProperty: function Type$addProperty(def) {
			var format = def.format;
			if (format && format.constructor === String) {
				format = getFormat(def.type, format);
			}

			var prop = new Property(this, def.name, def.type, def.label, def.helptext, format, def.isList, def.isStatic, def.isPersisted, def.isCalculated, def.index, def.defaultValue, def.constant);

			this._properties[def.name] = prop;
			(def.isStatic ? this._staticProperties : this._instanceProperties)[def.name] = prop;

			// modify jstype to include functionality based on the type definition
			function genPropertyShortcut(mtype, overwrite) {
				var shortcutName = "$" + def.name;
				if (!(shortcutName in mtype._jstype) || overwrite) {
					mtype._jstype[shortcutName] = prop;
				}

				mtype.derivedTypes.forEach(function (t) {
					genPropertyShortcut(t, false);
				});
			}
			genPropertyShortcut(this, true);

			if (prop.get_isStatic()) {
				// for static properties add member to javascript type
				this._jstype["get_" + def.name] = this._makeGetter(prop, Property$_getter.bind(prop), true);
			}
			else {
				// for instance properties add member to all instances of this javascript type
				this._jstype.prototype["get_" + def.name] = this._makeGetter(prop, Property$_getter.bind(prop), true);
			}

			if (prop.get_isStatic()) {
				this._jstype["set_" + def.name] = this._makeSetter(prop);
			}
			else {
				this._jstype.prototype["set_" + def.name] = this._makeSetter(prop);
			}

			this._raiseEvent("propertyAdded", [this, { property: prop}]);

			return prop;
		},
		addMethod: function Type$addMethod(def) {
			var methodName = this.get_fullName() + "." + def.name;
			var method = function () {
				//signature: p1, p2, p#, paths, onSuccess, onFail

				// Detect the optional success and failure callback delegates
				var onSuccess;
				var onFail;
				var paths = null;

				if (arguments.length > 1) {
					onSuccess = arguments[arguments.length - 2];
					if (onSuccess instanceof Function) {
						onFail = arguments[arguments.length - 1];
					}
					else {
						onSuccess = arguments[arguments.length - 1];
					}
				}
				else if (arguments.length > 0)
					onSuccess = arguments[arguments.length - 1];

				if (!(onSuccess instanceof Function))
					onSuccess = undefined;

				var onSuccessFn = function (result) {
					if (onSuccess !== undefined) {
						onSuccess(result.event);
					}
				};

				var argCount = arguments.length - (onSuccess === undefined ? 0 : 1) - (onFail === undefined ? 0 : 1);
				var firstArgCouldBeParameterSet = argCount > 0 && arguments[0] instanceof Object && !(def.parameters.length === 0 || arguments[0][def.parameters[0]] === undefined);
				var instance = this instanceof Entity ? this : null;

				if (argCount >= 1 && argCount <= 2 && arguments[0] instanceof Object &&
						((argCount == 1 && (def.parameters.length != 1 || firstArgCouldBeParameterSet)) ||
						((argCount == 2 && (def.parameters.length != 2 || (firstArgCouldBeParameterSet && arguments[1] instanceof Array)))))) {

					// Invoke the server event
					context.server.raiseServerEvent(methodName, instance, arguments[0], false, onSuccessFn, onFail, argCount == 2 ? arguments[1] : null);
				}

				// Otherwise, assume that the parameters were all passed in sequential order
				else {
					// Throw an error if the incorrect number of arguments were passed to the method
					if (def.parameters.length == argCount - 1 && arguments[argCount - 1] instanceof Array)
						paths = arguments[argCount - 1];
					else if (def.parameters.length != argCount)
						throw new Error($format("Invalid number of arguments passed to \"{0}.{1}\" method.", this._fullName, def.name));

					if (def.isStatic && paths)
						throw new Error($format("Cannot include paths when invoking a static method - \"{0}.{1}\".", this.meta._fullName, def.name));

					// Construct the arguments to pass
					var args = {};
					for (var parameter in def.parameters) {
						if (def.parameters.hasOwnProperty(parameter)) {
							args[def.parameters[parameter]] = arguments[parameter];
						}
					}

					// Invoke the server event
					context.server.raiseServerEvent(methodName, instance, args, false, onSuccessFn, onFail, paths);
				}
			};

			// Assign the method to the type for static methods, otherwise assign it to the prototype for instance methods
			if (def.isStatic) {
				this._jstype[def.name] = method;
			}
			else {
				this._jstype.prototype[def.name] = method;
			}

		},	
		getPath: function(path) {
			// Get single property
			var property = this.property(path);
		
			// Create property chain
			if (!property) {
				property = PropertyChain.create(this, new ExoWeb.Model.PathTokens(path));
			}

			// Return the property path
			return property;
		},
		getPaths: function(path) {
			var start = 0;
			var paths = [];

			// Process the path
			if (/{|,|}/g.test(path)) {
				var stack = [];
				var parent;

				for (var i = 0, len = path.length; i < len; ++i) {
					var c = path.charAt(i);

					if (c === "{" || c === "," || c === "}") {
						var seg = path.substring(start, i).trim();
						start = i + 1;

						if (c === "{") {
							if (parent) {
								stack.push(parent);
								parent += "." + seg;
							}
							else {
								parent = seg;
							}
						}
						else { // ',' or '}'
							if (seg.length > 0) {
								paths.push(this.getPath(parent ? parent + "." + seg : seg));
							}

							if (c === "}") {
								parent = (stack.length === 0) ? undefined : stack.pop();
							}
						}
					}
				}

				if (stack.length > 0 || parent) {
					throw new Error("Unclosed '{' in path: " + path);
				}

				if (start < path.length) {
					var _seg = path.substring(start).trim();
					if (_seg.length > 0) {
						paths.push(this.getPath(_seg));
					}

					// Set start to past the end of the list to indicate that the entire string was processed
					start = path.length;
				}
			}

			// If the input is a simple property or path, then add the single property or chain
			if (start === 0) {
				paths.push(this.getPath(path.trim()));
			}

			return paths;
		},
		_makeGetter: function Type$_makeGetter(property, getter, skipTypeCheck) {
			return function () {
				// ensure the property is initialized
				var result = getter.call(property, this, skipTypeCheck);

				// ensure the property is initialized
				if (result === undefined || (property.get_isList() && LazyLoader.isRegistered(result))) {
					throw new Error($format(
						"Property {0}.{1} is not initialized.  Make sure instances are loaded before accessing property values.  {2}|{3}",
						property._containingType.get_fullName(),
						property.get_name(),
						this.meta.type.get_fullName(),
						this.meta.id
					));
				}

				// return the result
				return result;
			};
		},
		_makeSetter: function Type$_makeSetter(prop) {
			var setter = function (val) {
				Property$_setter.call(prop, this, val, true);
			};

			setter.__notifies = true;

			return setter;
		},
		get_format: function Type$get_format() {
			return this._format ? this._format : (this.baseType ? this.baseType.get_format() : undefined);
		},
		set_format: function Type$set_format(value) {
			if (value && value.constructor == String)
				value = getFormat(this.get_jstype(), value);
			this._format = value;
		},
		get_fullName: function Type$get_fullName() {
			return this._fullName;
		},
		get_jstype: function Type$get_jstype() {
			return this._jstype;
		},
		get_properties: function Type$get_properties() {
			return ExoWeb.objectToArray(this._properties);
		},
		get_allproperties: function Type$get_allproperties() {
			var temp = ExoWeb.objectToArray(this._properties);

			//go up the base types until there are no more
			var tempObj = this;
			while (tempObj.baseType) {
				tempObj = tempObj.baseType;
				temp = tempObj.get_properties().concat(temp);
			}

			return temp;
		},
		get_baseproperties: function Type$get_baseproperties() {
			var temp = new Array();

			//go up the base types until there are no more
			var tempObj = this;
			var alreadyBase = true;
			while (tempObj.baseType) {
				tempObj = tempObj.baseType;
				temp = tempObj.get_properties().concat(temp);
				alreadyBase = false;
			}

			if (alreadyBase)
				temp = tempObj.get_properties();

			return temp;
		},
		get_staticProperties: function Type$get_staticProperties() {
			return this._staticProperties;
		},
		get_instanceProperties: function Type$get_instanceProperties() {
			return this._instanceProperties;
		},
		property: function Type$property(name) {
			var prop;
			for (var t = this; t && !prop; t = t.baseType) {
				prop = t._properties[name];

				if (prop) {
					return prop;
				}
			}
			return null;
		},
		conditionIf: function (options) {
			new ExoWeb.Model.Rule.condition(this, options);
			return this;
		},
		set_originForNewProperties: function Type$set_originForNewProperties(value) {
			this._originForNewProperties = value;
		},
		get_originForNewProperties: function Type$get_originForNewProperties() {
			return this._originForNewProperties;
		},
		set_origin: function Type$set_origin(value) {
			this._origin = value;
		},
		get_origin: function Type$get_origin() {
			return this._origin;
		},
		compileExpression: function Type$compile(expression) {

			// use exports if required
			if (this._exports || ExoWeb.config.expressionScope) {
				expression = "return function() { return " + expression + "; }";
				var args;
				var values;

				// Include exported functions, if specified
				if (this._exports) {
					args = this._exports.names;
					values = this._exports.implementations;
				}

				// Include global expression scope variables, is specified
				if (ExoWeb.config.expressionScope) {
					if (!ExoWeb.config.expressionScope._names) {
						var scopeNames = [];
						var scopeValues = [];
						for(var key in ExoWeb.config.expressionScope){
							scopeNames.push(key);
							scopeValues.push(ExoWeb.config.expressionScope[key]);
						}
						ExoWeb.config.expressionScope._names = scopeNames;
						ExoWeb.config.expressionScope._values = scopeValues;
					}
					args = args ? args.concat(ExoWeb.config.expressionScope._names) : ExoWeb.config.expressionScope._names;
					values = values ? values.concat(ExoWeb.config.expressionScope._values) : ExoWeb.config.expressionScope._values;
				}

				// Compile the expression using the specified exported functions and global scope variables
				var compile = Function.apply(null, args.concat([expression]));
				return compile.apply(null, values);
			}

			// otherwise, just create the function based on the expression
			else {
				return new Function("return " + expression + ";");
			}
		},
		set_exports: function Type$set_exports(exports) {
			var names = [];
			var script = "return ["
			for (var name in exports) {
				names.push(name);
				script += exports[name] + ",";
			}
			if (script.length > 8) {
				script = script.slice(0, -1) + "];";
				this._exports = { names: names, implementations: new Function(script)() };
			}
		},
		// Adds a single export function to the type for use by calls to compileExpression().
		addExport: function Type$addExport(name, fn) {
			if (!this._exports) {
				this._exports = { names: [name], implementations: new Function("return [" + fn + "];")() };
			}
			else if (this._exports.names.indexOf(name) === -1) {
				this._exports.names.push(name);
				this._exports.implementations.push(new Function("return " + fn)());
			}
		
		},
		eachBaseType: function Type$eachBaseType(callback, thisPtr) {
			for (var baseType = this.baseType; !!baseType; baseType = baseType.baseType) {
				if (callback.call(thisPtr || this, baseType) === false) {
					return;
				}
			}
		},
		isSubclassOf: function Type$isSubclassOf(mtype) {
			var result = false;

			this.eachBaseType(function (baseType) {
				if (baseType === mtype) {
					result = true;
					return false;
				}
			});

			return result;
		},
		isLoaded: function (prop) {
			/// <summary locid="M:J#ExoWeb.Model.Type.isLoaded">
			/// Check whether the Type and optional property are loaded.
			/// </summary>
			/// <param name="prop" optional="true" mayBeNull="true" type="Object">The optional property object or property name to check.</param>

			// First see if there is a lazy loader attached to the entity (and optional property).
			if (LazyLoader.isRegistered(this, null, prop)) {
				return false;
			}

			// Immediately return true if a property name was not specified
			if (prop) {
				// Coerce property names into property instances
				if (isString(prop)) {
					prop = this.property(prop);
				}

				// Otherwise, get the property value and determine whether there is a
				// lazy loader attached to the property value, e.g. entity or list.
				var val = prop.value(this._jstype);
				if (val !== null && val !== undefined && LazyLoader.isRegistered(val)) {
					return false;
				}
			}

			return true;
		},
		toString: function Type$toString() {
			return this.get_fullName();
		},
		addConditionsChanged: function Type$addConditionsChanged(handler, criteria) {
			var filter;

			// condition type filter
			if (criteria instanceof ConditionType) {
				filter = function (sender, args) { return args.conditionTarget.condition.type === criteria; };
			}

				// property filter
			else if (criteria instanceof Property || criteria instanceof PropertyChain) {
				criteria = criteria.lastProperty();
				filter = function (sender, args) { return args.conditionTarget.properties.indexOf(criteria) >= 0; };
			}

			// subscribe to the event
			this._addEvent("conditionsChanged", handler, filter);

			// Return the type meta to support method chaining
			return this;
		},
		removeConditionsChanged: function Type$removeConditionsChanged(handler) {
			this._removeEvent("conditionsChanged", handler);
		}
	};

	Type.mixin(Functor.eventing);
	ExoWeb.Model.Type = Type;

	// #endregion

	// #region ExoWeb.Model.Property
	//////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////
	/// <remarks>
	/// If the interface for this class is changed it should also be changed in
	/// PropertyChain, since PropertyChain acts as an aggregation of properties 
	/// that can be treated as a single property.
	/// </remarks>
	///////////////////////////////////////////////////////////////////////////////
	function Property(containingType, name, jstype, label, helptext, format, isList, isStatic, isPersisted, isCalculated, index, defaultValue, constant) {
		this._containingType = containingType;
		this._name = name;
		this._fieldName = "_" + name;
		this._jstype = jstype;
		this._label = label || makeHumanReadable(name);
		this._helptext = helptext;
		this._format = format;
		this._isList = isList === true;
		this._isStatic = isStatic === true;
		this._isPersisted = isPersisted === true;
		this._isCalculated = isCalculated === true;
		this._index = index;
		this._defaultValue =
			defaultValue !== undefined ? defaultValue :
				isList ? [] :
					jstype === Boolean ? false :
						jstype === Number ? 0 :
							null;

		this._constant = null;
		if (constant !== null && constant !== undefined) {
			// constant value should be lazily initialized to ensure any type dependencies have been resolved
			if (isList && constant instanceof Array) {
				this._constant = function () {
					return constant.map(function (i) {
						return new jstype(i);
					});
				};
			}
			else if (!isList && typeof constant === "object") {
				this._constant = function () {
					new jstype(i);
				};
			}
		}

		this._rules = [];

		if (containingType.get_originForNewProperties()) {
			this._origin = containingType.get_originForNewProperties();
		}

		if (this._origin === "client" && this._isPersisted) {
			logWarning($format("Client-origin properties should not be marked as persisted: Type = {0}, Name = {1}", containingType.get_fullName(), name));
		}
	}

	// updates the property and message or conditionType options for property rules
	function preparePropertyRuleOptions(property, options, error) {
		options.property = property;
		if (error && error.constructor === String) {
			options.message = error;
		}
		else if (error instanceof ConditionType) {
			options.conditionType = error;
		}
		return options;
	}

	// updates the property and message or conditionType options for property rules
	function hasPropertyChangedSubscribers(property, obj) {
		var changedEvent = property._getEventHandler("changed");
		return changedEvent && !changedEvent.isEmpty([obj]);
	}

	// registers a rule with a specific property
	function registerPropertyRule(property, rule) {
		property._rules.push(rule);

		// Raise events if registered.
		var ruleRegisteredEvent = property._getEventHandler("ruleRegistered");
		if (ruleRegisteredEvent && !ruleRegisteredEvent.isEmpty()) {
			ruleRegisteredEvent(rule, { property: property });
		}
	}

	function Property$_init(obj, val, force) {
		var target = (this._isStatic ? this._containingType.get_jstype() : obj);
		var curVal = target[this._fieldName];

		if (curVal !== undefined && !(force === undefined || force)) {
			return;
		}

		target[this._fieldName] = val;

		target.meta.pendingInit(this, false);

		if (val instanceof Array) {
			var _this = this;
			Observer.makeObservable(val);
			Observer.addCollectionChanged(val, function Property$collectionChanged(sender, args) {
				var changes = args.get_changes();

				// Don't raise the change event unless there is actually a change to the collection
				if (changes && changes.some(function (change) { return (change.newItems && change.newItems.length > 0) || (change.oldItems && change.oldItems.length > 0); })) {
					// NOTE: property change should be broadcast before rules are run so that if 
					// any rule causes a roundtrip to the server these changes will be available
					_this._containingType.model.notifyListChanged(target, _this, changes);

					// NOTE: oldValue is not currently implemented for lists
					_this._raiseEvent("changed", [target, { property: _this, newValue: val, oldValue: undefined, changes: changes, collectionChanged: true }]);

					Observer.raisePropertyChanged(target, _this._name);
				}
			});

			// Override the default toString on arrays so that we get a comma-delimited list
			val.toString = Property$_arrayToString.bind(val);
		}

		Observer.raisePropertyChanged(target, this._name);

		// Return the property to support method chaining
		return this;
	}

	function Property$_arrayToString() {
		return this.join(", ");
	}

	function Property$_ensureInited(obj) {
		// Determine if the property has been initialized with a value
		// and initialize the property if necessary
		if (!obj.hasOwnProperty(this._fieldName)) {

			// Do not initialize calculated properties. Calculated properties should be initialized using a property get rule.  
			if (!this.get_isCalculated()) {
				var value = this.get_constant() !== null ? this.get_constant() : this.get_defaultValue();
				Property$_init.call(this, obj, value);
			}

			// Mark the property as pending initialization
			obj.meta.pendingInit(this, true);
		}
	}

	function Property$_getter(obj) {
		// Ensure the entity is loaded before accessing property values
		if (LazyLoader.isRegistered(obj)) {
			return;
		}

		// Ensure that the property has an initial (possibly default) value
		Property$_ensureInited.call(this, obj);

		// Raise get events
		// NOTE: get events may result in a change, so the value cannot be cached
		var getEvent = this._getEventHandler("get");
		if (getEvent && !getEvent.isEmpty()) {
			getEvent(obj, { property: this, value: obj[this._fieldName] });
		}

		// Return the property value
		return obj[this._fieldName];
	}

	function Property$_setter(obj, val, skipTypeCheck, additionalArgs) {
		// Ensure the entity is loaded before setting property values
		if (LazyLoader.isRegistered(obj)) {
			throw new Error("Cannot set " + this.get_name() + "=" + (val === undefined ? "<undefined>" : val) + " for instance " + obj.meta.type.get_fullName() + "|" + obj.meta.id + ": object is ghosted.");
		}

		// Ensure that the property has an initial (possibly default) value
		Property$_ensureInited.call(this, obj);

		if (!this.canSetValue(obj, val)) {
			throw new Error("Cannot set " + this.get_name() + "=" + (val === undefined ? "<undefined>" : val) + " for instance " + obj.meta.type.get_fullName() + "|" + obj.meta.id + ": a value of type " + (this._jstype && this._jstype.meta ? this._jstype.meta.get_fullName() : parseFunctionName(this._jstype)) + " was expected.");
		}

		var old = obj[this._fieldName];

		// Update lists as batch remove/add operations
		if (this.get_isList()) {
			old.beginUpdate();
			update(old, val);
			old.endUpdate();
		}
		else {

			// compare values so that this check is accurate for primitives
			var oldValue = (old === undefined || old === null) ? old : old.valueOf();
			var newValue = (val === undefined || val === null) ? val : val.valueOf();

			// Do nothing if the new value is the same as the old value. Account for NaN numbers, which are
			// not equivalent (even to themselves). Although isNaN returns true for non-Number values, we won't
			// get this far for Number properties unless the value is actually of type Number (a number or NaN).
			if (oldValue !== newValue && !(this._jstype === Number && isNaN(oldValue) && isNaN(newValue))) {
				// Set the backing field value
				obj[this._fieldName] = val;

				obj.meta.pendingInit(this, false);

				// Do not raise change if the property has not been initialized. 
				if (old !== undefined) {
					this.raiseChanged(obj, val, old, additionalArgs);
				}
			}
		}
	}

	Property.mixin({

		defaultValue: function Property$defaultValue(value) {
			this._defaultValue = value;
			return this;
		},

		equals: function Property$equals(prop) {
			if (prop !== undefined && prop !== null) {
				if (prop instanceof Property) {
					return this === prop;
				}
				else if (prop instanceof PropertyChain) {
					var props = prop.all();
					return props.length === 1 && this.equals(props[0]);
				}
			}
		},

		raiseChanged: function (obj, val, old, additionalArgs) {
			// NOTE: property change should be broadcast before rules are run so that if 
			// any rule causes a roundtrip to the server these changes will be available
			this._containingType.model.notifyAfterPropertySet(obj, this, val, old);

			var changedEvent = this._getEventHandler("changed");
			if (changedEvent && !changedEvent.isEmpty()) {
				// Create the event argument object
				var args = { property: this, newValue: val, oldValue: old };

				// Assign custom event argument values
				if (additionalArgs) {
					for (var p in additionalArgs) {
						if (additionalArgs.hasOwnProperty(p)) {
							args[p] = additionalArgs[p];
						}
					}
				}

				changedEvent(obj, args);
			}

			Observer.raisePropertyChanged(obj, this._name);
		},

		rule: function (type) {
			if (type == null) throw new ArgumentNullError("type");
			if (typeof (type) !== "function") throw new ArgumentTypeError("type", "function", type);

			return first(this._rules, function (rule) {
				if (rule instanceof type) {
					return true;
				}
			});
		},
		rules: function (filter) {
			return filter && filter instanceof Function ? this._rules.filter(filter) : this._rules.slice();
		},
		addRuleRegistered: function Property$addRuleRegistered(handler, obj, once) {
			this._addEvent("ruleRegistered", handler, obj ? equals(obj) : null, once);
			return this;
		},
		removeRuleRegistered: function Property$removeRuleRegistered(handler, obj, once) {
			this._removeEvent("ruleRegistered", handler);
			return this;
		},

		toString: function Property$toString() {
			if (this._isStatic) {
				return this.get_path();
			}
			else {
				return $format("this<{0}>.{1}", [this.get_containingType(), this.get_name()]);
			}
		},

		get_containingType: function Property$get_containingType() {
			return this._containingType;
		},
		isDefinedBy: function Property$isDefinedBy(mtype) {
			return this._containingType === mtype || mtype.isSubclassOf(this._containingType);
		},

		get_jstype: function Property$get_jstype() {
			return this._jstype;
		},

		get_index: function Property$get_index() {
			return this._index;
		},

		get_format: function Property$get_format() {
			if (!this._format) {
				if (this._jstype.meta instanceof ExoWeb.Model.Type)
					this._format = this._jstype.meta.get_format(); // Default to type-level formats for entity types
				else
					this._format = getFormat(this._jstype, "G"); // Default to general format for non-entity type
			}
			return this._format;
		},
		set_format: function Property$set_format(value) {
			this._format = getFormat(this._jstype, value);
		},
		format: function (val) {
			return this.get_format() ? this.get_format().convert(val) : val;
		},

		get_defaultValue: function Property$get_defaultValue() {
			// clone array and date defaults since they are mutable javascript types
			return this._defaultValue instanceof Array ? this._defaultValue.slice() :
				this._defaultValue instanceof Date ? new Date(+this._defaultValue) :
					this._defaultValue instanceof TimeSpan ? new TimeSpan(this._defaultValue.totalMilliseconds) :
						this._defaultValue instanceof Function ? this._defaultValue() :
							this._defaultValue;
		},

		get_origin: function Property$get_origin() {
			return this._origin ? this._origin : this._containingType.get_origin();
		},

		get_isEntityType: function Property$get_isEntityType() {
			if (!this.get_jstype().meta) {
				return false;
			}
			return !this._isList;
		},

		get_isEntityListType: function Property$get_isEntityListType() {
			if (!this.get_jstype().meta) {
				return false;
			}
			return this._isList;
		},

		get_isValueType: function Property$get_isValueType() {
			return !this.get_jstype().meta;
		},

		get_isList: function Property$get_isList() {
			return this._isList;
		},

		get_isStatic: function Property$get_isStatic() {
			return this._isStatic;
		},

		get_constant: function Property$get_constant() {
			// initialize and cache the constant value if we have not already
			if (typeof this._constant === "function")
				this._constant = this._constant();
			return this._constant;
		},

		get_isPersisted: function Property$get_isPersisted() {
			return this._isPersisted;
		},

		get_isCalculated: function Property$get_isCalculated() {
			return this._isCalculated;
		},

		get_label: function Property$get_label() {
			return this._label;
		},

		get_helptext: function Property$get_helptext() {
			return this._helptext;
		},

		get_name: function Property$get_name() {
			return this._name;
		},

		get_fieldName: function Property$get_fieldName() {
			return this._fieldName;
		},

		get_path: function Property$get_path() {
			return this._isStatic ? (this._containingType.get_fullName() + "." + this._name) : this._name;
		},

		canSetValue: function Property$canSetValue(obj, val) {
			// NOTE: only allow values of the correct data type to be set in the model

			if (val === undefined) {
				logWarning("You should not set property values to undefined, use null instead: property = ." + this._name + ".");
				return true;
			}

			if (val === null) {
				return true;
			}

			// for entities check base types as well
			if (val.constructor && val.constructor.meta) {
				for (var valType = val.constructor.meta; valType; valType = valType.baseType) {
					if (valType._jstype === this._jstype) {
						return true;
					}
				}

				return false;
			}

			//Data types
			else {
				var valObjectType = val.constructor;

				//"Normalize" data type in case it came from another frame as well as ensure that the types are the same
				switch (type(val)) {
					case "string":
						valObjectType = String;
						break;
					case "number":
						valObjectType = Number;
						break;
					case "boolean":
						valObjectType = Boolean;
						break;
					case "date":
						valObjectType = Date;
						break;
					case "array":
						valObjectType = Array;
						break;
				}

				// value property type check
				return valObjectType === this._jstype ||

					// entity array type check
					(valObjectType === Array && this.get_isList() && val.every(function (child) {
						if (child.constructor && child.constructor.meta) {
							for (var childType = child.constructor.meta; childType; childType = childType.baseType) {
								if (childType._jstype === this._jstype) {
									return true;
								}
							}
						}
						return child.constructor === this._jstype;
					}, this));
			}
		},

		value: function Property$value(obj, val, args) {
			var target = (this._isStatic ? this._containingType.get_jstype() : obj);

			if (target === undefined || target === null) {
				throw new Error($format(
					"Cannot {0} value for {1}static property \"{2}\" on type \"{3}\": target is null or undefined.",
					(arguments.length > 1 ? "set" : "get"), (this._isStatic ? "" : "non-"), this.get_path(), this._containingType.get_fullName()));
			}

			if (arguments.length > 1) {
				Property$_setter.call(this, target, val, false, args);
			}
			else {
				return Property$_getter.call(this, target);
			}
		},

		isInited: function Property$isInited(obj) {
			var target = (this._isStatic ? this._containingType.get_jstype() : obj);
			if (!target.hasOwnProperty(this._fieldName)) {
				// If the backing field has not been created, then property is not initialized
				return false;
			}
			if (this._isList) {
				var value = target[this._fieldName];
				if (value === undefined || !LazyLoader.isLoaded(value)) {
					// If the list is not-loaded, then the property is not initialized
					return false;
				}
			}
			return true;
		},

		// starts listening for get events on the property. Use obj argument to
		// optionally filter the events to a specific object
		addGet: function Property$addGet(handler, obj, once) {
			this._addEvent("get", handler, obj ? equals(obj) : null, once);

			// Return the property to support method chaining
			return this;
		},
		removeGet: function Property$removeGet(handler) {
			this._removeEvent("get", handler);
		},

		// starts listening for change events on the property. Use obj argument to
		// optionally filter the events to a specific object
		addChanged: function Property$addChanged(handler, obj, once) {
			this._addEvent("changed", handler, obj ? equals(obj) : null, once);

			// Return the property to support method chaining
			return this;
		},
		removeChanged: function Property$removeChanged(handler) {
			this._removeEvent("changed", handler);
		},

		firstProperty: function Property$firstProperty() {
			return this;
		},
		lastProperty: function Property$lastProperty() {
			return this;
		},
		properties: function Property$properties() {
			return [this];
		},

		lastTarget: function Property$lastTarget(obj) {
			return obj;
		},

		ifExists: function (path) {
			Model.property(path, this._containingType, true, function (chain) {
				this.calculated({
					basedOn: [path],
					fn: function () {
						return !isNullOrUndefined(chain.value(this));
					}
				});
			}, this);

			return this;
		},

		alias: function (path, eventName) {
			Model.property(path, this._containingType, true, function (chain) {
				this.calculated({
					basedOn: [(eventName ? eventName + " of " : "") + path],
					fn: function () {
						return chain.value(this);
					}
				});
			}, this);

			return this;
		},

		rootedPath: function Property$rootedPath(type) {
			if (this.isDefinedBy(type)) {
				return this._isStatic ? this._containingType.get_fullName() + "." + this._name : this._name;
			}
		},

		label: function (label) {
			this._label = label;
			return this;
		},

		helptext: function (helptext) {
			this._helptext = helptext;
			return this;
		},

		// Adds a rule to the property that will update its value based on a calculation.
		calculated: function (options) {
			options.property = this;
			var definedType = options.rootType ? options.rootType.meta : this._containingType;
			delete options.rootType;

			new CalculatedPropertyRule(definedType, options);

			return this;
		},
		required: function (error) {
			var options = preparePropertyRuleOptions(this, {}, error);
			new ExoWeb.Model.Rule.required(this._containingType, options);
			return this;
		},
		allowedValues: function (source, error) {
			var options = preparePropertyRuleOptions(this, { source: source }, error);
			new ExoWeb.Model.Rule.allowedValues(this._containingType, options);
			return this;
		},
		optionValues: function (source, error) {
			var options = preparePropertyRuleOptions(this, { source: source, onInit: false, onInitNew: false, onInitExisting: false }, error);
			options.ignoreValidation = true;
			new ExoWeb.Model.Rule.allowedValues(this._containingType, options);
			return this;
		},
		compare: function (operator, source, error) {
			var options = preparePropertyRuleOptions(this, { compareOperator: operator, compareSource: source }, error);
			new ExoWeb.Model.Rule.compare(this._containingType, options);
			return this;
		},
		range: function (min, max, error) {
			var options = preparePropertyRuleOptions(this, { min: min, max: max }, error);
			new ExoWeb.Model.Rule.range(this._containingType, options);
			return this;
		},
		conditionIf: function (options, type) {
			var definedType = options.rootType ? options.rootType.meta : this._containingType;
			delete options.rootType;

			options = preparePropertyRuleOptions(this, options, type);
			new ExoWeb.Model.Rule.validated(definedType, options);
			return this;
		},
		errorIf: function (options, error) {
			return this.conditionIf(options, error);
		},
		warningIf: function (options, warning) {
			return this.conditionIf(jQuery.extend(options, { category: ConditionType.Warning }), warning);
		},
		requiredIf: function (source, operator, value, error) {
			if (source.constructor === String) {
				var options = preparePropertyRuleOptions(this, { compareSource: source, compareOperator: operator, compareValue: value }, error);
				new ExoWeb.Model.Rule.requiredIf(this._containingType, options);
			}
			else {
				var definedType = source.rootType ? source.rootType.meta : this._containingType;
				delete source.rootType;
				source = preparePropertyRuleOptions(this, source);

				new ExoWeb.Model.Rule.requiredIf(definedType, source);
			}
			return this;
		},
		stringLength: function (min, max, error) {
			var options = preparePropertyRuleOptions(this, { min: min, max: max }, error);
			new ExoWeb.Model.Rule.stringLength(this._containingType, options);
			return this;
		},
		stringFormat: function (description, expression, reformat, error) {
			var options = preparePropertyRuleOptions(this, { description: description, expression: expression, reformat: reformat }, error);
			new ExoWeb.Model.Rule.stringFormat(this._containingType, options);
			return this;
		},
		listLength: function (options, error) {
			var options = preparePropertyRuleOptions(this, { staticLength: options.staticLength, compareSource: options.compareSource, compareOperator: options.compareOperator }, error);
			new ExoWeb.Model.Rule.listLength(this._containingType, options);
			return this;
		}
	});
	Property.mixin(Functor.eventing);
	ExoWeb.Model.Property = Property;

	// #endregion

	// #region ExoWeb.Model.PathTokens
	//////////////////////////////////////////////////

	function PathTokens(expression) {
	
		// legacy: remove "this." prefix from instance properties
		if (expression.substr(0, 5) === "this.")
			expression = expression.substr(5);

		this.expression = expression;

		// replace "." in type casts so that they do not interfere with splitting path
		expression = expression.replace(/<[^>]*>/ig, function(e) { return e.replace(/\./ig, function() { return "$_$"; }); });

		if (expression.length > 0) {
			this.steps = expression.split(".").map(function (step) {
				// Regex pattern matches all letters and digits that are valid for javascript identifiers, including  "_"
				var parsed = step.match(/^([_0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]+)(<([_$0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc$]+)>)?$/i);

				if (!parsed) {
					return null;
				}

				var result = { property: parsed[1] };

				if (parsed[3]) {
					// restore "." in type case expression
					result.cast = parsed[3].replace(/\$_\$/ig, function() { return "."; });
				}

				return result;
			});
		}
		else {
			this.steps = [];
		}
	}

	PathTokens.normalizePaths = function PathTokens$normalizePaths(paths) {
		var result = [];

		if (paths) {
			paths.forEach(function (p) {

				// coerce property and property chains into string paths
				p = p instanceof Property ? p.get_name() :
					p instanceof PropertyChain ? p.get_path() :
					p;

				var stack = [];
				var parent;
				var start = 0;
				var pLen = p.length;

				for (var i = 0; i < pLen; ++i) {
					var c = p.charAt(i);

					if (c === '{' || c === ',' || c === '}') {
						var seg = p.substring(start, i).trim();
						start = i + 1;

						if (c === '{') {
							if (parent) {
								stack.push(parent);
								parent += "." + seg;
							}
							else {
								parent = seg;
							}
						}
						else {   // ',' or '}'
							if (seg.length > 0) {
								result.push(new PathTokens(parent ? parent + "." + seg : seg));
							}

							if (c === '}') {
								parent = (stack.length === 0) ? undefined : stack.pop();
							}
						}
					}
				}

				if (stack.length > 0) {
					throw new Error("Unclosed '{' in path: " + p);
				}

				if (start === 0) {
					result.push(new PathTokens(p.trim()));
				}
			});
		}
		return result;
	};

	PathTokens.mixin({
		buildExpression: function PathTokens$buildExpression() {
			var path = "";
			this.steps.forEach(function(step) {
				path += (path ? "." : "") + step.property + (step.cast ? "<" + step.cast + ">" : "");
			});
			return path;
		},
		toString: function PathTokens$toString() {
			return this.expression;
		}
	});

	ExoWeb.Model.PathTokens = PathTokens;

	// #endregion

	// #region ExoWeb.Model.PropertyChain
	//////////////////////////////////////////////////

	function PropertyChain(rootType, properties, filters) {
		/// <summary>
		/// Encapsulates the logic required to work with a chain of properties and
		/// a root object, allowing interaction with the chain as if it were a 
		/// single property of the root object.
		/// </summary>

		var handlers = null;

		function onStepChanged(priorProp, sender, args) {
			// scan all known objects of this type and raise event for any instance connected
			// to the one that sent the event.
			if (priorProp != undefined) {
				this._rootType.known().forEach(function(known) {
					if (this.connects(known, sender, priorProp)) {
						// Copy the original arguments so that we don't affect other code
						var newArgs = Object.copy(args);

					// Reset property to be the chain, but store the original property as "triggeredBy"
					newArgs.originalSender = sender;
					newArgs.triggeredBy = newArgs.property;
					newArgs.property = this;

						// Call the handler, passing through the arguments
						this._raiseEvent("changed", [known, newArgs]);
					}
				}, this);
			}
			else {
				var newArgs = Object.copy(args);
				// Reset property to be the chain, but store the original property as "triggeredBy"
				newArgs.originalSender = sender;
				newArgs.triggeredBy = newArgs.property;
				newArgs.property = this;

				this._raiseEvent("changed", [sender, newArgs]);
			}
		}

		this._updatePropertyChangeSubscriptions = function() {
			var handler = this._getEventHandler("changed");
			var eventHandlersExist = handler && !handler.isEmpty();
			var subscribedToPropertyChanges = handlers !== null;

			if (!eventHandlersExist && subscribedToPropertyChanges) {
				// If there are no more subscribers then unsubscribe from property-level events
				this._properties.forEach(function(prop, index) {
					var handler = handlers[index];
					prop.removeChanged(handler);
				}, this);
				handlers = null;
			}
			else if (eventHandlersExist && !subscribedToPropertyChanges) {
				// If there are subscribers and we have not subscribed to property-level events, then do so
				handlers = [];
				this._properties.forEach(function(prop, index) {
					var priorProp = (index === 0) ? undefined : this._properties[index - 1];
					var handler = onStepChanged.bind(this).prependArguments(priorProp);
					handlers.push(handler);
					prop.addChanged(handler);
				}, this);
			}
		};

		this._rootType = rootType;
		this._properties = properties;
		this._filters = filters;
	}

	PropertyChain.create = function PropertyChain$create(rootType, pathTokens/*, forceLoadTypes, success, fail*/) {
		/// <summary>
		/// Attempts to synchronously or asynchronously create a property chain for the specified 
		/// root type and path.  Also handles caching of property chains at the type level.
		/// </summary>

		var type = rootType;
		var properties = [];
		var filters = [];
		var filterTypes = [];

		// initialize optional callback arguments
		var forceLoadTypes = arguments.length >= 3 && arguments[2] && arguments[2].constructor === Boolean ? arguments[2] : false;
		var success = arguments.length >= 4 && arguments[3] && arguments[3] instanceof Function ? arguments[3] : null;
		var fail = arguments.length >= 5 && arguments[4] && arguments[4] instanceof Function ?
			arguments[4] : function (error) { if (success) { throw new Error(error); } };

		// process each step in the path either synchronously or asynchronously depending on arguments
		var processStep = function PropertyChain$processStep() {

			// get the next step
			var step = pathTokens.steps.dequeue();
			if (!step) {
				fail($format("Syntax error in property path: {0}", [pathTokens.expression]));

				// return null to indicate that the path is not valid
				return null;
			}

			// get the property for the step 
			var prop = type.property(step.property);
			if (!prop) {
				fail($format("Path '{0}' references an unknown property: {1}.{2}.", [pathTokens.expression, type.get_fullName(), step.property]));

				// return null if the property does not exist
				return null;
			}

			// ensure the property is not static because property chains are not valid for static properties
			if (prop.get_isStatic()) {
				fail($format("Path '{0}' references a static property: {1}.{2}.", [pathTokens.expression, type.get_fullName(), step.property]));

				// return null to indicate that the path references a static property
				return null;
			}

			// store the property for the step
			properties.push(prop);

			// handle optional type filters
			if (step.cast) {

				// determine the filter type
				type = Model.getJsType(step.cast, true).meta;
				if (!type) {
					fail($format("Path '{0}' references an invalid type: {1}", [pathTokens.expression, step.cast]));
					return null;
				}

				var jstype = type.get_jstype();
				filterTypes[properties.length] = jstype;
				filters[properties.length] = function (target) {
					return target instanceof jstype;
				};
			}
			else {
				type = prop.get_jstype().meta;
			}

			// process the next step if not at the end of the path
			if (pathTokens.steps.length > 0) {
				return ensureType(type, forceLoadTypes, processStep);
			}

			// otherwise, create and return the new property chain
			else {

				// processing the path is complete, verify that chain is not zero-length
				if (properties.length === 0) {
					fail($format("PropertyChain cannot be zero-length."));
					return null;
				}

				// ensure filter types on the last step are loaded
				var filterTypeSignal = new Signal("filterType");
				var filterType = filterTypes[properties.length - 1];
				if (filterType) {
					ensureType(filterType.meta, forceLoadTypes, filterTypeSignal.pending(null, null, true));
				}
				var ret;
				filterTypeSignal.waitForAll(function () {
					// create and cache the new property chain
					var chain = new PropertyChain(rootType, properties, filters);
					if (!rootType._chains) {
						rootType._chains = {};
					}
					rootType._chains[pathTokens.expression] = chain;

					// if asynchronous processing was allowed, invoke the success callback
					if (success) {
						success(chain);
					}

					// return the new property chain
					ret = chain;
				}, null, true);
				return ret;
			}
		};

		// begin processing steps in the path
		return ensureType(type, forceLoadTypes, processStep);
	}

	PropertyChain.mixin(Functor.eventing);

	PropertyChain.mixin({
		equals: function PropertyChain$equals(prop) {
			if (prop !== undefined && prop !== null) {
				if (prop instanceof Property) {
					return prop.equals(this);
				}
				else if (prop instanceof PropertyChain) {
					if (prop._properties.length !== this._properties.length) {
						return false;
					}

					for (var i = 0; i < this._properties.length; i++) {
						if (!this._properties[i].equals(prop._properties[i])) {
							return false;
						}
					}

					return true;
				}
			}
		},
		all: function PropertyChain$all() {
			return this._properties;
		},
		append: function PropertyChain$append(prop) {
			Array.addRange(this._properties, prop.all());
		},
		each: function PropertyChain$each(obj, callback, thisPtr, propFilter /*, target, p, lastProp*/) {
			/// <summary>
			/// Iterates over all objects along a property chain starting with the root object (obj).  This
			/// is analogous to the Array forEach function.  The callback may return a Boolean value to indicate 
			/// whether or not to continue iterating.
			/// </summary>
			/// <param name="obj" type="ExoWeb.Model.Entity">
			/// The root object to use in iterating over the chain.
			/// </param>
			/// <param name="callback" type="Function">
			/// The function to invoke at each iteration step.  May return a Boolean value to indicate whether 
			/// or not to continue iterating.
			/// </param>
			/// <param name="propFilter" type="ExoWeb.Model.Property" optional="true">
			/// If specified, only iterates over objects that are RETURNED by the property filter.  In other
			/// words, steps that correspond to a value or values of the chain at a specific property step).
			/// For example, if the chain path is "this.PropA.ListPropB", then...
			///     chain.each(target, callback, null, ListPropB);
			/// ...will iterate the values of the list property only.
			/// </param>

			if (obj == null) throw new ArgumentNullError("obj");
			if (callback == null) throw new ArgumentNullError("callback");
			if (typeof (callback) != "function") throw new ArgumentTypeError("callback", "function", callback);

			// invoke callback on obj first
			var target = arguments[4] || obj;
			var lastProp = arguments[6] || null;
			var props = this._properties.slice(arguments[5] || 0);
			for (var p = arguments[5] || 0; p < this._properties.length; p++) {
				var prop = this._properties[p];
				var isLastProperty = p === this._properties.length - 1;
				var canSkipRemainingProps = isLastProperty || (propFilter && lastProp === propFilter);
				var enableCallback = (!propFilter || lastProp === propFilter);

				if (target instanceof Array) {
					// if the target is a list, invoke the callback once per item in the list
					for (var i = 0; i < target.length; ++i) {
						// take into account any any chain filters along the way
						if (!this._filters[p] || this._filters[p](target[i])) {

							if (enableCallback && callback.call(thisPtr || this, target[i], i, target, prop, p, props) === false) {
								return false;
							}

							if (!canSkipRemainingProps) {
								var targetValue = prop.value(target[i]);
								// continue along the chain for this list item
								if (!targetValue || this.each(obj, callback, thisPtr, propFilter, targetValue, p + 1, prop) === false) {
									return false;
								}
							}
						}
					}
					// subsequent properties already visited in preceding loop
					return true;
				}
				else {
					// return early if the target is filtered and does not match
					if (this._filters[p] && this._filters[p](target) === false) {
						break;
					}

					// take into account any chain filters along the way
					if (enableCallback && callback.call(thisPtr || this, target, -1, null, prop, p, props) === false) {
						return false;
					}
				}

				// if a property filter is used and was just evaluated, stop early
				if (canSkipRemainingProps) {
					break;
				}

				// move to next property in the chain
				target = target[prop._fieldName];

				// break early if the target is undefined
				if (target === undefined || target === null) {
					break;
				}

				lastProp = prop;
			}

			return true;
		},
		get_path: function PropertyChain$get_path() {
			if (!this._path) {
				this._path = this._getPathFromIndex(0);
			}

			return this._path;
		},
		_getPathFromIndex: function PropertyChain$_getPathFromIndex(startIndex) {
			var steps = [];
			if (this._properties[startIndex].get_isStatic()) {
				steps.push(this._properties[startIndex].get_containingType().get_fullName());
			}

			var previousStepType;
			this._properties.slice(startIndex).forEach(function (p, i) {
				if (i !== 0) {
					if (p.get_containingType() !== previousStepType && p.get_containingType().isSubclassOf(previousStepType)) {
						steps[steps.length - 1] = steps[steps.length - 1] + "<" + p.get_containingType().get_fullName() + ">";
					}
				}
				steps.push(p.get_name());
				previousStepType = p.get_jstype().meta;
			});

			return steps.join(".");
		},
		firstProperty: function PropertyChain$firstProperty() {
			return this._properties[0];
		},
		lastProperty: function PropertyChain$lastProperty() {
			return this._properties[this._properties.length - 1];
		},
		properties: function PropertyChain$properties() {
			return this._properties.slice();
		},
		lastTarget: function PropertyChain$lastTarget(obj) {
			for (var p = 0; p < this._properties.length - 1; p++) {
				var prop = this._properties[p];

				// exit early on null or undefined
				if (obj === undefined || obj === null) {
					return obj;
				}

				obj = prop.value(obj);
			}
			return obj;
		},

		prepend: function PropertyChain$prepend(other) {
			var props = other instanceof PropertyChain ? other.all() : [other];

			this._rootType = other.get_containingType();
			Array.prototype.splice.apply(this._properties, [0, 0].concat(props));
		},

		canSetValue: function PropertyChain$canSetValue(obj, value) {
			return this.lastProperty().canSetValue(this.lastTarget(obj), value);
		},

		// Determines if this property chain connects two objects.
		connects: function PropertyChain$connects(fromRoot, toObj, viaProperty) {
			var connected = false;

			// perform simple comparison if no property is defined
			if (!viaProperty) {
				return fromRoot === toObj;
			}

			this.each(fromRoot, function (target) {
				if (target === toObj) {
					connected = true;
					return false;
				}
			}, this, viaProperty);

			return connected;
		},
		rootedPath: function PropertyChain$rootedPath(rootType) {
			for (var i = 0; i < this._properties.length; i++) {
				if (this._properties[i].isDefinedBy(rootType)) {
					var path = this._getPathFromIndex(i);
					return this._properties[i]._isStatic ? this._properties[i].get_containingType().get_fullName() + "." + path : path;
				}
			}
		},
		// starts listening for the get event of the last property in the chain on any known instances. Use obj argument to
		// optionally filter the events to a specific object
		addGet: function PropertyChain$addGet(handler, obj) {
			var chain = this;

			this.lastProperty().addGet(function PropertyChain$_raiseGet(sender, property, value, isInited) {
				handler(sender, chain, value, isInited);
			}, obj);

			// Return the property to support method chaining
			return this;
		},
		removeChanged: function PropertyChain$removeChanged(handler) {
			this._removeEvent("changed", handler);

			this._updatePropertyChangeSubscriptions();
		},
		// starts listening for change events along the property chain on any known instances. Use obj argument to
		// optionally filter the events to a specific object
		addChanged: function PropertyChain$addChanged(handler, obj, once, toleratePartial) {
			var filter = mergeFunctions(

				// Only raise for the given root object if specified
				obj ? equals(obj) : null,

				toleratePartial
					// Ensure that the chain can be accessed without error if toleratePartial is true
					? (function (sender, args) {
						var allCanBeAccessed = true;
						this.each(sender, function (target, targetIndex, targetArray, property, propertyIndex, properties) {
							if (!property.isInited(target)) {
								var propertyGetWouldCauseError = false;
								if (LazyLoader.isRegistered(target)) {
									propertyGetWouldCauseError = true;
								} else if (property.get_isList()) {
									var list = target[property._fieldName];
									if (list && LazyLoader.isRegistered(list)) {
										propertyGetWouldCauseError = true;
									}
								}

								if (propertyGetWouldCauseError) {
									allCanBeAccessed = false;

									// Exit immediately
									return false;
								}
							}
						});
						return allCanBeAccessed;
					}.bind(this))

					// Ensure that the chain is inited from the root if toleratePartial is false
					: this.isInited.bind(this).spliceArguments(1, 1, true),

				{
					// Both filters must pass
					andResults: true
				}

			);

			this._addEvent("changed", handler, filter, once);

			this._updatePropertyChangeSubscriptions();

			// Return the property chain to support method chaining
			return this;
		},
		// Property pass-through methods
		///////////////////////////////////////////////////////////////////////
		get_containingType: function PropertyChain$get_containingType() {
			return this._rootType;
		},
		get_jstype: function PropertyChain$get_jstype() {
			return this.lastProperty().get_jstype();
		},
		get_format: function PropertyChain$get_format() {
			return this.lastProperty().get_format();
		},
		format: function PropertyChain$format(val) {
			return this.lastProperty().format(val);
		},
		get_isList: function PropertyChain$get_isList() {
			return this.lastProperty().get_isList();
		},
		get_isStatic: function PropertyChain$get_isStatic() {
			// TODO
			return this.lastProperty().get_isStatic();
		},
		get_label: function PropertyChain$get_label() {
			return this.lastProperty().get_label();
		},
		get_helptext: function PropertyChain$get_helptext() {
			return this.lastProperty().get_helptext();
		},
		get_name: function PropertyChain$get_name() {
			return this.lastProperty().get_name();
		},
		get_isValueType: function PropertyChain$get_isValueType() {
			return this.lastProperty().get_isValueType();
		},
		get_isEntityType: function PropertyChain$get_isEntityType() {
			return this.lastProperty().get_isEntityType();
		},
		get_isEntityListType: function PropertyChain$get_isEntityListType() {
			return this.lastProperty().get_isEntityListType();
		},
		rules: function (filter) {
			return this.lastProperty().rules(filter);
		},
		value: function PropertyChain$value(obj, val, customInfo) {
			var target = this.lastTarget(obj, true);
			var prop = this.lastProperty();

			if (arguments.length > 1) {
				prop.value(target, val, customInfo);
			}
			else {
				return target ? prop.value(target) : target;
			}
		},
		isInited: function PropertyChain$isInited(obj, enforceCompleteness /*, fromIndex, fromProp*/) {
			/// <summary>
			/// Determines if the property chain is initialized, akin to single Property initialization.
			/// </summary>
			var allInited = true, initedProperties = [], fromIndex = arguments[2] || 0, fromProp = arguments[3] || null, expectedProps = this._properties.length - fromIndex;

			this.each(obj, function(target, targetIndex, targetArray, property, propertyIndex, properties) {
				if (targetArray && enforceCompleteness) {
					if (targetArray.every(function(item) { return this.isInited(item, true, propertyIndex, properties[propertyIndex - 1]); }, this)) {
						Array.prototype.push.apply(initedProperties, properties.slice(propertyIndex));
					}
					else {
						allInited = false;
					}

					// Stop iterating at an array value
					return false;
				}
				else {
					if (!targetArray || targetIndex === 0) {
						initedProperties.push(property);
					}
					if (!property.isInited(target)) {
						initedProperties.remove(property);
						allInited = false;

						// Exit immediately since chain is not inited
						return false;
					}
				}
			}, this, null, obj, fromIndex, fromProp);

			return allInited && (!enforceCompleteness || initedProperties.length === expectedProps);
		},
		toString: function PropertyChain$toString() {
			if (this._isStatic) {
				return this.get_path();
			}
			else {
				var path = this._properties.map(function (e) { return e.get_name(); }).join(".");
				return $format("this<{0}>.{1}", [this.get_containingType(), path]);
			}
		}
	});

	ExoWeb.Model.PropertyChain = PropertyChain;

	// #endregion

	// #region ExoWeb.Model.ObjectMeta
	//////////////////////////////////////////////////

	function ObjectMeta(type, obj) {
		this._obj = obj;
		this.type = type;
		this._conditions = {};
		this._pendingInit = {};
		this._pendingInvocation = [];
	}

	ObjectMeta.mixin({

		get_entity: function () {
			return this._obj;
		},

		// gets the property or property chain for the specified property path
		property: function ObjectMeta$property(propName, thisOnly) {
			return this.type.property(propName, thisOnly);
		},

		// gets and optionally sets the pending initialization status for a property on the current instance
		pendingInvocation: function ObjectMeta$pendingInvocation(rule, value) {
			var indexOfRule = this._pendingInvocation.indexOf(rule);
			if (arguments.length > 1) {
				if (value && indexOfRule < 0) {
					this._pendingInvocation.push(rule);
				}
				else if (!value && indexOfRule >= 0) {
					this._pendingInvocation.splice(indexOfRule, 1);
				}
			}
			return indexOfRule >= 0;
		},

		// gets and optionally sets the pending initialization status for a property on the current instance
		pendingInit: function ObjectMeta$pendingInit(prop, value) {
			var result = this._obj[prop._fieldName] === undefined || this._pendingInit[prop.get_name()] === true;
			if (arguments.length > 1) {
				if (value) {
					this._pendingInit[prop.get_name()] = true;
				}
				else {
					delete this._pendingInit[prop.get_name()];
				}
			}
			return result;
		},

		// gets the condition target with the specified condition type
		getCondition: function ObjectMeta$getCondition(conditionType) {
			return this._conditions[conditionType.code];
		},

		// stores the condition target for the current instance
		setCondition: function ObjectMeta$setCondition(conditionTarget) {
			if (conditionTarget.condition.type != formatConditionType) {
				this._conditions[conditionTarget.condition.type.code] = conditionTarget;
			}
		},

		// clears the condition for the current instance with the specified condition type
		clearCondition: function ObjectMeta$clearCondition(conditionType) {
			delete this._conditions[conditionType.code];
		},

		// determines if the set of permissions are allowed for the current instance
		isAllowed: function ObjectMeta$isAllowed(/*codes*/) {
			if (arguments.length === 0) {
				return undefined;
			}

			// ensure each condition type is allowed for the current instance
			for (var c = arguments.length - 1; c >= 0; c--) {
				var code = arguments[c];
				var conditionType = ConditionType.get(code);

				// return undefined if the condition type does not exist
				if (conditionType === undefined) {
					return undefined;
				}

				// throw an exception if the condition type is not a permission
				if (!(conditionType instanceof ConditionType.Permission)) {
					throw new Error("Condition type \"" + code + "\" should be a Permission.");
				}

				// return false if a condition of the current type exists and is a deny permission or does not exist and is a grant permission
				if (this._conditions[conditionType.code] ? !conditionType.isAllowed : conditionType.isAllowed) {
					return false;
				}
			}

			return true;
		},

		// determines whether the instance and optionally the specified property value is loaded
		isLoaded: function ObjectMeta$isLoaded(prop) {
			/// <summary locid="M:J#ExoWeb.Model.ObjectMeta.isLoaded">
			/// Check whether the instance and optional property are loaded.
			/// </summary>
			/// <param name="prop" optional="true" mayBeNull="true" type="Object">The optional property object or property name to check.</param>

			// First see if there is a lazy loader attached to the entity (and optional property).
			if (LazyLoader.isRegistered(this._obj, null, prop)) {
				return false;
			}

			// Immediately return true if a property name was not specified
			if (prop) {
				// Coerce property names into property instances
				if (isString(prop)) {
					var name = prop;
					prop = this.property(prop, true);
				
					if (!prop) {
						throw new Error("Could not find property \"" + name + "\" on type \"" + this.type.get_fullName() + "\".");
					}
				}

				// Otherwise, get the property value and determine whether there is a
				// lazy loader attached to the property value, e.g. entity or list.
				var val = prop.value(this._obj);
				if (val !== null && val !== undefined && LazyLoader.isRegistered(val)) {
					return false;
				}
			}

			return true;
		},

		// get some or all of the condition
		conditions: function ObjectMeta$conditions(criteria) {

			// condition type filter
			if (criteria instanceof ConditionType) {
				var conditionTarget = this._conditions[criteria.code];
				return conditionTarget ? [conditionTarget.condition] : [];
			}

			// property filter
			if (criteria instanceof Property || criteria instanceof PropertyChain) {
				criteria = criteria.lastProperty();
				var result = [];
				for (var type in this._conditions) {
					var conditionTarget = this._conditions[type];
					if (conditionTarget.properties.some(function (p) { return p.equals(criteria); })) {
						result.push(conditionTarget.condition);
					}
				}
				return result;
			}

			// otherwise, just return all conditions
			var result = [];
			for (var type in this._conditions) {
				result.push(this._conditions[type].condition);
			}
			return result;
		},
		destroy: function () {
			this.type.unregister(this._obj);
		},
		// starts listening for change events on the conditions array. Use obj argument to
		// optionally filter the events to a specific condition type by passing either
		// the condition type code or type itself.
		addConditionsChanged: function ObjectMeta$addConditionsChanged(handler, criteria) {
			var filter;

			// condition type filter
			if (criteria instanceof ConditionType) {
				filter = function (sender, args) { return args.conditionTarget.condition.type === criteria; };
			}

			// property filter
			else if (criteria instanceof Property || criteria instanceof PropertyChain) {
				criteria = criteria.lastProperty();
				filter = function (sender, args) { return args.conditionTarget.properties.indexOf(criteria) >= 0; };
			}

			// subscribe to the event
			this._addEvent("conditionsChanged", handler, filter);

			// Return the object meta to support method chaining
			return this;
		},
		removeConditionsChanged: function ObjectMeta$removeConditionsChanged(handler) {
			this._removeEvent("conditionsChanged", handler);
		}
	});

	ObjectMeta.mixin(Functor.eventing);
	ExoWeb.Model.ObjectMeta = ObjectMeta;

	// #endregion

	// #region ExoWeb.Model.RuleInvocationType
	//////////////////////////////////////////////////

	var RuleInvocationType = {

		/// <summary>
		/// Occurs when an existing instance is initialized.
		/// </summary>
		InitExisting: 2,

		/// <summary>
		/// Occurs when a new instance is initialized.
		/// </summary>
		InitNew: 4,

		/// <summary>
		/// Occurs when a property value is retrieved.
		/// </summary>
		PropertyGet: 8,

		/// <summary>
		/// Occurs when a property value is changed.
		/// </summary>
		PropertyChanged: 16
	}

	// #endregion

	// #region ExoWeb.Model.Rule
	//////////////////////////////////////////////////

	var customRuleIndex = 0;

	function Rule(rootType, options) {
		/// <summary>Creates a rule that executes a delegate when specified model events occur.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			name:				the optional unique name of the type of validation rule
		///			execute:			a function to execute when the rule is triggered
		///			onInit:				true to indicate the rule should run when an instance of the root type is initialized, otherwise false
		///			onInitNew:			true to indicate the rule should run when a new instance of the root type is initialized, otherwise false
		///			onInitExisting:		true to indicate the rule should run when an existing instance of the root type is initialized, otherwise false
		///			onChangeOf:			an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		///			returns:			an array of properties (string name or Property instance) that the rule is responsible to calculating the value of
		/// </param>
		/// <returns type="Rule">The new rule.</returns>

		// exit immediately if called with no arguments
		if (arguments.length === 0) {
			return;
		}

		// ensure a valid root type was provided
		if (!(rootType instanceof ExoWeb.Model.Type)) {
			if (rootType && rootType.meta) {
				rootType = rootType.meta;
			}
			else {
				throw new Error("A value root model type must be specified when constructing rules.");
			}
		}

		// store the initialization options for processing during registration
		if (options) {
			if (options instanceof Function) {
				this._options = {
					name: rootType.get_fullName() + ".Custom." + (++customRuleIndex),
					execute: function (obj) {
						// use the root object as this
						return options.apply(obj, arguments);
					}
				};
			}
			else {
				this._options = options;
				if (!this._options.name) {
					this._options.name = rootType.get_fullName() + ".Custom." + (++customRuleIndex);
				}
			}
		}
		else {
			this._options = {
				name: rootType.get_fullName() + ".Custom." + (++customRuleIndex)
			};
		}
	
		// explicitly override execute if specified
		if (this._options.execute instanceof Function) {
			this.execute = this._options.execute;
		}

		// define properties for the rule
		Object.defineProperty(this, "rootType", { value: rootType });
		Object.defineProperty(this, "name", { value: this._options.name });
		Object.defineProperty(this, "invocationTypes", { value: 0, writable: true });
		Object.defineProperty(this, "predicates", { value: [], writable: true });
		Object.defineProperty(this, "returnValues", { value: [], writable: true });
		Object.defineProperty(this, "isRegistered", { value: false, writable: true });

		// register the rule after loading has completed
		rootType.model.registerRule(this);
	}

	// base rule implementation
	Rule.mixin({

		// indicates that the rule should run only for new instances when initialized
		onInitNew: function () {

			// ensure the rule has not already been registered
			if (!this._options) {
				//throw new Error("Rules cannot be configured once they have been registered: " + this.name);
				return this;
			}

			// configure the rule to run on init new
			this.invocationTypes |= RuleInvocationType.InitNew;
			return this;
		},

		// indicates that the rule should run only for existing instances when initialized
		onInitExisting: function () {

			// ensure the rule has not already been registered
			if (!this._options) {
				//throw new Error("Rules cannot be configured once they have been registered: " + this.name);
				return this;
			}

			// configure the rule to run on init existingh
			this.invocationTypes |= RuleInvocationType.InitExisting;
			return this;
		},

		// indicates that the rule should run for both new and existing instances when initialized
		onInit: function () {

			// ensure the rule has not already been registered
			if (!this._options) {
				//throw new Error("Rules cannot be configured once they have been registered: " + this.name);
				return this;
			}

			// configure the rule to run on both init new and init existing
			this.invocationTypes |= RuleInvocationType.InitNew | RuleInvocationType.InitExisting;
			return this;
		},

		// indicates that the rule should automatically run when one of the specified property paths changes
		// predicates:  an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		onChangeOf: function (predicates) {

			// ensure the rule has not already been registered
			if (!this._options) {
				//throw new Error("Rules cannot be configured once they have been registered: " + this.name);
				return this;
			}

			// allow change of predicates to be specified as a parameter array without []'s
			if (predicates && predicates.constructor === String) {
				predicates = Array.prototype.slice.call(arguments);
			}

			// add to the set of existing change predicates
			this.predicates = this.predicates.length > 0 ? this.predicates.concat(predicates) : predicates;

			// also configure the rule to run on property change unless it has already been configured to run on property get
			if ((this.invocationTypes & RuleInvocationType.PropertyGet) === 0) {
				this.invocationTypes |= RuleInvocationType.PropertyChanged;
			}
			return this;
		},

		// indicates that the rule is responsible for calculating and returning values of one or more properties on the root type
		// properties:	an array of properties (string name or Property instance) that the rule is responsible to calculating the value of
		returns: function (properties) {
			if (!this._options) {
				//throw new Error("Rules cannot be configured once they have been registered: " + this.name);
				return this;
			}
			// allow return properties to be specified as a parameter array without []'s
			if (properties && properties.constructor === String) {
				properties = Array.prototype.slice.call(arguments);
			}
			if (!properties) {
				throw new Error("Rule must specify at least 1 property for returns.");
			}

			// add to the set of existing return value properties
			this.returnValues = this.returnValues.length > 0 ? this.returnValues.concat(properties) : properties;

			// configure the rule to run on property get and not on property change
			this.invocationTypes |= RuleInvocationType.PropertyGet;
			this.invocationTypes &= ~RuleInvocationType.PropertyChanged;
			return this;
		},

		// registers the rule based on the configured invocation types, predicates, and return values
		register: function Rule$register() {

			// create a scope variable to reference the current rule when creating event handlers
			var rule = this;

			// track the rule with the root type
			this.rootType.rules.push(this);

			// create a function to process the rule's options
			var processOptions = function () {
				// configure the rule based on any specified options
				if (this._options) {
					if (this._options.onInit)
						this.onInit();
					if (this._options.onInitNew)
						this.onInitNew();
					if (this._options.onInitExisting)
						this.onInitExisting();
					if (this._options.onChangeOf)
						this.onChangeOf(this._options.onChangeOf);
					if (this._options.returns)
						this.returns(this._options.returns);

					// legacy support for basedOn option syntax
					if (this._options.basedOn) {
						this._options.basedOn.forEach(function (input) {
							var parts = input.split(" of ");
							if (parts.length >= 2) {
								if (parts[0].split(",").indexOf("change") >= 0) {
									this.onChangeOf([parts[1]]);
								}
							}
							else {
								this.onChangeOf(input);
							}
						}, this);
					}
				}

				// indicate that the rule should now be considered registered and cannot be reconfigured
				delete this._options;
			}

			// create a function to determine whether the rule can execute for the given arguments
			var canExecute = function(obj, args) {
				// ensure the rule target is a valid rule root type
				return obj instanceof rule.rootType.get_jstype();
			};

			// create a function to safely execute the rule
			var execute = function (obj, args) {
				// Ensure that the rule can be executed.
				if (!canExecute.call(this, obj, args)) return;

				EventScope$perform(function() {
					if (window.ExoWeb.config.detectRunawayRules) {
						if (currentEventScope.parent && currentEventScope.parent._exitEventVersion) {
							// Determine the maximum number nested calls to EventScope$perform
							// before considering a rule to be a "runaway" rule. 
							var maxNesting;
							if (typeof window.ExoWeb.config.nonExitingScopeNestingCount === "number") {
								maxNesting = window.ExoWeb.config.nonExitingScopeNestingCount - 1;
							} else {
								maxNesting = 99;
							}

							if (currentEventScope.parent._exitEventVersion > maxNesting) {
								logWarning("Aborting rule '" + rule.name + "'.");
								return;
							}
						}
					}

					rule.execute.call(rule, obj, args);
				});
			};

			// create function to perform rule registration once predicates and return values have been prepared
			var register = function () {

				// register for init new
				if (this.invocationTypes & RuleInvocationType.InitNew) {
					this.rootType.addInitNew(function (sender, args) {
						execute.call(this, sender, args);
					});
				}

				// register for init existing
				if (this.invocationTypes & RuleInvocationType.InitExisting) {
					this.rootType.addInitExisting(function (sender, args) {
						execute.call(this, sender, args);
					});
				}

				// register for property change
				if (this.invocationTypes & RuleInvocationType.PropertyChanged) {
					this.predicates.forEach(function (predicate) {
						predicate.addChanged(
							function (sender, args) {
								if (canExecute.call(this, sender, args) && !sender.meta.pendingInvocation(rule)) {
									sender.meta.pendingInvocation(rule, true);
									EventScope$onExit(function() {
										sender.meta.pendingInvocation(rule, false);
										execute.call(this, sender, args);
									});
									EventScope$onAbort(function() {
										sender.meta.pendingInvocation(rule, false);
									});
								}
							},
							null, // no object filter
							false, // subscribe for all time, not once
							true // tolerate nulls since rule execution logic will handle guard conditions
						);
					});
				}

				// register for property get
				if (this.invocationTypes & RuleInvocationType.PropertyGet && this.returnValues) {

					// register for property get events for each return value to calculate the property when accessed
					this.returnValues.forEach(function (returnValue) {
						returnValue.addGet(function (sender, args) {

							// run the rule to initialize the property if it is pending initialization
							if (canExecute.call(this, sender, args) && sender.meta.pendingInit(returnValue)) {
								sender.meta.pendingInit(returnValue, false);
								execute.call(this, sender, args);
							}
						});
					});

					// register for property change events for each predicate to invalidate the property value when inputs change
					this.predicates.forEach(function (predicate) {
						predicate.addChanged(
							function (sender, args) {

								// immediately execute the rule if there are explicit event subscriptions for the property
								if (rule.returnValues.some(function (returnValue) { return hasPropertyChangedSubscribers(returnValue, sender); })) {
									if (canExecute.call(this, sender, args) && !sender.meta.pendingInvocation(rule)) {
										sender.meta.pendingInvocation(rule, true);
										EventScope$onExit(function() {
											sender.meta.pendingInvocation(rule, false);
											execute.call(this, sender, args);
										});
										EventScope$onAbort(function() {
											sender.meta.pendingInvocation(rule, false);
										});
									}
								}

								// Otherwise, just mark the property as pending initialization and raise property change for UI subscribers
								else {
									rule.returnValues.forEach(function (returnValue) {
										sender.meta.pendingInit(returnValue, true);
									});
									// Defer change notification until the scope of work has completed
									EventScope$onExit(function () {
										rule.returnValues.forEach(function (returnValue) { 
											Observer.raisePropertyChanged(sender, returnValue.get_name());
										});
									}, this);
								}
							},
							null, // no object filter
							false, // subscribe for all time, not once
							true // tolerate nulls since rule execution logic will handle guard conditions
						);
					});
				}

				// allow rule subclasses to perform final initialization when registered
				if (this.onRegister instanceof Function) {
					this.onRegister();
				}

				// Mark the rule as successfully registered
				this.isRegistered = true;
			};

			// create a function to kick off the registration process
			var startRegister = function () {
				// process the rule options, this is only done once
				processOptions.call(this);

				// resolve return values, which should all be loaded since the root type is now definitely loaded
				if (this.returnValues) {
					this.returnValues.forEach(function (returnValue, i) {
						if (!(returnValue instanceof Property)) {
							this.returnValues[i] = this.rootType.property(returnValue);
						}
					}, this);
				}

				// resolve all predicates, because the rule cannot run until the dependent types have all been loaded
				if (this.predicates) {
					var signal;
					var predicates = [];

					// setup loading of each property path that the calculation is based on
					this.predicates.forEach(function (predicate, i) {

						// simply copy the predicate over if has already a valid property or property chain
						if (predicate instanceof Property || predicate instanceof PropertyChain) {
							predicates.push(predicate);
						}

						// parse string inputs, which may be paths containing nesting {} hierarchial syntax
						else if (predicate.constructor === String) {

							// create a signal if this is the first string-based input
							if (!signal) {
								signal = new Signal("prepare rule predicates");
							}

							// normalize the paths to accommodate {} hierarchial syntax
							PathTokens.normalizePaths([predicate]).forEach(function (path) {
								Model.property(path, this.rootType, false, signal.pending(function (chain) {
									// add the prepared property or property chain
									predicates.push(chain);
								}, this, true), this);
							}, this);
						}
					}, this);

					// wait until all property information is available to initialize the rule
					if (signal) {
						signal.waitForAll(function () {
							this.predicates = predicates;
							register.call(this);
						}, this, true);
					}

					// otherwise, just immediately proceed with rule registration
					else {
						this.predicates = predicates;
						register.call(this);
					}
				}
			};

			// Optionally perform async pre-registration logic, then kick off the registration process
			if (this.preRegister) {
				// Invoke the rule's pre-register logic if it exists
				if (this.preRegister(function () { startRegister.call(this); }, this) === false) {
					startRegister.call(this);
				}
			} else {
				startRegister.call(this);
			}
		}
	});

	// creates a condition type for the specified rule and type or property, of the specified category type (usually Error or Warning)
	Rule.ensureConditionType = function Rule$ensureConditionType(ruleName, typeOrProp, category, sets) {
		var generatedCode =
			typeOrProp instanceof Property ? $format("{0}.{1}.{2}", [typeOrProp.get_containingType().get_fullName(), typeOrProp.get_name(), ruleName]) :
			typeOrProp instanceof Type ? $format("{0}.{1}", [typeOrProp.get_fullName(), ruleName]) : 
			ruleName;
		var counter = "";

		while (ConditionType.get(generatedCode + counter))
			counter++;

		// return a new client condition type of the specified category
		return new category(generatedCode + counter, $format("Generated condition type for {0} rule.", [ruleName]), null, "client");
	};

	// creates an error for the specified rule and type or property
	Rule.ensureError = function Rule$ensureError(ruleName, typeOrProp, sets) {
		return Rule.ensureConditionType(ruleName, typeOrProp, ConditionType.Error, sets);
	};

	// creates an error for the specified rule and type or property
	Rule.ensureWarning = function Rule$ensureWarning(ruleName, typeOrProp, sets) {
		return Rule.ensureConditionType(ruleName, typeOrProp, ConditionType.Warning, sets);
	};

	// publicly expose the rule
	ExoWeb.Model.Rule = Rule;

	// #endregion

	// #region ExoWeb.Model.RuleInput
	//////////////////////////////////////////////////

	function RuleInput(property) {
		this.property = property;
	}

	RuleInput.prototype = {
		set_dependsOnInit: function RuleInput$set_dependsOnInit(value) {
			this._init = value;
		},
		get_dependsOnInit: function RuleInput$get_dependsOnInit() {
			return this._init === undefined ? false : this._init;
		},
		set_dependsOnChange: function RuleInput$set_dependsOnChange(value) {
			this._change = value;
		},
		get_dependsOnChange: function RuleInput$get_dependsOnChange() {
			return this._change === undefined ? true : this._change;
		},
		set_dependsOnGet: function RuleInput$set_dependsOnGet(value) {
			this._get = value;
		},
		get_dependsOnGet: function RuleInput$get_dependsOnGet() {
			return this._get === undefined ? false : this._get;
		},
		get_isTarget: function RuleInput$get_isTarget() {
			return this._isTarget === undefined ? false : this._isTarget;
		},
		set_isTarget: function RuleInput$set_isTarget(value) {
			this._isTarget = value;
		}
	};
	ExoWeb.Model.RuleInput = RuleInput;

	// #endregion

	// #region ExoWeb.Model.ConditionRule
	//////////////////////////////////////////////////

	function ConditionRule(rootType, options) {
		/// <summary>Creates a rule that asserts a condition based on a predicate.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			assert:				a predicate that returns true when the condition should be asserted
		///			name:				the optional unique name of the type of rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		///			properties:			an array of property paths the validation condition should be attached to when asserted, in addition to the target property
		///			sets:				the optional array of condition type sets to associate the condition with
		///			onInit:				true to indicate the rule should run when an instance of the root type is initialized, otherwise false
		///			onInitNew:			true to indicate the rule should run when a new instance of the root type is initialized, otherwise false
		///			onInitExisting:		true to indicate the rule should run when an existing instance of the root type is initialized, otherwise false
		///			onChangeOf:			an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		/// </param>
		/// <returns type="ConditionRule">The new condition rule.</returns>

		// exit immediately if called with no arguments
		if (arguments.length === 0) return;

		// ensure the rule name is specified
		options.name = options.name || "Condition";

		// store the condition predicate
		var assert = options.assert || options.fn;
		if (assert) {
			this.assert = assert;
		}

		// automatically run the condition rule during initialization of new instances
		if (!options.hasOwnProperty("onInitNew")) {
			options.onInitNew = true;
		}

		// coerce string to condition type
		var conditionType = options.conditionType;
		if (isString(conditionType)) {
			conditionType = ConditionType.get(conditionType);
		}

		// create a condition type if not passed in, defaulting to Error if a condition category was not specified
		Object.defineProperty(this, "conditionType", { 
			value: conditionType || Rule.ensureConditionType(options.name, rootType, options.category || ConditionType.Error, options.sets)
		});

		// automatically run the condition rule during initialization of existing instances if the condition type was defined on the client
		if (!options.hasOwnProperty("onInitExisting") && this.conditionType.origin !== "server") {
			options.onInitExisting = true;
		}

		// store the condition message and properties
		if (options.message) {
			Object.defineProperty(this, "message", { value: options.message, writable: true });
		}
		if (options.properties) {
			Object.defineProperty(this, "properties", { value: options.properties, writable: true });
		}

		// Call the base rule constructor
		Rule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	ConditionRule.prototype = new Rule();
	ConditionRule.prototype.constructor = ConditionRule;

	// implement the execute method
	ConditionRule.mixin({

		// subclasses may override this function to return the set of properties to attach conditions to for this rule
		properties: function ConditionRule$properties() {
			return this.hasOwnProperty("properties") ? this.properties : [];
		},

		// subclasses may override this function to calculate an appropriate message for this rule during the registration process
		message: function ConditionRule$message() {
			return this.conditionType.message;
		},

		// subclasses may override this function to indicate whether the condition should be asserted
		assert: function ConditionRule$assert(obj) {
			throw new Error("ConditionRule.assert() must be passed into the constructor or overriden by subclasses.");
		},

		// asserts the condition and adds or removes it from the model if necessary
		execute: function ConditionRule$execute(obj, args) {

			var assert;

			// call assert the root object as "this" if the assertion function was overriden in the constructor
			if (this.hasOwnProperty("assert")) {

				// convert string functions into compiled functions on first execution
				if (this.assert.constructor === String) {
					this.assert = this.rootType.compileExpression(this.assert);
				}
				assert = this.assert.call(obj, obj, args);
			}

			// otherwise, allow "this" to be the current rule to support subclasses that override assert
			else {
				assert = this.assert(obj);
			}

			var message = this.message;
			if (message instanceof Function) {
				if (this.hasOwnProperty("message")) {
					// When message is overriden, use the root object as this
					message = message.bind(obj);
				}
				else {
					message = message.bind(this);
				}
			}

			// create or remove the condition if necessary
			if (assert !== undefined) {
				this.conditionType.when(assert, obj,
						this.properties instanceof Function ? this.properties(obj) : this.properties,
						message);
			}
		},
	
		// gets the string representation of the condition rule
		toString: function () {
			return this.message || this.conditionType.message;
		}
	});

	// expose the rule publicly
	Rule.condition = ConditionRule;
	ExoWeb.Model.ConditionRule = ConditionRule;

	// #endregion

	// #region ExoWeb.Model.ValidatedPropertyRule
	//////////////////////////////////////////////////

	function ValidatedPropertyRule(rootType, options) {
		/// <summary>Creates a rule that validates the value of a property in the model.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			isValid:			function (obj, prop, val) { return true; } (a predicate that returns true when the property is valid)
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails	
		///			properties:			an array of property paths the validation condition should be attached to when asserted, in addition to the target property
		///			onInit:				true to indicate the rule should run when an instance of the root type is initialized, otherwise false
		///			onInitNew:			true to indicate the rule should run when a new instance of the root type is initialized, otherwise false
		///			onInitExisting:		true to indicate the rule should run when an existing instance of the root type is initialized, otherwise false
		///			onChangeOf:			an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		/// </param>
		/// <returns type="ValidatedPropertyRule">The new validated property rule.</returns>

		// exit immediately if called with no arguments
		if (arguments.length == 0) return;

		// ensure the rule name is specified
		options.name = options.name || "ValidatedProperty";

		// store the property being validated
		var prop = options.property instanceof Property ? options.property : rootType.property(options.property);
		Object.defineProperty(this, "property", { value: prop });

		// override the prototype isValid function if specified
		if (options.isValid instanceof Function) {
			this.isValid = options.isValid;
		}

		// ensure the properties and predicates to include the target property
		if (!options.properties) {
			options.properties = [prop.get_name()];
		}
		else if (options.properties.indexOf(prop.get_name()) < 0 && options.properties.indexOf(prop) < 0) {
			options.properties.push(prop.get_name());
		}
		if (!options.onChangeOf) {
			options.onChangeOf = [prop];
		}
		else if (options.onChangeOf.indexOf(prop.get_name()) < 0 && options.onChangeOf.indexOf(prop) < 0) {
			options.onChangeOf.push(prop);
		}

		// create a property specified condition type if not passed in, defaulting to Error if a condition category was not specified
		options.conditionType = options.conditionType || Rule.ensureConditionType(options.name, this.property, options.category || ConditionType.Error);

		// Replace the property label token in the validation message if present
		if (options.message) {
			var rule = this;
			var message = options.message;
			var hasTokens = Format.hasTokens(prop.get_label());
		
			if (typeof (message) === "function") {
				// Create a function to apply the format to the property label when generating the message
				options.message = function (obj) {
					var messageTemplate = message.apply(this, [obj]);
					return messageTemplate.replace("{property}", hasTokens ? rule.getPropertyLabelFormat().convert(this) : prop.get_label());
				};
			}
			else if (typeof (message) === "string" && hasTokens) {
				// Create a function to apply the format to the property label when generating the message
				options.message = function (obj) {
					return message.replace("{property}", rule.getPropertyLabelFormat().convert(this));
				};
			}
			else {
				var label = prop.get_label();
				// Escaped unescaped quotes
				if (label.indexOf("\"") >= 0) {
					var text = ""; var prev = "";
					label.split("").forEach(function (c) {
						if (c === "\"" && prev !== "\\")
							text += "\\" + c;
						else
							text += c;
						prev = c;
					});
					label = text;
				}
				options.message = message.replace('{property}', label);
			}
		}

		// call the base rule constructor
		ConditionRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	ValidatedPropertyRule.prototype = new ConditionRule();
	ValidatedPropertyRule.prototype.constructor = ValidatedPropertyRule;

	// extend the base type
	ValidatedPropertyRule.mixin({

		// returns false if the property is valid, true if invalid, or undefined if unknown
		assert: function ValidatedPropertyRule$assert(obj) {

			var isValid = this.isValid(obj, this.property, this.property.value(obj));
			return isValid === undefined ? isValid : !isValid;
		},

		// perform addition initialization of the rule when it is registered
		onRegister: function () {

			// register the rule with the target property
			registerPropertyRule(this.property, this);
		},

		getPropertyLabelFormat: function () {
			// convert the property label into a model format
			if (!this._propertyLabelFormat)
				this._propertyLabelFormat = ExoWeb.Model.getFormat(this.rootType.get_jstype(), this.property.get_label());
			return this._propertyLabelFormat;
		},

		getPropertyLabel: function (obj) {
			if (Format.hasTokens(this.property.get_label())) {
				return this.getPropertyLabelFormat().convert(obj);
			} else {
				return this.property.get_label();
			}
		},

		preRegister: function (callback, thisPtr) {
			// Exit if the rule is no tin a valid state
			if (!this.rootType) {
				return false;
			}

			// Exit if the property label does not contain tokens
			if (!Format.hasTokens(this.property.get_label())) {
				return false;
			}

			var registerFormatPaths = function (formatPaths) {
				if (formatPaths.length <= 0)
					return;

				if (!this._options)
					this._options = {};

				if (!this._options.onChangeOf)
					this._options.onChangeOf = [];

				formatPaths.forEach(function (p) {
					this.rootType.getPaths(p).forEach(function(prop) {
						if (this._options.onChangeOf.indexOf(prop) < 0) {
							if (typeof this._options.onChangeOf === "string")
								this._options.onChangeOf = [this._options.onChangeOf];

							this._options.onChangeOf.push(prop);
						}
					}, this);
				}, this);
			};

			// Ensure tokens included in the format trigger rule execution
			if (callback && callback instanceof Function) {
				this.getPropertyLabelFormat().getPaths(function (formatPaths) {
					registerFormatPaths.call(this, formatPaths);
					callback.call(thisPtr || this);
				}, this);
			} else {
				var formatPaths = this.getPropertyLabelFormat().getPaths();
				registerFormatPaths.call(this, formatPaths);
				return true;
			}
		}
	});

	// Expose the rule publicly
	Rule.validated = ValidatedPropertyRule;
	ExoWeb.Model.ValidatedPropertyRule = ValidatedPropertyRule;

	// #endregion

	// #region ExoWeb.Model.CalculatedPropertyRule
	//////////////////////////////////////////////////

	function CalculatedPropertyRule(rootType, options) {
		/// <summary>Creates a rule that calculates the value of a property in the model.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:		the property being calculated (either a Property instance or string property name)
		///			calculate:		a function that returns the value to assign to the property, or undefined if the value cannot be calculated
		///			defaultIfError: the value to return if an error occurs, or undefined to cause an exception to be thrown
		///			name:			the optional unique name of the rule
		///		    onInit:			true to indicate the rule should run when an instance of the root type is initialized, otherwise false
		///		    onInitNew:		true to indicate the rule should run when a new instance of the root type is initialized, otherwise false
		///		    onInitExisting:	true to indicate the rule should run when an existing instance of the root type is initialized, otherwise false
		///		    onChangeOf:		an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		/// </param>
		/// <returns type="CalculatedPropertyRule">The new calculated property rule.</returns>

		// store the property being validated
		var prop = options.property instanceof Property ? options.property : rootType.property(options.property);
		Object.defineProperty(this, "property", { value: prop });

		Object.defineProperty(this, "useOptimalUpdates", { value: options.useOptimalUpdates !== false });

		// ensure the rule name is specified
		options.name = options.name || (rootType.get_fullName() + "." + prop.get_name() + ".Calculated");

		// store the calculation function
		Object.defineProperty(this, "calculate", { value: options.calculate || options.fn, writable: true });

		// store the calculation function
		Object.defineProperty(this, "defaultIfError", { value: options.hasOwnProperty("defaultIfError") ? options.defaultIfError : ExoWeb.config.calculationErrorDefault });

		// indicate that the rule is responsible for returning the value of the calculated property
		options.returns = [prop];

		// Call the base rule constructor 
		Rule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	CalculatedPropertyRule.prototype = new Rule();
	CalculatedPropertyRule.prototype.constructor = CalculatedPropertyRule;

	// extend the base type
	CalculatedPropertyRule.mixin({
		execute: function CalculatedPropertyRule$execute(obj) {
			var prop = this.property;

			// convert string functions into compiled functions on first execution
			if (this.calculate.constructor === String) {
				this.calculate = this.rootType.compileExpression(this.calculate);
			}

			// calculate the new property value
			var newValue;
			if (this.defaultIfError === undefined)
				newValue = this.calculate.apply(obj, [obj]);
			else {
				try {
					newValue = this.calculate.apply(obj, [obj]);
				}
				catch (e) {
					newValue = this.defaultIfError;
				}
			}

			// exit immediately if the calculated result was undefined
			if (newValue === undefined) return;

			// modify list properties to match the calculated value instead of overwriting the property
			if (prop.get_isList()) {

				// re-calculate the list values
				var newList = newValue;

				// compare the new list to the old one to see if changes were made
				var curList = prop.value(obj);

				if (newList.length === curList.length) {
					var noChanges = true;

					for (var i = 0; i < newList.length; ++i) {
						if (newList[i] !== curList[i]) {
							noChanges = false;
							break;
						}
					}

					if (noChanges) {
						return;
					}
				}

				// update the current list so observers will receive the change events
				curList.beginUpdate();
				if (this.useOptimalUpdates)
					update(curList, newList);
				else {
					curList.clear();
					curList.addRange(newList);
				}
				curList.endUpdate();
			}

			// otherwise, just set the property to the new value
			else {
				prop.value(obj, newValue, { calculated: true });
			}
		},
		toString: function () {
			return "calculation of " + this.property._name;
		},
		// perform addition initialization of the rule when it is registered
		onRegister: function () {

			// register the rule with the target property
			registerPropertyRule(this.property, this);
		}
	});

	// expose the rule publicly
	Rule.calculated = CalculatedPropertyRule;
	ExoWeb.Model.CalculatedPropertyRule = CalculatedPropertyRule;

	// #endregion

	// #region ExoWeb.Model.RequiredRule
	//////////////////////////////////////////////////

	function RequiredRule(rootType, options) {
		/// <summary>Creates a rule that validates that a property has a value.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		///			requiredValue:		the optional required value
		/// </param>
		/// <returns type="RequiredRule">The new required rule.</returns>

		// ensure the rule name is specified
		options.name = options.name || "Required";

		// ensure the error message is specified
		options.message = options.message || Resource.get("required");

		if (options.requiredValue)
			Object.defineProperty(this, "requiredValue", { value: options.requiredValue });

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RequiredRule.prototype = new ValidatedPropertyRule();
	RequiredRule.prototype.constructor = RequiredRule;

	// define a global function that determines if a value exists
	RequiredRule.hasValue = function RequiredRule$hasValue(val) {
		return val !== undefined && val !== null && (val.constructor !== String || val.trim() !== "") && (!(val instanceof Array) || val.length > 0);
	};

	// extend the base type
	RequiredRule.mixin({

		// returns true if the property is valid, otherwise false
		isValid: function RequiredRule$isValid(obj, prop, val) {
			if (this.requiredValue)
				return val === this.requiredValue;
			else
				return RequiredRule.hasValue(val);
		},

		// get the string representation of the rule
		toString: function () {
			return $format("{0}.{1} is required", [this.property.get_containingType().get_fullName(), this.property.get_name()]);
		}
	});

	// Expose the rule publicly
	Rule.required = RequiredRule;
	ExoWeb.Model.RequiredRule = RequiredRule;

	// #endregion

	// #region ExoWeb.Model.ValidationRule
	//////////////////////////////////////////////////

	function ValidationRule(rootType, options) {
		/// <summary>Creates a rule that performs custom validation for a property.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		///			requiredValue:		the optional required value
		/// </param>
		/// <returns type="RequiredRule">The new required rule.</returns>

		// ensure the rule name is specified
		options.name = options.name || "Validation";
	
		if (options.message) {
			// Evaluate the message as a localizable resource
			if (Resource.get(options.message))
				options.message = Resource.get(options.message);
		} else if (options.messageFn) {
			// Store the message function if specified
			Object.defineProperty(this, "messageFn", { value: options.messageFn, writable: true });
		} else {
			// Set a default error message is one is not specified
			options.message = Resource.get("validation");
		}
	
		// predicate-based rule
		if (options.isError || options.fn) {
			Object.defineProperty(this, "isError", { value: options.isError || options.fn, writable: true });
		}

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	ValidationRule.prototype = new ValidatedPropertyRule();
	ValidationRule.prototype.constructor = ValidationRule;

	// extend the base type
	ValidationRule.mixin({

		message: function (obj) {
			var message = "";
			var prop = this.property;
			var hasTokens = Format.hasTokens(prop.get_label());

			if (this.messageFn) {
				// convert string functions into compiled functions on first execution
				if (this.messageFn.constructor === String) {
					this.messageFn = this.rootType.compileExpression(this.messageFn);
				}

				// Invoke the function bound to the entity, and also pass the entity as the argument
				// This is consitent with how rule 'message' option that is an own property is called in this manner (see: ConditionRule.js)
				message = this.messageFn.apply(obj, [obj]);

				// Convert a non-string message into a string
				if (message != null && typeof message !== "string") {
					logWarning("Converting message of type '" + (typeof message) + "' for rule '" + this.name + "' to a string.");
					message = message.toString();
				}
			} else {
				// Fall back to the default validation message
				message = Resource.get("validation");
			}

			// Replace the {property} token with the property label (or evaluated label format)
			message = message.replace("{property}", hasTokens ? this.getPropertyLabelFormat().convert(obj) : prop.get_label());

			return message;
		},

		// returns true if the property is valid, otherwise false
		isValid: function ValidationRule$isValid(obj, prop, val) {		
			// convert string functions into compiled functions on first execution
			if (this.isError.constructor === String) {
				this.isError = this.rootType.compileExpression(this.isError);
			}

			try {
				if (!this.isError.apply(obj, [obj])) {
					// The 'isError' function returned false, so consider the object to be valid
					return true;
				} else {
					var message = this.message;
					if (message instanceof Function) {
						if (this.hasOwnProperty("message")) {
							// When message is overriden, use the root object as this (see: ConditionRule.js)
							message = message.bind(obj);
						}
						else {
							message = message.bind(this);
						}

						// Invoke the message function to ensure that it will produce a value
						message = message(obj);
					}

					// If there is no message, then consider the object to be valid
					return !message;
				}
			}
			catch (e) {
				// If 'isError' or 'messageFn' throws an error, then consider the object to be valid
				logWarning(e);
				return true;
			}
		},

		// get the string representation of the rule
		toString: function () {
			return $format("{0}.{1} is invalid", [this.property.get_containingType().get_fullName(), this.property.get_name()]);
		}
	});

	// Expose the rule publicly
	Rule.validation = ValidationRule;
	ExoWeb.Model.ValidationRule = ValidationRule;

	// #endregion

	// #region ExoWeb.Model.RangeRule
	//////////////////////////////////////////////////

	function RangeRule(rootType, options) {
		/// <summary>Creates a rule that validates a property value is within a specific range.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			min:				the minimum valid value of the property
		///			max:				the maximum valid value of the property
		///			minFn:				a function returning the minimum valid value of the property
		///			maxFn:				a function returning the maximum valid value of the property
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		///		    onChangeOf:			an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		/// </param>
		/// <returns type="RangeRule">The new range rule.</returns>

		// exit immediately if called with no arguments
		if (arguments.length == 0) return;

		// ensure the rule name is specified
		options.name = options.name || "Range";

		// get the property being validated in order to determine the data type
		var property = options.property instanceof Property ? options.property : rootType.property(options.property);

		// coerce date range constants
		if (options.min && property.get_jstype() === Date) {
			options.min = new Date(options.min);
		}
		if (options.max && property.get_jstype() === Date) {
			options.max = new Date(options.max);
		}

		// coerce null ranges to undefined
		if (options.min === null) {
			options.min = undefined;
		}
		if (options.max === null) {
			options.max = undefined;
		}

		// convert constant values into functions
		if (!options.minFn) {
			options.minFn = function() { return options.min; };
		}
		if (!options.maxFn) {
			options.maxFn = function() { return options.max; };
		}

		// Store the min and max functions
		Object.defineProperty(this, "min", { value: options.minFn, writable: true });
		Object.defineProperty(this, "max", { value: options.maxFn, writable: true });

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RangeRule.prototype = new ValidatedPropertyRule();
	RangeRule.prototype.constructor = RangeRule;

	// extend the base type
	RangeRule.mixin({

		// get the min and max range in effect for this rule for the specified instance
		range: function RangeRule$range(obj) {

			// convert string functions into compiled functions on first execution
			if (this.min && this.min.constructor === String) {
				this.min = this.rootType.compileExpression(this.min);
			}
			if (this.max && this.max.constructor === String) {
				this.max = this.rootType.compileExpression(this.max);
			}

			// determine the min and max values based on the current state of the instance
			var range = { };
			try { range.min = this.min.call(obj); }	catch (e) { }
			try { range.max = this.max.call(obj); }	catch (e) { }
			range.min = range.min == null ? undefined : range.min;
			range.max = range.max == null ? undefined : range.max;

			return range;
		},

		// returns true if the property is valid, otherwise false
		isValid: function RangeRule$isValid(obj, prop, val) { 

			var range = this.range(obj);

			return val === null || val === undefined || ((range.min === undefined || val >= range.min) && (range.max === undefined || val <= range.max));
		},

		message: function RangeRule$message(obj) {

			var range = this.range(obj);

			// ensure the error message is specified
			var message =
				(range.min !== undefined && range.max !== undefined ? Resource.get("range-between").replace("{min}", this.property.format(range.min)).replace("{max}", this.property.format(range.max)) : // between date or ordinal
					this.property.get_jstype() === Date ?
						range.min !== undefined ?
							Resource.get("range-on-or-after").replace("{min}", this.property.format(range.min)) : // on or after date
							Resource.get("range-on-or-before").replace("{max}", this.property.format(range.max)) : // on or before date
						range.min !== undefined ?
							Resource.get("range-at-least").replace("{min}", this.property.format(range.min)) : // at least ordinal
							Resource.get("range-at-most").replace("{max}", this.property.format(range.max))); // at most ordinal

			return message.replace('{property}', this.getPropertyLabel(obj));		
		},

		// get the string representation of the rule
		toString: function () {
			return $format("{0}.{1} in range, min: {2}, max: {3}",
				[this.get_property().get_containingType().get_fullName(),
				this.get_property().get_name(),
				this.min ? "" : this.min,
				this.max ? "" : this.max]);
		}
	});

	// Expose the rule publicly
	Rule.range = RangeRule;
	ExoWeb.Model.RangeRule = RangeRule;

	// #endregion

	// #region ExoWeb.Model.AllowedValuesRule
	//////////////////////////////////////////////////

	function AllowedValuesRule(rootType, options) {
		/// <summary>Creates a rule that validates whether a selected value or values is in a list of allowed values.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:		the property being validated (either a Property instance or string property name)
		///			source:			the source property for the allowed values (either a Property or PropertyChain instance or a string property path)
		///			name:			the optional unique name of the rule
		///			conditionType:	the optional condition type to use, which will be automatically created if not specified
		///			category:		ConditionType.Error || ConditionType.Warning, defaults to ConditionType.Error if not specified
		///			message:		the message to show the user when the validation fails
		/// </param>
		/// <returns type="AllowedValuesRule">The new allowed values rule.</returns>

		// ensure the rule name is specified
		options.name = options.name || "AllowedValues";

		// ensure the error message is specified
		options.message = options.message || Resource.get("allowed-values");

		// define properties for the rule
		if (options.source instanceof Property || options.source instanceof PropertyChain) {
			Object.defineProperty(this, "sourcePath", { value: options.source.get_path() });
			Object.defineProperty(this, "source", { value: options.source });
			options.onChangeOf = [options.source];
		}
		else if (options.source instanceof Function || options.fn) {
			Object.defineProperty(this, "sourceFn", { value: options.source || options.fn, writable: true });
			options.fn = null;
		}
		else {
			Object.defineProperty(this, "sourcePath", { value: options.source });
			options.onChangeOf = [options.source];
		}

		if (options.ignoreValidation) {
		    Object.defineProperty(this, "ignoreValidation", { value: options.ignoreValidation });
		}

		// create a property specified condition type if not passed in, defaulting to Error if a condition category was not specified
		options.conditionType = options.conditionType || Rule.ensureConditionType(options.name, this.property, options.category || ConditionType.Error);

		// never run allowed values rules during initialization of existing instances
		if (!options.hasOwnProperty("onInitExisting") && options.conditionType.origin === "server") {
			options.onInitExisting = false;
		}

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	AllowedValuesRule.prototype = new ValidatedPropertyRule();
	AllowedValuesRule.prototype.constructor = AllowedValuesRule;

	// extend the base type
	AllowedValuesRule.mixin({
		onRegister: function AllowedValuesRule$onRegister() {

			// get the allowed values source, if only the path was specified
			if (!this.source && !this.sourceFn) {
				Object.defineProperty(this, "source", { value: Model.property(this.sourcePath, this.rootType) });
			}

			// call the base method
			ValidatedPropertyRule.prototype.onRegister.call(this);
		},
		isValid: function AllowedValuesRule$isValid(obj, prop, value) {

		    //gives the ability to create a drop down of available options
	        //but does not need validatin (combo box)
		    if (this.ignoreValidation) {
		        return true;
		    }

			// return true if no value is currently selected
			if (!value) {
				return true;
			}

			// get the list of allowed values of the property for the given object
			var allowed = this.values(obj);

			// return undefined if the set of allowed values cannot be determined
			if (!LazyLoader.isLoaded(allowed)) {
				return;
			}

			// ensure that the value or list of values is in the allowed values list (single and multi-select)				
			if (value instanceof Array) {
				return value.every(function (item) { return Array.contains(allowed, item); });
			}
			else {
				return Array.contains(allowed, value);
			}
		},

		// Subscribes to changes to the allow value predicates, indicating that the allowed values have changed
		addChanged: function AllowedValuesRule$addChanged(handler, obj, once) {
			for (var p = 0; p < this.predicates.length; p++) {
				var predicate = this.predicates[p];
				if (predicate !== this.property)
					predicate.addChanged(handler, obj, once);
			}
		},

		// Unsubscribes from changes to the allow value predicates
		removeChanged: function AllowedValuesRule$removeChanged(handler, obj, once) {
			for (var p = 0; p < this.predicates.length; p++) {
				var predicate = this.predicates[p];
				if (predicate !== this.property)
					predicate.removeChanged(handler, obj, once);
			}
		},

		values: function AllowedValuesRule$values(obj, exitEarly) {
			if (!this.source && !this.sourceFn) {
				logWarning("AllowedValues rule on type \"" + this.prop.get_containingType().get_fullName() + "\" has not been initialized.");
				return;
			}

			// Function-based allowed values
			if (this.sourceFn) {

				// convert string functions into compiled functions on first execution
				if (this.sourceFn.constructor === String) {
					this.sourceFn = this.rootType.compileExpression(this.sourceFn);
				}

				return this.sourceFn.call(obj, obj);
			}

			// Property path-based allowed values
			else {
				// For non-static properties, verify that a final target exists and
				// if not return an appropriate null or undefined value instead.
				if (!this.source.get_isStatic()) {
					// Get the value of the last target for the source property (chain).
					var lastTarget = this.source.lastTarget(obj, exitEarly);

					// Use the last target to distinguish between the absence of data and
					// data that has not been loaded, if a final value cannot be obtained.
					if (lastTarget === undefined) {
						// Undefined signifies unloaded data
						return undefined;
					}
					else if (lastTarget === null) {
						// Null signifies the absensce of a value
						return null;
					}
				}

				// Return the value of the source for the given object
				return this.source.value(obj);
			}
		},
		toString: function AllowedValuesRule$toString() {
			return $format("{0}.{1} allowed values = {2}", [this.property.get_containingType().get_fullName(), this.property.get_name(), this._sourcePath]);
		}
	});

	// expose the rule publicly
	Rule.allowedValues = AllowedValuesRule;
	ExoWeb.Model.AllowedValuesRule = AllowedValuesRule;

	// #endregion

	// #region ExoWeb.Model.CompareRule
	//////////////////////////////////////////////////

	function CompareRule(rootType, options) {
		/// <summary>Creates a rule that validates a property by comparing it to another property.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			compareSource:		the source property to compare to (either a Property or PropertyChain instance or a string property path)
		///			compareOperator:	the relational comparison operator to use (one of "Equal", "NotEqual", "GreaterThan", "GreaterThanEqual", "LessThan" or "LessThanEqual")
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		/// </param>
		/// <returns type="CompareRule">The new compare rule.</returns>

		// exit immediately if called with no arguments
		if (arguments.length == 0) return;

		options.name = options.name || "Compare";
	
		// ensure changes to the compare source triggers rule execution
		if (options.compareSource)
			options.onChangeOf = [options.compareSource];

		// define properties for the rule
		Object.defineProperty(this, "compareOperator", { value: options.compareOperator });
		if (options.source instanceof Property || options.compareSource instanceof PropertyChain) {
			Object.defineProperty(this, "comparePath", { value: options.compareSource.get_path() });
			Object.defineProperty(this, "compareSource", { value: options.compareSource });
		}
		else {
			Object.defineProperty(this, "comparePath", { value: options.compareSource });
		}

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// compares the source value to a comparison value using the specified operator
	CompareRule.compare = function CompareRule$compare(sourceValue, compareOp, compareValue, defaultValue) {
		if (compareValue === undefined || compareValue === null) {
			switch (compareOp) {
				case "Equal": return !RequiredRule.hasValue(sourceValue);
				case "NotEqual": return RequiredRule.hasValue(sourceValue);
			}
		}

		if (sourceValue !== undefined && sourceValue !== null && compareValue !== undefined && compareValue !== null) {
			switch (compareOp) {
				case "Equal": return sourceValue == compareValue;
				case "NotEqual": return sourceValue != compareValue;
				case "GreaterThan": return sourceValue > compareValue;
				case "GreaterThanEqual": return sourceValue >= compareValue;
				case "LessThan": return sourceValue < compareValue;
				case "LessThanEqual": return sourceValue <= compareValue;
			}
			// Equality by default.
			return sourceValue == compareValue;
		}

		return defaultValue;
	};

	// setup the inheritance chain
	CompareRule.prototype = new ValidatedPropertyRule();
	CompareRule.prototype.constructor = CompareRule;

	// extend the base type
	CompareRule.mixin({

		// return true of the comparison is valid, otherwise false
		isValid: function Compare$isValid(obj, prop, value) {
			var compareValue = this.compareSource.value(obj);
			return CompareRule.compare(value, this.compareOperator, compareValue, true);
		},

		// calculates the appropriate message based on the comparison operator and data type
		message: function () {
			var message;
			var isDate = this.compareSource.get_jstype() === Date;
			if (this.compareOperator === "Equal") {
				message = Resource.get("compare-equal");
			}
			else if (this.compareOperator === "NotEqual") {
				message = Resource.get("compare-not-equal");
			}
			else if (this.compareOperator === "GreaterThan") {
				message = Resource.get(isDate ? "compare-after" : "compare-greater-than");
			}
			else if (this.compareOperator === "GreaterThanEqual") {
				message = Resource.get(isDate ? "compare-on-or-after" : "compare-greater-than-or-equal");
			}
			else if (this.compareOperator === "LessThan") {
				message = Resource.get(isDate ? "compare-before" : "compare-less-than");
			}
			else if (this.compareOperator === "LessThanEqual") {
				message = Resource.get(isDate ? "compare-on-or-before" : "compare-less-than-or-equal");
			}
			else {
				throw new Error("Invalid comparison operator for compare rule.");
			}

			message = message.replace("{compareSource}", this.compareSource.get_label());

			return message.replace('{property}', this.getPropertyLabel(obj));
		},

		// perform addition initialization of the rule when it is registered
		onRegister: function () {

			// get the compare source, if only the path was specified
			if (!this.compareSource && this.comparePath) {
				Object.defineProperty(this, "compareSource", { value: Model.property(this.comparePath, this.rootType) });
			}

			// call the base method
			ValidatedPropertyRule.prototype.onRegister.call(this);
		}
	});

	// expose the rule publicly
	Rule.compare = CompareRule;
	ExoWeb.Model.CompareRule = CompareRule;

	// #endregion

	// #region ExoWeb.Model.RequiredIfRule
	//////////////////////////////////////////////////

	function RequiredIfRule(rootType, options) {
		/// <summary>Creates a rule that conditionally validates whether a property has a value.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			isRequired:			a predicate function indicating whether the property should be required
		///			compareSource:		the source property to compare to (either a Property or PropertyChain instance or a string property path)
		///			compareOperator:	the relational comparison operator to use (one of "Equal", "NotEqual", "GreaterThan", "GreaterThanEqual", "LessThan" or "LessThanEqual")
		///			compareValue:		the optional value to compare to
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		///		    onInit:				true to indicate the rule should run when an instance of the root type is initialized, otherwise false
		///		    onInitNew:			true to indicate the rule should run when a new instance of the root type is initialized, otherwise false
		///		    onInitExisting:		true to indicate the rule should run when an existing instance of the root type is initialized, otherwise false
		///		    onChangeOf:			an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		///			requiredValue:		the optional required value
		/// </param>
		/// <returns type="RequiredIfRule">The new required if rule.</returns>

		options.name = options.name || "RequiredIf";

		// ensure changes to the compare source triggers rule execution
		if (!options.onChangeOf && options.compareSource) {
			options.onChangeOf = [options.compareSource];
		}

		// predicate-based rule
		if (options.isRequired || options.fn) {
			Object.defineProperty(this, "isRequired", { value: options.isRequired || options.fn, writable: true });
			options.fn = null;
			options.message = options.message || Resource.get("required");
		}

			// comparison-based rule
		else {
			Object.defineProperty(this, "comparePath", { value: options.compareSource });
			Object.defineProperty(this, "compareOperator", {
				value: options.compareOperator || (options.compareValue !== undefined && options.compareValue !== null ? "Equal" : "NotEqual"),
				writable: true
			});
			Object.defineProperty(this, "compareValue", { value: options.compareValue, writable: true });
		}

		if (options.requiredValue)
			Object.defineProperty(this, "requiredValue", { value: options.requiredValue });

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RequiredIfRule.prototype = new ValidatedPropertyRule();
	RequiredIfRule.prototype.constructor = RequiredIfRule;

	// extend the base type
	RequiredIfRule.mixin({

		// determines whether the property should be considered required
		isRequired: function RequiredIfRule$required(obj) {
			var sourceValue = this.compareSource.value(obj);
			return CompareRule.compare(sourceValue, this.compareOperator, this.compareValue, false);
		},

		// calculates the appropriate message based on the comparison operator and data type
		message: function () {
			var message;
			var isDate = this.compareSource.get_jstype() === Date;
			if (this.compareValue === undefined || this.compareValue === null) {
				message = Resource.get(this.compareOperator === "Equal" ? "required-if-not-exists" : "required-if-exists");
			}
			else if (this.compareOperator === "Equal") {
				message = Resource.get("required-if-equal");
			}
			else if (this.compareOperator === "NotEqual") {
				message = Resource.get("required-if-not-equal");
			}
			else if (this.compareOperator === "GreaterThan") {
				message = Resource.get(isDate ? "required-if-after" : "required-if-greater-than");
			}
			else if (this.compareOperator === "GreaterThanEqual") {
				message = Resource.get(isDate ? "required-if-on-or-after" : "required-if-greater-than-or-equal");
			}
			else if (this.compareOperator === "LessThan") {
				message = Resource.get(isDate ? "required-if-before" : "required-if-less-than");
			}
			else if (this.compareOperator === "LessThanEqual") {
				message = Resource.get(isDate ? "required-if-on-or-before" : "required-if-less-than-or-equal");
			}
			else {
				throw new Error("Invalid comparison operator for compare rule.");
			}

			message = message.replace("{compareSource}", this.compareSource.get_label())
				.replace("{compareValue}", this.compareSource.format(this.compareValue));

			return message.replace('{property}', this.getPropertyLabel(obj));
		},

		// returns false if the property is valid, true if invalid, or undefined if unknown
		assert: function RequiredIfRule$assert(obj) {
			var isReq;

			// convert string functions into compiled functions on first execution
			if (this.isRequired.constructor === String) {
				this.isRequired = this.rootType.compileExpression(this.isRequired);
			}

			if (this.hasOwnProperty("isRequired")) {
				try {
					isReq = this.isRequired.call(obj);
				}
				catch (e) {
					isReq = false;
				}
			}
				// otherwise, allow "this" to be the current rule to support subclasses that override assert
			else
				isReq = this.isRequired(obj);

			if (this.requiredValue)
				return isReq && this.property.value(obj) !== this.requiredValue;
			else
				return isReq && !RequiredRule.hasValue(this.property.value(obj));
		},

		// perform addition initialization of the rule when it is registered
		onRegister: function () {

			// call the base method
			ValidatedPropertyRule.prototype.onRegister.call(this);

			// perform addition registration for required if rules with a compare source
			if (this.comparePath) {

				// get the compare source, which is already a rule predicate and should immediately resolve
				Object.defineProperty(this, "compareSource", { value: Model.property(this.comparePath, this.rootType) });

				// flip the equality rules for boolean data types
				if (this.compareSource.get_jstype() === Boolean && this.compareOperator == "NotEqual" && (this.compareValue === undefined || this.compareValue === null)) {
					this.compareOperator = "Equal";
					this.compareValue = true;
				}
			}
		}
	});

	// Expose the rule publicly
	Rule.requiredIf = RequiredIfRule;
	ExoWeb.Model.RequiredIfRule = RequiredIfRule;

	// #endregion

	// #region ExoWeb.Model.StringLengthRule
	//////////////////////////////////////////////////

	function StringLengthRule(rootType, options) {
		/// <summary>Creates a rule that validates that the length of a string property is within a specific range.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			min:				the minimum length of the property
		///			max:				the maximum length of the property
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		/// </param>
		/// <returns type="RangeRule">The new range rule.</returns>

		// ensure the rule name is specified
		options.name = options.name || "StringLength";

		// store the min and max lengths
		Object.defineProperty(this, "min", { value: options.min });
		Object.defineProperty(this, "max", { value: options.max });

		// ensure the error message is specified
		options.message = options.message ||
			(options.min && options.max ? Resource.get("string-length-between").replace("{min}", this.min).replace("{max}", this.max) :
			options.min ? Resource.get("string-length-at-least").replace("{min}", this.min) :
			Resource.get("string-length-at-most").replace("{max}", this.max));

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	StringLengthRule.prototype = new ValidatedPropertyRule();
	StringLengthRule.prototype.constructor = StringLengthRule;

	// extend the base type
	StringLengthRule.mixin({

		// returns true if the property is valid, otherwise false
		isValid: function StringLengthRule$isValid(obj, prop, val) {
			return !val || val === "" || ((!this.min || val.length >= this.min) && (!this.max || val.length <= this.max));
		},

		// get the string representation of the rule
		toString: function () {
			return $format("{0}.{1} in range, min: {2}, max: {3}",
				[this.get_property().get_containingType().get_fullName(),
				this.get_property().get_name(),
				this.min ? "" : this.min,
				this.max ? "" : this.max]);
		}
	});

	// Expose the rule publicly
	Rule.stringLength = StringLengthRule;
	ExoWeb.Model.StringLengthRule = StringLengthRule;

	// #endregion

	// #region ExoWeb.Model.StringFormatRule
	//////////////////////////////////////////////////

	function StringFormatRule(rootType, options) {
		/// <summary>Creates a rule that validates that a string property value is correctly formatted.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			description:		the human readable description of the format, such as MM/DD/YYY
		///		    expression:			a regular expression string or RegExp instance that the property value must match
		///		    reformat:			and optional regular expression reformat string or reformat function that will be used to correct the value if it matches
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		/// </param>
		/// <returns type="StringFormatRule">The new string format rule.</returns>

		// exit immediately if called with no arguments
		if (arguments.length == 0) return;

		// ensure the rule name is specified
		options.name = options.name || "StringFormat";


		// ensure the error message is specified
		if (Resource.get(options.message))
	        options.message = Resource.get(options.message);
	    else
	        options.message = options.message || Resource.get("string-format").replace("{formatDescription}", options.description);

		// define properties for the rule
		Object.defineProperty(this, "description", { value: options.description });
		Object.defineProperty(this, "expression", { value: options.expression instanceof RegExp ? options.expression : RegExp(options.expression) });
		Object.defineProperty(this, "reformat", { value: options.reformat });

		// call the base type constructor
		ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	StringFormatRule.prototype = new ValidatedPropertyRule();
	StringFormatRule.prototype.constructor = StringFormatRule;

	// extend the base type
	StringFormatRule.mixin({

		// returns true if the property is valid, otherwise false
		isValid: function StringFormatRule$isValid(obj, prop, val) {
			var isValid = true;
			if (val && val != "") {
				this.expression.lastIndex = 0;
				isValid = this.expression.test(val);
				if (isValid && this.reformat) {
					if (this.reformat instanceof Function) {
						val = this.reformat(val);
					}
					else {
						this.expression.lastIndex = 0;
						val = val.replace(this.expression, this.reformat);
					}
					prop.value(obj, val);
				}
			}
			return isValid;
		},

		// get the string representation of the rule
		toString: function () {
			return $format("{0}.{1} formatted as {2}",
				[this.get_property.get_containingType().get_fullName(),
				this.get_property().get_name(),
				this.description]);
		}
	});

	// Expose the rule publicly
	Rule.stringFormat = StringFormatRule;
	ExoWeb.Model.StringFormatRule = StringFormatRule;

	// #endregion

	// #region ExoWeb.Model.ListLengthRule
	//////////////////////////////////////////////////

	function ListLengthRule(rootType, options) {
		/// <summary>Creates a rule that validates a list property contains a specific range of items.</summary>
		/// <param name="rootType" type="Type">The model type the rule is for.</param>
		/// <param name="options" type="Object">
		///		The options for the rule, including:
		///			property:			the property being validated (either a Property instance or string property name)
		///			min:				the minimum valid value of the property
		///			max:				the maximum valid value of the property
		///			minFn:				a function returning the minimum valid value of the property
		///			maxFn:				a function returning the maximum valid value of the property
		///			name:				the optional unique name of the type of validation rule
		///			conditionType:		the optional condition type to use, which will be automatically created if not specified
		///			category:			ConditionType.Error || ConditionType.Warning (defaults to ConditionType.Error)
		///			message:			the message to show the user when the validation fails
		///		    onChangeOf:			an array of property paths (strings, Property or PropertyChain instances) that drive when the rule should execute due to property changes
		/// </param>
		/// <returns type="ListLengthRule">The new list length rule.</returns>

		// ensure the rule name is specified
		options.name = options.name || "ListLength";

		// call the base type constructor
		RangeRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	ListLengthRule.prototype = new RangeRule();
	ListLengthRule.prototype.constructor = ListLengthRule;

	// extend the base type
	ListLengthRule.mixin({

		// returns true if the property is valid, otherwise false
		isValid: function ListLengthRule$isValid(obj, prop, val) {

			var range = this.range(obj);

			return val === null || val === undefined || ((!range.min || val.length >= range.min) && (!range.max || val.length <= range.max));
		},

		message: function ListLengthRule$message(obj) {

			var range = this.range(obj);

			// ensure the error message is specified
			var message =
				(range.min && range.max ? Resource.get("listlength-between").replace("{min}", this.property.format(range.min)).replace("{max}", this.property.format(range.max)) : 
						range.min ?
							Resource.get("listlength-at-least").replace("{min}", this.property.format(range.min)) : // at least ordinal
							Resource.get("listlength-at-most").replace("{max}", this.property.format(range.max))); // at most ordinal

			return message.replace('{property}', this.getPropertyLabel(obj));
		}
	});

	// Expose the rule publicly
	Rule.listLength = ListLengthRule;
	ExoWeb.Model.ListLengthRule = ListLengthRule;

	// #endregion

	// #region ExoWeb.Model.ConditionTypeSet
	//////////////////////////////////////////////////

	function ConditionTypeSet(name) {
		if (allConditionTypeSets[name]) {
			throw new Error("A set with the name \"" + name + "\" has already been created.");
		}

		Object.defineProperty(this, "name", { value: name });
		Object.defineProperty(this, "types", { value: [] });
		Object.defineProperty(this, "active", { value: false, writable: true });
		Object.defineProperty(this, "conditions", { value: [] });

		allConditionTypeSets[name] = this;
	}

	var allConditionTypeSets = ConditionTypeSet.allConditionTypeSets = {};

	ConditionTypeSet.all = function ConditionTypeSet$all() {
		/// <summary>
		/// Returns an array of all condition type sets that have been created.
		/// Note that the array is created each time the function is called.
		/// </summary>
		/// <returns type="Array" />

		var all = [];
		for (var name in allConditionTypeSets) {
			all.push(allConditionTypeSets[name]);
		}
		return all;
	};

	ConditionTypeSet.get = function ConditionTypeSet$get(name) {
		/// <summary>
		/// Returns the condition type set with the given name, if it exists.
		/// </summary>
		/// <param name="name" type="String" />
		/// <returns type="ConditionTypeSet" />

		return allConditionTypeSets[name];
	};

	ConditionTypeSet.prototype = {
		activate: function ConditionTypeSet$activate(value) {
			if (!this.active) {
				this.active = true;
				this._raiseEvent("activated");
			}
		},
		deactivate: function ConditionTypeSet$deactivate() {
			if (this.active) {
				this.active = false;
				this._raiseEvent("deactivated");
			}
		},
		addActivated: function ConditionTypeSet$addActivated(handler) {
			this._addEvent("activated", handler);
		},
		removeActivated: function ConditionTypeSet$removeActivated(handler) {
			this._removeEvent("activated", handler);
		},
		addDeactivated: function ConditionTypeSet$addDeactivated(handler) {
			this._addEvent("deactivated", handler);
		},
		removeDeactivated: function ConditionTypeSet$removeDeactivated(handler) {
			this._removeEvent("deactivated", handler);
		},

		addConditionsChanged: function ConditionTypeSet$addConditionsChanged(handler) {

			// subscribe to the event
			this._addEvent("conditionsChanged", handler);

			// Return the condition type to support method chaining
			return this;
		},

		removeConditionsChanged: function ConditionTypeSet$removeConditionsChanged(handler) {
			this._removeEvent("conditionsChanged", handler);
		}
	};

	ConditionTypeSet.mixin(ExoWeb.Functor.eventing);

	ExoWeb.Model.ConditionTypeSet = ConditionTypeSet;

	// #endregion

	// #region ExoWeb.Model.ConditionType
	//////////////////////////////////////////////////

	function ConditionType(code, category, message, sets, origin) {
		// So that sub types can use it's prototype.
		if (arguments.length === 0) {
			return;
		}

		if (allConditionTypes[code]) {
			throw new Error("A condition type with the code \"" + code + "\" has already been created.");
		}

		Object.defineProperty(this, "code", { value: code });
		Object.defineProperty(this, "category", { value: category });
		Object.defineProperty(this, "message", { value: message });
		Object.defineProperty(this, "sets", { value: sets || [] });
		Object.defineProperty(this, "rules", { value: [] });
		Object.defineProperty(this, "conditions", { value: [] });
		Object.defineProperty(this, "origin", { value: origin });

		if (sets && sets.length > 0) {
			Array.forEach(sets, function(s) {
				s.types.push(this);
			}, this);
		}

		allConditionTypes[code] = this;
	}

	var allConditionTypes = ConditionType.allConditionTypes = {};

	ConditionType.all = function ConditionType$all() {
		/// <summary>
		/// Returns an array of all condition types that have been created.
		/// Note that the array is created each time the function is called.
		/// </summary>
		/// <returns type="Array" />

		var all = [];
		for (var name in allConditionTypes) {
			all.push(allConditionTypes[name]);
		}
		return all;
	}

	ConditionType.get = function ConditionType$get(code) {
		/// <summary>
		/// Returns the condition type with the given code, if it exists.
		/// </summary>
		/// <param name="code" type="String" />
		/// <returns type="ConditionTypeSet" />

		return allConditionTypes[code];
	};

	ConditionType.prototype = {

		// adds or removes a condition from the model for the specified target if necessary
		when: function ConditionType$when(condition, target, properties, message) {

			// get the current condition if it exists
			var conditionTarget = target.meta.getCondition(this);

			// add the condition on the target if it does not exist yet
			if (condition) {

				// if the message is a function, invoke to get the actual message
				message = message instanceof Function ? message(target) : message;

				// create a new condition if one does not exist
				if (!conditionTarget) {
					return new Condition(this, message, target, properties, "client");
				}

				// replace the condition if the message has changed
				else if (message && message != conditionTarget.condition.message) {

					// destroy the existing condition
					conditionTarget.condition.destroy();

					// create a new condition with the updated message
					return new Condition(this, message, target, properties, "client");
				}

				// otherwise, just return the existing condition
				else {
					return conditionTarget.condition;
				}
			}

			// Destroy the condition if it exists on the target and is no longer valid
			if (conditionTarget != null)
				conditionTarget.condition.destroy();

			// Return null to indicate that no condition was created
			return null;
		},
		extend: function ConditionType$extend(data) {
			for (var prop in data) {
				if (prop !== "type" && prop !== "rule" && !this["get_" + prop]) {
					var fieldName = "_" + prop;
					this[fieldName] = data[prop];
					this["get" + fieldName] = function ConditionType$getter() {
						return this[fieldName];
					}
				}
			}
		},
	
		addConditionsChanged: function ConditionType$addConditionsChanged(handler) {

			// subscribe to the event
			this._addEvent("conditionsChanged", handler);

			// Return the condition type to support method chaining
			return this;
		},

		removeConditionsChanged: function ConditionType$removeConditionsChanged(handler) {
			this._removeEvent("conditionsChanged", handler);
		}
	}

	ConditionType.mixin(Functor.eventing);

	ExoWeb.Model.ConditionType = ConditionType;

	(function() {
		//////////////////////////////////////////////////////////////////////////////////////
		function Error(code, message, sets, origin) {
			ConditionType.call(this, code, "Error", message, sets, origin);
		}

		Error.prototype = new ConditionType();

		ExoWeb.Model.ConditionType.Error = Error;

		//////////////////////////////////////////////////////////////////////////////////////
		function Warning(code, message, sets, origin) {
			ConditionType.call(this, code, "Warning", message, sets, origin);
		}

		Warning.prototype = new ConditionType();

		ExoWeb.Model.ConditionType.Warning = Warning;

		//////////////////////////////////////////////////////////////////////////////////////
		function Permission(code, message, sets, permissionType, isAllowed, origin) {
			ConditionType.call(this, code, "Permission", message, sets, origin);
			Object.defineProperty(this, "permissionType", { value: permissionType });
			Object.defineProperty(this, "isAllowed", { value: isAllowed });
		}

		Permission.prototype = new ConditionType();

		ExoWeb.Model.ConditionType.Permission = Permission;
	})();

	// #endregion

	// #region ExoWeb.Model.ConditionTarget
	//////////////////////////////////////////////////

	function ConditionTarget(condition, target, properties) {
		/// <summary>Represents the association of a condition to a specific target entity.</summary>
		/// <param name="condition" type="Condition">The condition the target is for.</param>
		/// <param name="target" type="Entity">The target entity the condition is associated with.</param>
		/// <param name="properties" type="Array" elementType="Property">The set of properties on the target entity the condition is related to.</param>
		/// <returns type="ConditionTarget">The new condition target.</returns>

	    /// <field name="target" type="Entity">The target entity the condition is associated with.</field>
	    /// <field name="condition" type="Condition">The condition the target is for.</field>
	    /// <field name="properties" type="Array" elementType="Property">The set of properties on the target entity the condition is related to.</field>

	    Object.defineProperty(this, "target", { value: target });
		Object.defineProperty(this, "condition", { value: condition });
		Object.defineProperty(this, "properties", { value: properties });

		// attach the condition target to the target entity
		target.meta.setCondition(this);
	}

	// #endregion

	// #region ExoWeb.Model.Condition
	//////////////////////////////////////////////////

	function Condition(type, message, target, properties, origin) {
		/// <summary>Represents an instance of a condition of a specific type associated with one or more entities in a model.</summary>
	    /// <param name="type" type="ConditionType">The type of condition, which usually is an instance of a subclass like Error, Warning or Permission.</param>
	    /// <param name="message" type="String">The optional message to use for the condition, which will default to the condition type message if not specified.</param>
		/// <param name="target" type="Entity">The root target entity the condition is associated with.</param>
	    /// <param name="properties" type="Array" elementType="String">The set of property paths specifying which properties and entities the condition should be attached to.</param>
		/// <param name="origin" type="String">The original source of the condition, either "client" or "server".</param>
		/// <returns type="Condition">The new condition instance.</returns>

		/// <field name="type" type="ConditionType">The type of condition, which usually is an instance of a subclass like Error, Warning or Permission.</field>
		/// <field name="message" type="String">The optional message to use for the condition, which will default to the condition type message if not specified.</field>
		/// <field name="origin" type="String">The original source of the condition, either "client" or "server".</field>
		/// <field name="targets" type="Array" elementType="ConditionTarget">The set of condition targets that link the condition to specific entities and properties.</field>

		Object.defineProperty(this, "type", { value: type });
		Object.defineProperty(this, "message", { value: message || (type ? type.message : undefined) });
		Object.defineProperty(this, "origin", { value: origin });

		var targets = [];

		// create targets if a root was specified
		if (target) {

			// set the properties to an empty array if not specified and normalize the paths to expand {} syntax if used
			properties = PathTokens.normalizePaths(properties || []);

			// create a single condition target if the specified properties are all on the root
			if (properties.every(function (p) { return p.length === 1; }))
				targets.push(new ConditionTarget(this, target, properties));

			// otherwise, process the property paths to create the necessary sources
			else {
				// process each property path to build up the condition sources
				for (var p = properties.length - 1; p >= 0; p--) {
					var steps = properties[p].steps;
					var instances = [target];

					var leaf = steps.length - 1;

					// iterate over each step along the path
					for (var s = 0; s < steps.length; s++) {
						var step = steps[s].property;
						var childInstances = [];

						// create condition targets for all instances for the current step along the path
						for (var i = instances.length - 1; i >= 0; i--) {
							var instance = instances[i];

							// get the property for the current step and instance type and skip if the property cannot be found
							var property = instance.meta.type.property(step);
							if (!property) {
								continue;
							}

							// only create conditions on the last step, the leaf node
							if (s === leaf) {
								// see if a target already exists for the current instance
								var conditionTarget = null;
								for (var t = targets.length - 1; t >= 0; t--) {
									if (targets[t].target === instance) {
										conditionTarget = targets[t];
										break;
									}
								}

								// create the condition target if it does not already exist
								if (!conditionTarget) {
									conditionTarget = new ConditionTarget(this, instance, [property]);
									targets.push(conditionTarget);
								}

								// otherwise, just ensure it references the current step
								else if (conditionTarget.properties.indexOf(property) < 0)
									conditionTarget.properties.push(property);
							}

							// get the value of the current step
							var child = property.value(instance);

							// add the children, if any, to the set of child instances to process for the next step
							if (child instanceof Entity)
								childInstances.push(child);
							else if (child instanceof Array && child.length > 0 && child[0] instanceof Entity)
								childInstances = childInstances.concat(child);
						}

						// assign the set of instances to process for the next step
						instances = childInstances;
					}
				}
			}
		}

		// store the condition targets
		Object.defineProperty(this, "targets", { value: targets });

		// raise events for the new condition
		if (this.type != formatConditionType) {

			// raise events on condition targets
			for (var t = targets.length - 1; t >= 0; t--) {
				var conditionTarget = targets[t];

				// instance events
				conditionTarget.target.meta._raiseEvent("conditionsChanged", [conditionTarget.target.meta, { conditionTarget: conditionTarget, add: true, remove: false }]);

				// type events
				for (var type = conditionTarget.target.meta.type; type; type = type.baseType) {
					type._raiseEvent("conditionsChanged", [conditionTarget.target.meta, { conditionTarget: conditionTarget, add: true, remove: false }]);
				}
			}

			// raise events on condition types
			this.type.conditions.push(this);
			this.type._raiseEvent("conditionsChanged", [this.type, { condition: this, add: true, remove: false }]);

			// raise events on condition type sets
			if (this.type.sets) {
				for (var s = this.type.sets.length - 1; s >= 0; s--) {
					var set = this.type.sets[s];
					set.conditions.push(this);
					set._raiseEvent("conditionsChanged", [set, { condition: this, add: true, remove: false }]);
				}
			}
		}
	}

	// implementation
	Condition.mixin({
		destroy: function Condition$destroy() {
			/// <summary>Removes the condition targets from all target instances and raises condition change events.</summary>

			// raise events on condition type sets
			if (this.type.sets) {
				for (var s = this.type.sets.length - 1; s >= 0; s--) {
					var set = this.type.sets[s];
					set.conditions.remove(this);
					set._raiseEvent("conditionsChanged", [set, { condition: this, add: false, remove: true }]);
				}
			}

			// raise events on condition types
			this.type.conditions.remove(this);
			this.type._raiseEvent("conditionsChanged", [this.type, { condition: this, add: false, remove: true }]);

			for (var t = this.targets.length - 1; t >= 0; t--) {
				var conditionTarget = this.targets[t];
				conditionTarget.target.meta.clearCondition(conditionTarget.condition.type);

				// instance events
				conditionTarget.target.meta._raiseEvent("conditionsChanged", [conditionTarget.target.meta, { conditionTarget: conditionTarget, add: false, remove: true }]);

				// type events
				for (var type = conditionTarget.target.meta.type; type; type = type.baseType) {
					type._raiseEvent("conditionsChanged", [conditionTarget.target.meta, { conditionTarget: conditionTarget, add: false, remove: true }]);
				}
			}

			// remove references to all condition targets
			this.targets.slice(0, 0);
		},
		toString: function Condition$toString() {
			return this.message;
		}
	});

	// Expose the type publicly
	ExoWeb.Model.Condition = Condition;

	// #endregion

	// #region ExoWeb.Model.FormatError
	//////////////////////////////////////////////////

	function FormatError(message, invalidValue) {
		Object.defineProperty(this, "message", { value: message });
		Object.defineProperty(this, "invalidValue", { value: invalidValue });
	}

	var formatConditionType = new ConditionType.Error("FormatError", "The value is not properly formatted.", []);

	FormatError.mixin({
		createCondition: function FormatError$createCondition(target, prop) {
			return new Condition(formatConditionType,
				this.message.replace("{property}", prop.get_label()),
				target,
				[prop.get_name()],
				"client");
		},
		toString: function FormateError$toString() {
			return this._invalidValue;
		}
	});

	ExoWeb.Model.FormatError = FormatError;

	// #endregion

	// #region ExoWeb.Model.FormatProvider
	//////////////////////////////////////////////////

	var formatProvider = function formatProvider(type, format) {
		throw new Error("Format provider has not been implemented.  Call ExoWeb.Model.setFormatProvider(fn);");
	};

	function getFormat(type, format) {

		// return null if a format specifier was not provided
		if (!format || format === '')
			return null;

		// initialize format cache
		if (!type._formats)
			type._formats = {};

		// first see if the requested format is cached
		var f = type._formats[format];
		if (f)
			return f;

		// then see if it is an entity type
		if (type.meta && type.meta instanceof Type)
			type._formats[format] = f = Format.fromTemplate(type, format);

		// otherwise, call the format provider to create a new format
		else
			type._formats[format] = f = formatProvider(type, format);

		return f;
	}

	function setFormatProvider(fn) {
		formatProvider = fn;
	}

	ExoWeb.Model.getFormat = getFormat;

	// #endregion

	// #region ExoWeb.Model.LazyLoader
	//////////////////////////////////////////////////

	/*global isType, PathTokens, logWarning, parseFunctionName, getValue, Signal */

	function LazyLoader() {
	}

	LazyLoader.eval = function LazyLoader$eval(target, path, successCallback, errorCallback, scopeChain, thisPtr/*, continueFn, performedLoading, root, processed, invokeImmediatelyIfPossible*/) {
		var processed, root, performedLoading, continueFn, step, i, value, invokeImmediatelyIfPossible;

		if (path === undefined || path === null) {
			path = "";
		}

		if (isType(path, String)) {
			path = new PathTokens(path);
		}
		else if (isType(path, Array)) {
			logWarning("Calling LazyLoader.eval with a path Array is deprecated, please use a string path instead.");
			path = new PathTokens(path.join("."));
		}
		else if (!isType(path, PathTokens)) {
			throw new Error("Unknown path \"" + path + "\" of type " + parseFunctionName(path.constructor) + ".");
		}

		scopeChain = scopeChain || [window];

		// If additional arguments were specified (internal), then use those.
		if (arguments.length === 11) {
			// Allow an invocation to specify continuing loading properties using a given function, by default this is LazyLoader.eval.
			// This is used by evalAll to ensure that array properties can be force loaded at any point in the path.
			continueFn = arguments[6] instanceof Function ? arguments[6] : continueFn;
			// Allow recursive calling function (eval or evalAll) to specify that loading was performed.
			performedLoading = arguments[7] instanceof Boolean ? arguments[7] : false;
			// Allow recursive calling function (eval or evalAll) to specify the root object being used.
			root = arguments[8];
			// Allow recursive calling function (eval or evalAll) to specify the processed steps.
			processed = arguments[9];
			// Allow recursive calling function (eval or evalAll) to specify whether to invoke the callback immmediately if possible (when no loading is required).
			invokeImmediatelyIfPossible = arguments[10];
		}
		// Initialize to defaults.
		else {
			continueFn = LazyLoader.eval;
			performedLoading = false;
			root = target;
			processed = [];
			invokeImmediatelyIfPossible = null;
		}

		// If the target is null or undefined then attempt to backtrack using the scope chain
		if (target === undefined || target === null) {
			target = root = scopeChain.dequeue();
		}
	
		while (path.steps.length > 0) {
			// If null or undefined was passed in with no scope chain, fail
			if (target === undefined || target === null) {
				if (errorCallback) {
					errorCallback.apply(thisPtr || this, ["Target is null or undefined"]);
				}
				else {
					throw new Error("Cannot complete property evaluation because the target is null or undefined");
				}
			}

			// If an array is encountered and this call originated from "evalAll" then delegate to "evalAll", otherwise
			// this will most likely be an error condition unless the remainder of the path are properties of Array.
			if (continueFn !== LazyLoader.eval && target instanceof Array) {
				continueFn(target, path, successCallback, errorCallback, scopeChain, thisPtr, continueFn, performedLoading, root, processed, invokeImmediatelyIfPossible);
				return;
			}

			// Get the next step to evaluate
			step = path.steps.dequeue();

			// If the target is not loaded then load it and continue when complete
			if (LazyLoader.isRegistered(target, null, step.property)) {
				performedLoading = true;
				Array.insert(path.steps, 0, step);
				LazyLoader.load(target, step.property, false, function () {
					continueFn(target, path, successCallback, errorCallback, scopeChain, thisPtr, continueFn, performedLoading, root, processed, invokeImmediatelyIfPossible);
				});
				return;
			}

			// Get the value of the current step
			value = getValue(target, step.property);

			// If the value is undefined then there is a problem since getValue returns null if a property exists but returns no value.
			if (value === undefined) {
				// Attempt to backtrack using the next item in the scope chain.
				if (scopeChain.length > 0) {
					target = root = scopeChain.dequeue();
					Array.insert(path.steps, 0, step);
					for (i = processed.length - 1; i >= 0; i -= 1) {
						Array.insert(path.steps, 0, processed[i]);
					}
					processed.length = 0;
				}
				// Otherwise, fail since the path could not be evaluated
				else {
					if (errorCallback) {
						errorCallback.apply(thisPtr || this, ["Property is undefined: " + step.property]);
					}
					else {
						throw new Error("Cannot complete property evaluation because a property is undefined: " + step.property);
					}

					return;
				}
			}
			// The next target is null (nothing left to evaluate) or there is a cast of the current property and the value is
			// not of the cast type (no need to continue evaluating).
			else if (value === null || (step.cast && !isType(value, step.cast))) {
				if (successCallback) {
					successCallback.apply(thisPtr || this, [null, performedLoading, root]);
				}
				return;
			}
			// Otherwise, continue to the next property.
			else {
				processed.push(step);
				target = value;
			}
		}

		// Load final object
		if (target !== undefined && target !== null && LazyLoader.isRegistered(target)) {
			performedLoading = true;
			LazyLoader.load(target, null, false, successCallback ? successCallback.prepare(thisPtr || this, [target, performedLoading, root]) : undefined);
		}
		else if (successCallback) {
			successCallback.apply(thisPtr || this, [target, performedLoading, root]);
		}
	};

	LazyLoader.evalAll = function LazyLoader$evalAll(target, path, successCallback, errorCallback, scopeChain, thisPtr/*, continueFn, performedLoading, root, processed, invokeImmediatelyIfPossible*/) {
		var root, performedLoading, processed, invokeImmediatelyIfPossible, signal, results, errors, successCallbacks, errorCallbacks, allSucceeded;

		if (arguments.length === 11) {
			performedLoading = arguments[7] instanceof Boolean ? arguments[7] : false;
			root = arguments[8];
			processed = arguments[9];
			invokeImmediatelyIfPossible = arguments[10];
		}
		else {
			performedLoading = false;
			root = target;
			processed = [];
			invokeImmediatelyIfPossible = null;
		}

		// Ensure that the target is an array
		if (!(target instanceof Array)) {
			LazyLoader.eval(target, path, successCallback, errorCallback, scopeChain, thisPtr, LazyLoader.evalAll, performedLoading, root, processed, invokeImmediatelyIfPossible);
			return;
		}
			// Ensure that the array is loaded, then continue
		else if (LazyLoader.isRegistered(target)) {
			LazyLoader.load(target, null, false, function () {
				LazyLoader.evalAll(target, path, successCallback, errorCallback, scopeChain, thisPtr, LazyLoader.evalAll, performedLoading, root, processed, invokeImmediatelyIfPossible);
			});
			return;
		}

		signal = new Signal("evalAll - " + path);
		results = [];
		errors = [];
		successCallbacks = [];
		errorCallbacks = [];
		allSucceeded = true;

		target.forEach(function (subTarget, i) {
			results.push(null);
			errors.push(null);
			successCallbacks.push(signal.pending(function (result, performedLoadingOne, rootOne) {
				performedLoading = performedLoading || performedLoadingOne;
				results[i] = result;
				if (root !== rootOne) {
					logWarning("Found different roots when evaluating all paths.");
				}
				root = rootOne;
			}, null, invokeImmediatelyIfPossible));
			errorCallbacks.push(signal.orPending(function (err) {
				allSucceeded = false;
				errors[i] = err;
			}, null, invokeImmediatelyIfPossible));
		});

		target.forEach(function (subTarget, i) {
			// Make a copy of the original path tokens for arrays so that items' processing don't affect one another.
			if (path instanceof PathTokens) {
				path = path.buildExpression();
			}
			LazyLoader.eval(subTarget, path, successCallbacks[i], errorCallbacks[i], scopeChain, thisPtr, LazyLoader.evalAll, performedLoading, root, processed.slice(0), invokeImmediatelyIfPossible);
		});

		signal.waitForAll(function () {
			if (allSucceeded) {
				// call the success callback if one exists
				if (successCallback) {
					successCallback.apply(thisPtr || this, [results, performedLoading, root]);
				}
			}
			else if (errorCallback) {
				errorCallback.apply(thisPtr || this, [errors]);
			}
			else {
				errors.forEach(function (e) {
					throw new Error("Error encountered while attempting to eval paths for all items in the target array: " + e);
				});
			}
		}, null, invokeImmediatelyIfPossible);
	};

	LazyLoader.isRegistered = function LazyLoader$isRegistered(obj, targetLoader, targetProperty) {
		var reg, loader, propertyLoader, targetPropertyName;

		if (obj === null || obj === undefined) {
			return false;
		}

		reg = obj._lazyLoader;

		if (!reg) {
			return false;
		}

		if (targetProperty) {
			if (isString(targetProperty)) {
				targetPropertyName = targetProperty;
			} else if (targetProperty instanceof Property) {
				targetPropertyName = targetProperty.get_name();
			} else {
				throw new Error("Unexpected targetProperty argument value \"" + targetProperty + "\" in LazyLoader.isRegistered().");
			}
			// Attempt to retrieve a property-specific loader if it exists.
			if (reg.byProp && reg.byProp.hasOwnProperty(targetPropertyName)) {
				propertyLoader = reg.byProp[targetPropertyName];
				if (propertyLoader !== null && propertyLoader !== undefined) {
					return true;
				}
			}
		}

		loader = reg.allProps;
		if (loader !== null && loader !== undefined) {
			if (targetLoader) {
				return loader === targetLoader;
			}
			return true;
		}

		return false;
	};

	LazyLoader.isLoaded = function LazyLoader$isLoaded(obj /*, paths...*/) {
		var result, paths, singlePath, singleStep, nextStep, propName, filterType, property, value;

		if (obj === undefined) {
			result = undefined;
		} else if (obj === null) {
			result = null;
		} else {
			if (arguments.length === 1) {
				// No paths were specified...
				paths = null;
			} else {
				// Paths were specified in some form. They can be passed in as an array of 1 or
				// more arguments, or passed in seperately to be processed as "rest" arguments.
				if (arguments.length === 2) {
					if (isType(arguments[1], Array)) {
						// 1) isLoaded(obj, ["arg1", "arg2", ...]);
						paths = arguments[1];
					} else {
						// 2) isLoaded(obj, "arg");
						paths = [arguments[1]];
					}
				} else {
					// 3) isLoaded(obj, "arg1", "arg2", ...);
					paths = Array.prototype.slice.call(arguments, 1);
				}
			}

			if (!paths || paths.length === 0) {
				// No paths, so this is only an object-level check for the existence of a loader.
				result = !LazyLoader.isRegistered(obj);
			} else if (paths.length === 1) {
				// Only one path, so walk down the path until a non-loaded step is detected.
				singlePath = paths[0];

				// Remove unnecessary "this." prefix.
				if (isType(singlePath, String) && singlePath.startsWith("this.")) {
					singlePath = singlePath.substring(5);
				}

				// Attempt to optimize for a single property name or final path step.
				if (isType(singlePath, String) && singlePath.indexOf(".") < 0) {
					if (singlePath.length === 0) {
						throw new Error("Unexpected empty string passed to LazyLoader.isLoaded().");
					}
					propName = singlePath;
				} else if (isType(singlePath, PathTokens)) {
					if (singlePath.steps.length === 0) {
						throw new Error("Unexpected empty path tokens passed to LazyLoader.isLoaded().");
					} else if (singlePath.steps.length === 1) {
						singleStep = singlePath.steps.dequeue();
						propName = singleStep.property;
					}
				}

				if (propName) {
					// Optimize for a single property name or path step.
					if (LazyLoader.isRegistered(obj, null, propName)) {
						result = false;
					} else {
						// Get the value of the single property or final path step.
						if (obj.meta) {
							property = obj.meta.property(propName, true);
							value = property.value(obj);
						} else {
							value = getValue(obj, propName);
						}

						if (!value) {
							// There is no value, so there can be no lazy loader registered.
							return true;
						} else {
							// If the property value doesn't have a registered lazy loader, then it is considered loaded.
							return !LazyLoader.isRegistered(value);
						}
					}
				} else {
					if (isType(singlePath, String)) {
						if (singlePath.length === 0) {
							throw new Error("Unexpected empty string passed to LazyLoader.isLoaded().");
						}
						singlePath = new PathTokens(singlePath);
					} else if (!isType(singlePath, PathTokens)) {
						throw new Error("Unknown path \"" + singlePath + "\" of type " + parseFunctionName(singlePath.constructor) + ".");
					}

					// Get the value of the next step.
					nextStep = singlePath.steps.dequeue();
					if (obj.meta) {
						property = obj.meta.property(nextStep.property, true);
						value = property.value(obj);
					} else {
						value = getValue(obj, nextStep.property);
					}

					if (!value) {
						// There is no value, so there can be no lazy loader registered.
						return true;
					} else if (LazyLoader.isRegistered(value)) {
						// There is a lazy loader, so stop processing and return false.
						return false;
					} else {
						// There is no lazy loader, so continue processing the next step.
						if (nextStep.cast) {
							filterType = Model.getJsType(nextStep.cast, true);
						}
						if (nextStep.cast && !filterType) {
							// Stop processing since the filter type doesn't yet exist.
							result = true;
						} else if (isArray(value)) {
							// Make a copy of the original path tokens for arrays so that items' processing don't affect one another.
							if (singlePath instanceof PathTokens) {
								singlePath = singlePath.buildExpression();
							}
							result = !value.some(function (item) {
								return (!filterType || item instanceof filterType) && !LazyLoader.isLoaded(item, singlePath);
							});
						} else if (filterType && !(value instanceof filterType)) {
							// Stop processing since the value doesn't pass the filter.
							result = true;
						} else {
							result = LazyLoader.isLoaded(value, singlePath);
						}
					}
				}
			} else {
				// Multiple paths, so check each one individually.
				result = !paths.some(function (path) {
					// Use some and the inverse of the result in order to exit
					// immediately as soon as a non-loaded step is found.
					return !LazyLoader.isLoaded(obj, path);
				});
			}
		}

		return result;
	};

	LazyLoader.load = function LazyLoader$load(obj, propName, inScope, callback, thisPtr) {
		var reg = obj._lazyLoader;
		if (!reg) {
			if (callback && callback instanceof Function) {
				callback.call(thisPtr || this);
			}
		}
		else {
			var loader;
			if (propName && reg.byProp) {
				loader = reg.byProp[propName];
			}

			if (!loader) {
				loader = reg.allProps;
			}

			if (!loader) {
				throw new Error($format("Attempting to load object but no appropriate loader is registered. object: {0}, property: {1}", obj, propName));
			}

			loader.load(obj, propName, inScope, callback, thisPtr);
		}
	};

	LazyLoader.register = function LazyLoader$register(obj, loader, propName) {
		var reg = obj._lazyLoader;

		if (!reg) {
			reg = obj._lazyLoader = {};
		}

		if (propName) {
			if (!reg.byProp) {
				reg.byProp = {};
			}

			reg.byProp[propName] = loader;
		}
		else {
			obj._lazyLoader.allProps = loader;
		}
	};

	LazyLoader.unregister = function LazyLoader$unregister(obj, loader, propName) {
		var reg = obj._lazyLoader;

		if (!reg) {
			return;
		}

		if (propName) {
			delete reg.byProp[propName];
		} else if (reg.byProp) {
			var allDeleted = true;
			for (var p in reg.byProp) {
				if (reg.byProp[p] === loader) {
					delete reg.byProp[p];
				}
				else {
					allDeleted = false;
				}
			}

			if (allDeleted) {
				delete reg.byProp;
			}
		}

		if (reg.allProps === loader) {
			delete reg.allProps;
		}

		if (!reg.byProp && !reg.allProps) {
			delete obj._lazyLoader;
		}
	};

	// #endregion

	// #region ExoWeb.Model.Utilities
	//////////////////////////////////////////////////

	var coreGetValue = getValue;

	// If a getter method matching the given property name is found on the target it is invoked and returns the 
	// value, unless the the value is undefined, in which case null is returned instead.  This is done so that 
	// calling code can interpret a return value of undefined to mean that the property it requested does not exist.
	// TODO: better name
	getValue = function getValueOverride(target, property) {

		// first see if the property is a model property
		if (target instanceof ExoWeb.Model.Entity || (target.meta && target.meta instanceof ExoWeb.Model.Type)) {
			var prop = target.meta.type.property(property);
			if (prop) {
				var value = prop.value(target);
				if (value === undefined) {
					value = null;
				}
				return value;
			}
		}

		return coreGetValue(target, property);
	}

	ExoWeb.getValue = getValue;

	// #endregion

	// #region ExoWeb.Mapper.ObjectProvider
	//////////////////////////////////////////////////

	/*global exports, context, Batch */

	var objectProviderFn = function objectProviderFn() {
		throw new Error("Object provider has not been implemented. Call ExoWeb.Mapper.setObjectProvider(fn);");
	};

	function objectProvider(type, ids, paths, inScope, changes, onSuccess, onFailure, thisPtr) {
		var scopeQueries, batch;

		// ensure correct value of "scopeQueries" argument
		if (onSuccess !== undefined && onSuccess !== null && !(onSuccess instanceof Function)) {
			// scopeQueries is included in call, so shift arguments
			scopeQueries = onSuccess;
			onSuccess = onFailure;
			onFailure = thisPtr;
			thisPtr = arguments.length > 8 ? arguments[8] : null;
		}
		else {
			// scopeQueries is NOT included in call, so insert default value into args array
			scopeQueries = context.server._scopeQueries; //ignore jslint
		}

		if (onFailure !== undefined && onFailure !== null && !(onFailure instanceof Function)) {
			thisPtr = onFailure;
			onFailure = null;
		}

		batch = Batch.suspendCurrent("objectProvider");

		objectProviderFn(type, ids, paths, inScope, changes, scopeQueries,
			function () {
				Batch.resume(batch);
				if (onSuccess) {
					onSuccess.apply(thisPtr || null, arguments);
				}
			},
			function () {
				Batch.resume(batch);
				if (onFailure) {
					onFailure.apply(thisPtr || null, arguments);
				}
			});
	}

	ExoWeb.Mapper.setObjectProvider = function setObjectProvider(fn) {
		objectProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.QueryProvider
	//////////////////////////////////////////////////

	/*global exports, context, Batch */

	var queryProviderFn = function queryProviderFn() {
		throw new Error("Query provider has not been implemented. Call ExoWeb.Mapper.setQueryProvider(fn);");
	};

	function queryProvider(queries, changes, onSuccess, onFailure, thisPtr) {
		var scopeQueries, batch;

		// ensure correct value of "scopeQueries" argument
		if (onSuccess !== undefined && onSuccess !== null && !(onSuccess instanceof Function)) {
			// scopeQueries is included in call, so shift arguments
			scopeQueries = onSuccess;
			onSuccess = onFailure;
			onFailure = thisPtr;
			thisPtr = arguments.length > 5 ? arguments[5] : null;
		}
		else {
			// scopeQueries is NOT included in call, so insert default value into args array
			scopeQueries = context.server._scopeQueries; //ignore jslint
		}

		if (onFailure !== undefined && onFailure !== null && !(onFailure instanceof Function)) {
			thisPtr = onFailure;
			onFailure = null;
		}

		batch = Batch.suspendCurrent("queryProvider");

		queryProviderFn(queries, changes, scopeQueries,
			function () {
				Batch.resume(batch);
				if (onSuccess) {
					onSuccess.apply(thisPtr || this, arguments);
				}
			},
			function () {
				Batch.resume(batch);
				if (onFailure) {
					onFailure.apply(thisPtr || this, arguments);
				}
			});
	}

	ExoWeb.Mapper.setQueryProvider = function setQueryProvider(fn) {
		queryProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.TypeProvider
	//////////////////////////////////////////////////

	/*global exports, Batch, copy, purge, eachProp */

	var typeProviderFn = function typeProviderFn() {
		throw new Error("Type provider has not been implemented. Call ExoWeb.Mapper.setTypeProvider(fn);");
	};

	function typeProviderImpl(types, callback, thisPtr) {
		var batch = Batch.suspendCurrent("typeProvider"),
			typesToLoad = copy(types),
			cachedTypes = [],
			typesJson = {};

		purge(typesToLoad, function (type) {
			var cachedType = window.ExoWeb.cache(type);

			if (!cachedType) {
				return false;
			}
			else if (window.ExoWeb.cacheHash && cachedType.cacheHash !== window.ExoWeb.cacheHash) {
				// the cached type definition is out of date, so remove it and continue
				window.ExoWeb.cache(type, null);
				return false;
			}

			cachedTypes.push(type);
			return true;
		});

		// If some (or all) of the types are currently cached, go ahead and call the success function.
		if (cachedTypes.length > 0) {
			cachedTypes.forEach(function (type) {
				typesJson[type] = window.ExoWeb.cache(type).types[type];
			});
		}

		if (typesToLoad.length > 0) {
			typeProviderFn(typesToLoad,
				function (result) {
					Batch.resume(batch);

					var resultsJson = result.types;

					// Add the resulting json and cache each type.
					eachProp(resultsJson, function (type) {

						// construct a json object, with the cachehash, for cacheing
						var json = { cacheHash: window.ExoWeb.cacheHash, types: {} };

						// extract the type definition
						json.types[type] = typesJson[type] = resultsJson[type];

						// cache the type
						window.ExoWeb.cache(type, json);

					});

					callback.call(thisPtr || null, true, typesJson);
				},
				function () {
					Batch.resume(batch);

					var args = copy(arguments);
					args.splice(0, 0, false);
					callback.apply(thisPtr || null, args);
				});
		}
		else {
			Batch.resume(batch);
			callback.call(thisPtr || null, true, typesJson);
		}
	}

	function deleteTypeJson(originalArgs, invocationArgs, callbackArgs) {
		// If type request was handled by another caller, then assume that typesFromJson will be called
		if (callbackArgs[0]) {
			callbackArgs.splice(1, 1, {}, callbackArgs[1]);
		}
	}

	var typeProvider = typeProviderImpl.dontDoubleUp({ callbackArg: 1, partitionedArg: 0, partitionedFilter: deleteTypeJson, memoize: true });

	ExoWeb.Mapper.setTypeProvider = function setTypeProvider(fn) {
		typeProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.ListProvider
	//////////////////////////////////////////////////

	/*global exports, context, Batch */

	var listProviderFn = function listProvider() {
		throw new Error("List provider has not been implemented. Call ExoWeb.Mapper.setListProvider(fn);");
	};

	function listProvider(ownerType, owner, listProp, paths, changes, onSuccess, onFailure, thisPtr) {
		var scopeQueries, batch, listPath, pathsToLoad, ownerId;

		// ensure correct value of "scopeQueries" argument
		if (onSuccess !== undefined && onSuccess !== null && !(onSuccess instanceof Function)) {
			// scopeQueries is included in call, so shift arguments
			scopeQueries = onSuccess;
			onSuccess = onFailure;
			onFailure = thisPtr;
			thisPtr = arguments.length > 7 ? arguments[7] : null;
		}
		else {
			// scopeQueries is NOT included in call, so insert default value into args array
			scopeQueries = context.server._scopeQueries; //ignore jslint
		}

		if (onFailure !== undefined && onFailure !== null && !(onFailure instanceof Function)) {
			thisPtr = onFailure;
			onFailure = null;
		}

		batch = Batch.suspendCurrent("listProvider");

		ownerId = owner === "static" ? null : owner;
		listPath = owner === "static" ? ownerType + "." + listProp : listProp;
		pathsToLoad = [listPath];

		// prepend list prop to beginning of each other prop
		if (paths && paths.length > 0) {
			Array.forEach(paths, function (p) {
				pathsToLoad.push(listPath + "." + p);
			});
		}

		listProviderFn(ownerType, ownerId, pathsToLoad, changes, scopeQueries,
			function () {
				Batch.resume(batch);
				if (onSuccess) {
					onSuccess.apply(thisPtr || null, arguments);
				}
			},
			function () {
				Batch.resume(batch);
				if (onFailure) {
					onFailure.apply(thisPtr || null, arguments);
				}
			});
	}

	ExoWeb.Mapper.setListProvider = function setListProvider(fn) {
		listProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.RoundtripProvider
	//////////////////////////////////////////////////

	/*global exports, context, Batch */

	var roundtripProviderFn = function roundtripProviderFn() {
		throw new Error("Roundtrip provider has not been implemented. Call ExoWeb.Mapper.setRoundtripProvider(fn);");
	};

	function roundtripProvider(root, paths, changes, onSuccess, onFailure, thisPtr) {
		var scopeQueries, batch;
	
		// ensure correct value of "scopeQueries" argument
		if (onSuccess !== undefined && onSuccess !== null && !(onSuccess instanceof Function)) {
			// scopeQueries is included in call, so shift arguments
			scopeQueries = onSuccess;
			onSuccess = onFailure;
			onFailure = thisPtr;
			thisPtr = arguments.length > 4 ? arguments[4] : null;
		}
		else {
			// scopeQueries is NOT included in call, so insert default value into args array
			scopeQueries = context.server._scopeQueries; //ignore jslint
		}

		if (onFailure !== undefined && onFailure !== null && !(onFailure instanceof Function)) {
			thisPtr = onFailure;
			onFailure = null;
		}

		batch = Batch.suspendCurrent("roundtripProvider");

		roundtripProviderFn(root, paths, changes, scopeQueries,
			function () {
				Batch.resume(batch);
				if (onSuccess) {
					onSuccess.apply(thisPtr || this, arguments);
				}
			},
			function () {
				Batch.resume(batch);
				if (onFailure) {
					onFailure.apply(thisPtr || this, arguments);
				}
			});
	}

	ExoWeb.Mapper.setRoundtripProvider = function setRoundtripProvider(fn) {
		roundtripProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.SaveProvider
	//////////////////////////////////////////////////

	/*global exports, context, Batch */

	var saveProviderFn = function saveProviderFn() {
		throw new Error("Save provider has not been implemented. Call ExoWeb.Mapper.setSaveProvider(fn);");
	};

	function saveProvider(root, changes, onSuccess, onFailure, thisPtr) {
		var scopeQueries, batch;

		// ensure correct value of "scopeQueries" argument
		if (onSuccess !== undefined && onSuccess !== null && !(onSuccess instanceof Function)) {
			// scopeQueries is included in call, so shift arguments
			scopeQueries = onSuccess;
			onSuccess = onFailure;
			onFailure = thisPtr;
			thisPtr = arguments.length > 5 ? arguments[5] : null;
		}
		else {
			// scopeQueries is NOT included in call, so insert default value into args array
			scopeQueries = context.server._scopeQueries; //ignore jslint
		}

		if (onFailure !== undefined && onFailure !== null && !(onFailure instanceof Function)) {
			thisPtr = onFailure;
			onFailure = null;
		}

		batch = Batch.suspendCurrent("saveProvider");
		saveProviderFn(root, changes, scopeQueries,
			function () {
				Batch.resume(batch);
				if (onSuccess) {
					onSuccess.apply(thisPtr || this, arguments);
				}
			},
			function () {
				Batch.resume(batch);
				if (onFailure) {
					onFailure.apply(thisPtr || this, arguments);
				}
			});
	}

	ExoWeb.Mapper.setSaveProvider = function setSaveProvider(fn) {
		saveProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.EventProvider
	//////////////////////////////////////////////////

	/*global exports, context, Batch */

	var eventProviderFn = function eventProviderFn() {
		throw new Error("Event provider has not been implemented. Call ExoWeb.Mapper.setEventProvider(fn);");
	};

	function eventProvider(eventType, eventInstance, event, paths, changes, onSuccess, onFailure, thisPtr) {
		var scopeQueries, batch;

		// ensure correct value of "scopeQueries" argument
		if (onSuccess !== undefined && onSuccess !== null && !(onSuccess instanceof Function)) {
			// scopeQueries is included in call, so shift arguments
			scopeQueries = onSuccess;
			onSuccess = onFailure;
			onFailure = thisPtr;
			thisPtr = arguments.length > 8 ? arguments[8] : null;
		}
		else {
			// scopeQueries is NOT included in call, so insert default value into args array
			scopeQueries = context.server._scopeQueries; //ignore jslint
		}

		if (onFailure !== undefined && onFailure !== null && !(onFailure instanceof Function)) {
			thisPtr = onFailure;
			onFailure = null;
		}

		batch = Batch.suspendCurrent("eventProvider");
		eventProviderFn(eventType, eventInstance, event, paths, changes, scopeQueries,
			function () {
				Batch.resume(batch);
				if (onSuccess) {
					onSuccess.apply(thisPtr || null, arguments);
				}
			},
			function () {
				Batch.resume(batch);
				if (onFailure) {
					onFailure.apply(thisPtr || null, arguments);
				}
			});
	}

	ExoWeb.Mapper.setEventProvider = function setEventProvider(fn) {
		eventProviderFn = fn;
	};

	// #endregion

	// #region ExoWeb.Mapper.ResponseHandler
	//////////////////////////////////////////////////

	function ResponseHandler(model, serverSync, options) {
		if (options === undefined || options === null) {
			throw new Error("Options cannot be null or undefined.");
		}

		this._model = model;
		this._serverSync = serverSync;
		this._options = options;
	}

	ResponseHandler.mixin({
		execute: ExoWeb.FunctionChain.prepare(
			function ResponseHandler$startResponseBatch(callback, thisPtr) {
				/// <summary>
				/// Start a new response batch.
				/// </summary>

				this._batch = Batch.start("ResponseHandler");
				callback.call(thisPtr || this);
			},
			function ResponseHandler$setServerInfo(callback, thisPtr) {
				/// <summary>
				/// Set server info from JSON
				/// </summary>

				if (this._options.serverInfo) {
					this._serverSync.set_ServerInfo(this._options.serverInfo);
				}

				callback.call(thisPtr || this);
			},

			function ResponseHandler$loadTypes(callback, thisPtr) {
				/// <summary>
				/// Load types from JSON
				/// </summary>
				if (this._options.types) {
					for (var typeName in this._options.types) {
						var mtype = this._model.type(typeName);

						// If this type has not already been loaded, laod from JSON
						if (!mtype || LazyLoader.isRegistered(mtype)) {
							var typesToUse = {};
							typesToUse[typeName] = this._options.types[typeName];
							typesFromJson(this._model, typesToUse);

							mtype = this._model.type(typeName);

							// Remove lazy-loader
							TypeLazyLoader.unregister(mtype);

							// Raise $extends handlers for the type
							raiseExtensions(mtype);
						}
					}
				}

				callback.call(thisPtr || this);
			},

			function ResponseHandler$startQueueingEvents(callback, thisPtr) {
				/// <summary>
				/// Start queueing model events
				/// </summary>

				this._eventScope = new EventScope();
				callback.call(thisPtr || this);
			},

			function ResponseHandler$applyChanges(callback, thisPtr) {
				/// <summary>
				/// Apply changes from JSON
				/// </summary>

				if (this._options.changes) {
					if (this._options.changes) {
						this._serverSync.applyChanges(this._options.checkpoint, this._options.changes, this._options.source, null, this._options.checkpoint, this._options.description ? this._options.description + ":response" : null, null, this._options.beforeApply, this._options.afterApply, callback, thisPtr);
					}
					else {
						if (this._options.source) {
							// no changes, so record empty set
							this._serverSync._changeLog.addSet(this._options.source, this._options.description + ":response");
							this._serverSync._changeLog.start({ user: this._serverSync.get_localUser() });
						}
						callback.call(thisPtr || this);
					}
				}
				else {
					callback.call(thisPtr || this);
				}
			},

			function ResponseHandler$loadInstances(callback, thisPtr) {
				/// <summary>
				/// Load instance data from JSON
				/// </summary>

				if (this._options.instances) {
					objectsFromJson(this._model, this._options.instances, function (instancesPendingInit) {
						this.instancesPendingInit = instancesPendingInit;
						callback.apply(thisPtr || this, arguments);
					}, this);
				}
				else {
					callback.call(thisPtr || this);
				}
			},

			function ResponseHandler$registerRules(callback, thisPtr) {
				/// <summary>
				/// Register all rules pending registration with the model
				/// </summary>

				this._model.registerRules();
				callback.call(thisPtr || this);
			},

			function ResponseHandler$stopQueueingEvents(callback, thisPtr) {
				/// <summary>
				/// Stop queueing model events
				/// </summary>

				this._serverSync.batchChanges(this._options.description + ":result", function () {
					this._eventScope.exit();
				}, this);

				callback.call(thisPtr || this);
			},

			function ResponseHandler$initInstances(callback, thisPtr) {
				/// <summary>
				/// Initialize all instances loaded by the response
				/// </summary>

				// Raise init events for existing instances loaded by the response
				if (this.instancesPendingInit) {
					var instances = this.instancesPendingInit;
					context.server._changeLog.batchChanges(this._options.description ? this._options.description + ":initExisting" : "responseHandlerInitExisting", context.server._localUser, function () {
						instances.forEach(function (obj) {
							for (var t = obj.meta.type; t; t = t.baseType) {
								var handler = t._getEventHandler("initExisting");
								if (handler)
									handler(obj, {});
							}
						});
					}, true);
				}

				callback.call(thisPtr || this);
			},

			function ResponseHandler$loadConditions(callback, thisPtr) {
				/// <summary>
				/// Load conditions from JSON
				/// </summary>

				if (this._options.conditions) {
					conditionsFromJson(this._model, this._options.conditions, this.instancesPendingInit, callback, thisPtr);
				}
				else {
					callback.call(thisPtr || this);
				}
			},

			function ResponseHandler$endResponseBatch(callback, thisPtr) {
				/// <summary>
				/// End the response batch.
				/// </summary>

				Batch.end(this._batch);
				callback.call(thisPtr || this);
			}
		)
	});

	ResponseHandler.execute = function (model, serverSync, options, callback, thisPtr) {
		(new ResponseHandler(model, serverSync, options)).execute(callback, thisPtr);
	};

	ExoWeb.Mapper.ResponseHandler = ResponseHandler;

	// #endregion

	// #region ExoWeb.Mapper.Translation
	//////////////////////////////////////////////////

	// Gets or loads the entity with the specified typed string id
	Entity.fromIdString = function Entity$fromIdString(idString) {
		// Typed identifiers take the form "type|id".
	    var type = idString.substring(0, idString.indexOf("|"));
	    var id = idString.substring(type.length + 1);

		// Use the left-hand portion of the id string as the object's type.
		var jstype = ExoWeb.Model.Model.getJsType(type);

		// Attempt to retrieve the object with the given id.
		var obj = jstype.meta.get(
			// Use the right-hand portion of the id string as the object's id.
			id,

			// Typed identifiers may or may not be the exact type of the instance.
			// An id string may be constructed with only knowledge of the base type.
			false
		);

		// If the object does not exist, assume it is an existing object that is not
		// yet in memory client-side, so create a ghosted instance.
		if (!obj) {
			obj = new jstype(id);
			if (jstype.meta.get_origin() === "server") {
				ObjectLazyLoader.register(obj);
			}
		}

		return obj;
	};

	function toExoModel(val, translator) {
		if (val === undefined || val === null)
			return;

		// entities only: translate forward to the server's id
		if (val instanceof ExoWeb.Model.Entity) {
			var result = {
				id: val.meta.id,
				type: val.meta.type.get_fullName()
			};

			if (val.meta.isNew) {
				result.isNew = true;
			}

			result.id = translator.forward(result.type, result.id) || result.id;
			return result;
		}

		return val;
	}

	function translateId(translator, type, id) {
		// get the server id, either translated or as the serialized entity id itself
		var serverId = translator.forward(type, id) || id;
		// get the client id, either a reverse translation of the server id or the server id itself
		var clientId = translator.reverse(type, serverId) || serverId;

		return clientId;
	}

	function fromExoModel(val, translator, create, supplementalObjectsArray) {
		if (val !== undefined && val !== null && val.type && val.id ) {
			var type = ExoWeb.Model.Model.getJsType(val.type);

			// Entities only: translate back to the client's id.  This is necessary to handle the fact that ids are created on 
			// both the client and server.  Also, in some cases a transaction references an entity that was created on the server 
			// and then committed, so that the id actually references an object that already exists on the client but with a different id.
			//--------------------------------------------------------------------------------------------------------
			if (type.meta && type.meta instanceof ExoWeb.Model.Type && translator) {
				// NOTE: don't alter the original object
				var id = translateId(translator, val.type, val.id);

				var obj = type.meta.get(id,
					// Since "fromExoModel" operates on the ExoModel change object format,
					// it can be assumed that the instance type is exact.
					true
				);

				// If the object was not found and a supplemental list was provided, then search for it
				if (!obj && supplementalObjectsArray && supplementalObjectsArray.length > 0) {
					var matches = supplementalObjectsArray.filter(function(o) {
						return o instanceof type && o.meta.id === id;
					});
					if (matches.length > 1) {
						throw new Error("Expected a single item, but found " + matches.length + ".");
					}
					obj = matches[0];
				}

				if (!obj && create) {
					obj = new type(id);
					if (type.meta.get_origin() === "server") {
						ObjectLazyLoader.register(obj);
					}
				}

				return obj;
			}

			// is this needed? Can the if statement that checks type.meta be removed?
			return val;
		}

		return val;
	}

	// #endregion

	// #region ExoWeb.Mapper.ExoModelEventListener
	//////////////////////////////////////////////////

	function ExoModelEventListener(model, translator, filters) {
		this._model = model;
		this._translator = translator;
		this._filters = filters;

		// listen for events
		model.addListChanged(this.onListChanged.bind(this));
		model.addAfterPropertySet(this.onPropertyChanged.bind(this));
		model.addObjectRegistered(this.onObjectRegistered.bind(this));
		model.addObjectUnregistered(this.onObjectUnregistered.bind(this));
	}

	ExoModelEventListener.mixin(ExoWeb.Functor.eventing);

	ExoModelEventListener.mixin({
		addChangeDetected: function ExoModelEventListener$onEvent(handler) {
			this._addEvent("changeDetected", handler);
		},

		// Model event handlers
		onListChanged: function ExoModelEventListener$onListChanged(obj, property, listChanges) {
			if (this._filters && this._filters.listChanged && this._filters.listChanged(obj, property, listChanges) !== true)
				return;

			// Recording static property changes is not supported by the JSON format or the server-side implementation.
			if (property.get_isStatic()) {
				return;
			}

			for (var i = 0; i < listChanges.length; ++i) {
				var listChange = listChanges[i];

				var change = {
					type: "ListChange",
					instance: toExoModel(obj, this._translator),
					property: property.get_name(),
					added: [],
					removed: []
				};

				var _this = this;
				if (listChange.newStartingIndex >= 0 || listChange.newItems) {
					Array.forEach(listChange.newItems, function ExoModelEventListener$onListChanged$addedItem(obj) {
						change.added.push(toExoModel(obj, _this._translator));
					});
				}
				if (listChange.oldStartingIndex >= 0 || listChange.oldItems) {
					Array.forEach(listChange.oldItems, function ExoModelEventListener$onListChanged$removedItem(obj) {
						change.removed.push(toExoModel(obj, _this._translator));
					});
				}

				this._raiseEvent("changeDetected", [change]);
			}
		},
		onObjectRegistered: function ExoModelEventListener$onObjectRegistered(obj) {
			if (this._filters && this._filters.objectRegistered && this._filters.objectRegistered(obj) !== true)
				return;

			if (obj.meta.isNew) {
				var change = {
					type: "InitNew",
					instance: toExoModel(obj, this._translator)
				};

				this._raiseEvent("changeDetected", [change]);
			}
		},
		onObjectUnregistered: function ExoModelEventListener$onObjectUnregistered(obj) {
			if (this._filters && this._filters.objectUnregistered && this._filters.objectUnregistered(obj) !== true)
				return;

			//if (obj.meta.type.get_origin() === "server") {
			//	throw new Error($format("Unregistering server-type objects is not currently supported: {0}|{1}", obj.meta.type.fullName, obj.meta.id));
			//}
		},
		onPropertyChanged: function ExoModelEventListener$onPropertyChanged(obj, property, newValue, oldValue) {
			if (this._filters && this._filters.propertyChanged && this._filters.propertyChanged(obj, property, newValue, oldValue) !== true)
				return;

			// Recording static property changes is not supported by the JSON format or the server-side implementation.
			if (property.get_isStatic()) {
				return;
			}

			if (property.get_isValueType()) {
				var valueChange = {
					type: "ValueChange",
					instance: toExoModel(obj, this._translator),
					property: property.get_name(),
					oldValue: oldValue,
					newValue: newValue
				};

				this._raiseEvent("changeDetected", [valueChange]);
			}
			else {
				var refChange = {
					type: "ReferenceChange",
					instance: toExoModel(obj, this._translator),
					property: property.get_name(),
					oldValue: toExoModel(oldValue, this._translator),
					newValue: toExoModel(newValue, this._translator)
				};

				this._raiseEvent("changeDetected", [refChange]);
			}
		}
	});

	ExoWeb.Mapper.ExoModelEventListener = ExoModelEventListener;

	// #endregion

	// #region ExoWeb.Mapper.ChangeSet
	//////////////////////////////////////////////////

	/*globals exports, Functor, ArgumentError, ArgumentNullError, ArgumentTypeError, randomText */

	function ChangeSet(source, title, user, initialChanges, code) {
		if (source === null || source === undefined) {
			throw new ArgumentNullError("source");
		}
		if (source.constructor !== String) {
			throw new ArgumentTypeError("source", "string", source);
		}
		if (source !== "init" && source !== "server" && source !== "client") {
			throw new ArgumentError("source", source + " must be in the set ['init', 'server', 'client']");
		}
		if (user !== null && user !== undefined && user.constructor !== String) {
			throw new ArgumentTypeError("user", "string", user);
		}

		this.code = code || randomText(8);
		this.source = source;
		this.title = title || null;
		this.user = user || null;
		this.changes = (initialChanges && initialChanges instanceof Array) ? [].concat(initialChanges) : [];
		this.onChangeAdded = new Functor();
		this.onChangeUndone = new Functor();
		this.onTruncated = new Functor();
	}

	ChangeSet.mixin({
		add: function (change) {
			var idx = this.changes.push(change) - 1;
			this.onChangeAdded(change, idx, this);
			return idx;
		},
		checkpoint: function (title, code) {
			// Generate a random code for the checkpoint if one is not given.
			if (!code) {
				code = randomText(10);
			}

			// Add the checkpoint and return the code.
			this.add({ type: "Checkpoint", title: title || "untitled", code: code });
			return code;
		},
		count: function (filter, thisPtr) {
			if (!filter) {
				return this.changes.length;
			}

			return this.changes.filter(filter, thisPtr).length;
		},
		lastChange: function () {
			return this.changes.length > 0 ? this.changes[this.changes.length - 1] : null;
		},
		serialize: function (forServer, filter, thisPtr) {
			if (arguments.length === 0) {
				forServer = true;
			} else if (forServer instanceof Function) {
				thisPtr = filter;
				filter = forServer;
				forServer = true;
			}

			var result = {
				source: this.source,
				changes: filter ? this.changes.filter(filter, thisPtr) : Array.prototype.slice.call(this.changes)
			};

			if (!forServer) {
				result.title = this.title;
				result.code = this.code;
				if (this.user) {
					result.user = this.user;
				}
			}

			return result;
		},
		truncate: function (checkpoint, filter, thisPtr) {
			// Allow calling as function(filter, thisPtr)
			if (checkpoint && Object.prototype.toString.call(checkpoint) === "[object Function]") {
				thisPtr = filter;
				filter = checkpoint;
				checkpoint = null;
			}

			// Wrap custom filter if a checkpoint is given.
			if (checkpoint) {
				var foundCheckpoint = false;
				var customFilter = filter;
				filter = function(change) {
					// Check to see if this is the checkpoint we're looking for.
					if (change.type === "Checkpoint" && change.code === checkpoint) {
						foundCheckpoint = true;
					}

					// Stop truncating when the checkpoint is found.
					if (foundCheckpoint === true) {
						return false;
					}

					// Delegate to custom filter if one is given.
					return customFilter ? customFilter.apply(this, arguments) : true;
				};
			}

			// Discard all changes that match the given filter
			var numRemoved;
			if (filter) {
				var removedAt = this.changes.purge(filter, thisPtr);
				numRemoved = removedAt ? removedAt.length : 0;
			} else {
				numRemoved = this.changes.length;
				this.changes.clear();
			}

			this.onTruncated(numRemoved, this);
			return numRemoved;
		},
		undo: function() {
			if (this.changes.length > 0) {
				var lastIdx = this.changes.length - 1;
				var change = this.changes[lastIdx];
				this.changes.splice(lastIdx, 1);
				this.onChangeUndone(change, lastIdx, this);
				return change;
			}

			return null;
		}
	});

	// #endregion

	// #region ExoWeb.Mapper.ChangeLog
	//////////////////////////////////////////////////

	/*globals Functor, ChangeSet */

	function ChangeLog(defaultUser) {
		this._defaultUser = defaultUser;
		this.activeSet = null;
		this.sets = [];
		this.onChangeAdded = new Functor();
		this.onChangeSetStarted = new Functor();
		this.onChangeUndone = new Functor();
		this.onTruncated = new Functor();
	}

	ChangeLog.mixin({
		add: function (change) {
			// Adds a new change to the log.

			if (this.activeSet === null) {
				throw new Error("The change log is not currently active.");
			}

			var idx = this.activeSet.add(change);

			this.onChangeAdded(change, idx, this.activeSet, this);

			return idx;
		},
		addSet: function (source, title, user, changes, code) {
			var changeSet = new ChangeSet(source, title, user, changes, code);
			this.sets.push(changeSet);
			return changeSet;
		},
		batchChanges: function (title, user, action, removeIfEmpty) {
			/// <summary>
			/// Ensures that the set of changes that result from invoking
			/// `action` are placed in a dedicated change set with the given
			/// `title` (or description) and `user` and no other changes.
			/// </summary>

			if (!title || title.constructor !== String || title.length === 0) {
				throw new Error("The first argument to batchChanges must be a non-empty string which specifies a title for the changes.");
			}
			if (user !== null && user !== undefined && (user.constructor !== String || user.length === 0)) {
				throw new Error("The second argument to batchChanges must be a non-empty string which specifies the user who is initiating the changes.");
			}
			if (!action || !(action instanceof Function)) {
				throw new Error("The third argument to batchChanges must be a function which performs the changes.");
			}

			var newBatchSetIndex,
				newBatchSet,
				changeSetStartedHandler,
				previousActiveSet = this.activeSet,
				previousActiveSetIdx = previousActiveSet ? this.sets.indexOf(previousActiveSet) : -1,
				priorSet = previousActiveSet,
				usePriorSet = true,
				newActiveSet = null;

			// Start a new set for the batch if there isn't a current active set. If there is a current active set it can be
			// re-used if it has no pre-existing changes and has the same source, title, and user.
			if (!previousActiveSet || (previousActiveSet.changes.length > 0 || previousActiveSet.source !== "client" || previousActiveSet.title !== title || previousActiveSet.user !== user)) {
				newBatchSet = new ChangeSet("client", title, user || this._defaultUser);
				this.sets.push(newBatchSet);
				this.activeSet = newBatchSet;
			}

			// If a new set is created for the batch, and there was a previous active set, then remove it if it isn't needed.
			if (newBatchSet && previousActiveSet) {
				// If there are no changes, no title, and no user, then the set doesn't provide any useful information.
				if (!previousActiveSet.title && !previousActiveSet.user && previousActiveSet.changes.length === 0) {
					// Re-use the set rather than create a new one. This is not strictly necessary, but since
					// there is a precedent for attempting to reuse sets, it makes sense to do so here as well.
					newActiveSet = previousActiveSet;

					// Remove the set from the log.
					this.sets.splice(previousActiveSetIdx, 1);
					// NOTE: no need to alter "activeSet", since it was already changed to be the new batch set.

					// Move the prior set back since the previous active set is removed.
					priorSet = this.sets[previousActiveSetIdx - 1];

					// Don't re-use the prior set since it was not active and the
					// previous active set was removed (as if it never existed).
					usePriorSet = false;
				}
			}

			// Raise an error if a change set is started while the batch is being performed.
			changeSetStartedHandler = function () {
				throw new Error("Nested change batches are not currently supported. Batch already in progress: " + title);
			};

			// Attach the event
			this.onChangeSetStarted.add(changeSetStartedHandler);

			try {
				// Invoke the action callback.
				action();
			} finally {
				// Remove the event
				if (!this.onChangeSetStarted.remove(changeSetStartedHandler)) {
					throw new Error("Could not unsubscribe from change set started event.");
				}

				if (newBatchSet) {
					newBatchSetIndex = this.sets.indexOf(newBatchSet);

					// Remove the new batch set if the caller specified that it should be removed if empty and there were no changes.
					if (removeIfEmpty && newBatchSet === this.activeSet && newBatchSet.changes.length === 0) {
						this.sets.splice(newBatchSetIndex, 1);

						// Restore the previous active set to the log if it was removed.
						if (previousActiveSet && priorSet !== previousActiveSet) {
							this.sets.splice(previousActiveSetIdx, 0, previousActiveSet);
						}

						this.activeSet = previousActiveSet;
						return null;
					}

					this.onChangeSetStarted(newBatchSet, usePriorSet ? priorSet : null, newBatchSetIndex, this);
				}

				// If there was previously an active set, start a new
				// set in order to collect changes that follow separately.
				if (newActiveSet) {
					var idx = this.sets.push(newActiveSet) - 1;
					var newPriorSet = this.sets[idx - 1];
					this.activeSet = newActiveSet;
					this.onChangeSetStarted(newActiveSet, newPriorSet, idx, this);
				} else if (previousActiveSet) {
					// Use the previous title and user for the new set.
					this.start({ title: previousActiveSet.title, user: previousActiveSet.user });
				} else if (this.activeSet.changes.length > 0) {
					// If there wasn't an active set before, then start a new set
					// without a title only if there are changes in the active
					// set. This is a last-resort to ensure that following changes
					// are not included with the changes that were just batched.
					this.start("unknown");
				}
			}

			return newBatchSet;
		},
		checkpoint: function (title, code) {
			if (!this.activeSet) {
				return null;
			}

			return this.activeSet.checkpoint(title, code);
		},
		compress: function (tailOnly, considerAdditionalInfo) {
			var removed = [];

			for (var i = this.sets.length - 1; i >= 0; i--) {
				var set = this.sets[i];
				if (set.changes.length === 0 && (!considerAdditionalInfo || (!set.title && !set.user))) {
					if (set === this.activeSet) {
						this.activeSet = null;
					}

					// Remove the item
					var splicedItems = this.sets.splice(i, 1);

					// Insert at the beginning of the list of removed items
					var spliceArgs = [0, 0];
					Array.prototype.push.apply(spliceArgs, splicedItems);
					Array.prototype.splice.apply(removed, spliceArgs);
				}

				if (tailOnly) {
					// Exit early after checking the last
					// change set if 'tailOnly' is specified.
					break;
				}
			}

			return removed;
		},
		count: function (filter, thisPtr) {
			var result = 0;
			forEach(this.sets, function (set) {
				result += set.count(filter, thisPtr);
			}, this);
			return result;
		},
		lastChange: function () {
			for (var i = this.sets.length - 1; i >= 0; i--) {
				var set = this.sets[i];
				var change = set.lastChange();
				if (change !== null && change !== undefined) {
					return change;
				}
			}

			return null;
		},
		serialize: function (forServer, filter, thisPtr) {
			// Serializes the log and it's sets, including
			// those changes that pass the given filter.

			if (arguments.length === 0) {
				forServer = true;
			} else if (forServer instanceof Function) {
				thisPtr = filter;
				filter = forServer;
				forServer = true;
			}

			return this.sets.map(function (set) {
				return set.serialize(forServer, filter, thisPtr);
			});
		},
		start: function (titleOrOptions, continueLast) {
			// Starts a new change set, which means that new changes will
			// be added to the new set from this point forward.
			var title, user, code;

			if (titleOrOptions == null) throw new ArgumentNullError("titleOrOptions");
			if (titleOrOptions.constructor !== String && !(titleOrOptions instanceof Object)) throw new ArgumentTypeError("titleOrOptions", "string|object", titleOrOptions);

			if (continueLast != null && continueLast.constructor !== Boolean) throw new ArgumentTypeError("continueLast", "boolean", continueLast);

			if (titleOrOptions.constructor === String) {
				title = titleOrOptions;
				user = null;
				code = null;
			} else {
				title = titleOrOptions.title || null;
				user = titleOrOptions.user || null;
				code = titleOrOptions.code || null;
			}

			var previousActiveSet = this.activeSet;

			if (continueLast) {
				var candidateSet = previousActiveSet;
				if (!candidateSet && this.sets.length > 0) {
					candidateSet = this.sets[this.sets.length - 1];
				}
				if (candidateSet && candidateSet.source === "client" && candidateSet.user === user && candidateSet.title === title) {
					if (previousActiveSet) {
						return null;
					} else {
						this.activeSet = candidateSet;
						this.onChangeSetStarted(candidateSet, previousActiveSet, this.sets.length - 1, this);
						return candidateSet;
					}
				}
			}

			var set = new ChangeSet("client", title, user || this._defaultUser, null, code);
			var idx = this.sets.push(set) - 1;
			this.activeSet = set;
			this.onChangeSetStarted(set, previousActiveSet, idx, this);
			return set;
		},
		stop: function () {
			if (!this.activeSet) {
				throw new Error("The change log is not currently active.");
			}

			this.activeSet = null;
		},
		truncate: function (checkpoint, filter, thisPtr) {
			// Removes all change sets where all changes match the given
			// filter.  If a set contains one or more changes that do NOT
			// match, the set is left intact with those changes.

			// Allow calling as function(filter, thisPtr)
			if (checkpoint && Object.prototype.toString.call(checkpoint) === "[object Function]") {
				thisPtr = filter;
				filter = checkpoint;
				checkpoint = null;
			}

			var numRemoved = 0;
			var foundCheckpoint = false;

			for (var i = 0; i < this.sets.length; i++) {
				if (checkpoint) {
					foundCheckpoint = this.sets[i].changes.some(function (c) {
						return c.type === "Checkpoint" && c.code === checkpoint;
					});
				}

				numRemoved += this.sets[i].truncate(checkpoint, filter, thisPtr);

				// If all changes have been removed (or all but the given checkpoint) then discard the set
				if (this.sets[i].changes.length === 0) {
					var currentSet = this.sets[i];
					this.sets.splice(i--, 1);
					if (currentSet === this.activeSet) {
						this.activeSet = null;
					}
				}

				if (foundCheckpoint)
					break;
			}

			this.onTruncated(numRemoved, this);
			return numRemoved;
		},
		undo: function () {
			if (!this.activeSet) {
				throw new Error("The change log is not currently active.");
			}

			var currentSet = this.activeSet,
				currentSetIndex = this.sets.indexOf(currentSet);

			while (currentSet.changes.length === 0) {
				// remove the set from the log
				this.sets.splice(currentSetIndex, 1);

				if (--currentSetIndex < 0) {
					return null;
				}

				currentSet = this.sets[currentSetIndex];
				this.activeSet = currentSet;
			}

			var idx = currentSet.changes.length - 1;
			var change = currentSet.undo();

			this.onChangeUndone(change, idx, currentSet, this);

			return change;
		}
	});

	// #endregion

	// #region ExoWeb.Mapper.ServerSync
	//////////////////////////////////////////////////

	/*globals window, setTimeout, clearTimeout, context */
	/*globals Functor, Translator, Observer, ArgumentNullError, ArgumentTypeError */
	/*globals Model, Entity, LazyLoader, ObjectLazyLoader, ChangeLog, ExoModelEventListener, fromExoModel */
	/*global saveProvider, roundtripProvider, eventProvider, objectProvider */

	function ServerSync(model) {
		// Basic argument validation.
		if (model === null || model === undefined) {
			throw new ArgumentNullError("model");
		}
		if (typeof (model) !== "object" || !(model instanceof Model)) {
			throw new ArgumentTypeError("model", "model", model);
		}

		// Create the necessary local variables.
		var changeLog = new ChangeLog(),
			translator = new Translator(),
			objectsDeleted = [],
			isObjectDeleted = function (deletedObjectsList, obj, isChange) {
				if (Array.contains(deletedObjectsList, obj)) {
					if (isChange) {
						logWarning($format("Object {0}|{1} was changed but has been deleted.", obj.meta.type.get_fullName(), obj.meta.id));
					}
					return true;
				}
				return false;
			},
			filterObjectEvent = function (obj) {
				return !isObjectDeleted(objectsDeleted, obj, false);
			},
			filterPropertyEvent = function (obj) {
				return !isObjectDeleted(objectsDeleted, obj, true);
			},
			listener = new ExoModelEventListener(model, translator, {
				listChanged: filterPropertyEvent,
				propertyChanged: filterPropertyEvent,
				objectRegistered: filterObjectEvent,
				objectUnregistered: filterObjectEvent
			}),
			applyingChanges = 0,
			isCapturingChanges = false,
			self = this;

		// When the event listener detects a change then pass it along to the change log.
		listener.addChangeDetected(function (change) {
			if (applyingChanges <= 0 && isCapturingChanges === true) {
				if (change.property) {
					var instance = fromExoModel(change.instance, translator);
					var property = instance.meta.property(change.property);

					if (property.get_jstype() === Date && change.newValue && property.get_format() && !hasTimeFormat.test(property.get_format().toString())) {
						var serverOffset = self.get_ServerTimezoneOffset();
						var localOffset = -(new Date().getTimezoneOffset() / 60);
						var difference = localOffset - serverOffset;
						change.newValue = change.newValue.addHours(difference);
					}
					else if (change.newValue && change.newValue instanceof TimeSpan) {
						change.newValue = change.newValue.toObject();
					}
				}

				changeLog.add(change);

				self._raiseEvent("changesDetected", [self, { reason: "listener.addChangeDetected", changes: [change] }]);

				// Restart auto-save interval if necessary.
				if (self._saveInterval && self.canSave(change) && isPropertyChangePersisted(change)) {
					self._queueAutoSave();
				}
			}
		});

		// Applying changes (e.g. via a server response change set).
		this.isApplyingChanges = function () {
			return applyingChanges > 0;
		};
		this.beginApplyingChanges = function () {
			applyingChanges += 1;
		};
		this.endApplyingChanges = function () {
			applyingChanges -= 1;

			if (applyingChanges < 0) {
				throw new Error("Error in transaction log processing: unmatched begin and end applying changes.");
			}
		};

		// Capturing changes (i.e. after context initialization has completed).
		this.isCapturingChanges = function () {
			return isCapturingChanges === true;
		};
		this.beginCapturingChanges = function () {
			if (!isCapturingChanges) {
				isCapturingChanges = true;
				changeLog.start({ user: this._localUser });
			}
		};
		this.stopCapturingChanges = function () {
			if (isCapturingChanges) {
				isCapturingChanges = false;
				changeLog.stop();
			}
		};
		this.ignoreChanges = function (before, callback, after, thisPtr) {
			if (arguments.length === 1) {
				callback = arguments[0];
				before = null;
			}

			return function () {
				var beforeCalled = false;

				try {
					applyingChanges += 1;

					if (before && before instanceof Function) {
						before();
					}

					beforeCalled = true;

					callback.apply(thisPtr || this, arguments);
				} finally {
					applyingChanges -= 1;

					if (beforeCalled === true && after && after instanceof Function) {
						after();
					}
				}
			};
		};

		this.isObjectDeleted = function (obj, isChange) {
			return isObjectDeleted(objectsDeleted, obj, isChange);
		};

		// If an existing object is registered then register it for lazy loading.
		model.addObjectRegistered(function (obj) {
			if (!obj.meta.isNew && obj.meta.type.get_origin() === "server" && isCapturingChanges === true && !applyingChanges) {
				ObjectLazyLoader.register(obj);
			}
		});

		// Link model and server objects.
		Object.defineProperty(this, "model", { value: model });
		Object.defineProperty(model, "server", { value: this });

		// Assign backing fields as needed
		this._changeLog = changeLog;
		this._scopeQueries = [];
		this._objectsExcludedFromSave = [];
		this._objectsDeleted = objectsDeleted;
		this._translator = translator;
		this._serverInfo = null;
		this._localUser = null;

		Observer.makeObservable(this);
	}

	function isPropertyChangePersisted(change) {
		if (change.property) {
			var jstype = Model.getJsType(change.instance.type, true);
			if (jstype) {
				var prop = jstype.meta.property(change.property);
				// Can't save non-persisted properties
				if (!prop.get_isPersisted()) {
					return false;
				}
			}
		}
		return true;
	}

	ServerSync.mixin(Functor.eventing);

	var pendingRequests = 0;

	registerActivity("ServerSync: request", function() {
		return pendingRequests > 0;
	});

	function serializeChanges(includeAllChanges, simulateInitRoot) {
		var changes = this._changeLog.serialize(includeAllChanges ? this.canSend : this.canSave, this);

		// temporary HACK (no, really): splice InitNew changes into init transaction
		if (simulateInitRoot && simulateInitRoot.meta.isNew) {
			function isRootInitChange(change) {
				return change.type === "InitNew" && change.instance.type === simulateInitRoot.meta.type.get_fullName() &&
					(change.instance.id === simulateInitRoot.meta.id || this._translator.reverse(change.instance.type, change.instance.id) === simulateInitRoot.meta.id);
			}

			var found = false;
			var initSet = changes.filter(function(set) { return set.source === "init"; })[0];
			if (!initSet || !initSet.changes.some(isRootInitChange, this)) {
				changes.forEach(function(set) {
					if (found === true) return;
					set.changes.forEach(function(change, index) {
						if (found === true) return;
						else if (isRootInitChange.call(this, change)) {
							set.changes.splice(index, 1);
							if (!initSet) {
								initSet = { changes: [change], source: "init" };
								changes.splice(0, 0, initSet);
							}
							else {
								initSet.changes.push(change);
							}
							found = true;
						}
					}, this);
				}, this);
			}
		}

		return changes;
	}

	// when ServerSync is made singleton, this data will be referenced via closure
	function ServerSync$addScopeQuery(query) {
		this._scopeQueries.push(query);
	}

	function ServerSync$storeInitChanges(changes) {
		var activeSet = this._changeLog.activeSet;

		this._changeLog.addSet("init", null, null, changes);

		if (activeSet) {
			this._changeLog.start({ title: activeSet.title, user: activeSet.user });
		}
	}

	function ServerSync$retroactivelyFixChangeWhereIdChanged(changeInstance, obj) {
		// Update change to reflect the object's new id if it is referencing a legacy id
		if (changeInstance.id === obj.meta.legacyId) {
			changeInstance.id = obj.meta.id;
			changeInstance.isNew = false;
		}
	}

	ServerSync.mixin({
		// Enable/disable save & related functions
		///////////////////////////////////////////////////////////////////////
		enableSave: function ServerSync$enableSave(obj) {
			if (!(obj instanceof Entity)) {
				throw new Error("Can only enableSave on entity objects.");
			}

			if (Array.contains(this._objectsExcludedFromSave, obj)) {
				var oldPendingChanges;
				if (this._saveRoot) {
					// If autosave is enabled then determine if we need to queue a timeout
					oldPendingChanges = this.changes(false, this._saveRoot, true);
				}
				Array.remove(this._objectsExcludedFromSave, obj);

				this._raiseEvent("changesDetected", [this, { reason: "enableSave" }]);

				// Determine if ther are now pending changes
				if (oldPendingChanges && oldPendingChanges.length === 0 && this._saveInterval && !this._saveTimeout) {
					if (this.changes(false, this._saveRoot, true).length > 0) {
						this._queueAutoSave();
					}
				}
				return true;
			}
		},
		disableSave: function ServerSync$disableSave(obj) {
			if (!(obj instanceof Entity)) {
				throw new Error("Can only disableSave on entity objects.");
			}

			if (!Array.contains(this._objectsExcludedFromSave, obj)) {
				var oldPendingChanges;
				if (this._saveRoot) {
					// If autosave is enabled then determine if we need to queue a timeout
					oldPendingChanges = this.changes(false, this._saveRoot, true);
				}
				this._objectsExcludedFromSave.push(obj);

				this._raiseEvent("changesDetected", [this, { reason: "disableSave" }]);

				// Determine if ther are no longer pending changes
				if (oldPendingChanges && oldPendingChanges.length > 0 && this._saveInterval && this._saveTimeout) {
					if (this.changes(false, this._saveRoot, true).length === 0) {
						window.clearTimeout(this._saveTimeout);
						this._saveTimeout = null;
					}
				}
				return true;
			}
		},
		notifyDeleted: function ServerSync$notifyDeleted(obj) {
			if (!(obj instanceof Entity)) {
				throw new Error("Notified of deleted object that is not an entity.");
			}

			if (!Array.contains(this._objectsDeleted, obj)) {
				this._objectsDeleted.push(obj);
				return true;
			}

			return false;
		},
		canSend: function (change) {

			// Checkpoint is a client-only event type.
			if (change.type === "Checkpoint") {
				return false;
			}

			if (change.instance) {
				var type = Model.getJsType(change.instance.type, true);
				if (type && LazyLoader.isLoaded(type.meta)) {
					if (type.meta.get_origin() !== "server") {
						// Don't send change events for types that didn't originate from the server.
						return false;
					}

					if (change.property) {
						var property = type.meta.property(change.property);
						// Don't send property change events for properties that didn't originate from the server, or static properties.
						if (property.get_origin() !== "server" || property.get_isStatic()) {
							return false;
						}
					}

					// Don't send changes for deleted objects.
					var obj = fromExoModel(change.instance, this._translator, false, this._objectsDeleted);
					if (obj && this.isObjectDeleted(obj, false)) {
						return false;
					}
				}
			}

			// Event is ok to send.
			return true;
		},
		canSaveObject: function ServerSync$canSaveObject(objOrMeta) {
			var obj;
			var errorFmt = "Unable to test whether object can be saved:  {0}.";

			if (objOrMeta == null) {
				throw new ArgumentNullError("objOrMeta");
			}
			else if (objOrMeta instanceof ExoWeb.Model.ObjectMeta) {
				obj = objOrMeta._obj;
			}
			else if (objOrMeta instanceof Entity) {
				obj = objOrMeta;
			}
			else {
				throw new ArgumentTypeError("objOrMeta", "ObjectMeta|Entity", objOrMeta);
			}

			return !Array.contains(this._objectsExcludedFromSave, obj) && !Array.contains(this._objectsDeleted, obj);
		},
		canSave: function ServerSync$canSave(change) {

			// Can't save changes that can't be sent to the server at all.
			if (!this.canSend(change)) return false;

			// For list changes additionally check added and removed objects.
			if (change.type === "ListChange") {
				if (change.added.length > 0 || change.removed.length > 0) {
					var ignore = true;

					// Search added and removed for an object that can be saved.
					Array.forEach(change.added, function (item) {
						// if the type doesn't exist then obviously the instance doesn't either
						if (!item.type || !ExoWeb.Model.Model.getJsType(item.type, true)) {
							ignore = false;
						}
						else {
							var obj = fromExoModel(item, this._translator, false, this._objectsDeleted);
							// Only objects that exist can be disabled
							if (!obj || this.canSaveObject(obj)) {
								ignore = false;
							}
						}
					}, this);
					Array.forEach(change.removed, function (item) {
						// if the type doesn't exist then obviously the instance doesn't either
						if (!item.type || !ExoWeb.Model.Model.getJsType(item.type, true)) {
							ignore = false;
						}
						else {
							var obj = fromExoModel(item, this._translator, false, this._objectsDeleted);
							if (!obj || this.canSaveObject(obj)) {
								ignore = false;
							}
						}
					}, this);

					// If no "savable" object was found in added or 
					// removed then this change cannot be saved.
					if (ignore) {
						return false;
					}
				}
			}
			// For reference changes additionally check oldValue/newValue
			else if (change.type === "ReferenceChange") {
				var oldJsType = change.oldValue && ExoWeb.Model.Model.getJsType(change.oldValue.type, true);
				if (oldJsType) {
					var oldValue = fromExoModel(change.oldValue, this._translator, false, this._objectsDeleted);
					if (oldValue && !this.canSaveObject(oldValue)) {
						return false;
					}
				}

				var newJsType = change.newValue && ExoWeb.Model.Model.getJsType(change.newValue.type, true);
				if (newJsType) {
					var newValue = fromExoModel(change.newValue, this._translator, false, this._objectsDeleted);
					if (newValue && !this.canSaveObject(newValue)) {
						return false;
					}
				}
			}

			// if the type doesn't exist then obviously the instance doesn't either
			var jstype = ExoWeb.Model.Model.getJsType(change.instance.type, true);
			if (!jstype) {
				return true;
			}

			// Ensure that the instance that the change pertains to can be saved.
			var instanceObj = fromExoModel(change.instance, this._translator, false, this._objectsDeleted);
			return !instanceObj || this.canSaveObject(instanceObj);
		},

		_handleResult: function ServerSync$_handleResult(result, description, checkpoint, callbackOrOptions) {
			var callback, beforeApply = null, afterApply = null;

			if (callbackOrOptions instanceof Function) {
				callback = callbackOrOptions;
			}
			else {
				callback = callbackOrOptions.callback;
				beforeApply = callbackOrOptions.beforeApply;
				afterApply = callbackOrOptions.afterApply;
			}

			ResponseHandler.execute(this.model, this, {
				instances: result.instances,
				conditions: result.conditions,
				types: result.types && result.types instanceof Array ? null : result.types,
				changes: result.changes,
				source: "server",
				description: description,
				checkpoint: checkpoint,
				serverInfo: result.serverInfo,
				beforeApply: beforeApply,
				afterApply: afterApply
			}, callback, this);
		},

		// General events methods
		///////////////////////////////////////////////////////////////////////
		addRequestBegin: function (handler) {
			this._addEvent("requestBegin", handler);
		},
		removeRequestBegin: function (handler) {
			this._removeEvent("requestBegin", handler);
		},
		addRequestEnd: function (handler) {
			this._addEvent("requestEnd", handler);
		},
		removeRequestEnd: function (handler) {
			this._removeEvent("requestEnd", handler);
		},
		addRequestSuccess: function (handler) {
			this._addEvent("requestSuccess", handler);
		},
		removeRequestSuccess: function (handler) {
			this._removeEvent("requestSuccess", handler);
		},
		addRequestFailed: function (handler) {
			this._addEvent("requestFailed", handler);
		},
		removeRequestFailed: function (handler) {
			this._removeEvent("requestFailed", handler);
		},

		// Raise Server Event
		///////////////////////////////////////////////////////////////////////
		raiseServerEvent: function ServerSync$raiseServerEvent(name, target, event, includeAllChanges, success, failed, paths) {
			/// <summary locid="M:J#ExoWeb.Mapper.ServerSync.save">
			/// Raise a server event on the given target. The given success or failure callback is invoked
			/// when the request is complete.
			/// </summary>
			/// <param name="name" optional="false" mayBeNull="false" type="String"></param>
			/// <param name="target" optional="false" mayBeNull="false" type="ExoWeb.Model.Entity"></param>
			/// <param name="event" optional="true" mayBeNull="null" type="Object"></param>
			/// <param name="success" optional="true" mayBeNull="true" type="Function"></param>
			/// <param name="failed" optional="true" mayBeNull="true" type="Function"></param>
			/// <param name="paths" optional="true" mayBeNull="true" isArray="true" type="String"></param>

			var args, checkpoint, serializedEvent, serializedEventTarget, eventPropName;

			pendingRequests++;

			// Checkpoint the log to ensure that we only truncate changes that were saved.
			checkpoint = this._changeLog.checkpoint("raiseServerEvent(" + name + ")-" + +(new Date()));

			args = {
				type: "raiseServerEvent",
				target: target,
				checkpoint: checkpoint,
				includeAllChanges: includeAllChanges
			};

			args.eventName = name;
			args.eventObject = event;

			this._raiseEvent("raiseServerEventBegin", [this, args]);

			serializedEvent = {};

			// If an event object is provided then convert its entity properties into their serialized form.
			if (event !== undefined && event !== null) {
				for (eventPropName in event) {
					var arg = event[eventPropName];

					if (arg instanceof Array) {
						serializedEvent[eventPropName] = arg.map(function (a) { return toExoModel(a, this._translator); }, this);
					} else {
						serializedEvent[eventPropName] = toExoModel(arg, this._translator);
					}
				}
			}

			serializedEventTarget = toExoModel(target, this._translator);

			args.root = serializedEventTarget;
			args.eventData = serializedEvent;

			this._raiseEvent("requestBegin", [this, args]);

			eventProvider(
				name,
				serializedEventTarget,
				serializedEvent,
				paths,
				serializeChanges.call(this, includeAllChanges, target),
				this._onRaiseServerEventSuccess.bind(this).appendArguments(args, checkpoint, success),
				this._onRaiseServerEventFailed.bind(this).appendArguments(args, failed || success)
			);
		},
		_onRaiseServerEventSuccess: function ServerSync$_onRaiseServerEventSuccess(result, args, checkpoint, callback) {
			args.responseObject = result;
			args.requestSucceeded = true;

			this._raiseEvent("requestEnd", [this, args]);

			this._handleResult(result, "raiseServerEvent(" + args.eventName + ")", checkpoint, function () {
				this._raiseEvent("requestSuccess", [this, args]);

				var event = result.events[0];
				if (event instanceof Array) {
					for (var i = 0; i < event.length; ++i) {
						event[i] = fromExoModel(event[i], this._translator, true);
					}
				}
				else {
					event = fromExoModel(event, this._translator, true);
				}

				restoreDates(event);

				result.event = event;

				args.eventResult = event;

				this._raiseEvent("raiseServerEventEnd", [this, args]);
				this._raiseEvent("raiseServerEventSuccess", [this, args]);

				if (callback && callback instanceof Function) {
					callback(result);
				}

				pendingRequests--;
			});
		},
		_onRaiseServerEventFailed: function ServerSync$_onRaiseServerEventFailed(error, args, callback) {
			args.responseObject = error;
			args.requestSucceeded = false;

			this._raiseEvent("requestEnd", [this, args]);
			this._raiseEvent("requestFailed", [this, args]);

			this._raiseEvent("raiseServerEventEnd", [this, args]);
			this._raiseEvent("raiseServerEventFailed", [this, args]);

			if (callback && callback instanceof Function) {
				callback(error);
			}

			pendingRequests--;
		},
		addRaiseServerEventBegin: function (handler) {
			this._addEvent("raiseServerEventBegin", handler);
		},
		removeRaiseServerEventBegin: function (handler) {
			this._removeEvent("raiseServerEventBegin", handler);
		},
		addRaiseServerEventEnd: function (handler) {
			this._addEvent("raiseServerEventEnd", handler);
		},
		removeRaiseServerEventEnd: function (handler) {
			this._removeEvent("raiseServerEventEnd", handler);
		},
		addRaiseServerEventSuccess: function (handler) {
			this._addEvent("raiseServerEventSuccess", handler);
		},
		removeRaiseServerEventSuccess: function (handler) {
			this._removeEvent("raiseServerEventSuccess", handler);
		},
		addRaiseServerEventFailed: function (handler) {
			this._addEvent("raiseServerEventFailed", handler);
		},
		removeRaiseServerEventFailed: function (handler) {
			this._removeEvent("raiseServerEventFailed", handler);
		},

		// Roundtrip
		///////////////////////////////////////////////////////////////////////
		roundtrip: function ServerSync$roundtrip(target, paths, success, failed) {
			/// <summary locid="M:J#ExoWeb.Mapper.ServerSync.save">
			/// Roundtrips the current changes to the server. The given success or failure callback is
			/// invoked when the request is complete.
			/// </summary>
			/// <param name="target" optional="false" mayBeNull="false" type="ExoWeb.Model.Entity"></param>
			/// <param name="paths" optional="false" mayBeNull="true" isArray="true" type="String"></param>
			/// <param name="success" optional="false" mayBeNull="true" type="Function"></param>
			/// <param name="failed" optional="false" mayBeNull="true" type="Function"></param>

			var args, checkpoint, serializedTarget, includeAllChanges;

			pendingRequests++;

			if (target && target instanceof Function) {
				success = target;
				failed = paths;
				target = null;
				paths = null;
			}

			checkpoint = this._changeLog.checkpoint("roundtrip-" + +(new Date()));

			if (target) {
				includeAllChanges = true;
			} else {
				includeAllChanges = false;
			}

			args = {
				type: "roundtrip",
				target: target || null,
				checkpoint: checkpoint,
				includeAllChanges: includeAllChanges
			};

			this._raiseEvent("roundtripBegin", [this, args]);

			if (target) {
				serializedTarget = toExoModel(target, this._translator);
			} else {
				serializedTarget = null;
			}

			args.root = serializedTarget;

			this._raiseEvent("requestBegin", [this, args]);

			roundtripProvider(
				serializedTarget,
				paths,
				serializeChanges.call(this, includeAllChanges, target),
				this._onRoundtripSuccess.bind(this).appendArguments(args, checkpoint, success),
				this._onRoundtripFailed.bind(this).appendArguments(args, failed || success)
			);
		},
		_onRoundtripSuccess: function ServerSync$_onRoundtripSuccess(result, args, checkpoint, callback) {
			args.responseObject = result;
			args.requestSucceeded = true;

			this._raiseEvent("requestEnd", [this, args]);

			this._handleResult(result, "roundtrip", checkpoint, function () {
				this._raiseEvent("requestSuccess", [this, args]);
				this._raiseEvent("roundtripEnd", [this, args]);
				this._raiseEvent("roundtripSuccess", [this, args]);

				if (callback && callback instanceof Function) {
					callback(result);
				}

				pendingRequests--;
			});
		},
		_onRoundtripFailed: function ServerSync$_onRoundtripFailed(error, args, callback) {
			args.responseObject = error;
			args.requestSucceeded = false;

			this._raiseEvent("requestEnd", [this, args]);
			this._raiseEvent("requestFailed", [this, args]);

			this._raiseEvent("roundtripEnd", [this, args]);
			this._raiseEvent("roundtripFailed", [this, args]);

			if (callback && callback instanceof Function) {
				callback(error);
			}

			pendingRequests--;
		},
		startAutoRoundtrip: function (interval) {
			if (!interval || typeof(interval) !== "number" || interval <= 0) {
				throw new Error("An interval must be specified for auto-save.");
			}

			// cancel any pending roundtrip schedule
			this.stopAutoRoundtrip();

			function doRoundtrip() {
				this.roundtrip(function () {
					this._roundtripTimeout = window.setTimeout(doRoundtrip.bind(this), interval);
				});
			}

			this._roundtripTimeout = window.setTimeout(doRoundtrip.bind(this), interval);
		},
		stopAutoRoundtrip: function () {
			if (this._roundtripTimeout) {
				window.clearTimeout(this._roundtripTimeout);
			}
		},
		addRoundtripBegin: function (handler) {
			this._addEvent("roundtripBegin", handler);
		},
		removeRoundtripBegin: function (handler) {
			this._removeEvent("roundtripBegin", handler);
		},
		addRoundtripEnd: function (handler) {
			this._addEvent("roundtripEnd", handler);
		},
		removeRoundtripEnd: function (handler) {
			this._removeEvent("roundtripEnd", handler);
		},
		addRoundtripSuccess: function (handler) {
			this._addEvent("roundtripSuccess", handler);
		},
		removeRoundtripSuccess: function (handler) {
			this._removeEvent("roundtripSuccess", handler);
		},
		addRoundtripFailed: function (handler) {
			this._addEvent("roundtripFailed", handler);
		},
		removeRoundtripFailed: function (handler) {
			this._removeEvent("roundtripFailed", handler);
		},

		// Save
		///////////////////////////////////////////////////////////////////////
		save: function (target, success, failed) {
			/// <summary locid="M:J#ExoWeb.Mapper.ServerSync.save">
			/// Saves changes to the given target and related entities. The given success or failure
			/// callback is invoked when the request is complete.
			/// </summary>
			/// <param name="target" optional="false" mayBeNull="false" type="ExoWeb.Model.Entity"></param>
			/// <param name="success" optional="false" mayBeNull="true" type="Function"></param>
			/// <param name="failed" optional="false" mayBeNull="true" type="Function"></param>

			var args, checkpoint, serializedTarget;

			pendingRequests++;

			// Checkpoint the log to ensure that we only truncate changes that were saved.
			checkpoint = this._changeLog.checkpoint("save-" + +(new Date()));

			args = {
				type: "save",
				target: target,
				checkpoint: checkpoint,
				includeAllChanges: false
			};

			this._raiseEvent("saveBegin", [this, args]);

			serializedTarget = toExoModel(target, this._translator);

			args.root = serializedTarget;

			this._raiseEvent("requestBegin", [this, args]);

			saveProvider(
				serializedTarget,
				serializeChanges.call(this, false, target),
				this._onSaveSuccess.bind(this).appendArguments(args, checkpoint, success),
				this._onSaveFailed.bind(this).appendArguments(args, failed || success)
			);
		},
		_onSaveSuccess: function ServerSync$_onSaveSuccess(result, args, checkpoint, callback) {
			args.responseObject = result;
			args.requestSucceeded = true;

			this._raiseEvent("requestEnd", [this, args]);

			this._handleResult(result, "save", checkpoint, function () {
				this._raiseEvent("requestSuccess", [this, args]);
				this._raiseEvent("saveEnd", [this, args]);
				this._raiseEvent("saveSuccess", [this, args]);

				if (callback && callback instanceof Function) {
					callback(result);
				}

				pendingRequests--;
			});
		},
		_onSaveFailed: function (error, args, callback) {
			args.responseObject = error;
			args.requestSucceeded = false;

			this._raiseEvent("requestEnd", [this, args]);
			this._raiseEvent("requestFailed", [this, args]);

			this._raiseEvent("saveEnd", [this, args]);
			this._raiseEvent("saveFailed", [this, args]);

			if (callback && callback instanceof Function) {
				callback(error);
			}

			pendingRequests--;
		},
		startAutoSave: function ServerSync$startAutoSave(root, interval, maxAttempts) {
			if (!root || !(root instanceof Entity)) {
				throw new Error("A root object must be specified for auto-save.");
			}

			if (!interval || typeof(interval) !== "number" || interval <= 0) {
				throw new Error("An interval must be specified for auto-save.");
			}

			if (maxAttempts && (typeof (maxAttempts) !== "number" || maxAttempts <= 0)) {
				throw new Error("Max number of auto-save attempts must be a positive number.");
			}

			// cancel any pending save schedule
			this.stopAutoSave();

			this._saveInterval = interval;
			this._saveRoot = root;

			// Attempt to provide a somewhat reasonable default.
			this._maxAutoSaveAttempts = maxAttempts || 3;
		},
		stopAutoSave: function ServerSync$stopAutoSave() {
			if (this._saveTimeout) {
				window.clearTimeout(this._saveTimeout);
				this._saveTimeout = null;
			}

			this._saveInterval = null;
			this._saveRoot = null;
			this._maxAutoSaveAttempts = null;
		},
		_autoSaveSuccess: function() {
			this._failedAutoSaveAttempts = 0;

			// Wait for the next change before next auto save
			this._saveTimeout = null;

			// ...unless there were new pending changes encountered since the last auto-save.
			if (this.changes(false, this._saveRoot, true).length > 0) {
				this._queueAutoSave();
			}
		},
		_autoSaveFailure: function() {
			if (++this._failedAutoSaveAttempts < this._maxAutoSaveAttempts) {
				this._queueAutoSave();
			} else {
				logWarning($format("Auto-save failed {0} consecutive times and will not re-try again until additional changes are detected.", this._failedAutoSaveAttempts));
			}
		},
		_doAutoSave: function() {
			this.save(this._saveRoot, this._autoSaveSuccess.bind(this), this._autoSaveFailure.bind(this));
		},
		_queueAutoSave: function ServerSync$_queueAutoSave() {
			if (this._saveTimeout) {
				// Already queued...
				return;
			}

			if (!this._saveInterval || !this._saveRoot || !this._maxAutoSaveAttempts) {
				// Auto-save is not configured...
				return;
			}

			this._saveTimeout = window.setTimeout(this._doAutoSave.bind(this), this._saveInterval);
		},
		addSaveBegin: function (handler) {
			this._addEvent("saveBegin", handler);
		},
		removeSaveBegin: function (handler) {
			this._removeEvent("saveBegin", handler);
		},
		addSaveEnd: function (handler) {
			this._addEvent("saveEnd", handler);
		},
		removeSaveEnd: function (handler) {
			this._removeEvent("saveEnd", handler);
		},
		addSaveSuccess: function (handler) {
			this._addEvent("saveSuccess", handler);
		},
		removeSaveSuccess: function (handler) {
			this._removeEvent("saveSuccess", handler);
		},
		addSaveFailed: function (handler) {
			this._addEvent("saveFailed", handler);
		},
		removeSaveFailed: function (handler) {
			this._removeEvent("saveFailed", handler);
		},

		// EnsureLoaded
		///////////////////////////////////////////////////////////////////////
		ensureLoaded: function (target, paths, includePathsFromQueries, success, failed) {
			/// <summary locid="M:J#ExoWeb.Mapper.ServerSync.ensureLoaded">
			/// Loads the given entity (and optionally a set of relative paths) if necessary. The given success or failure
			/// callback is invoked when the request is complete if loading was required. If no loading was required, the
			/// success callback is invoked after a short period of time. This artifical asynchronicity is introduced
			/// primarily to limit call stack size, and in the case of loading a consistent asynchronous experience is
			/// acceptable and perhaps even expected to some extent.
			/// </summary>
			/// <param name="target" optional="false" mayBeNull="false" type="ExoWeb.Model.Entity|ExoWeb.Model.Type"></param>
			/// <param name="paths" optional="false" mayBeNull="true" isArray="true" type="String"></param>
			/// <param name="includePathsFromQueries" mayBeNull="true" type="Boolean" optional="false"></param>
			/// <param name="success" optional="false" mayBeNull="true" type="Function"></param>
			/// <param name="failed" optional="false" mayBeNull="true" type="Function"></param>

			var args, checkpoint, serializedTarget, queryPaths, pathsToLoad, staticPath, staticProperty;

			pendingRequests++;

			if (target === null || target === undefined) {
				throw new Error("Method ensureLoaded requires a target argument.");
			}

			if (target instanceof Entity) {
				if (includePathsFromQueries) {
					// Get the paths from the original query(ies) that apply to the target object (based on type).
					queryPaths = ObjectLazyLoader.getRelativePaths(target);
					if (paths) {
						pathsToLoad = paths.concat(queryPaths);
					} else {
						pathsToLoad = queryPaths;
					}
				} else {
					pathsToLoad = paths || [];
				}
			} else {
				// For static loading a single array or object will be loaded with no additional paths.
				pathsToLoad = [];

				// Use the meta type if a type constructor was used as the target.
				if (target instanceof Function && target.meta && target.meta && target.meta instanceof Type) {
					target = target.meta;
				}

				if (!(target instanceof Type)) {
					throw new Error($format("Method ensureLoaded expects target of type Entity or Type, but found type \"{0}\".", parseFunctionName(target.constructor)));
				}

				if (paths === null || paths === undefined) {
					throw new Error("Method ensureLoaded requires a paths argument for static property loading.");
				}

				if (Object.prototype.toString.call(paths) === "[object String]") {
					staticPath = paths;
				} else if (Object.prototype.toString.call(paths) === "[object Array]") {
					if (paths.length === 1) {
						staticPath = paths[0];
					} else {
						throw new Error($format("Multiple paths cannot be specified when ensuring that static property information is loaded: \"{0}.[{1}]\".", target.get_fullName(), paths.join(",")));
					}
				} else {
					throw new Error($format("Argument \"paths\" was expected to be a string or array of strings, but found type \"{0}\" instead.", parseFunctionName(target.constructor)));
				}

				// Static property path can only be a single property name, not a multi-step path.
				if (staticPath.indexOf(".") >= 0) {
					throw new Error($format("Multiple path steps cannot be specified when ensuring that static property information is loaded: \"{0}.{1}\".", target.get_fullName(), staticPath));
				}

				// Get the meta property for the given single path.
				staticProperty = target.property(staticPath);

				// Prepend the target type name to the static path for later use in logging and errors, etc.
				staticPath = target.get_fullName() + "." + staticPath;

				// Get the static path value and verify that there is a value in order to ensure loading.
				target = staticProperty.value(target);
				if (target === null || target === undefined) {
					throw new Error($format("Unable to ensure that static path \"{0}\" is loaded because it evaluates to a null or undefined value.", staticPath));
				}
			}

			// Checkpoint the log to ensure that we only truncate changes that were saved.
			checkpoint = this._changeLog.checkpoint("ensureLoaded" + +(new Date()));

			args = {
				type: "ensureLoaded",
				target: target instanceof Entity ? target : null,
				checkpoint: checkpoint,
				includeAllChanges: true
			};

			this._raiseEvent("ensureLoadedBegin", [this, args]);

			// Check if the object or any of the paths require loading. Apply the array of paths to the
			// isLoaded call, since the paths will be obtained as "rest" parameters.
			if (!LazyLoader.isLoaded.apply(null, [target].concat(pathsToLoad))) {
				serializedTarget = target instanceof Entity ? toExoModel(target, this._translator) : null;

				args.root = serializedTarget;

				this._raiseEvent("requestBegin", [this, args]);

				// TODO: reference to server will be a singleton, not context
				objectProvider(
					target instanceof Entity ? target.meta.type.get_fullName() : target.get_fullName(),
					target instanceof Entity ? [target.meta.id] : [],
					pathsToLoad,
					false, // in scope?
					serializeChanges.call(this, true),
					this._onEnsureLoadedSuccess.bind(this).appendArguments(args, checkpoint, success),
					this._onEnsureLoadedFailed.bind(this).appendArguments(args, failed || success));
			} else {
				var self = this;
				window.setTimeout(function () {
					args.requiredLoading = false;

					self._raiseEvent("ensureLoadedEnd", [self, args]);
					self._raiseEvent("ensureLoadedSuccess", [self, args]);

					if (success && success instanceof Function) {
						success();
					}

					pendingRequests--;
				}, 1);
			}
		},
		_onEnsureLoadedSuccess: function (result, args, checkpoint, callback) {
			args.responseObject = result;
			args.requestSucceeded = true;

			this._raiseEvent("requestEnd", [this, args]);

			this._handleResult(result, "ensureLoaded", checkpoint, function () {
				this._raiseEvent("requestSuccess", [this, args]);

				args.requiredLoading = true;

				this._raiseEvent("ensureLoadedEnd", [this, args]);
				this._raiseEvent("ensureLoadedSuccess", [this, args]);

				if (callback && callback instanceof Function) {
					callback(result);
				}

				pendingRequests--;
			});
		},
		_onEnsureLoadedFailed: function (error, args, callback) {
			args.responseObject = error;
			args.requestSucceeded = false;

			this._raiseEvent("requestEnd", [this, args]);
			this._raiseEvent("requestFailed", [this, args]);

			args.requiredLoading = true;

			this._raiseEvent("ensureLoadedEnd", [this, args]);
			this._raiseEvent("ensureLoadedFailed", [this, args]);

			if (callback && callback instanceof Function) {
				callback(error);
			}

			pendingRequests--;
		},
		addEnsureLoadedBegin: function (handler) {
			this._addEvent("ensureLoadedBegin", handler);
		},
		removeEnsureLoadedBegin: function (handler) {
			this._removeEvent("ensureLoadedBegin", handler);
		},
		addEnsureLoadedEnd: function (handler) {
			this._addEvent("ensureLoadedEnd", handler);
		},
		removeEnsureLoadedEnd: function (handler) {
			this._removeEvent("ensureLoadedEnd", handler);
		},
		addEnsureLoadedSuccess: function (handler) {
			this._addEvent("ensureLoadedSuccess", handler);
		},
		removeEnsureLoadedSuccess: function (handler) {
			this._removeEvent("ensureLoadedSuccess", handler);
		},
		addEnsureLoadedFailed: function (handler) {
			this._addEvent("ensureLoadedFailed", handler);
		},
		removeEnsureLoadedFailed: function (handler) {
			this._removeEvent("ensureLoadedFailed", handler);
		},

		// Apply Changes
		///////////////////////////////////////////////////////////////////////
		applyChanges: function (checkpoint, changes, source, user, setId, description, filter, beforeApply, afterApply, callback, thisPtr) {
			if (!changes || !(changes instanceof Array)) {
				if (callback) {
					callback.call(thisPtr || this);
				}
				return;
			}

			if (source == null) throw new ArgumentNullError("source");

			var newChanges = [];

			var signal = new Signal("applyChanges");
			var waitForAllRegistered = false;
			var batchStarted = false;
			var changesApplying = false;
			var callbackInvoked = false;
			var methodExited = false;

			try {
				var batch = ExoWeb.Batch.start("apply changes");
				batchStarted = true;

				this.beginApplyingChanges();
				changesApplying = true;

				var previousActiveSet = null;

				if (this._changeLog.activeSet) {
					previousActiveSet = this._changeLog.activeSet;

					// Stop the active set
					this._changeLog.stop();

					if (this._changeLog.compress(true, true).indexOf(previousActiveSet) > 0) {
						// If the previous active set was removed, then don't use it later on.
						previousActiveSet = null;
					}
				}

				var changeSet = this._changeLog.addSet(source, description, user, null, setId);

				this._changeLog.onChangeSetStarted(changeSet, previousActiveSet, previousActiveSet ? this._changeLog.sets.indexOf(previousActiveSet) : -1, this._changeLog);

				// Determine that the target of a change is a new instance
				var instanceIsNew = function (change) {
					if (ExoWeb.Model.Model.getJsType(change.instance.type, true)) {
						var obj = fromExoModel(change.instance, this._translator);
						return obj && obj.meta.isNew;
					}
					return false;
				};

				// truncate change log up-front if save occurred
				var shouldDiscardChange;
				var saveChanges = changes.filter(function (c, i) { return c.type === "Save"; });
				var numSaveChanges = saveChanges.length;
				if (numSaveChanges > 0) {
					// Collect all of the id changes in the response. Multiple saves could occur.
					var idChanges = saveChanges.mapToArray(function (change) { return change.added || []; });

					// Create a list of new instances that were saved. Use a typed identifier form since the id stored
					// in changes in the change log will be a server id rather than client id (if there is a distinction)
					// and using the typed identifier approach allows for a straightforward search of the array.
					var newInstancesSaved = idChanges.map(function (idChange) { return idChange.type + "|" + idChange.oldId; });

					// Truncate changes that we believe were actually saved based on the response
					shouldDiscardChange = function (change) {
						var couldHaveBeenSaved, isNewObjectNotYetSaved;

						// Determine if the change could have been saved in the first place
						couldHaveBeenSaved = this.canSave(change);

						// Determine if the change targets a new object that has not been saved
						isNewObjectNotYetSaved = change.instance && (change.instance.isNew || instanceIsNew.call(this, change)) && !newInstancesSaved.contains(change.instance.type + "|" + change.instance.id);

						// Return a value indicating whether or not the change should be removed
						return couldHaveBeenSaved && !isNewObjectNotYetSaved;
					};

					// Truncate changes that we believe were actually saved based on the response
					this._changeLog.truncate(checkpoint, shouldDiscardChange.bind(this));
					this._changeLog.start({ user: this._localUser });

					// Update affected scope queries
					idChanges.forEach(function (idChange) {
						var jstype = ExoWeb.Model.Model.getJsType(idChange.type, true);
						if (jstype && LazyLoader.isLoaded(jstype.meta)) {
							var serverOldId = idChange.oldId;
							var clientOldId = !(idChange.oldId in jstype.meta._pool) ?
								this._translator.reverse(idChange.type, serverOldId) :
								idChange.oldId;
							this._scopeQueries.forEach(function (query) {
								query.ids = query.ids.map(function (id) {
									return (id === clientOldId) ? idChange.newId : id;
								}, this);
							}, this);
						}
					}, this);
				}

				var numPendingSaveChanges = numSaveChanges;

				changes.forEach(function (change) {
					if (change.type === "InitNew") {
						this.applyInitChange(change, beforeApply, afterApply, signal.pending());
					}
					else if (change.type === "ReferenceChange") {
						this.applyRefChange(change, beforeApply, afterApply, signal.pending());
					}
					else if (change.type === "ValueChange") {
						this.applyValChange(change, beforeApply, afterApply, signal.pending());
					}
					else if (change.type === "ListChange") {
						this.applyListChange(change, beforeApply, afterApply, signal.pending());
					}
					else if (change.type === "Save") {
						this.applySaveChange(change, beforeApply, afterApply, signal.pending());
						numPendingSaveChanges--;
					}

					if (change.type !== "Save") {
						var noObjectsWereSaved = numSaveChanges === 0;
						var hasPendingSaveChanges = numPendingSaveChanges > 0;

						// Only record a change if there is not a pending save change, also take into account new instances that are not saved
						if (noObjectsWereSaved || !hasPendingSaveChanges || !shouldDiscardChange.call(this, change)) {
							// Apply additional filter
							if (!filter || filter(change) === true) {
								newChanges.push(change);
								changeSet.add(change);
							}
						}
					}
				}, this);

				// Start a new change set to capture future changes.
				if (this.isCapturingChanges()) {
					this._changeLog.start({ user: this._localUser });
				}

				waitForAllRegistered = true;
				signal.waitForAll(function () {
					// The method has not yet exited, which means that teardown is happening
					// synchronously, so end applying changes before invoking the callback.
					if (!methodExited) {
						this.endApplyingChanges();
					}

					ExoWeb.Batch.end(batch);

					if (callback) {
						callback.call(thisPtr || this);
					}

					callbackInvoked = true;
				}, this, true);
			}
			finally {
				// The 'teardown' callback was not invoked, either because of an error or because
				// of delayed execution of the teardown routine, so end applying changes immediately.
				if (changesApplying && !callbackInvoked) {
					this.endApplyingChanges();
				}

				// An error occurred after the batch was started but before the 'teardown' callback
				// was registered (which would normally end the batch) so end it immediately.
				if (batchStarted && !waitForAllRegistered) {
					ExoWeb.Batch.end(batch);
				}
			}

			if (newChanges.length > 0) {
				this._raiseEvent("changesDetected", [this, { reason: "applyChanges", changes: newChanges }]);
			}

			// Allow potentially asynchronous callbacks to detect that the
			// method has already exited via a closure on this variable.
			methodExited = true;
		},
		applySaveChange: function (change, before, after, callback, thisPtr) {
			if (!(change.added || change.deleted)) {
				if (callback) {
					callback.call(thisPtr || this);
				}
				return;
			}

			change.deleted.forEach(function (instance) {
				tryGetJsType(this.model, instance.type, null, false, function (type) {
					tryGetEntity(this.model, this._translator, type, instance.id, null, LazyLoadEnum.None, this.ignoreChanges(before, function (obj) {
						// Notify server object that the instance is deleted
						this.notifyDeleted(obj);
						// Simply a marker flag for debugging purposes
						obj.meta.isDeleted = true;
						// Unregister the object so that it can't be retrieved via get, known, or have rules execute against it
						type.meta.unregister(obj);
						// Remove affected scope queries
						this._scopeQueries.purge(function (query) {
							// Remove the deleted object's id from the scope query
							query.ids.purge(function (id) {
								return (id === obj.meta.id);
							}, this);
							// Remove the scope query if it is empty
							return query.ids.length === 0;
						}, this);
					}, after), this);
				}, this);
			}, this);

			change.added.forEach(function (idChange, idChangeIndex) {
				ensureJsType(this.model, idChange.type, this.ignoreChanges(before, function (jstype) {
					var serverOldId = idChange.oldId;
					var clientOldId = !(idChange.oldId in jstype.meta._pool) ?
							this._translator.reverse(idChange.type, serverOldId) :
							idChange.oldId;

					// If the client recognizes the old id then this is an object we have seen before
					if (clientOldId) {
						var type = this.model.type(idChange.type);

						// Attempt to load the object whos id is changing.
						var obj = type.get(
							// Load the object using the object's id prior to saving.
							clientOldId,

							// When processing server-side changes we can expect that the type of the instance
							// is exactly the type specified in the change object, not a base type. 
							true
						);

						// Ensure that the object exists.
						if (!obj) {
							throw new Error($format(
								"Unable to change id for object of type \"{0}\" from \"{1}\" to \"{2}\" since the object could not be found.",
								jstype.meta.get_fullName(), idChange.oldId, idChange.newId));
						}

						// Change the id and make non-new.
						type.changeObjectId(clientOldId, idChange.newId);
						Observer.setValue(obj.meta, "isNew", false);

						// Update affected scope queries
						this._scopeQueries.forEach(function (query) {
							query.ids = query.ids.map(function (id) {
								return (id === clientOldId) ? idChange.newId : id;
							}, this);
						}, this);

						// Update post-save changes with new id
						function fixChangeInstanceDueToIdChange(inst) {
							if (inst) {
								var jstype = Model.getJsType(inst.type, true);
								if (jstype && obj === fromExoModel(inst, this._translator)) {
									inst.id = idChange.newId;
									inst.isNew = false;
								}
							}
						}

						this._changeLog.sets.forEach(function (set) {
							set.changes.forEach(function (change) {
								// Only process changes to model instances
								if (!change.instance) return;

								fixChangeInstanceDueToIdChange.call(this, change.instance);

								// For list changes additionally check added and removed objects.
								if (change.type === "ListChange") {
									// get the jsType of the object that contains the list
									var jsType = Model.getJsType(change.instance.type, true);

									if (jsType) {
										if (jsType.meta.property(change.property).get_isEntityListType()) {
											if (change.added.length > 0)
												change.added.forEach(fixChangeInstanceDueToIdChange, this);
											if (change.removed.length > 0)
												change.removed.forEach(fixChangeInstanceDueToIdChange, this);
										}
									}
								}
								// For reference changes additionally check oldValue/newValue
								else if (change.type === "ReferenceChange") {
									fixChangeInstanceDueToIdChange.call(this, change.oldValue);
									fixChangeInstanceDueToIdChange.call(this, change.newValue);
								}
							}, this);
						}, this);
					}
					// Otherwise, log an error.
					else {
						logWarning($format("Cannot apply id change on type \"{0}\" since old id \"{1}\" was not found.", idChange.type, idChange.oldId));
					}
				}, after), this);
			}, this);

			// Callback immediately since nothing will be force loaded
			if (callback) {
				callback.call(thisPtr || this);
			}
		},
		applyInitChange: function (change, before, after, callback, thisPtr) {
			tryGetJsType(this.model, change.instance.type, null, false, this.ignoreChanges(before, function (jstype) {

				// Attempt to fetch the object in case it has already been created.
				var newObj = jstype.meta.get(
					// Since the object is being newly created, we can use the server-generated id.
					change.instance.id,

					// When processing server-side changes we can expect that the type of the instance
					// is exactly the type specified in the change object, not a base type. 
					true
				);

				if (!newObj) {
					// Check for a translation between the old id that was reported and an actual old id.  This is
					// needed since new objects that are created on the server and then committed will result in an accurate
					// id change record, but "instance.id" for this change will actually be the persisted id.
					var serverOldId = this._translator.forward(change.instance.type, change.instance.id) || change.instance.id;

					lazyCreateEntity(change.instance.type, serverOldId, this.ignoreChanges(before, function () {
						// Create the new object (supress events)
						newObj = new jstype(null, null, true);

						// Remember the object's client-generated new id and the corresponding server-generated new id
						this._translator.add(change.instance.type, newObj.meta.id, serverOldId);

						// Raise event after recording id mapping so that listeners can leverage it
						this.model.notifyObjectRegistered(newObj);

						return newObj;
					}, after), this);
				}
			}, after), this);

			// Callback immediately since nothing will be force loaded
			if (callback) {
				callback.call(thisPtr || this);
			}
		},
		applyRefChange: function (change, before, after, callback, thisPtr) {
			var hasExited = false;
			var callBeforeExiting = true;

			tryGetJsType(this.model, change.instance.type, change.property, false, function (srcType) {
				tryGetEntity(this.model, this._translator, srcType, change.instance.id, null, LazyLoadEnum.None, this.ignoreChanges(before, function (srcObj) {
					// Update change to reflect the object's new id
					ServerSync$retroactivelyFixChangeWhereIdChanged(change.instance, srcObj);

					// Cache the property since it is not a simple property access.
					var property = srcObj.meta.property(change.property);
					if (!property) {
						throw new Error("Property \"" + change.property + "\" could not be found on type \"" + srcType.meta.get_fullName() + "\".");
					}

					// Apply change
					if (change.newValue) {
						// Don't call immediately since we may need to lazy load the type
						if (!hasExited) {
							callBeforeExiting = false;
						}

						tryGetJsType(this.model, change.newValue.type, null, true, this.ignoreChanges(before, function (refType) {
							tryGetEntity(this.model, this._translator, refType, change.newValue.id, null, LazyLoadEnum.Lazy, this.ignoreChanges(before, function (refObj) {
								// Update change to reflect the object's new id
								ServerSync$retroactivelyFixChangeWhereIdChanged(change.newValue, refObj);

								// Update change to reflect the object's new id
								if (change.newValue.id === refObj.meta.legacyId) {
									change.newValue.id = refObj.meta.id;
								}

								// Manually ensure a property value, if it doesn't have one then it will be marked as pendingInit
								Property$_ensureInited.call(property, srcObj);

								// Mark the property as no longer pending init since its value is being established
								srcObj.meta.pendingInit(property, false);

								// Set the property value
								Observer.setValue(srcObj, change.property, refObj);

								// Callback once the type has been loaded
								if (!callBeforeExiting && callback) {
									callback.call(thisPtr || this);
								}
							}, after), this);
						}, after), this);
					}
					else {
						// Manually ensure a property value, if it doesn't have one then it will be marked as pendingInit
						Property$_ensureInited.call(property, srcObj);

						// Mark the property as no longer pending init since its value is being established
						srcObj.meta.pendingInit(property, false);

						// Set the property value
						Observer.setValue(srcObj, change.property, null);
					}

					// Update oldValue's id in change object
					if (change.oldValue) {
						tryGetJsType(this.model, change.oldValue.type, null, true, this.ignoreChanges(before, function (refType) {
							// Update change to reflect the object's new id
							var refObj = fromExoModel(change.oldValue, this._translator, true);
							ServerSync$retroactivelyFixChangeWhereIdChanged(change.oldValue, refObj);
						}, after), this);
					}
				}, after), this);
			}, this);

			// Callback immediately since nothing will be force loaded...yet
			if (callBeforeExiting && callback) {
				callback.call(thisPtr || this);
			}

			hasExited = true;
		},
		applyValChange: function (change, before, after, callback, thisPtr) {
			tryGetJsType(this.model, change.instance.type, change.property, false, function (srcType) {
				tryGetEntity(this.model, this._translator, srcType, change.instance.id, null, LazyLoadEnum.None, this.ignoreChanges(before, function (srcObj) {
					// Update change to reflect the object's new id
					ServerSync$retroactivelyFixChangeWhereIdChanged(change.instance, srcObj);

					// Cache the new value, becuase we access it many times and also it may be modified below
					// to account for timezone differences, but we don't want to modify the actual change object.
					var newValue = change.newValue;

					// Cache the property since it is not a simple property access.
					var property = srcObj.meta.property(change.property);
					if (!property) {
						throw new Error("Property \"" + change.property + "\" could not be found on type \"" + srcType.meta.get_fullName() + "\".");
					}

					if (property.get_jstype() === Date && newValue && newValue.constructor == String && newValue.length > 0) {

						// Convert from string (e.g.: "2011-07-28T06:00:00.000Z") to date.
						dateRegex.lastIndex = 0;
						newValue = new Date(newValue.replace(dateRegex, dateRegexReplace));

						//now that we have the value set for the date.
						//if the underlying property datatype is actually a date and not a datetime
						//then we need to add the local timezone offset to make sure that the date is displayed acurately.
						if (property.get_format() && !hasTimeFormat.test(property.get_format().toString())) {
							var serverOffset = this.get_ServerTimezoneOffset();
							var localOffset = -(new Date().getTimezoneOffset() / 60);
							newValue = newValue.addHours(serverOffset - localOffset);
						}
					}
					else if (newValue && newValue instanceof TimeSpan) {
						newValue = newValue.toObject();
					}

					// Manually ensure a property value, if it doesn't have one then it will be marked as pendingInit
					Property$_ensureInited.call(property, srcObj);

					// Mark the property as no longer pending init since its value is being established
					srcObj.meta.pendingInit(property, false);

					// Set the property value
					Observer.setValue(srcObj, change.property, newValue);
				}, after), this);
			}, this);

			// Callback immediately since nothing will be force loaded
			if (callback) {
				callback.call(thisPtr || this);
			}
		},
		applyListChange: function (change, before, after, callback, thisPtr) {
			var hasExited = false;
			var callBeforeExiting = true;

			tryGetJsType(this.model, change.instance.type, change.property, false, function (srcType) {
				tryGetEntity(this.model, this._translator, srcType, change.instance.id, change.property, LazyLoadEnum.None, this.ignoreChanges(before, function (srcObj) {
					// Update change to reflect the object's new id
					ServerSync$retroactivelyFixChangeWhereIdChanged(change.instance, srcObj);

					var property = srcObj.meta.property(change.property);
					if (!property) {
						throw new Error("Property \"" + change.property + "\" could not be found on type \"" + srcType.meta.get_fullName() + "\".");
					}

					var isEntityList = property.get_isEntityListType();
					var list = property.value(srcObj);

					list.beginUpdate();

					var listSignal = new ExoWeb.Signal("applyListChange-items");

					// apply added items
					if (change.added.length > 0) {
						// Don't call immediately since we may need to lazy load the type
						if (!hasExited) {
							callBeforeExiting = false;
						}

						// Add each item to the list after ensuring that the type is loaded
						change.added.forEach(function (item) {
							if (isEntityList) {
								tryGetJsType(this.model, item.type, null, true, listSignal.pending(this.ignoreChanges(before, function (itemType) {
									tryGetEntity(this.model, this._translator, itemType, item.id, null, LazyLoadEnum.Lazy, this.ignoreChanges(before, function (itemObj) {
										// Update change to reflect the object's new id
										ServerSync$retroactivelyFixChangeWhereIdChanged(item, itemObj);

										if (!list.contains(itemObj)) {
											ListLazyLoader.allowModification(list, function () {
												list.add(itemObj);
											});
										}
									}, after), this);
								}, after)), this, true);
							} else {
								ListLazyLoader.allowModification(list, function () {
									list.add(item);
								});
							}
						}, this);
					}

					// apply removed items
					change.removed.forEach(function (item) {
						if (isEntityList) {
							// no need to load instance only to remove it from a list when it can't possibly exist
							tryGetJsType(this.model, item.type, null, false, this.ignoreChanges(before, function (itemType) {
								tryGetEntity(this.model, this._translator, itemType, item.id, null, LazyLoadEnum.Lazy, this.ignoreChanges(before, function (itemObj) {
									// Update change to reflect the object's new id
									ServerSync$retroactivelyFixChangeWhereIdChanged(item, itemObj);

									ListLazyLoader.allowModification(list, function () {
										list.remove(itemObj);
									});
								}, after), this);
							}, after), this, true);
						} else {
							ListLazyLoader.allowModification(list, function () {
								list.remove(item);
							});
						}
					}, this);

					// don't end update until the items have been loaded
					listSignal.waitForAll(this.ignoreChanges(before, function () {
						try {
							var listUpdateEnded = false;
							if (hasExited) {
								this.beginApplyingChanges();
							}
							try {
								ListLazyLoader.allowModification(list, function () {
									// Update variable first to indicate that endUpdate was at least attempted.
									// If the call to endUpdate generates an error we would not want to attempt
									// again and potentially generate a different error because of side-effects.
									listUpdateEnded = true;

									list.endUpdate();
								});
							} finally {
								if (!listUpdateEnded) {
									list.endUpdate();
								}
							}
						} finally {
							if (hasExited) {
								this.endApplyingChanges();
							}
						}

						// Callback once all instances have been added
						if (!callBeforeExiting && callback) {
							callback.call(thisPtr || this);
						}
					}, after), this, true);
				}, after), this);
			}, this);

			// Callback immediately since nothing will be force loaded...yet
			if (callBeforeExiting && callback) {
				callback.call(thisPtr || this);
			}

			hasExited = true;
		},

		// Checkpoint
		///////////////////////////////////////////////////////////////////////
		checkpoint: function ServerSync$checkpoint() {
			return this._changeLog.checkpoint();
		},

		// Rollback
		///////////////////////////////////////////////////////////////////////
		rollback: function ServerSync$rollback(checkpoint, callback, thisPtr) {
			var signal = new Signal("rollback");
			var waitForAllRegistered = false;

			try {
				var batch = ExoWeb.Batch.start("rollback changes");

				this.beginApplyingChanges();

				var change = this._changeLog.undo();
				while (change && !(change.type === "Checkpoint" && change.code === checkpoint)) {
					if (change.type == "InitNew") {
						this.rollbackInitChange(change, signal.pending());
					}
					else if (change.type == "ReferenceChange") {
						this.rollbackRefChange(change, signal.pending());
					}
					else if (change.type == "ValueChange") {
						this.rollbackValChange(change, signal.pending());
					}
					else if (change.type == "ListChange") {
						this.rollbackListChange(change, signal.pending());
					}

					change = this._changeLog.undo();
				}

				waitForAllRegistered = true;
				signal.waitForAll(function () {
					this.endApplyingChanges();
					ExoWeb.Batch.end(batch);
					if (callback) {
						callback.call(thisPtr || this);
					}
					this._raiseEvent("changesDetected", [this, { reason: "rollback" }]);
				}, this, true);
			}
			finally {
				// the signal was not registered, therefore we need to handle endApplyingChanges call here
				if (!waitForAllRegistered) {
					this.endApplyingChanges();
					ExoWeb.Batch.end(batch);
				}
			}
		},
		rollbackValChange: function ServerSync$rollbackValChange(change, callback, thisPtr) {
			tryGetJsType(this.model, change.instance.type, change.property, false, function (srcType) {
				tryGetEntity(this.model, this._translator, srcType, change.instance.id, null, LazyLoadEnum.None, function (srcObj) {

					// Cache the new value, becuase we access it many times and also it may be modified below
					// to account for timezone differences, but we don't want to modify the actual change object.
					var oldValue = change.oldValue;

					// Cache the property since it is not a simple property access.
					var property = srcObj.meta.property(change.property);
					if (!property) {
						throw new Error("Property \"" + change.property + "\" could not be found on type \"" + srcType.meta.get_fullName() + "\".");
					}

					if (property.get_jstype() === Date && oldValue && oldValue.constructor == String && oldValue.length > 0) {

						// Convert from string (e.g.: "2011-07-28T06:00:00.000Z") to date.
						dateRegex.lastIndex = 0;
						oldValue = new Date(oldValue.replace(dateRegex, dateRegexReplace));

						//now that we have the value set for the date.
						//if the underlying property datatype is actually a date and not a datetime
						//then we need to add the local timezone offset to make sure that the date is displayed acurately.
						if (property.get_format() && !hasTimeFormat.test(property.get_format().toString())) {
							var serverOffset = this.get_ServerTimezoneOffset();
							var localOffset = -(new Date().getTimezoneOffset() / 60);
							oldValue = oldValue.addHours(serverOffset - localOffset);
						}
					}
					else if (oldValue && oldValue instanceof TimeSpan) {
						oldValue = oldValue.toObject();
					}

					// Set the property value
					Observer.setValue(srcObj, change.property, oldValue);
				}, this);
			}, this);

			// Callback immediately since nothing will be force loaded
			if (callback) {
				callback.call(thisPtr || this);
			}
		},
		rollbackRefChange: function ServerSync$rollbackRefChange(change, callback, thisPtr) {
			var hasExited = false;
			var callBeforeExiting = true;

			tryGetJsType(this.model, change.instance.type, change.property, false, function (srcType) {
				tryGetEntity(this.model, this._translator, srcType, change.instance.id, null, LazyLoadEnum.None, function (srcObj) {
					if (change.oldValue) {
						// Don't call immediately since we may need to lazy load the type
						if (!hasExited) {
							callBeforeExiting = false;
						}

						tryGetJsType(this.model, change.oldValue.type, null, true, function (refType) {
							tryGetEntity(this.model, this._translator, refType, change.oldValue.id, null, LazyLoadEnum.None, function (refObj) {
								Observer.setValue(srcObj, change.property, refObj);

								// Callback once the type has been loaded
								if (!callBeforeExiting && callback) {
									callback.call(thisPtr || this);
								}
							}, this);
						}, this);
					}
					else {
						Observer.setValue(srcObj, change.property, null);
					}
				}, this);
			}, this);

			// Callback immediately since nothing will be force loaded...yet
			if (callBeforeExiting && callback) {
				callback.call(thisPtr || this);
			}

			hasExited = true;
		},
		rollbackInitChange: function ServerSync$rollbackInitChange(change, callback, thisPtr) {
			//TODO: need to remove from the translator
			if (callback) {
				callback.call(thisPtr || this);
			}
		},
		rollbackListChange: function ServerSync$rollbackListChange(change, callback, thisPtr) {
			var hasExited = false;
			var callBeforeExiting = true;

			tryGetJsType(this.model, change.instance.type, change.property, false, function (srcType) {
				tryGetEntity(this.model, this._translator, srcType, change.instance.id, change.property, LazyLoadEnum.None, function (srcObj) {
					var property = srcObj.meta.property(change.property);
					if (!property) {
						throw new Error("Property \"" + change.property + "\" could not be found on type \"" + srcType.meta.get_fullName() + "\".");
					}

					var isEntityList = property.get_isEntityListType();
					var list = property.value(srcObj);
					var translator = this._translator;

					list.beginUpdate();

					var listSignal = new ExoWeb.Signal("rollbackListChange-items");

					// Rollback added items
					change.added.forEach(function rollbackListChanges$added(item) {
						if (isEntityList) {
							tryGetJsType(this.model, item.type, null, false, function (itemType) {
								var childObj = fromExoModel(item, translator);
								if (childObj) {
									list.remove(childObj);
								}
							}, this);
						} else {
							list.remove(item);
						}
					}, this);

					// Rollback removed items
					if (change.removed.length > 0) {
						// Don't call immediately since we may need to lazy load the type
						if (!hasExited) {
							callBeforeExiting = false;
						}

						change.removed.forEach(function rollbackListChanges$added(item) {
							if (isEntityList) {
								tryGetJsType(this.model, item.type, null, true, listSignal.pending(function (itemType) {
									var childObj = fromExoModel(item, translator, true);
									list.add(childObj);
								}, this, true), this);
							} else {
								list.add(item);
							}
						}, this);
					}

					// don't end update until the items have been loaded
					listSignal.waitForAll(function () {
						if (hasExited) {
							this.beginApplyingChanges();
						}
						ListLazyLoader.allowModification(list, function () {
							list.endUpdate();
						});
						if (hasExited) {
							this.endApplyingChanges();
						}
						// Callback once all instances have been added
						if (!callBeforeExiting && callback) {
							callback.call(thisPtr || this);
						}
					}, this);
				}, this);
			}, this);

			// Callback immediately since nothing will be force loaded...yet
			if (callBeforeExiting && callback) {
				callback.call(thisPtr || this);
			}

			hasExited = true;
		},

		// Various
		///////////////////////////////////////////////////////////////////////
		addChangesDetected: function (handler) {
			this._addEvent("changesDetected", handler);
		},
		batchChanges: function (description, callback, thisPtr) {
			// Remove empty batches if a descriptive title or user is not specified.
			// If a title or user is specified then it may be desireable to keep it for diagnostic purposes.
			var removeIfEmpty = !description && !this._localUser;

			this._changeLog.batchChanges(description, this._localUser, thisPtr ? callback.bind(thisPtr) : callback, removeIfEmpty);
		},
		changes: function ServerSync$changes(includeAllChanges, simulateInitRoot, excludeNonPersisted) {
			var list = [];
			var sets = serializeChanges.call(this, includeAllChanges, simulateInitRoot);
			sets.forEach(function (set) {
				if (excludeNonPersisted) {
					list.addRange(set.changes.filter(isPropertyChangePersisted));
				}
				else {
					list.addRange(set.changes);
				}
			});
			return list;
		},
		get_ServerTimezoneOffset: function ServerSync$get_ServerTimezoneOffset() {
			//if we have not set the server timezone offset yet, retrieve it from the server
			var timezoneOffset = 0;

			if (this._serverInfo !== null) {
				timezoneOffset = this._serverInfo.TimeZoneOffset;
			}

			return timezoneOffset;
		},
		set_ServerInfo: function ServerSync$set_ServerTimezoneOffset(newInfo) {
			//join the new server info with the information that you are adding.
			this._serverInfo = this._serverInfo ? jQuery.extend(this._serverInfo, newInfo) : newInfo;
		},
		get_localUser: function ServerSync$get_localUser(user) {
			return this._localUser;
		},
		set_localUser: function ServerSync$set_localUser(user) {
			this._localUser = user;
		}
	});

	Property.prototype.triggersRoundtrip = function (paths) {
		this.addChanged(function (sender) {
			if (!context.server.isApplyingChanges()) {
				EventScope$onExit(function() {
					setTimeout(function () {
						sender.meta.type.model.server.roundtrip(sender, paths);
					}, 100);
				});
			}
		});
	};

	// #endregion

	// #region ExoWeb.Mapper.Internals
	//////////////////////////////////////////////////

	var STATIC_ID = "static";
	var dateRegex = /^(\d{4})-(\d{2})-(\d{2})T(\d{2})\:(\d{2})\:(\d{2})(\.\d{3})?Z$/g;
	var dateRegexReplace = "$2/$3/$1 $4:$5:$6 GMT";
	var hasTimeFormat = /[hHmts]/;

	function ensureJsType(model, typeName, callback, thisPtr) {
		var mtype = model.type(typeName);

		if (!mtype) {
			fetchTypes(model, [typeName], function(jstype) {
				callback.call(thisPtr || this, jstype);
			});
		}
		else if (LazyLoader.isRegistered(mtype)) {
			LazyLoader.load(mtype, null, false, function(jstype) {
				callback.apply(thisPtr || this, [jstype]);
			});
		}
		else {
			callback.apply(thisPtr || this, [mtype.get_jstype()]);
		}
	}

	function conditionsFromJson(model, conditionsJson, forInstances, callback, thisPtr) {

		for (var conditionCode in conditionsJson) {
			conditionFromJson(model, forInstances, conditionCode, conditionsJson[conditionCode]);
		}

		if (callback && callback instanceof Function) {
			callback.call(thisPtr || this);
		}
	}

	function conditionFromJson(model, forInstances, conditionCode, conditionsJson) {
		var conditionType = ExoWeb.Model.ConditionType.get(conditionCode);

		if (!conditionType) {
			logWarning("A condition type with code \"" + conditionCode + "\" could not be found.");
			return;
		}

		var serverSync = model.server;

		// process each condition
		if (forInstances) {
			conditionsJson.forEach(function (conditionJson) {
				var rootTarget = conditionJson.targets[0];
				if (rootTarget) {
					tryGetJsType(serverSync.model, rootTarget.instance.type, null, false, function (jstype) {
						tryGetEntity(serverSync.model, serverSync._translator, jstype, rootTarget.instance.id, null, LazyLoadEnum.None, function (rootTargetInstance) {
							if (forInstances.indexOf(rootTargetInstance) >= 0) {
								conditionTargetsFromJson(model, conditionType, conditionJson.message, conditionJson.targets);
							}
						});
					});
				}
			});
		}
		else {
			conditionsJson.forEach(function (conditionJson) {
				conditionTargetsFromJson(model, conditionType, conditionJson.message, conditionJson.targets);
			});
		}
	}

	function conditionTargetsFromJson(model, conditionType, message, targetsJson) {
		var condition = new Condition(conditionType, message, null, null, "server");

		var serverSync = model.server;

		// process each condition target
		targetsJson.forEach(function (target) {
			tryGetJsType(serverSync.model, target.instance.type, null, false, function (jstype) {
				tryGetEntity(serverSync.model, serverSync._translator, jstype, target.instance.id, null, LazyLoadEnum.None, function (instance) {
					condition.targets.push(new ConditionTarget(condition, instance, target.properties.map(function (p) { return jstype.meta.property(p); })));
				});
			});
		});
	}

	function objectsFromJson(model, json, callback, thisPtr) {
		var signal = new ExoWeb.Signal("objectsFromJson");
		var objectsLoaded = [];
		for (var typeName in json) {
			var poolJson = json[typeName];
			for (var id in poolJson) {
				// locate the object's state in the json
				objectFromJson(model, typeName, id, poolJson[id], signal.pending(function (obj) {
					if (obj) {
						objectsLoaded.push(obj);
					}
				}), thisPtr);
			}
		}

		signal.waitForAll(function() {
			callback.call(thisPtr || this, objectsLoaded);
		});
	}

	function objectFromJson(model, typeName, id, json, callback, thisPtr) {
		// get the object to load
		var obj;

		// family-qualified type name is not available so can't use getType()
		var mtype = model.type(typeName);

		// if this type has never been seen, go and fetch it and resume later
		if (!mtype) {
			fetchTypes(model, [typeName], function () {
				objectFromJson(model, typeName, id, json, callback);
			});
			return;
		}

		// Load object's type if needed
		if (LazyLoader.isRegistered(mtype)) {
			LazyLoader.load(mtype, null, false, function() {
				objectFromJson(model, typeName, id, json, callback, thisPtr);
			});
			return;
		}

		// get target object to load
		if (id === STATIC_ID) {
			obj = null;
		}
		else {
			obj = getObject(model, typeName, id, null, true);
		}

		var loadedObj;

		var initObj = false;
		if (id === STATIC_ID) {
			initObj = true;
		} else if (obj) {
			if (LazyLoader.isRegistered(obj)) {
				initObj = true;
				// track the newly loaded instance to pass to the caller when complete
				loadedObj = obj;
				// unregister the instance from loading
				ObjectLazyLoader.unregister(obj);
			}
			if (obj.wasGhosted) {
				initObj = true;
				// track the newly loaded instance to pass to the caller when complete
				loadedObj = obj;
				delete obj.wasGhosted;
			}
		}

		// Continue if the object needs to be initialized (ghosted or lazy loaded),
		// or there is no object (load static lists), or the object is not new (load
		// non-loaded list properties for an object that was previously loaded).
		if (initObj || !obj || !obj.meta.isNew) {
			var loadedProperties = [];

			// Load object's properties
			for (var t = mtype; t !== null; t = obj ? t.baseType : null) {
				var props = obj ? t.get_instanceProperties() : t.get_staticProperties();

				for (var propName in props) {
					if (loadedProperties.indexOf(propName) >= 0) {
						continue;
					}

					loadedProperties.push(propName);

					var prop = props[propName];

					if (!prop) {
						throw new Error($format("Cannot load object {0}|{2} because it has an unexpected property '{1}'", typeName, propName, id));
					}

					if (prop.get_origin() !== "server") {
						continue;
					}

					if (!initObj && !prop.get_isList()) {
						// If the root object is already initialized, then skip over non-list properties.
						continue;
					}

					var propData;

					// instance fields have indexes, static fields use names
					if (obj) {
						propData = json[prop.get_index()];
					} else {
						propData = json[propName];

						// not all static fields may be present
						if (propData === undefined) {
							continue;
						}
					}

					if (propData !== null) {
						var propType = prop.get_jstype();

						// Always process list properties since they can be loaded after the parent object.
						if (prop.get_isList()) {
							var list = prop.get_isStatic() ? prop.value() : obj[prop._fieldName];

							if (propData == "?") {
								// don't overwrite list if its already a ghost
								if (!list) {
									list = ListLazyLoader.register(obj, prop);
									Property$_init.call(prop, obj, list, false);
								}
							} else {
								if (!list || LazyLoader.isRegistered(list)) {

									var doingObjectInit = undefined;
									//var newItems = [];

									// json has list members
									if (list) {
										ListLazyLoader.unregister(list);
										doingObjectInit = false;
									} else {
										list = [];
										doingObjectInit = true;
									}

									for (var i = 0; i < propData.length; i++) {
										var ref = propData[i];
										var c = getObject(model, propType, (ref && ref.id || ref), (ref && ref.type || propType));
										if (list.contains(c)) {
											logWarning($format("Initializing list {0}|{1}.{2} already contains object {3}.", typeName, id, prop._name, Entity.toIdString(c)));
										}
										//newItems.push(c);
										list.push(c);
									}

									if (doingObjectInit) {
										Property$_init.call(prop, obj, list);
									} else {
										// Collection change driven by user action or other behavior would result in the "change" event
										// being raised for the list property.  Since we don't want to record this as a true observable
										// change, raise the event manually so that rules will still run as needed.
										//if (obj) {
										prop._raiseEvent("changed", [obj, { property: prop, newValue: list, oldValue: undefined, collectionChanged: true }]);
										//}

										// Example of explicitly raising the collection change event if needed.
										// NOTE: This is probably not necessary because it is difficult to get a reference to a
										// non-loaded list and so nothing would be watching for changes prior to loading completion.
										// The _initializing flag would be necessary to signal to the property's collection change
										// handler that it should not raise the various events in response to the collection change.
										//list._initializing = true;
										//Sys.Observer.raiseCollectionChanged(list, [new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, newItems, 0)]);
										//delete list._initializing;
									}
								}
							}
						} else if (initObj) {
							var ctor = prop.get_jstype(true);

							// assume if ctor is not found its a model type not an intrinsic
							if (!ctor || ctor.meta) {
								Property$_init.call(prop, obj, getObject(model, propType, (propData && propData.id || propData), (propData && propData.type || propType)));
							} else {
								// Coerce strings into dates
								if (ctor == Date && propData && propData.constructor == String && propData.length > 0) {

									// Convert from string (e.g.: "2011-07-28T06:00:00.000Z") to date.
									dateRegex.lastIndex = 0;
									propData = new Date(propData.replace(dateRegex, dateRegexReplace));

									//now that we have the value set for the date.
									//if the underlying property datatype is actually a date and not a datetime
									//then we need to add the local timezone offset to make sure that the date is displayed acurately.
									if (prop.get_format() && !hasTimeFormat.test(prop.get_format().toString())) {
										var serverOffset = model.server.get_ServerTimezoneOffset();
										var localOffset = -(new Date().getTimezoneOffset() / 60);
										propData = propData.addHours(serverOffset - localOffset);
									}
								} else if (ctor === TimeSpan) {
									propData = new TimeSpan(propData.TotalMilliseconds);
								}
								Property$_init.call(prop, obj, propData);
							}
						}
					} else if (initObj) {
						Property$_init.call(prop, obj, null);
					}
				}
			}
		}

		if (callback && callback instanceof Function) {
			callback.call(thisPtr || this, loadedObj);
		}
	}

	function typesFromJson(model, json, onTypeLoadSuccess, onTypeLoadFailure) {
		for (var typeName in json) {
			var typeJson = json[typeName];
			if (typeJson === null) {
				if (onTypeLoadFailure) {
					onTypeLoadFailure(typeName, null);
				}
			} else {
				typeFromJson(model, typeName, typeJson);
				if (onTypeLoadSuccess) {
					onTypeLoadSuccess(typeName, typeJson);
				}
			}
		}
	}

	function typeFromJson(model, typeName, json) {
		// get model type. it may have already been created for lazy loading
		var mtype = getType(model, typeName, json.baseType);

		// set the default type format
		if (json.format) {
			mtype.set_format(getFormat(mtype.get_jstype(), json.format));
		}

		if (mtype.get_originForNewProperties() === "client") {
			throw new Error("Type \"" + mtype._fullName + "\" has already been loaded");
		}

		// store exports
		if (json.exports) {
			mtype.set_exports(json.exports);
		}

		// define properties
		for (var propName in json.properties) {
			var propJson = json.properties[propName];

			// Type
			var propType = propJson.type;
			if (propJson.type.endsWith("[]")) {
				propType = propType.toString().substring(0, propType.length - 2);
				propJson.isList = true;
			}
			propType = getJsType(model, propType);

			// Format
			var format = getFormat(propType, propJson.format);

			// Add the property
			var prop = mtype.addProperty({
				name: propName,
				type: propType,
				label: propJson.label,
				helptext: propJson.helptext,
				format: format,
				isList: propJson.isList === true,
				isStatic: propJson.isStatic === true,
				isPersisted: propJson.isPersisted !== false,
				isCalculated: propJson.isCalculated === true,
				index: propJson.index,
				defaultValue: propJson.defaultValue ? mtype.compileExpression(propJson.defaultValue) : undefined,
				constant: propJson.constant
			});
		
			// setup static properties for lazy loading
			if (propJson.isStatic && propJson.isList) {
				Property$_init.call(prop, null, ListLazyLoader.register(null, prop));
			}

			// process property specific rules, which have a specialized json syntax to improve readability and minimize type json size
			if (propJson.rules) {
				for (var rule in propJson.rules) {
					var options = propJson.rules[rule];
				
					// default the type to the rule name if not specified
					if (!options.type) {
						options.type = rule;

						// calculate the name of the rule if not specified in the json, assuming it will be unique
						if (!options.name) {
							options.name = mtype.get_fullName() + "." + prop.get_name() + "." + rule.substr(0, 1).toUpperCase() + rule.substr(1);
						}
					}

					// initialize the name of the rule if not specified in the json
					else if (!options.name) {
						options.name = rule;
					}

					options.property = prop;
					ruleFromJson(mtype, options);
				}
			}
		}

		// ensure all properties added from now on are considered client properties
		mtype.set_originForNewProperties("client");

		// define methods
		for (var methodName in json.methods) {
			var methodJson = json.methods[methodName];
			mtype.addMethod({ name: methodName, parameters: methodJson.parameters, isStatic: methodJson.isStatic });
		}

		// define condition types
		if (json.conditionTypes)
			conditionTypesFromJson(model, mtype, json.conditionTypes);

		// define rules 
		if (json.rules) {
			for (var i = 0; i < json.rules.length; ++i) {
				ruleFromJson(mtype, json.rules[i]);
			}
		}

	}

	function conditionTypesFromJson(model, mtype, json) {
		json.forEach(function (ctype) {
			conditionTypeFromJson(mtype, ctype);
		});
	}

	function conditionTypeFromJson(mtype, json) {

		// for rules that assert a single condition, the code will be the unique name of the rule
		json.code = json.code || json.name;

		// attempt to retrieve the condition type by code.
		var conditionType = ExoWeb.Model.ConditionType.get(json.code);

		// create the condition type if it does not already exist.
		if (!conditionType) {

			// get a list of condition type sets for this type.
			var sets = !json.sets ? [] : json.sets.map(function(name) {
				var set = ExoWeb.Model.ConditionTypeSet.get(name);
				if (!set) {
					set = new ExoWeb.Model.ConditionTypeSet(name);
				}
				return set;
			});

			// create the appropriate condition type based on the category.
			if (!json.category || json.category == "Error") {
				conditionType = new ExoWeb.Model.ConditionType.Error(json.code, json.message, sets, "server");
			}
			else if (json.category == "Warning") {
				conditionType = new ExoWeb.Model.ConditionType.Warning(json.code, json.message, sets, "server");
			}
			else if (json.category == "Permission") {
				conditionType = new ExoWeb.Model.ConditionType.Permission(json.code, json.message, sets, json.permissionType, json.isAllowed, "server");
			}
			else {
				conditionType = new ExoWeb.Model.ConditionType(json.code, json.category, json.message, sets, "server");
			}

			// account for the potential for subclasses to be serialized with additional properties.
			conditionType.extend(json);
		}

		if (json.rule && json.rule.hasOwnProperty("type")) {
			conditionType.rules.push(ruleFromJson(mtype, json.rule, conditionType));
		}

		return conditionType;
	}

	function ruleFromJson(mtype, options) {
		var ruleType = ExoWeb.Model.Rule[options.type];
		if (options.conditionType) {
			options.conditionType = conditionTypeFromJson(mtype, options.conditionType);
		}
		else if (ruleType.prototype instanceof ConditionRule) {
			options.conditionType = conditionTypeFromJson(mtype, options);
		}
		return new ruleType(mtype, options);
	}

	function getJsType(model, typeName, forLoading) {
		// Get an array representing the type family.
		var family = typeName.split(">");

		// Try to get the js type from the window object.
		var jstype = ExoWeb.Model.Model.getJsType(family[0], true);

		// If its not defined, assume the type is a model type
		// that may eventually be fetched.
		if (jstype === undefined) {
			jstype = getType(model, null, family).get_jstype();
		}

		return jstype;
	}

	function flattenTypes(types, flattened) {
		function add(item) {
			if (flattened.indexOf(item) < 0) {
				flattened.push(item);
			}
		}

		if (types instanceof Array) {
			Array.forEach(types, add);
		}
		else if (typeof (types) === "string") {
			Array.forEach(types.split(">"), add);
		}
		else if (types) {
			add(types);
		}
	}

	// Gets a reference to a type.  IMPORTANT: typeName must be the
	// family-qualified type name (ex: Employee>Person).
	function getType(model, finalType, propType) {
		// ensure the entire type family is at least ghosted
		// so that javascript OO mechanisms work properly
		var family = [];

		flattenTypes(finalType, family);
		flattenTypes(propType, family);

		var mtype;
		var baseType;

		while (family.length > 0) {
			baseType = mtype;

			var type = family.pop();

			if (type instanceof ExoWeb.Model.Type) {
				mtype = type;
			}
			else if (type.meta) {
				mtype = type.meta;
			}
			else {
				// type is a string
				mtype = model.type(type);

				// if type doesn't exist, setup a ghost type
				if (!mtype) {
					mtype = model.addType(type, baseType, "server");
					TypeLazyLoader.register(mtype);
				}
			}
		}

		return mtype;
	}

	function getObject(model, propType, id, finalType, forLoading) {
		if (id === STATIC_ID) {
			throw new Error("Function 'getObject' can only be called for instances (id='" + id + "')");
		}

		// get model type
		var mtype = getType(model, finalType, propType);

		// Try to locate the instance by id.
		var obj = mtype.get(id,
			// If an exact type exists then it should be specified in the call to getObject.
			true);

		// If it doesn't exist, create a ghosted instance.
		if (!obj) {
			obj = new (mtype.get_jstype())(id);
			obj.wasGhosted = true;
			if (!forLoading) {
				// If the instance is not being loaded, then attach a lazy loader.
				ObjectLazyLoader.register(obj);
			}
		}

		return obj;
	}

	function onTypeLoaded(model, typeName) {
		var mtype = model.type(typeName);
		mtype.eachBaseType(function(mtype) {
			if (!LazyLoader.isLoaded(mtype)) {
				throw new Error("Base type " + mtype._fullName + " is not loaded.");
			}
		});
		TypeLazyLoader.unregister(mtype);
		raiseExtensions(mtype);
		return mtype;
	}

	///////////////////////////////////////////////////////////////////////////////
	function fetchTypesImpl(model, typeNames, callback, thisPtr) {
		var signal = new ExoWeb.Signal("fetchTypes(" + typeNames.join(",") + ")");
		signal.pending();

		var typesPending = typeNames.copy(), typesLoaded = [];

		function typesFetched(success, types, otherTypes) {
			var baseTypesToFetch = [], loadedTypes = [], baseTypeDependencies = {}, loadableTypes = [];

			if (success) {
				typesFromJson(model, types, null, function (typeName) {
					// Remove types that failed to load
					typesPending.remove(typeName);
				});

				// Update types that have been loaded.  This needs to be persisted since
				// this function can recurse and arguments are not persisted.
				eachProp(types, function(prop) { typesLoaded.push(prop); });
				if (otherTypes) {
					eachProp(otherTypes, function(prop) { typesLoaded.push(prop); });
				}

				// Extract the types that can be loaded since they have no pending base types
				purge(typesPending, function(typeName) {
					var mtype, pendingBaseType = false;

					// In the absense of recursion this will be equivalent to enumerating
					// the properties of the "types" and "otherTypes" arguments.
					if (typesLoaded.contains(typeName)) {
						mtype = model.type(typeName);
						if (mtype) {
							if (LazyLoader.isLoaded(mtype)) {
								loadedTypes.push(mtype._fullName);
							}
							else {
								// find base types that are not loaded
								mtype.eachBaseType(function(baseType) {
									// Don't raise the loaded event until the base types are marked as loaded (or about to be marked as loaded in this pass)
									if (!LazyLoader.isLoaded(baseType)) {
										// Base type will be loaded in this pass
										if (typesLoaded.contains(baseType._fullName)) {
											if (baseTypeDependencies.hasOwnProperty(typeName)) {
												baseTypeDependencies[typeName].splice(0, 0, baseType._fullName);
											}
											else {
												baseTypeDependencies[typeName] = [baseType._fullName];
											}
										}
										else {
											pendingBaseType = true;
											if (!baseTypesToFetch.contains(baseType._fullName) && !typesPending.contains(baseType._fullName)) {
												baseTypesToFetch.push(baseType._fullName);
											}
										}
									}
								});

								if (!pendingBaseType) {
									loadableTypes.push(typeName);
									return true;
								}
							}
						}
					}
				});

				// Remove types that have already been marked as loaded
				loadedTypes.forEach(function(typeName) {
					typesPending.remove(typeName);
				});

				// Raise loaded event on types that can be marked as loaded
				while(loadableTypes.length > 0) {
					var typeName = loadableTypes.dequeue();
					if (baseTypeDependencies.hasOwnProperty(typeName)) {
						// Remove dependencies from array and map
						var deps = baseTypeDependencies[typeName];
						delete baseTypeDependencies[typeName];
						deps.forEach(function(t) {
							loadableTypes.remove(t);
							delete baseTypeDependencies[t];
						});

						// Splice the types back into the beginning of the array in the correct order.
						var spliceArgs = deps;
						spliceArgs.push(typeName);
						spliceArgs.splice(0, 0, 0, 0);
						Array.prototype.splice.apply(loadableTypes, spliceArgs);
					}
					else {
						typesPending.remove(typeName);
						onTypeLoaded(model, typeName);
					}
				}

				// Fetch any pending base types
				if (baseTypesToFetch.length > 0) {
					// TODO: need to notify dontDoubleUp that these types are
					// now part of the partitioned argument for the call.
					typesPending.addRange(baseTypesToFetch);

					// Make a recursive request for base types.
					typeProvider(baseTypesToFetch, typesFetched);
				}
				else if (typesPending.length === 0 && signal.isActive()) {
					// COMPLETE!!!
					signal.oneDone();
				}
			}
			// Handle an error response.  Loading should
			// *NOT* continue as if the type is available.
			else {
				throw new Error($format("Failed to load {0} (HTTP: {1}, Timeout: {2})", typeNames.join(","), types._statusCode, types._timedOut));
			}
		}

		// request the types
		typeProvider(typeNames, typesFetched);

		signal.waitForAll(function() {
			if (callback && callback instanceof Function) {
				var jstypes = typeNames.map(function (typeName) {
					var mtype = model.type(typeName);
					return mtype ? mtype.get_jstype() : null;
				});
				callback.apply(thisPtr || this, jstypes);
			}
		});
	}

	function moveTypeResults(originalArgs, invocationArgs, callbackArgs) {
		// Replace all elements of the callback args array with the types that were requested
		var spliceArgs = [0, callbackArgs.length];
		Array.prototype.push.apply(spliceArgs, invocationArgs[1].map(function(typeName) {
			var mtype = invocationArgs[0].type(typeName);
			return mtype ? mtype.get_jstype() : null;
		}));
		Array.prototype.splice.apply(callbackArgs, spliceArgs);
	}

	var fetchTypes = fetchTypesImpl.dontDoubleUp({ callbackArg: 2, thisPtrArg: 3, partitionedArg: 1, partitionedFilter: moveTypeResults });

	// fetches model paths and calls success or fail based on the outcome
	function fetchPathTypes(model, jstype, path, success, fail) {
		var step = path.steps.dequeue();
		var removedSteps = [step];
		while (step) {
			// locate property definition in model
			var prop = jstype.meta.property(step.property);

			if (!prop) {
				var args = [0, 0];
				Array.prototype.push.apply(args, removedSteps);
				Array.prototype.splice.apply(path.steps, args);
				fail("Could not find property \"" + step.property + "\" on type \"" + jstype.meta.get_fullName() + "\".");
				return;
			}

			// don't need to fetch type information for value types
			if (prop.get_isValueType()) {
				break;
			}

			// Load the type of the property if its not yet loaded
			var mtype;
			if (step.cast) {
				mtype = model.type(step.cast);

				// if this type has never been seen, go and fetch it and resume later
				if (!mtype) {
					Array.insert(path.steps, 0, step);
					fetchTypes(model, [step.cast], function () {
						fetchPathTypes(model, jstype, path, success, function () {
							var args = [0, 0];
							Array.prototype.push.apply(args, removedSteps);
							Array.prototype.splice.apply(path.steps, args);
							fail.apply(this, arguments);
						});
					});
					return;
				}
			}
			else {
				mtype = prop.get_jstype().meta;
			}

			// if property's type isn't load it, then fetch it
			if (!LazyLoader.isLoaded(mtype)) {
				fetchTypes(model, [mtype.get_fullName()], function (t) {
					fetchPathTypes(model, t, path, success, function () {
						var args = [0, 0];
						Array.prototype.push.apply(args, removedSteps);
						Array.prototype.splice.apply(path.steps, args);
						fail.apply(this, arguments);
					});
				});

				// path walking will resume with callback
				return;
			}

			// keep walking the path
			jstype = mtype.get_jstype();

			step = path.steps.dequeue();
			removedSteps.push(step);
		}

		// Inform the caller that the path has been successfully fetched
		success();
	}

	function fetchQueryTypes(model, typeName, paths, callback) {
		var signal = new ExoWeb.Signal("fetchTypes");

		function rootTypeLoaded(jstype) {
		
			// process all paths
			if (paths) {
				Array.forEach(paths, function (path) {

					// attempt to fetch the path
					fetchPathTypes(model, jstype, path, signal.pending(), function (err) {

						// determine if the path represents a static property if the path was not valid
						var step = null, typeName = "";
						while (path.steps.length > 1) {
							step = path.steps.dequeue();
							typeName += (typeName.length > 0 ? "." : "") + step.property;
						}

						var mtype = model.type(typeName);

						var fetchStaticPathTypes = function fetchStaticPathTypes() {
							fetchPathTypes(model, (mtype || model.type(typeName)).get_jstype(), path, signal.pending(), function () {
								throw new Error("Invalid query path \"" + path + "\" - " + err);
							});
						};

						if (!mtype) {
							// first time type has been seen, fetch it
							fetchTypes(model, [typeName], signal.pending(function (t) {
								if (!t) {
									throw new Error(err);
								}
								fetchStaticPathTypes(t);
							}));
						}
						else if (LazyLoader.isRegistered(mtype)) {
							// lazy load type and continue walking the path
							LazyLoader.load(mtype, null, false, signal.pending(fetchStaticPathTypes));
						}
						else {
							fetchStaticPathTypes();
						}

					});
				});
			}
		}

		// load root type, then load types referenced in paths
		var rootType = model.type(typeName);
		if (!rootType) {
			fetchTypes(model, [typeName], signal.pending(function(t) {
				rootTypeLoaded(t);
			}));
		}
		else if (LazyLoader.isRegistered(rootType)) {
			LazyLoader.load(rootType, null, false, signal.pending(rootTypeLoaded));
		}
		else {
			rootTypeLoaded(rootType.get_jstype());
		}

		signal.waitForAll(callback);
	}

	// Recursively searches throught the specified object and restores dates serialized as strings
	function restoreDates(value) {
		function tryRestoreDate(obj, key) {
			var val = obj[key];
			if (val && val.constructor === String && dateRegex.test(val)) {
				dateRegex.lastIndex = 0;
				obj[key] = new Date(val.replace(dateRegex, dateRegexReplace));
			}
		}

		if (value instanceof Array) {
			for (var i = 0; i < value.length; i++) {
				tryRestoreDate(value, i);
			}
		}
		else if (value instanceof Object) {
			for (var field in value) {
				if (value.hasOwnProperty(field)) {
					tryRestoreDate(value, field);
				}
			}
		}
	}

	function tryGetJsType(model, name, property, forceLoad, callback, thisPtr) {
		var jstype = ExoWeb.Model.Model.getJsType(name, true);

		if (jstype && LazyLoader.isLoaded(jstype.meta)) {
			callback.call(thisPtr || this, jstype);
		}
		else if (jstype && forceLoad) {
			LazyLoader.load(jstype.meta, property, false, callback, thisPtr);
		}
		else if (!jstype && forceLoad) {
			ensureJsType(model, name, callback, thisPtr);
		}
		else {
			$extend(name, function() {
				callback.apply(this, arguments);
			}, thisPtr);
		}
	}

	var pendingEntities = {};

	function lazyCreateEntity(type, id, callback, thisPtr) {
		var pendingForType = pendingEntities[type];
		if (!pendingForType) {
			pendingEntities[type] = pendingForType = {};
		}

		if (!pendingForType[id]) {
			pendingForType[id] = { callback: callback, thisPtr: thisPtr };
		}
	}

	var LazyLoadEnum = {
		// If the object doesn't exist, then the callback will be invoked once the object has been loaded for some other reason.
		None: 0,
		// If the object doesn't exist, then force creation and loading of the object and invoke the callback immediately.
		Force: 1,
		// If the object doesn't exist, then force creation and loading of the object and invoke the callback when loading is complete.
		ForceAndWait: 2,
		// If the object doesn't exist, then create the object and invoke the callback.
		Lazy: 3
	};

	var metaGet = Type.prototype.get;

	Type.prototype.get = function (id, exactTypeOnly, suppressLazyInit) {
		var obj = metaGet.apply(this, arguments);

		if (!obj && !suppressLazyInit) {
			// If the object doesn't exist and is pending, create it.
			var pendingForType = pendingEntities[this.get_fullName()];
			if (pendingForType) {
				var pendingForId = pendingForType[id];
				if (pendingForId) {
					obj = pendingForId.callback.call(pendingForId.thisPtr);
				}
			}
		}

		return obj;
	};

	function tryGetEntity(model, translator, type, id, property, lazyLoad, callback, thisPtr) {
		// First, attempt to retrieve an existing object.
		var obj = type.meta.get(
			// Translate to the client-side id.
			translateId(translator, type.meta.get_fullName(), id),

			// We know that tryGetEntity is only called internally and the source of the entity
			// information is always seen as server-origin and so should specify an exact type.
			true,

			// Dont' lazily create the new object if no lazy behavior is specified, i.e. the caller doesn't want to force the object to exist.
			lazyLoad !== LazyLoadEnum.Force && lazyLoad !== LazyLoadEnum.ForceAndWait && lazyLoad !== LazyLoadEnum.Lazy
		);

		if (obj && obj.meta.isLoaded(property)) {
			// If the object exists and is loaded, then invoke the callback immediately.
			callback.call(thisPtr || this, obj);
		}
		else if (lazyLoad == LazyLoadEnum.Lazy) {
			if (!obj) {
				obj = fromExoModel({ type: type.meta.get_fullName(), id: id }, translator, true);
			}

			// In lazy mode, simply invoke the callback if the object exists, since the caller doesn't care whether it is loaded.
			callback.call(thisPtr || this, obj);
		}
		else if (lazyLoad == LazyLoadEnum.Force) {
			// The caller wants the instance force loaded but doesn't want to wait for it to complete.

			// If the instance doesn't exist then ensure that a ghosted instance is created.
			if (!obj) {
				obj = fromExoModel({ type: type.meta.get_fullName(), id: id }, translator, true);
			}

			// Invoke the callback immediately.
			callback.call(thisPtr || this, obj);

			// After the callback has been invoked, force loading to occur.
			LazyLoader.load(obj, property, false);
		}
		else if (lazyLoad == LazyLoadEnum.ForceAndWait) {
			// The caller wants the instance force loaded and will wait for it to complete.

			// If the instance doesn't exist then ensure that a ghosted instance is created.
			if (!obj) {
				obj = fromExoModel({ type: type.meta.get_fullName(), id: id }, translator, true);
			}

			// Force loading to occur, passing through the callback.
			LazyLoader.load(obj, property, false, thisPtr ? callback.bind(thisPtr) : callback);
		}
		else {
			// The caller does not want to force loading, so wait for the instance to come into existance and invoke the callback when it does.

			function invokeCallback() {
				if (filter(obj) !== true)
					return;

				// only invoke the callback once
				propertyFilter = function () { return false; };
				callback.call(thisPtr || this, obj);
			}

			var objSignal = new Signal("wait for object to exist");

			function ensureListLoaded() {
				// If there is a property specified that is a list, then don't invoke the callback until it is loaded.
				if (property) {
					var propertyObj = type.meta.property(property);
					// Only entity lists can be lazy loaded in addition to the parent object.
					if (propertyObj.get_isEntityListType()) {
						if (!obj.meta.isLoaded(property)) {
							// List lazy loader will invoke property change event
							propertyObj.addChanged(objSignal.pending(null, null, true), obj, true);
						}
					}
				}
			}

			function waitForObjectLoaded() {
				// Since the object is not loaded, don't invoke the callback until it is loaded.
				obj.meta.type.addInitExisting(objSignal.pending(function () {
					ensureListLoaded();
				}, null, true), obj, true);
			}

			function waitForObjectExists() {
				// The object doesn't exist, so don't invoke the callback until something causes it to be created.
				model.addObjectRegistered(objSignal.pending(null, null, true), function (newObj) {
					if (newObj.meta.type === type.meta && newObj.meta.id === translateId(translator, type.meta.get_fullName(), id)) {
						obj = newObj;
						if (!obj.meta.isLoaded()) {
							waitForObjectLoaded();
						}
						return true;
					}
				}, true);
			}

			if (!obj) {
				waitForObjectExists();
			} else if (!obj.meta.isLoaded()) {
				waitForObjectLoaded();
			} else {
				ensureListLoaded();
			}

			objSignal.waitForAll(function () {
				callback.call(thisPtr || this, obj);
			}, null, true);
		}
	}

	// #endregion

	// #region ExoWeb.Mapper.TypeLazyLoader
	//////////////////////////////////////////////////

	function TypeLazyLoader() {
	}

	function typeLoad(mtype, propName, inScope, callback, thisPtr) {
		if (!ExoWeb.config.allowTypeLazyLoading) {
			throw new Error("Type lazy loading has been disabled: " + mtype.get_fullName());
		}

		fetchTypes(mtype.model, [mtype.get_fullName()], function(jstype) {
			if (callback && callback instanceof Function) {
				callback(jstype);
			}
		}, thisPtr);
	}

	TypeLazyLoader.mixin({
		load: typeLoad.dontDoubleUp({ callbackArg: 3, thisPtrArg: 4, groupBy: 0 })
	});

	(function() {
		var instance = new TypeLazyLoader();

		TypeLazyLoader.register = function(obj) {
			LazyLoader.register(obj, instance);
		};

		TypeLazyLoader.unregister = function(obj) {
			LazyLoader.unregister(obj, instance);
		};
	})();

	// #endregion

	// #region ExoWeb.Mapper.ObjectLazyLoader
	//////////////////////////////////////////////////

	// <reference path="../core/Config.js" />

	function ObjectLazyLoader() {
		this._requests = {};
		this._typePaths = {};
	}

	var pendingObjects = 0;

	registerActivity("ObjectLazyLoader", function() {
		return pendingObjects > 0;
	});

	function objLoad(obj, propName, inScope, callback, thisPtr) {
		if (!ExoWeb.config.allowObjectLazyLoading) {
			throw new Error($format("Object lazy loading has been disabled: {0}|{1}", obj.meta.type.get_fullName(), obj.meta.id));
		}

		pendingObjects++;

		var signal = new ExoWeb.Signal("object lazy loader");

		var id = obj.meta.id || STATIC_ID;
		var mtype = obj.meta.type || obj.meta;

		// Get the paths from the original query(ies) that apply to this object (based on type).
		var paths = ObjectLazyLoader.getRelativePaths(obj);

		// Add the property to load if specified.  Assumes an instance property.
		if (propName && paths.indexOf(propName) < 0) {
			paths.push(propName);
		}

		// fetch object json
		logWarning($format("Lazy load object: {0}|{1}", mtype.get_fullName(), id));

		// TODO: reference to server will be a singleton, not context
		objectProvider(mtype.get_fullName(), [id], paths, inScope,
			serializeChanges.call(context.server, true),
			function(result) {
				mtype.model.server._handleResult(result, $format("Lazy load: {0}|{1}", mtype.get_fullName(), id), null, function() {
					LazyLoader.unregister(obj, this);
					pendingObjects--;

					// Raise init events if registered.
					for (var t = mtype; t; t = t.baseType) {
						var handler = t._getEventHandler("initExisting");
						if (handler)
							handler(obj, {});
					}

					callback.call(thisPtr || this, obj);
				});
			},
			function(e) {
				pendingObjects--;
				var message = $format("Failed to load {0}|{1}: ", [mtype.get_fullName(), id]);
				if (e !== undefined && e !== null &&
					e.get_message !== undefined && e.get_message !== null &&
					e.get_message instanceof Function) {

					message += e.get_message();
				}
				else {
					message += "unknown error";
				}
				throw new Error(message);
			});

		// does the object's type need to be loaded too?
		if (LazyLoader.isRegistered(mtype)) {
			LazyLoader.load(mtype, null, false, signal.pending());
		}
	}

	ObjectLazyLoader.mixin({
		load: objLoad.dontDoubleUp({ callbackArg: 3, thisPtrArg: 4, groupBy: 0 })
	});

	(function() {
		var instance = new ObjectLazyLoader();

		ObjectLazyLoader.addPaths = function ObjectLazyLoader$addPaths(rootType, paths) {
			var typePaths = instance._typePaths[rootType];
			if (!typePaths) {
				typePaths = instance._typePaths[rootType] = [];
			}
			for (var i = 0; i < paths.length; i++) {
				var path = paths[i];
				if (typePaths.indexOf(path) < 0) {
					typePaths.push(path);
				}
			}
		};

		ObjectLazyLoader.getRelativePaths = function getRelativePaths(obj) {
			return ObjectLazyLoader.getRelativePathsForType(obj.meta.type);
		};

		ObjectLazyLoader.getRelativePathsForType = function getRelativePathsForType(type) {
			var relPaths = [];

			for (var typeName in instance._typePaths) {
				var jstype = Model.getJsType(typeName);

				if (jstype && jstype.meta) {
					var paths = instance._typePaths[typeName];
					for (var i = 0; i < paths.length; i++) {
						var path = paths[i].expression;
						var chain = Model.property(path, jstype.meta);
						// No need to include static paths since if they were 
						// cached then they were loaded previously.
						if (!chain.get_isStatic()) {
							var rootedPath = chain.rootedPath(type);
							if (rootedPath) {
								relPaths.push(rootedPath);
							}
						}
					}
				}
			}

			return relPaths.distinct();
		};

		ObjectLazyLoader.isRegistered = function (obj) {
			return LazyLoader.isRegistered(obj, instance);
		};

		ObjectLazyLoader.register = function(obj) {
			if (!ObjectLazyLoader.isRegistered(obj)) {
				if (obj.meta.type.get_origin() !== "server") {
					throw new Error($format("Cannot lazy load instance of non-server-origin type: {0}|{1}", obj.meta.type.get_fullName(), obj.meta.id));
				}
				LazyLoader.register(obj, instance);
			}
		};

		ObjectLazyLoader.unregister = function(obj) {
			LazyLoader.unregister(obj, instance);
		};
	})();

	// #endregion

	// #region ExoWeb.Mapper.ListLazyLoader
	//////////////////////////////////////////////////

	function ListLazyLoader() {
	}

	function listLoad(list, propName, inScope, callback, thisPtr) {
		var signal = new ExoWeb.Signal("list lazy loader");

		var model = list._ownerProperty.get_containingType().model;
		var ownerId = list._ownerId;
		var containingType = list._ownerProperty.get_containingType();

		// Determine the instance or type that owns the list.
		var owner = ownerId === STATIC_ID ?

			// For static lists the owner is a type.
			containingType.get_jstype() :

			// For non-static lists, retrieve the owner by type and id.
			containingType.get(
				// Fetch the owner using the id specified in the lazy loader metadata.
				ownerId,

				// When loading a list the type of the owner comes from the containing
				// type of the property, so it may not be the exact type of the instance.
				false
			);

		var ownerType = ownerId === STATIC_ID ? owner.meta.get_fullName() : owner.meta.type.get_fullName();
		var prop = list._ownerProperty;
		var propIndex = list._ownerProperty.get_index();
		var propName = list._ownerProperty.get_name();
		var propType = list._ownerProperty.get_jstype().meta;

		if (!ExoWeb.config.allowListLazyLoading) {
			throw new Error($format("List lazy loading has been disabled: {0}|{1}.{2}", ownerType, ownerId, propName));
		}

		// load the objects in the list
		logWarning($format("Lazy load list: {0}|{1}.{2}", ownerType, ownerId, propName));

		var objectJson, conditionsJson;

		// TODO: reference to server will be a singleton, not context
		listProvider(ownerType, ownerId, propName, ownerId === STATIC_ID ? [] : ObjectLazyLoader.getRelativePathsForType(propType),
			serializeChanges.call(context.server, true),
			signal.pending(function(result) {
				objectJson = result.instances;
				conditionsJson = result.conditions;
			}),
			signal.orPending(function(e) {
				var errorMessage;
				if (e !== undefined && e !== null &&
						e.get_message !== undefined && e.get_message !== null &&
						e.get_message instanceof Function) {

					errorMessage = e.get_message();
				}
				else if (e.message) {
					errorMessage = e.message;
				}
				else {
					errorMessage = "unknown error";
				}

				throw new Error($format("Failed to load {0}|{1}.{2}: {3}", ownerType, ownerId, propName, errorMessage));
			})
		);

		// ensure that the property type is loaded as well.
		// if the list has objects that are subtypes, those will be loaded later
		// when the instances are being loaded
		if (LazyLoader.isRegistered(propType)) {
			LazyLoader.load(propType, null, false, signal.pending());
		}

		signal.waitForAll(function() {
			if (!objectJson) {
				return;
			}

			// The actual type name and id as found in the resulting json.
			var jsonId = ownerId;
			var jsonType = ownerType;

			// Find the given type and id in the object json.  The type key may be a dervied type.
			function searchJson(mtype, id) {
				// The given type is a key that is present in the result json.
				if (objectJson[mtype.get_fullName()]) {

					// The id is also a key.
					if (objectJson[mtype.get_fullName()][id]) {
						jsonType = mtype.get_fullName();
						jsonId = id;
						return true;
					}

					// Ids returned from the server are not always in the same case as ids on the client, so check one-by-one.
					for (var varId in objectJson[mtype.get_fullName()]) {
						if (varId.toLowerCase() == id.toLowerCase()) {
							jsonType = mtype.get_fullName();
							jsonId = varId;
							return true;
						}
					}
				}

				// Check derived types recursively.
				for (var i = 0; i < mtype.derivedTypes.length; i++) {
					if (searchJson(mtype.derivedTypes[i], id)) {
						return true;
					}
				}
			}

			if (!searchJson(ExoWeb.Model.Model.getJsType(ownerType).meta, ownerId)) {
				throw new Error($format("Data could not be found for {0}:{1}.", ownerType, ownerId));
			}

			var listJson = prop.get_isStatic() ?
				objectJson[jsonType][jsonId][propName] :
				objectJson[jsonType][jsonId][propIndex];

			if (!(listJson instanceof Array)) {
				throw new Error($format("Attempting to load list {0} of instance {1}:{2}, but the response JSON is not an array: {3}.", propName, ownerType, ownerId, listJson));
			}

			var populateList = false;
			//var newItems = [];

			if (LazyLoader.isRegistered(list)) {
				// If the lazy loader is no longer registered,
				// then don't populate the list.
				populateList = true;
				ListLazyLoader.unregister(list, this);
			}

			// populate the list with objects
			for (var i = 0; i < listJson.length; i++) {
				var ref = listJson[i];
				var item = getObject(model, propType, (ref && ref.id || ref), (ref && ref.type || propType));

				//newItems.push(item);

				if (populateList) {
					if (list.contains(item)) {
						logWarning($format("Lazy loading list {0}|{1}.{2} already contains object {3}.", ownerType, ownerId, propName, Entity.toIdString(item)));
					}
					list.push(item);
				}

				// if the list item is already loaded ensure its data is not in the response
				// so that it won't be reloaded
				if (LazyLoader.isLoaded(item)) {
					delete objectJson[jsonType][ref.id];
				}
			}

			// remove list from json and process the json.  there may be
			// instance data returned for the objects in the list
			if (LazyLoader.isLoaded(owner)) {
				delete objectJson[jsonType][jsonId];
			}

			ListLazyLoader.unregister(list, this);

			var batch = ExoWeb.Batch.start($format("{0}|{1}.{2}", [ownerType, ownerId, propName]));

			var done = function() {
				// Collection change driven by user action or other behavior would result in the "change" event
				//	being raised for the list property.  Since we don't want to record this as a true observable
				//	change, raise the event manually so that rules will still run as needed.
				// This occurs before batch end so that it functions like normal object loading.
				//if (ownerId !== STATIC_ID) {
				prop._raiseEvent("changed", [owner, { property: prop, newValue: list, oldValue: undefined, collectionChanged: true }]);
				//}

				// Example of explicitly raising the collection change event if needed.
				// NOTE: This is probably not necessary because it is difficult to get a reference to a
				// non-loaded list and so nothing would be watching for changes prior to loading completion.
				// The _initializing flag would be necessary to signal to the property's collection change
				// handler that it should not raise the various events in response to the collection change.
				//list._initializing = true;
				//Sys.Observer.raiseCollectionChanged(list, [new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, newItems, 0)]);
				//delete list._initializing;

				ExoWeb.Batch.end(batch);
				callback.call(thisPtr || this, list);
			};

			objectsFromJson(model, objectJson, function() {
				if (conditionsJson) {
					conditionsFromJson(model, conditionsJson, list.slice(0), done);
				}
				else {
					done();
				}
			});
		});
	}

	ListLazyLoader.mixin({
		load: listLoad.dontDoubleUp({ callbackArg: 3, thisPtrArg: 4, groupBy: 0 })
	});

	(function() {
		var instance = new ListLazyLoader();

		var modifiableLists = [];

		function lazyListModified(sender, args) {
			// Check that modifications have not been allowed.
			if (modifiableLists.indexOf(sender) < 0) {
				// Check that at least one change involves adding or removing a non-new instance.
				if (args.get_changes().mapToArray(function(c) { return c.newItems || []; }).concat(args.get_changes().mapToArray(function(c) { return c.oldItems || []; })).some(function(i) { return !i.meta.isNew; })) {
					throw new Error($format("{0} list {1}.{2} was modified but it has not been loaded.",
						this._isStatic ? "Static" : "Non-static",
						this._isStatic ? this._containingType.get_fullName() : "this<" + this._containingType.get_fullName() + ">",
						this._name
					));
				}
			}
		}

		ListLazyLoader.register = function(obj, prop) {
			var list = [];

			// Throw an error if a non-loaded list is modified
			var collectionChangeHandler = lazyListModified.bind(prop);
			list._collectionChangeHandler = collectionChangeHandler;
			Observer.addCollectionChanged(list, collectionChangeHandler);

			list._ownerId = prop.get_isStatic() ? STATIC_ID : obj.meta.id;
			list._ownerProperty = prop;

			LazyLoader.register(list, instance);

			return list;
		};

		ListLazyLoader.unregister = function(list) {
			Observer.removeCollectionChanged(list, list._collectionChangeHandler);
			LazyLoader.unregister(list, instance);

			delete list._ownerId;
			delete list._ownerProperty;
			delete list._collectionChangeHandler;
		};

		ListLazyLoader.allowModification = function(list, callback, thisPtr) {
			modifiableLists.push(list);
			callback.call(thisPtr || this);
			modifiableLists.remove(list);
		};
	})();

	// #endregion

	// #region ExoWeb.Mapper.Context
	//////////////////////////////////////////////////

	// Signal to keep track of any ongoing context initialization
	var allSignals = new ExoWeb.Signal("Context : allSignals");

	ExoWeb.registerActivity("Context: allSignals", function() {
		return allSignals.isActive();
	});

	function Context() {
		window.context = this;

		this.model = { meta: new ExoWeb.Model.Model() };
		this.server = new ServerSync(this.model.meta);
	}

	Context.mixin(ExoWeb.Functor.eventing);

	var numberOfPendingQueries;

	Context.mixin({
		addReady: function Context$addReady(callback, thisPtr) {
			var queriesAreComplete = numberOfPendingQueries === 0;

			this._addEvent("ready", thisPtr ? callback.bind(thisPtr) : callback, null, true);

			// Simulate the event being raised immediately if a query or queries have already completed
			if (queriesAreComplete) {
				// Subscribers will not actually be called until signals have subsided
				allSignals.waitForAll(function() {
					this._raiseEvent("ready");
				}, this);
			}
		},
		isPending: function () {
			return numberOfPendingQueries > 0;
		},
		beginContextReady: ExoWeb.Functor(),
		endContextReady: ExoWeb.Functor()
	});

	function ensureContext() {
		if (!window.context) {
			window.context = new Context();
		}

		if (!(window.context instanceof Context)) {
			throw new Error("The window object has a context property that is not a valid context.");
		}
	}

	Context.ready = function Context$ready(context) {
		numberOfPendingQueries--;

		var queriesAreComplete = numberOfPendingQueries === 0;

		if (queriesAreComplete) {
			// Indicate that one or more model queries are ready for consumption
			allSignals.waitForAll(function() {
				context._raiseEvent("ready");
			});
		}
	};

	Context.query = function Context$query(context, options) {
		var queriesHaveBegunOrCompleted = numberOfPendingQueries !== undefined;
		if (!queriesHaveBegunOrCompleted) {
			numberOfPendingQueries = 0;
		}
		numberOfPendingQueries++;

		// Execute the query and fire the ready event when complete
		(new ContextQuery(context, options)).execute(function() {
			Context.ready(context);
		});
	}

	// #endregion

	// #region ExoWeb.Mapper.ContextQuery
	//////////////////////////////////////////////////

	function ContextQuery(context, options) {
		this.context = context;
		this.options = options;
		this.batch = null;
		this.state = {};
	}

	ContextQuery.mixin({
		execute: ExoWeb.FunctionChain.prepare(

		// Starts a batch so that others will not respond to changes that are
		// broadcast during querying, i.e. instance loading.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$setup(callback, thisPtr) {
				// start a batch to represent all of the pending work
				this.batch = ExoWeb.Batch.start("context query");

				// store init changes as early as possible
				if (this.options.changes)
					ServerSync$storeInitChanges.call(this.context.server, this.options.changes);

				// If the allSignals signal is not active, then set up a fake pending callback in
				// order to ensure that the context is not "loaded" prior to models being initilized.
				if (!allSignals.isActive()) {
					this._predictiveModelPending = allSignals.pending(null, this, true);
				}

				// Setup lazy loading on the context object to control lazy evaluation.
				// Loading is considered complete at the same point model.ready() fires. 
				LazyLoader.register(this.context, {
					load: function context$load(obj, propName, inScope, callback, thisPtr) {
						// objects are already loading so just queue up the calls
						allSignals.waitForAll(function context$load$callback() {
							LazyLoader.unregister(obj, this);

							if (callback && callback instanceof Function) {
								callback.call(thisPtr || this);
							}
						}, this, true);
					}
				});

				callback.call(thisPtr || this);
			},

		// Perform pre-processing of model queries and their paths.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$initModels(callback, thisPtr) {
				if (this.options.model) {
					// Start capturing changes prior to processing any model query
					this.context.server.beginCapturingChanges();
					ExoWeb.eachProp(this.options.model, function (varName, query) {
						// Assert that the necessary properties are provided
						if (!query.hasOwnProperty("from") || (!query.hasOwnProperty("id") && !query.hasOwnProperty("ids")))
							throw new Error("The model query \"" + varName + "\" requires a from and id or ids clause.");
						if (query.hasOwnProperty("id") && query.hasOwnProperty("ids"))
							throw new Error("The model query \"" + varName + "\" must specify either id or ids, not both.");

						// common initial setup of state for all model queries
						this.state[varName] = { signal: new ExoWeb.Signal("createContext." + varName), isArray: false };

						if (this._predictiveModelPending) {
							delete this._predictiveModelPending;
						}
						else {
							allSignals.pending(null, this, true);
						}

						// normalize id(s) property and determine whether the result should be an array
						if (query.hasOwnProperty("ids") && !(query.ids instanceof Array)) {
							query.ids = [query.ids];
						}
						else if (query.hasOwnProperty("id") && !(query.id instanceof Array)) {
							query.ids = [query.id];
							delete query.id;
						}
						else {
							// we know that either id or ids is specified, so if neither
							// one is NOT an array, then the query must be an array
							this.state[varName].isArray = true;

							// pre-initialize array queries
							var arr = [];
							Observer.makeObservable(arr);
							this.context.model[varName] = arr;
						}

						// get rid of junk (null/undefined/empty) ids
						query.ids = filter(query.ids, not(isNullOrEmpty));

						// remove new ids for later processing
						query.newIds = purge(query.ids, equals($newId()));

						// Store the paths for later use in lazy loading
						query.normalized = ExoWeb.Model.PathTokens.normalizePaths(query.include);
						ObjectLazyLoader.addPaths(query.from, query.normalized);

						// use temporary config setting to enable/disable scope-of-work functionality
						if (query.inScope !== false) {
							if (query.ids.length > 0) {
								this.state[varName].scopeQuery = {
									from: query.from,
									ids: query.ids,
									// TODO: this will be subset of paths interpreted as scope-of-work
									include: query.include ? query.include : [],
									inScope: true,
									forLoad: false
								};
							}
						}
					}, this);
				}

				// Undo predictive pending "callback" set up before models were processed.
				if (this._predictiveModelPending) {
					delete this._predictiveModelPending;
					allSignals.oneDone();
				}

				callback.call(thisPtr || this);
			},

		// Only fetch the types if they are not embedded. If the types are
		// embedded then fetching the types from server will cause a signal to
		// be created that will never be processed.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$fetchTypes(callback, thisPtr) {
				var typesToLoad = [], model = this.context.model.meta, instances = this.options.instances, signal = new ExoWeb.Signal("ContextQuery$fetchTypes");

				// Include types for all instances in instance payload
				if (instances && (!this.options.types || this.options.types instanceof Array)) {
					eachProp(this.options.instances, function(t) {
						// Add the type of the instances.
						var mtype = model.type(t);
						if (!mtype || LazyLoader.isRegistered(mtype)) {
							typesToLoad.push(t);
						}
					}, this);
				}

				// Load all types specified in types portion of query
				if (this.options.types && this.options.types instanceof Array) {
					this.options.types
						.map(function(t) {
							return t.from || t;
						}).filter(function(t) {
							// Exclude types that are already loaded
							var mtype = model.type(t);
							return !mtype || LazyLoader.isRegistered(mtype);
						}).forEach(function(t) {
							if (!typesToLoad.contains(t)) {
								typesToLoad.push(t);
							}
						});
				}

				// Fetch types in a single batch request
				if (typesToLoad.length > 0) {
					fetchTypes(model, typesToLoad, signal.pending(), this);
				}

				// Fetch additional types based on model queries and paths
				if (this.options.model && (!this.options.types || this.options.types instanceof Array)) {
					ExoWeb.eachProp(this.options.model, function (varName, query) {
						fetchQueryTypes(this.context.model.meta, query.from, query.normalized, signal.pending());
					}, this);
				}

				signal.waitForAll(callback, thisPtr);
			},

		// Process embedded data as if it had been recieved from the server in
		// the form of a web service response. This should enable flicker-free
		// page loads by embedded data, changes, etc.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$processEmbedded(callback, thisPtr) {
				if (this.options.instances || this.options.conditions || (this.options.types && !(this.options.types instanceof Array))) {
					var handler = new ResponseHandler(this.context.model.meta, this.context.server, {
						instances: this.options.instances,
						conditions: this.options.conditions,
						types: this.options.types && this.options.types instanceof Array ? null : this.options.types,
						serverInfo: this.options.serverInfo
					});

					handler.execute(function () {
						// Update 'isNew' for objects that show up in InitNew changes.
						if (this.options.changes) {
							this.options.changes.forEach(function (change) {
								if (change.type === "InitNew") {
									tryGetJsType(this.context.server.model, change.instance.type, null, false, function (jstype) {

										// Attempt to find the InitNew instance if it was present in the instances JSON.
										var obj = jstype.meta.get(
											// Ok to fetch the instance by the server-generated id?
											change.instance.id,
										
											// When processing embedded changes we can expect that the type of the instance
											// is exactly the type specified in the change object, not a base type.
											true
										);

										// If it exists, then it would have been created as an existing object, so mark it as new.
										if (obj) {
											obj.meta.isNew = true;
										}

									}, this);
								}
							}, this);
						}

						callback.call(thisPtr || this);
					}, this);
				}
				else {
					callback.call(thisPtr || this);
				}
			},

		// Detect batch query candidates and send batch request, if batching is
		// enabled (true by default).
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$doBatchRequest(callback, thisPtr) {
				if (this.options.model && ExoWeb.config.individualQueryLoading !== true) {
					var pendingQueries = [];
					var batchQuerySignal;

					ExoWeb.eachProp(this.options.model, function (varName, query) {
						if (!query.load && query.ids.length > 0) {
							var jstype = ExoWeb.Model.Model.getJsType(query.from, true);

							// get a list of ids that should be batch-requested
							var batchIds = filter(query.ids, function (id, index) {
								// if the type doesn't exist, include the id in the batch query
								if (!jstype) return true;

								// Check to see if the object already exists, i.e. because of embedding.
								var obj = jstype.meta.get(
									// Translate the specified ID, which may be a server-generated new id,
									// into the appropriate client-generated id.
									translateId(this.context.server._translator, query.from, id),

									// The type specified in a query may be a sub-class of the actual type,
									// since it may be written by hand and not known ahead of time.
									false
								);

								// If it doesn't exist, include the id in the batch query.
								if (obj === undefined) {
									return true;
								}

								// otherwise, include it in the model
								if (this.state[varName].isArray) {
									this.context.model[varName][index] = obj;
								}
								else {
									this.context.model[varName] = obj;
								}
							}, this);

							if (batchIds.length > 0) {
								if (batchQuerySignal === undefined) {
									batchQuerySignal = new ExoWeb.Signal("batch query");
									batchQuerySignal.pending(null, this, true);
								}

								// complete the individual query signal after the batch is complete
								batchQuerySignal.waitForAll(this.state[varName].signal.pending(null, this, true), this, true);

								pendingQueries.push({
									from: query.from,
									ids: batchIds,
									include: query.include || [],
									inScope: true,
									forLoad: true
								});
							}
						}
					}, this);

					if (pendingQueries.length > 0) {
						// perform batch query
						queryProvider(pendingQueries, null,
							function context$objects$callback(result) {
								objectsFromJson(this.context.model.meta, result.instances, function () {
									if (result.conditions) {
										conditionsFromJson(this.context.model.meta, result.conditions, null, function () {
											batchQuerySignal.oneDone();
										});
									}
									else {
										batchQuerySignal.oneDone();
									}
								}, this);
							},
							function context$objects$callback(error) {
								throw new Error($format("Failed to load batch query (HTTP: {0}, Timeout: {1})", error._statusCode, error._timedOut));
							}, this);
					}
				}

				callback.call(thisPtr || this);
			},

		// Send individual requests and simulate for "load" option.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$doIndividualRequests(callback, thisPtr) {
				if (this.options.model) {
					// 2) Start loading instances individually
					ExoWeb.eachProp(this.options.model, function (varName, query) {
						if (query.load) {
							// bypass all server callbacks if data is embedded
							this.state[varName].objectJson = query.load.instances;
							this.state[varName].conditionsJson = query.load.conditions;
						}
						// need to load data from server
						// fetch object state if an id of a persisted object was specified
						else if (ExoWeb.config.individualQueryLoading === true) {
							tryGetJsType(this.context.model.meta, query.from, null, true, function (type) {
								// TODO: eliminate duplication!!!
								// get the list of ids that should be individually loaded
								var individualIds = filter(query.ids, function (id, index) {

									// Check to see if the object already exists, i.e. because of embedding.
									var obj = type.meta.get(
										// Translate the specified ID, which may be a server-generated new id,
										// into the appropriate client-generated id.
										translateId(this.context.server._translator, query.from, id),
									
										// The type specified in a query may be a sub-class of the actual type,
										// since it may be written by hand and not known ahead of time.
										false
									);

									// If it doesn't exist, include the id in the batch query.
									if (obj === undefined) {
										return true;
									}

									// otherwise, include it in the model
									if (this.state[varName].isArray) {
										this.context.model[varName][index] = obj;
									}
									else {
										this.context.model[varName] = obj;
									}
								}, this);

								if (individualIds.length > 0) {
									// for individual queries, include scope queries for all *BUT* the query we are sending
									var scopeQueries = [];
									var currentVarName = varName;
									ExoWeb.eachProp(this.options.model, function (varName, query) {
										if (varName !== currentVarName && this.state[varName].scopeQuery) {
											scopeQueries.push(this.state[varName].scopeQuery);
										}
									}, this);

									objectProvider(query.from, individualIds, query.include || [], true, null, scopeQueries,
										this.state[varName].signal.pending(function context$objects$callback(result) {
											this.state[varName].objectJson = result.instances;
											this.state[varName].conditionsJson = result.conditions;
										}, this, true),
										this.state[varName].signal.orPending(function context$objects$callback(error) {
											throw new Error($format("Failed to load {0}|{1} (HTTP: {3}, Timeout: {4})",
												query.from, query.ids, error._statusCode, error._timedOut));
										}, this, true), this);
								}
							}, this);
						}
					}, this);
				}

				callback.call(thisPtr || this);
			},

		// Load static paths for queries that don't otherwise require loading.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$doStaticRequests(callback, thisPtr) {
				if (this.options.model) {
					ExoWeb.eachProp(this.options.model, function (varName, query) {
						if (!query.load && query.ids.length === 0) {
							// Remove instance paths when an id is not specified
							var staticPaths = query.include ? query.include.filter(function (p) { return !p.startsWith("this.") && !p.startsWith("this{"); }) : null;

							// Only call the server if paths were specified
							if (staticPaths && staticPaths.length > 0) {
								objectProvider(null, null, staticPaths, false, null,
									allSignals.pending(function context$objects$callback(result) {
										// load the json. this may happen asynchronously to increment the signal just in case
										objectsFromJson(this.context.model.meta, result.instances, allSignals.pending(function () {
											if (result.conditions) {
												conditionsFromJson(this.context.model.meta, result.conditions, null, allSignals.pending());
											}
										}), this);
									}, this, true),
									allSignals.orPending(function context$objects$callback(error) {
										throw new Error($format("Failed to load {0}|{1} (HTTP: {2}, Timeout: {3})",
											query.from, query.ids, error._statusCode, error._timedOut));
									}, this, true)
								);
							}
						}
					}, this);
				}

				callback.call(thisPtr || this);
			},

		// Process instances data for queries as they finish loading.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$processResults(callback, thisPtr) {
				if (this.options.model) {
					ExoWeb.eachProp(this.options.model, function (varName, query) {
						this.state[varName].signal.waitForAll(function context$model() {
							// make sure everything isn't considered complete until new objects are also created
							if (query.newIds) allSignals.pending();

							// check to see if the root(s) have already been established
							if ((!this.state[varName].isArray && this.context.model[varName]) ||
								(this.state[varName].isArray && !query.ids.some(function (id, index) { return !this.context.model[varName][index]; }))) {

								allSignals.oneDone();
								return;
							}
							// otherwise, loading is required to establish roots if there are any server ids
							else if (query.ids.length > 0) {
								var processResponse = new Signal("processing response");

								if (this.state[varName].objectJson) {
									// load the json. this may happen asynchronously so increment the signal just in case
									objectsFromJson(this.context.model.meta, this.state[varName].objectJson, processResponse.pending(null, this), this, true);

									// indicate that instance data is already being loaded
									delete this.state[varName].objectJson;
								}

								processResponse.waitForAll(this.state[varName].signal.pending(function context$model$callback() {
									var mtype = this.context.model.meta.type(query.from);

									if (!mtype) {
										throw new Error($format("Could not get type {0} required to process query results.", query.from));
									}

									// establish roots for each id
									forEach(query.ids, function (id, index) {
										// TODO: resolve translator access
										var clientId = translateId(this.context.server._translator, query.from, id);

										// Retrieve the existing instance by id.
										var obj = mtype.get(
											// Translate the specified ID, which may be a server-generated new id,
											// into the appropriate client-generated id.
											clientId,

											// The type specified in a query may be a sub-class of the actual type,
											// since it may be written by hand and not known ahead of time.
											false
										);

										// If it doesn't exist, raise an error.
										if (obj == null) {
											throw new Error("Could not get " + query.from + " with id = " + clientId + (id !== clientId ? "(" + id + ")" : "") + ".");
										}

										// Otherwise, include it in the model.
										if (!this.state[varName].isArray && !this.context.model[varName]) {
											this.context.model[varName] = obj;
										}
										else if (this.state[varName].isArray && !this.context.model[varName][index]) {
											this.context.model[varName][index] = obj;
										}
									}, this);

									if (this.state[varName].conditionsJson) {
										conditionsFromJson(this.context.model.meta, this.state[varName].conditionsJson, null, function () {
											// model object has been successfully loaded!
											allSignals.oneDone();
										}, this);
									}
									else {
										// model object has been successfully loaded!
										allSignals.oneDone();
									}
								}, this), this);
							}
							else {
								// model object has been successfully loaded!
								allSignals.oneDone();
							}

							if (this.state[varName].objectJson) {
								// ensure that instance data is loaded (even if not needed to establish roots) just in case
								// root object was satisfied because it happened to be a part of the model of another root object
								objectsFromJson(this.context.model.meta, this.state[varName].objectJson, allSignals.pending());
							}

							// construct a new object(s) if a new id(s) was specified
							if (query.newIds) {
								// if json must be processed, signal will have been incremented again
								this.state[varName].signal.waitForAll(function () {
									if (this.state[varName].isArray) {
										foreach(query.newIds, function (index) {
											this.context.model[varName][index] = new (this.context.model.meta.type(query.from).get_jstype())();
										}, this);
									}
									else {
										this.context.model[varName] = new (this.context.model.meta.type(query.from).get_jstype())();
									}
								}, this);

								// model object has been successfully loaded!
								allSignals.oneDone();
							}
						}, this);
					}, this, true);
				}

				callback.call(thisPtr || this);
			},

		// Perform pre-processing of model queries and their paths.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$postQueries(callback, thisPtr) {
				if (this.options.model) {
					ExoWeb.eachProp(this.options.model, function (varName, query) {
						if (this.state[varName].scopeQuery) {
							ServerSync$addScopeQuery.call(this.context.server, this.state[varName].scopeQuery);
						}
					}, this);
				}

				callback.call(thisPtr || this);
			},

		// Final cleanup step. Allow rules to run initially, end the batch,
		// and allow the server sync to start capturing existing objects in
		// order to attach a lazy loader.
		///////////////////////////////////////////////////////////////////////////////
			function ContextQuery$cleanup(callback, thisPtr) {
				allSignals.waitForAll(function () {
					// allows previously defered rules to run
					this.context.model.meta.notifyBeforeContextReady();

					ExoWeb.Batch.end(this.batch);
				}, this, true);

				callback.call(thisPtr || this);
			}
		)
	});

	// #endregion

	// #region ExoWeb.Mapper.ExoWeb
	//////////////////////////////////////////////////

	// Don't activate the DOM automatically, instead delay until after context initialization
	Sys.activateDom = false;

	// Object constant to signal to mapper to create a new instance rather than load one
	var $newId = function $newId() {
		return "$newId";
	};

	window.$newId = $newId;

	// Indicates whether or not the DOM has been activated
	var activated = false;

	var serverInfo;

	var pendingTypeQueries = [];

	// Callback(s) to execute as soon as a context query begins.
	var initFns = new ExoWeb.Functor();

	// Signal to gate context completion via extendContext options.
	var globalReadySignal = new Signal();

	var extendContextFn = null;

	var contextReadyFns = new ExoWeb.Functor();

	var domReadyFns = new ExoWeb.Functor();

	function modelReadyHandler() {
		if (extendContextFn) {
			extendContextFn(window.context, globalReadySignal.pending());
			extendContextFn = null;
		}

		globalReadySignal.waitForAll(function () {
			if (!contextReadyFns.isEmpty()) {
				window.context.beginContextReady();
				contextReadyFns(window.context);
				window.context.endContextReady();
			}

			jQuery(function () {
				// Activate the document if this is the first context to load
				if (!activated && ExoWeb.config.autoActivation) {
					activated = true;
					Sys.Application.activateElement(document.documentElement);
				}

				// Invoke dom ready notifications
				if (!domReadyFns.isEmpty()) {
					if (ExoWeb.config.debug) {
						domReadyFns(window.context);
					} else {
						try {
							domReadyFns(window.context);
						} catch (e) {
							ExoWeb.logError(e, true);
						}
					}
				}
			});
		});
	}

	// Global method for initializing ExoWeb on a page

	function $exoweb(options) {

		// Support initialization function argument
		if (options instanceof Function) {
			options = { init: options };
		}

		if (options.init) {
			// Register the init function ONCE.
			initFns.add(options.init, null, true);
			delete options.init;
		}

		if (options.extendContext) {
			// Merge the extendContext function so that the callback argument is invoked after ALL have invoked the callback.
			extendContextFn = mergeFunctions(extendContextFn, options.extendContext, { async: true, callbackIndex: 1 });
			delete options.extendContext;
		}

		if (options.contextReady) {
			// Register the contextReady function ONCE.
			contextReadyFns.add(options.contextReady, null, true);
			delete options.contextReady;
		}

		if (options.domReady) {
			// Register the domReady function ONCE.
			domReadyFns.add(options.domReady, null, true);
			delete options.domReady;
		}

		// The server info object will be maintained here and constantly set each time a
		// context query is created. It shouldn't be publicly set for any other reason.
		if (options.serverInfo) {
			// Merge any additional serverInfo options.
			serverInfo = jQuery.extend(serverInfo, options.serverInfo);
			delete options.serverInfo;
		}

		if (options.types && options.types instanceof Array) {
			// Store type queries for later use, since only embedded data or a model query triggers immediate querying.
			pendingTypeQueries = pendingTypeQueries.concat(options.types);
			delete options.types;
		}

		// A model query or embedded data will trigger a context query immediately.
		var triggerQuery = false;
		var queryObject = {};

		if (options.model) {
			triggerQuery = true;
			queryObject.model = options.model;
			delete options.model;
		}

		if (options.types) {
			triggerQuery = true;
			queryObject.types = options.types;
			delete options.types;
		}

		if (options.instances) {
			triggerQuery = true;
			queryObject.instances = options.instances;
			delete options.instances;
		}

		if (options.conditions) {
			triggerQuery = true;
			queryObject.conditions = options.conditions;
			delete options.conditions;
		}

		if (options.changes) {
			triggerQuery = true;
			queryObject.changes = options.changes;
			delete options.changes;
		}

		if (triggerQuery) {

			// Ensure that a context is created if it hasn't been already.
			ensureContext();

			// Perform initialization immediately
			initFns(window.context);

			// Include server info if present.
			if (serverInfo) {
				// The server info object will be maintained here and constantly set each time a
				// context query is created. It shouldn't be publicly set for any other reason.
				queryObject.serverInfo = serverInfo;
			}

			// Send pending type queries with the query if types were not embedded.
			if (pendingTypeQueries.length > 0 && !queryObject.types) {
				queryObject.types = pendingTypeQueries;
				pendingTypeQueries = [];
			}

			// Start the new query
			Context.query(window.context, queryObject);

			if (pendingTypeQueries.length > 0) {
				// Send a seperate query for type queries if they couldn't be send with the primary query.
				Context.query(window.context, { types: pendingTypeQueries });
				pendingTypeQueries = [];
			}

			// Perform context initialization when the model is ready
			window.context.addReady(modelReadyHandler);

		} else if (window.context) {

			// Ensure that the context variable has not been used for some other purpose.
			if (!(window.context instanceof Context)) {
				throw new Error("The window object has a context property that is not a valid context.");
			}

			// Context has already been created, so perform initialization immediately
			initFns(window.context);

			// If the context has already completed, then fire the ready handler. It is safe to fire more than once.
			if (!window.context.isPending()) {
				allSignals.waitForAll(modelReadyHandler);
			}
		}

	}

	window.$exoweb = $exoweb;

	// #endregion

	// #region ExoWeb.Mapper.Extend
	//////////////////////////////////////////////////

	var pendingTypeExtensions = {};
	var pendingSubtypeExtensions = {};

	function raiseExtensions(mtype) {
		//ExoWeb.Batch.whenDone(function() { 
			// apply app-specific configuration
			// defer until loading is completed to reduce init events
			var exts = pendingTypeExtensions[mtype.get_fullName()];
			if (exts) {
				delete pendingTypeExtensions[mtype.get_fullName()];
				exts(mtype.get_jstype());
			}

			mtype.eachBaseType(function(baseType) {
				var subExts = pendingSubtypeExtensions[baseType.get_fullName()];
				if (subExts) {
					// don't delete subtype extensions since more subtypes may be created
					subExts(mtype.get_jstype());
				}
			});
		//});
	}

	function extendOne(typeName, callback, thisPtr) {
		var jstype = ExoWeb.Model.Model.getJsType(typeName, true);

		if (jstype && LazyLoader.isLoaded(jstype.meta)) {
			callback.call(thisPtr || this, jstype);
		}
		else {
			var pending = pendingTypeExtensions[typeName];

			if (!pending) {
				pending = pendingTypeExtensions[typeName] = ExoWeb.Functor();
			}

			pending.add(thisPtr ? callback.bind(thisPtr) : callback);
		}
	}

	window.$extend = function(typeInfo, callback, thisPtr) {
		if (typeInfo == null) throw new ArgumentNullError("typeInfo");

		// If typeInfo is an arry of type names, then use a signal to wait until all types are loaded.
		if (Object.prototype.toString.call(typeInfo) === "[object Array]") {
			var signal = new ExoWeb.Signal("extend");

			var types = [];
			typeInfo.forEach(function(item, index) {
				if (item.constructor !== String) {
					throw new ArgumentTypeError("typeInfo", "string", item);
				}

				extendOne(item, signal.pending(function(type) {
					types[index] = type;
				}), thisPtr);
			});

			signal.waitForAll(function() {
				// When all types are available, call the original callback.
				callback.apply(thisPtr || this, types);
			});
		}
		// Avoid the overhead of signal and just call extendOne directly.
		else if (typeInfo.constructor === String) {
			extendOne(typeInfo, callback, thisPtr);
		}
		else {
			throw new ArgumentTypeError("typeInfo", "string|array", typeInfo);
		}
	};

	window.$extendSubtypes = function(typeName, callback, thisPtr) {
		if (typeName == null) throw new ArgumentNullError("typeName");
		if (typeName.constructor !== String) throw new ArgumentTypeError("typeName", "string", typeName);

		var jstype = ExoWeb.Model.Model.getJsType(typeName, true);

		if (jstype) {
			// Call for existing, loaded subtypes
			Array.forEach(jstype.meta.derivedTypes || [], function(mtype) {
				if (mtype && LazyLoader.isLoaded(mtype)) {
					callback.call(thisPtr || this, mtype.get_jstype());
					Array.forEach(mtype.derivedTypes || [], arguments.callee.spliceArguments(1, 2));
				}
			});
		}
	
		var pending = pendingSubtypeExtensions[typeName];

		if (!pending) {
			pending = pendingSubtypeExtensions[typeName] = ExoWeb.Functor();
		}

		pending.add(thisPtr ? callback.bind(thisPtr) : callback);
	};

	window.$extendProperties = function (typeName, includeBuiltIn, callback, thisPtr) {
		if (typeName == null) throw new ArgumentNullError("typeName");
		if (typeName.constructor !== String) throw new ArgumentTypeError("typeName", "string", typeName);

		if (includeBuiltIn && includeBuiltIn instanceof Function) {
			thisPtr = callback;
			callback = includeBuiltIn;
			includeBuiltIn = false;
		}

		extendOne(typeName, function (jstype) {
			// Raise handler for existing properties
			jstype.meta.get_properties().forEach(function (prop) {
				if (includeBuiltIn === true || prop.get_origin() !== "server")
					callback.call(thisPtr || this, prop, true);
			});

			// Raise handler when new properties are added
			jstype.meta.addPropertyAdded(function (sender, args) {
				callback.call(thisPtr || this, args.property, false);
			});
		});
	}

	// #endregion

	// #region ExoWeb.UI.Toggle
	//////////////////////////////////////////////////

	function Toggle(element) {

		// Default action is show
		this._action = "show";

		Toggle.initializeBase(this, [element]);
	}

	var Toggle_allowedActions = ["show", "hide", "enable", "disable", "render", "dispose", "addClass", "removeClass"];

	// Actions
	Toggle.mixin({
		// Show/Hide
		//////////////////////////////////////////////////////////
		link_show: function Toggle$link_show() {
			if ((this._action === "show" && jQuery(this._element).is(".toggle-on")) || (this._action === "hide" && jQuery(this._element).is(".toggle-off"))) {
				this.set_state("on");
			}
			else {
				this.set_state("off");
			}
		},
		add_showing: function (handler) {
			/// <summary locid="E:J#Sys.UI.DataView.showing" />
			this._addHandler("showing", handler);
		},
		remove_showing: function (handler) {
			this._removeHandler("showing", handler);
		},
		add_hiding: function (handler) {
			/// <summary locid="E:J#Sys.UI.DataView.hiding" />
			this._addHandler("hiding", handler);
		},
		remove_hiding: function (handler) {
			this._removeHandler("hiding", handler);
		},
		do_show: function Toggle$do_show() {

			// visibility has changed so raise event
			if (this._visible === undefined || this._visible === false) {
				var showingArgs = new ActionEventArgs();

				this._pendingEventArgs = showingArgs;

				if (this._visible === false) {
					Sys.Observer.raiseEvent(this, "showing", showingArgs);
				}

				showingArgs.waitForAll(function () {
					this._pendingEventArgs = null;

					if (this._effect == "slide" && this._visible === false)
						jQuery(this._element).slideDown();
					else if (this._effect == "fade" && this._visible === false)
						jQuery(this._element).fadeIn();
					else
						jQuery(this._element).show();

					this.set_state("on");

					// visibility has changed so raise event
					Sys.Observer.raiseEvent(this, "shown");

					this._visible = true;

					this._pendingActions();
				}, this, true);
			}
		},
		do_hide: function Toggle$do_hide() {

			// visibility has changed so raise event
			if (this._visible === undefined || this._visible === true) {
				var hidingArgs = new ActionEventArgs();

				this._pendingEventArgs = hidingArgs;

				if (this._visible === true) {
					Sys.Observer.raiseEvent(this, "hiding", hidingArgs);
				}

				hidingArgs.waitForAll(function () {
					this._pendingEventArgs = null;

					if (this._effect == "slide" && this._visible === true)
						jQuery(this._element).slideUp();
					else if (this._effect == "fade" && this._visible === true)
						jQuery(this._element).fadeOut();
					else
						jQuery(this._element).hide();

					this.set_state("off");

					// visibility has changed so raise event
					Sys.Observer.raiseEvent(this, "hidden");

					this._visible = false;

					this._pendingActions();
				}, this, true);
			}
		},
		add_on: function Toggle$add_on(handler) {
			this._addHandler("on", handler);
		},
		remove_on: function Toggle$remove_on(handler) {
			this._removeHandler("on", handler);
		},
		add_off: function Toggle$add_off(handler) {
			this._addHandler("off", handler);
		},
		remove_off: function Toggle$remove_off(handler) {
			this._removeHandler("off", handler);
		},
		add_shown: function Toggle$add_shown(handler) {
			this._addHandler("shown", handler);
		},
		remove_shown: function Toggle$remove_shown(handler) {
			this._removeHandler("shown", handler);
		},
		add_hidden: function Toggle$add_hidden(handler) {
			this._addHandler("hidden", handler);
		},
		remove_hidden: function Toggle$remove_hidden(handler) {
			this._removeHandler("hidden", handler);
		},
		get_visible: function Toggle$get_visible() {
			return this._visible;
		},

		// Enable/Disable
		//////////////////////////////////////////////////////////
		link_disable: function Toggle$link_disable() {
			if ((this._action === "disable" && jQuery(this._element).is(".toggle-on")) || (this._action === "enable" && jQuery(this._element).is(".toggle-off"))) {
				jQuery("select,input,textarea,a,button,optgroup,option", this._element).andSelf().attr("disabled", "disabled");
				this.set_state("off");
			}
			else {
				this.set_state("on");
			}
		},
		do_enable: function Toggle$do_enable() {
			jQuery("select,input,textarea,a,button,optgroup,option", this._element).andSelf().removeAttr("disabled");
			this.set_state("on");
		},
		do_disable: function Toggle$do_disable() {
			jQuery("select,input,textarea,a,button,optgroup,option", this._element).andSelf().attr("disabled", "disabled");
			this.set_state("off");
		},

		// Render/Destroy
		//////////////////////////////////////////////////////////
		link_render: function Toggle$link_render() {
			this._context = null;

			if ((this._action === "render" && jQuery(this._element).is(".toggle-on")) || (this._action === "dispose" && jQuery(this._element).is(".toggle-off"))) {
				var pctx = this.get_templateContext();

				if (!this._ctxIdx && this._element.childNodes.length > 0)
					throw new Error("A toggle control is attached to the node, which expects a template context id, but no id was specified.");

				var newContext = new Sys.UI.TemplateContext(this._ctxIdx);
				newContext.data = pctx.dataItem;
				newContext.components = [];
				newContext.nodes = [];
				newContext.dataItem = pctx.dataItem;
				newContext.index = 0;
				newContext.parentContext = pctx;
				newContext.containerElement = this._element;
				newContext.template = this._getTemplate();
				newContext.template._ensureCompiled();
				this._context = newContext;

				Sys.Application._linkContexts(pctx, this, pctx.dataItem, this._element, newContext, this._contentTemplate);

				newContext.initializeComponents();
				newContext._onInstantiated(null, true);
				this.set_state("on");
				jQuery(this._element).show();
			}
			else {
				this.set_state("off");
				jQuery(this._element).hide();
			}
		},
		init_render: function Toggle$init_render() {
			if (!this._template && !jQuery(this._element).is(".sys-template")) {
				throw new Error("When using toggle in render/dispose mode, the element should be marked with the \"sys-template\" class.");
			}

			this._template = new Sys.UI.Template(this._element);
			this._template._ensureCompiled();
			jQuery(this._element).empty();
			jQuery(this._element).removeClass("sys-template");
		},
		do_render: function Toggle$do_render() {
			if (!this.get_renderOnly())
				jQuery(this._element).show();

			if (!this._context) {
				var pctx = this.get_templateContext();

				var renderArgs = new Sys.Data.DataEventArgs(pctx.dataItem);
				Sys.Observer.raiseEvent(this, "rendering", renderArgs);

				jQuery(this._element).empty();

				var context = this._context = this._template.instantiateIn(this._element, pctx.dataItem, pctx.dataItem, 0, null, pctx, this._contentTemplate);
				context.initializeComponents();

				Sys.Observer.raiseEvent(this, "rendered", renderArgs);
			}

			this.set_state("on");
		},
		do_dispose: function Toggle$do_dispose() {
			if (!this.get_renderOnly())
				jQuery(this._element).hide();

			if (this._context) {
				var renderArgs = new Sys.Data.DataEventArgs();
				Sys.Observer.raiseEvent(this, "rendering", renderArgs);

				this._context.dispose();
				this._context = null;

				jQuery(this._element).empty();

				Sys.Observer.raiseEvent(this, "rendered", renderArgs);
			}

			this.set_state("off");
		},
		add_rendering: function (handler) {
			this._addHandler("rendering", handler);
		},
		remove_rendering: function (handler) {
			this._removeHandler("rendering", handler);
		},
		add_rendered: function (handler) {
			this._addHandler("rendered", handler);
		},
		remove_rendered: function (handler) {
			this._removeHandler("rendered", handler);
		},

		// addClass / removeClass
		//////////////////////////////////////////////////////////
		do_addClass: function Toggle$do_addClass() {
			var $el = jQuery(this._element);

			if (!$el.is("." + this._className)) {
				$el.addClass(this._className);
				this.set_state("on");
				Sys.Observer.raiseEvent(this, "classAdded");
			}
		},
		do_removeClass: function Toggle$do_removeClass() {
			var $el = jQuery(this._element);

			if ($el.is("." + this._className)) {
				$el.removeClass(this._className);
				this.set_state("off");
				Sys.Observer.raiseEvent(this, "classRemoved");
			}
		},
		add_classAdded: function Toggle$add_classAdded(handler) {
			this._addHandler("classAdded", handler);
		},
		remove_classAdded: function Toggle$remove_classAdded(handler) {
			this._removeHandler("classAdded", handler);
		},
		add_classRemoved: function Toggle$add_classRemoved(handler) {
			this._addHandler("classRemoved", handler);
		},
		remove_classRemoved: function Toggle$remove_classRemoved(handler) {
			this._removeHandler("classRemoved", handler);
		}
	});

	// Inverse Actions
	Toggle.mixin({
		// Hide/Show
		//////////////////////////////////////////////////////////
		link_hide: Toggle.prototype.link_show,
		init_hide: Toggle.prototype.init_show,
		undo_hide: Toggle.prototype.do_show,
		undo_show: Toggle.prototype.do_hide,

		// Enable/Disable
		//////////////////////////////////////////////////////////
		link_enabled: Toggle.prototype.link_disable,
		init_disable: Toggle.prototype.init_enable,
		undo_disable: Toggle.prototype.do_enable,
		undo_enable: Toggle.prototype.do_disable,

		// Render/Dispose
		//////////////////////////////////////////////////////////
		link_dispose: Toggle.prototype.link_render,
		init_dispose: Toggle.prototype.init_render,
		undo_render: Toggle.prototype.do_dispose,
		undo_dispose: Toggle.prototype.do_render,

		// addClass/removeClass
		//////////////////////////////////////////////////////////
		undo_addClass: Toggle.prototype.do_removeClass,
		undo_removeClass: Toggle.prototype.do_addClass
	});

	Toggle.mixin({
		_generatesContext: function Toggle$_generatesContext() {
			return this._action === "render" || this._action === "dispose";
		},
		_getTemplate: function Toggle$_getTemplate() {
			return this._template;
		},
		_setTemplate: function Toggle$_setTemplate(value) {
			this._template = value;
		},
		_setTemplateCtxId: function Toggle$_setTemplateCtxId(idx) {
			this._ctxIdx = idx;
		},

		get_templateContext: function Toggle$get_templateContext() {
			/// <value mayBeNull="false" type="Sys.UI.TemplateContext" locid="P:J#ExoWeb.UI.Toggle.templateContext"></value>
			if (!this._parentContext) {
				this._parentContext = Sys.UI.Template.findContext(this._element);
			}
			return this._parentContext;
		},
		set_templateContext: function Toggle$set_templateContext(value) {
			this._parentContext = value;
		},

		get_action: function Toggle$get_action() {
			/// <summary>
			/// The value that determines what the control should
			/// do when its state changes. Ignored if the class property is set
			/// Options:  show, hide, enable, disable, render, dispose, addClass, removeClass
			/// </summary>

			return this._action;
		},
		set_action: function Toggle$set_action(value) {
			if (!Array.contains(Toggle_allowedActions, value)) {
				throw new Error($format("Invalid toggle action \"{0}\".  Possible values are \"{1}\".", value, Toggle_allowedActions.join(", ")));
			}

			this._action = value;
			this.execute();
		},

		get_renderOnly: function Toggle$get_renderOnly() {
			/// <summary>
			/// If true, render/dispose will not hide/show the element
			/// </summary>

			return this._renderOnly;
		},
		set_renderOnly: function Toggle$set_renderOnly(value) {
			this._renderOnly = value;
		},

		get_className: function Toggle$get_className() {
			/// <summary>
			/// Class to add or remove
			/// </summary>

			return this._className;
		},
		set_className: function Toggle$set_className(value) {
			this._className = value;
			if (!this._action)
				this._action = "addClass";
			this.execute();
		},

		// NOTE: Keep these properties around for backwards compatibility.
		get_class: function Toggle$get_class() {
			/// <summary>
			/// Class to add or remove
			/// </summary>

			logWarning("The toggle:class property is deprecated (see issue #1). Consider using toggle:classname instead.");

			return this._className;
		},
		set_class: function Toggle$set_class(value) {
			logWarning("The toggle:class property is deprecated (see issue #1). Consider using toggle:classname instead.");

			this._className = value;
			if (!this._action)
				this._action = "addClass";
			this.execute();
		},

		get_on: function Toggle$get_on() {
			/// <summary>
			/// The value that the control will watch to determine
			/// when its state should change.
			/// </summary>

			return this._on;
		},
		set_on: function Toggle$set_on(value) {
			var changed = value !== this._on;

			if (changed) {
				if (this._on && this._on instanceof Array) {
					Observer.removeCollectionChanged(this._on, this._collectionChangedHandler);
				}

				this._on = value;

				if (this._on && this._on instanceof Array) {
					this._collectionChangedHandler = this.execute.bind(this);
					Observer.addCollectionChanged(this._on, this._collectionChangedHandler);
				}

				this.execute();
			}
			else if (this._when && this._when instanceof Function) {
				this._on = value;
				this.execute();
			}
		},

		get_when: function Toggle$get_when() {
			/// <summary>
			/// The value to compare "on" to, this will most likely 
			/// be a static value, like true or false.
			/// </summary>

			return this._when;
		},
		set_when: function Toggle$set_when(value) {
			this._when = value;
			this.execute();
		},

		set_strictMode: function Toggle$set_strictMode(value) {
			/// <summary>
			/// If true, the "on" value will be strictly compared
			/// to the "when" value.  Otherwise, if "when" is undefined
			/// the "on" value will be checked for truthiness.
			/// </summary>

			this._strictMode = value;
		},
		get_strictMode: function Toggle$get_strictMode() {
			return this._strictMode;
		},

		get_groupName: function Toggle$get_groupName() {
			return this._groupName;
		},
		set_groupName: function Toggle$set_groupName(value) {
			this._groupName = value;
		},

		get_effect: function Toggle$get_effect() {
			return this._effect;
		},
		set_effect: function Toggle$set_effect(value) {
			this._effect = value;
		},

		get_state: function Toggle$get_state() {
			return this._state;
		},
		set_state: function Toggle$set_state(value) {
			this._state = value;
			this._stateClass(value);
			Sys.Observer.raiseEvent(this, value);
		},

		equals: function Toggle$equals() {
			if (this._when === undefined) {
				// When is not defined, so condition depends entirely on "on" property
				var onType = Object.prototype.toString.call(this._on);

				if (this._strictMode === true) {
					if (this._on.constructor !== Boolean)
						throw new Error("With strict mode enabled, toggle:on should be a value of type Boolean.");

					return this._on;
				}
				else if (onType === "[object Array]") {
					return this._on.length > 0;
				}
				else {
					// Default case when not in strict mode is truthiness.
					return !!this._on;
				}
			}
			else if (this._when instanceof Function) {
				var result = this._when(this._on);
				if (this._strictMode === true) {
					if (result === null || result === undefined || result.constructor !== Boolean)
						throw new Error("With strict mode enabled, toggle:when function should return a value of type Boolean.");
					return result;
				}
				else {
					return !!result;
				}
			}
			else {
				return this._on === this._when;
			}
		},

		canExecute: function Toggle$canExecute() {
			// Ensure that the control is initialized, has an element, and the "on" property has been set.
			// Scenario 1:  The set_on or set_when methods may be called before the control has been initialized.
			// Scenario 2:  If a lazy markup extension is used to set the "on" or "when" properties then a callback could set the 
			//				property value when the element is undefined, possibly because of template re-rendering.
			// Scenario 3:  If a lazy markup extension is used to set the "on" property then it may not have a value when initialized.
			return this.get_isInitialized() && this._element !== undefined && this._element !== null && this.hasOwnProperty("_on");
		},
		execute: function Toggle$execute() {
			if (this.canExecute()) {
				var action = this[(this.equals() === true ? "do_" : "undo_") + this._action].bind(this);
				if (this._pendingEventArgs) {
					this._pendingActions.add(action, (function () {
						return !this._pendingEventArgs;
					}).bind(this), true);
				} else {
					action();
				}
			}
		},
		addContentTemplate: function Toggle$addContentTemplate(tmpl) {
			if (this._action !== "render" && this._action !== "dispose" && this.get_templateContext() === Sys.Application._context) {
				throw Error.invalidOperation("invalidSysContentTemplate");
			}
			Sys.UI.IContentTemplateConsumer.prototype.addContentTemplate.apply(this, arguments);
		},
		dispose: function ExoWeb$UI$Toggle$dispose() {
			if (this._template) {
				this._template.dispose();
			}
			if (this._context) {
				this._context.dispose();
			}
			this._action = this._className = this._collectionChangedHandler = this._contentTemplate =
				this._context = this._ctxIdx = this._groupName = this._on = this._parentContext =
				this._state = this._strictMode = this._template = this._visible = this._when = null;
			ExoWeb.UI.Toggle.callBaseMethod(this, "dispose");
		},
		link: function Toggle$link() {
			// Perform custom link logic for the action
			var actionLink = this["link_" + this._action];
			if (actionLink) {
				actionLink.call(this);
			}

			ExoWeb.UI.Toggle.callBaseMethod(this, "link");
		},
		initialize: function Toggle$initialize() {
			Toggle.callBaseMethod(this, "initialize");

			this._pendingActions = new ExoWeb.Functor();

			if (this.get_isLinkPending()) {
				this.link();
			}
			else {
				// Perform custom init logic for the action
				var actionInit = this["init_" + this._action];
				if (actionInit) {
					actionInit.call(this);
				}

				this.execute();
			}
		},
		_stateClass: function (state) {
			if (state == "on")
				jQuery(this._element).addClass("toggle-on").removeClass("toggle-off");
			else
				jQuery(this._element).removeClass("toggle-on").addClass("toggle-off");
		}
	});

	ExoWeb.UI.Toggle = Toggle;
	Toggle.registerClass("ExoWeb.UI.Toggle", Sys.UI.Control, Sys.UI.ITemplateContextConsumer, Sys.UI.IContentTemplateConsumer);

	function ActionEventArgs() {
		this._signal = new ExoWeb.Signal();
		ActionEventArgs.initializeBase(this);
	}

	ActionEventArgs.prototype.pending = function (callback, thisPtr, executeImmediately) {
		return this._signal.pending.apply(this._signal, arguments);
	}

	ActionEventArgs.prototype.waitForAll = function (callback, thisPtr, executeImmediately) {
		this._signal.waitForAll.apply(this._signal, arguments);
	}

	ExoWeb.UI.ActionEventArgs = ActionEventArgs;
	ActionEventArgs.registerClass("ExoWeb.UI.ActionEventArgs", Sys.EventArgs);

	// #endregion

	// #region ExoWeb.UI.ToggleGroup
	//////////////////////////////////////////////////

	function ToggleGroup(element) {
		ToggleGroup.initializeBase(this, [element]);
	}

	ToggleGroup.mixin({
		_execute: function ToggleGroup$_execute() {
			if (this._visible.length === 0 && this._children.length > 0) {
				jQuery(this._element).hide();
			}
			else {
				jQuery(this._element).show();
			}
		},
		_toggleAdded: function ToggleGroup$_toggleAdded(idx, elem) {
			if (elem.control.get_groupName() === this._name && !Array.contains(this._children, elem)) {
				this._children.push(elem);

				if (elem.control.get_state() === "on") {
					this._add(elem);
				}

				elem.control.add_on(this._onHandler);
				elem.control.add_off(this._offHandler);
			}
		},
		_toggleRemoved: function ToggleGroup$_toggleRemoved(idx, elem) {
			if (Array.contains(this._children, elem)) {
				elem.control.remove_on(this._onHandler);
				elem.control.remove_off(this._offHandler);

				this._remove(elem);
				this._children.remove(elem);
				this._execute();
			}
		},
		_toggleOn: function ToggleGroup$_toggleOn(sender) {
			this._add(sender.get_element());
			this._execute();
		},
		_toggleOff: function ToggleGroup$_toggleOff(sender) {
			this._remove(sender.get_element());
			this._execute();
		},
		get_name: function ToggleGroup$get_name() {
			return this._name;
		},
		set_name: function ToggleGroup$set_name(value) {
			this._name = value;
		},
		_add: function (elem) {
			if (this._visible.indexOf(elem) < 0)
				this._visible.push(elem);
		},
		_remove: function (elem) {
			this._visible.remove(elem);
		},
		initialize: function ToggleGroup$initialize() {
			ToggleGroup.callBaseMethod(this, "initialize");

			this._children = [];
			this._visible = [];

			this._onHandler = this._toggleOn.bind(this);
			this._offHandler = this._toggleOff.bind(this);

			jQuery(":toggle", this._element).ever(this._toggleAdded.bind(this), this._toggleRemoved.bind(this));

			this._execute();
		}
	});

	ExoWeb.UI.ToggleGroup = ToggleGroup;
	ToggleGroup.registerClass("ExoWeb.UI.ToggleGroup", Sys.UI.Control);

	// #endregion

	// #region ExoWeb.UI.VueComponent
	//////////////////////////////////////////////////

	function VueComponent(element) {
		VueComponent.initializeBase(this, [element]);
		this._vm = null;
		this._eventHandlers = [];
	}

	function toKebabCase(str) {
		return str.replace(/[A-Z]/g, function (x) {
			return "-" + x.toLowerCase();
		});
	}

	VueComponent.prototype = {

		get_templateContext: function VueComponent$get_templateContext() {
			/// <value mayBeNull="false" type="Sys.UI.TemplateContext" locid="P:J#ExoWeb.UI.VueComponent.templateContext"></value>
			if (!this._parentContext) {
				this._parentContext = Sys.UI.Template.findContext(this._element);
			}
			return this._parentContext;
		},
		set_templateContext: function VueComponent$set_templateContext(value) {
			this._parentContext = value;
		},

		get_component: function() {
			return this._componentName;
		},
		set_component: function(value) {
			this._componentName = value;
		},

		get_parent: function() {
			if (!this._parent) {
				var parentVm = null;
				for (var tc = this.get_templateContext(); tc; tc = tc.parentContext) {
					if (tc.vm) {
						parentVm = tc.vm;
						break;
					}
				}
				this._parent = parentVm;
			}
			return this._parent;
		},
		set_parent: function(value) {
			this._parent = value;
		},

		get_model: function() {
			return this._model;
		},
		set_model: function(value) {
			this._model = value;
		},

		get_props: function() {
			return this._props || {};
		},
		set_props: function(value) {
			this._props = value;
			if (this._vm)
				this._bindProps();
		},

		get_setup: function() {
			return this._setup;
		},
		set_setup: function(value) {
			this._setup = value;
		},

		_bindProps: function () {
			// setup ad hoc prop bindings
			// Example: vuecomponent:xyz="{binding SomeProperty}"
			// Establishes a one way binding of SomeProperty -> component's xyz prop
			for (var prop in this._vm.$options.props) {
				if (Object.getPrototypeOf(this).hasOwnProperty("get_" + prop))
					console.warn("Prop '" + prop + "' will not be bound to " + this.get_component() + " component because it is a reserved property of the VueComponent control.");
				else
					this._bindProp(prop, this._getValue(prop));
			}
		},

		_setProp: function (propName, value) {
			this._vm[propName] = value;
		},

		_preventVueObservability: function(value) {
			if (value && typeof value === 'object') {
				if (value.length && Array.isArray(value)) {
					var _this = this;
					var hasExoWebEntities = false;
					value.forEach(function (o) {
						if (_this._preventVueObservability(o))
							hasExoWebEntities = true;
					});
					return hasExoWebEntities;
				}
				else if (value instanceof ExoWeb.Model.Entity) {
					preventVueObservability(value);
					return true;
				}
				else if (value instanceof ExoWeb.View.Adapter) {
					var hasExoWebEntities = this._preventVueObservability(value.get_rawValue());
					return hasExoWebEntities || value.get_isEntity() || value.get_isEntityList();
				}
			}
		},

		_getValue: function(vueProp) {
			var value = this[toKebabCase(vueProp)];
			if (this._preventVueObservability(value)) {
				if (ExoWeb.config.debug)
					console.warn("Don't pass ExoWeb objects to Vue components, component = " + this.get_component() + ", prop=" + vueProp + ".", value);
			}
			return value;
		},

		_bindProp: function(propName, value) {
			if (value instanceof ExoWeb.View.Adapter) {
				this._setProp(propName, value.get_rawValue());
				value.add_propertyChanged(function () {
					var rawValue = value.get_rawValue();
					this._preventVueObservability(rawValue);
					this._setProp(propName, rawValue);
				}.bind(this));
			}
			else {
				if (value !== undefined)
					this._setProp(propName, value);

				ExoWeb.Observer.addPropertyChanged(this, toKebabCase(propName), function () {
					this._setProp(propName, this._getValue(propName));
				}.bind(this));
			}
		},

		_bindModel: function() {
			// setup v-model binding
			// vuecomponent:model="{@ Property}" establishes a two way binding between Property and the component's
			// model prop. Property will be updated with the value emitted on the component's model event.
			// https://vuejs.org/v2/guide/components-custom-events.html#Customizing-Component-v-model
			var model = this.get_model();
			if (model instanceof ExoWeb.View.Adapter) {
				var modelOptions = this._vm.$options.model || { prop: "value", event: "input" };
				this._bindProp(modelOptions.prop, model);
				this._vm.$on(modelOptions.event, function (val) {
					model.set_rawValue(val);
				});
			}
		},

		_bindEventHandler: function(propName) {
			var that = this;
			this._vm.$on(propName.substring(1), function() {
				that._getValue(propName).apply(null, arguments);
			});

		},

		_bindEventHandlers: function() {
			for (var prop in this) {
				if (prop.indexOf("@") === 0 && typeof this[prop] === "function") {
					this._bindEventHandler(prop);
				}
			}
		},

		initialize: function() {
			VueComponent.callBaseMethod(this, "initialize");

			var element = this.get_element();
			var mountPoint = document.createElement(element.tagName);
			element.appendChild(mountPoint);

			if (!window.VueComponents)
				console.error("VueComponents global was not found. Please make sure the component library is loaded correctly before trying to use this control.");
			else if (!VueComponents[this.get_component()])
				console.error("No component named '" + this.get_component() + "' was found in the component library.");
			else {
				VueComponents[this.get_component()].load().then(function (Component) {
					var propsData = {};
					// ensure props are provided to component constructor
					for (var prop in Component.options.props) {
						var value = this._getValue(prop);
						if (value instanceof ExoWeb.View.Adapter)
							value = value.get_rawValue();
						propsData[prop] = value;
					}

					if (Component.options.functional) {
						this._vm = new Vue({
							template: '<c-component-wrapper ref="component" v-bind="$props" />',
							components: { 'c-component-wrapper': Component },
							props: Object.keys(propsData),
							propsData: propsData
						});
					}
					else {
						this._vm = new Component({
							propsData: propsData
						});
					}

					// retroactively connect parent-child relationship to aid vue devtools
					// passing parent during construction breaks reactivity for object and array
					// type props
					var parent = this._vm.$parent = this.get_parent();
					if (parent)
						parent.$children.push(this._vm);

					this._bindModel();
					this._bindProps();
					this._bindEventHandlers();

					if (typeof this._setup === "function")
						this._setup(this._vm, this._model);
					this._vm.$mount(mountPoint);
				}.bind(this));
			}
		},

		dispose: function () {
			if (this._vm) {
				try {
					this._vm.$destroy();
				}
				catch (e) {
					// Ignore error destroying component
				}
			}
		}
	};

	/**
	 * Prevent Vue from making an object observable.
	 * Adapted from VueModel -  https://github.com/cognitoforms/VueModel/blob/master/src/vue-model-observability.ts
	 */
	function preventVueObservability(obj) {
		if (obj && !obj.hasOwnProperty("__ob__")) {
			// Mark the object as "raw" so that Vue won't try to make it observable
			Vue.markRaw(obj);
			return true;
		}
	}

	ExoWeb.UI.VueComponent = VueComponent;
	VueComponent.registerClass("ExoWeb.UI.VueComponent", Sys.UI.Control, Sys.UI.ITemplateContextConsumer);

	// #endregion

	// #region ExoWeb.UI.Template
	//////////////////////////////////////////////////

	function Template(element) {
		/// <summary locid="M:J#ExoWeb.UI.Template.#ctor">
		/// In addition to defining template markup, also defines rules that are used
		/// to determine if it should be chosen as the template for a given element
		/// based on a CSS selector as well as a javascript filter that is evaluated 
		/// against the element in question.
		/// </summary>
		/// <param name="element"></param>
		Template.initializeBase(this, [element]);
	}

	var allTemplates = {};

	Template.prototype = {

		get_name: function Template$get_name() {
			/// <value mayBeNull="true" type="String" locid="P:J#ExoWeb.UI.Template.name"></value>
			return this._name;
		},
		set_name: function Template$set_name(value) {
			this._name = value;
		},

		get_nameArray: function Template$get_nameArray() {
			/// <value mayBeNull="true" type="String" locid="P:J#ExoWeb.UI.Template.nameArray"></value>
			if (this._name && !this._nameArray) {
				this._nameArray = this._name.trim().split(/\s+/);
			}
			return this._nameArray;
		},

		get_kind: function Template$get_kind() {
			/// <value mayBeNull="true" type="String" locid="P:J#ExoWeb.UI.Template.kind"></value>
			return this._kind;
		},
		set_kind: function Template$set_kind(value) {
			this._kind = value;
		},

		get_dataType: function Template$get_dataType() {
			/// <value mayBeNull="true" type="String" locid="P:J#ExoWeb.UI.Template.dataType"></value>
			return this._dataType;
		},
		set_dataType: function Template$set_dataType(value) {
			if (ExoWeb.isType(value, Function)) {
				this._dataType = parseFunctionName(value);
				this._dataTypeCtor = value;
			}
			else if (ExoWeb.isType(value, String)) {
				this._dataType = value;
			}
		},

		get_dataTypeCtor: function Template$get_dataTypeCtor() {
			/// <value mayBeNull="true" type="String" locid="P:J#ExoWeb.UI.Template.dataTypeCtor"></value>
			if (!this._dataTypeCtor && ExoWeb.isType(this._dataType, String)) {
				// lazy evaluate the actual constructor
				this._dataTypeCtor = ExoWeb.getCtor(this._dataType);
			}
			return this._dataTypeCtor;
		},

		get_isReference: function Template$get_isReference() {
			/// <value mayBeNull="true" type="Boolean" locid="P:J#ExoWeb.UI.Template.isReference"></value>
			return this._isReference;
		},
		set_isReference: function Template$set_isReference(value) {
			if (value && value.constructor === String) {
				var str = value.toLowerCase().trim();
				if (str === "true") {
					value = true;
				}
				else if (str === "false") {
					value = false;
				}
				else {
					this._isReferenceText = value;
					value = null;
				}
			}
			this._isReference = value;
		},

		get_isList: function Template$get_isList() {
			/// <value mayBeNull="true" type="Boolean" locid="P:J#ExoWeb.UI.Template.isList"></value>
			return this._isList;
		},
		set_isList: function Template$set_isList(value) {
			if (value && value.constructor === String) {
				var str = value.toLowerCase().trim();
				if (str === "true") {
					value = true;
				}
				else if (str === "false") {
					value = false;
				}
				else {
					this._isListText = value;
					value = null;
				}
			}
			this._isList = value;
		},

		get_aspects: function Template$get_aspects() {
			/// <value mayBeNull="true" type="Boolean" locid="P:J#ExoWeb.UI.Template.aspects"></value>
			if (!this._aspects) {
				var aspects = this._aspects = {};
				if (this._isList !== null && this._isList !== undefined) {
					aspects.isList = this._isList;
				}
				if (this._isReference !== null && this._isReference !== undefined) {
					aspects.isReference = this._isReference;
				}
				if (this.get_dataType() !== null && this.get_dataType() !== undefined) {
					aspects.dataType = this.get_dataTypeCtor();
				}
			}
			return this._aspects;
		},

		isCorrectKind: function Template$isCorrectKind(obj) {
			/// <summary locid="M:J#ExoWeb.UI.Template.isCorrectKind">
			/// Determines whether the given object is of the correct kind
			/// for the template, if a kind is specified.
			/// </summary>
			/// <param name="obj" optional="false" mayBeNull="false"></param>
			/// <returns type="Boolean"></returns>
			if (obj instanceof ExoWeb.View.Adapter) {
				return this._kind === "@";
			}
			else {
				return this._kind === undefined;
			}
		},

		_namesSatisfiedBy: function Template$_namesSatisfiedBy(names) {
			/// <summary locid="M:J#ExoWeb.UI.Template._namesSatisfiedBy">
			/// Determines whether the given names collection satisifes all
			/// required template names.
			/// </summary>
			/// <param name="names" type="Array" optional="false" mayBeNull="false"></param>
			/// <returns type="Boolean"></returns>
			return !this.get_nameArray() || !this.get_nameArray().some(function(n) { return !names.contains(n); });
		},

		_aspectsSatisfiedBy: function Template$_aspectsSatisfiedBy(aspects) {
			/// <summary locid="M:J#ExoWeb.UI.Template._aspectsSatisfiedBy">
			/// Determines whether the given data satisfies special aspects
			/// required by the template.
			/// </summary>
			/// <param name="aspects" type="Array" optional="false" mayBeNull="false"></param>
			/// <returns type="Boolean"></returns>
			var satisfied = true;
			eachProp(this.get_aspects(), function(name, value) {
				if (!aspects.hasOwnProperty(name) || (value === null || value === undefined) || (name !== "dataType" && aspects[name] !== value) || (name === "dataType" && aspects[name] !== value && !(aspects[name] && aspects[name].meta && aspects[name].meta.isSubclassOf(value.meta)))) {
					return (satisfied = false);
				}
			});
			return satisfied;
		},

		matches: function Template$matches(data, names) {
			/// <summary locid="M:J#ExoWeb.UI.Template.matches">
			/// Determines whether the given data and name array match the template.
			/// </summary>
			/// <param name="data" optional="false" mayBeNull="false"></param>
			/// <param name="names" type="Array" optional="false" mayBeNull="false"></param>
			/// <returns type="Boolean"></returns>
			if (this._namesSatisfiedBy(names)) {
				var aspects;
				if (data && data.aspects && data.aspects instanceof Function) {
					aspects = data.aspects();
				}
				else {
					aspects = {
						isList: (data && data instanceof Array),
						isReference: (data && data instanceof ExoWeb.Model.Entity)
					};
					if (data === null || data === undefined) {
						aspects.dataType = null;
					}
					else if (data instanceof ExoWeb.Model.Entity) {
						aspects.dataType = data.meta.type.get_jstype();
					}
					else if (data instanceof Array) {
						aspects.dataType = Array;
					}
					else if (data instanceof Object) {
						aspects.dataType = Object;
					}
					else {
						aspects.dataType = data.constructor;
					}
				}
				return this._aspectsSatisfiedBy(aspects);
			}
		},

		toString: function() {
			return $format("<{0} name=\"{1}\" kind=\"{2}\" datatype=\"{3}\" isreference=\"{4}\" islist=\"{5}\" />",
				this._element.tagName.toLowerCase(),
				this._name || "",
				this._kind || "",
				this._dataType || "",
				isNullOrUndefined(this._isReference) ? "" : this._isReference,
				isNullOrUndefined(this._isList) ? "" : this._isList
			);
		},

		dispose: function Template$dispose() {
			this._aspects = this._contentTemplate = this._dataType = this._dataTypeCtor = this._isList = this._isListText =
				this._isReference = this._isReferenceText = this._kind = this._name = this._nameArray = null;
			ExoWeb.UI.Template.callBaseMethod(this, "dispose");
		},

		initialize: function() {
			/// <summary locid="M:J#ExoWeb.UI.Template.initialize" />
			Template.callBaseMethod(this, "initialize");

			// add a class that can be used to search for templates 
			// and make sure that the template element is hidden
			jQuery(this._element).addClass("exoweb-template").hide();

			if (this._element.control.constructor !== String) {
				var el = this._element;
				var tagName = el.tagName.toLowerCase();
				var cache = allTemplates[tagName];
				if (!cache) {
					cache = allTemplates[tagName] = [];
				}
				cache.push(el);
			}
		}

	};

	function findTemplate(tagName, data, names) {
		/// <summary locid="M:J#ExoWeb.UI.Template.find">
		/// Finds the first field template that match the given data and names and returns the template.
		/// </summary>

		if (data === undefined || data === null) {
			logWarning("Attempting to find template for " + (data === undefined ? "undefined" : "null") + " data.");
		}

		var cache;
		if (cache = allTemplates[tagName]) {
			for (var t = cache.length - 1; t >= 0; t--) {
				var tmplEl = cache[t];
				var tmpl = tmplEl.control;
	
				if (tmpl instanceof Template) {
					var isCorrectKind = tmpl.isCorrectKind(data);
					if ((isCorrectKind === undefined || isCorrectKind === true) && tmpl.matches(data, names)) {
						return tmplEl;
					}
				}
			}
		}

		return null;
	}

	// bookkeeping for Template.load
	// TODO: consider wrapper object to clean up after templates are loaded?
	var templateCount = 0;
	var externalTemplatesSignal = new ExoWeb.Signal("external templates");
	var lastTemplateRequestSignal;

	Template.load = function Template$load(path, options) {
		/// <summary locid="M:J#ExoWeb.UI.Template.load">
		/// Loads external templates into the page.
		/// </summary>

		var id = "exoweb-templates-" + (templateCount++);

		var lastReq = lastTemplateRequestSignal;

		// set the last request signal to the new signal and increment
		var signal = lastTemplateRequestSignal = new ExoWeb.Signal(id);
		var callback = externalTemplatesSignal.pending(signal.pending(function () {
			// Activate template controls within the response.
			Sys.Application.activateElement(this);
		}));

		jQuery(function ($) {
			var tmpl = jQuery("<div id='" + id + "'/>")
					.hide()
					.appendTo("body");

			//if the template is stored locally look for the path as a div on the page rather than the cache
			if (options && options.isLocal === true) {
				var localTemplate = jQuery('#' + path);
				callback.call(localTemplate.get(0));
			}
			else {
				var html = ExoWeb.cache(path);

				if (html) {
					tmpl.append(html);
					callback.call(tmpl.get(0));
				} 
				else {
					tmpl.load(path, function(responseText, textStatus, jqXHR) {
						// Ensure that jqXHR is loaded.  'state' check for jquery 1.7+, 'isResolved' check for jQuery 1.5 - 1.7
						if ((jqXHR.state && jqXHR.state() === "resolved") || (jqXHR.isResolved && jqXHR.isResolved())) {
							// Cache the template
							ExoWeb.cache(path, responseText);

							// if there is a pending request then wait for it to complete
							if (lastReq) {
								lastReq.waitForAll(callback, this);
							}
							else {
								callback.call(this);
							}
						}
					});
				}
			}
		});
	};

	ExoWeb.UI.Template = Template;
	Template.registerClass("ExoWeb.UI.Template", Sys.UI.Control, Sys.UI.IContentTemplateConsumer);

	// #endregion

	// #region ExoWeb.UI.Content
	//////////////////////////////////////////////////

	function Content(element) {
		/// <summary locid="M:J#ExoWeb.UI.Content.#ctor">
		/// Finds its matching template and renders using the provided data as the 
		/// binding context.  It can be used as a "field control", using part of the 
		/// context data to select the appropriate control template.  Another common 
		/// usage would be to select the appropriate template for a portion of the UI,
		/// as in the example where an objects meta type determines how it is 
		/// displayed in the UI.
		/// </summary>
		/// <param name="element"></param>
		Content.initializeBase(this, [element]);
	}

	var contentControlsRendering = 0;

	registerActivity("Content rendering", function() {
		if (contentControlsRendering < 0) {
			logWarning("Number of content controls rendering should never dip below zero.");
		}

		return contentControlsRendering > 0;
	});

	Content.prototype = {

		get_template: function Content$get_template() {
			/// <value mayBeNull="true" type="String" locid="P:J#ExoWeb.UI.Content.template"></value>
			return this._template;
		},
		set_template: function (value) {
			this._template = value;
		},

		get_data: function Content$get_data() {
			/// <value mayBeNull="false" locid="P:J#ExoWeb.UI.Content.data"></value>
			return this._data;
		},
		set_data: function Content$set_data(value) {
			var removedData = ((value === undefined || value === null) && (this._data !== undefined && this._data !== null));

			if (this._changedHandler) {
				// Remove old change handler if applicable.
				Observer.removeCollectionChanged(this._data, this._changedHandler);
				delete this._changedHandler;
			}

			this._data = value;

			if (value instanceof Array) {
				// Watch for changes to an array.
				this._changedHandler = this._collectionChanged.bind(this);
				Observer.addCollectionChanged(value, this._changedHandler);
			}

			// Force rendering to occur if we previously had a value and now do not.
			this.update(removedData);
		},

		get_disabled: function Content$get_disabled() {
			/// <value mayBeNull="false" type="Boolean" locid="P:J#ExoWeb.UI.Content.disabled"></value>
			return this._disabled === undefined ? false : !!this._disabled;
		},
		set_disabled: function Content$set_disabled(value) {
			var newValue;

			if (value.constructor === Boolean) {
				newValue = value;
			}
			else if (value.constructor === String) {
				newValue = value.toLowerCase() == "true" ? true : (value.toLowerCase() == "false" ? false : undefined);
			}
			else {
				throw new Error("Invalid value for property \"disabled\": " + value);
			}

			var oldValue = this._disabled;
			this._disabled = newValue;

			if (oldValue === true && newValue === false) {
				this.update();
			}
		},

		get_contexts: function Content$get_contexts() {
			/// <value mayBeNull="false" type="Array" locid="P:J#ExoWeb.UI.Content.contexts"></value>
			return [this._context];
		},

		get_templateContext: function Content$get_templateContext() {
			/// <value mayBeNull="false" type="Sys.UI.TemplateContext" locid="P:J#ExoWeb.UI.Content.templateContext"></value>
			if (!this._parentContext) {
				this._parentContext = Sys.UI.Template.findContext(this._element);
			}
			return this._parentContext;
		},
		set_templateContext: function Context$set_templateContext(value) {
			this._parentContext = value;
		},

		get_isRendered: function Context$get_isRendered() {
			/// <value mayBeNull="false" type="Boolean" locid="P:J#ExoWeb.UI.Content.isRendered"></value>
			return this._isRendered;
		},

		add_rendering: function Content$add_rendering(handler) {
			/// <summary locid="E:J#ExoWeb.UI.Content.rendering" />
			this._addHandler("rendering", handler);
		},
		remove_rendering: function Content$remove_rendering(handler) {
			this._removeHandler("rendering", handler);
		},

		add_rendered: function Content$add_rendered(handler) {
			/// <summary locid="E:J#ExoWeb.UI.Content.rendered" />
			this._addHandler("rendered", handler);
		},
		remove_rendered: function Content$remove_rendered(handler) {
			this._removeHandler("rendered", handler);
		},

		add_error: function (handler) {
			/// <summary locid="E:J#ExoWeb.UI.Content.error" />
			this._addHandler("error", handler);
		},
		remove_error: function (handler) {
			this._removeHandler("error", handler);
		},

		_collectionChanged: function (sender, args) {
			this.update(true);
		},

		_initializeResults: function Content$_initializeResults() {
			if (this._context) {
				this._context.initializeComponents();
			}
		},

		_generatesContext: function Content$_generatesContext() {
			return true;
		},
		_setTemplateCtxId: function Content$_setTemplateCtxId(idx) {
			this._ctxIdx = idx;
		},

		_findTemplate: function Content$_findTemplate() {
			/// <summary locid="M:J#ExoWeb.UI.Content._findTemplate">
			/// Find the first matching template for the content control.
			/// </summary>
			var tmplNames;
			if (this._contentTemplate) {
				tmplNames = this._contentTemplate;
			}
			if (this._template) {
				if (tmplNames) {
					tmplNames += " ";
					tmplNames += this._template;
				}
				else {
					tmplNames = this._template;
				}
			}

			var tmplEl = findTemplate(this._element.tagName.toLowerCase(), this._data, tmplNames ? tmplNames.trim().split(/\s+/) : []);

			if (!tmplEl) {
				throw new Error($format("This content region does not match any available templates. Tag={0}, Data={1}, Template={2}", this._element.tagName.toLowerCase(), this._data, tmplNames || ""));
			}

			return tmplEl;
		},

		_canRender: function Content$_canRender(force) {
			/// <summary locid="M:J#ExoWeb.UI.Content._canRender">
			/// Ensure that the control is initialized, has an element, and the "data" property has been set.
			/// 1) The set_data method may be called before the control has been initialized.
			/// 2) If a lazy markup extension is used to set the "data" property then a callback could set the 
			/// property value when the element is undefined, possibly because of template re-rendering.
			/// 3) If a lazy markup extension is used to set the "data" property then it may not have a value when initialized.
			/// Also check that the control has not been disabled.
			/// </summary>

			return ((this._data !== undefined && this._data !== null) || force === true) &&
				this.get_isInitialized() && this._element !== undefined && this._element !== null && !this.get_disabled();
		},

		_getResultingTemplateNames: function Content$_getResultingTemplateNames(tmplEl) {
			// use sys:content-template (on content control) and content:template
			var contentTemplateNames;
			if (this._contentTemplate) {
				contentTemplateNames = this._contentTemplate;
				if (this._template) {
					contentTemplateNames += " " + this._template;
				}
			}
			else if (this._template) {
				contentTemplateNames = this._template;
			}
			else {
				contentTemplateNames = "";
			}

			var contentTemplate = contentTemplateNames.trim().split(/\s+/).distinct();

			// Remove names matched by the template
			if (contentTemplate.length > 0) {
				var tmplNames = tmplEl.control.get_nameArray();
				if (tmplNames) {
					purge(contentTemplate, function(name) {
						return tmplNames.indexOf(name) >= 0;
					});
				}
			}

			// Add sys:content-template defined on the template element
			if (tmplEl.control._contentTemplate) {
				contentTemplate.addRange(tmplEl.control._contentTemplate.trim().split(/\s+/));
			}

			return contentTemplate;
		},

		_render: function Content$_render() {
			/// <summary locid="M:J#ExoWeb.UI.Content._render">
			/// Render the content template into the container element.
			/// </summary>

			// Failing to empty content before rendering can result in invalid content since rendering 
			// content is not necessarily in order because of waiting on external templates.
			var container = this._element;

			jQuery(container).empty();

			var parentContext = this.get_templateContext();
			this._context = null;

			var data = this._data;
			if (data !== null && data !== undefined) {
				var tmplEl = this._findTemplate();
				var template = new Sys.UI.Template(tmplEl);

				// get custom classes from template
				var classes = jQuery(tmplEl).attr("class");
				if (classes) {
					classes = jQuery.trim(classes.replace("exoweb-template", "").replace("sys-template", ""));
					jQuery(container).addClass(classes);
				}

				// Get the list of template names applicable to the control's children
				var contentTemplate = this._getResultingTemplateNames(tmplEl);

				this._context = template.instantiateIn(container, this._data, this._data, 0, null, parentContext, contentTemplate.join(" "));

				this._initializeResults();
			}
		},

		_renderStart: function Content$_renderStart(force) {
			/// <summary locid="M:J#ExoWeb.UI.Content._renderStart">
			/// Start the rendering process. There may be a delay if external templates
			/// have not yet finished loading.
			/// </summary>
			if (this._canRender(force)) {
				contentControlsRendering++;

				externalTemplatesSignal.waitForAll(function () {
					if (this._element === undefined || this._element === null) {
						contentControlsRendering--;
						return;
					}

					var renderArgs = new Sys.Data.DataEventArgs(this._data);
					Sys.Observer.raiseEvent(this, "rendering", renderArgs);

					this._isRendered = false;

					try {
						this._render();
						this._isRendered = true;
						Sys.Observer.raiseEvent(this, "rendered", renderArgs);
					}
					finally {
						contentControlsRendering--;
					}
				}, this);
			}
		},

		_link: function () {
			if (!this._ctxIdx && this._element && this._element.childNodes.length > 0)
				throw new Error("A content control is attached to the node, which expects a template context id, but no id was specified.");

			if ((this._data !== null && this._data !== undefined) || (this._element && this._element.childNodes.length > 0)) {
				var pctx = this.get_templateContext();
				var tmplEl = this._findTemplate();

				var newContext = new Sys.UI.TemplateContext(this._ctxIdx);
				newContext.data = this._data;
				newContext.components = [];
				newContext.nodes = [];
				newContext.dataItem = this._data;
				newContext.index = 0;
				newContext.parentContext = pctx;
				newContext.containerElement = this._element;
				newContext.template = new Sys.UI.Template(tmplEl);
				newContext.template._ensureCompiled();

				this._context = newContext;

				// Get the list of template names applicable to the control's children
				var contentTemplate = this._getResultingTemplateNames(tmplEl);

				var element = this._element;
				Sys.Application._linkContexts(pctx, this, this._data, element, newContext, contentTemplate.join(" "));

				for (var i = 0; i < element.childNodes.length; i++) {
					newContext.nodes.push(element.childNodes[i]);
				}

				newContext._onInstantiated(null, true);
				this._initializeResults();
			}
		},

		link: function Content$link() {
			/// <summary locid="M:J#ExoWeb.UI.Content.link" />
			if (!this._linkInProgress) {
				this._linkInProgress = true;
				contentControlsRendering++;
				externalTemplatesSignal.waitForAll(function () {
					// Control has disposed.
					if (this._element === undefined || this._element === null) {
						ExoWeb.UI.Content.callBaseMethod(this, 'link');
						contentControlsRendering--;
						return;
					}

					try {
						delete this._linkInProgress;
						this._isRendered = true;
						this._context = null;
						this._link();
						ExoWeb.UI.Content.callBaseMethod(this, 'link');
					}
					finally {
						contentControlsRendering--;
					}
				}, this);
			}
		},

		update: function Content$update(force) {
			if (this.get_isLinkPending()) {
				if (this.hasOwnProperty("_data")) {
					this.link();
				}
			}
			else if (this._canRender(force)) {
				this._renderStart(force);
			}
		},

		dispose: function ExoWeb$UI$Content$dispose() {
			if (this._context) {
				this._context.dispose();
			}
			if (this._changedHandler) {
				Observer.removeCollectionChanged(this._data, this._changedHandler);
				this._changedHandler = null;
			}
			this._contentTemplate = this._context = this._ctxIdx =
				this._data = this._disabled = this._isRendered = this._parentContext = this._template = null;
			ExoWeb.UI.Content.callBaseMethod(this, "dispose");
		},

		initialize: function Content$initialize() {
			/// <summary locid="M:J#ExoWeb.UI.Content.initialize" />
			Content.callBaseMethod(this, "initialize");

			if (jQuery(this._element).is(".sys-template")) {
				if (jQuery(this._element).children().length > 0) {
					logWarning("Content control is marked with the \"sys-template\" class, which means that its children will be ignored and discarded.");
				}
				else {
					logWarning("No need to mark a content control with the \"sys-template\" class.");
				}
			}
			this.update();
		}

	};

	ExoWeb.UI.Content = Content;
	Content.registerClass("ExoWeb.UI.Content", Sys.UI.Control, Sys.UI.ITemplateContextConsumer, Sys.UI.IContentTemplateConsumer);

	// #endregion

	// #region ExoWeb.UI.DataView
	//////////////////////////////////////////////////

	var dataViewsRendering = 0;

	registerActivity("DataView rendering", function() {
		if (dataViewsRendering < 0) {
			logWarning("Number of dataview controls rendering should never dip below zero.");
		}

		return dataViewsRendering > 0;
	});

	var dataViewRefresh = Sys.UI.DataView.prototype.refresh;
	Sys.UI.DataView.prototype.refresh = function refresh() {
		dataViewsRendering++;

		if (this.get_element()) {
			dataViewRefresh.apply(this, arguments);
		}
		else {
			logWarning("Attempting to refresh, but DataView was being disposed.");
		}

		dataViewsRendering--;
	};

	// #endregion

	// #region ExoWeb.UI.Html
	//////////////////////////////////////////////////

	function Html(element) {
		/// <summary>
		/// </summary>
		/// <example>
		///		<div sys:attach="html" html:url="http://www.google.com"></div>
		/// </example>

		Html.initializeBase(this, [element]);
	}

	Html.prototype = {
		get_source: function Html$get_source() {
			return this._source;
		},
		set_source: function Html$set_source(value) {
			this._source = value;
		},
		get_loadingClass: function Html$get_loadingClass() {
			return this._loadingClass;
		},
		set_loadingClass: function Html$set_loadingClass(value) {
			this._loadingClass = value;
		},
		get_url: function Html$get_url() {
			return this._url;
		},
		set_url: function Html$set_url(value) {
			this._url = value;
		},
		get_path: function Html$get_path() {
			var source = this.get_source();
			var url = this.get_url();
			if (source instanceof ExoWeb.Model.Entity) {
				url = source.toString(url);
			}
			return $format(url, source);
		},
		initialize: function Html$initialize() {
			Html.callBaseMethod(this, "initialize");

			var path = this.get_path();
			var element = this.get_element();
			var loadingClass = this.get_loadingClass();

			jQuery(element).addClass(loadingClass);

			jQuery(element).load(path, function(responseText, status, response) {
				jQuery(element).removeClass(loadingClass);

				if (status != "success" && status != "notmodified") {
					throw new Error("Failed to load html: status = " + status);
				}
			});
		}
	};

	ExoWeb.UI.Html = Html;
	Html.registerClass("ExoWeb.UI.Html", Sys.UI.Control);

	// #endregion

	// #region ExoWeb.UI.Behavior
	//////////////////////////////////////////////////

	function Behavior(element) {
		/// <summary>
		/// </summary>
		/// <example>
		///		<div sys:attach="behavior" behavior:script="Sys.scripts.Foo" behavior:typename="My.Class" behavior:prop-foo="bar"></div>
		/// </example>

		Behavior.initializeBase(this, [element]);
	}

	Behavior.prototype = {
		get_script: function Behavior$get_script() {
			return this._script;
		},
		set_script: function Behavior$set_script(value) {
			this._script = value;
		},
		get_scriptObject: function Behavior$get_script() {
			if (!this._scriptObject) {
				var path = this._script.startsWith("window") ?
					this._script.substring(7) :
					this._script;

				this._scriptObject = ExoWeb.evalPath(window, path);
			}

			return this._scriptObject;
		},
		get_typeName: function Behavior$get_typeName() {
			return this._typeName;
		},
		set_typeName: function Behavior$set_typeName(value) {
			this._typeName = value;
		},

		// NOTE: Keep these properties around for backwards compatibility.
		get_class: function Behavior$get_class() {
			logWarning("The behavior:class property is deprecated (see issue #1). Consider using behavior:typename instead.");

			return this._typeName;
		},
		set_class: function Behavior$set_class(value) {
			logWarning("The behavior:class property is deprecated (see issue #1). Consider using behavior:typename instead.");

			this._typeName = value;
		},

		get_dontForceLoad: function Behavior$get_dontForceLoad() {
			return this._dontForceLoad;
		},
		set_dontForceLoad: function Behavior$set_dontForceLoad(value) {
			this._dontForceLoad = value;
		},
		get_ctorFunction: function Behavior$get_ctorFunction() {
			if (!this._ctorFunction) {
				this._ctorFunction = ExoWeb.getCtor(this._typeName);
			}

			return this._ctorFunction;
		},
		get_properties: function Behavior$get_properties() {
			if (!this._properties) {
				this._properties = {};
				for (var prop in this) {
					if (prop.startsWith("prop_") && !prop.startsWith("prop_add_")) {
						var ctor = this.get_ctorFunction();
						if (!ctor) {
							throw new Error($format("Could not evaulate type '{0}'.", this._typeName));
						}

						var name = Sys.Application._mapToPrototype(prop.substring(5), ctor);

						if (!name) {
							throw new Error($format("Property '{0}' could not be found on type '{1}'.", prop.substring(5), this._typeName));
						}

						this._properties[name] = this[prop];
					}
				}
			}

			return this._properties;
		},
		get_events: function Behavior$get_events() {
			if (!this._events) {
				this._events = {};
				for (var prop in this) {
					if (prop.startsWith("prop_add_")) {
						var ctor = this.get_ctorFunction();
						if (!ctor) {
							throw new Error($format("Could not evaulate type '{0}'.", this._typeName));
						}

						var name = Sys.Application._mapToPrototype(prop.substring(9), ctor);

						if (!name) {
							throw new Error($format("Event '{0}' could not be found on type '{1}'.", prop.substring(9), this._typeName));
						}

						this._events[name] = this[prop];
					}
				}
			}

			return this._events;
		},
		_create: function Behavior$create() {
			// if the element is not within the document body it 
			// probably means that it is being removed - TODO: verify
			if (!jQuery.contains(document.body, this._element)) {
				return;
			}

			this._behavior = $create(this.get_ctorFunction(), this.get_properties(), this.get_events(), null, this._element);
		},
		initialize: function Behavior$initialize() {
			Behavior.callBaseMethod(this, "initialize");

			if (!this._dontForceLoad) {
				Sys.require([this.get_scriptObject()], this._create.bind(this));
			}
			else {
				this._create();
			}
		}
	};

	ExoWeb.UI.Behavior = Behavior;
	Behavior.registerClass("ExoWeb.UI.Behavior", Sys.UI.Control);

	// #endregion

	// #region ExoWeb.UI.Utilities
	//////////////////////////////////////////////////

	function getTemplateSubContainer(childElement) {
		var element = childElement;

		function isDataViewOrContent(el) {
			return (el.control && el.control instanceof Sys.UI.DataView) ||
				(el.control && el.control instanceof ExoWeb.UI.Content);
		}

		// find the first parent that has an attached ASP.NET Ajax dataview or ExoWeb content control (ignore toggle)
		while (element.parentNode && !isDataViewOrContent(element.parentNode)) {
			element = element.parentNode;
		}

		// containing template was not found
		if (element.parentNode && isDataViewOrContent(element.parentNode)) {
			return element;
		}
	}

	function getDataForContainer(container, subcontainer, index) {
		var data = null;

		if (container) {
			if (container.control instanceof Sys.UI.DataView || container.control instanceof ExoWeb.UI.Content) {
				var containerContexts = container.control.get_contexts();
				var containerData = container.control.get_data();

				// ensure an array for conformity
				if (!(containerData instanceof Array)) {
					containerData = [containerData];
				}

				if (containerContexts) {
					// if there is only one context in the array then the index must be zero
					if (containerContexts.length == 1) {
						index = 0;
					}

					if (index !== undefined && index !== null && index.constructor === Number) {
						if (index < containerContexts.length) {
							var indexedContext = containerContexts[index];
							var indexedData = containerData[index];
							data = (indexedContext) ? indexedContext.dataItem : indexedData;
						}
					}
					else {
						// try to find the right context based on the element's position in the dom
						for (var i = 0, l = containerContexts.length; i < l; i++) {
							var childContext = containerContexts[i];
							if (!childContext) {
								var contextsFromDom = map(container.children, function(e) { return Sys.UI.Template.findContext(e.firstChild); }).distinct();
								var matchingContext = contextsFromDom.single(function(tc) { return Sys._indexOf(tc.nodes, subcontainer) >= 0; });
								if (matchingContext) {
									data = matchingContext.dataItem;
									break;
								}
							}
							else if (childContext.containerElement === container && Sys._indexOf(childContext.nodes, subcontainer) > -1) {
								data = childContext.dataItem;
								break;
							}

						}
					}
				}
			}
		}

		return data;
	}

	function getParentContext(options/*{ target, subcontainer, index, level, dataType, ifFn }*/) {
		/// <summary>
		/// 	Finds the template context data based on the given options.
		/// </summary>
		/// <param name="options" type="Object">
		/// 	The object which contains the options to use.
		/// 	target:  The target from which to start searching.  This can be an HTML
		/// 					element, a control, or a template context.
		/// 		index (optional):  The index of the desired context.  If the desired context
		/// 					is one level up and is part of a list, this argument can be used
		/// 					to specify which template context to return.
		/// 		level (optional):  The number of levels to travel.  By default this is "1",
		/// 					which means that the immediate parent context data will be returned.
		/// 		dataType (optional):  If specified, this type is used as the type of data to search
		/// 					for.  When context data of this type is encountered it is returned.
		/// 					Note that arrays are not supported.  If the data is an array and the
		/// 					type of items must be checked, use the "ifFn" argument.
		/// 		ifFn (optional):  A function that determines whether the correct data has been
		/// 					found.  The context data is returned as soon as the result of calling 
		/// 					this function with the current data and container is true.
		/// </param>
		/// <returns type="Object" />

		var target = options.target, effectiveLevel = options.level || 1, container, subcontainer = options.subcontainer, i = 0, searching = true, context, data;

		if (target.control && (target.control instanceof Sys.UI.DataView || target.control instanceof ExoWeb.UI.Content)) {
			target = target.control;
		}
		else if (target instanceof Sys.UI.Template) {
			target = target.get_element();
		}
		else if (target instanceof Sys.UI.TemplateContext) {
			target = target.containerElement;
		}

		while (searching === true) {
			// if we are starting out with a dataview then look at the parent context rather than walking 
			// up the dom (since the element will probably not be present in the dom)
			if (!container && (target instanceof Sys.UI.DataView || target instanceof ExoWeb.UI.Content)) {
				context = target.get_templateContext();

				// If the control's context is the global context, then exit here with a custom result
				if (context._global === true) {
					return { data: null, global: true, container: document.documentElement, subcontainer: target.get_element() };
				}

				container = context.containerElement;

				if (container.control instanceof Toggle)
					container = Sys.UI.Template.findContext(container).containerElement;
			
				if (options.target && options.target.tagName) {
					subcontainer = getTemplateSubContainer(options.target);
				}
			}
			else {
				var obj = container || target;
				subcontainer = getTemplateSubContainer(obj);

				if (!subcontainer) {
					// Back up and attempt to go through the control.
					if (obj.control && (obj.control instanceof Sys.UI.DataView || container.control instanceof ExoWeb.UI.Content)) {
						container = null;
						target = obj.control;
						continue;
					}

					throw Error.invalidOperation("Not within a container template.");
				}

				container = subcontainer.parentNode;
			}

			// Increment the counter to check against the level parameter.
			i++;

			// Get the context data for the current level.
			data = getDataForContainer(container, subcontainer, options.index);

			if (options.dataType) {
				// Verify that the current data is not the data type that we are looking for.
				searching = !data || !(data instanceof options.dataType || data.constructor === options.dataType);
			}
			else if (options.ifFn) {
				// Verify that the stop function conditions are not met.
				searching = !(options.ifFn.call(this, data, container));
			}
			else {
				// Finally, check the level.  If no level was specified then we will only go up one level.
				searching = i < effectiveLevel;
			}
		}

		return { data: data, container: container, subcontainer: subcontainer };
	}

	ExoWeb.UI.getParentContext = getParentContext;

	ExoWeb.UI.getParentContextData = function() {
		return getParentContext.apply(this, arguments).data;
	};

	window.$parentContextData = function $parentContextData(target, index, level, dataType, ifFn) {
		/// <summary>
		/// 	Finds the template context data based on the given options.
		/// </summary>
		/// <param name="target" type="Object">
		/// 	The target from which to start searching.  This can be an HTML element, a 
		/// 	control, or a template context.
		/// </param>
		/// <param name="index" type="Number" integer="true" optional="true">
		/// 	The index of the desired context.  If the desired context is one level
		/// 	up and is part of a list, this argument can be used to specify which
		/// 	template context to return.
		/// </param>
		/// <param name="level" type="Number" integer="true" optional="true">
		/// 	The number of levels to travel.  By default this is "1", which means that
		/// 	the immediate parent context data will be returned.
		/// </param>
		/// <param name="dataType" type="Function" optional="true">
		/// 	If specified, this type is used as the type of data to search for.  When context
		/// 	data of this type is encountered it is returned.  Note that arrays are not supported.
		/// 	If the data is an array and the type of items must be checked, use the "ifFn" argument.
		/// </param>
		/// <param name="ifFn" type="Function" optional="true">
		/// 	A function that determines whether the correct data has been found.  The context data
		/// 	is returned as soon as the result of calling this function with the current data and 
		/// 	container is true.
		/// </param>
		/// <returns type="Object" />

		return getParentContext({
			"target": target,
			"index": index,
			"level": level,
			"dataType": dataType,
			"ifFn": ifFn
		}).data;
	};

	function getIsLast(template, index) {
		/// <summary>
		/// 	Returns whether the data being rendered in the given template at the given index is 
		/// 	the last object in the list.
		///
		///		Example:
		///
		///		&lt; span sys:if="{{ $isLast(this, $index) }}" &gt;
		///
		/// </summary>
		/// <param name="template" type="Sys.UI.Template">The template that is being rendered.</param>
		/// <param name="index" type="Number" integer="true">The index of the current data item.</param>
		/// <returns type="Boolean" />

		var len = template.get_element().control.get_contexts().length;
		return index == len - 1;
	}

	window.$isLast = getIsLast;

	// #endregion

	// #region ExoWeb.View.AdapterMarkupExtension
	//////////////////////////////////////////////////

	Sys._Application.mixin(Functor.eventing);

	Sys._Application.prototype.addBeforeCreateAdapter = function Application$addBeforeCreateAdapter(handler) {
	    this._addEvent("beforeCreateAdapter", handler);
	};

	Sys._Application.prototype.removeBeforeCreateAdapter = function Application$removeBeforeCreateAdapter(handler) {
	    this._removeEvent("beforeCreateAdapter", handler);
	};

	Sys.Application.registerMarkupExtension(
		"@",
		function AdapterMarkupExtention(component, targetProperty, templateContext, properties) {
			if (properties.required) {
				logWarning("Adapter markup extension does not support the \"required\" property.");
			}

			var path = properties.path || properties.$default;
			delete properties.$default;

			var source;
			if (properties.source) {
				source = properties.source;
				delete properties.source;
			}
			else {
				source = templateContext.dataItem;
			}

			var adapter;
			if (!path) {
				if (!(source instanceof Adapter)) {
					throw new Error("No path was specified for the \"@\" markup extension, and the source is not an adapter.");
				}
				for (var prop in properties) {
					if (properties.hasOwnProperty(prop) && prop !== "isLinkPending") {
						throw new Error("Additional adapter properties cannot be specified when deferring to another adapter (no path specified). Found property \"" + prop + "\".");
					}
				}
				adapter = source;
			}
			else {
			    Sys.Application._raiseEvent("beforeCreateAdapter", [Sys.Application, { source: source, path: path, properties: properties }]);
				adapter = new Adapter(source, path, properties.format, properties);
				templateContext.components.push(adapter);
			}

			adapter.ready(function AdapterReady() {
				Observer.setValue(component, targetProperty, adapter);
			});
		},
		false
	);

	// #endregion

	// #region ExoWeb.View.MetaMarkupExtension
	//////////////////////////////////////////////////

	var bindingSetters = [];
	var setterExpr = /^set_(.*)$/;
	ExoWeb.eachProp(Sys.Binding.prototype, function(prop) {
		var name = setterExpr.exec(prop);
		if (name) {
			bindingSetters.push(name[1]);
		}
	});

	Sys.Application.registerMarkupExtension(
		"#",
		function MetaMarkupExtension(component, targetProperty, templateContext, properties) {
			if (properties.required) {
				logWarning("Meta markup extension does not support the \"required\" property.");
			}

			var options, element;

			if (Sys.Component.isInstanceOfType(component)) {
				element = component.get_element();
			}
			else if (Sys.UI.DomElement.isDomElement(component)) {
				element = component;
			}

			options = Sys._merge({
				source: templateContext.dataItem,
				templateContext: templateContext,
				target: component,
				targetProperty: targetProperty,
				property: element.nodeName === "SELECT" ? "systemValue" : "displayValue"
			}, properties);

			delete properties.$default;

			// remove properties that apply to the binding
			for (var p in properties) {
				if (properties.hasOwnProperty(p)) {
					if (bindingSetters.indexOf(p) >= 0) {
						delete properties[p];
					}
				}
			}

			options.path = options.path || options.$default;
			delete options.$default;

			var adapter = options.source = new Adapter(options.source || templateContext.dataItem, options.path, options.format, properties);

			options.path = options.property;
			delete options.property;
		
			templateContext.components.push(adapter);
			templateContext.components.push(Sys.Binding.bind(options));
		},
		false
	);

	// #endregion

	// #region ExoWeb.View.ConditionMarkupExtension
	//////////////////////////////////////////////////

	Sys.Application.registerMarkupExtension("?",
		function (component, targetProperty, templateContext, properties) {
			var options = Sys._merge({
				source: templateContext.dataItem,
				templateContext: templateContext,
				targetProperty: targetProperty
			}, properties);

			var meta = options.source.meta;

			options.type = options.type || options.$default;
			delete options.$default;

			options.single = options.single && (options.single === true || options.single.toString().toLowerCase() === "true");

			var types = options.type ? options.type.split(",") : null;

			var sets = options.set ? options.set.split(",") : null;

			var target = function () {
				if (options.target && options.target.constructor === String)
					return evalPath(options.source, options.target);
				return options.target;
			};

			function updateConditions() {
				var currentTarget = target();
				var conditions = meta.conditions().filter(function (c) {
					return (!types || types.indexOf(c.type.code) >= 0) && // check for type code match (if specified)
						(!sets || intersect(sets, c.type.sets.map(function (s) { return s.name; })).length > 0) && // check for set code match (if specified)
						(!target || c.targets.some(function (t) { return t.target === currentTarget; })); // check for target (if specified)
				});

				if (options.single === true) {
					if (conditions.length > 1) {
						throw new Error($format("Multiple conditions were found for type \"{0}\".", options.type));
					}

					conditions = conditions.length === 0 ? null : conditions[0];
				}

				Observer.setValue(component, properties.targetProperty || targetProperty, conditions);
			}

			updateConditions();
			meta.addConditionsChanged(updateConditions, meta);
		},
		false);

	// #endregion

	// #region ExoWeb.View.Binding
	//////////////////////////////////////////////////

	function Binding(templateContext, source, sourcePath, target, targetPath, options, scopeChain) {
		Binding.initializeBase(this);

		this._templateContext = templateContext;
		this._source = source;
		this._sourcePath = sourcePath;
		this._target = target;

		var pathLower = targetPath ? targetPath.toLowerCase() : targetPath;
		if (pathLower === "innertext") {
			this._targetPath = "innerText";
		}
		else if (pathLower === "innerhtml") {
			this._targetPath = "innerHTML";
		}
		else {
			this._targetPath = targetPath;
		}

		this._options = options || {};

		this._isTargetElement = Sys.UI.DomElement.isDomElement(target);

		this._updateImmediately = true;

		if (this._sourcePath) {
			// Start the initial fetch of the source value.
			this._evalSuccessHandler = this._evalSuccess.bind(this);
			this._evalFailureHandler = this._evalFailure.bind(this);
			LazyLoader.eval(this._source, this._sourcePath, this._evalSuccessHandler, this._evalFailureHandler, scopeChain);
		}
		else {
			this._evalSuccess(this._source);
		}

		this._updateImmediately = false;
	}

	function ensureArray(value) {
		return isArray(value) ? value : (isNullOrUndefined(value) ? [] : [value]);
	}

	Binding.mixin({

		// Functions concerned with setting the value of the target after
		// the source value has been retrieved and manipulated based on options.
		//////////////////////////////////////////////////////////////////////////

		_setTarget: function(value) {
			if (this._isTargetElement && (this._targetPath === "innerText" || this._targetPath === "innerHTML")) {
				if (value && !isString(value))
					value = value.toString();

				// taken from Sys$Binding$_sourceChanged
				Sys.Application._clearContent(this._target);
				if (this._targetPath === "innerHTML")
					this._target.innerHTML = value;
				else
					this._target.appendChild(document.createTextNode(value));
				Observer.raisePropertyChanged(this._target, this._targetPath);
			}
			else if (this._isTargetElement && value === null) {
				// IE would set the value to "null"
				Observer.setValue(this._target, this._targetPath, "");
			}
			else {
				Observer.setValue(this._target, this._targetPath, value);
			}
		},

		_queue: function (value) {
			if (this._pendingValue) {
				this._pendingValue = value;
				return;
			}

			this._pendingValue = value;

			Batch.whenDone(function() {
				var targetValue = this._pendingValue;
				delete this._pendingValue;

				if (this._disposed === true) {
					return;
				}

				this._setTarget(targetValue);
			}, this);
		},

		// Functions that filter or transform the value of the source before
		// setting the target.  These methods are NOT asynchronous.
		//////////////////////////////////////////////////////////////////////////

		_getValue: function(value) {
			// Use a default value if the source value is null. NOTE: Because of the way LazyLoader.eval and evalPath are used,
			// the result should never be undefined. Undefined would indicate that a property did not exist, which would be an
			// error. This also has the side-effect of being more compatible with server-side rendering.
			if (value === null) {
				if (this._options.hasOwnProperty("nullValue")) {
					return this._options.nullValue;
				}
			}
			else {
				// Attempt to format the source value using a format specifier
				if (this._options.format) {
					return getFormat(value.constructor, this._options.format).convert(value);
				}
				else if (this._options.transform) {
					// Generate the transform function
					if (!this._transformFn) {
						this._transformFn = new Function("list", "$index", "$dataItem", "return $transform(list, true)." + this._options.transform + ";");
					}
					// Transform the original list using the given options
					var transformResult = this._transformFn(value, this._templateContext.index, this._templateContext.dataItem);
					if (transformResult.live !== Transform.prototype.live) {
						throw new Error("Invalid transform result: may only contain \"where\", \"orderBy\", \"select\", \"selectMany\", and \"groupBy\".");
					}
					return transformResult.live();
				}
			}
			return value;
		},

		// Functions that deal with responding to changes, asynchronous loading,
		// and general bookkeeping.
		//////////////////////////////////////////////////////////////////////////

		_require: function (value, callback) {
			var valueRevision = this._valueRevision = ExoWeb.randomText(8, true),
				updateImmediately = true;

			LazyLoader.evalAll(value, this._options.required, function () {

				// Make sure that the data being evaluated is not stale.
				if (!this._value || this._value !== value || this._valueRevision !== valueRevision) {
					return;
				}

				if (updateImmediately) {
					callback.call(this);
				} else {
					window.setTimeout(callback.bind(this), 1);
				}
			}, null, null, this, LazyLoader.evalAll, false, value, [], true);

			updateImmediately = false;
		},

		_update: function (value, oldItems, newItems) {
			if (this._disposed === true) {
				return;
			}

			// if necessary, remove an existing collection change handler
			if (this._collectionChangedHandler) {
				Observer.removeCollectionChanged(this._value, this._collectionChangedHandler);
				delete this._value;
				delete this._collectionChangedHandler;
			}

			this._value = value;

			// if the value is an array and we will transform the value or require paths, then watch for collection change events
			if (value && value instanceof Array && this._options.required) {
				this._collectionChangedHandler = this._collectionChanged.bind(this);
				Observer.makeObservable(value);
				Observer.addCollectionChanged(value, this._collectionChangedHandler);
			}

			// If additional paths are required then load them before invoking the callback.
			if (this._options.required) {
				this._updateWatchedItems(value, oldItems, newItems, function() {
					this._queue(this._getValue(value));
				});
			}
			else {
				this._queue(this._getValue(value));
			}
		},
	
		_updateWatchedItems: function(value, oldItems, newItems, callback) {
			// Unwatch require path for items that are no longer relevant.
			if (oldItems && oldItems.length > 0) {
				oldItems.forEach(function(item) {
					Observer.removePathChanged(item, this._options.required, this._watchedItemPathChangedHandler);
				}, this);
				delete this._watchedItemPathChangedHandler;
			}

			if (value) {
				// Load required paths, then manipulate the source value and update the target.
				this._require(value, function() {
					if (this._disposed === true) {
						return;
					}

					if (newItems && newItems.length > 0) {
						// Watch require path for new items.
						this._watchedItemPathChangedHandler = this._watchedItemPathChanged.bind(this);
						forEach(newItems, function(item) {
							Observer.addPathChanged(item, this._options.required, this._watchedItemPathChangedHandler, true);
						}, this);
					}

					if (callback) {
						callback.call(this);
					}
				});
			}
			else if (callback) {
				callback.call(this);
			}
		},

		_collectionChanged: function(items, evt) {
			// In the case of an array-valued source, respond to a collection change that is raised for the source value.
			if (this._options.required) {
				var oldItems = evt.get_changes().mapToArray(function(change) { return change.oldItems || []; });
				var newItems = evt.get_changes().mapToArray(function(change) { return change.newItems || []; });
				this._updateWatchedItems(items, oldItems, newItems);
			}
		},

		_watchedItemPathChanged: function(sender, args) {
			this._update(this._sourcePathResult);
		},

		_sourcePathChanged: function() {
			// Save the previous result and evaluate and store the new one.
			var prevSourcePathResult = this._sourcePathResult;
			this._sourcePathResult = evalPath(this._source, this._sourcePath);

			// if the value is the same (which will commonly happen when the source is an array) then there is no need to update
			if (prevSourcePathResult !== this._sourcePathResult) {
				// Respond to a change that occurs at any point along the source path.
				this._update(this._sourcePathResult, ensureArray(prevSourcePathResult), ensureArray(this._sourcePathResult));
			}
		},

		_evalSuccess: function(result, performedLoading, source) {
			this._source = source;

			if (this._disposed) {
				return;
			}

			delete this._evalSuccessHandler;

			if (this._sourcePath) {
				this._sourcePathChangedHandler = this._sourcePathChanged.bind(this);
				Observer.addPathChanged(this._source, this._sourcePath, this._sourcePathChangedHandler, true);
			}

			this._sourcePathResult = result;

			if (this._updateImmediately) {
				this._update(result, null, ensureArray(result));
			} else {
				var self = this;
				window.setTimeout(function () {
					self._update(result, null, ensureArray(result));
				}, 1);
			}
		},

		_evalFailure: function(err) {
			if (this._disposed) {
				return;
			}

			delete this._evalFailureHandler;

			throw new Error($format("Couldn't evaluate path '{0}', {1}", this._sourcePath, err));
		},

		dispose: function() {
			if (!this._disposed) {
				this._disposed = true;
				if (this._collectionChangedHandler) {
					Observer.removeCollectionChanged(this._value, this._collectionChangedHandler);
					this._collectionChangedHandler = null;
				}
				if (this._sourcePathChangedHandler) {
					Observer.removePathChanged(this._source, this._sourcePath, this._sourcePathChangedHandler);
					this._sourcePathChangedHandler = null;
				}
				if (this._watchedItemPathChangedHandler) {
					ensureArray(this._sourcePathResult).forEach(function(item) {
						Observer.removePathChanged(item, this._options.required, this._watchedItemPathChangedHandler);
					}, this);
					this._watchedItemPathChangedHandler = null;
				}
				if (this._evalSuccessHandler) {
					this._evalSuccessHandler = null;
				}
				if (this._evalFailureHandler) {
					this._evalFailureHandler = null;
				}
				this._isTargetElement = this._options = this._pendingValue = this._source =
					this._sourcePath = this._sourcePathResult = this._target = this._targetPath =
					this._templateContext = this._transformFn = this._value = this._valueRevision = null;
			}
			Binding.callBaseMethod(this, "dispose");
		}

	});

	ExoWeb.View.Binding = Binding;
	Binding.registerClass("ExoWeb.View.Binding", Sys.Component, Sys.UI.ITemplateContextConsumer);

	// #endregion

	// #region ExoWeb.View.LazyMarkupExtension
	//////////////////////////////////////////////////

	Sys.Application.registerMarkupExtension(
		"~",
		function LazyMarkupExtension(component, targetProperty, templateContext, properties) {
			var source;
			var scopeChain;
			var path = properties.path || properties.$default || null;

			// if a source is specified and it is a string, then execute the source as a JavaScript expression
			if (properties.source) {
				if (properties.source.constructor === String) {
					// create a function to evaluate the binding source from the given string
					var evalSource = new Function("$element", "$index", "$dataItem", "$context", "return " + properties.source + ";");

					// get the relevant html element either as the component or the component's target element
					var element = null;
					if (Sys.Component.isInstanceOfType(component)) {
						element = component.get_element();
					}
					else if (Sys.UI.DomElement.isDomElement(component)) {
						element = component;
					}

					// evaluate the value of the expression
					source = evalSource(element, templateContext.index, templateContext.dataItem, templateContext);

					// don't try to eval the path against window
					scopeChain = [];
				}
				else {
					source = properties.source;
				}
			}
			else if (templateContext.dataItem) {
				source = templateContext.dataItem;
			}
			else {
				// No context data, so path must be global
				source = window;
				scopeChain = [];
			}

			// Build an options object that represents only the options that the binding
			// expects, and only if they were specified in the markup extension
			var options = {};
			if (properties.hasOwnProperty("required")) {
				options.required = properties.required;
			}
			if (properties.hasOwnProperty("transform")) {
				options.transform = properties.transform;
			}
			if (properties.hasOwnProperty("format")) {
				options.format = properties.format;
			}
			if (properties.hasOwnProperty("nullValue")) {
				options.nullValue = properties.nullValue;
			}

			// Construct the new binding class
			var binding = new Binding(templateContext, source, path, component, properties.targetProperty || targetProperty, options, scopeChain);

			// register with the template context as a child component
			templateContext.components.push(binding);
		},
		false
	);

	// #endregion

	// #region ExoWeb.View.Adapter
	//////////////////////////////////////////////////

	function Adapter(target, propertyPath, format, options) {
		Adapter.initializeBase(this);

		this._target = target instanceof OptionAdapter ? target.get_rawValue() : target;
		this._propertyPath = propertyPath;
		this._settingRawValue = false;
		this._readySignal = new ExoWeb.Signal("Adapter Ready");

		if (options.allowedValuesTransform) {
			this._allowedValuesTransform = options.allowedValuesTransform;
		}

		if (options.optionsTransform) {
			throw new Error($format("Option \"optionsTransform\" is obsolete, use \"allowedValuesTransform\" instead. Path = \"{0}\".", propertyPath));
		}

		if (options.allowedValuesMayBeNull) {
			this._allowedValuesMayBeNull = options.allowedValuesMayBeNull;
		}

		// Initialize the property chain.
		this._initPropertyChain();

		// Determine the display format to use
		this._format = format ? getFormat(this._propertyChain.get_jstype(), format) : this._propertyChain.get_format();

		// Load the object this adapter is bound to and then load allowed values.
		LazyLoader.eval(this._target, this._propertyChain.get_path(),
			this._readySignal.pending(null, null, true),
			this._readySignal.orPending(function(err) {
				throw new Error($format("Couldn't evaluate path '{0}', {1}", propertyPath, err));
			}, null, true)
		);

		// Add arbitrary options so that they are made available in templates.
		this._extendProperties(options);
	}

	Adapter.mixin({
		// Internal book-keeping and setup methods
		///////////////////////////////////////////////////////////////////////
		_extendProperties: function Adapter$_extendProperties(options) {
			if (options) {
				var allowedOverrides = ["label", "helptext"];

				// The "nullOption" value can be specified for booleans since options
				// are exposed and they are not treated as nullable by default.
				if (this.isType(Boolean)) {
					allowedOverrides.push("nullOption");
				}

				this._extendedProperties = [];
				for (var optionName in options) {
					// check for existing getter and setter methods
					var getter = this["get_" + optionName];
					var setter = this["set_" + optionName];

					// if the option is already defined don't overwrite critical properties (e.g.: value)
					if (getter && !Array.contains(allowedOverrides, optionName)) {
						continue;
					}

					this._extendedProperties.push(optionName);

					// create a getter and setter if they don't exist
					if (!getter || !(getter instanceof Function)) {
						getter = this["get_" + optionName] =
							(function makeGetter(adapter, optionName) {
								return function Adapter$customGetter() { return adapter["_" + optionName]; };
							})(this, optionName);
					}
					if (!setter || !(setter instanceof Function)) {
						setter = this["set_" + optionName] =
							(function makeSetter(adapter, optionName) {
								return function Adapter$customSetter(value) { adapter["_" + optionName] = value; };
							})(this, optionName);
					}

					// set the option value
					setter.call(this, options[optionName]);
				}
			}
		},
		_initPropertyChain: function Adapter$_initPropertyChain() {
			var sourceType;

			if (this._target instanceof Adapter) {
				if (!this._target.get_isEntity()) {
					throw new Error("Adapter source is not an entity.");
				}

				sourceType = this._target._propertyChain.get_jstype().meta;
			}
			else {
				var sourceObject = this._target;

				if (!(sourceObject instanceof Entity)) {
					throw new Error("Adapter source is not an entity, found " + (sourceObject != null ? typeof (sourceObject) : "null"));
				}

				sourceType = sourceObject.meta.type;
			}

			// get the property chain for this adapter starting at the source object
			this._propertyChain = Model.property(this._propertyPath, sourceType);
			if (!this._propertyChain) {
				throw new Error($format("Property \"{0}\" could not be found.", this._propertyPath));
			}

			// If the target is an adapter, prepend its property chain.  Cannot simply concatenate paths
			// since the child path could be instance-dependent (i.e. the parents value is a subtype).
			if (this._target instanceof Adapter) {
				if (this._propertyChain instanceof Property) {
					this._propertyChain = new PropertyChain(this._propertyChain.get_containingType(), [this._propertyChain], []);
				}
				this._propertyChain.prepend(this._target.get_propertyChain());
				this._parentAdapter = this._target;
				this._target = this._target.get_target();
			}
		},
		_loadForFormatAndRaiseChange: function Adapter$_loadForFormatAndRaiseChange(val) {
			EventScope$onExit(function() {
				var signal = new ExoWeb.Signal("Adapter.displayValue");
				this._doForFormatPaths(val, function(path) {
					EventScope$perform(function() {
						LazyLoader.evalAll(val, path, signal.pending(), signal.orPending(), null, null, function() {
							EventScope$perform(LazyLoader.evalAll.bind(this, arguments));
						}, false, val, []);
					}, this);
				});
				signal.waitForAll(function() {
					Observer.raisePropertyChanged(this, "displayValue");
					Observer.raisePropertyChanged(this, "systemValue");
				}, this);
			}, this);
		},
		_doForFormatPaths: function Adapter$_doForFormatPaths(val, callback, thisPtr) {
			if (val === undefined || val === null || !this._format) {
				return;
			}

			this._format.getPaths().forEach(callback, thisPtr || this);
		},
		_unsubscribeFromFormatChanges: function Adapter$_unsubscribeFromFormatChanges(val) {
			this._doForFormatPaths(val, function (path) {
				var subscription = this._formatSubscribers[path];
				if (subscription && subscription.chain) {
					subscription.chain.removeChanged(subscription.handler);
				}
			});
		},
		_subscribeToFormatChanges: function Adapter$_subscribeToFormatChanges(val) {
			this._doForFormatPaths(val, function (path) {
				Model.property(path, this._propertyChain.lastProperty().get_jstype().meta, true, function (chain) {
					var subscription = this._formatSubscribers[path] = { chain: chain, handler: this._loadForFormatAndRaiseChange.bind(this).prependArguments(val) };
					var entities = val instanceof Array ? val : [val];
					entities.forEach(function (entity) {
						chain.addChanged(subscription.handler, entity, false, true);
					});
				}, this);
			});
		},
		_ensureObservable: function Adapter$_ensureObservable() {
			var _this = this;

			if (!this._observable) {
				Observer.makeObservable(this);

				// subscribe to property changes at all points in the path
				this._targetChangedHandler = this._onTargetChanged.bind(this);
				this._propertyChain.addChanged(this._targetChangedHandler, this._target, false, true);

				this._formatSubscribers = {};

				// set up initial watching of format paths
				if (this._propertyChain.lastTarget(this._target)) {
					var rawValue = this._propertyChain.value(this._target);
					this._subscribeToFormatChanges(rawValue);
				}

				// when the value changes resubscribe
				this._propertyChain.addChanged(function (sender, args) {
					_this._unsubscribeFromFormatChanges(args.oldValue);
					_this._subscribeToFormatChanges(args.newValue);
				}, this._target, false, true);

				this._observable = true;
			}
		},
		_onTargetChanged: function Adapter$_onTargetChanged(sender, args) {
			var _this = this;
			var rawValue = this.get_rawValue();

			if (!this._settingRawValue) {
				// raise raw value changed event
				LazyLoader.eval(rawValue, null, function () {
					Observer.raisePropertyChanged(_this, "rawValue");
				});
			}

			// raise value changed event
			this._loadForFormatAndRaiseChange(rawValue);

			// Re-attach validation handlers if needed
			var properties = this._propertyChain.properties();
			var numProps = properties.length;

			// The last target does not change if this is a single-property chain,
			// so no need to update validation events
			if (numProps > 1 && args.triggeredBy !== this._propertyChain.lastProperty()) {
				// Remove event handlers for previous last target 
				if (args.oldValue) {
					// Determine the old last target
					var property,
						propIndex = properties.indexOf(args.triggeredBy) + 1,
						newLastTarget = this._propertyChain.lastTarget(this._target),
						oldLastTarget = args.oldValue;
					while (oldLastTarget && propIndex < numProps - 1) {
						property = properties[propIndex++],
						oldLastTarget = property.value(oldLastTarget);
					}

					// Remove and re-add validation handlers if the last target has changed
					if (oldLastTarget && oldLastTarget !== newLastTarget) {
						this.get_conditions().clear();
						if (this._conditionsChangedHandler) {
							oldLastTarget.meta.removeConditionsChanged(this._conditionsChangedHandler);
						}
					}
				}

				// Add the conditions for the new target and subscribe to changes
				if (this.get_conditions() && newLastTarget) {
					this.get_conditions().addRange(newLastTarget.meta.conditions(this.get_propertyChain().lastProperty()));
					if (this._conditionsChangedHandler) {
						newLastTarget.meta.addConditionsChanged(this._conditionsChangedHandler, this.get_propertyChain());
					}
				}
			}

			if (!this._settingRawValue) {
				// Raise change on options representing the old and new value in the event that the property 
				// has be changed by non-UI code or another UI component.  This will result in double raising 
				// events if the value was set by changing selected on one of the OptionAdapter objects.
				if (this._options) {
					Array.forEach(this._options, function (o) {
						// Always reload selected for options in an array since we don't know what the old values in the list were
						if (args.newValue instanceof Array || o.get_rawValue() == args.newValue || o.get_rawValue() == args.oldValue) {
							Observer.raisePropertyChanged(o, "selected");
						}
					});
				}

				// Dispose of existing event handlers related to allowed value loading
				disposeOptions.call(this);
				signalOptionsReady.call(this);
			}
		},
		_setValue: function Adapter$_setValue(value) {
			var prop = this._propertyChain;

			// Clear existing format errors before adding a new one.
			if (this._formatError) {
				this.get_conditions().remove(this._formatError);
				this._formatError = undefined;
			}

			if (value instanceof ExoWeb.Model.FormatError) {
				// Insert new format errors if the value is not valid.
				this._formatError = value.createCondition(prop.lastTarget(this._target), prop.lastProperty());
				this.get_conditions().insert(0, this._formatError);
			} else {
				// Otherwise, update the property value.
				var changed = prop.value(this._target) !== value;
				this.set_rawValue(value, changed);
			}
		},

		// Various methods.
		///////////////////////////////////////////////////////////////////////
		ready: function Adapter$ready(callback, thisPtr) {
			this._readySignal.waitForAll(callback, thisPtr, true);
		},
		toString: function Adapter$toString() {
			var targetType;
			if (this._target === null) {
				targetType = "null";
			}
			else if (this._target === undefined) {
				targetType = "undefined";
			}
			else {
				targetType = parseFunctionName(this._target.constructor);
			}

			var value;
			try {
				value = this.get_rawValue();

				if (value === null) {
					value = "null";
				}
				else if (value === undefined) {
					value = "undefined";
				}
				else if (value.constructor !== String) {
					value = value.toString();
				}
			}
			catch (e) {
				value = "[error]";
			}

			return $format("<{0}>.{1}:  {2}", [targetType, this._propertyPath, value]);
		},

		// Properties that are intended to be used by templates.
		///////////////////////////////////////////////////////////////////////
		isType: function Adapter$isType(jstype) {
			if (this._jstype && this._jstype instanceof Function) {
				return this._jstype === jstype;
			}

			for (var propType = this._propertyChain.get_jstype(); propType !== null; propType = propType.getBaseType()) {
				if (propType === jstype) {
					return true;
				}
			}

			return false;
		},
		aspects: function Adapter$aspects() {
			if (!this._aspects) {
				this._aspects = {
					"isList": this.get_isList(),
					"isReference": this.get_isEntity() || this.get_isEntityList(),
					"dataType": this.get_dataType()
				};
			}
			return this._aspects;
		},
		get_isList: function Adapter$get_isList() {
			return this._propertyChain.get_isList();
		},
		get_isEntity: function Adapter$get_isEntity() {
			return this._propertyChain.get_isEntityType();
		},
		get_isEntityList: function Adapter$get_isEntityList() {
			return this._propertyChain.get_isEntityListType();
		},
		get_isStatic: function Adapter$get_isStatic() {
			return this._propertyChain.get_isStatic();
		},
		get_target: function Adapter$get_target() {
			return this._target;
		},
		get_propertyPath: function Adapter$get_propertyPath() {
			return this._propertyPath;
		},
		get_propertyChain: function Adapter$get_propertyChain() {
			return this._propertyChain;
		},
		get_format: function Adapter$get_format() {
			return this._format;
		},
		get_dataType: function Adapter$get_dataType() {
			return this._propertyChain.get_jstype();
		},
		get_label: function Adapter$get_label() {
			// if no label is specified then use the property label
			return this._label || this._propertyChain.get_label();
		},
		get_helptext: function Adapter$get_helptext() {
			// help text may also be included in the model?
			return this._helptext || this._propertyChain.get_helptext() || "";
		},
		get_nullOption: function Adapter$get_nullOption() {
			if (this.isType(Boolean)) {
				if (this.hasOwnProperty("_nullOption")) {
					return this._nullOption;
				}

				// Booleans are not nullable by default.
				return false;
			}

			return true;
		},
		get_values: function Adapter$get_values() {
			this._ensureObservable();
			if (this.get_isList()) {
				var _this = this;
				var values = this._propertyChain.value(this._target);
				return values.map(function (v, i) { return new ListValueAdapter(_this, i) });
			}
			else {
				throw new Error("Adapter values are only available for list properties.");
			}
		},
		get_rawValue: function Adapter$get_rawValue() {
			this._ensureObservable();
			return this._propertyChain.value(this._target);
		},
		set_rawValue: function Adapter$set_rawValue(value, changed) {
			var prop = this._propertyChain, target, targetType;

			if (changed === undefined) {
				changed = prop.value(this._target) !== value;
			}

			if (changed) {
				this._settingRawValue = true;

				try {
					target = this._target;
					if (target === null) {
						targetType = "null";
					} else if (target === undefined) {
						targetType = "undefined";
					} else if (target instanceof ExoWeb.Model.Entity) {
						targetType = target.meta.type.get_fullName();
					} else if (target instanceof ExoWeb.View.Adapter) {
						targetType = "Adapter";
					} else if (target instanceof ExoWeb.View.OptionAdapter) {
						targetType = "OptionAdapter";
					} else if (target instanceof ExoWeb.View.OptionGroupAdapter) {
						targetType = "OptionGroupAdapter";
					} else {
						targetType = parseFunctionName(target.constructor);
					}

					if (ExoWeb.config.enableBatchChanges) {
						context.server.batchChanges($format("adapter: {0}.{1}", targetType, this._propertyPath), function () {
							prop.value(target, value);
						});
					}
					else {
						prop.value(target, value);
					}
				}
				finally {
					this._settingRawValue = false;
				}
			}
		},
		get_systemValue: function Adapter$get_systemValue() {
			var rawValue = this.get_rawValue();
			if (this.get_isEntity()) {
				return rawValue ? Entity.toIdString(rawValue) : "";
			}
			else if (this.isType(Boolean)) {
				if (rawValue === true) {
					return "true";
				}
				else if (rawValue === false) {
					return "false";
				}
				else {
					return "";
				}
			}
			else if (this.isType(String)) {
				return rawValue;
			}
			else {
				logWarning("Possible incorrect usage of systemValue for a type that is not supported");
				return rawValue ? rawValue.toString() : "";
			}
		},
		set_systemValue: function Adapter$set_systemValue(value) {
			if (this.get_isEntity()) {

				// set to null
				if (!value) {
					this._setValue(null);
				}
				else {
					var entity = Entity.fromIdString(value);

					// lazy load if necessary
					if (LazyLoader.isRegistered(entity)) {
						// Load the entity (in scope) before setting the value.
						LazyLoader.load(entity, null, true, function () {
							this._setValue(entity);
						}, this);
					}
					// set immediately if loaded
					else {
						this._setValue(entity);
					}
				}
			}
			else if (this.isType(Boolean)) {
				if (value === "true") {
					this._setValue(true);
				}
				else if (value === "false") {
					this._setValue(false);
				}
				else {
					this._setValue(null);
				}
			}
			else if (this.isType(String)) {
				if (!value) 
					this._setValue(null);
				else
					this._setValue(value);
			}
			else {
				throw new Error("Cannot set systemValue property of Adapters for non-entity types.");
			}
		},
		get_displayValue: function Adapter$get_displayValue() {
			var displayValue;
			var rawValue = this.get_rawValue();

			if (this._format) {
				// Use a markup or property format if available
				if (rawValue instanceof Array) {
					displayValue = rawValue.map(function (value) { return this._format.convert(value); }, this);
				}
				else {
					displayValue = this._format.convert(rawValue);
				}
			}
			else if (rawValue instanceof Array) {
				// If no format exists, then fall back to toString
				displayValue = rawValue.map(function (value) {
					if (value === null || value === undefined) {
						return "";
					}
					else {
						return value.toString();
					}
				}, this);
			}
			else if (rawValue === null || rawValue === undefined) {
				displayValue = "";
			}
			else {
				displayValue = rawValue.toString();
			}

			return displayValue instanceof Array ? displayValue.join(", ") : displayValue;
		},
		set_displayValue: function Adapter$set_displayValue(value) {
			if (this.get_isEntity()) {
				throw new Error("Cannot set displayValue property of Adapters for entity types.");
			}
			else if (this.get_isList()) {
				throw new Error("Cannot set displayValue property of Adapters for list types.");
			}
			else {
				var initialValue = value;
				value = this._format ? this._format.convertBack(value) : value;
				this._setValue(value);
				if (ExoWeb.config.autoReformat && !(value instanceof ExoWeb.Model.FormatError)) {
					var newValue = this.get_displayValue();
					if (initialValue != newValue) {
						var adapter = this;
						window.setTimeout(function () { Observer.raisePropertyChanged(adapter, "displayValue"); }, 1);
					}
				}
			}
		},

		dispose: function Adapter$dispose() {
			var disposed = this._disposed, options = null;

			if (!disposed) {
				this._disposed = true;
				disposeOptions.call(this);
				options = this._options;
				if (this._extendedProperties) {
					var ext = this._extendedProperties;
					for (var i = 0, l = ext.length; i < l; i++) {
						this["_" + ext[i]] = null;
					}
					this._extendedProperties = null;
				}
				if (this._targetChangedHandler) {
					this._propertyChain.removeChanged(this._targetChangedHandler);
					this._targetChangedHandler = null;
				}
				this._unsubscribeFromFormatChanges(this.get_rawValue());
				// Clean up validation event handlers
				var lastTarget = this._propertyChain.lastTarget(this._target);
				if (lastTarget) {
					if (this._conditionsChangedHandler) {
						lastTarget.meta.removeConditionsChanged(this._conditionsChangedHandler);
					}
				}
				this._allowedValues = this._allowedValuesMayBeNull = this._aspects =
					this._format = this._formatSubscribers = this._helptext = this._jstype = this._settingRawValue = this._label =
					this._observable = this._options = this._allowedValuesTransform = this._parentAdapter = this._propertyChain =
					this._propertyPath = this._readySignal = this._target = null;
			}

			Adapter.callBaseMethod(this, "dispose");

			if (!disposed) {
				Observer.disposeObservable(this);
				if (options) {
					options.forEach(Observer.disposeObservable);
				}
			}
		}
	});

	// #region Conditions

	function conditionsChangedHandler(conditions, sender, args) {
		if (args.add) {
			conditions.add(args.conditionTarget.condition);
		}
		else if (args.remove) {
			conditions.remove(args.conditionTarget.condition);
		}
	}

	function getFirstError(conditions, includeWarnings) {
		var firstError = null;
		for (var c = 0; c < conditions.length; c++) {
			var condition = conditions[c];
			if (condition.type instanceof ConditionType.Error || (includeWarnings === true && condition.type instanceof ConditionType.Warning)) {
				if (firstError === null || /FormatError/i.test(condition.type.code)) {
					firstError = condition;
				}
				// Ensures a format error takes precedence over a required field error
				else if (!/FormatError/i.test(firstError.type.code) && /Required/i.test(condition.type.code))
				{
					firstError = condition;
				}
			}
		}
		return firstError;
	}

	Adapter.mixin({
		get_conditions: function Adapter$get_conditions() {

			// initialize the conditions if necessary
			if (!this._conditions) {

				// get the current target
				var target = this.get_propertyChain().lastTarget(this._target);

				// get the current set of conditions
				var conditions = this._conditions = target ? target.meta.conditions(this.get_propertyChain().lastProperty()) : [];

				// make the conditions observable
				Observer.makeObservable(this._conditions);

				// subscribe to condition changes on the current target
				if (target) {
					var handler = this._conditionsChangedHandler = conditionsChangedHandler.prependArguments(conditions);
					target.meta.addConditionsChanged(handler, this.get_propertyChain());
				}
			}
			return this._conditions;
		},
		get_firstErrorOrWarning: function Adapter$get_firstErrorOrWarning() {
			// gets the first error or warning in a set of conditions, always returning format errors first followed by required field errors, and null if no errors exist
			// initialize on first access
			if (!this.hasOwnProperty("_firstErrorOrWarning")) {

				var conditions = this.get_conditions();
				this._firstErrorOrWarning = getFirstError(conditions, true);

				// automatically update when condition changes occur
				var adapter = this;
				conditions.add_collectionChanged(function (sender, args) {

					var err = getFirstError(conditions, true);

					// store the first error and raise property change if it differs from the previous first error
					if (adapter._firstErrorOrWarning !== err) {
						adapter._firstErrorOrWarning = err;
						Observer.raisePropertyChanged(adapter, "firstErrorOrWarning");
					}
				});
			}

			// return the first error
			return this._firstErrorOrWarning;
		},
		get_firstError: function Adapter$get_firstError() {
			// gets the first error in a set of conditions, always returning format errors first followed by required field errors, and null if no errors exist
			// initialize on first access
			if (!this.hasOwnProperty("_firstError")) {

				var conditions = this.get_conditions();
				this._firstError = getFirstError(conditions);

				// automatically update when condition changes occur
				var adapter = this;
				conditions.add_collectionChanged(function (sender, args) {

					var err = getFirstError(conditions);

					// store the first error and raise property change if it differs from the previous first error
					if (adapter._firstError !== err) {
						adapter._firstError = err;
						Observer.raisePropertyChanged(adapter, "firstError");
					}
				});
			}

			// return the first error
			return this._firstError;
		},
		get_hasError: function Adapter$get_hasError() {
			// initialize on first access
			if (!this.hasOwnProperty("_hasError")) {

				var conditions = this.get_conditions();
				this._hasError = !!this.get_firstError();

				// automatically update when condition changes occur
				var adapter = this;
				conditions.add_collectionChanged(function (sender, args) {

					var val = !!adapter.get_firstError();

					// store the first error and raise property change if it differs from the previous first error
					if (adapter._hasError !== val) {
						adapter._hasError = val;
						Observer.raisePropertyChanged(adapter, "hasError");
					}
				});
			}

			return this._hasError;
		}
	});

	// #endregion

	// #region Options

	function disposeOptions() {
		var lastProperty = this._propertyChain.lastProperty();
		var allowedValuesRule = lastProperty.rule(ExoWeb.Model.Rule.allowedValues);
		if (this._allowedValuesChangedHandler) {
			allowedValuesRule.removeChanged(this._allowedValuesChangedHandler);
			this._allowedValuesChangedHandler = null;
		}
		if ( this._allowedValuesRuleExistsHandler) {
			this._propertyChain.lastProperty().removeRuleRegistered(this._allowedValuesRuleExistsHandler);
			this._allowedValuesRuleExistsHandler = null;
		}
		if (this._allowedValuesExistHandler) {
			allowedValuesRule.removeChanged(this._allowedValuesExistHandler);
			this._allowedValuesExistHandler = null;
		}
		this._options = null;
	}

	// Create an option adapter from the given object
	function createOptionAdapter(item) {
		// If it is a transform group then create an option group
		if (item instanceof TransformGroup) {
			return new OptionGroupAdapter(this, item.group, item.items);
		}
		// Otherwise,create a single option
		else {
			return new OptionAdapter(this, item);
		}
	}

	// Notify subscribers that options are available
	function signalOptionsReady() {
		if (this._disposed) {
			return;
		}

		// Delete backing fields so that options can be recalculated (and loaded)
		delete this._options;

		// Raise events in order to cause subscribers to fetch the new value
		ExoWeb.Observer.raisePropertyChanged(this, "options");
	}

	// If the given rule is allowed values, signal options ready
	function checkAllowedValuesRuleExists(rule) {
		if (rule instanceof Rule.allowedValues) {
			this._propertyChain.lastProperty().removeRuleRegistered(this._allowedValuesRuleExistsHandler);
			signalOptionsReady.call(this);
		}
	}

	function checkAllowedValuesExist() {
		var lastProperty = this._propertyChain.lastProperty();
		var allowedValuesRule = lastProperty.rule(ExoWeb.Model.Rule.allowedValues);
		var targetObj = this._propertyChain.lastTarget(this._target);
		var allowedValues = allowedValuesRule.values(targetObj, !!this._allowedValuesMayBeNull);

		if (allowedValues instanceof Array) {
			allowedValuesRule.removeChanged(this._allowedValuesExistHandler);
			delete this._allowedValuesExistHandler;
			signalOptionsReady.call(this);
		}
	}

	// Update the given options source array to match the current allowed values
	function refreshOptionsFromAllowedValues(optionsSourceArray) {
		var lastProperty = this._propertyChain.lastProperty();
		var allowedValuesRule = lastProperty.rule(ExoWeb.Model.Rule.allowedValues);
		var targetObj = this._propertyChain.lastTarget(this._target);
		var allowedValues = allowedValuesRule.values(targetObj, !!this._allowedValuesMayBeNull);
		if (allowedValues) {
			optionsSourceArray.beginUpdate();
			update(optionsSourceArray, allowedValues);
			optionsSourceArray.endUpdate();
		}
		else {
			signalOptionsReady.call(this);
		}
	}

	// Perform any required loading of allowed values items
	function ensureAllowedValuesLoaded(newItems, callback, thisPtr) {
		// Wait until the "batch" of work is complete before lazy loading options. Otherwise,
		// the lazy loading could occur during processing of a response which already contains
		// the data, which could cause performance degredation due to redundant data loading.
		Batch.whenDone(function () {
			var signal = new Signal("ensureAllowedValuesLoaded");
			newItems.forEach(function(item) {
				if (LazyLoader.isRegistered(item)) {
					LazyLoader.load(item, null, true, signal.pending());
				}
			});
			signal.waitForAll(callback, thisPtr);
		});
	}

	function clearInvalidOptions(allowedValues) {
		var rawValue = this.get_rawValue();
		var isDateProp = this.isType(Date);

		function isAllowedValue(value) {
			if (isDateProp) {
				return allowedValues.some(function (v) {
					return v instanceof Date && value.valueOf() === v.valueOf();
				});
			}

			return allowedValues.indexOf(value) !== -1;
		}

		if (rawValue !== null && allowedValues) {
			// Remove option values that are no longer valid
			if (rawValue instanceof Array) {
				purge(rawValue, function (item) {
					return !isAllowedValue(item);
				}, this);
			} else if (!isAllowedValue(rawValue) && this._propertyChain.value(this._target) !== null) {
				this._propertyChain.value(this._target, null);
			}
		} else if (rawValue instanceof Array) {
			rawValue.clear();
		} else if (this._propertyChain.value(this._target) !== null) {
			this._propertyChain.value(this._target, null);
		}
	}

	function allowedValuesChanged(optionsSourceArray, sender, args) {
		var lastProperty = this._propertyChain.lastProperty();
		var allowedValuesRule = lastProperty.rule(ExoWeb.Model.Rule.allowedValues);
		var allowedValues = allowedValuesRule.values(this._propertyChain.lastTarget(this._target), !!this._allowedValuesMayBeNull);

	    // Clear out invalid selections
		if (!allowedValuesRule.ignoreValidation) {
		    clearInvalidOptions.call(this, allowedValues);
		}

		// Load allowed value items that were added
		if (args.changes) {
			// Collect all items that were added
			var newItems = [];
			args.changes.forEach(function(change) {
				if (change.newItems) {
					newItems.addRange(change.newItems);
				}
			});
			if (newItems.length > 0) {
				ensureAllowedValuesLoaded(newItems, refreshOptionsFromAllowedValues.prependArguments(optionsSourceArray), this);
			}
			else {
				refreshOptionsFromAllowedValues.call(this, optionsSourceArray);
			}
		}
		else if (!args.oldValue && args.newValue) {
			// If there was previously not a value of the path and now there is, then all items are new
			ensureAllowedValuesLoaded(allowedValues, refreshOptionsFromAllowedValues.prependArguments(optionsSourceArray), this);
		}
		else {
			refreshOptionsFromAllowedValues.call(this, optionsSourceArray);
		}

	}

	Adapter.mixin({
		get_options: function Adapter$get_options() {
			if (!this.hasOwnProperty("_options")) {
				if (this.isType(Boolean)) {
					this._options = [createOptionAdapter.call(this, true), createOptionAdapter.call(this, false)];
				}
				else {
					var lastProperty = this._propertyChain.lastProperty();
					var allowedValuesRule = lastProperty.rule(ExoWeb.Model.Rule.allowedValues);

					// Watch for the registration of an allowed values rule if it doesn't exist
					if (!allowedValuesRule) {
						this._allowedValuesRuleExistsHandler = checkAllowedValuesRuleExists.bind(this);
						lastProperty.addRuleRegistered(this._allowedValuesRuleExistsHandler);
						this._options = null;
						return;
					}

					// Cache the last target
					var targetObj = this._propertyChain.lastTarget(this._target);

					// Retrieve the value of allowed values property
					var allowedValues = allowedValuesRule.values(targetObj, !!this._allowedValuesMayBeNull);

					// Load allowed values if the path is not inited
					if (allowedValues === undefined && (allowedValuesRule.source instanceof Property || allowedValuesRule.source instanceof PropertyChain)) {
						logWarning("Adapter forced eval of allowed values. Rule: " + allowedValuesRule);
						LazyLoader.eval(allowedValuesRule.source.get_isStatic() ? null : targetObj,
							allowedValuesRule.source.get_path(),
							signalOptionsReady.bind(this));
						this._options = null;
						return;
					}

					// Watch for changes until the allowed values path has a value
					if (!allowedValues) {
						this._allowedValuesExistHandler = checkAllowedValuesExist.bind(this);
						allowedValuesRule.addChanged(this._allowedValuesExistHandler, targetObj);
						if (!allowedValuesRule.ignoreValidation) {
						    clearInvalidOptions.call(this);
						}
						this._options = null;
						return;
					}

					// Load the allowed values list if it is not already loaded
					if (LazyLoader.isRegistered(allowedValues)) {
						logWarning("Adapter forced loading of allowed values list. Rule: " + allowedValuesRule);
						LazyLoader.load(allowedValues, null, true, signalOptionsReady.bind(this), this);
						this._options = null;
						return;
					}

					if (!allowedValuesRule.ignoreValidation) {
					    clearInvalidOptions.call(this, allowedValues);
					}

					// Create an observable copy of the allowed values that we can keep up to date in our own time
					var observableAllowedValues = allowedValues.slice();
					ExoWeb.Observer.makeObservable(observableAllowedValues);

					// Respond to changes to allowed values
					this._allowedValuesChangedHandler = allowedValuesChanged.bind(this).prependArguments(observableAllowedValues);
					allowedValuesRule.addChanged(this._allowedValuesChangedHandler, targetObj, false, true);

					// Create a transform that watches the observable copy and uses the user-supplied _allowedValuesTransform if given
					if (this._allowedValuesTransform) {
						transformedAllowedValues = (new Function("$array", "{ return $transform($array, true)." + this._allowedValuesTransform + "; }"))(observableAllowedValues);
						if (transformedAllowedValues.live !== Transform.prototype.live) {
							throw new Error("Invalid options transform result: may only contain \"where\", \"orderBy\", \"select\", \"selectMany\", and \"groupBy\".");
						}
					}
					else {
						transformedAllowedValues = $transform(observableAllowedValues, true);
					}

					// Map the allowed values to option adapters
					this._options = transformedAllowedValues.select(createOptionAdapter.bind(this)).live();
				}
			}

			return this._options;
		}
	});

	// #endregion

	ExoWeb.View.Adapter = Adapter;
	Adapter.registerClass("ExoWeb.View.Adapter", Sys.Component, Sys.UI.ITemplateContextConsumer);

	// #endregion

	// #region ExoWeb.View.OptionAdapter
	//////////////////////////////////////////////////

	function OptionAdapter(parent, obj) {
		this._parent = parent;
		this._obj = obj;

		// watch for changes to properties of the source object and update the label
		this._ensureObservable();
	}

	OptionAdapter.prototype = {
		// Internal book-keeping and setup methods
		///////////////////////////////////////////////////////////////////////
		_loadForFormatAndRaiseChange: function OptionAdapter$_loadForFormatAndRaiseChange(val) {
			if (val === undefined || val === null) {
				Observer.raisePropertyChanged(this, "displayValue");
				Observer.raisePropertyChanged(this, "systemValue");
				return;
			}

			var signal = new ExoWeb.Signal("OptionAdapter.displayValue");
			this._parent._doForFormatPaths(val, function (path) {
				LazyLoader.evalAll(val, path, signal.pending());
			}, this);
			signal.waitForAll(function () {
				Observer.raisePropertyChanged(this, "displayValue");
				Observer.raisePropertyChanged(this, "systemValue");
			}, this);
		},
		_subscribeToFormatChanges: function OptionAdapter$_subscribeToFormatChanges(val) {
			this._parent._doForFormatPaths(val, function (path) {
				Model.property(path, val.meta.type, true, function (chain) {
					var subscription = this._formatSubscribers[path] = { chain: chain, handler: this._loadForFormatAndRaiseChange.bind(this).prependArguments(val) };
					chain.addChanged(subscription.handler, val);
				}, this);
			}, this);
		},
		_ensureObservable: function OptionAdapter$_ensureObservable() {
			if (!this._observable) {
				Observer.makeObservable(this);

				this._formatSubscribers = {};

				// set up initial watching of format paths
				this._subscribeToFormatChanges(this._obj);

				this._observable = true;
			}
		},

		// Properties consumed by UI
		///////////////////////////////////////////////////////////////////////////
		get_parent: function OptionAdapter$get_parent() {
			return this._parent;
		},
		get_rawValue: function OptionAdapter$get_rawValue() {
			return this._obj;
		},
		get_displayValue: function OptionAdapter$get_displayValue() {
			var format = this._parent.get_format();
			return format ? format.convert(this._obj) : this._obj;
		},
		set_displayValue: function OptionAdapter$set_displayValue(value) {
			if (this._parent.get_isEntity()) {
				throw new Error("Cannot set displayValue property of OptionAdapters for entity types.");
			}
			else {
				var selected = this.get_selected();
				// Remove old value from the list if selected
				if (selected) this.set_selected(false);

				// Set the internal option value after optional applying a conversion
				value = this._format ? this._format.convertBack(value) : value;
				this._obj = value;

				// Add new value to the list if previously selected
				if (selected) this.set_selected(true);
			}
		},
		get_systemValue: function OptionAdapter$get_systemValue() {
			if (this._obj === null || this._obj === undefined) {
				return "";
			}
			else {
				return this._parent.get_isEntity() ? Entity.toIdString(this._obj) : this._obj.toString();
			}
		},
		get_selected: function OptionAdapter$get_selected() {
			var rawValue = this._parent.get_rawValue();

			if (rawValue instanceof Array) {
				return Array.contains(rawValue, this._obj);
			}
			else {
				return rawValue === this._obj;
			}
		},
		set_selected: function OptionAdapter$set_selected(value) {
			var rawValue = this._parent.get_rawValue();

			if (rawValue instanceof Array) {
				this._parent._settingRawValue = true;

				try {
					if (value && !Array.contains(rawValue, this._obj)) {
						rawValue.add(this._obj);
					}
					else if (!value && Array.contains(rawValue, this._obj)) {
						rawValue.remove(this._obj);
					}

				} finally {
					this._parent._settingRawValue = false;
				}
			}
			else {
				if (value) {
					this._parent.set_rawValue(this._obj);
				}
				else {
					this._parent.set_rawValue(null);
				}
			}
		},
		get_conditions: function OptionAdapter$get_conditions() {
			return this._parent.get_conditions();
		}
	};

	ExoWeb.View.OptionAdapter = OptionAdapter;

	// #endregion

	// #region ExoWeb.View.ListValueAdapter
	//////////////////////////////////////////////////

	function ListValueAdapter(parent, index) {
		this._parent = parent;
		this._index = index;

		// watch for changes to properties of the source object and update the label
		this._ensureObservable();
	}

	ListValueAdapter.prototype = {
		// Internal book-keeping and setup methods
		///////////////////////////////////////////////////////////////////////
		_loadForFormatAndRaiseChange: function ListValueAdapter$_loadForFormatAndRaiseChange(val) {
			if (val === undefined || val === null) {
				Observer.raisePropertyChanged(this, "displayValue");
				Observer.raisePropertyChanged(this, "systemValue");
				return;
			}

			var signal = new ExoWeb.Signal("ListValueAdapter.displayValue");
			this._parent._doForFormatPaths(val, function (path) {
				LazyLoader.evalAll(val, path, signal.pending());
			}, this);
			signal.waitForAll(function () {
				Observer.raisePropertyChanged(this, "displayValue");
				Observer.raisePropertyChanged(this, "systemValue");
			}, this);
		},
		//_subscribeToFormatChanges: function ListValueAdapter$_subscribeToFormatChanges(val) {
		//	this._parent._doForFormatPaths(val, function (path) {
		//		Model.property(path, val.meta.type, true, function (chain) {
		//			var subscription = this._formatSubscribers[path] = { chain: chain, handler: this._loadForFormatAndRaiseChange.bind(this).prependArguments(val) };
		//			chain.addChanged(subscription.handler, val);
		//		}, this);
		//	}, this);
		//},
		_ensureObservable: function ListValueAdapter$_ensureObservable() {
			if (!this._observable) {
				Observer.makeObservable(this);

				this._formatSubscribers = {};

				// set up initial watching of format paths
				//this._subscribeToFormatChanges(this._obj);

				this._observable = true;
			}
		},

		// Properties consumed by UI
		///////////////////////////////////////////////////////////////////////////
		get_parent: function ListValueAdapter$get_parent() {
			return this._parent;
		},
		get_isEntity: function ListValueAdapter$get_isEntity() {
			return this._parent.get_isEntity();
		},
		get_options: function ListValueAdapter$get_options() {
			var _this = this;
			return this._parent.get_options().map(function (o) { return new OptionAdapter(_this, o._obj); });
		},
		get_rawValue: function ListValueAdapter$get_rawValue() {
			return this._parent.get_rawValue()[this._index];
		},
		get_displayValue: function ListValueAdapter$get_displayValue() {
			var format = this._parent._format;
			var obj = this._parent.get_rawValue()[this._index];
			return format ? format.convert(obj) : obj;
		},
		set_displayValue: function ListValueAdapter$set_displayValue(value) {
			if (this._parent.get_isEntity()) {
				throw new Error("Cannot set displayValue property of OptionAdapters for entity types.");
			}
			else {
				// Set the internal option value after optional applying a conversion
				value = this._format ? this._parent._format.convertBack(value) : value;

				var list = this._parent.get_rawValue();
				list.beginUpdate();
				list.removeAt(this._index);
				list.insert(this._index, value);
				list.endUpdate();
			}
		},
		get_systemValue: function ListValueAdapter$get_systemValue() {
			if (this._obj === null || this._obj === undefined) {
				return "";
			}
			else {
				return this._parent.get_isEntity() ? Entity.toIdString(this._obj) : this._obj.toString();
			}
		},
		get_conditions: function ListValueAdapter$get_conditions() {
			return this._parent.get_conditions();
		},
		_doForFormatPaths: function ListValueAdapter$_doForFormatPaths(val, callback, thisPtr) {
			return this._parent._doForFormatPaths(val, callback, thisPtr);
		},
		get_format: function ListValueAdapter$get_format() {
			return this._parent._format;
		}
	};

	ExoWeb.View.ListValueAdapter = ListValueAdapter;

	// #endregion

	// #region ExoWeb.View.OptionGroupAdapter
	//////////////////////////////////////////////////

	function OptionGroupAdapter(parent, obj, items) {
		this._parent = parent;
		this._obj = obj;
		this._options = $transform(items).select(parent._createOption.bind(parent)).live();

		// watch for changes to properties of the source object and update the label
		this._ensureObservable();
	}

	OptionGroupAdapter.prototype = {
		// Properties consumed by UI
		///////////////////////////////////////////////////////////////////////////
		get_parent: function OptionGroupAdapter$get_parent() {
			return this._parent;
		},
		get_rawValue: function OptionGroupAdapter$get_rawValue() {
			return this._obj;
		},
		get_displayValue: function OptionGroupAdapter$get_displayValue() {
			var result = this._obj;
			if (result !== null && result !== undefined && result.formats && result.formats.$display) {
				result = result.formats.$display.convert(result);
			}
			return result;
		},
		get_systemValue: function OptionGroupAdapter$get_systemValue() {
			var result = this._obj;
			if (result !== null && result !== undefined && result.formats && result.formats.$system) {
				result = result.formats.$system.convert(result);
			}
			return result;
		},
		get_options: function OptionGroupAdapter$get_options() {
			return this._options;
		},
		get_conditions: function OptionGroupAdapter$get_conditions() {
			return this._parent.get_conditions();
		}
	};

	ExoWeb.View.OptionGroupAdapter = OptionGroupAdapter;
	OptionGroupAdapter.registerClass("ExoWeb.View.OptionGroupAdapter");

	// #endregion

	// #region ExoWeb.View.MsAjax
	//////////////////////////////////////////////////

	/*globals Sys, jQuery */

	(function () {
		function updateLastTargetAndSourceForOtherRadios(target) {
			// Set _lastTarget=false on other radio buttons in the group, since they only 
			// remember the last target that was recieved when an event fires and radio button
			// target change events fire on click (which does not account for de-selection).  
			// Otherwise, the source value is only set the first time the radio button is selected.
			if (Sys.UI.DomElement.isDomElement(target) && jQuery(target).is("input[type=radio]:checked")) {
				jQuery("input[type=radio][name='" + target.name + "']").each(function () {
					if (this !== target && this.__msajaxbindings !== undefined) {
						var bindings = this.__msajaxbindings;
						for (var i = 0; i < bindings.length; i++)
							bindings[i]._lastTarget = bindings[i]._lastSource = false;
					}
				});
			}
		}

		var targetChangedImpl = Sys.Binding.prototype._targetChanged;
		Sys.Binding.prototype._targetChanged = function (force) {
			// Batch changes that may occur due to the target element changing.
			var source = this.get_source(),
				sourceType,
				batchChanges = ExoWeb.config.enableBatchChanges;

			if (source === null) {
				sourceType = "null";
			}
			else if (source === undefined) {
				sourceType = "undefined";
			}
			else if (source instanceof ExoWeb.Model.Entity) {
				sourceType = source.meta.type.get_fullName();
			}
			else if (source instanceof ExoWeb.View.Adapter) {
				sourceType = "Adapter";

				// Adapters handle their own batching.
				batchChanges = false;
			}
			else if (source instanceof ExoWeb.View.OptionAdapter) {
				sourceType = "OptionAdapter";

				// If the option adapter is not a list, then it will set the
				// adapter's rawValue, which will handle batching itself.
				if (!source.get_parent().get_isList()) {
					batchChanges = false;
				}
			}
			else if (source instanceof ExoWeb.View.OptionGroupAdapter) {
				sourceType = "OptionGroupAdapter";
			}
			else {
				sourceType = parseFunctionName(source.constructor);
			}

			if (batchChanges) {
				context.server._changeLog.batchChanges(
					$format("binding: {0}.{1}", sourceType, this.get_path()),
					context.server._localUser,
					targetChangedImpl.bind(this, arguments),
					true
				);
			} else {
				targetChangedImpl.apply(this, arguments);
			}

			// If the binding is not disposing, then fix backing
			// fields for other radio buttons in the same group.
			if (!this._disposed) {
				updateLastTargetAndSourceForOtherRadios(this._target);
			}
		};

		function removeCheckedAttributeToMatchSourceValue(target, sourceValue) {
			// Remove checked attribute from a radio button if the source value has been set to false.
			if (Sys.UI.DomElement.isDomElement(target) && jQuery(target).is("input[type=radio]:checked") && !sourceValue) {
				jQuery(target).removeAttr("checked");
			}
		}

		var sourceChangedImpl = Sys.Binding.prototype._sourceChanged;
		Sys.Binding.prototype._sourceChanged = function (force) {
			var link = force === false;

			// Invoke the standard method implementation.
			sourceChangedImpl.apply(this, [force]);

			if (!this._disposed && !link) {
				removeCheckedAttributeToMatchSourceValue(this._target, this._lastSource);
			}
		};

		Sys.UI.DataView.prototype._loadData = function (value) {
			this._swapData(this._data, value);
			var oldValue = this._data;
			this._data = value;
			this._setData = true;
			this._stale = false;
			// Array data should not typically be set unless some intermediate
			// process (like transform) is creating a new array from the same original.
			if ((value && value instanceof Array) && (oldValue && oldValue instanceof Array)) {
				// copy the original array
				var arr = oldValue.slice();
				var changes = update(arr, value, true);
				this._collectionChanged(value, new Sys.NotifyCollectionChangedEventArgs(changes));
			}
			else {
				this._dirty = true;
				if (this._isActive()) {
					if (this.get_isLinkPending()) {
						this.link();
					}
					else {
						this.refresh();
					}
					this.raisePropertyChanged("data");
				}
				else {
					this._changed = true;
				}
			}
		};
	})();

	// Get's the last object in the source path.  Ex: Customer.Address.Street returns the Address object.
	function getFinalSrcObject(binding) {
		var src = binding.get_source();

		for (var i = 0; i < binding._pathArray.length - 1; ++i) {
			src = src[binding._pathArray[i]] || src["get_" + binding._pathArray[i]]();
		}

		return src;
	}

	ExoWeb.View.getFinalSrcObject = getFinalSrcObject;

	function getFinalPathStep(binding) {
		return binding._pathArray[binding._pathArray.length - 1];
	}

	ExoWeb.View.getFinalPathStep = getFinalPathStep;

	function getBindingInfo(binding) {
		var srcObj = getFinalSrcObject(binding);

		var target;
		var property;

		// Option adapter defers to parent adapter
		if (srcObj instanceof ExoWeb.View.OptionAdapter) {
			srcObj = srcObj.get_parent();
		}

		if (srcObj instanceof ExoWeb.View.Adapter) {
			var chain = srcObj.get_propertyChain();
			property = chain.lastProperty();
			target = chain.lastTarget(srcObj.get_target());
		}
		else if (srcObj instanceof ExoWeb.Model.Entity) {
			var propName = getFinalPathStep(binding);
			property = srcObj.meta.property(propName);
			target = srcObj;
		}

		return {
			target: target,
			property: property
		};
	}

	ExoWeb.View.getBindingInfo = getBindingInfo;

	// #endregion

	// #region Validation
	//////////////////////////////////////////////////

	var isError = function (condition) {
		return condition.type instanceof ExoWeb.Model.ConditionType.Error;
	};

	var isValidationCondition = function (condition) {
		return condition.type instanceof ExoWeb.Model.ConditionType.Error || condition.type instanceof ExoWeb.Model.ConditionType.Warning;
	};

	var onMetaConditionsChanged = function (sender, args, property) {
		if (isValidationCondition(args.conditionTarget.condition)) {
			$(this).trigger("validated", [sender.conditions(property)]);
		}
	};

	var onConditionsCollectionChanged = function (sender, args) {
		$(this).trigger("validated", [sender.filter(isValidationCondition)]);
	};

	var ensureInited = function (element, trackData) {
		if (!window.ExoWeb) {
			return;
		}

		var $el = jQuery(element);

		if ($el.attr("__validating") === undefined) {
			// register for model validation events
			var bindings = $el.liveBindings();

			for (var i = 0; i < bindings.length; i++) {
				var binding = bindings[i];
				var srcObj = ExoWeb.View.getFinalSrcObject(binding);
				var propName = ExoWeb.View.getFinalPathStep(binding);

				var meta = srcObj.meta || srcObj;

				var validationData = null;

				if (meta instanceof ExoWeb.Model.ObjectMeta) {
					var property = meta.type.property(propName);

					var metaHandler = onMetaConditionsChanged.bind(element).spliceArguments(2, 0, property);

					if (trackData) {
						validationData = { instance: { type: meta.type.get_fullName(), id: meta.id }, handler: metaHandler };
					}

					meta.addConditionsChanged(metaHandler, property);
				}
				else if (meta && meta.get_conditions) {
					var conditions = meta.get_conditions();

					var collectionHandler = onConditionsCollectionChanged.bind(element);

					if (trackData) {
						validationData = { collection: conditions, handler: collectionHandler };
					}

					ExoWeb.Observer.addCollectionChanged(conditions, collectionHandler);
				}

				if (trackData) {
					$el.data("validated", validationData);
				}
			}

			// don't double register for events
			$el.attr("__validating", true);
		}
	};

	jQuery.fn.validated = function (f, trackData) {
		this.each(function () {
			jQuery(this).bind('validated', f);
			ensureInited(this, trackData);
		});

		return this;
	};

	// Gets all model rules associated with the property an element is bound to
	jQuery.fn.rules = function (ruleType) {
		if (!window.Sys || !window.ExoWeb || !ExoWeb.Model) return [];

		return jQuery(this).liveBindings()
			.map(function(binding) {
				return ExoWeb.View.getBindingInfo(binding);
			}).filter(function(info) {
				return !!info.property;
			}).map(function(info) {
				return info.property.rule(ruleType);
			});
	};

	jQuery.fn.errors = function () {
		if (!window.Sys || !window.ExoWeb || !ExoWeb.Model) return [];

		return jQuery(this).liveBindings().mapToArray(function (binding) {

			var source = binding.get_source();
			if (source instanceof ExoWeb.View.Adapter) {
				return source.get_conditions().filter(isError);
			}
			else {
				var info = ExoWeb.View.getBindingInfo(binding);

				// Guard against null/undefined target.  This could happen if the target is 
				// undefined, or if the path is multi-hop, and the full path is not defined.
				if (!info.target || !info.property) return [];

				return info.target.meta.conditions(info.property).filter(isError);
			}
		});
	};

	// #endregion

	// #region Selectors
	//////////////////////////////////////////////////

	var exoWebAndModel = false;

	jQuery.expr[":"].rule = function (obj, index, meta, stack) {
		if (exoWebAndModel === false) {
			if (!(window.ExoWeb && ExoWeb.Model))
				return false;
			exoWebAndModel = true;
		}

		var ruleName = meta[3];
		var ruleType = ExoWeb.Model.Rule[ruleName];

		if (!ruleType) {
			throw new Error("Unknown rule in selector: " + ruleName);
		}

		return jQuery(obj).rules(ruleType).length > 0;
	};

	jQuery.expr[":"].bound = function (obj, index, meta, stack) {
		if (exoWebAndModel === false) {
			if (!(window.ExoWeb && ExoWeb.Model))
				return false;
			exoWebAndModel = true;
		}

		return jQuery(obj).liveBindings().length > 0;
	};

	//////////////////////////////////////////////////////////////////////////////////////
	// helpers for working with controls
	var dataviewPrereqs = false;
	jQuery.expr[":"].dataview = function (obj, index, meta, stack) {
		if (dataviewPrereqs === false) {
			if (!(window.Sys !== undefined && Sys.UI !== undefined && obj.control !== undefined && Sys.UI.DataView !== undefined))
				return false;
			dataviewPrereqs = true;
		}

		return obj.control instanceof Sys.UI.DataView;
	};

	var contentPrereqs = false;
	jQuery.expr[":"].content = function (obj, index, meta, stack) {
		if (contentPrereqs === false) {
			if (!(window.ExoWeb !== undefined && ExoWeb.UI !== undefined && obj.control !== undefined && ExoWeb.UI.Content !== undefined && obj.control))
				return false;

			contentPrereqs = true;
		}

		return obj.control instanceof ExoWeb.UI.Content;
	};

	var togglePrereqs = false;
	jQuery.expr[":"].toggle = function (obj, index, meta, stack) {
		if (togglePrereqs === false) {
			if (!(window.ExoWeb !== undefined && ExoWeb.UI !== undefined && obj.control !== undefined && ExoWeb.UI.Toggle !== undefined && obj.control))
				return false;

			togglePrereqs = true;
		}

		return obj.control instanceof ExoWeb.UI.Toggle;
	};

	jQuery.expr[":"].control = function (obj, index, meta, stack) {
		var typeName = meta[3];
		var jstype = new Function("{return " + typeName + ";}");

		return obj.control instanceof jstype();
	};

	// #endregion

	// #region Helpers
	//////////////////////////////////////////////////

	jQuery.fn.control = function jQuery$control(propName, propValue) {
		if (arguments.length === 0) {
			return this.get(0).control;
		}
		else if (arguments.length == 1) {
			return this.get(0).control["get_" + propName]();
		}
		else {
			this.each(function jQuery$control$one(index, element) {
				this.control["set_" + propName](propValue);
			});
		}
	};

	jQuery.fn.commands = function jQuery$commands(commands) {
		var control = this.control();
		control.add_command(function jQuery$commands$command(sender, args) {
			var handler = commands[args.get_commandName()];
			if (handler) {
				handler(sender, args);
			}
		});
	};

	// Gets all Sys.Bindings for an element
	jQuery.fn.liveBindings = function jQuery$liveBindings() {
		var bindings = [];
		this.each(function jQuery$liveBindings$one() {
			if (this.__msajaxbindings)
				Array.addRange(bindings, this.__msajaxbindings);
		});
		return bindings;
	};

	// #endregion

	// #region Ever
	//////////////////////////////////////////////////

	// Cache lists of ever handlers by type
	var everHandlers = { added: [], deleted: [], bound: [], unbound: [] };

	var processElements = function processElements(container, els, action, source) {
		// Determine if the input is an array
		var isArr = Object.prototype.toString.call(els) === "[object Array]",

			// The number of elements to process
			numEls = isArr ? els.length : 1,

			// Cache of handlers for the action in question
			actionHandlers,

			// The number of unfiltered handlers
			numActionHandlers,

			// Handlers that are applicable to this call
			handlers,

			// The number of cached handlers
			numHandlers,

			// Determines whether to search children for matches
			doSearch,

			// Element iteration index variable
			i = 0,

			// Element iteration item variable
			el,

			// Optimization: cache the jQuery object for the element
			$el,

			// Handler iteration index variable
			j,

			// Handler iteration item variable
			handler;

		if (numEls === 0) {
			return;
		}

		actionHandlers = everHandlers[action];

		// Filter based on source and context
		i = -1;
		numActionHandlers = actionHandlers.length;
		handlers = [];
		while (++i < numActionHandlers) {
			handler = actionHandlers[i];

			// If a handler source is specified then filter by the source
			if (handler.source && handler.source !== source) {
				continue;
			}

			// If a handler context is specified then see if it contains the given container, or equals if children were passed in
			if (handler.context && !((isArr && handler.context === container) || jQuery.contains(handler.context, container))) {
				continue;
			}

			handlers.push(handler);
		}

		numHandlers = handlers.length;

		if (numHandlers === 0) {
			return;
		}

		// Only perform descendent search for added/deleted actions, since this
		// doesn't make sense for bound/unbound, which are specific to an element.
		doSearch = action === "added" || action === "deleted";

		i = -1;
		while (++i < numEls) {
			el = isArr ? els[i] : els;

			// Only process elements
			if (el.nodeType === 1) {
				j = 0;
				$el = jQuery(el);

				while (j < numHandlers) {
					handler = handlers[j++];

					// Test root
					if ($el.is(handler.selector)) {
						handler.action.apply(el, [0, el]);
					}

					if (doSearch && el.children.length > 0) {
						// Test children
						$el.find(handler.selector).each(handler.action);
					}
				}
			}
		}
	};

	var interceptingBound = false;
	var interceptingTemplates = false;
	var interceptingWebForms = false;
	var interceptingToggle = false;
	var interceptingContent = false;
	var partialPageLoadOccurred = false;

	function ensureIntercepting() {
		if (!interceptingBound && window.Sys && Sys.Binding && Sys.UI && Sys.UI.TemplateContext) {
			var addBinding = Sys.Binding.prototype._addBinding;
			if (!addBinding) {
				throw new Error("Could not find Binding._addBinding method to override.");
			}
			Sys.Binding.prototype._addBinding = function addBinding$wrap(element) {
				addBinding.apply(this, arguments);
				var ctx = this._templateContext;
				if (ctx._completed && ctx._completed.length > 0) {
					ctx.add_instantiated(function addBinding$contextInstantiated() {
						processElements(element, element, "bound");
					});
				}
				else {
					processElements(element, element, "bound");
				}
			};
			var disposeBindings = Sys.Binding._disposeBindings;
			if (!disposeBindings) {
				throw new Error("Could not find Binding._disposeBindings method to override.");
			}
			Sys.Binding._disposeBindings = function disposeBindings$wrap() {
				disposeBindings.apply(this, arguments);
				processElements(this, this, "unbound");
			};
			interceptingBound = true;
		}

		if (!interceptingTemplates && window.Sys && Sys.UI && Sys.UI.Template) {
			var instantiateInBase = Sys.UI.Template.prototype.instantiateIn;
			if (!instantiateInBase) {
				throw new Error("Could not find Template.instantiateIn method to override.");
			}
			Sys.UI.Template.prototype.instantiateIn = function instantiateIn$wrap() {
				var context = instantiateInBase.apply(this, arguments);
				if (context.nodes.length > 0) {
					processElements(context.containerElement, context.nodes, "added", "template");
				}
				return context;
			};
			// intercept Sys.UI.DataView._clearContainers called conditionally during dispose() and refresh().
			// dispose is too late because the nodes will have been cleared out.
			Sys.UI.DataView.prototype._clearContainers = function _clearContainers$override(placeholders, start, count) {
				var i, len, nodes, startNode, endNode, context;
				for (i = start || 0, len = count ? (start + count) : this._contexts.length; i < len; i++) {
					context = this._contexts[i];
					nodes = context.nodes;
					if (nodes.length > 0) {
						processElements(context.containerElement, nodes, "deleted", "template");
					}
					if (count) {
						if (!startNode) {
							startNode = nodes[0];
						}
						if (nodes.length > 0) {
							endNode = nodes[nodes.length - 1];
						}
					}
				}
				for (i = 0, len = placeholders.length; i < len; i++) {
					var ph = placeholders[i],
						container = ph ? ph.parentNode : this.get_element();
					if (!count || (startNode && endNode)) {
						this._clearContainer(container, ph, startNode, endNode, true);
					}
				}
				for (i = start || 0, len = count ? (start + count) : this._contexts.length; i < len; i++) {
					var ctx = this._contexts[i];
					ctx.nodes = null;
					ctx.dispose();
				}
			};
			Sys.UI.DataView.prototype._clearContainer = function _clearContainer$override(container, placeholder, startNode, endNode, suppressEvent) {
				var count = placeholder ? placeholder.__msajaxphcount : -1;
				if ((count > -1) && placeholder) placeholder.__msajaxphcount = 0;
				if (count < 0) {
					if (placeholder) {
						container.removeChild(placeholder);
					}
					if (!suppressEvent) {
						if (container.childNodes.length > 0) {
							processElements(container, container.childNodes, "deleted", "template");
						}
					}
					if (!startNode) {
						Sys.Application.disposeElement(container, true);
					}
					var cleared = false;
					if (!startNode) {
						try {
							container.innerHTML = "";
							cleared = true;
						}
						catch (err) { }
					}
					if (!cleared) {
						var child = startNode || container.firstChild, nextChild;
						while (child) {
							nextChild = child === endNode ? null : child.nextSibling;
							Sys.Application.disposeElement(child, false);
							container.removeChild(child);
							child = nextChild;
						}
					}
					if (placeholder) {
						container.appendChild(placeholder);
					}
				}
				else if (count > 0) {
					var i, l, start, children = container.childNodes;
					for (i = 0, l = children.length; i < l; i++) {
						if (children[i] === placeholder) {
							break;
						}
					}
					start = i - count;
					for (i = 0; i < count; i++) {
						var element = children[start];
						processElements(element, element, "deleted", "template");
						Sys.Application.disposeElement(element, false);
						container.removeChild(element);
					}
				}
			};
			interceptingTemplates = true;
		}

		if (!interceptingWebForms && window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager) {
			Sys.WebForms.PageRequestManager.getInstance().add_pageLoading(function PageRequestManager$ever_deleted(sender, evt) {
				partialPageLoadOccurred = true;
				var updating = evt.get_panelsUpdating();
				if (updating.length > 0) {
					processElements(null, updating, "deleted", "updatePanel");
				}
			});
			Sys.WebForms.PageRequestManager.getInstance().add_pageLoaded(function PageRequestManager$ever_added(sender, evt) {
				// Only process elements for update panels that were added if we have actually done a partial update.
				// This is needed so that the "ever" handler is not called twice when a panel is added to the page on first page load.
				if (partialPageLoadOccurred) {
					var created = evt.get_panelsCreated();
					if (created.length > 0) {
						processElements(null, created, "added", "updatePanel");
					}
				}

				var updated = evt.get_panelsUpdated();
				if (updated.length > 0) {
					processElements(null, updated, "added", "updatePanel");
				}
			});
			interceptingWebForms = true;
		}

		if (!interceptingToggle && window.ExoWeb && ExoWeb.UI && ExoWeb.UI.Toggle) {
			var undoRender = ExoWeb.UI.Toggle.prototype.undo_render;
			if (!undoRender) {
				throw new Error("Could not find Toggle.undo_render method to override.");
			}
			ExoWeb.UI.Toggle.prototype.undo_render = function Toggle$undo_render$wrap() {
				var children = this._element.children;
				if (children.length > 0) {
					processElements(this._element, children, "deleted", "template");
				}
				undoRender.apply(this, arguments);
			};
			var toggleDispose = ExoWeb.UI.Toggle.prototype.do_dispose;
			if (!toggleDispose) {
				throw new Error("Could not find Toggle.do_dispose method to override.");
			}
			ExoWeb.UI.Toggle.prototype.do_dispose = function Toggle$do_dispose$wrap() {
				var children = this._element.children;
				if (children.length > 0) {
					processElements(this._element, children, "deleted", "template");
				}
				toggleDispose.apply(this, arguments);
			};
			interceptingToggle = true;
		}

		if (!interceptingContent && window.ExoWeb && ExoWeb.UI && ExoWeb.UI.Content) {
			var _render = ExoWeb.UI.Content.prototype._render;
			if (!_render) {
				throw new Error("Could not find Content._render method to override.");
			}
			ExoWeb.UI.Content.prototype._render = function Content$_render$wrap() {
				if (this._element) {
					var children = this._element.children;
					if (children.length > 0) {
						processElements(this._element, children, "deleted", "template");
					}
				}
				_render.apply(this, arguments);
			};
			interceptingContent = true;
		}
	}

	var rootContext = jQuery("body").context;

	var addEverHandler = function addEverHandler(context, selector, type, source, action) {
		var handlers, i, len, handler, existingHandler, existingFn;
		i = 0;
		handlers = everHandlers[type];
		len = handlers.length;
		while (i < len) {
			existingHandler = handlers[i++];
			if (existingHandler.context === context && existingHandler.source === source && existingHandler.selector === selector) {
				handler = existingHandler;
				break;
			}
		}
		if (!handler) {
			handler = { selector: selector, action: action };
			if (context) {
				handler.context = context;
			}
			handlers.push(handler);
		}
		else if (handler.action.add) {
			handler.action.add(action);
		}
		else {
			existingFn = handler.action;
			if (window.ExoWeb) {
				handler.action = ExoWeb.Functor();
				handler.action.add(existingFn);
				handler.action.add(action);
			}
			else {
				handler.action = function () {
					existingFn.apply(this, arguments);
					action.apply(this, arguments);
				};
			}
		}
	};

	// Matches elements as they are dynamically added to the DOM
	jQuery.fn.ever = function jQuery$ever(opts) {

		// The non-selector context that was passed into this jQuery object
		var queryContext,

			// The selector that was specified on the query
			querySelector = this.selector,

			// The jQuery objects that the action may be immediately performed for
			boundImmediate,
			addedImmediate,

			// The options the will be used to add handlers
			options;

		// Optimization: only make a record of the context if it's not the root context
		if (this.context !== rootContext) {
			queryContext = this.context;
		}

		// Handle legacy form
		if (typeof (opts) === "function") {
			addedImmediate = this;
			options = {
				context: queryContext,
				selector: querySelector,
				added: opts,
				deleted: arguments[1]
			};
		}
			// Use options argument directly
		else {
			options = opts;
			// Detect non-supported options
			if (window.ExoWeb) {
				for (var opt in options) {
					if (options.hasOwnProperty(opt) && !/^(selector|source|added|deleted|bound|unbound)$/.test(opt)) {
						logWarning("Unexpected option \"" + opt + "\"");
					}
				}
			}
			// Set the context if it was specified
			if (queryContext) {
				options.context = queryContext;
			}
			// Filter the immediate object if it will be used to invoke immediately (added/bound)
			if (options.added) {
				addedImmediate = this;
				if (options.selector) {
					addedImmediate = addedImmediate.find(options.selector);
				}
			}
			if (options.bound) {
				boundImmediate = this;
				if (options.selector) {
					boundImmediate = boundImmediate.find(options.selector);
				}
				boundImmediate = boundImmediate.filter(":bound");
			}
			// Merge the query selector with the options selector
			if (querySelector) {
				if (options.selector) {
					options.selector = querySelector.replace(/,/g, " " + options.selector + ",") + " " + options.selector;
				}
				else {
					options.selector = querySelector;
				}
			}
			else if (!options.selector) {
				throw new Error("Ever requires a selector");
			}
			if (window.ExoWeb && options.source) {
				if (!(options.added || options.deleted)) {
					logWarning("The source option only applies to added and deleted handlers");
				}
				if (options.source !== "template" && options.source !== "updatePanel") {
					logWarning("Unexpected source \"" + options.source + "\"");
				}
			}
		}

		// Add ever handlers
		if (options.added) {
			if (addedImmediate.length > 0) {
				addedImmediate.each(options.added);
			}
			addEverHandler(options.context, options.selector, "added", options.source, options.added);
		}
		if (options.deleted) {
			addEverHandler(options.context, options.selector, "deleted", options.source, options.deleted);
		}
		if (options.bound) {
			if (boundImmediate.length > 0) {
				boundImmediate.each(options.bound);
			}
			addEverHandler(options.context, options.selector, "bound", options.source, options.bound);
		}
		if (options.unbound) {
			addEverHandler(options.context, options.selector, "unbound", options.source, options.unbound);
		}

		// Ensure that code is being overriden to call ever handlers where appropriate
		ensureIntercepting();

		// Really shouldn't chain calls b/c only elements currently in the DOM would be affected
		return null;
	};

	// #endregion

	// #region ExoWeb.DotNet.WebService
	//////////////////////////////////////////////////

	var webServiceConfig = {
		/*
		 * Specify the application's root URL. Otherwise it is assumed that
		 * the root is the URL up to the first forward slash '/'.
		 */
		appRoot: null,

		/*
		 * If set to true, when requests are sent they will use the text "Save", "Roundtrip", or the
		 * specific method name as an alias for "Request".  If the method name would collide with
		 * another procedure ("GetType" or "LogError"), then "Request" will be used instead.
		 */
		aliasRequests: false
	};

	ExoWeb.DotNet.config = webServiceConfig;

	var path = window.location.pathname;
	var idx = path.lastIndexOf("/");

	if (idx > 0 && idx < path.length - 1) {
		path = path.substring(0, idx + 1);
	}
	else if (idx === 0 && path.length > 1) {
		path += "/";
	}

	var fmt = window.location.port ? "{0}//{1}:{2}" : "{0}//{1}";
	var host = $format(fmt, window.location.protocol, window.location.hostname, window.location.port);

	function getPath() {
		return host + (webServiceConfig.appRoot || path) + "ExoWeb.axd";
	}

	function sendRequest(options) {
		// Include config data in request
		options.data.config = webServiceConfig;

		jQuery.ajax({
			url: getPath() + "/" + options.path,
			type: options.type,
			data: JSON.stringify(options.data),
			processData: false,
			dataType: "text",
			contentType: "application/json",
			success: function(result) {
				options.onSuccess(JSON.parse(result));
			},
			error: function(result) {
				var error = { message: result.statusText };
				try
				{
					error = JSON.parse(result.responseText);
				}
				catch(e) {}
				options.onFailure(error);
			}
		});
	}

	ExoWeb.Mapper.setEventProvider(function (eventType, eventInstance, event, paths, changes, scopeQueries, onSuccess, onFailure) {
		sendRequest({
			type: "Post",
			path: webServiceConfig.aliasRequests && eventType !== "GetType" && eventType !== "LogError" ? eventType : "Request",
			data: {
				events: [{ type: eventType, include: paths, instance: eventInstance, event: event }],
				queries: scopeQueries,
				changes: changes
			},
			onSuccess: onSuccess,
			onFailure: onFailure
		});
	});

	ExoWeb.Mapper.setRoundtripProvider(function (root, paths, changes, scopeQueries, onSuccess, onFailure) {
		var queries = [];

		if (root) {
			queries.push({
				from: root.type,
				ids: [root.id],
				include: paths,
				inScope: true,
				forLoad: true
			});
		}

		queries.addRange(scopeQueries);

		sendRequest({
			type: "Post",
			path: webServiceConfig.aliasRequests ? "Roundtrip" : "Request",
			data: {
				changes: changes,
				queries: queries
			},
			onSuccess: onSuccess,
			onFailure: onFailure
		});
	});

	ExoWeb.Mapper.setObjectProvider(function (type, ids, paths, inScope, changes, scopeQueries, onSuccess, onFailure) {
		sendRequest({
			type: "Post",
			path: webServiceConfig.aliasRequests ? "LoadObject" : "Request",
			data: {
				queries:[{
					from: type,
					ids: ids,
					include: paths,
					inScope: inScope,
					forLoad: true
				}].concat(scopeQueries),
				changes:changes
			},
			onSuccess: onSuccess,
			onFailure: onFailure
		});
	});

	ExoWeb.Mapper.setQueryProvider(function (queries, changes, scopeQueries, onSuccess, onFailure) {
		sendRequest({
			type: "Post",
			path: webServiceConfig.aliasRequests ? "Query" : "Request",
			data: {
				changes: changes,
				queries: queries.concat(scopeQueries)
			},
			onSuccess: onSuccess,
			onFailure: onFailure
		});
	});

	ExoWeb.Mapper.setSaveProvider(function (root, changes, scopeQueries, onSuccess, onFailure) {
		sendRequest({
			type: "Post",
			path: webServiceConfig.aliasRequests ? "Save" : "Request",
			data: {
				events:[{type: "Save", instance: root}],
				queries: scopeQueries,
				changes:changes
			},
			onSuccess: onSuccess,
			onFailure: onFailure
		});
	});

	ExoWeb.Mapper.setListProvider(function (ownerType, ownerId, paths, changes, scopeQueries, onSuccess, onFailure) {
		sendRequest({
			type: "Post",
			path: webServiceConfig.aliasRequests ? "LoadList" : "Request",
			data: {
				queries: [{
					from: ownerType,
					ids: ownerId === null ? [] : [ownerId],
					include: paths,
					inScope: false,
					forLoad: true
				}].concat(scopeQueries),
				changes: changes
			},
			onSuccess: onSuccess,
			onFailure: onFailure
		});
	});

	ExoWeb.Mapper.setTypeProvider(function (types, onSuccess, onFailure) {
		if (types.length === 1) {
			var data = { type: types[0], config: webServiceConfig};

			if (ExoWeb.cacheHash) {
				data.cachehash = ExoWeb.cacheHash;
			}

			Sys.Net.WebServiceProxy.invoke(getPath(), "GetType", true, data, onSuccess, onFailure, null, 1000000, false, null);
		}
		else {
			sendRequest({
				type: "Post",
				path: webServiceConfig.aliasRequests ? "GetTypes" : "Request",
				data: { types: types },
				onSuccess: onSuccess,
				onFailure: onFailure
			});
		}
	});

	var loggingError = false;
	ExoWeb.setLogErrorProvider(function (errorData, onSuccess, onFailure) {
		if (loggingError === false) {
			try {
				loggingError = true;
				Sys.Net.WebServiceProxy.invoke(
					getPath(),
					"LogError",
					false,
					errorData,
					function () {
						if (onSuccess) {
							onSuccess.apply(this, arguments);
						}
					},
					function () {
						// Don't log errors that occur when trying to log an error.
						if (onFailure) {
							onFailure.apply(this, arguments);
						}
					},
					null,
					1000000,
					false,
					null
				);
			} finally {
				loggingError = false;
			}
		}
	});

	// #endregion

	// #region FormatProvider
	//////////////////////////////////////////////////

	setFormatProvider(function FormatProvider(type, format) {

		// Date
		if (type === Date) {
			// Add support for g and G that are not natively supported by the MSAJAX framework
			if (format === "g")
				format = Date._expandFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat, "d") + " " + Date._expandFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat, "t");
			else if (format === "G")
				format = Date._expandFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat, "d") + " " + Date._expandFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat, "T");

			return new Format({
				description: "",
				specifier: format,
				convert: function (val) {
					return val.localeFormat(format);
				},
				convertBack: function (str) {
					var date;
					// Time value, set default date to 1/1/1970 to easily compare time values
					if (format === "t") {
						var timeFormat = Date._expandFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat, "d") + " " + Date._expandFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat, "t");
						var startDate = new Date(1970, 0, 1).localeFormat("d");
						date = Date.parseLocale(startDate + " " + str, timeFormat);
					}
					else
						date = Date.parseLocale(str, format);

					if (date === null)
						throw new Error("Invalid date format");
					return date;
				}
			});
		}

		// Number
		if (type === Number) {
			var isCurrencyFormat = format.match(/[$c]+/i);
			var isPercentageFormat = format.match(/[%p]+/i);
			var isIntegerFormat = format.match(/[dnfg]0/i);
			var currencyDecimalDigits = Sys.CultureInfo.CurrentCulture.numberFormat.CurrencyDecimalDigits;

			return new Format({
				description: isCurrencyFormat ? Resource["format-currency"] : isPercentageFormat ? Resource["format-percentage"] : isIntegerFormat ? Resource["format-integer"] : Resource["format-decimal"],
				specifier: format,
				convert: function (val) {
					// Default to browser formatting for general format
					if (format.toLowerCase() === "g")
						return val.toString();

					// Otherwise, use the localized format
					return val.localeFormat(format);
				},
				convertBack: function (str) {
					// Handle use of () to denote negative numbers
					var sign = 1;
					if (str.match(/^\(.*\)$/)) {
						str = str.substring(1, str.length - 1);
						sign = -1;
					}
					var result;

					// Remove currency symbols before parsing
					if (isCurrencyFormat) {
						result = Number.parseLocale(str.replace(Sys.CultureInfo.CurrentCulture.numberFormat.CurrencySymbol, "")) * sign;

						// if there is a decimal place, check the precision isnt greater than allowed for currency. 
						// Floating points in js can be skewed under certain circumstances, we are just checking the decimals instead of multiplying results.
						var resultStr = result.toString();
						if (resultStr.indexOf('.') > -1 && (resultStr.length - (resultStr.indexOf('.') + 1)) > currencyDecimalDigits) {
							result = NaN;
						}
					}
						// Remove percentage symbols before parsing and divide by 100
					else if (isPercentageFormat)
						result = Number.parseLocale(str.replace(Sys.CultureInfo.CurrentCulture.numberFormat.PercentSymbol, "")) / 100 * sign;

						// Ensure integers are actual whole numbers
					else if (isIntegerFormat && !isInteger(Number.parseLocale(str)))
						result = NaN;

						// Just parse a simple number
					else
						result = Number.parseLocale(str) * sign;

					if (isNaN(result))
						throw new Error("Invalid format");

					return result;
				}
			});
		}

		// Boolean
		if (type === Boolean) {
			// Format strings used for true, false, and null (or undefined) values
			var trueFormat, falseFormat, nullFormat;

			if (format && format.toLowerCase() === "g") {
				trueFormat = "True";
				falseFormat = "False";
				nullFormat = ""
			}
			else {
				var formats = format.split(';');
				trueFormat = formats.length > 0 ? formats[0] : "";
				falseFormat = formats.length > 1 ? formats[1] : "";
				nullFormat = formats.length > 2 ? formats[2] : "";
			}

			return new Format({
				description: "",
				specifier: format,
				convert: function (val) {
					if (val === true)
						return trueFormat;
					else if (val === false)
						return falseFormat;
					else
						return nullFormat;
				},
				convertBack: function (str) {
					if (str.toLowerCase() === trueFormat.toLowerCase())
						return true;
					else if (str.toLowerCase() === falseFormat.toLowerCase())
						return false;
					else
						return null;
				}
			});
		}

		// Default
		return new Format({
			description: "",
			specifier: "",
			convert: function (val) {
				return val.toString();
			},
			convertBack: function (str) {
				return str;
			}
		});

	});

	// #endregion

	// #region ObserverProvider
	//////////////////////////////////////////////////

	function raiseSpecificPropertyChanged(target, args) {
		var func = target.__propertyChangeHandlers[args.get_propertyName()];
		if (func && func instanceof Function) {
			func.apply(this, arguments);
		}
	}

	setObserverProvider({

		makeObservable: Sys.Observer.makeObservable,

		disposeObservable: Sys.Observer.disposeObservable,

		addCollectionChanged: Sys.Observer.addCollectionChanged,

		removeCollectionChanged: Sys.Observer.removeCollectionChanged,

		addPropertyChanged: function Sys$Observer$addPropertyChanged(target, property, handler) {
			if (!target.__propertyChangeHandlers) {
				target.__propertyChangeHandlers = {};
				Sys.Observer.addPropertyChanged(target, raiseSpecificPropertyChanged);
			}

			var func = target.__propertyChangeHandlers[property];

			if (!func) {
				target.__propertyChangeHandlers[property] = func = ExoWeb.Functor();
			}

			func.add(handler);
		},

		removePropertyChanged: function Sys$Observer$removePropertyChanged(target, property, handler) {
			var func = target.__propertyChangeHandlers ? target.__propertyChangeHandlers[property] : null;

			if (func) {
				func.remove(handler);

				// if the functor is empty then remove the callback as an optimization
				if (func.isEmpty()) {
					delete target.__propertyChangeHandlers[property];

					var hasHandlers = false;
					for (var remainingHandler in target.__propertyChangeHandlers) {
						if (target.__propertyChangeHandlers.hasOwnProperty(remainingHandler)) {
							hasHandlers = true;
						}
					}

					if (!hasHandlers) {
						target.__propertyChangeHandlers = null;
						Sys.Observer.removePropertyChanged(target, raiseSpecificPropertyChanged);
					}
				}
			}
		},

		raisePropertyChanged: Sys.Observer.raisePropertyChanged,

		setValue: Sys.Observer.setValue
	});

	ExoWeb.updateArray = function updateArray(array, items) {
		if (array.beginUpdate && array.endUpdate) {
			array.beginUpdate();
		}
		update(array, items);
		if (array.beginUpdate && array.endUpdate) {
			array.endUpdate();
		}
	};

	// #endregion
})(window.ExoJQuery || jQuery);


/***/ }),

/***/ "../../../Public/ExoWeb/ExoWeb/client/ref/aspnetajax/MicrosoftAjax.debug.js":
/*!*******************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Public/ExoWeb/ExoWeb/client/ref/aspnetajax/MicrosoftAjax.debug.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

﻿// Name:        MicrosoftAjax.debug.js
// Assembly:    System.Web.Ajax
// Version:     3.0.31106.1
// FileVersion: 3.0.31106.1


(function(window, Sys) {

var merge = function _merge(target) {
	target = target || {};
	foreach(arguments, function(o) {
		if (o) {
			forIn(o, function(v, n) {
				target[n] = v;
			});
		}
	}, 1);
	return target;
}
var forIn = function _forIn(obj, callback) {
	for (var x in obj) {
		callback(obj[x], x);
	}
}
var foreach = function _foreach(arr, callback, start) {
	var cancelled;
	if (arr) {
		// javascript array
		arr = arr !== window && typeof (arr.nodeType) === "undefined" &&
			(arr instanceof Array ||
		// arguments array, or nodelist (has .item and is not a dom element or window)
			(typeof (arr.length) === 'number' && (typeof (arr.callee) === "function" || (arr.item && typeof (arr.nodeType) === "undefined") && !arr.addEventListener && !arr.attachEvent)))
			? arr : [arr];
		for (var i = start||0, l = arr.length; i < l; i++) {
			if (callback(arr[i], i)) {
				cancelled = true;
				break;
			}
		}
	}
	return !cancelled;
}
var callIf = function _callIf(obj, name, args) {
	var fn = obj[name],
		exists = typeof(fn) === "function";
	if (exists) fn.call(obj, args);
	return exists;
}

if (!Sys || !Sys.loader) {
	function append(target) {
		target = target || {};
		foreach(arguments, function(o) {
			if (o) {
				forIn(o, function(v, n) {
					if (typeof(target[n]) === "undefined") target[n] = v;
				});
			}
		}, 1);
		return target;
	}

	var notLoading = 0,
		loading = 1,
		loadingCo = 2,
		loaded = 3,
		attachEvent = !!document.attachEvent;
	function getAndDelete(obj, field) {
		var r = obj[field];
		delete obj[field];
		return r;
	}
	function foreachCall(obj, field, args) {
		foreach(getAndDelete(obj, field), function(callback) {
			callback.apply(null, args||[]);
		});
	}
	function lazyget(obj, name, value) {
		return obj ? (obj[name] = obj[name] || value) : value;
	}
	function lazypush(obj, name, value) {
		lazyget(obj, name, []).push(value);
	}
	function lazyset(obj, name, key, value) {
		lazyget(obj, name, {})[key] = value;
	}
	function all(tag, element) {
		return (element||document).getElementsByTagName(tag);
	}
	function createElement(tag) {
		return document.createElement(tag);
	}
	function listenOnce(target, name, ieName, callback, isReadyState, isScript) {
		function onEvent() {
			if (!attachEvent || !isReadyState || /loaded|complete/.test(target.readyState)) {
				if (attachEvent) {
					target.detachEvent(ieName || ("on" + name), onEvent);
				}
				else {
					target.removeEventListener(name, onEvent, false);
					if (isScript) {
						target.removeEventListener("error", onEvent, false);
					}
				}
				callback.apply(target);
				target = null;
			}
		}
		if (attachEvent) {
			target.attachEvent(ieName || ("on" + name), onEvent);
		}
		else {
			target.addEventListener(name, onEvent, false);
			if (isScript) {
				target.addEventListener("error", onEvent, false);
			}
		}
	}
	function raiseDomReady() {
		if (Sys._domReady) {
			Sys._2Pass(getAndDelete(Sys, "_domReadyQueue"));
		}
	}
	function raiseOnReady() {
		var ready = Sys._ready;
		if (!ready && Sys._domReady && !(Sys.loader && Sys.loader._loading)) {
			Sys._ready = ready = true;
		}
		if (ready) {
			Sys._2Pass(getAndDelete(Sys, "_readyQueue"));
		}
	}
	window.Sys = Sys = append(Sys, {
		version: [3, 0, 31106, 1],
		__class: true,
		debug: true,
		scripts: {},
		activateDom: true,
		composites: {},
		components: {},
		plugins: {},
		create: {},
		converters: {},
		_domLoaded: function _domLoaded() {
			function domReady() {
				if (!Sys._domReady) {
					Sys._domReady = true;
					raiseDomReady();
					raiseOnReady();
				}
			}
			listenOnce(window, "load", null, domReady);

			var check;
			if (attachEvent) {
				if ((window == window.top) && document.documentElement.doScroll) {
					var timeout, er, el = createElement("div");
					check = function() {
						try {
							el.doScroll("left");
						}
						catch (er) {
							timeout = window.setTimeout(check, 0);
							return;
						}
						el = null;
						domReady();
					}
					check();
				}
				else {
					listenOnce(document, null, "onreadystatechange", domReady, true);
				}
			}
			else if (document.addEventListener) {
				listenOnce(document, "DOMContentLoaded", null, domReady);
			}
		},
		_getById: function _getById(found, id, single, includeSelf, element) {
			if (element) {
				if (includeSelf && (element.id === id)) {
					found[0] = element;
				}
				else {
					foreach(all("*", element), function(element) {
						if (element.id === id) {
							found[0] = element;
							return true;
						}
					});
				}
			}
			else {
				var e = document.getElementById(id);
				if (e) found[0] = e;
			}
			return found.length;
		},
		_getByClass: function _getByClass(found, targetClass, single, includeSelf, element) {
			function pushIfMatch(element) {
				var ret, className = element.className;
				if (className && ((className === targetClass) || (className.indexOf(' ' + targetClass) >= 0) || (className.indexOf(targetClass + ' ') >= 0))) {
					found.push(element);
					ret = true;
				}
				return ret;
			}
			var i, l, nodes;
			if (includeSelf && pushIfMatch(element) && single) {
				return true;
			}
			element = element || document;
			var finder = element.querySelectorAll || element.getElementsByClassName;
			if (finder) {
				if (element.querySelectorAll) targetClass = "." + targetClass;
				nodes = finder.call(element, targetClass);
				for (i = 0, l = nodes.length; i < l; i++) {
					found.push(nodes[i]);
					if (single) return true;
				}
			}
			else {
				nodes = all("*", element);
				for (i = 0, l = nodes.length; i < l; i++) {
					if (pushIfMatch(nodes[i]) && single) {
						return true;
					}
				}
			}
		},
		query: function query(selector, context) {
			/// <summary locid="M:J#query" />
			/// <param name="selector"></param>
			/// <param name="context" optional="true" mayBeNull="true"></param>
			/// <returns type="Array"></returns>
			return (context && typeof(context.query) === "function") ?
				context.query(selector) :
				this._find(selector, context);
		},
		get: function get(selector, context) {
			/// <summary locid="M:J#get" />
			/// <param name="selector"></param>
			/// <param name="context" optional="true" mayBeNull="true"></param>
			/// <returns></returns>
			return (context && typeof(context.get) === "function") ?
				context.get(selector) :
				this._find(selector, context, true);
		},
		_find: function _find(selector, context, single) {
			var found = [];
			if (typeof(selector) !== "string") {
				found.push(selector);
			}
			else {
				var includeSelf = context instanceof Array,
					match = /^([\$#\.])((\w|[$:\.\-])+)$/.exec(selector);
				if (match && match.length === 4) {
					selector = match[2];
					var type = match[1];
					if (type === "$") {
						Sys._getComponent(found, selector, context);
					}
					else {
						var finder = type === "#" ? Sys._getById : Sys._getByClass;
						if (context) {
							foreach(context, function(node) {
								if (node.nodeType === 1) {
									return finder(found, selector, single, includeSelf, node);
								}
							});
						}
						else {
							finder(found, selector, single);
						}
					}
				}
				else if (/^\w+$/.test(selector)) {
					if (includeSelf) {
						foreach(context, function(node) {
							if (node.nodeType === 1) {
								if (node.tagName.toLowerCase() === selector) {
									found.push(node);
									if (single) return true;
								}
								if(!foreach(all(selector, node), function(node) {
									found.push(node);
									if (single) return true;
								})) {
									return true;
								}
							}
						});
					}
					else {
						var nodes = all(selector, context);
						if (single) {
							return (nodes[0] || null);
						}
						foreach(nodes, function(node) {
							found.push(node);
						});
					}
				}
				else if (window.jQuery) {
					found = jQuery(selector).get();
				}
			}
			return found.length ? (single ? found[0] : found) : null;
		},
		onDomReady: function onDomReady(callback) {
			/// <summary locid="M:J#onDomReady" />
			/// <param name="callback" type="Function"></param>
			lazypush(this, "_domReadyQueue", callback);
			raiseDomReady();
		},
		onReady: function onReady(callback) {
			/// <summary locid="M:J#onReady" />
			/// <param name="callback" type="Function"></param>
			lazypush(this, "_readyQueue", callback);
			raiseOnReady();
		}
				/// <summary locid="M:J#registerScript" />
				/// <param name="name" type="String"></param>
				/// <param name="executionDependencies" mayBeNull="true" type="Array" elementType="String"></param>
				/// <param name="executionCallback" type="Function"></param>
	});
	Sys._getComponent = Sys._getComponent || function() { }
	Sys._2Pass = Sys._2Pass || function _2Pass(callback) {
	   foreach(callback, function(c) { c(); });
	}

Sys._domLoaded();
}

function execute() {

Sys._foreach = foreach;
Sys._forIn = forIn;
Sys._merge = merge;
Sys._callIf = callIf;

Function.__typeName = 'Function';
Function.__class = true;

Function.createCallback = function Function$createCallback(method, context) {
	/// <summary locid="M:J#Function.createCallback" />
	/// <param name="method" type="Function"></param>
	/// <param name="context" mayBeNull="true"></param>
	/// <returns type="Function"></returns>



	return function() {
		var l = arguments.length;
		if (l > 0) {
			var args = [];
			for (var i = 0; i < l; i++) {
				args[i] = arguments[i];
			}
			args[l] = context;
			return method.apply(this, args);
		}
		return method.call(this, context);
	}
}

Function.createDelegate = function Function$createDelegate(instance, method) {
	/// <summary locid="M:J#Function.createDelegate" />
	/// <param name="instance" mayBeNull="true"></param>
	/// <param name="method" type="Function"></param>
	/// <returns type="Function"></returns>



	return function() {
		return method.apply(instance, arguments);
	}
}

Function.emptyFunction = Function.emptyMethod = function Function$emptyMethod() {
	/// <summary locid="M:J#Function.emptyMethod" />
}

Function.validateParameters = function Function$validateParameters(parameters, expectedParameters, validateParameterCount) {
	/// <summary locid="M:J#Function.validateParameters" />
	/// <param name="parameters"></param>
	/// <param name="expectedParameters"></param>
	/// <param name="validateParameterCount" type="Boolean" optional="true" mayBeNull="true"></param>
	/// <returns type="Error" mayBeNull="true"></returns>

	return Function._validateParams(parameters, expectedParameters, validateParameterCount);
}

Function._validateParams = function Function$_validateParams(params, expectedParams, validateParameterCount) {
	var e, expectedLength = expectedParams.length;
	validateParameterCount = validateParameterCount !== false;
	e = Function._validateParameterCount(params, expectedParams, validateParameterCount);
	if (e) {
		e.popStackFrame();
		return e;
	}
	for (var i = 0, l = params.length; i < l; i++) {
		var expectedParam = expectedParams[Math.min(i, expectedLength - 1)],
			paramName = expectedParam.name;
		if (expectedParam.parameterArray) {
			paramName += "[" + (i - expectedLength + 1) + "]";
		}
		else if (!validateParameterCount && (i >= expectedLength)) {
			break;
		}
		e = Function._validateParameter(params[i], expectedParam, paramName);
		if (e) {
			e.popStackFrame();
			return e;
		}
	}
	return null;
}

Function._validateParameterCount = function Function$_validateParameterCount(params, expectedParams, validateParameterCount) {
	var i, error,
		expectedLen = expectedParams.length,
		actualLen = params.length;
	if (actualLen < expectedLen) {
		var minParams = expectedLen;
		for (i = 0; i < expectedLen; i++) {
			var param = expectedParams[i];
			if (param.optional || param.parameterArray) {
				minParams--;
			}
		}
		if (actualLen < minParams) {
			error = true;
		}
	}
	else if (validateParameterCount && (actualLen > expectedLen)) {
		error = true;
		for (i = 0; i < expectedLen; i++) {
			if (expectedParams[i].parameterArray) {
				error = false;
				break;
			}
		}
	}

	if (error) {
		var e = Error.parameterCount();
		e.popStackFrame();
		return e;
	}

	return null;
}

Function._validateParameter = function Function$_validateParameter(param, expectedParam, paramName) {
	var e,
		expectedType = expectedParam.type,
		expectedInteger = !!expectedParam.integer,
		expectedDomElement = !!expectedParam.domElement,
		mayBeNull = !!expectedParam.mayBeNull;

	e = Function._validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName);
	if (e) {
		e.popStackFrame();
		return e;
	}

	var expectedElementType = expectedParam.elementType,
		elementMayBeNull = !!expectedParam.elementMayBeNull;
	if (expectedType === Array && typeof(param) !== "undefined" && param !== null &&
		(expectedElementType || !elementMayBeNull)) {
		var expectedElementInteger = !!expectedParam.elementInteger,
			expectedElementDomElement = !!expectedParam.elementDomElement;
		for (var i=0; i < param.length; i++) {
			var elem = param[i];
			e = Function._validateParameterType(elem, expectedElementType,
				expectedElementInteger, expectedElementDomElement, elementMayBeNull,
				paramName + "[" + i + "]");
			if (e) {
				e.popStackFrame();
				return e;
			}
		}
	}

	return null;
}

Function._validateParameterType = function Function$_validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName) {
	var e, i;

	if (typeof(param) === "undefined") {
		if (mayBeNull) {
			return null;
		}
		else {
			e = Error.argumentUndefined(paramName);
			e.popStackFrame();
			return e;
		}
	}

	if (param === null) {
		if (mayBeNull) {
			return null;
		}
		else {
			e = Error.argumentNull(paramName);
			e.popStackFrame();
			return e;
		}
	}

	if (expectedType && expectedType.__enum) {
		if (typeof(param) !== 'number') {
			e = Error.argumentType(paramName, Object.getType(param), expectedType);
			e.popStackFrame();
			return e;
		}
		if ((param % 1) === 0) {
			var values = expectedType.prototype;
			if (!expectedType.__flags || (param === 0)) {
				for (i in values) {
					if (values[i] === param) return null;
				}
			}
			else {
				var v = param;
				for (i in values) {
					var vali = values[i];
					if (vali === 0) continue;
					if ((vali & param) === vali) {
						v -= vali;
					}
					if (v === 0) return null;
				}
			}
		}
		e = Error.argumentOutOfRange(paramName, param, String.format(Sys.Res.enumInvalidValue, param, expectedType.getName()));
		e.popStackFrame();
		return e;
	}

	if (expectedDomElement && (!Sys._isDomElement(param) || (param.nodeType === 3))) {
		e = Error.argument(paramName, Sys.Res.argumentDomElement);
		e.popStackFrame();
		return e;
	}

	if (expectedType && !Sys._isInstanceOfType(expectedType, param)) {
		e = Error.argumentType(paramName, Object.getType(param), expectedType);
		e.popStackFrame();
		return e;
	}

	if (expectedType === Number && expectedInteger) {
		if ((param % 1) !== 0) {
			e = Error.argumentOutOfRange(paramName, param, Sys.Res.argumentInteger);
			e.popStackFrame();
			return e;
		}
	}

	return null;
}
Error.__typeName = 'Error';
Error.__class = true;

Error.create = function Error$create(message, errorInfo) {
	/// <summary locid="M:J#Error.create" />
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <param name="errorInfo" optional="true" mayBeNull="true"></param>
	/// <returns type="Error"></returns>


	var err = new Error(message);
	err.message = message;

	if (errorInfo) {
		for (var v in errorInfo) {
			err[v] = errorInfo[v];
		}
	}

	err.popStackFrame();
	return err;
}







Error.argument = function Error$argument(paramName, message) {
	/// <summary locid="M:J#Error.argument" />
	/// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>


	var displayMessage = "Sys.ArgumentException: " + (message ? message : Sys.Res.argument);
	if (paramName) {
		displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
	}

	var err = Error.create(displayMessage, { name: "Sys.ArgumentException", paramName: paramName });
	err.popStackFrame();
	return err;
}

Error.argumentNull = function Error$argumentNull(paramName, message) {
	/// <summary locid="M:J#Error.argumentNull" />
	/// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>


	var displayMessage = "Sys.ArgumentNullException: " + (message ? message : Sys.Res.argumentNull);
	if (paramName) {
		displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
	}

	var err = Error.create(displayMessage, { name: "Sys.ArgumentNullException", paramName: paramName });
	err.popStackFrame();
	return err;
}

Error.argumentOutOfRange = function Error$argumentOutOfRange(paramName, actualValue, message) {
	/// <summary locid="M:J#Error.argumentOutOfRange" />
	/// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
	/// <param name="actualValue" optional="true" mayBeNull="true"></param>
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>


	var displayMessage = "Sys.ArgumentOutOfRangeException: " + (message ? message : Sys.Res.argumentOutOfRange);
	if (paramName) {
		displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
	}

	if (typeof(actualValue) !== "undefined" && actualValue !== null) {
		displayMessage += "\n" + String.format(Sys.Res.actualValue, actualValue);
	}

	var err = Error.create(displayMessage, {
		name: "Sys.ArgumentOutOfRangeException",
		paramName: paramName,
		actualValue: actualValue
	});
	err.popStackFrame();
	return err;
}

Error.argumentType = function Error$argumentType(paramName, actualType, expectedType, message) {
	/// <summary locid="M:J#Error.argumentType" />
	/// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
	/// <param name="actualType" type="Type" optional="true" mayBeNull="true"></param>
	/// <param name="expectedType" type="Type" optional="true" mayBeNull="true"></param>
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>


	var displayMessage = "Sys.ArgumentTypeException: ";
	if (message) {
		displayMessage += message;
	}
	else if (actualType && expectedType) {
		displayMessage +=
			String.format(Sys.Res.argumentTypeWithTypes, actualType.getName(), expectedType.getName());
	}
	else {
		displayMessage += Sys.Res.argumentType;
	}

	if (paramName) {
		displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
	}

	var err = Error.create(displayMessage, {
		name: "Sys.ArgumentTypeException",
		paramName: paramName,
		actualType: actualType,
		expectedType: expectedType
	});
	err.popStackFrame();
	return err;
}

Error.argumentUndefined = function Error$argumentUndefined(paramName, message) {
	/// <summary locid="M:J#Error.argumentUndefined" />
	/// <param name="paramName" type="String" optional="true" mayBeNull="true"></param>
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>


	var displayMessage = "Sys.ArgumentUndefinedException: " + (message ? message : Sys.Res.argumentUndefined);
	if (paramName) {
		displayMessage += "\n" + String.format(Sys.Res.paramName, paramName);
	}

	var err = Error.create(displayMessage, { name: "Sys.ArgumentUndefinedException", paramName: paramName });
	err.popStackFrame();
	return err;
}

Error.format = function Error$format(message) {
	/// <summary locid="M:J#Error.format" />
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>

	var displayMessage = "Sys.FormatException: " + (message ? message : Sys.Res.format);
	var err = Error.create(displayMessage, {name: 'Sys.FormatException'});
	err.popStackFrame();
	return err;
}

Error.invalidOperation = function Error$invalidOperation(message) {
	/// <summary locid="M:J#Error.invalidOperation" />
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>

	var displayMessage = "Sys.InvalidOperationException: " + (message ? message : Sys.Res.invalidOperation);

	var err = Error.create(displayMessage, {name: 'Sys.InvalidOperationException'});
	err.popStackFrame();
	return err;
}

Error.notImplemented = function Error$notImplemented(message) {
	/// <summary locid="M:J#Error.notImplemented" />
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>

	var displayMessage = "Sys.NotImplementedException: " + (message ? message : Sys.Res.notImplemented);

	var err = Error.create(displayMessage, {name: 'Sys.NotImplementedException'});
	err.popStackFrame();
	return err;
}

Error.parameterCount = function Error$parameterCount(message) {
	/// <summary locid="M:J#Error.parameterCount" />
	/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
	/// <returns></returns>


	var displayMessage = "Sys.ParameterCountException: " + (message ? message : Sys.Res.parameterCount);
	var err = Error.create(displayMessage, {name: 'Sys.ParameterCountException'});
	err.popStackFrame();
	return err;
}

Error.prototype.popStackFrame = function Error$popStackFrame() {
	/// <summary locid="M:J#checkParam" />
	if (arguments.length !== 0) throw Error.parameterCount();


	if (typeof(this.stack) === "undefined" || this.stack === null ||
		typeof(this.fileName) === "undefined" || this.fileName === null ||
		typeof(this.lineNumber) === "undefined" || this.lineNumber === null) {
		return;
	}

	var stackFrames = this.stack.split("\n");

	var currentFrame = stackFrames[0];
	var pattern = this.fileName + ":" + this.lineNumber;
	while(typeof(currentFrame) !== "undefined" &&
		  currentFrame !== null &&
		  currentFrame.indexOf(pattern) === -1) {
		stackFrames.shift();
		currentFrame = stackFrames[0];
	}

	var nextFrame = stackFrames[1];

	if (typeof(nextFrame) === "undefined" || nextFrame === null) {
		return;
	}

	var nextFrameParts = nextFrame.match(/@(.*):(\d+)$/);
	if (typeof(nextFrameParts) === "undefined" || nextFrameParts === null) {
		return;
	}

	this.fileName = nextFrameParts[1];

	this.lineNumber = parseInt(nextFrameParts[2]);

	stackFrames.shift();
	this.stack = stackFrames.join("\n");
}
Object.__typeName = 'Object';
Object.__class = true;

Object.getType = function Object$getType(instance) {
	/// <summary locid="M:J#Object.getType" />
	/// <param name="instance"></param>
	/// <returns type="Type"></returns>

	var ctor = instance.constructor;
	if (!ctor || (typeof(ctor) !== "function") || !ctor.__typeName || (ctor.__typeName === 'Object')) {
		return Object;
	}
	return ctor;
}

Object.getTypeName = function Object$getTypeName(instance) {
	/// <summary locid="M:J#Object.getTypeName" />
	/// <param name="instance"></param>
	/// <returns type="String"></returns>

	return Object.getType(instance).getName();
}
String.__typeName = 'String';
String.__class = true;

String.prototype.endsWith = function String$endsWith(searchStr, position) {
	/// <summary locid="M:J#String.endsWith" />
	/// <param name="searchStr" type="String"></param>
	/// <param name="position" type="Number"></param>
	/// <returns type="Boolean"></returns>

	// Based on https://vanillajstoolkit.com/polyfills/stringendswith/
	// This works much better than >= because
	// it compensates for NaN:
	if (!(position < this.length)) {
		position = this.length;
	} else {
		position |= 0; // round position
	}
	return this.substr(position - searchStr.length, searchStr.length) === searchStr;
}

String.prototype.startsWith = function String$startsWith(prefix, position) {
	/// <summary locid="M:J#String.startsWith" />
	/// <param name="prefix" type="String"></param>
	/// <param name="position" type="String"></param>
	/// <returns type="Boolean"></returns>

	// Based on https://vanillajstoolkit.com/polyfills/stringstartswith/
	return (this.substr(position || 0, prefix.length) === prefix);
}

String.prototype.trim = function String$trim() {
	/// <summary locid="M:J#String.trim" />
	/// <returns type="String"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	return this.replace(/^\s+|\s+$/g, '');
}

String.prototype.trimEnd = function String$trimEnd() {
	/// <summary locid="M:J#String.trimEnd" />
	/// <returns type="String"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	return this.replace(/\s+$/, '');
}

String.prototype.trimStart = function String$trimStart() {
	/// <summary locid="M:J#String.trimStart" />
	/// <returns type="String"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	return this.replace(/^\s+/, '');
}

String.format = function String$format(format, args) {
	/// <summary locid="M:J#String.format" />
	/// <param name="format" type="String"></param>
	/// <param name="args" parameterArray="true" mayBeNull="true"></param>
	/// <returns type="String"></returns>

	return String._toFormattedString(false, arguments);
}

String._toFormattedString = function String$_toFormattedString(useLocale, args) {
	var result = '';
	var format = args[0];

	for (var i=0;;) {
		var open = format.indexOf('{', i);
		var close = format.indexOf('}', i);
		if ((open < 0) && (close < 0)) {
			result += format.slice(i);
			break;
		}
		if ((close > 0) && ((close < open) || (open < 0))) {
			if (format.charAt(close + 1) !== '}') {
				throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
			}
			result += format.slice(i, close + 1);
			i = close + 2;
			continue;
		}

		result += format.slice(i, open);
		i = open + 1;

		if (format.charAt(i) === '{') {
			result += '{';
			i++;
			continue;
		}

		if (close < 0) throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);


		var brace = format.substring(i, close);
		var colonIndex = brace.indexOf(':');
		var argNumber = parseInt((colonIndex < 0)? brace : brace.substring(0, colonIndex), 10) + 1;
		if (isNaN(argNumber)) throw Error.argument('format', Sys.Res.stringFormatInvalid);
		var argFormat = (colonIndex < 0)? '' : brace.substring(colonIndex + 1);

		var arg = args[argNumber];
		if (typeof(arg) === "undefined" || arg === null) {
			arg = '';
		}

		if (arg.toFormattedString) {
			result += arg.toFormattedString(argFormat);
		}
		else if (useLocale && arg.localeFormat) {
			result += arg.localeFormat(argFormat);
		}
		else if (arg.format) {
			result += arg.format(argFormat);
		}
		else
			result += arg.toString();

		i = close + 1;
	}

	return result;
}
Boolean.__typeName = 'Boolean';
Boolean.__class = true;

Boolean.parse = function Boolean$parse(value) {
	/// <summary locid="M:J#Boolean.parse" />
	/// <param name="value" type="String"></param>
	/// <returns type="Boolean"></returns>

	var v = value.trim().toLowerCase();
	if (v === 'false') return false;
	if (v === 'true') return true;
	throw Error.argumentOutOfRange('value', value, Sys.Res.boolTrueOrFalse);
}
Date.__typeName = 'Date';
Date.__class = true;
Number.__typeName = 'Number';
Number.__class = true;
RegExp.__typeName = 'RegExp';
RegExp.__class = true;

//if (!window) this.window = this;


window.Type = Function;








Type.__fullyQualifiedIdentifierRegExp = new RegExp("^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]([^ \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*[^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\])?$", "i");
Type.__identifierRegExp = new RegExp("^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\][^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*$", "i");

Type.prototype.callBaseMethod = function Type$callBaseMethod(instance, name, baseArguments) {
	/// <summary locid="M:J#Type.callBaseMethod" />
	/// <param name="instance"></param>
	/// <param name="name" type="String"></param>
	/// <param name="baseArguments" type="Array" optional="true" mayBeNull="true" elementMayBeNull="true"></param>
	/// <returns></returns>

	var baseMethod = Sys._getBaseMethod(this, instance, name);
	if (!baseMethod) throw Error.invalidOperation(String.format(Sys.Res.methodNotFound, name));
	if (!baseArguments) {
		return baseMethod.apply(instance);
	}
	else {
		return baseMethod.apply(instance, baseArguments);
	}
}

Type.prototype.getBaseMethod = function Type$getBaseMethod(instance, name) {
	/// <summary locid="M:J#Type.getBaseMethod" />
	/// <param name="instance"></param>
	/// <param name="name" type="String"></param>
	/// <returns type="Function" mayBeNull="true"></returns>

	return Sys._getBaseMethod(this, instance, name);
}

Type.prototype.getBaseType = function Type$getBaseType() {
	/// <summary locid="M:J#Type.getBaseType" />
	/// <returns type="Type" mayBeNull="true"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	return (typeof(this.__baseType) === "undefined") ? null : this.__baseType;
}

Type.prototype.getInterfaces = function Type$getInterfaces() {
	/// <summary locid="M:J#Type.getInterfaces" />
	/// <returns type="Array" elementType="Type" mayBeNull="false" elementMayBeNull="false"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	var result = [];
	var type = this;
	while(type) {
		var interfaces = type.__interfaces;
		if (interfaces) {
			for (var i = 0, l = interfaces.length; i < l; i++) {
				var interfaceType = interfaces[i];
				if (!Array.contains(result, interfaceType)) {
					result[result.length] = interfaceType;
				}
			}
		}
		type = type.__baseType;
	}
	return result;
}

Type.prototype.getName = function Type$getName() {
	/// <summary locid="M:J#Type.getName" />
	/// <returns type="String"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	return (typeof(this.__typeName) === "undefined") ? "" : this.__typeName;
}

Type.prototype.implementsInterface = function Type$implementsInterface(interfaceType) {
	/// <summary locid="M:J#Type.implementsInterface" />
	/// <param name="interfaceType" type="Type"></param>
	/// <returns type="Boolean"></returns>

	this.resolveInheritance();

	var interfaceName = interfaceType.getName();
	var cache = this.__interfaceCache;
	if (cache) {
		var cacheEntry = cache[interfaceName];
		if (typeof(cacheEntry) !== 'undefined') return cacheEntry;
	}
	else {
		cache = this.__interfaceCache = {};
	}

	var baseType = this;
	while (baseType) {
		var interfaces = baseType.__interfaces;
		if (interfaces) {
			if (Array.indexOf(interfaces, interfaceType) !== -1) {
				return cache[interfaceName] = true;
			}
		}

		baseType = baseType.__baseType;
	}

	return cache[interfaceName] = false;
}

Type.prototype.inheritsFrom = function Type$inheritsFrom(parentType) {
	/// <summary locid="M:J#Type.inheritsFrom" />
	/// <param name="parentType" type="Type"></param>
	/// <returns type="Boolean"></returns>

	this.resolveInheritance();
	return Sys._inheritsFrom(this, parentType);
}

Sys._inheritsFrom = function Sys$_inheritsFrom(type, parentType) {
	var ret;
	if (parentType) {
		var baseType = type.__baseType;
		while (baseType) {
			if (baseType === parentType) {
				ret = true;
				break;
			}
			baseType = baseType.__baseType;
		}
	}
	return !!ret;
}

Type.prototype.initializeBase = function Type$initializeBase(instance, baseArguments) {
	/// <summary locid="M:J#Type.initializeBase" />
	/// <param name="instance"></param>
	/// <param name="baseArguments" type="Array" optional="true" mayBeNull="true" elementMayBeNull="true"></param>
	/// <returns></returns>

	if (!Sys._isInstanceOfType(this, instance)) throw Error.argumentType('instance', Object.getType(instance), this);

	this.resolveInheritance();
	if (this.__baseType) {
		if (!baseArguments) {
			this.__baseType.apply(instance);
		}
		else {
			this.__baseType.apply(instance, baseArguments);
		}
	}

	return instance;
}

Type.prototype.isImplementedBy = function Type$isImplementedBy(instance) {
	/// <summary locid="M:J#Type.isImplementedBy" />
	/// <param name="instance" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	if (typeof(instance) === "undefined" || instance === null) return false;

	var instanceType = Object.getType(instance);
	return !!(instanceType.implementsInterface && instanceType.implementsInterface(this));
}

Type.prototype.isInstanceOfType = function Type$isInstanceOfType(instance) {
	/// <summary locid="M:J#Type.isInstanceOfType" />
	/// <param name="instance" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	return Sys._isInstanceOfType(this, instance);
}

Type.prototype.registerClass = function Type$registerClass(typeName, baseType, interfaceTypes) {
	/// <summary locid="M:J#Type.registerClass" />
	/// <param name="typeName" type="String"></param>
	/// <param name="baseType" type="Type" optional="true" mayBeNull="true"></param>
	/// <param name="interfaceTypes" parameterArray="true" type="Type"></param>
	/// <returns type="Type"></returns>

	if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
	var parsedName;
	try {
		parsedName = window.eval(typeName);
	}
	catch(e) {
		throw Error.argument('typeName', Sys.Res.argumentTypeName);
	}
	if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
	if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));

	if ((arguments.length > 1) && (typeof(baseType) === 'undefined')) throw Error.argumentUndefined('baseType');

	this.prototype.constructor = this;
	this.__typeName = typeName;
	this.__class = true;
	if (baseType) {
		this.__baseType = baseType;
		this.__basePrototypePending = true;
	}
	Sys.__upperCaseTypes[typeName.toUpperCase()] = this;

	if (interfaceTypes) {
		this.__interfaces = [];
		this.resolveInheritance();
		for (var i = 2, l = arguments.length; i < l; i++) {
			var interfaceType = arguments[i];
			if (!interfaceType.__interface) throw Error.argument('interfaceTypes[' + (i - 2) + ']', Sys.Res.notAnInterface);
			for (var methodName in interfaceType.prototype) {
				var method = interfaceType.prototype[methodName];
				if (!this.prototype[methodName]) {
					this.prototype[methodName] = method;
				}
			}
			this.__interfaces.push(interfaceType);
		}
	}
	Sys.__registeredTypes[typeName] = true;
	return this;
}

Sys.registerComponent = function Sys$registerComponent(type, options) {
	/// <summary locid="M:J#Sys.registerComponent" />
	/// <param name="type" type="Function"></param>
	/// <param name="options" type="Object" optional="true" mayBeNull="true"></param>

	var typeName = type.getName();
	var isControlOrBehavior = Sys.UI && (Sys._inheritsFrom(type, Sys.UI.Control) || Sys._inheritsFrom(type, Sys.UI.Behavior));
	var name = (options && options.name);
	if (!name) {
		name = typeName;
		var i = name.lastIndexOf('.');
		if (i >= 0) {
			name = name.substr(i+1);
			if (name && name.charAt(0) === "_") return;
		}
		name = name.substr(0, 1).toLowerCase() + name.substr(1);
	}
	if (!options) {
		options = {};
	}
	options.name = name;
	options.type = type;
	options.typeName = typeName;
	options._isBehavior = isControlOrBehavior;
	Sys.components[name] = merge(Sys.components[name], options);
	var fn = Sys.create[name],
		defaults = fn && fn.defaults;
	Sys.create[name] = fn = Sys._getCreate(type, isControlOrBehavior, options);
	fn.defaults = defaults || null;
	fn._component = options;
	if (window.jQuery) {
		var jTarget = isControlOrBehavior ? jQuery.fn : jQuery;
		if (!jTarget.hasOwnProperty(name)) {
			fn = jTarget[name];
			defaults = fn && fn.defaults;
			jTarget[name] = fn = Sys._getCreate(type, isControlOrBehavior, options, true);
			fn.defaults = defaults || null;
			fn._component = options;
		}
	}
}

Sys._getCreate = function _getCreate(type, isControlOrBehavior, options, isjQuery) {
	var typeName = type.getName(),
		body = [],
		arglist = [],
		description = (options && options.description) || "Creates an instance of the type '" + typeName  + "' and sets the given properties.";
	body.push("/// <summary>", description, "</summary>\n");
	if (isControlOrBehavior && !isjQuery) {
		arglist.push("target");
		body.push('/// <param name="target">The DOM element to attach to, as a DOM element or selector.</param>\n');
	}
	foreach(options && options.parameters, function(parameter) {
		var name = parameter, type = '', desc = '';
		if (typeof(parameter) !== "string") {
			name = parameter.name;
			type = parameter.type||'';
			desc = parameter.description||'';
		}
		arglist.push(name);
		body.push('/// <param name="', name, '" type="', type, '">', desc, '</param>\n');
	});
	arglist.push("properties");
	body.push('/// <param name="properties" type="Object" mayBeNull="true" optional="true">Additional properties to set on the component.</param>\n');
	if (!isjQuery) {
		body.push('/// <returns type="', typeName, '"></returns>\n',
				  'return Sys._createComp(arguments.callee._component, arguments.callee.defaults, arguments);');
	}
	else {
		body.push("var callee = arguments.callee, component = callee._component, defaults = callee.defaults, args = Array.prototype.slice.call(arguments, 0);\nargs.splice(0, 0, null);\nreturn this.each(function() {\n",
				  "    args[0] = this;\n    Sys._createComp(component, defaults, args)\n",
				  "});");
	}
	arglist.push(body.join(''));
	return Function.apply(null, arglist);
}

Sys.registerPlugin = function Sys$registerPlugin(pluginInfo) {
	/// <summary locid="M:J#Sys.registerPlugin" />
	/// <param name="pluginInfo" type="Object"></param>

	var name = pluginInfo.name;
	Sys.plugins[name] = merge(Sys.plugins[name], pluginInfo);
	Sys[name] = pluginInfo.plugin;
	if (window.jQuery) {
		jQuery[name] = Sys[name];
	}
}

Sys._createComp = function _createComp(component, defaults, args) {
	var parameters = component.parameters || [],
		isBehavior = component._isBehavior,
		target = isBehavior ? args[0] : null;
	var offsetFromTargetArgument = isBehavior ? 1 : 0;
	var props = args[parameters.length + offsetFromTargetArgument] || {};
	props = merge({}, defaults, props);
	foreach(parameters, function(parameter, i) {
		var name = typeof(parameter) === "string" ? parameter : parameter.name,
			value = args[i + offsetFromTargetArgument];
		if (typeof(value) !== "undefined" && typeof(props[name]) === "undefined") {
			props[name] = value;
		}
	});
	return isBehavior ?
		Sys._create(component.type, props, target) :
		Sys._create(component.type, props);
}

Sys._create = function _create(type, properties, target) {
	var targetType = typeof(target);
	if (targetType === "string") {
		target = Sys.get(target);
	}
	var instance;
	Sys._2Pass(function() {
		instance = targetType === "undefined" ? new type() : new type(target);
		callIf(instance, "beginUpdate");
		Sys._setProps(instance, properties);
		var componentType = Sys.Component;
		if (!componentType || !componentType._register(instance)) {
			callIf(instance, "endUpdate") || callIf(instance, "initialize");
		}
	});
	return instance;
}

Sys._setProps = function _setProps(instance, properties) {
	forIn(properties, function(value, field) {
		callIf(instance, "add_" + field, value) ||
		callIf(instance, "set_" + field, value) ||
		(instance[field] = value);
	});
}

Type.prototype.registerInterface = function Type$registerInterface(typeName) {
	/// <summary locid="M:J#Type.registerInterface" />
	/// <param name="typeName" type="String"></param>
	/// <returns type="Type"></returns>

	if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
	var parsedName;
	try {
		parsedName = window.eval(typeName);
	}
	catch(e) {
		throw Error.argument('typeName', Sys.Res.argumentTypeName);
	}
	if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
	if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
	Sys.__upperCaseTypes[typeName.toUpperCase()] = this;

	this.prototype.constructor = this;
	this.__typeName = typeName;
	this.__interface = true;
	Sys.__registeredTypes[typeName] = true;

	return this;
}

Type.prototype.resolveInheritance = function Type$resolveInheritance() {
	/// <summary locid="M:J#Type.resolveInheritance" />
	if (arguments.length !== 0) throw Error.parameterCount();

	if (this.__basePrototypePending) {
		var baseType = this.__baseType;

		baseType.resolveInheritance();

		for (var memberName in baseType.prototype) {
			var memberValue = baseType.prototype[memberName];
			if (!this.prototype[memberName]) {
				this.prototype[memberName] = memberValue;
			}
		}
		delete this.__basePrototypePending;
	}
}

Type.getRootNamespaces = function Type$getRootNamespaces() {
	/// <summary locid="M:J#Type.getRootNamespaces" />
	/// <returns type="Array"></returns>
	if (arguments.length !== 0) throw Error.parameterCount();
	return Array.clone(Sys.__rootNamespaces);
}

Type.isClass = function Type$isClass(type) {
	/// <summary locid="M:J#Type.isClass" />
	/// <param name="type" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	if ((typeof(type) === 'undefined') || (type === null)) return false;
	return !!type.__class;
}

Type.isInterface = function Type$isInterface(type) {
	/// <summary locid="M:J#Type.isInterface" />
	/// <param name="type" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	if ((typeof(type) === 'undefined') || (type === null)) return false;
	return !!type.__interface;
}

Type.isNamespace = function Type$isNamespace(object) {
	/// <summary locid="M:J#Type.isNamespace" />
	/// <param name="object" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	if ((typeof(object) === 'undefined') || (object === null)) return false;
	return !!object.__namespace;
}

Type.parse = function Type$parse(typeName, ns) {
	/// <summary locid="M:J#Type.parse" />
	/// <param name="typeName" type="String" mayBeNull="true"></param>
	/// <param name="ns" optional="true" mayBeNull="true"></param>
	/// <returns type="Type" mayBeNull="true"></returns>

	var fn;
	if (ns) {
		fn = Sys.__upperCaseTypes[ns.getName().toUpperCase() + '.' + typeName.toUpperCase()];
		return fn || null;
	}
	if (!typeName) return null;
	if (!Type.__htClasses) {
		Type.__htClasses = {};
	}
	fn = Type.__htClasses[typeName];
	if (!fn) {
		fn = window.eval(typeName);
		if (typeof(fn) !== 'function') throw Error.argument('typeName', Sys.Res.notATypeName);
		Type.__htClasses[typeName] = fn;
	}
	return fn;
}

Type.registerNamespace = function Type$registerNamespace(namespacePath) {
	/// <summary locid="M:J#Type.registerNamespace" />
	/// <param name="namespacePath" type="String"></param>

	Type._registerNamespace(namespacePath);
}
Type._registerNamespace = function Type$_registerNamespace(namespacePath) {
	if (!Type.__fullyQualifiedIdentifierRegExp.test(namespacePath)) throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
	var rootObject = window;
	var namespaceParts = namespacePath.split('.');

	for (var i = 0, l = namespaceParts.length; i < l; i++) {
		var currentPart = namespaceParts[i];
		var ns = rootObject[currentPart];
		var nsType = typeof(ns);
		if ((nsType !== "undefined") && (ns !== null)) {
			if (nsType === "function") {
				throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsClass, namespaceParts.splice(0, i + 1).join('.')));
			}
			if ((typeof(ns) !== "object") || (ns instanceof Array)) {
				throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsNonObject, namespaceParts.splice(0, i + 1).join('.')));
			}
		}
		if (!ns) {
			ns = rootObject[currentPart] = {};
		}
		if (!ns.__namespace) {
			if (!i && (namespacePath !== "Sys")) {
				Sys.__rootNamespaces.push(ns);
			}
			ns.__namespace = true;
			ns.__typeName = namespaceParts.slice(0, i + 1).join('.');
			var parsedName;
			try {
				parsedName = window.eval(ns.__typeName);
			}
			catch(e) {
				parsedName = null;
			}
			if (parsedName !== ns) {
				delete rootObject[currentPart];
				throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
			}
			ns.getName = function ns$getName() {return this.__typeName;}
		}
		rootObject = ns;
	}
}

Type._checkDependency = function Type$_checkDependency(dependency, featureName) {
	var scripts = Type._registerScript._scripts, isDependent = (scripts ? (!!scripts[dependency]) : false);
	if ((typeof(featureName) !== 'undefined') && !isDependent) {
		throw Error.invalidOperation(String.format(Sys.Res.requiredScriptReferenceNotIncluded,
		featureName, dependency));
	}
	return isDependent;
}

Type._registerScript = function Type$_registerScript(scriptName, dependencies) {
	var scripts = Type._registerScript._scripts;
	if (!scripts) {
		Type._registerScript._scripts = scripts = {};
	}
	if (scripts[scriptName]) {
		throw Error.invalidOperation(String.format(Sys.Res.scriptAlreadyLoaded, scriptName));
	}
	scripts[scriptName] = true;
	if (dependencies) {
		for (var i = 0, l = dependencies.length; i < l; i++) {
			var dependency = dependencies[i];
			if (!Type._checkDependency(dependency)) {
				throw Error.invalidOperation(String.format(Sys.Res.scriptDependencyNotFound, scriptName, dependency));
			}
		}
	}
}

Type._registerNamespace("Sys");
Sys.__upperCaseTypes = {};
Sys.__rootNamespaces = [Sys];
Sys.__registeredTypes = {};






Sys._isInstanceOfType = function Sys$_isInstanceOfType(type, instance) {
	if (typeof(instance) === "undefined" || instance === null) return false;
	if (instance instanceof type) return true;
	var instanceType = Object.getType(instance);
	return !!(instanceType === type) ||
		   (instanceType.inheritsFrom && instanceType.inheritsFrom(type)) ||
		   (instanceType.implementsInterface && instanceType.implementsInterface(type));
}



Sys._getBaseMethod = function Sys$_getBaseMethod(type, instance, name) {
	if (!Sys._isInstanceOfType(type, instance)) throw Error.argumentType('instance', Object.getType(instance), type);
	var baseType = type.getBaseType();
	if (baseType) {
		var baseMethod = baseType.prototype[name];
		return (baseMethod instanceof Function) ? baseMethod : null;
	}
	return null;
}

Sys._isDomElement = function Sys$_isDomElement(obj) {
	var val = false;
	if (typeof (obj.nodeType) !== 'number') {
		var doc = obj.ownerDocument || obj.document || obj;
		if (doc != obj) {
			var w = doc.defaultView || doc.parentWindow;
			val = (w != obj);
		}
		else {
			val = !doc.body || !Sys._isDomElement(doc.body);
		}
	}
	return !val;
}

var isBrowser = Sys._isBrowser = function Sys$_isBrowser(name) {
	if (name === 'InternetExplorer') return Sys.Browser.agent === Sys.Browser[name];

	return Sys.Browser.agent === Sys.Browser[name];
}



foreach(Sys._ns, Type._registerNamespace);
delete Sys._ns;
Array.__typeName = 'Array';
Array.__class = true;

Array.add = Array.enqueue = function Array$enqueue(array, item) {
	/// <summary locid="M:J#Array.enqueue" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="item" mayBeNull="true"></param>


	array[array.length] = item;
}

Array.addRange = function Array$addRange(array, items) {
	/// <summary locid="M:J#Array.addRange" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="items" type="Array" elementMayBeNull="true"></param>


	array.push.apply(array, items);
}

Array.clear = function Array$clear(array) {
	/// <summary locid="M:J#Array.clear" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>

	array.length = 0;
}

Array.clone = function Array$clone(array) {
	/// <summary locid="M:J#Array.clone" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <returns type="Array" elementMayBeNull="true"></returns>

	if (array.length === 1) {
		return [array[0]];
	}
	else {
		return Array.apply(null, array);
	}
}

Array.contains = function Array$contains(array, item) {
	/// <summary locid="M:J#Array.contains" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="item" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	return (indexOf(array, item) >= 0);
}

Array.dequeue = function Array$dequeue(array) {
	/// <summary locid="M:J#Array.dequeue" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <returns mayBeNull="true"></returns>

	return array.shift();
}

Array.forEach = function Array$forEach(array, method, instance) {
	/// <summary locid="M:J#Array.forEach" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="method" type="Function"></param>
	/// <param name="instance" optional="true" mayBeNull="true"></param>

	for (var i = 0, l = array.length; i < l; i++) {
		var elt = array[i];
		if (typeof(elt) !== 'undefined') method.call(instance, elt, i, array);
	}
}

Array.indexOf = function Array$indexOf(array, item, start) {
	/// <summary locid="M:J#Array.indexOf" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="item" optional="true" mayBeNull="true"></param>
	/// <param name="start" optional="true" mayBeNull="true"></param>
	/// <returns type="Number"></returns>

	return indexOf(array, item, start);
}

Array.insert = function Array$insert(array, index, item) {
	/// <summary locid="M:J#Array.insert" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="index" mayBeNull="true"></param>
	/// <param name="item" mayBeNull="true"></param>

	array.splice(index, 0, item);
}

Array.parse = function Array$parse(value) {
	/// <summary locid="M:J#Array.parse" />
	/// <param name="value" type="String" mayBeNull="true"></param>
	/// <returns type="Array" elementMayBeNull="true"></returns>

	if (!value) return [];
	var v = window.eval("(" + value + ")");
	if (!Array.isInstanceOfType(v)) throw Error.argument('value', Sys.Res.arrayParseBadFormat);
	return v;
}

Array.remove = function Array$remove(array, item) {
	/// <summary locid="M:J#Array.remove" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="item" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	var index = indexOf(array, item);
	if (index >= 0) {
		array.splice(index, 1);
	}
	return (index >= 0);
}

Array.removeAt = function Array$removeAt(array, index) {
	/// <summary locid="M:J#Array.removeAt" />
	/// <param name="array" type="Array" elementMayBeNull="true"></param>
	/// <param name="index" mayBeNull="true"></param>

	array.splice(index, 1);
}





var indexOf = Sys._indexOf = function Sys$_indexOf(array, item, start) {
	if (typeof(item) === "undefined") return -1;
	var length = array.length;
	if (length !== 0) {
		start = start - 0;
		if (isNaN(start)) {
			start = 0;
		}
		else {
			if (isFinite(start)) {
				start = start - (start % 1);
			}
			if (start < 0) {
				start = Math.max(0, length + start);
			}
		}

		for (var i = start; i < length; i++) {
			if ((typeof(array[i]) !== "undefined") && (array[i] === item)) {
				return i;
			}
		}
	}
	return -1;
}

Type._registerScript._scripts = {
	"MicrosoftAjaxCore.js": true,
	"MicrosoftAjaxGlobalization.js": true,
	"MicrosoftAjaxSerialization.js": true,
	"MicrosoftAjaxComponentModel.js": true,
	"MicrosoftAjaxHistory.js": true,
	"MicrosoftAjaxNetwork.js" : true,
	"MicrosoftAjaxWebServices.js": true };

Sys.IDisposable = function Sys$IDisposable() {
	throw Error.notImplemented();
}

	function Sys$IDisposable$dispose() {
		throw Error.notImplemented();
	}
Sys.IDisposable.prototype = {
	dispose: Sys$IDisposable$dispose
}
Sys.IDisposable.registerInterface('Sys.IDisposable');
Sys.StringBuilder = function Sys$StringBuilder(initialText) {
	/// <summary locid="M:J#Sys.StringBuilder.#ctor" />
	/// <param name="initialText" optional="true" mayBeNull="true"></param>

	this._parts = (typeof(initialText) !== 'undefined' && initialText !== null && initialText !== '') ?
		[initialText.toString()] : [];
	this._value = {};
	this._len = 0;
}


	function Sys$StringBuilder$append(text) {
		/// <summary locid="M:J#Sys.StringBuilder.append" />
		/// <param name="text" mayBeNull="true"></param>
		/// <returns type="Sys.StringBuilder"></returns>

		this._parts.push(text);
		return this;
	}

	function Sys$StringBuilder$appendLine(text) {
		/// <summary locid="M:J#Sys.StringBuilder.appendLine" />
		/// <param name="text" optional="true" mayBeNull="true"></param>
		/// <returns type="Sys.StringBuilder"></returns>

		this._parts.push(
			((typeof(text) === 'undefined') || (text === null) || (text === '')) ?
			'\r\n' : (text + '\r\n'));
		return this;
	}

	function Sys$StringBuilder$clear() {
		/// <summary locid="M:J#Sys.StringBuilder.clear" />
		if (arguments.length !== 0) throw Error.parameterCount();
		this._parts = [];
		this._value = {};
		this._len = 0;
	}

	function Sys$StringBuilder$isEmpty() {
		/// <summary locid="M:J#Sys.StringBuilder.isEmpty" />
		/// <returns type="Boolean"></returns>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this._parts.length === 0) return true;
		return this.toString() === '';
	}



	function Sys$StringBuilder$toString(separator) {
		/// <summary locid="M:J#Sys.StringBuilder.toString" />
		/// <param name="separator" type="String" optional="true" mayBeNull="true"></param>
		/// <returns type="String"></returns>

		separator = separator || '';
		var parts = this._parts;
		if (this._len !== parts.length) {
			this._value = {};
			this._len = parts.length;
		}
		var val = this._value;
		if (typeof(val[separator]) === 'undefined') {
			if (separator !== '') {
				for (var i = 0; i < parts.length;) {
					if ((typeof(parts[i]) === 'undefined') || (parts[i] === '') || (parts[i] === null)) {
						parts.splice(i, 1);
					}
					else {
						i++;
					}
				}
			}
			val[separator] = this._parts.join(separator);
		}
		return val[separator];
	}
Sys.StringBuilder.prototype = {
	append: Sys$StringBuilder$append,
	appendLine: Sys$StringBuilder$appendLine,
	clear: Sys$StringBuilder$clear,
	isEmpty: Sys$StringBuilder$isEmpty,
	toString: Sys$StringBuilder$toString
}
Sys.StringBuilder.registerClass('Sys.StringBuilder');


var agent = navigator.userAgent,
	browser = Sys.Browser = {
		InternetExplorer: {},
		Firefox: {},
		Safari: {},
		Opera: {},
		agent: null,
		hasDebuggerStatement: false,
		name: navigator.appName,
		version: parseFloat(navigator.appVersion),
		documentMode: 0 };

if (agent.indexOf(' MSIE ') > -1) {
	browser.agent = browser.InternetExplorer;
	browser.version = parseFloat(agent.match(/MSIE (\d+\.\d+)/)[1]);
	if ((browser.version > 7) && (document.documentMode > 6)) {
		browser.documentMode = document.documentMode;
	}
	browser.hasDebuggerStatement = true;
	browser.name = 'InternetExplorer';
}
else if (agent.indexOf(' Edge/') > -1) {
	browser.agent = browser.InternetExplorer;
	browser.version = parseFloat(agent.match(/ Edge\/(\d+\.\d+)/)[1]);
	browser.hasDebuggerStatement = true;
}
else if (agent.indexOf(' Firefox/') > -1) {
	browser.agent = browser.Firefox;
	browser.version = parseFloat(agent.match(/ Firefox\/(\d+\.\d+)/)[1]);
	browser.name = 'Firefox';
	browser.hasDebuggerStatement = true;
}
else if (agent.indexOf(' AppleWebKit/') > -1) {
	browser.agent = browser.Safari;
	browser.version = parseFloat(agent.match(/ AppleWebKit\/(\d+(\.\d+)?)/)[1]);
	browser.name = 'Safari';
}
else if (agent.indexOf('Opera/') > -1) {
	browser.agent = browser.Opera;
}
else if (agent.indexOf('Trident') > -1) {
	browser.agent = browser.InternetExplorer;
	browser.version = parseFloat(agent.match(/rv\:(\d+\.\d+)/)[1]);
	browser.documentMode = document.documentMode;
	browser.hasDebuggerStatement = true;
	browser.name = 'InternetExplorer';
}


Sys.EventArgs = function Sys$EventArgs() {
	/// <summary locid="M:J#Sys.EventArgs.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
}
Sys.EventArgs.registerClass('Sys.EventArgs');

Sys.EventArgs.Empty = new Sys.EventArgs();
Sys.CancelEventArgs = function Sys$CancelEventArgs() {
	/// <summary locid="M:J#Sys.CancelEventArgs.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	Sys.CancelEventArgs.initializeBase(this);

	this._cancel = false;
}


	function Sys$CancelEventArgs$get_cancel() {
		/// <value type="Boolean" locid="P:J#Sys.CancelEventArgs.cancel"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._cancel;
	}
	function Sys$CancelEventArgs$set_cancel(value) {

		this._cancel = value;
	}
Sys.CancelEventArgs.prototype = {
	get_cancel: Sys$CancelEventArgs$get_cancel,
	set_cancel: Sys$CancelEventArgs$set_cancel
}

Sys.CancelEventArgs.registerClass('Sys.CancelEventArgs', Sys.EventArgs);



Type.registerNamespace('Sys.UI');

Sys._Debug = function Sys$_Debug() {
	/// <summary locid="M:J#Sys.Debug.#ctor" />
	/// <field name="isDebug" type="Boolean" locid="F:J#Sys.Debug.isDebug"></field>
	if (arguments.length !== 0) throw Error.parameterCount();
}


	function Sys$_Debug$_appendConsole(text) {
		if ((typeof(Debug) !== 'undefined') && Debug.writeln) {
			Debug.writeln(text);
		}
		if (window.console && window.console.log) {
			window.console.log(text);
		}
		if (window.opera) {
			window.opera.postError(text);
		}
		if (window.debugService) {
			window.debugService.trace(text);
		}
	}

	function Sys$_Debug$_appendTrace(text) {
		var traceElement = Sys.get('#TraceConsole');
		if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
			traceElement.value += text + '\n';
		}
	}

	function Sys$_Debug$assert(condition, message, displayCaller) {
		/// <summary locid="M:J#Sys.Debug.assert" />
		/// <param name="condition" type="Boolean"></param>
		/// <param name="message" type="String" optional="true" mayBeNull="true"></param>
		/// <param name="displayCaller" type="Boolean" optional="true" mayBeNull="true"></param>

		if (!condition) {
			message = (displayCaller && this.assert.caller) ?
				String.format(Sys.Res.assertFailedCaller, message, this.assert.caller) :
				String.format(Sys.Res.assertFailed, message);

			if (confirm(String.format(Sys.Res.breakIntoDebugger, message))) {
				this.fail(message);
			}
		}
	}

	function Sys$_Debug$clearTrace() {
		/// <summary locid="M:J#Sys.Debug.clearTrace" />
		if (arguments.length !== 0) throw Error.parameterCount();
		var traceElement = Sys.get('#TraceConsole');
		if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
			traceElement.value = '';
		}
	}

	function Sys$_Debug$fail(message) {
		/// <summary locid="M:J#Sys.Debug.fail" />
		/// <param name="message" type="String" mayBeNull="true"></param>

		this._appendConsole(message);

		if (Sys.Browser.hasDebuggerStatement) {
			window.eval('debugger');
		}
	}

	function Sys$_Debug$trace(text) {
		/// <summary locid="M:J#Sys.Debug.trace" />
		/// <param name="text"></param>

		this._appendConsole(text);
		this._appendTrace(text);
	}

	function Sys$_Debug$traceDump(object, name) {
		/// <summary locid="M:J#Sys.Debug.traceDump" />
		/// <param name="object" mayBeNull="true"></param>
		/// <param name="name" type="String" mayBeNull="true" optional="true"></param>

		var text = this._traceDump(object, name, true);
	}

	function Sys$_Debug$_traceDump(object, name, recursive, indentationPadding, loopArray) {
		name = name? name : 'traceDump';
		indentationPadding = indentationPadding? indentationPadding : '';
		if (object === null) {
			this.trace(indentationPadding + name + ': null');
			return;
		}
		switch(typeof(object)) {
			case 'undefined':
				this.trace(indentationPadding + name + ': Undefined');
				break;
			case 'number': case 'string': case 'boolean':
				this.trace(indentationPadding + name + ': ' + object);
				break;
			default:
				if (Date.isInstanceOfType(object) || RegExp.isInstanceOfType(object)) {
					this.trace(indentationPadding + name + ': ' + object.toString());
					break;
				}
				if (!loopArray) {
					loopArray = [];
				}
				else if (Array.contains(loopArray, object)) {
					this.trace(indentationPadding + name + ': ...');
					return;
				}
				Array.add(loopArray, object);

				if ((object == window) || (object === document) ||
					(window.HTMLElement && (object instanceof HTMLElement)) ||
					(typeof(object.nodeName) === 'string')) {
					var tag = object.tagName? object.tagName : 'DomElement';
					if (object.id) {
						tag += ' - ' + object.id;
					}
					this.trace(indentationPadding + name + ' {' +  tag + '}');
				}
				else {
					var typeName = Object.getTypeName(object);
					this.trace(indentationPadding + name + (typeof(typeName) === 'string' ? ' {' + typeName + '}' : ''));
					if ((indentationPadding === '') || recursive) {
						indentationPadding += "    ";
						var i, length, properties, p, v;
						if (Array.isInstanceOfType(object)) {
							length = object.length;
							for (i = 0; i < length; i++) {
								this._traceDump(object[i], '[' + i + ']', recursive, indentationPadding, loopArray);
							}
						}
						else {
							for (p in object) {
								v = object[p];
								if (!Function.isInstanceOfType(v)) {
									this._traceDump(v, p, recursive, indentationPadding, loopArray);
								}
							}
						}
					}
				}
				Array.remove(loopArray, object);
		}
	}
Sys._Debug.prototype = {
	_appendConsole: Sys$_Debug$_appendConsole,
	_appendTrace: Sys$_Debug$_appendTrace,
	assert: Sys$_Debug$assert,
	clearTrace: Sys$_Debug$clearTrace,
	fail: Sys$_Debug$fail,
	trace: Sys$_Debug$trace,
	traceDump: Sys$_Debug$traceDump,
	_traceDump: Sys$_Debug$_traceDump
}
Sys._Debug.registerClass('Sys._Debug');

Sys.Debug = new Sys._Debug();
	Sys.Debug.isDebug = true;
function Sys$Enum$parse(value, ignoreCase) {
	/// <summary locid="M:J#Sys.Enum.parse" />
	/// <param name="value" type="String"></param>
	/// <param name="ignoreCase" type="Boolean" optional="true" mayBeNull="true"></param>
	/// <returns></returns>

	var values, parsed, val;
	if (ignoreCase) {
		values = this.__lowerCaseValues;
		if (!values) {
			this.__lowerCaseValues = values = {};
			var prototype = this.prototype;
			for (var name in prototype) {
				values[name.toLowerCase()] = prototype[name];
			}
		}
	}
	else {
		values = this.prototype;
	}
	if (!this.__flags) {
		val = (ignoreCase ? value.toLowerCase() : value);
		parsed = values[val.trim()];
		if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
		return parsed;
	}
	else {
		var parts = (ignoreCase ? value.toLowerCase() : value).split(',');
		var v = 0;

		for (var i = parts.length - 1; i >= 0; i--) {
			var part = parts[i].trim();
			parsed = values[part];
			if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value.split(',')[i].trim(), this.__typeName));
			v |= parsed;
		}
		return v;
	}
}

function Sys$Enum$toString(value) {
	/// <summary locid="M:J#Sys.Enum.toString" />
	/// <param name="value" optional="true" mayBeNull="true"></param>
	/// <returns type="String"></returns>

	if ((typeof(value) === 'undefined') || (value === null)) return this.__string;
	if ((typeof(value) != 'number') || ((value % 1) !== 0)) throw Error.argumentType('value', Object.getType(value), this);
	var values = this.prototype;
	var i;
	if (!this.__flags || (value === 0)) {
		for (i in values) {
			if (values[i] === value) {
				return i;
			}
		}
	}
	else {
		var sorted = this.__sortedValues;
		if (!sorted) {
			sorted = [];
			for (i in values) {
				sorted[sorted.length] = {key: i, value: values[i]};
			}
			sorted.sort(function(a, b) {
				return a.value - b.value;
			});
			this.__sortedValues = sorted;
		}
		var parts = [];
		var v = value;
		for (i = sorted.length - 1; i >= 0; i--) {
			var kvp = sorted[i];
			var vali = kvp.value;
			if (vali === 0) continue;
			if ((vali & value) === vali) {
				parts[parts.length] = kvp.key;
				v -= vali;
				if (v === 0) break;
			}
		}
		if (parts.length && v === 0) return parts.reverse().join(', ');
	}
	throw Error.argumentOutOfRange('value', value, String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
}

Type.prototype.registerEnum = function Type$registerEnum(name, flags) {
	/// <summary locid="M:J#Sys.UI.LineType.#ctor" />
	/// <param name="name" type="String"></param>
	/// <param name="flags" type="Boolean" optional="true" mayBeNull="true"></param>

	if (!Type.__fullyQualifiedIdentifierRegExp.test(name)) throw Error.argument('name', Sys.Res.notATypeName);
	var parsedName;
	try {
		parsedName = window.eval(name);
	}
	catch(e) {
		throw Error.argument('name', Sys.Res.argumentTypeName);
	}
	if (parsedName !== this) throw Error.argument('name', Sys.Res.badTypeName);
	if (Sys.__registeredTypes[name]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, name));
	for (var j in this.prototype) {
		var val = this.prototype[j];
		if (!Type.__identifierRegExp.test(j)) throw Error.invalidOperation(String.format(Sys.Res.enumInvalidValueName, j));
		if (typeof(val) !== 'number' || (val % 1) !== 0) throw new Error(j);// Error.invalidOperation(Sys.Res.enumValueNotInteger);
		if (typeof(this[j]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.enumReservedName, j));
	}
	Sys.__upperCaseTypes[name.toUpperCase()] = this;

	for (var i in this.prototype) {
		this[i] = this.prototype[i];
	}
	this.__typeName = name;
	this.parse = Sys$Enum$parse;
	this.__string = this.toString();
	this.toString = Sys$Enum$toString;
	this.__flags = flags;
	this.__enum = true;
	Sys.__registeredTypes[name] = true;
}

Type.isEnum = function Type$isEnum(type) {
	/// <summary locid="M:J#Type.isEnum" />
	/// <param name="type" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	if ((typeof(type) === 'undefined') || (type === null)) return false;
	return !!type.__enum;
}

Type.isFlags = function Type$isFlags(type) {
	/// <summary locid="M:J#Type.isFlags" />
	/// <param name="type" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	if ((typeof(type) === 'undefined') || (type === null)) return false;
	return !!type.__flags;
}

Sys.CollectionChange = function Sys$CollectionChange(action, newItems, newStartingIndex, oldItems, oldStartingIndex) {
	/// <summary locid="M:J#Sys.CollectionChange.#ctor" />
	/// <param name="action" type="Sys.NotifyCollectionChangedAction"></param>
	/// <param name="newItems" optional="true" mayBeNull="true"></param>
	/// <param name="newStartingIndex" type="Number" integer="true" optional="true" mayBeNull="true"></param>
	/// <param name="oldItems" optional="true" mayBeNull="true"></param>
	/// <param name="oldStartingIndex" type="Number" integer="true" optional="true" mayBeNull="true"></param>
	/// <field name="action" type="Sys.NotifyCollectionChangedAction" locid="F:J#Sys.CollectionChange.action"></field>
	/// <field name="newItems" type="Array" mayBeNull="true" elementMayBeNull="true" locid="F:J#Sys.CollectionChange.newItems"></field>
	/// <field name="newStartingIndex" type="Number" integer="true" locid="F:J#Sys.CollectionChange.newStartingIndex"></field>
	/// <field name="oldItems" type="Array" mayBeNull="true" elementMayBeNull="true" locid="F:J#Sys.CollectionChange.oldItems"></field>
	/// <field name="oldStartingIndex" type="Number" integer="true" locid="F:J#Sys.CollectionChange.oldStartingIndex"></field>

	this.action = action;
	if (newItems) {
		if (!(newItems instanceof Array)) {
			newItems = [newItems];
		}
	}
	this.newItems = newItems || null;
	if (typeof newStartingIndex !== "number") {
		newStartingIndex = -1;
	}
	this.newStartingIndex = newStartingIndex;
	if (oldItems) {
		if (!(oldItems instanceof Array)) {
			oldItems = [oldItems];
		}
	}
	this.oldItems = oldItems || null;
	if (typeof oldStartingIndex !== "number") {
		oldStartingIndex = -1;
	}
	this.oldStartingIndex = oldStartingIndex;
}
Sys.CollectionChange.registerClass("Sys.CollectionChange");
Sys.NotifyCollectionChangedAction = function Sys$NotifyCollectionChangedAction() {
	/// <summary locid="M:J#Sys.NotifyCollectionChangedAction.#ctor" />
	/// <field name="add" type="Number" integer="true" static="true" locid="F:J#Sys.NotifyCollectionChangedAction.add"></field>
	/// <field name="remove" type="Number" integer="true" static="true" locid="F:J#Sys.NotifyCollectionChangedAction.remove"></field>
	/// <field name="reset" type="Number" integer="true" static="true" locid="F:J#Sys.NotifyCollectionChangedAction.reset"></field>
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}




Sys.NotifyCollectionChangedAction.prototype = {
	add: 0,
	remove: 1,
	reset: 2
}
Sys.NotifyCollectionChangedAction.registerEnum('Sys.NotifyCollectionChangedAction');
Sys.NotifyCollectionChangedEventArgs = function Sys$NotifyCollectionChangedEventArgs(changes) {
	/// <summary locid="M:J#Sys.NotifyCollectionChangedEventArgs.#ctor" />
	/// <param name="changes" type="Array" elementType="Sys.CollectionChange"></param>

	this._changes = changes;
	Sys.NotifyCollectionChangedEventArgs.initializeBase(this);
}

	function Sys$NotifyCollectionChangedEventArgs$get_changes() {
		/// <value type="Array" elementType="Sys.CollectionChange" locid="P:J#Sys.NotifyCollectionChangedEventArgs.changes"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._changes || [];
	}
Sys.NotifyCollectionChangedEventArgs.prototype = {
	get_changes: Sys$NotifyCollectionChangedEventArgs$get_changes
}
Sys.NotifyCollectionChangedEventArgs.registerClass("Sys.NotifyCollectionChangedEventArgs", Sys.EventArgs);

Sys.Observer = function Sys$Observer() {
	throw Error.invalidOperation();
}
Sys.Observer.registerClass("Sys.Observer");

Sys.Observer.makeObservable = function Sys$Observer$makeObservable(target) {
	/// <summary locid="M:J#Sys.Observer.makeObservable" />
	/// <param name="target" mayBeNull="false"></param>
	/// <returns></returns>

	var isArray = target instanceof Array,
		o = Sys.Observer;
	Sys.Observer._ensureObservable(target);
	if (target.setValue === o._observeMethods.setValue) return target;
	o._addMethods(target, o._observeMethods);
	if (isArray) {
		o._addMethods(target, o._arrayMethods);
	}
	return target;
}
Sys.Observer.disposeObservable = function Sys$Observer$disposeObservable(target) {
	var isArray = target instanceof Array,
		o = Sys.Observer;
	if (target.setValue === o._observeMethods.setValue) {
		o._removeMethods(target, o._observeMethods);
		if (isArray) {
			o._removeMethods(target, o._arrayMethods);
		}
	}
}
Sys.Observer._ensureObservable = function Sys$Observer$_ensureObservable(target) {
	var type = typeof target;
	if ((type === "string") || (type === "number") || (type === "boolean") || (type === "date")) {
		throw Error.invalidOperation(String.format(Sys.Res.notObservable, type));
	}
}
Sys.Observer._addMethods = function Sys$Observer$_addMethods(target, methods) {
	for (var m in methods) {
		//Allow observable to overwrite target methods.
		//if (target[m] && (target[m] !== methods[m])) {
		//    throw Error.invalidOperation(String.format(Sys.Res.observableConflict, m));
		//}
		target[m] = methods[m];
	}
}
Sys.Observer._removeMethods = function Sys$Observer$_removeMethods(target, methods) {
	for (var m in methods) {
		target[m] = null;
	}
}


Sys.Observer._addEventHandler = function Sys$Observer$_addEventHandler(target, eventName, handler) {
	Sys.Observer._getContext(target, true).events._addHandler(eventName, handler);
}
Sys.Observer.addEventHandler = function Sys$Observer$addEventHandler(target, eventName, handler) {
	/// <summary locid="M:J#Sys.Observer.addEventHandler" />
	/// <param name="target"></param>
	/// <param name="eventName" type="String"></param>
	/// <param name="handler" type="Function"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._addEventHandler(target, eventName, handler);
}


Sys.Observer._removeEventHandler = function Sys$Observer$_removeEventHandler(target, eventName, handler) {
	Sys.Observer._getContext(target, true).events._removeHandler(eventName, handler);
}
Sys.Observer.removeEventHandler = function Sys$Observer$removeEventHandler(target, eventName, handler) {
	/// <summary locid="M:J#Sys.Observer.removeEventHandler" />
	/// <param name="target"></param>
	/// <param name="eventName" type="String"></param>
	/// <param name="handler" type="Function"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._removeEventHandler(target, eventName, handler);
}
Sys.Observer.clearEventHandlers = function Sys$Observer$clearEventHandlers(target, eventName) {
	/// <summary locid="M:J#Sys.Observer.clearEventHandlers" />
	/// <param name="target"></param>
	/// <param name="eventName" type="String" mayBeNull="true" optional="true"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._getContext(target, true).events._removeHandlers(eventName);
}
Sys.Observer.raiseEvent = function Sys$Observer$raiseEvent(target, eventName, eventArgs) {
	/// <summary locid="M:J#Sys.Observer.raiseEvent" />
	/// <param name="target"></param>
	/// <param name="eventName" type="String"></param>
	/// <param name="eventArgs" optional="true" mayBeNull="true"></param>

	Sys.Observer._ensureObservable(target);
	var ctx = Sys.Observer._getContext(target);
	if (!ctx) return;
	var handler = ctx.events.getHandler(eventName);
	if (handler) {
		handler(target, eventArgs || Sys.EventArgs.Empty);
	}
}
Sys.Observer.addPropertyChanged = function Sys$Observer$addPropertyChanged(target, handler) {
	/// <summary locid="M:J#Sys.Observer.addPropertyChanged" />
	/// <param name="target" mayBeNull="false"></param>
	/// <param name="handler" type="Function"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._addEventHandler(target, "propertyChanged", handler);
}
Sys.Observer.removePropertyChanged = function Sys$Observer$removePropertyChanged(target, handler) {
	/// <summary locid="M:J#Sys.Observer.removePropertyChanged" />
	/// <param name="target" mayBeNull="false"></param>
	/// <param name="handler" type="Function"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._removeEventHandler(target, "propertyChanged", handler);
}
Sys.Observer.beginUpdate = function Sys$Observer$beginUpdate(target) {
	/// <summary locid="M:J#Sys.Observer.beginUpdate" />
	/// <param name="target" mayBeNull="false"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._getContext(target, true).updating = true;
}
Sys.Observer.endUpdate = function Sys$Observer$endUpdate(target) {
	/// <summary locid="M:J#Sys.Observer.endUpdate" />
	/// <param name="target" mayBeNull="false"></param>

	Sys.Observer._ensureObservable(target);
	var ctx = Sys.Observer._getContext(target);
	if (!ctx || !ctx.updating) return;
	ctx.updating = false;
	var dirty = ctx.dirty;
	ctx.dirty = false;
	if (dirty) {
		if (target instanceof Array) {
			var changes = ctx.changes;
			ctx.changes = null;
			Sys.Observer.raiseCollectionChanged(target, changes);
		}
		Sys.Observer.raisePropertyChanged(target, "");
	}
}
Sys.Observer.isUpdating = function Sys$Observer$isUpdating(target) {
	/// <summary locid="M:J#Sys.Observer.isUpdating" />
	/// <param name="target" mayBeNull="false"></param>
	/// <returns type="Boolean"></returns>

	Sys.Observer._ensureObservable(target);
	var ctx = Sys.Observer._getContext(target);
	return ctx ? ctx.updating : false;
}


Sys.Observer._setValue = function Sys$Observer$_setValue(target, propertyName, value) {
	var getter, setter, mainTarget = target, path = propertyName.split('.');
	for (var i = 0, l = (path.length - 1); i < l; i++) {
		var name = path[i];
		getter = target["get_" + name];
		if (typeof (getter) === "function") {
			target = getter.call(target);
		}
		else {
			target = target[name];
		}
		var type = typeof (target);
		if ((target === null) || (type === "undefined")) {
			throw Error.invalidOperation(String.format(Sys.Res.nullReferenceInPath, propertyName));
		}
	}

	var notify = true; // added
	var currentValue, lastPath = path[l];
	getter = target["get_" + lastPath];
	setter = target["set_" + lastPath];
	if (typeof (getter) === 'function') {
		currentValue = getter.call(target);
	}
	else {
		currentValue = target[lastPath];
	}
	if (typeof (setter) === 'function') {
		notify = !setter.__notifies; // added
		setter.call(target, value);
	}
	else {
		target[lastPath] = value;
	}
	if (currentValue !== value) {
		var ctx = Sys.Observer._getContext(mainTarget);
		if (ctx && ctx.updating) {
			ctx.dirty = true;
			return;
		}
		if (notify) {
			Sys.Observer.raisePropertyChanged(mainTarget, path[0]);
		}
	}
}
Sys.Observer.setValue = function Sys$Observer$setValue(target, propertyName, value) {
	/// <summary locid="M:J#Sys.Observer.setValue" />
	/// <param name="target" mayBeNull="false"></param>
	/// <param name="propertyName" type="String"></param>
	/// <param name="value" mayBeNull="true"></param>

	Sys.Observer._ensureObservable(target);
	Sys.Observer._setValue(target, propertyName, value);
}
Sys.Observer.raisePropertyChanged = function Sys$Observer$raisePropertyChanged(target, propertyName) {
	/// <summary locid="M:J#Sys.Observer.raisePropertyChanged" />
	/// <param name="target" mayBeNull="false"></param>
	/// <param name="propertyName" type="String"></param>
	Sys.Observer.raiseEvent(target, "propertyChanged", new Sys.PropertyChangedEventArgs(propertyName));
}

Sys.Observer.addCollectionChanged = function Sys$Observer$addCollectionChanged(target, handler) {
	/// <summary locid="M:J#Sys.Observer.addCollectionChanged" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="handler" type="Function"></param>

	Sys.Observer._addEventHandler(target, "collectionChanged", handler);
}
Sys.Observer.removeCollectionChanged = function Sys$Observer$removeCollectionChanged(target, handler) {
	/// <summary locid="M:J#Sys.Observer.removeCollectionChanged" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="handler" type="Function"></param>

	Sys.Observer._removeEventHandler(target, "collectionChanged", handler);
}
Sys.Observer._collectionChange = function Sys$Observer$_collectionChange(target, change) {
	var ctx = Sys.Observer._getContext(target);
	if (ctx && ctx.updating) {
		ctx.dirty = true;
		var changes = ctx.changes;
		if (!changes) {
			ctx.changes = changes = [change];
		}
		else {
			changes.push(change);
		}
	}
	else {
		Sys.Observer.raiseCollectionChanged(target, [change]);
		Sys.Observer.raisePropertyChanged(target, 'length');
	}
}
Sys.Observer.add = function Sys$Observer$add(target, item) {
	/// <summary locid="M:J#Sys.Observer.add" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="item" mayBeNull="true"></param>

	var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], target.length);
	Array.add(target, item);
	Sys.Observer._collectionChange(target, change);
}
Sys.Observer.addRange = function Sys$Observer$addRange(target, items) {
	/// <summary locid="M:J#Sys.Observer.addRange" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="items" type="Array" elementMayBeNull="true"></param>

	var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, items, target.length);
	Array.addRange(target, items);
	Sys.Observer._collectionChange(target, change);
}
Sys.Observer.insertRange = function Sys$Observer$insertRange(target, index, items) {
	/// <summary locid="M:J#Sys.Observer.insertRange" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="index" type="Array" elementMayBeNull="true"></param>
	/// <param name="items" type="Array" elementMayBeNull="true"></param>

	var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, items, index);
	var spliceArgs = items.slice();
	spliceArgs.splice(0, 0, index, 0);
	target.splice.apply(target, spliceArgs);
	Sys.Observer._collectionChange(target, change);
}
Sys.Observer.removeRange = function Sys$Observer$removeRange(target, start, count) {
	/// <summary locid="M:J#Sys.Observer.removeRange" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="start" type="Array" elementMayBeNull="true"></param>
	/// <param name="count" type="Array" elementMayBeNull="true"></param>

	var items = target.splice(start, count);
	var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, items, start);
	Sys.Observer._collectionChange(target, change);
	return items;
}
Sys.Observer.clear = function Sys$Observer$clear(target) {
	/// <summary locid="M:J#Sys.Observer.clear" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>

	var oldItems = Array.clone(target);
	Array.clear(target);
	Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.reset, null, -1, oldItems, 0));
}
Sys.Observer.insert = function Sys$Observer$insert(target, index, item) {
	/// <summary locid="M:J#Sys.Observer.insert" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="index" type="Number" integer="true"></param>
	/// <param name="item" mayBeNull="true"></param>

	Array.insert(target, index, item);
	Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], index));
}
Sys.Observer.remove = function Sys$Observer$remove(target, item) {
	/// <summary locid="M:J#Sys.Observer.remove" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="item" mayBeNull="true"></param>
	/// <returns type="Boolean"></returns>

	var index = Array.indexOf(target, item);
	if (index !== -1) {
		Array.remove(target, item);
		Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, [item], index));
		return true;
	}
	return false;
}
Sys.Observer.removeAt = function Sys$Observer$removeAt(target, index) {
	/// <summary locid="M:J#Sys.Observer.removeAt" />
	/// <param name="target" type="Array" elementMayBeNull="true"></param>
	/// <param name="index" type="Number" integer="true"></param>

	if ((index > -1) && (index < target.length)) {
		var item = target[index];
		Array.removeAt(target, index);
		Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, [item], index));
		return item;
	}
}
Sys.Observer.raiseCollectionChanged = function Sys$Observer$raiseCollectionChanged(target, changes) {
	/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
	/// <param name="target"></param>
	/// <param name="changes" type="Array" elementType="Sys.CollectionChange"></param>
	Sys.Observer.raiseEvent(target, "collectionChanged", new Sys.NotifyCollectionChangedEventArgs(changes));
}


Sys.Observer._observeMethods = {
	add_propertyChanged: function(handler) {
		Sys.Observer._addEventHandler(this, "propertyChanged", handler);
	},
	remove_propertyChanged: function(handler) {
		Sys.Observer._removeEventHandler(this, "propertyChanged", handler);
	},
	addEventHandler: function(eventName, handler) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="eventName" type="String"></param>
		/// <param name="handler" type="Function"></param>

		Sys.Observer._addEventHandler(this, eventName, handler);
	},
	removeEventHandler: function(eventName, handler) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="eventName" type="String"></param>
		/// <param name="handler" type="Function"></param>

		Sys.Observer._removeEventHandler(this, eventName, handler);
	},
	clearEventHandlers: function(eventName) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="target"></param>
		/// <param name="eventName" type="String" mayBeNull="true" optional="true"></param>

		Sys.Observer._getContext(this, true).events._removeHandlers(eventName);
	},
	get_isUpdating: function() {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <returns type="Boolean"></returns>
		return Sys.Observer.isUpdating(this);
	},
	beginUpdate: function() {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		Sys.Observer.beginUpdate(this);
	},
	endUpdate: function() {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		Sys.Observer.endUpdate(this);
	},
	setValue: function(name, value) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="name" type="String"></param>
		/// <param name="value" mayBeNull="true"></param>

		Sys.Observer._setValue(this, name, value);
	},
	raiseEvent: function(eventName, eventArgs) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="eventName" type="String"></param>
		/// <param name="eventArgs" optional="true" mayBeNull="true"></param>
		Sys.Observer.raiseEvent(this, eventName, eventArgs||null);
	},
	raisePropertyChanged: function(name) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="name" type="String"></param>
		Sys.Observer.raiseEvent(this, "propertyChanged", new Sys.PropertyChangedEventArgs(name));
	}
}
Sys.Observer._arrayMethods = {
	add_collectionChanged: function(handler) {
		Sys.Observer._addEventHandler(this, "collectionChanged", handler);
	},
	remove_collectionChanged: function(handler) {
		Sys.Observer._removeEventHandler(this, "collectionChanged", handler);
	},
	add: function(item) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="item" mayBeNull="true"></param>
		Sys.Observer.add(this, item);
	},
	addRange: function(items) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="items" type="Array" elementMayBeNull="true"></param>
		Sys.Observer.addRange(this, items);
	},
	clear: function() {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		Sys.Observer.clear(this);
	},
	insert: function(index, item) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="index" type="Number" integer="true"></param>
		/// <param name="item" mayBeNull="true"></param>
		Sys.Observer.insert(this, index, item);
	},
	insertRange: function(index, items) {
		/// <summary locid="M:J#Sys.Observer.insertRange" />
		/// <param name="target" type="Array" elementMayBeNull="true"></param>
		/// <param name="index" type="Array" elementMayBeNull="true"></param>
		/// <param name="items" type="Array" elementMayBeNull="true"></param>
		Sys.Observer.insertRange(this, index, items);
	},
	remove: function(item) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="item" mayBeNull="true"></param>
		/// <returns type="Boolean"></returns>
		return Sys.Observer.remove(this, item);
	},
	removeAt: function(index) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="index" type="Number" integer="true"></param>
		return Sys.Observer.removeAt(this, index);
	},
	removeRange: function(start, count) {
		/// <summary locid="M:J#Sys.Observer.removeRange" />
		/// <param name="target" type="Array" elementMayBeNull="true"></param>
		/// <param name="start" type="Array" elementMayBeNull="true"></param>
		/// <param name="count" type="Array" elementMayBeNull="true"></param>
		return Sys.Observer.removeRange(this, start, count);
	},
	raiseCollectionChanged: function(changes) {
		/// <summary locid="M:J#Sys.Observer.raiseCollectionChanged" />
		/// <param name="changes" type="Array" elementType="Sys.CollectionChange"></param>
		Sys.Observer.raiseEvent(this, "collectionChanged", new Sys.NotifyCollectionChangedEventArgs(changes));
	}
}
Sys.Observer._getContext = function Sys$Observer$_getContext(obj, create) {
	var ctx = obj._observerContext;
	if (ctx) return ctx();
	if (create) {
		return (obj._observerContext = Sys.Observer._createContext())();
	}
	return null;
}
Sys.Observer._createContext = function Sys$Observer$_createContext() {
	var ctx = {
		events: new Sys.EventHandlerList()
	};
	return function() {
		return ctx;
	}
}





Date._appendPreOrPostMatch = function Date$_appendPreOrPostMatch(preMatch, strBuilder) {
	var quoteCount = 0;
	var escaped = false;
	for (var i = 0, il = preMatch.length; i < il; i++) {
		var c = preMatch.charAt(i);
		switch (c) {
		case '\'':
			if (escaped) strBuilder.append("'");
			else quoteCount++;
			escaped = false;
			break;
		case '\\':
			if (escaped) strBuilder.append("\\");
			escaped = !escaped;
			break;
		default:
			strBuilder.append(c);
			escaped = false;
			break;
		}
	}
	return quoteCount;
}

   Date._expandFormat = function Date$_expandFormat(dtf, format) {
	if (!format) {
		format = "F";
	}
	var len = format.length;
	if (len === 1) {
		switch (format) {
		case "d":
			return dtf["ShortDatePattern"];
		case "D":
			return dtf["LongDatePattern"];
		case "t":
			return dtf["ShortTimePattern"];
		case "T":
			return dtf["LongTimePattern"];
		case "f":
			return dtf["LongDatePattern"] + " " + dtf["ShortTimePattern"];
		case "F":
			return dtf["FullDatePattern"];
		case "g":
			return dtf["ShortDatePattern"] + " " + dtf["ShortTimePattern"];
		case "G":
			return dtf["ShortDatePattern"] + " " + dtf["LongTimePattern"];
		case "M": case "m":
			return dtf["MonthDayPattern"];
		case "s":
			return dtf["SortableDateTimePattern"];
		
		case "Y": case "y":
			return dtf["YearMonthPattern"];
		default:
			throw Error.format(Sys.Res.formatInvalidString);
		}
	}
	else if ((len === 2) && (format.charAt(0) === "%")) {
		format = format.charAt(1);
	}
	return format;
}

Date._expandYear = function Date$_expandYear(dtf, year) {
	var now = new Date(),
		era = Date._getEra(now);
	if (year < 100) {
		var curr = Date._getEraYear(now, dtf, era);
		year += curr - (curr % 100);
		if (year > dtf.Calendar.TwoDigitYearMax) {
			year -= 100;
		}
	}
	return year;
}

Date._getEra = function Date$_getEra(date, eras) {
	if (!eras) return 0;
	var start, ticks = date.getTime();
	for (var i = 0, l = eras.length; i < l; i += 4) {
		start = eras[i+2];
		if ((start === null) || (ticks >= start)) {
			return i;
		}
	}
	return 0;
}
Date._getEraYear = function Date$_getEraYear(date, dtf, era, sortable) {
	var year = date.getFullYear();
	if (!sortable && dtf.eras) {
		year -= dtf.eras[era + 3];
	}
	return year;
}

Date._getParseRegExp = function Date$_getParseRegExp(dtf, format) {
	if (!dtf._parseRegExp) {
		dtf._parseRegExp = {};
	}
	else if (dtf._parseRegExp[format]) {
		return dtf._parseRegExp[format];
	}

	var expFormat = Date._expandFormat(dtf, format);
	expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");

	var regexp = new Sys.StringBuilder("^");
	var groups = [];
	var index = 0;
	var quoteCount = 0;
	var tokenRegExp = Date._getTokenRegExp();
	var match;

	while ((match = tokenRegExp.exec(expFormat)) !== null) {
		var preMatch = expFormat.slice(index, match.index);
		index = tokenRegExp.lastIndex;

		quoteCount += Date._appendPreOrPostMatch(preMatch, regexp);
		if ((quoteCount%2) === 1) {
			regexp.append(match[0]);
			continue;
		}

		switch (match[0]) {
			case 'dddd': case 'ddd':
			case 'MMMM': case 'MMM':
			case 'gg': case 'g':
				regexp.append("(\\D+)");
				break;
			case 'tt': case 't':
				regexp.append("(\\D*)");
				break;
			case 'yyyy':
				regexp.append("(\\d{4})");
				break;
			case 'fff':
				regexp.append("(\\d{3})");
				break;
			case 'ff':
				regexp.append("(\\d{2})");
				break;
			case 'f':
				regexp.append("(\\d)");
				break;
			case 'dd': case 'd':
			case 'MM': case 'M':
			case 'yy': case 'y':
			case 'HH': case 'H':
			case 'hh': case 'h':
			case 'mm': case 'm':
			case 'ss': case 's':
				regexp.append("(\\d\\d?)");
				break;
			case 'zzz':
				regexp.append("([+-]?\\d\\d?:\\d{2})");
				break;
			case 'zz': case 'z':
				regexp.append("([+-]?\\d\\d?)");
				break;
			case '/':
				regexp.append("(\\" + dtf.DateSeparator + ")");
				break;
		}
		Array.add(groups, match[0]);
	}
	Date._appendPreOrPostMatch(expFormat.slice(index), regexp);
	regexp.append("$");
	var regexpStr = regexp.toString().replace(/\s+/g, "\\s+");
	var parseRegExp = {'regExp': regexpStr, 'groups': groups};
	dtf._parseRegExp[format] = parseRegExp;
	return parseRegExp;
}

Date._getTokenRegExp = function Date$_getTokenRegExp() {
	return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
}

Date.parseLocale = function Date$parseLocale(value, formats) {
	/// <summary locid="M:J#Date.parseLocale" />
	/// <param name="value" type="String"></param>
	/// <param name="formats" parameterArray="true" optional="true" mayBeNull="true"></param>
	/// <returns type="Date"></returns>

	return Date._parse(value, Sys.CultureInfo.CurrentCulture, arguments);
}

Date.parseInvariant = function Date$parseInvariant(value, formats) {
	/// <summary locid="M:J#Date.parseInvariant" />
	/// <param name="value" type="String"></param>
	/// <param name="formats" parameterArray="true" optional="true" mayBeNull="true"></param>
	/// <returns type="Date"></returns>

	return Date._parse(value, Sys.CultureInfo.InvariantCulture, arguments);
}

Date._parse = function Date$_parse(value, cultureInfo, args) {
	var i, l, date, format, formats, custom = false;
	for (i = 1, l = args.length; i < l; i++) {
		format = args[i];
		if (format) {
			custom = true;
			date = Date._parseExact(value, format, cultureInfo);
			if (date) return date;
		}
	}
	if (! custom) {
		formats = cultureInfo._getDateTimeFormats();
		for (i = 0, l = formats.length; i < l; i++) {
			date = Date._parseExact(value, formats[i], cultureInfo);
			if (date) return date;
		}
	}
	return null;
}

Date._parseExact = function Date$_parseExact(value, format, cultureInfo) {
	value = value.trim();
	var dtf = cultureInfo.dateTimeFormat,
		parseInfo = Date._getParseRegExp(dtf, format),
		match = new RegExp(parseInfo.regExp).exec(value);
	if (match === null) return null;
	var groups = parseInfo.groups,
		era = null, year = null, month = null, date = null, weekDay = null,
		hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
		pmHour = false;
	for (var j = 0, jl = groups.length; j < jl; j++) {
		var matchGroup = match[j+1];
		if (matchGroup) {
			switch (groups[j]) {
				case 'dd': case 'd':
					date = parseInt(matchGroup, 10);
					if ((date < 1) || (date > 31)) return null;
					break;
				case 'MMMM':
					month = cultureInfo._getMonthIndex(matchGroup);
					if ((month < 0) || (month > 11)) return null;
					break;
				case 'MMM':
					month = cultureInfo._getMonthIndex(matchGroup, true);
					if ((month < 0) || (month > 11)) return null;
					break;
				case 'M': case 'MM':
					month = parseInt(matchGroup, 10) - 1;
					if ((month < 0) || (month > 11)) return null;
					break;
				case 'y': case 'yy':
					year = Date._expandYear(dtf,parseInt(matchGroup, 10));
					if ((year < 0) || (year > 9999)) return null;
					break;
				case 'yyyy':
					year = parseInt(matchGroup, 10);
					if ((year < 0) || (year > 9999)) return null;
					break;
				case 'h': case 'hh':
					hour = parseInt(matchGroup, 10);
					if (hour === 12) hour = 0;
					if ((hour < 0) || (hour > 11)) return null;
					break;
				case 'H': case 'HH':
					hour = parseInt(matchGroup, 10);
					if ((hour < 0) || (hour > 23)) return null;
					break;
				case 'm': case 'mm':
					min = parseInt(matchGroup, 10);
					if ((min < 0) || (min > 59)) return null;
					break;
				case 's': case 'ss':
					sec = parseInt(matchGroup, 10);
					if ((sec < 0) || (sec > 59)) return null;
					break;
				case 'tt': case 't':
					var upperToken = matchGroup.toUpperCase();
					pmHour = (upperToken === dtf.PMDesignator.toUpperCase());
					if (!pmHour && (upperToken !== dtf.AMDesignator.toUpperCase())) return null;
					break;
				case 'f':
					msec = parseInt(matchGroup, 10) * 100;
					if ((msec < 0) || (msec > 999)) return null;
					break;
				case 'ff':
					msec = parseInt(matchGroup, 10) * 10;
					if ((msec < 0) || (msec > 999)) return null;
					break;
				case 'fff':
					msec = parseInt(matchGroup, 10);
					if ((msec < 0) || (msec > 999)) return null;
					break;
				case 'dddd':
					weekDay = cultureInfo._getDayIndex(matchGroup);
					if ((weekDay < 0) || (weekDay > 6)) return null;
					break;
				case 'ddd':
					weekDay = cultureInfo._getDayIndex(matchGroup, true);
					if ((weekDay < 0) || (weekDay > 6)) return null;
					break;
				case 'zzz':
					var offsets = matchGroup.split(/:/);
					if (offsets.length !== 2) return null;
					hourOffset = parseInt(offsets[0], 10);
					if ((hourOffset < -12) || (hourOffset > 13)) return null;
					var minOffset = parseInt(offsets[1], 10);
					if ((minOffset < 0) || (minOffset > 59)) return null;
					tzMinOffset = (hourOffset * 60) + (matchGroup.startsWith('-')? -minOffset : minOffset);
					break;
				case 'z': case 'zz':
					hourOffset = parseInt(matchGroup, 10);
					if ((hourOffset < -12) || (hourOffset > 13)) return null;
					tzMinOffset = hourOffset * 60;
					break;
				case 'g': case 'gg':
					var eraName = matchGroup;
					if (!eraName || !dtf.eras) return null;
					eraName = eraName.toLowerCase().trim();
					for (var i = 0, l = dtf.eras.length; i < l; i += 4) {
						if (eraName === dtf.eras[i + 1].toLowerCase()) {
							era = i;
							break;
						}
					}
					if (era === null) return null;
					break;
			}
		}
	}
	var result = new Date(), defaultYear, convert = dtf.Calendar.convert;
	// If none are specified, set to todays date to 1/1/1970
	if (year == null && month == null && date == null) {
		year = 1970;
		month = 0;
		date = 1;
	}
	else {
		if (convert) {
			defaultYear = convert.fromGregorian(result)[0];
		}
		else {
			defaultYear = result.getFullYear();
		}
		if (year === null) {
			year = defaultYear;
		}
		else if (dtf.eras) {
			year += dtf.eras[(era || 0) + 3];
		}
		if (month === null) {
			month = 0;
		}
		if (date === null) {
			date = 1;
		}
	}
	if (convert) {
		result = convert.toGregorian(year, month, date);
		if (result === null) return null;
	}
	else {
		result.setFullYear(year, month, date);
		if (result.getDate() !== date) return null;
		if ((weekDay !== null) && (result.getDay() !== weekDay)) {
			return null;
		}
	}
	if (pmHour && (hour < 12)) {
		hour += 12;
	}
	result.setHours(hour, min, sec, msec);
	if (tzMinOffset !== null) {
		var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
		result.setHours(result.getHours() + parseInt(adjustedMin/60, 10), adjustedMin%60);
	}
	return result;
}

Date.prototype.format = function Date$format(format) {
	/// <summary locid="M:J#Date.format" />
	/// <param name="format" type="String"></param>
	/// <returns type="String"></returns>

	return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
}

Date.prototype.localeFormat = function Date$localeFormat(format) {
	/// <summary locid="M:J#Date.localeFormat" />
	/// <param name="format" type="String"></param>
	/// <returns type="String"></returns>

	return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
}

Date.prototype._toFormattedString = function Date$_toFormattedString(format, cultureInfo) {
	var dtf = cultureInfo.dateTimeFormat,
		convert = dtf.Calendar.convert;
	if (!format || !format.length || (format === 'i')) {
		if (cultureInfo && cultureInfo.name.length) {
			if (convert) {
				return this._toFormattedString(dtf.FullDateTimePattern, cultureInfo);
			}
			else {
				var eraDate = new Date(this.getTime());
				var era = Date._getEra(this, dtf.eras);
				eraDate.setFullYear(Date._getEraYear(this, dtf, era));
				return eraDate.toLocaleString();
			}
		}
		else {
			return this.toString();
		}
	}

	var eras = dtf.eras,
		sortable = (format === "s");
	format = Date._expandFormat(dtf, format);

	var ret = new Sys.StringBuilder();
	var hour;

	function addLeadingZero(num) {
		if (num < 10) {
			return '0' + num;
		}
		return num.toString();
	}

	function addLeadingZeros(num) {
		if (num < 10) {
			return '00' + num;
		}
		if (num < 100) {
			return '0' + num;
		}
		return num.toString();
	}
	function padYear(year) {
		if (year < 10) {
			return '000' + year;
		}
		else if (year < 100) {
			return '00' + year;
		}
		else if (year < 1000) {
			return '0' + year;
		}
		return year.toString();
	}
	var foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g;
	function hasDay() {
		if (foundDay || checkedDay) {
			return foundDay;
		}
		foundDay = dayPartRegExp.test(format);
		checkedDay = true;
		return foundDay;
	}
	var quoteCount = 0,
		tokenRegExp = Date._getTokenRegExp(),
		converted;
	if (!sortable && convert) {
		converted = convert.fromGregorian(this);
	}
	for (;;) {

		var index = tokenRegExp.lastIndex;

		var ar = tokenRegExp.exec(format);

		var preMatch = format.slice(index, ar ? ar.index : format.length);
		quoteCount += Date._appendPreOrPostMatch(preMatch, ret);

		if (!ar) break;

		if ((quoteCount%2) === 1) {
			ret.append(ar[0]);
			continue;
		}
		function getPart(date, part) {
			if (converted) {
				return converted[part];
			}
			switch (part) {
				case 0: return date.getFullYear();
				case 1: return date.getMonth();
				case 2: return date.getDate();
			}
		}

		switch (ar[0]) {
		case "dddd":
			ret.append(dtf.DayNames[this.getDay()]);
			break;
		case "ddd":
			ret.append(dtf.AbbreviatedDayNames[this.getDay()]);
			break;
		case "dd":
			foundDay = true;
			ret.append(addLeadingZero(getPart(this, 2)));
			break;
		case "d":
			foundDay = true;
			ret.append(getPart(this, 2));
			break;
		case "MMMM":
			ret.append((dtf.MonthGenitiveNames && hasDay())
				? dtf.MonthGenitiveNames[getPart(this, 1)]
				: dtf.MonthNames[getPart(this, 1)]);
			break;
		case "MMM":
			ret.append((dtf.AbbreviatedMonthGenitiveNames && hasDay())
				? dtf.AbbreviatedMonthGenitiveNames[getPart(this, 1)]
				: dtf.AbbreviatedMonthNames[getPart(this, 1)]);
			break;
		case "MM":
			ret.append(addLeadingZero(getPart(this, 1) + 1));
			break;
		case "M":
			ret.append(getPart(this, 1) + 1);
			break;
		case "yyyy":
			ret.append(padYear(converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)));
			break;
		case "yy":
			ret.append(addLeadingZero((converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)) % 100));
			break;
		case "y":
			ret.append((converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)) % 100);
			break;
		case "hh":
			hour = this.getHours() % 12;
			if (hour === 0) hour = 12;
			ret.append(addLeadingZero(hour));
			break;
		case "h":
			hour = this.getHours() % 12;
			if (hour === 0) hour = 12;
			ret.append(hour);
			break;
		case "HH":
			ret.append(addLeadingZero(this.getHours()));
			break;
		case "H":
			ret.append(this.getHours());
			break;
		case "mm":
			ret.append(addLeadingZero(this.getMinutes()));
			break;
		case "m":
			ret.append(this.getMinutes());
			break;
		case "ss":
			ret.append(addLeadingZero(this.getSeconds()));
			break;
		case "s":
			ret.append(this.getSeconds());
			break;
		case "tt":
			ret.append((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator);
			break;
		case "t":
			ret.append(((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator).charAt(0));
			break;
		case "f":
			ret.append(addLeadingZeros(this.getMilliseconds()).charAt(0));
			break;
		case "ff":
			ret.append(addLeadingZeros(this.getMilliseconds()).substr(0, 2));
			break;
		case "fff":
			ret.append(addLeadingZeros(this.getMilliseconds()));
			break;
		case "z":
			hour = this.getTimezoneOffset() / 60;
			ret.append(((hour <= 0) ? '+' : '-') + Math.floor(Math.abs(hour)));
			break;
		case "zz":
			hour = this.getTimezoneOffset() / 60;
			ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))));
			break;
		case "zzz":
			hour = this.getTimezoneOffset() / 60;
			ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))) +
				":" + addLeadingZero(Math.abs(this.getTimezoneOffset() % 60)));
			break;
		case "g":
		case "gg":
			if (dtf.eras) {
				ret.append(dtf.eras[Date._getEra(this, eras) + 1]);
			}
			break;
		case "/":
			ret.append(dtf.DateSeparator);
			break;
		}
	}
	return ret.toString();
}
String.localeFormat = function String$localeFormat(format, args) {
	/// <summary locid="M:J#String.localeFormat" />
	/// <param name="format" type="String"></param>
	/// <param name="args" parameterArray="true" mayBeNull="true"></param>
	/// <returns type="String"></returns>

	return String._toFormattedString(true, arguments);
}
Number.parseLocale = function Number$parseLocale(value) {
	/// <summary locid="M:J#Number.parseLocale" />
	/// <param name="value" type="String"></param>
	/// <returns type="Number"></returns>

	return Number._parse(value, Sys.CultureInfo.CurrentCulture);
}
Number.parseInvariant = function Number$parseInvariant(value) {
	/// <summary locid="M:J#Number.parseInvariant" />
	/// <param name="value" type="String"></param>
	/// <returns type="Number"></returns>

	return Number._parse(value, Sys.CultureInfo.InvariantCulture);
}
Number._parse = function Number$_parse(value, cultureInfo) {
	value = value.trim();
	if (value.match(/^[+-]?infinity$/i)) {
		return parseFloat(value);
	}
	if (value.match(/^0x[a-f0-9]+$/i)) {
		return parseInt(value);
	}

	var numFormat = cultureInfo.numberFormat;
	var signInfo = Number._parseNumberNegativePattern(value, numFormat, numFormat.NumberNegativePattern);
	var sign = signInfo[0];
	var num = signInfo[1];
	if ((sign === '') && (numFormat.NumberNegativePattern !== 1)) {
		signInfo = Number._parseNumberNegativePattern(value, numFormat, 1);
		sign = signInfo[0];
		num = signInfo[1];
	}
	if (sign === '') sign = '+';
	var exponent;
	var intAndFraction;
	var exponentPos = num.indexOf('e');
	if (exponentPos < 0) exponentPos = num.indexOf('E');
	if (exponentPos < 0) {
		intAndFraction = num;
		exponent = null;
	}
	else {
		intAndFraction = num.substr(0, exponentPos);
		exponent = num.substr(exponentPos + 1);
	}
	var integer;
	var fraction;
	var decimalPos = intAndFraction.indexOf(numFormat.NumberDecimalSeparator);
	if (decimalPos < 0) {
		integer = intAndFraction;
		fraction = null;
	}
	else {
		integer = intAndFraction.substr(0, decimalPos);
		fraction = intAndFraction.substr(decimalPos + numFormat.NumberDecimalSeparator.length);
	}
	integer = integer.split(numFormat.NumberGroupSeparator).join('');
	var altNumGroupSeparator = numFormat.NumberGroupSeparator.replace(/\u00A0/g, " ");
	if (numFormat.NumberGroupSeparator !== altNumGroupSeparator) {
		integer = integer.split(altNumGroupSeparator).join('');
	}
	var p = sign + integer;
	if (fraction !== null) {
		p += '.' + fraction;
	}
	if (exponent !== null) {
		var expSignInfo = Number._parseNumberNegativePattern(exponent, numFormat, 1);
		if (expSignInfo[0] === '') {
			expSignInfo[0] = '+';
		}
		p += 'e' + expSignInfo[0] + expSignInfo[1];
	}

	if (p.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) {
		return parseFloat(p);
	}
	return Number.NaN;
}
Number._parseNumberNegativePattern = function Number$_parseNumberNegativePattern(value, numFormat, numberNegativePattern) {
	var neg = numFormat.NegativeSign;
	var pos = numFormat.PositiveSign;
	switch (numberNegativePattern) {
		case 4:
			neg = ' ' + neg;
			pos = ' ' + pos;
		case 3:
			if (value.endsWith(neg)) {
				return ['-', value.substr(0, value.length - neg.length)];
			}
			else if (value.endsWith(pos)) {
				return ['+', value.substr(0, value.length - pos.length)];
			}
			break;
		case 2:
			neg += ' ';
			pos += ' ';
		case 1:
			if (value.startsWith(neg)) {
				return ['-', value.substr(neg.length)];
			}
			else if (value.startsWith(pos)) {
				return ['+', value.substr(pos.length)];
			}
			break;
		case 0:
			if (value.startsWith('(') && value.endsWith(')')) {
				return ['-', value.substr(1, value.length - 2)];
			}
			break;
	}
	return ['', value];
}

Number.prototype.format = function Number$format(format) {
	/// <summary locid="M:J#Number.format" />
	/// <param name="format" type="String"></param>
	/// <returns type="String"></returns>

	return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
}
Number.prototype.localeFormat = function Number$localeFormat(format) {
	/// <summary locid="M:J#Number.localeFormat" />
	/// <param name="format" type="String"></param>
	/// <returns type="String"></returns>

	return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
}
Number.prototype._toFormattedString = function Number$_toFormattedString(format, cultureInfo) {
	if (!format || (format.length === 0) || (format === 'i')) {
		if (cultureInfo && (cultureInfo.name.length > 0)) {
			return this.toLocaleString();
		}
		else {
			return this.toString();
		}
	}
	var _percentPositivePattern = ["n %", "n%", "%n" ];
	var _percentNegativePattern = ["-n %", "-n%", "-%n"];
	var _numberNegativePattern = ["(n)","-n","- n","n-","n -"];
	var _currencyPositivePattern = ["$n","n$","$ n","n $"];
	var _currencyNegativePattern = ["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"];

	function zeroPad(str, count, left) {
		for (var l=str.length; l < count; l++) {
			str = (left ? ('0' + str) : (str + '0'));
		}
		return str;
	}
	function expandNumber(number, precision, groupSizes, sep, decimalChar) {
		var curSize = groupSizes[0];
		var curGroupIndex = 1;



		var factor = Math.pow(10, precision);
		var rounded = (Math.round(number * factor) / factor);
		if (!isFinite(rounded)) {
			rounded = number;
		}
		number = rounded;
		var numberString = number.toString();
		var right = "";
		var exponent;
		var split = numberString.split(/e/i);
		numberString = split[0];
		exponent = (split.length > 1 ? parseInt(split[1]) : 0);
		split = numberString.split('.');
		numberString = split[0];
		right = split.length > 1 ? split[1] : "";
		var l;
		if (exponent > 0) {
			right = zeroPad(right, exponent, false);
			numberString += right.slice(0, exponent);
			right = right.substr(exponent);
		}
		else if (exponent < 0) {
			exponent = -exponent;
			numberString = zeroPad(numberString, exponent+1, true);
			right = numberString.slice(-exponent, numberString.length) + right;
			numberString = numberString.slice(0, -exponent);
		}

		if (precision > 0) {
			if (right.length > precision) {
				right = right.slice(0, precision);
			}
			else {
				right = zeroPad(right, precision, false);
			}
			right = decimalChar + right;
		}
		else {
			right = "";
		}

		var stringIndex = numberString.length-1;
		var ret = "";
		while (stringIndex >= 0) {

			if (curSize === 0 || curSize > stringIndex) {
				if (ret.length > 0)
					return numberString.slice(0, stringIndex + 1) + sep + ret + right;
				else
					return numberString.slice(0, stringIndex + 1) + right;
			}

			if (ret.length > 0)
				ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1) + sep + ret;
			else
				ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1);

			stringIndex -= curSize;

			if (curGroupIndex < groupSizes.length) {
				curSize = groupSizes[curGroupIndex];
				curGroupIndex++;
			}
		}
		return numberString.slice(0, stringIndex + 1) + sep + ret + right;
	}
	var nf = cultureInfo.numberFormat;

	var number = Math.abs(this);

	if (!format)
		format = "D";

	var precision = -1;
	if (format.length > 1) precision = parseInt(format.slice(1), 10);

	var pattern;
	switch (format.charAt(0)) {
	case "d":
	case "D":
		pattern = 'n';

		if (precision !== -1) {
			number = zeroPad(""+number, precision, true);
		}

		if (this < 0) number = -number;
		break;
	case "c":
	case "C":
		if (this < 0) pattern = _currencyNegativePattern[nf.CurrencyNegativePattern];
		else pattern = _currencyPositivePattern[nf.CurrencyPositivePattern];
		if (precision === -1) precision = nf.CurrencyDecimalDigits;
		number = expandNumber(Math.abs(this), precision, nf.CurrencyGroupSizes, nf.CurrencyGroupSeparator, nf.CurrencyDecimalSeparator);
		break;
	case "n":
	case "N":
		if (this < 0) pattern = _numberNegativePattern[nf.NumberNegativePattern];
		else pattern = 'n';
		if (precision === -1) precision = nf.NumberDecimalDigits;
		number = expandNumber(Math.abs(this), precision, nf.NumberGroupSizes, nf.NumberGroupSeparator, nf.NumberDecimalSeparator);
		break;
	case "p":
	case "P":
		if (this < 0) pattern = _percentNegativePattern[nf.PercentNegativePattern];
		else pattern = _percentPositivePattern[nf.PercentPositivePattern];
		if (precision === -1) precision = nf.PercentDecimalDigits;
		number = expandNumber(Math.abs(this) * 100, precision, nf.PercentGroupSizes, nf.PercentGroupSeparator, nf.PercentDecimalSeparator);
		break;
	default:
		throw Error.format(Sys.Res.formatBadFormatSpecifier);
	}

	var regex = /n|\$|-|%/g;

	var ret = "";

	for (;;) {

		var index = regex.lastIndex;

		var ar = regex.exec(pattern);

		ret += pattern.slice(index, ar ? ar.index : pattern.length);

		if (!ar)
			break;

		switch (ar[0]) {
		case "n":
			ret += number;
			break;
		case "$":
			ret += nf.CurrencySymbol;
			break;
		case "-":
			if (/[1-9]/.test(number)) {
				ret += nf.NegativeSign;
			}
			break;
		case "%":
			ret += nf.PercentSymbol;
			break;
		}
	}

	return ret;
}
function toUpper(value) {
	return value.split("\u00A0").join(' ').toUpperCase();
}
function toUpperArray(arr) {
	var result = [];
	foreach(arr, function(value, i) {
		result[i] = toUpper(value);
	});
	return result;
}

function clone(obj) {
	var objNew = {};
	forIn(obj, function(value, field) {
		objNew[field] = (value instanceof Array) ? (value.length === 1 ? [value] : Array.apply(null, value)) :
			((typeof(value) === "object") ? clone(value) : value);
	});
	return objNew;
}

Sys.CultureInfo = function Sys$CultureInfo(name, numberFormat, dateTimeFormat) {
	/// <summary locid="M:J#Sys.CultureInfo.#ctor" />
	/// <param name="name" type="String"></param>
	/// <param name="numberFormat" type="Object"></param>
	/// <param name="dateTimeFormat" type="Object"></param>

	this.name = name;
	this.numberFormat = numberFormat;
	this.dateTimeFormat = dateTimeFormat;
}

	function Sys$CultureInfo$_getDateTimeFormats() {
		var formats = this._dateTimeFormats;
		if (!formats) {
			var dtf = this.dateTimeFormat;
			this._dateTimeFormats = formats =
			  [ dtf["MonthDayPattern"],
				dtf["YearMonthPattern"],
				dtf["ShortDatePattern"],
				dtf["ShortTimePattern"],
				dtf["LongDatePattern"],
				dtf["LongTimePattern"],
				dtf["FullDateTimePattern"],
				dtf["RFC1123Pattern"],
				dtf["SortableDateTimePattern"],
				dtf["UniversalSortableDateTimePattern"] ];
		}
		return formats;
	}
	function Sys$CultureInfo$_getMonthIndex(value, abbr) {
		var name = abbr ? "_upperAbbrMonths" : "_upperMonths",
			genitiveName = name + "Genitive",
			upperMonths = this[name];
		if (!upperMonths) {
			var prefix = (abbr ? "Abbreviated" : "");
			this[name] = toUpperArray(this.dateTimeFormat[prefix+"MonthNames"]);
			this[genitiveName] = toUpperArray(this.dateTimeFormat[prefix+"MonthGenitiveNames"]);
		}
		value = toUpper(value);
		var i = indexOf(this[name], value);
		if (i < 0) {
			i = indexOf(this[genitiveName], value);
		}
		return i;
	}
	function Sys$CultureInfo$_getDayIndex(value, abbr) {
		var name = abbr ? "_upperAbbrDays" : "_upperDays",
			upperDays = this[name];
		if (!upperDays) {
			this[name] = toUpperArray(this.dateTimeFormat[(abbr ? "Abbreviated" : "")+"DayNames"]);
		}
		return indexOf(this[name], toUpper(value));
	}
Sys.CultureInfo.prototype = {
	_getDateTimeFormats: Sys$CultureInfo$_getDateTimeFormats,
	_getMonthIndex: Sys$CultureInfo$_getMonthIndex,
	_getDayIndex: Sys$CultureInfo$_getDayIndex
}
Sys.CultureInfo.registerClass('Sys.CultureInfo');

merge(Sys.CultureInfo, {
_parse: function(value) {
	var dtf = value.dateTimeFormat;
	if (dtf && !dtf.eras) {
		dtf.eras = value.eras;
	}
	return new Sys.CultureInfo(value.name, value.numberFormat, dtf);
},
_setup: function() {
	var cultureInfo = window.__cultureInfo,
		monthNames = ["January","February","March","April","May","June","July","August","September","October","November","December",""],
		shortMonthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],
		invariant = { "name": "", "numberFormat": { "CurrencyDecimalDigits": 2, "CurrencyDecimalSeparator": ".", "CurrencyGroupSizes": [3], "NumberGroupSizes": [3], "PercentGroupSizes": [3], "CurrencyGroupSeparator": ",", "CurrencySymbol": "\u00A4", "NaNSymbol": "NaN", "CurrencyNegativePattern": 0, "NumberNegativePattern": 1, "PercentPositivePattern": 0, "PercentNegativePattern": 0, "NegativeInfinitySymbol": "-Infinity", "NegativeSign": "-", "NumberDecimalDigits": 2, "NumberDecimalSeparator": ".", "NumberGroupSeparator": ",", "CurrencyPositivePattern": 0, "PositiveInfinitySymbol": "Infinity", "PositiveSign": "+", "PercentDecimalDigits": 2, "PercentDecimalSeparator": ".", "PercentGroupSeparator": ",", "PercentSymbol": "%", "PerMilleSymbol": "\u2030", "NativeDigits": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], "DigitSubstitution": 1 }, "dateTimeFormat": { "AMDesignator": "AM", "Calendar": { "MinSupportedDateTime": "@-62135568000000@", "MaxSupportedDateTime": "@253402300799999@", "AlgorithmType": 1, "CalendarType": 1, "Eras": [1], "TwoDigitYearMax": 2029 }, "DateSeparator": "/", "FirstDayOfWeek": 0, "CalendarWeekRule": 0, "FullDateTimePattern": "dddd, dd MMMM yyyy HH:mm:ss", "LongDatePattern": "dddd, dd MMMM yyyy", "LongTimePattern": "HH:mm:ss", "MonthDayPattern": "MMMM dd", "PMDesignator": "PM", "RFC1123Pattern": "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "ShortDatePattern": "MM/dd/yyyy", "ShortTimePattern": "h:mm tt", "SortableDateTimePattern": "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "TimeSeparator": ":", "UniversalSortableDateTimePattern": "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "YearMonthPattern": "yyyy MMMM", "AbbreviatedDayNames": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], "ShortestDayNames": ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], "DayNames": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], "AbbreviatedMonthNames": shortMonthNames, "MonthNames": monthNames, "NativeCalendarName": "Gregorian Calendar", "AbbreviatedMonthGenitiveNames": Array.clone(shortMonthNames), "MonthGenitiveNames": Array.clone(monthNames) }, "eras": [1, "A.D.", null, 0] };
	this.InvariantCulture = this._parse(invariant);
	switch(typeof(cultureInfo)) {
		case "string":
			cultureInfo = window.eval("(" + cultureInfo + ")");
		case "object":
			this.CurrentCulture = this._parse(cultureInfo);
			try {
				delete __cultureInfo;
			} catch(e) {
				__cultureInfo = null;
			}
			break;
		default:
			cultureInfo = clone(invariant);
			cultureInfo.name = "en-US";
			cultureInfo.numberFormat.CurrencySymbol = "$";
			var dtf = cultureInfo.dateTimeFormat;
			dtf.FullDatePattern = "dddd, MMMM dd, yyyy h:mm:ss tt";
			dtf.LongDatePattern = "dddd, MMMM dd, yyyy";
			dtf.LongTimePattern = "h:mm:ss tt";
			dtf.ShortDatePattern = "M/d/yyyy";
			dtf.ShortTimePattern = "h:mm tt";
			dtf.YearMonthPattern = "MMMM, yyyy";
			this.CurrentCulture = this._parse(cultureInfo);
			break;
	}
}
});

Sys.CultureInfo._setup();












Type.registerNamespace('Sys.Serialization');

Sys.Serialization.JavaScriptSerializer = function Sys$Serialization$JavaScriptSerializer() {
	/// <summary locid="M:J#Sys.Serialization.JavaScriptSerializer.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
}
Sys.Serialization.JavaScriptSerializer.registerClass('Sys.Serialization.JavaScriptSerializer');

merge(Sys.Serialization.JavaScriptSerializer, {
_esc: {
	charsRegExs: { '"': /\"/g, '\\': /\\/g }, /*"*/
	chars: ['\\', '"'],
	dateRegEx: /(^|[^\\])\"\\\/Date\((-?[0-9]+)(?:[a-zA-Z]|(?:\+|-)[0-9]{4})?\)\\\/\"/g, /* " */
	escapeChars: {'\\':'\\\\', '"':'\\"', "\b":"\\b", "\t":"\\t", "\n":"\\n", "\f":"\\f", "\r":"\\r"},
	escapeRegExG: /[\"\\\x00-\x1F]/g,
	escapeRegEx: /[\"\\\x00-\x1F]/i,
	jsonRegEx: /[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/g,
	jsonStringRegEx: /\"(\\.|[^\"\\])*\"/g /*"*/
},
_init: function() {
	var esc = this._esc,
		toEsc = esc.chars,
		toEscRE = esc.charsRegExs,
		escChars = esc.escapeChars;
	for (var i = 0; i < 32; i++) {
		var c = String.fromCharCode(i);
		toEsc[i+2] = c;
		toEscRE[c] = new RegExp(c, 'g');
		escChars[c] = escChars[c] || ("\\u" + ("000" + i.toString(16)).slice(-4));
	}
	this._load = true;
},
_serializeNumberWithBuilder: function(object, stringBuilder) {
	if (!isFinite(object)) {
		throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers);
	}
	stringBuilder.append(String(object));
},




_serializeStringWithBuilder: function(string, stringBuilder) {
	stringBuilder.append('"');
	var esc = this._esc;
	if (esc.escapeRegEx.test(string)) {
		if (!this._load) {
			this._init();
		}
		if (string.length < 128) {
			string = string.replace(esc.escapeRegExG,
				function(x) { return esc.escapeChars[x]; });
		}
		else {
			for (var i = 0; i < 34; i++) {
				var c = esc.chars[i];
				if (string.indexOf(c) !== -1) {
					var escChar = esc.escapeChars[c];
					string = (isBrowser("Opera") || isBrowser("Firefox")) ?
						string.split(c).join(escChar) :
						string.replace(esc.charsRegExs[c], escChar);
				}
			}
	   }
	}
	stringBuilder.append(string).append('"');
},
_serializeWithBuilder: function(object, stringBuilder, sort, prevObjects) {
	var i;
	switch (typeof object) {
	case 'object':
		if (object) {
			if (prevObjects){
				if (Sys._indexOf(prevObjects, object) !== -1) {
					throw Error.invalidOperation(Sys.Res.cannotSerializeObjectWithCycle);
				}
			}
			else {
				prevObjects = [];
			}
			try {
				prevObjects.push(object);
				if (Number.isInstanceOfType(object)) {
					this._serializeNumberWithBuilder(object, stringBuilder);
				}
				else if (Boolean.isInstanceOfType(object)) {
					stringBuilder.append(object);
				}
				else if (String.isInstanceOfType(object)) {
					this._serializeStringWithBuilder(object, stringBuilder);
				}
				else if (object instanceof Array) {
					stringBuilder.append('[');
					for (i = 0; i < object.length; ++i) {
						if (i) {
							stringBuilder.append(',');
						}
						this._serializeWithBuilder(object[i], stringBuilder, false, prevObjects);
					}
					stringBuilder.append(']');
				}
				else {
					if (Date.isInstanceOfType(object)) {
						stringBuilder.append('"\\/Date(').
							append(object.getTime()).
							append(')\\/"');
						break;
					}

					var properties = [],
						propertyCount = 0;
					for (var name in object) {
						if (name.charAt(0) !== '$') {
							if (name === '__type' && propertyCount) {
								properties[propertyCount++] = properties[0];
								properties[0] = name;
							}
							else {
								properties[propertyCount++] = name;
							}
						}
					}
					if (sort) properties.sort();

					stringBuilder.append('{');
					var needComma;
					for (i=0; i < propertyCount; i++) {
						var prop = properties[i], value = object[prop],
							type = typeof(value);
						if (type !== 'undefined' && type !== 'function') {
							if (needComma) {
								stringBuilder.append(',');
							}
							this._serializeWithBuilder(prop, stringBuilder, sort, prevObjects);
							stringBuilder.append(':');
							this._serializeWithBuilder(value, stringBuilder, sort, prevObjects);
							needComma = true;
						}
					}
				stringBuilder.append('}');
				}
			}
			finally {
				Array.removeAt(prevObjects, prevObjects.length - 1);
			}
		}
		else {
			stringBuilder.append('null');
		}
		break;

	case 'number':
		this._serializeNumberWithBuilder(object, stringBuilder);
		break;

	case 'string':
		this._serializeStringWithBuilder(object, stringBuilder);
		break;

	case 'boolean':
		stringBuilder.append(object);
		break;

	default:
		stringBuilder.append('null');
		break;
	}
}
});

Sys.Serialization.JavaScriptSerializer.serialize = function Sys$Serialization$JavaScriptSerializer$serialize(object) {
	/// <summary locid="M:J#Sys.Serialization.JavaScriptSerializer.serialize" />
	/// <param name="object" mayBeNull="true"></param>
	/// <returns type="String"></returns>

	var stringBuilder = new Sys.StringBuilder();
	Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object, stringBuilder, false);
	return stringBuilder.toString();
}

Sys.Serialization.JavaScriptSerializer.deserialize = function Sys$Serialization$JavaScriptSerializer$deserialize(data, secure) {
	/// <summary locid="M:J#Sys.Serialization.JavaScriptSerializer.deserialize" />
	/// <param name="data" type="String"></param>
	/// <param name="secure" type="Boolean" optional="true" mayBeNull="true"></param>
	/// <returns></returns>

	if (!data.length) throw Error.argument('data', Sys.Res.cannotDeserializeEmptyString);
	var er, esc = Sys.Serialization.JavaScriptSerializer._esc;
	try {
		var exp = data.replace(esc.dateRegEx, "$1new Date($2)");
		if (secure && esc.jsonRegEx.test(exp.replace(esc.jsonStringRegEx, ''))) throw null;

		return window.eval('(' + exp + ')');
	}
	catch (er) {
		 throw Error.argument('data', Sys.Res.cannotDeserializeInvalidJson);
	}
}





Type.registerNamespace('Sys.UI');

Sys.EventHandlerList = function Sys$EventHandlerList() {
	/// <summary locid="M:J#Sys.EventHandlerList.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	this._list = {};
}


	function Sys$EventHandlerList$_addHandler(id, handler) {
		Array.add(this._getEvent(id, true), handler);
	}
	function Sys$EventHandlerList$addHandler(id, handler) {
		/// <summary locid="M:J#Sys.EventHandlerList.addHandler" />
		/// <param name="id" type="String"></param>
		/// <param name="handler" type="Function"></param>

		this._addHandler(id, handler);
	}
	function Sys$EventHandlerList$_removeHandler(id, handler) {
		var evt = this._getEvent(id);
		if (!evt) return;
		Array.remove(evt, handler);
	}
	function Sys$EventHandlerList$_removeHandlers(id) {
		if (!id) {
			this._list = {};
		}
		else {
			var evt = this._getEvent(id);
			if (!evt) return;
			evt.length = 0;
		}
	}
	function Sys$EventHandlerList$removeHandler(id, handler) {
		/// <summary locid="M:J#Sys.EventHandlerList.removeHandler" />
		/// <param name="id" type="String"></param>
		/// <param name="handler" type="Function"></param>

		this._removeHandler(id, handler);
	}
	function Sys$EventHandlerList$getHandler(id) {
		/// <summary locid="M:J#Sys.EventHandlerList.getHandler" />
		/// <param name="id" type="String"></param>
		/// <returns type="Function"></returns>

		var evt = this._getEvent(id);
		if (!evt || (evt.length === 0)) return null;
		evt = Array.clone(evt);
		return function(source, args) {
			for (var i = 0, l = evt.length; i < l; i++) {
				evt[i](source, args);
			}
		};
	}
	function Sys$EventHandlerList$_getEvent(id, create) {
		if (!this._list[id]) {
			if (!create) return null;
			this._list[id] = [];
		}
		return this._list[id];
	}
Sys.EventHandlerList.prototype = {
	_addHandler: Sys$EventHandlerList$_addHandler,
	addHandler: Sys$EventHandlerList$addHandler,
	_removeHandler: Sys$EventHandlerList$_removeHandler,
	_removeHandlers: Sys$EventHandlerList$_removeHandlers,
	removeHandler: Sys$EventHandlerList$removeHandler,
	getHandler: Sys$EventHandlerList$getHandler,
	_getEvent: Sys$EventHandlerList$_getEvent
}
Sys.EventHandlerList.registerClass('Sys.EventHandlerList');
Sys.CommandEventArgs = function Sys$CommandEventArgs(commandName, commandArgument, commandSource) {
	/// <summary locid="M:J#Sys.CommandEventArgs.#ctor" />
	/// <param name="commandName" type="String"></param>
	/// <param name="commandArgument" mayBeNull="true"></param>
	/// <param name="commandSource" mayBeNull="true"></param>

	Sys.CommandEventArgs.initializeBase(this);
	this._commandName = commandName;
	this._commandArgument = commandArgument;
	this._commandSource = commandSource;
}




	function Sys$CommandEventArgs$get_commandName() {
		/// <value type="String" locid="P:J#Sys.CommandEventArgs.commandName"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._commandName;
	}
	function Sys$CommandEventArgs$get_commandArgument() {
		/// <value mayBeNull="true" locid="P:J#Sys.CommandEventArgs.commandArgument"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._commandArgument;
	}
	function Sys$CommandEventArgs$get_commandSource() {
		/// <value mayBeNull="true" locid="P:J#Sys.CommandEventArgs.commandSource"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._commandSource;
	}
Sys.CommandEventArgs.prototype = {
	_commandName: null,
	_commandArgument: null,
	_commandSource: null,
	get_commandName: Sys$CommandEventArgs$get_commandName,
	get_commandArgument: Sys$CommandEventArgs$get_commandArgument,
	get_commandSource: Sys$CommandEventArgs$get_commandSource
}
Sys.CommandEventArgs.registerClass("Sys.CommandEventArgs", Sys.CancelEventArgs);
Sys.INotifyPropertyChange = function Sys$INotifyPropertyChange() {
	/// <summary locid="M:J#Sys.INotifyPropertyChange.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}

	function Sys$INotifyPropertyChange$add_propertyChanged(handler) {
	/// <summary locid="E:J#Sys.INotifyPropertyChange.propertyChanged" />

		throw Error.notImplemented();
	}
	function Sys$INotifyPropertyChange$remove_propertyChanged(handler) {

		throw Error.notImplemented();
	}
Sys.INotifyPropertyChange.prototype = {
	add_propertyChanged: Sys$INotifyPropertyChange$add_propertyChanged,
	remove_propertyChanged: Sys$INotifyPropertyChange$remove_propertyChanged
}
Sys.INotifyPropertyChange.registerInterface('Sys.INotifyPropertyChange');
Sys.PropertyChangedEventArgs = function Sys$PropertyChangedEventArgs(propertyName) {
	/// <summary locid="M:J#Sys.PropertyChangedEventArgs.#ctor" />
	/// <param name="propertyName" type="String"></param>

	Sys.PropertyChangedEventArgs.initializeBase(this);
	this._propertyName = propertyName;
}
	function Sys$PropertyChangedEventArgs$get_propertyName() {
		/// <value type="String" locid="P:J#Sys.PropertyChangedEventArgs.propertyName"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._propertyName;
	}
Sys.PropertyChangedEventArgs.prototype = {
	get_propertyName: Sys$PropertyChangedEventArgs$get_propertyName
}
Sys.PropertyChangedEventArgs.registerClass('Sys.PropertyChangedEventArgs', Sys.EventArgs);
Sys.INotifyDisposing = function Sys$INotifyDisposing() {
	/// <summary locid="M:J#Sys.INotifyDisposing.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}

	function Sys$INotifyDisposing$add_disposing(handler) {
	/// <summary locid="E:J#Sys.INotifyDisposing.disposing" />

		throw Error.notImplemented();
	}
	function Sys$INotifyDisposing$remove_disposing(handler) {

		throw Error.notImplemented();
	}
Sys.INotifyDisposing.prototype = {
	add_disposing: Sys$INotifyDisposing$add_disposing,
	remove_disposing: Sys$INotifyDisposing$remove_disposing
}
Sys.INotifyDisposing.registerInterface("Sys.INotifyDisposing");
Sys.Component = function Sys$Component() {
	/// <summary locid="M:J#Sys.Component.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	if (Sys.Application) Sys.Application.registerDisposableObject(this);
}

	function Sys$Component$get_isLinkPending() {
		/// <value type="Boolean" locid="P:J#Sys.Component.isLinkPending"></value>
		return !!this._isLinkPending;
	}
	function Sys$Component$set_isLinkPending(value) {
		this._isLinkPending = value;
	}
	function Sys$Component$get_events() {
		/// <value type="Sys.EventHandlerList" locid="P:J#Sys.Component.events"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return Sys.Observer._getContext(this, true).events;
	}
	function Sys$Component$get_id() {
		/// <value type="String" locid="P:J#Sys.Component.id"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._id || null;
	}
	function Sys$Component$set_id(value) {

		if (this._idSet) throw Error.invalidOperation(Sys.Res.componentCantSetIdTwice);
		this._idSet = true;
		var oldId = this.get_id();
		if (oldId && Sys.Application.findComponent(oldId)) throw Error.invalidOperation(Sys.Res.componentCantSetIdAfterAddedToApp);
		this._id = value;
	}
	function Sys$Component$get_isInitialized() {
		/// <value type="Boolean" locid="P:J#Sys.Component.isInitialized"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return !!this._initialized;
	}
	function Sys$Component$get_isUpdating() {
		/// <value type="Boolean" locid="P:J#Sys.Component.isUpdating"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return !!this._updating;
	}
	function Sys$Component$add_disposing(handler) {
		/// <summary locid="E:J#Sys.Component.disposing" />

		this._addHandler("disposing", handler);
	}
	function Sys$Component$remove_disposing(handler) {

		this._removeHandler("disposing", handler);
	}
	function Sys$Component$add_propertyChanged(handler) {
		/// <summary locid="E:J#Sys.Component.propertyChanged" />

		this._addHandler("propertyChanged", handler);
	}
	function Sys$Component$remove_propertyChanged(handler) {

		this._removeHandler("propertyChanged", handler);
	}
	function Sys$Component$_addHandler(eventName, handler) {
		Sys.Observer.addEventHandler(this, eventName, handler);
	}
	function Sys$Component$_removeHandler(eventName, handler) {
		Sys.Observer.removeEventHandler(this, eventName, handler);
	}
	function Sys$Component$beginUpdate() {
		this._updating = true;
	}
	function Sys$Component$dispose() {
		Sys.Observer.raiseEvent(this, "disposing");
		Sys.Observer.clearEventHandlers(this);
		Sys.Application.unregisterDisposableObject(this);
		Sys.Application.removeComponent(this);
		this._updating = this._initialized = this._observerContext = this._isLinkPending = null;
	}
	function Sys$Component$endUpdate() {
		this._updating = false;
		if (!this._initialized) this.initialize();
		this.updated();
	}
	function Sys$Component$initialize() {
		this._initialized = true;
	}
	function Sys$Component$link() {
		this._isLinkPending = false;
	}
	function Sys$Component$raisePropertyChanged(propertyName) {
		/// <summary locid="M:J#Sys.Component.raisePropertyChanged" />
		/// <param name="propertyName" type="String"></param>

		Sys.Observer.raisePropertyChanged(this, propertyName);
	}
	function Sys$Component$updated() {
	}
Sys.Component.prototype = {
	get_events: Sys$Component$get_events,
	get_id: Sys$Component$get_id,
	set_id: Sys$Component$set_id,
	get_isLinkPending: Sys$Component$get_isLinkPending,
	set_isLinkPending: Sys$Component$set_isLinkPending,
	get_isInitialized: Sys$Component$get_isInitialized,
	get_isUpdating: Sys$Component$get_isUpdating,
	add_disposing: Sys$Component$add_disposing,
	remove_disposing: Sys$Component$remove_disposing,
	add_propertyChanged: Sys$Component$add_propertyChanged,
	remove_propertyChanged: Sys$Component$remove_propertyChanged,
	_addHandler: Sys$Component$_addHandler,
	_removeHandler: Sys$Component$_removeHandler,
	beginUpdate: Sys$Component$beginUpdate,
	dispose: Sys$Component$dispose,
	endUpdate: Sys$Component$endUpdate,
	initialize: Sys$Component$initialize,
	raisePropertyChanged: Sys$Component$raisePropertyChanged,
	updated: Sys$Component$updated,
	link: Sys$Component$link
}
Sys.Component.registerClass('Sys.Component', null, Sys.IDisposable, Sys.INotifyPropertyChange, Sys.INotifyDisposing);

Sys.Component._setProperties = function Sys$Component$_setProperties(target, properties) {
	/// <summary locid="M:J#Sys.Component._setProperties" />
	/// <param name="target"></param>
	/// <param name="properties"></param>

	var current;
	var targetType = Object.getType(target);
	var isObject = (targetType === Object) || (targetType === Sys.UI.DomElement);
	var isComponent = Sys.Component.isInstanceOfType(target) && !target.get_isUpdating();
	if (isComponent) target.beginUpdate();
	for (var name in properties) {
		var val = properties[name];
		var getter = isObject ? null : target["get_" + name];
		if (isObject || typeof(getter) !== 'function') {
			var targetVal = target[name];
			if (!val || (typeof(val) !== 'object') || (isObject && !targetVal)) {
				target[name] = val;
			}
			else {
				this._setProperties(targetVal, val);
			}
		}
		else {
			var setter = target["set_" + name];
			if (typeof(setter) === 'function') {
				setter.apply(target, [val]);
			}
			else if (val instanceof Array) {
				current = getter.apply(target);
				if (!(current instanceof Array)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNotAnArray, name));
				for (var i = 0, j = current.length, l= val.length; i < l; i++, j++) {
					current[j] = val[i];
				}
			}
			else if ((typeof(val) === 'object') && (Object.getType(val) === Object)) {
				current = getter.apply(target);
				if ((typeof(current) === 'undefined') || (current === null)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNullOrUndefined, name));
				this._setProperties(current, val);
			}
			else {
				throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
			}
		}
	}
	if (isComponent) target.endUpdate();
}

Sys.Component._setReferences = function Sys$Component$_setReferences(component, references) {
	var reference, refs = {};
	forIn(references, function(id, name) {
		refs[name] = reference = $find(id);
		if (!reference) throw Error.invalidOperation(String.format(Sys.Res.referenceNotFound, id));
	});
	Sys._setProps(component, refs);
}

$create = Sys.Component.create = function Sys$Component$create(type, properties, events, references, element) {
	/// <summary locid="M:J#Sys.Component.create" />
	/// <param name="type" type="Type"></param>
	/// <param name="properties" optional="true" mayBeNull="true"></param>
	/// <param name="events" optional="true" mayBeNull="true"></param>
	/// <param name="references" optional="true" mayBeNull="true"></param>
	/// <param name="element" domElement="true" optional="true" mayBeNull="true"></param>
	/// <returns type="Object"></returns>

	if (type.inheritsFrom(Sys.UI.Behavior) || type.inheritsFrom(Sys.UI.Control)) {
		if (!element) throw Error.argument('element', Sys.Res.createNoDom);
	}
	else if (element) throw Error.argument('element', Sys.Res.createComponentOnDom);
	var component = (element ? new type(element): new type());
	callIf(component, "beginUpdate");
	if (properties) {
		Sys.Component._setProperties(component, properties);
	}
	if (events) {
		for (var name in events) {
			if (!(component["add_" + name] instanceof Function)) throw new Error.invalidOperation(String.format(Sys.Res.undefinedEvent, name));
			if (!(events[name] instanceof Function)) throw new Error.invalidOperation(Sys.Res.eventHandlerNotFunction);
			component["add_" + name](events[name]);
		}
	}
	Sys.Component._register(component, references);
	return component;
}
Sys.Component._register = function Sys$Component$_register(component, references, dontUpdate) {
	var ret;
	if (Sys.Component.isInstanceOfType(component)) {
		ret = true;
		var app = Sys.Application;
		if (component.get_id()) {
			app.addComponent(component);
		}
		if (app.get_isCreatingComponents()) {
			app._createdComponents.push(component);
			if (references) {
				app._addComponentToSecondPass(component, references);
			}
			else if (!dontUpdate) {
				component.endUpdate();
			}
		}
		else {
			if (references) {
				Sys.Component._setReferences(component, references);
			}
			if (!dontUpdate) {
				component.endUpdate();
			}
		}
	}
	return ret;
}

Sys._getComponent = function Sys$_getComponent(found, selector, context) {
	var component = Sys.Application.findComponent(selector);
	if (component) {
		found.push(component);
	}
}

Sys._2Pass = function Sys$_2Pass(callback) {
	var app = Sys.Application,
		useTwoPass = !app.get_isCreatingComponents();
	if (useTwoPass) app.beginCreateComponents();
	foreach(callback, function(c) { c() });
	if (useTwoPass) app.endCreateComponents();
}
Sys.UI.MouseButton = function Sys$UI$MouseButton() {
	/// <summary locid="M:J#Sys.UI.MouseButton.#ctor" />
	/// <field name="leftButton" type="Number" integer="true" static="true" locid="F:J#Sys.UI.MouseButton.leftButton"></field>
	/// <field name="middleButton" type="Number" integer="true" static="true" locid="F:J#Sys.UI.MouseButton.middleButton"></field>
	/// <field name="rightButton" type="Number" integer="true" static="true" locid="F:J#Sys.UI.MouseButton.rightButton"></field>
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}




Sys.UI.MouseButton.prototype = {
	leftButton: 0,
	middleButton: 1,
	rightButton: 2
}
Sys.UI.MouseButton.registerEnum("Sys.UI.MouseButton");
Sys.UI.Key = function Sys$UI$Key() {
	/// <summary locid="M:J#Sys.UI.Key.#ctor" />
	/// <field name="backspace" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.backspace"></field>
	/// <field name="tab" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.tab"></field>
	/// <field name="enter" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.enter"></field>
	/// <field name="esc" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.esc"></field>
	/// <field name="space" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.space"></field>
	/// <field name="pageUp" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.pageUp"></field>
	/// <field name="pageDown" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.pageDown"></field>
	/// <field name="end" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.end"></field>
	/// <field name="home" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.home"></field>
	/// <field name="left" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.left"></field>
	/// <field name="up" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.up"></field>
	/// <field name="right" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.right"></field>
	/// <field name="down" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.down"></field>
	/// <field name="del" type="Number" integer="true" static="true" locid="F:J#Sys.UI.Key.del"></field>
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}















Sys.UI.Key.prototype = {
	backspace: 8,
	tab: 9,
	enter: 13,
	esc: 27,
	space: 32,
	pageUp: 33,
	pageDown: 34,
	end: 35,
	home: 36,
	left: 37,
	up: 38,
	right: 39,
	down: 40,
	del: 127
}
Sys.UI.Key.registerEnum("Sys.UI.Key");
Sys.UI.Point = function Sys$UI$Point(x, y) {
	/// <summary locid="M:J#Sys.UI.Point.#ctor" />
	/// <param name="x" type="Number" integer="true"></param>
	/// <param name="y" type="Number" integer="true"></param>
	/// <field name="x" type="Number" integer="true" locid="F:J#Sys.UI.Point.x"></field>
	/// <field name="y" type="Number" integer="true" locid="F:J#Sys.UI.Point.y"></field>

	this.x = x;
	this.y = y;
}
Sys.UI.Point.registerClass('Sys.UI.Point');
Sys.UI.Bounds = function Sys$UI$Bounds(x, y, width, height) {
	/// <summary locid="M:J#Sys.UI.Bounds.#ctor" />
	/// <param name="x" type="Number" integer="true"></param>
	/// <param name="y" type="Number" integer="true"></param>
	/// <param name="width" type="Number" integer="true"></param>
	/// <param name="height" type="Number" integer="true"></param>
	/// <field name="x" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.x"></field>
	/// <field name="y" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.y"></field>
	/// <field name="width" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.width"></field>
	/// <field name="height" type="Number" integer="true" locid="F:J#Sys.UI.Bounds.height"></field>

	this.x = x;
	this.y = y;
	this.height = height;
	this.width = width;
}
Sys.UI.Bounds.registerClass('Sys.UI.Bounds');
Sys.UI.DomEvent = function Sys$UI$DomEvent(eventObject) {
	/// <summary locid="M:J#Sys.UI.DomEvent.#ctor" />
	/// <param name="eventObject"></param>
	/// <field name="altKey" type="Boolean" locid="F:J#Sys.UI.DomEvent.altKey"></field>
	/// <field name="button" type="Sys.UI.MouseButton" locid="F:J#Sys.UI.DomEvent.button"></field>
	/// <field name="charCode" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.charCode"></field>
	/// <field name="clientX" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.clientX"></field>
	/// <field name="clientY" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.clientY"></field>
	/// <field name="ctrlKey" type="Boolean" locid="F:J#Sys.UI.DomEvent.ctrlKey"></field>
	/// <field name="keyCode" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.keyCode"></field>
	/// <field name="offsetX" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.offsetX"></field>
	/// <field name="offsetY" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.offsetY"></field>
	/// <field name="screenX" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.screenX"></field>
	/// <field name="screenY" type="Number" integer="true" locid="F:J#Sys.UI.DomEvent.screenY"></field>
	/// <field name="shiftKey" type="Boolean" locid="F:J#Sys.UI.DomEvent.shiftKey"></field>
	/// <field name="target" locid="F:J#Sys.UI.DomEvent.target"></field>
	/// <field name="type" type="String" locid="F:J#Sys.UI.DomEvent.type"></field>

	var ev = eventObject;
	var etype = this.type = ev.type.toLowerCase();
	this.rawEvent = ev;
	this.altKey = ev.altKey;
	if (typeof(ev.button) !== 'undefined') {
		this.button = (typeof(ev.which) !== 'undefined') ? ev.button :
			(ev.button === 4) ? Sys.UI.MouseButton.middleButton :
			(ev.button === 2) ? Sys.UI.MouseButton.rightButton :
			Sys.UI.MouseButton.leftButton;
	}
	if (etype === 'keypress') {
		this.charCode = ev.charCode || ev.keyCode;
	}
	else if (ev.keyCode && (ev.keyCode === 46)) {
		this.keyCode = 127;
	}
	else {
		this.keyCode = ev.keyCode;
	}
	this.clientX = ev.clientX;
	this.clientY = ev.clientY;
	this.ctrlKey = ev.ctrlKey;
	this.target = ev.target ? ev.target : ev.srcElement;
	if (etype.substr(0, 3) !== 'key') {
		if ((typeof(ev.offsetX) !== 'undefined') && (typeof(ev.offsetY) !== 'undefined')) {
			this.offsetX = ev.offsetX;
			this.offsetY = ev.offsetY;
		}
		else if (this.target && (this.target.nodeType !== 3) && (typeof(ev.clientX) === 'number')) {
			var loc = Sys.UI.DomElement.getLocation(this.target);
			var w = Sys.UI.DomElement._getWindow(this.target);
			this.offsetX = (w.pageXOffset || 0) + ev.clientX - loc.x;
			this.offsetY = (w.pageYOffset || 0) + ev.clientY - loc.y;
		}
	}
	this.screenX = ev.screenX;
	this.screenY = ev.screenY;
	this.shiftKey = ev.shiftKey;
}

	function Sys$UI$DomEvent$preventDefault() {
		/// <summary locid="M:J#Sys.UI.DomEvent.preventDefault" />
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this.rawEvent.preventDefault) {
			this.rawEvent.preventDefault();
		}
		else if (window.event) {
			this.rawEvent.returnValue = false;
		}
	}
	function Sys$UI$DomEvent$stopPropagation() {
		/// <summary locid="M:J#Sys.UI.DomEvent.stopPropagation" />
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this.rawEvent.stopPropagation) {
			this.rawEvent.stopPropagation();
		}
		else if (window.event) {
			this.rawEvent.cancelBubble = true;
		}
	}
Sys.UI.DomEvent.prototype = {
	preventDefault: Sys$UI$DomEvent$preventDefault,
	stopPropagation: Sys$UI$DomEvent$stopPropagation
}
Sys.UI.DomEvent.registerClass('Sys.UI.DomEvent');

var simulatingEvent = false;
$simulateMutationEvent = Sys.UI.DomEvent.simulate = function Sys$UI$DomEvent$simulateMutationEvent(element, eventName, bubbles, cancelable) {
	// Don't bubble the event by default
	if (arguments.length < 3) {
		bubbles = false;
	}

	// Allow calceling the event by default
	if (arguments.length < 4) {
		cancelable = true;
	}
	
	try {
		simulatingEvent = true;
		if (element.dispatchEvent) {
			var evt = document.createEvent("events");
			evt.initEvent(eventName, bubbles, cancelable);
			element.dispatchEvent(evt);
		}
		else if (element.fireEvent) {
			element.fireEvent("on" + eventName);
		}
	}
	finally {
		simulatingEvent = false;
	}
}

function simulateError(e) {
	setTimeout(function () {
		throw e;
	}, 1);
}

$addHandler = Sys.UI.DomEvent.addHandler = function Sys$UI$DomEvent$addHandler(elements, eventName, handler, autoRemove) {
	/// <summary locid="M:J#Sys.UI.DomEvent.addHandler" />
	/// <param name="elements"></param>
	/// <param name="eventName" type="String"></param>
	/// <param name="handler" type="Function"></param>
	/// <param name="autoRemove" type="Boolean" optional="true" mayBeNull="true"></param>

	if (eventName === "error") throw Error.invalidOperation(Sys.Res.addHandlerCantBeUsedForError);
	Sys._queryAll(elements, function(element) {
		if (!element._events) {
			element._events = {};
		}
		var eventCache = element._events[eventName];
		if (!eventCache) {
			element._events[eventName] = eventCache = [];
		}
		var browserHandler;
		if (element.addEventListener) {
			browserHandler = function(e) {
				if (simulatingEvent && Sys.Browser.name === "Firefox") {
					try {
						return handler.call(element, new Sys.UI.DomEvent(e));
					}
					catch (e) {
						simulateError(e);
					}
				}
				else {
					return handler.call(element, new Sys.UI.DomEvent(e));
				}
			}
			element.addEventListener(eventName, browserHandler, false);
		}
		else if (element.attachEvent) {
			browserHandler = function() {
				var ex, ev = {};
				try {ev = Sys.UI.DomElement._getWindow(element).event} catch(ex) {}
				return handler.call(element, new Sys.UI.DomEvent(ev));
			}
			element.attachEvent('on' + eventName, browserHandler);
		}
		eventCache.push({handler: handler, browserHandler: browserHandler, autoRemove: autoRemove });
		if (autoRemove) {
			Sys.UI.DomElement._onDispose(element, Sys.UI.DomEvent._disposeHandlers);
		}
	});
}

Sys.registerPlugin({
	name: "addHandler",
	description: "A cross-browser way to add a DOM event handler to an element.",
	plugin: Sys.UI.DomEvent.addHandler,
	parameters: [
		{name: "elements", description: "The element or text node, or array of elements or text nodes, that exposes the event. You may also pass a DOM selector or array of DOM selectors."},
		{name: "eventName", type: "String", description: "The name of the event. Do not include the 'on' prefix, for example, 'click' instead of 'onclick'."},
		{name: "handler", type: "Function", description: "The event handler to add."},
		{name: "autoRemove", type: "Boolean", description: "Whether the handler should be removed automatically when the element is disposed of, such as when an UpdatePanel refreshes, or Sys.Application.disposeElement is called."}
	]
});

$addHandlers = Sys.UI.DomEvent.addHandlers = function Sys$UI$DomEvent$addHandlers(elements, events, handlerOwner, autoRemove) {
	/// <summary locid="M:J#Sys.UI.DomEvent.addHandlers" />
	/// <param name="elements"></param>
	/// <param name="events" type="Object"></param>
	/// <param name="handlerOwner" optional="true" mayBeNull="true"></param>
	/// <param name="autoRemove" type="Boolean" optional="true" mayBeNull="true"></param>

	Sys._queryAll(elements, function(element) {
		for (var name in events) {
			var handler = events[name];
			if (typeof(handler) !== 'function') throw Error.invalidOperation(Sys.Res.cantAddNonFunctionhandler);
			if (handlerOwner) {
				handler = Function.createDelegate(handlerOwner, handler);
			}
			$addHandler(element, name, handler, autoRemove || false);
		}
	});
}

Sys.registerPlugin({
	name: "addHandlers",
	description: "Adds a list of event handlers to an element. If a handlerOwner is specified, delegates are created with each of the handlers.",
	plugin: Sys.UI.DomEvent.addHandlers,
	parameters: [
		{name: "elements", description: "The element or text node, or array of element or text nodes, that exposes the event. You may also pass a DOM selector or array of DOM selectors."},
		{name: "events", type: "Object", description: "A dictionary of event handlers."},
		{name: "handlerOwner", description: "The owner of the event handlers that will be the this pointer for the delegates that will be created from the handlers."},
		{name: "autoRemove", type: "Boolean", description: "Whether the handler should be removed automatically when the element is disposed of, such as when an UpdatePanel refreshes, or Sys.Application.disposeElement is called."}
	]
});

$clearHandlers = Sys.UI.DomEvent.clearHandlers = function Sys$UI$DomEvent$clearHandlers(elements) {
	/// <summary locid="M:J#Sys.UI.DomEvent.clearHandlers" />
	/// <param name="elements"></param>

	Sys._queryAll(elements, function(element) {
		Sys.UI.DomEvent._clearHandlers(element, false);
	});
}

Sys.registerPlugin({
	name: "clearHandlers",
	description: "Clears all the event handlers that were added to the element or array of elements. You may also pass a DOM selector or array of DOM selectors.",
	plugin: Sys.UI.DomEvent.clearHandlers,
	parameters: [
		{name: "elements", description: "The element or text node, or an array of elements or text nodes."}
	]
});

Sys.UI.DomEvent._clearHandlers = function Sys$UI$DomEvent$_clearHandlers(elements, autoRemoving) {
	Sys._queryAll(elements, function(element) {
		if (element._events) {
			var cache = element._events;
			for (var name in cache) {
				var handlers = cache[name];
				for (var i = handlers.length - 1; i >= 0; i--) {
					var entry = handlers[i];
					if (!autoRemoving || entry.autoRemove) {
						$removeHandler(element, name, entry.handler);
					}
				}
			}
		}
	});
}

Sys.UI.DomEvent._disposeHandlers = function Sys$UI$DomEvent$_disposeHandlers() {
	Sys.UI.DomEvent._clearHandlers(this, true);
}

$removeHandler = Sys.UI.DomEvent.removeHandler = function Sys$UI$DomEvent$removeHandler(elements, eventName, handler) {
	/// <summary locid="M:J#Sys.UI.DomEvent.removeHandler" />
	/// <param name="elements"></param>
	/// <param name="eventName" type="String"></param>
	/// <param name="handler" type="Function"></param>

	Sys.UI.DomEvent._removeHandler(elements, eventName, handler);
}
Sys.UI.DomEvent._removeHandler = function Sys$UI$DomEvent$_removeHandler(elements, eventName, handler) {
	Sys._queryAll(elements, function(element) {
		var browserHandler = null;
		if ((typeof(element._events) !== 'object') || !element._events) {
			// temporary debugging code, should be removed as soon as cause of error is discovered
			if (typeof(console) !== 'undefined' && console.error) {
				console.error("element events does not exist");
				console.error("handler: " + handler.toString());
				console.error(Sys.Res.eventHandlerInvalid);
			}
			return;
		}
		var cache = element._events[eventName];
		if (!(cache instanceof Array)) {
			// temporary debugging code, should be removed as soon as cause of error is discovered
			if (typeof(console) !== 'undefined' && console.error) {
				console.error("cache is not an array: " + cache);
				console.error("handler: " + handler.toString());
				console.error(Sys.Res.eventHandlerInvalid);
			}
			return;
		}
		for (var i = 0, l = cache.length; i < l; i++) {
			if (cache[i].handler === handler) {
				browserHandler = cache[i].browserHandler;
				break;
			}
		}
		if (typeof(browserHandler) !== 'function') {
			// temporary debugging code, should be removed as soon as cause of error is discovered
			if (typeof(console) !== 'undefined' && console.error) {
				console.error("handler event could not be found");
				console.error("handler: " + handler.toString());
				console.error(Sys.Res.eventHandlerInvalid);
			}
			return;
		}
		if (element.removeEventListener) {
			element.removeEventListener(eventName, browserHandler, false);
		}
		else if (element.detachEvent) {
			element.detachEvent('on' + eventName, browserHandler);
		}
		cache.splice(i, 1);

		if (cache.length === 0) {
		delete element._events[eventName];

		for (var prop in element._events) {
			if (element._events.hasOwnProperty(prop)) {
				return;
			}
		}

		element._events = null;
		}
	});
}

Sys.registerPlugin({
	name: "removeHandler",
	description: "A cross-browser way to remove a DOM event handler from an element. You may also pass a DOM selector or array of DOM selectors.",
	plugin: Sys.UI.DomEvent.removeHandler,
	parameters: [
		{name: "elements", description: "The element or text node, or array of elements or text nodes, that exposes the event."},
		{name: "eventName", type: "String", description: "The name of the event. Do not include the 'on' prefix, for example, 'click' instead of 'onclick'."},
		{name: "handler", type: "Function", description: "The event handler to remove."}
	]
});

Sys.UI.DomEvent._ensureDomNode = function Sys$UI$DomEvent$_ensureDomNode(element) {
	if (element && element.tagName && (element.tagName.toUpperCase() === "SCRIPT")) return;
	var doc = element ? (element.ownerDocument || element.document || element) : null;
	if (!element ||
		((typeof(element.document) !== 'object') && (element != doc) && (typeof(element.nodeType) !== 'number'))) {
		throw Error.argument("element", Sys.Res.argumentDomNode);
	}
}

Sys._queryAll = function Sys$_queryAll(selector, callback) {
	var elements = selector;
	if (typeof(selector) === "string") {
		elements = Sys.query(selector);
	}
	Sys._foreach(elements, function(selector) {
		var elements = selector;
		if (typeof(selector) === "string") {
			elements = Sys.query(selector);
		}
		Sys._foreach(elements, function(element) {
			Sys.UI.DomEvent._ensureDomNode(element);
			var nodeType = element.nodeType;
			if (nodeType === 3 || nodeType === 2 || nodeType === 8) return;
			callback(element);
		});
	});
}
Sys.UI.DomElement = function Sys$UI$DomElement() {
	/// <summary locid="M:J#Sys.UI.DomElement.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}
Sys.UI.DomElement.registerClass('Sys.UI.DomElement');

Sys.UI.DomElement.addCssClass = function Sys$UI$DomElement$addCssClass(element, className) {
	/// <summary locid="M:J#Sys.UI.DomElement.addCssClass" />
	/// <param name="element" domElement="true"></param>
	/// <param name="className" type="String"></param>

	if (!Sys.UI.DomElement.containsCssClass(element, className)) {
		if (element.className === '') {
			element.className = className;
		}
		else {
			element.className += ' ' + className;
		}
	}
}

Sys.UI.DomElement.containsCssClass = function Sys$UI$DomElement$containsCssClass(element, className) {
	/// <summary locid="M:J#Sys.UI.DomElement.containsCssClass" />
	/// <param name="element" domElement="true"></param>
	/// <param name="className" type="String"></param>
	/// <returns type="Boolean"></returns>

	return Array.contains(element.className.split(' '), className);
}

Sys.UI.DomElement.getBounds = function Sys$UI$DomElement$getBounds(element) {
	/// <summary locid="M:J#Sys.UI.DomElement.getBounds" />
	/// <param name="element" domElement="true"></param>
	/// <returns type="Sys.UI.Bounds"></returns>

	var offset = Sys.UI.DomElement.getLocation(element);

	return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
}

$get = Sys.UI.DomElement.getElementById = function Sys$UI$DomElement$getElementById(id, element) {
	/// <summary locid="M:J#Sys.UI.DomElement.getElementById" />
	/// <param name="id" type="String"></param>
	/// <param name="element" domElement="true" optional="true" mayBeNull="true"></param>
	/// <returns domElement="true" mayBeNull="true"></returns>

	return Sys.get("#" + id, element || null);
}

if (document.documentElement.getBoundingClientRect) {
	Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
		/// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
		/// <param name="element" domElement="true"></param>
		/// <returns type="Sys.UI.Point"></returns>

		if (element.self || element.nodeType === 9 ||
			(element === document.documentElement) ||
			(element.parentNode === element.ownerDocument.documentElement)) {
			return new Sys.UI.Point(0, 0);
		}
		var clientRect = element.getBoundingClientRect();
		if (!clientRect) {
			return new Sys.UI.Point(0,0);
		}
		var ex, documentElement = element.ownerDocument.documentElement,
			offsetX = Math.round(clientRect.left) + documentElement.scrollLeft,
			offsetY = Math.round(clientRect.top) + documentElement.scrollTop;
		if (isBrowser("InternetExplorer")) {
			try {
				var f = element.ownerDocument.parentWindow.frameElement || null;
				if (f) {
					var offset = (f.frameBorder === "0" || f.frameBorder === "no") ? 2 : 0;
					offsetX += offset;
					offsetY += offset;
				}
			}
			catch(ex) {
			}
			if (Sys.Browser.version === 7 && !document.documentMode) {
				var body = document.body,
					rect = body.getBoundingClientRect(),
					zoom = (rect.right-rect.left) / body.clientWidth;
				zoom = Math.round(zoom * 100);
				zoom = (zoom - zoom % 5) / 100;
				if (!isNaN(zoom) && (zoom !== 1)) {
					offsetX = Math.round(offsetX / zoom);
					offsetY = Math.round(offsetY / zoom);
				}
			}
			if ((document.documentMode || 0) < 8) {
				offsetX -= documentElement.clientLeft;
				offsetY -= documentElement.clientTop;
			}
		}
		return new Sys.UI.Point(offsetX, offsetY);
	}
}
else if (isBrowser("Safari")) {
	Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
		/// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
		/// <param name="element" domElement="true"></param>
		/// <returns type="Sys.UI.Point"></returns>

		if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);

		var offsetX = 0, offsetY = 0,
			parent,
			previous = null,
			previousStyle = null,
			currentStyle;
		for (parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
			currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
			var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;

			if ((parent.offsetLeft || parent.offsetTop) &&
				((tagName !== "BODY") || (!previousStyle || previousStyle.position !== "absolute"))) {
				offsetX += parent.offsetLeft;
				offsetY += parent.offsetTop;
			}

			if (previous && Sys.Browser.version >= 3) {
				offsetX += parseInt(currentStyle.borderLeftWidth);
				offsetY += parseInt(currentStyle.borderTopWidth);
			}
		}

		currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
		var elementPosition = currentStyle ? currentStyle.position : null;
		if (!elementPosition || (elementPosition !== "absolute")) {
			for (parent = element.parentNode; parent; parent = parent.parentNode) {
				tagName = parent.tagName ? parent.tagName.toUpperCase() : null;

				if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop)) {
					offsetX -= (parent.scrollLeft || 0);
					offsetY -= (parent.scrollTop || 0);
				}
				currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
				var parentPosition = currentStyle ? currentStyle.position : null;

				if (parentPosition && (parentPosition === "absolute")) break;
			}
		}
		return new Sys.UI.Point(offsetX, offsetY);
	}
}
else {
	Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
		/// <summary locid="M:J#Sys.UI.DomElement.getLocation" />
		/// <param name="element" domElement="true"></param>
		/// <returns type="Sys.UI.Point"></returns>

		if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);

		var offsetX = 0, offsetY = 0,
			parent,
			previous = null,
			previousStyle = null,
			currentStyle = null;
		for (parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
			var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
			currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);

			if ((parent.offsetLeft || parent.offsetTop) &&
				!((tagName === "BODY") &&
				(!previousStyle || previousStyle.position !== "absolute"))) {

				offsetX += parent.offsetLeft;
				offsetY += parent.offsetTop;
			}

			if (previous !== null && currentStyle) {
				if ((tagName !== "TABLE") && (tagName !== "TD") && (tagName !== "HTML")) {
					offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
					offsetY += parseInt(currentStyle.borderTopWidth) || 0;
				}
				if (tagName === "TABLE" &&
					(currentStyle.position === "relative" || currentStyle.position === "absolute")) {
					offsetX += parseInt(currentStyle.marginLeft) || 0;
					offsetY += parseInt(currentStyle.marginTop) || 0;
				}
			}
		}

		currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
		var elementPosition = currentStyle ? currentStyle.position : null;
		if (!elementPosition || (elementPosition !== "absolute")) {
			for (parent = element.parentNode; parent; parent = parent.parentNode) {
				tagName = parent.tagName ? parent.tagName.toUpperCase() : null;

				if ((tagName !== "BODY") && (tagName !== "HTML") && (parent.scrollLeft || parent.scrollTop)) {

					offsetX -= (parent.scrollLeft || 0);
					offsetY -= (parent.scrollTop || 0);

					currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
					if (currentStyle) {
						offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
						offsetY += parseInt(currentStyle.borderTopWidth) || 0;
					}
				}
			}
		}
		return new Sys.UI.Point(offsetX, offsetY);
	}
}

Sys.UI.DomElement.isDomElement = function Sys$UI$DomElement$isDomElement(obj) {
	/// <summary locid="M:J#Sys.UI.DomElement.isDomElement" />
	/// <param name="obj"></param>
	/// <returns type="Boolean"></returns>

	return Sys._isDomElement(obj);
}

Sys.UI.DomElement.removeCssClass = function Sys$UI$DomElement$removeCssClass(element, className) {
	/// <summary locid="M:J#Sys.UI.DomElement.removeCssClass" />
	/// <param name="element" domElement="true"></param>
	/// <param name="className" type="String"></param>

	var currentClassName = ' ' + element.className + ' ';
	var index = currentClassName.indexOf(' ' + className + ' ');
	if (index >= 0) {
		element.className = (currentClassName.substr(0, index) + ' ' +
			currentClassName.substring(index + className.length + 1, currentClassName.length)).trim();
	}
}

Sys.UI.DomElement.resolveElement = function Sys$UI$DomElement$resolveElement(elementOrElementId, containerElement) {
	/// <summary locid="M:J#Sys.UI.DomElement.resolveElement" />
	/// <param name="elementOrElementId" mayBeNull="true"></param>
	/// <param name="containerElement" domElement="true" optional="true" mayBeNull="true"></param>
	/// <returns domElement="true"></returns>

	var el = elementOrElementId;
	if (!el) return null;
	if (typeof(el) === "string") {
		el = Sys.get("#" + el, containerElement);
		if (!el) {
			throw Error.argument("elementOrElementId", String.format(Sys.Res.elementNotFound, elementOrElementId));
		}
	}
	else if(!Sys.UI.DomElement.isDomElement(el)) {
		throw Error.argument("elementOrElementId", Sys.Res.expectedElementOrId);
	}
	return el;
}

Sys.UI.DomElement.raiseBubbleEvent = function Sys$UI$DomElement$raiseBubbleEvent(source, args) {
	/// <summary locid="M:J#Sys.UI.DomElement.raiseBubbleEvent" />
	/// <param name="source" domElement="true"></param>
	/// <param name="args" type="Sys.EventArgs"></param>

	var target = source;
	while (target) {
		var control = target.control;
		if (control && control.onBubbleEvent && control.raiseBubbleEvent) {
			if (!control.onBubbleEvent(source, args)) {
				control._raiseBubbleEvent(source, args);
			}
			return;
		}
		target = target.parentNode;
	}
}

Sys.UI.DomElement._ensureGet = function Sys$UI$DomElement$_ensureGet(selector, context, arg) {
	var ret = Sys.get(selector, context);
	if (!ret && typeof(selector) === "string") {
		throw Error.invalidOperation(String.format(Sys.Res.selectorNotFound, selector));
	}
	else if (ret && !this.isDomElement(ret)) {
		throw Error.invalidOperation(String.format(Sys.Res.expectedDomElementOrSelector, arg));
	}
	return ret;
}

Sys.UI.DomElement.setLocation = function Sys$UI$DomElement$setLocation(element, x, y) {
	/// <summary locid="M:J#Sys.UI.DomElement.setLocation" />
	/// <param name="element" domElement="true"></param>
	/// <param name="x" type="Number" integer="true"></param>
	/// <param name="y" type="Number" integer="true"></param>

	var style = element.style;
	style.position = 'absolute';
	style.left = x + "px";
	style.top = y + "px";
}

Sys.UI.DomElement.toggleCssClass = function Sys$UI$DomElement$toggleCssClass(element, className) {
	/// <summary locid="M:J#Sys.UI.DomElement.toggleCssClass" />
	/// <param name="element" domElement="true"></param>
	/// <param name="className" type="String"></param>

	if (Sys.UI.DomElement.containsCssClass(element, className)) {
		Sys.UI.DomElement.removeCssClass(element, className);
	}
	else {
		Sys.UI.DomElement.addCssClass(element, className);
	}
}

Sys.UI.DomElement.getVisibilityMode = function Sys$UI$DomElement$getVisibilityMode(element) {
	/// <summary locid="M:J#Sys.UI.DomElement.getVisibilityMode" />
	/// <param name="element" domElement="true"></param>
	/// <returns type="Sys.UI.VisibilityMode"></returns>

	return (element._visibilityMode === Sys.UI.VisibilityMode.hide) ?
		Sys.UI.VisibilityMode.hide :
		Sys.UI.VisibilityMode.collapse;
}
Sys.UI.DomElement.setVisibilityMode = function Sys$UI$DomElement$setVisibilityMode(element, value) {
	/// <summary locid="M:J#Sys.UI.DomElement.setVisibilityMode" />
	/// <param name="element" domElement="true"></param>
	/// <param name="value" type="Sys.UI.VisibilityMode"></param>

	Sys.UI.DomElement._ensureOldDisplayMode(element);
	if (element._visibilityMode !== value) {
		element._visibilityMode = value;
		if (Sys.UI.DomElement.getVisible(element) === false) {
			if (element._visibilityMode === Sys.UI.VisibilityMode.hide) {
				element.style.display = element._oldDisplayMode;
			}
			else {
				element.style.display = 'none';
			}
		}
		element._visibilityMode = value;
	}
}

Sys.UI.DomElement.getVisible = function Sys$UI$DomElement$getVisible(element) {
	/// <summary locid="M:J#Sys.UI.DomElement.getVisible" />
	/// <param name="element" domElement="true"></param>
	/// <returns type="Boolean"></returns>

	var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
	if (!style) return true;
	return (style.visibility !== 'hidden') && (style.display !== 'none');
}
Sys.UI.DomElement.setVisible = function Sys$UI$DomElement$setVisible(element, value, fn) {
	/// <summary locid="M:J#Sys.UI.DomElement.setVisible" />
	/// <param name="element" domElement="true"></param>
	/// <param name="value" type="Boolean"></param>
	/// <param name="fn" type="Function"></param>

	var isInitializing = false;
	if (typeof element._lastVisibility === 'undefined') {
		isInitializing = true;
	}

	element._lastVisibility = value;

	if (value !== Sys.UI.DomElement.getVisible(element)) {
		Sys.UI.DomElement._ensureOldDisplayMode(element);

		if (fn) {
			fn(element, value, isInitializing, element._oldDisplayMode);
		}
		else {
			element.style.visibility = value ? 'visible' : 'hidden';
			if (value || (element._visibilityMode === Sys.UI.VisibilityMode.hide)) {
				element.style.display = element._oldDisplayMode;
			}
			else {
				element.style.display = 'none';
			}
		}
	}
}

Sys.UI.DomElement.setCommand = function Sys$UI$DomElement$setCommand(commandSource, commandName, commandArgument, commandTarget) {
	/// <summary locid="M:J#Sys.UI.DomElement.setCommand" />
	/// <param name="commandSource"></param>
	/// <param name="commandName" type="String" mayBeNull="true"></param>
	/// <param name="commandArgument" mayBeNull="true" optional="true"></param>
	/// <param name="commandTarget" optional="true" mayBeNull="true"></param>

	Sys.UI.DomEvent.addHandler(commandSource, 'click', function() {
		var source = commandTarget || this;
		Sys.UI.DomElement.raiseBubbleEvent(source, new Sys.CommandEventArgs(commandName, commandArgument, this));
	}, true
);
}

Sys.registerPlugin({
	name: "setCommand",
	plugin: Sys.UI.DomElement.setCommand
});

Sys.UI.DomElement._ensureOldDisplayMode = function Sys$UI$DomElement$_ensureOldDisplayMode(element) {
	if (!element._oldDisplayMode) {
		var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
		element._oldDisplayMode = style ? style.display : null;
		if (!element._oldDisplayMode || element._oldDisplayMode === 'none') {
			switch(element.tagName.toUpperCase()) {
				case 'DIV': case 'P': case 'ADDRESS': case 'BLOCKQUOTE': case 'BODY': case 'COL':
				case 'COLGROUP': case 'DD': case 'DL': case 'DT': case 'FIELDSET': case 'FORM':
				case 'H1': case 'H2': case 'H3': case 'H4': case 'H5': case 'H6': case 'HR':
				case 'IFRAME': case 'LEGEND': case 'OL': case 'PRE': case 'TABLE': case 'TD':
				case 'TH': case 'TR': case 'UL':
					element._oldDisplayMode = 'block';
					break;
				case 'LI':
					element._oldDisplayMode = 'list-item';
					break;
				default:
					element._oldDisplayMode = 'inline';
			}
		}
	}
}

Sys.UI.DomElement._getWindow = function Sys$UI$DomElement$_getWindow(element) {
	var doc = element.ownerDocument || element.document || element;
	return doc.defaultView || doc.parentWindow;
}

Sys.UI.DomElement._getCurrentStyle = function Sys$UI$DomElement$_getCurrentStyle(element) {
	if (element.nodeType === 3) return null;
	var w = Sys.UI.DomElement._getWindow(element);
	if (element.documentElement) element = element.documentElement;
	var computedStyle = (w && (element !== w) && w.getComputedStyle) ?
		w.getComputedStyle(element, null) :
		element.currentStyle || element.style;
	if (!computedStyle && isBrowser("Safari") && element.style) {
		var oldDisplay = element.style.display;
		var oldPosition = element.style.position;
		element.style.position = 'absolute';
		element.style.display = 'block';
		var style = w.getComputedStyle(element, null);
		element.style.display = oldDisplay;
		element.style.position = oldPosition;
		computedStyle = {};
		for (var n in style) {
			computedStyle[n] = style[n];
		}
		computedStyle.display = 'none';
	}
	return computedStyle;
}

Sys.UI.DomElement._onDispose = function Sys$UI$DomElement$_onDispose(element, fn) {
	var queue, d = element.dispose;
	if (d !== Sys.UI.DomElement._dispose) {
		element.dispose = Sys.UI.DomElement._dispose;
		element.__msajaxdispose = queue = [];
		if (typeof(d) === "function") {
			queue.push(d);
		}
	}
	else {
		queue = element.__msajaxdispose;
	}
	queue.push(fn);
}

Sys.UI.DomElement._dispose = function Sys$UI$DomElement$_dispose() {
	var queue = this.__msajaxdispose;
	if (queue) {
		for (var i = 0, l = queue.length; i < l; i++) {
			queue[i].apply(this);
		}
	}
	if (this.control && typeof(this.control.dispose) === "function") {
		this.control.dispose();
	}
	this.__msajaxdispose = null;
	this.dispose = null;
}
Sys.IContainer = function Sys$IContainer() {
	throw Error.notImplemented();
}

	function Sys$IContainer$addComponent(component) {
		/// <summary locid="M:J#Sys.IContainer.addComponent" />
		/// <param name="component" type="Sys.Component"></param>

		throw Error.notImplemented();
	}
	function Sys$IContainer$removeComponent(component) {
		/// <summary locid="M:J#Sys.IContainer.removeComponent" />
		/// <param name="component" type="Sys.Component"></param>

		throw Error.notImplemented();
	}
	function Sys$IContainer$findComponent(id) {
		/// <summary locid="M:J#Sys.IContainer.findComponent" />
		/// <param name="id" type="String"></param>
		/// <returns type="Sys.Component"></returns>

		throw Error.notImplemented();
	}
	function Sys$IContainer$getComponents() {
		/// <summary locid="M:J#Sys.IContainer.getComponents" />
		/// <returns type="Array" elementType="Sys.Component"></returns>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
Sys.IContainer.prototype = {
	addComponent: Sys$IContainer$addComponent,
	removeComponent: Sys$IContainer$removeComponent,
	findComponent: Sys$IContainer$findComponent,
	getComponents: Sys$IContainer$getComponents
}
Sys.IContainer.registerInterface("Sys.IContainer");

Sys.ApplicationLoadEventArgs = function Sys$ApplicationLoadEventArgs(components, isPartialLoad) {
	/// <summary locid="M:J#Sys.ApplicationLoadEventArgs.#ctor" />
	/// <param name="components" type="Array" elementType="Sys.Component"></param>
	/// <param name="isPartialLoad" type="Boolean"></param>

	Sys.ApplicationLoadEventArgs.initializeBase(this);
	this._components = components;
	this._isPartialLoad = isPartialLoad;
}
	function Sys$ApplicationLoadEventArgs$get_components() {
		/// <value type="Array" elementType="Sys.Component" locid="P:J#Sys.ApplicationLoadEventArgs.components"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._components;
	}
	function Sys$ApplicationLoadEventArgs$get_isPartialLoad() {
		/// <value type="Boolean" locid="P:J#Sys.ApplicationLoadEventArgs.isPartialLoad"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._isPartialLoad;
	}
Sys.ApplicationLoadEventArgs.prototype = {
	get_components: Sys$ApplicationLoadEventArgs$get_components,
	get_isPartialLoad: Sys$ApplicationLoadEventArgs$get_isPartialLoad
}
Sys.ApplicationLoadEventArgs.registerClass('Sys.ApplicationLoadEventArgs', Sys.EventArgs);
Sys._Application = function Sys$_Application() {
	/// <summary locid="M:J#Sys.Application.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	Sys._Application.initializeBase(this);

	this._disposableObjects = [];
	this._components = {};
	this._createdComponents = [];
	this._secondPassComponents = [];

	this._unloadHandlerDelegate = Function.createDelegate(this, this._unloadHandler);
	Sys.UI.DomEvent.addHandler(window, "unload", this._unloadHandlerDelegate);
}



	function Sys$_Application$get_isCreatingComponents() {
		/// <value type="Boolean" locid="P:J#Sys.Application.isCreatingComponents"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return !!this._creatingComponents;
	}
	function Sys$_Application$get_isDisposing() {
		/// <value type="Boolean" locid="P:J#Sys.Application.isDisposing"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return !!this._disposing;
	}
	function Sys$_Application$add_init(handler) {
		/// <summary locid="E:J#Sys.Application.init" />

		if (this._initialized) {
			handler(this, Sys.EventArgs.Empty);
		}
		else {
			this._addHandler("init", handler);
		}
	}
	function Sys$_Application$remove_init(handler) {

		this._removeHandler("init", handler);
	}
	function Sys$_Application$add_load(handler) {
		/// <summary locid="E:J#Sys.Application.load" />

		this._addHandler("load", handler);
	}
	function Sys$_Application$remove_load(handler) {

		this._removeHandler("load", handler);
	}
	function Sys$_Application$add_unload(handler) {
		/// <summary locid="E:J#Sys.Application.unload" />

		this._addHandler("unload", handler);
	}
	function Sys$_Application$remove_unload(handler) {

		this._removeHandler("unload", handler);
	}
	function Sys$_Application$addComponent(component) {
		/// <summary locid="M:J#Sys.Application.addComponent" />
		/// <param name="component" type="Sys.Component"></param>

		var id = component.get_id();
		if (!id) throw Error.invalidOperation(Sys.Res.cantAddWithoutId);
		if (typeof(this._components[id]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.appDuplicateComponent, id));
		this._components[id] = component;
	}
	function Sys$_Application$beginCreateComponents() {
		/// <summary locid="M:J#Sys.Application.beginCreateComponents" />
		if (arguments.length !== 0) throw Error.parameterCount();
		this._creatingComponents = true;
	}
	function Sys$_Application$dispose() {
		/// <summary locid="M:J#Sys.Application.dispose" />
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._disposing) {
			this._disposing = true;
			if (this._timerCookie) {
				window.clearTimeout(this._timerCookie);
				delete this._timerCookie;
			}
			if (this._endRequestHandler) {
				Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(this._endRequestHandler);
				delete this._endRequestHandler;
			}
			if (this._beginRequestHandler) {
				Sys.WebForms.PageRequestManager.getInstance().remove_beginRequest(this._beginRequestHandler);
				delete this._beginRequestHandler;
			}
			if (window.pageUnload) {
				window.pageUnload(this, Sys.EventArgs.Empty);
			}
			Sys.Observer.raiseEvent(this, "unload");
			var disposableObjects = Array.clone(this._disposableObjects);
			for (var i = 0, l = disposableObjects.length; i < l; i++) {
				var object = disposableObjects[i];
				if (typeof(object) !== "undefined") {
					object.dispose();
					delete object.__msdisposeindex;
				}
			}
			this._disposableObjects.length = 0;

			Sys.UI.DomEvent.removeHandler(window, "unload", this._unloadHandlerDelegate);

			if (Sys._ScriptLoader) {
				var sl = Sys._ScriptLoader.getInstance();
				if (sl) {
					sl.dispose();
				}
			}

			Sys._Application.callBaseMethod(this, 'dispose');
		}
	}
	function Sys$_Application$disposeElement(element, childNodesOnly) {
		/// <summary locid="M:J#Sys._Application.disposeElement" />
		/// <param name="element"></param>
		/// <param name="childNodesOnly" type="Boolean"></param>

		if (element.nodeType === 1) {
			var d, c, i, list,
				allElements = element.getElementsByTagName("*"),
				length = allElements.length,
				children = new Array(length);
			for (i = 0; i < length; i++) {
				children[i] = allElements[i];
			}
			for (i = length - 1; i >= 0; i--) {
				var child = children[i];
				d = child.dispose;
				if (d && typeof(d) === "function") {
					child.dispose();
					child.dispose = null;
					child.__msajaxdispose = null;
				}
				else {
					c = child.control;
					if (c && typeof(c.dispose) === "function") {
						c.dispose();
					}
				}
				list = child._behaviors;
				if (list) {
					this._disposeComponents(list);
				}
				list = child._components;
				if (list) {
					this._disposeComponents(list);
					child._components = null;
				}
			}
			if (!childNodesOnly) {
				d = element.dispose;
				if (d && typeof(d) === "function") {
					element.dispose();
					element.dispose = null;
					element.__msajaxdispose = null;
				}
				else {
					c = element.control;
					if (c && typeof(c.dispose) === "function") {
						c.dispose();
					}
				}
				list = element._behaviors;
				if (list) {
					this._disposeComponents(list);
				}
				list = element._components;
				if (list) {
					this._disposeComponents(list);
					element._components = null;
				}
			}
		}
	}
	function Sys$_Application$endCreateComponents() {
		/// <summary locid="M:J#Sys.Application.endCreateComponents" />
		if (arguments.length !== 0) throw Error.parameterCount();
		var components = this._secondPassComponents;
		for (var i = 0, l = components.length; i < l; i++) {
			var entry = components[i],
				component = entry.component;
			Sys.Component._setReferences(component, entry.references);
			component.endUpdate();
		}
		this._secondPassComponents = [];
		this._creatingComponents = false;
	}
	function Sys$_Application$findComponent(id, parent) {
		/// <summary locid="M:J#Sys.Application.findComponent" />
		/// <param name="id" type="String"></param>
		/// <param name="parent" optional="true" mayBeNull="true"></param>
		/// <returns type="Sys.Component" mayBeNull="true"></returns>

		return (parent ?
			((Sys.IContainer.isInstanceOfType(parent)) ?
				parent.findComponent(id) :
				parent[id] || null) :
			Sys.Application._components[id] || null);
	}
	function Sys$_Application$getComponents() {
		/// <summary locid="M:J#Sys.Application.getComponents" />
		/// <returns type="Array" elementType="Sys.Component"></returns>
		if (arguments.length !== 0) throw Error.parameterCount();
		var res = [];
		var components = this._components;
		for (var name in components) {
			if (components.hasOwnProperty(name)) {
				res.push(components[name]);
			}
		}
		return res;
	}
	function Sys$_Application$initialize() {
		/// <summary locid="M:J#Sys.Application.initialize" />
		if (arguments.length !== 0) throw Error.parameterCount();
		window.setTimeout(Function.createDelegate(this, this._doInitialize), 0);
	}
	function Sys$_Application$_doInitialize() {
		if(!this.get_isInitialized() && !this._disposing) {
			Sys._Application.callBaseMethod(this, 'initialize');
			this._raiseInit();
			if (this.get_stateString) {
				if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
					this._beginRequestHandler = Function.createDelegate(this, this._onPageRequestManagerBeginRequest);
					Sys.WebForms.PageRequestManager.getInstance().add_beginRequest(this._beginRequestHandler);
					this._endRequestHandler = Function.createDelegate(this, this._onPageRequestManagerEndRequest);
					Sys.WebForms.PageRequestManager.getInstance().add_endRequest(this._endRequestHandler);
				}
				var loadedEntry = this.get_stateString();
				if (loadedEntry !== this._currentEntry) {
					this._navigate(loadedEntry);
				}
				else {
					this._ensureHistory();
				}
			}
			this.raiseLoad();
		}
	}
	function Sys$_Application$notifyScriptLoaded() {
		/// <summary locid="M:J#Sys.Application.notifyScriptLoaded" />
		if (arguments.length !== 0) throw Error.parameterCount();
	}
	function Sys$_Application$registerDisposableObject(object) {
		/// <summary locid="M:J#Sys.Application.registerDisposableObject" />
		/// <param name="object" type="Sys.IDisposable"></param>

		if (!this._disposing) {
			var objects = this._disposableObjects,
				i = objects.length;
			objects[i] = object;
			object.__msdisposeindex = i;
		}
	}
	function Sys$_Application$raiseLoad() {
		/// <summary locid="M:J#Sys.Application.raiseLoad" />
		if (arguments.length !== 0) throw Error.parameterCount();
		var args = new Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents), !!this._loaded);
		this._loaded = true;
		Sys.Observer.raiseEvent(this, "load", args);
		if (window.pageLoad) {
			window.pageLoad(this, args);
		}
		this._createdComponents = [];
	}
	function Sys$_Application$removeComponent(component) {
		/// <summary locid="M:J#Sys.Application.removeComponent" />
		/// <param name="component" type="Sys.Component"></param>

		var id = component.get_id();
		if (id) delete this._components[id];
	}
	function Sys$_Application$unregisterDisposableObject(object) {
		/// <summary locid="M:J#Sys.Application.unregisterDisposableObject" />
		/// <param name="object" type="Sys.IDisposable"></param>

		if (!this._disposing) {
			var i = object.__msdisposeindex;
			if (typeof(i) === "number") {
				var disposableObjects = this._disposableObjects;
				delete disposableObjects[i];
				delete object.__msdisposeindex;
				if (++this._deleteCount > 1000) {
					var newArray = [];
					for (var j = 0, l = disposableObjects.length; j < l; j++) {
						object = disposableObjects[j];
						if (typeof(object) !== "undefined") {
							object.__msdisposeindex = newArray.length;
							newArray.push(object);
						}
					}
					this._disposableObjects = newArray;
					this._deleteCount = 0;
				}
			}
		}
	}
	function Sys$_Application$_addComponentToSecondPass(component, references) {
		this._secondPassComponents.push({component: component, references: references});
	}
	function Sys$_Application$_disposeComponents(list) {
		if (list) {
			for (var i = list.length - 1; i >= 0; i--) {
				var item = list[i];
				if (typeof(item.dispose) === "function") {
					item.dispose();
				}
			}
		}
	}
	function Sys$_Application$_raiseInit() {
		this.beginCreateComponents();
		Sys.Observer.raiseEvent(this, "init");
		this.endCreateComponents();
	   }

	function CleanupPrototype(type) {
		if (type && type.prototype) {
			for (key in type.prototype) {
				if (type.prototype.hasOwnProperty(key))
					type.prototype[key] = null;
			}
			if (type.prototype.constructor)
				type.prototype.constructor = null;
		}
	}

	function Sys$_Application$_unloadHandler(event) {

		// Skip disposal logic except for older versions of Internet Explorer
		if (Sys.Browser.agent !== Sys.Browser.InternetExplorer || Sys.Browser.version > 9) return;

		try {
			this.dispose();
			window.$find = null;
			window.Type = null;
			window._events = null;

			CleanupPrototype(Function);
			CleanupPrototype(Object);
			CleanupPrototype(String);
			CleanupPrototype(Array);
			CleanupPrototype(RegExp);
			CleanupPrototype(Number);
			CleanupPrototype(Boolean);
			CleanupPrototype(Date);
			CleanupPrototype(Error);

			for (var type in Sys.__upperCaseTypes)
				CleanupPrototype(Sys.__upperCaseTypes[type]);

			window.Sys = null;
			window.onload = null;
			window.onunload = null;
			window.__msajaxdispose = null;
			window.dispose = null;
		}
		catch (e)
		{}
	}
Sys._Application.prototype = {
	_deleteCount: 0,
	get_isCreatingComponents: Sys$_Application$get_isCreatingComponents,
	get_isDisposing: Sys$_Application$get_isDisposing,
	add_init: Sys$_Application$add_init,
	remove_init: Sys$_Application$remove_init,
	add_load: Sys$_Application$add_load,
	remove_load: Sys$_Application$remove_load,
	add_unload: Sys$_Application$add_unload,
	remove_unload: Sys$_Application$remove_unload,
	addComponent: Sys$_Application$addComponent,
	beginCreateComponents: Sys$_Application$beginCreateComponents,
	dispose: Sys$_Application$dispose,
	disposeElement: Sys$_Application$disposeElement,
	endCreateComponents: Sys$_Application$endCreateComponents,
	findComponent: Sys$_Application$findComponent,
	getComponents: Sys$_Application$getComponents,
	initialize: Sys$_Application$initialize,
	_doInitialize: Sys$_Application$_doInitialize,
	notifyScriptLoaded: Sys$_Application$notifyScriptLoaded,
	registerDisposableObject: Sys$_Application$registerDisposableObject,
	raiseLoad: Sys$_Application$raiseLoad,
	removeComponent: Sys$_Application$removeComponent,
	unregisterDisposableObject: Sys$_Application$unregisterDisposableObject,
	_addComponentToSecondPass: Sys$_Application$_addComponentToSecondPass,
	_disposeComponents: Sys$_Application$_disposeComponents,
	_raiseInit: Sys$_Application$_raiseInit,
	_unloadHandler: Sys$_Application$_unloadHandler
}
Sys._Application.registerClass('Sys._Application', Sys.Component, Sys.IContainer);

Sys.Application = new Sys._Application();
window.$find = Sys.Application.findComponent;


Sys.onReady(function() {
	Sys.Application._doInitialize();
});


Sys.UI.Behavior = function Sys$UI$Behavior(element) {
	/// <summary locid="M:J#Sys.UI.Behavior.#ctor" />
	/// <param name="element" domElement="true"></param>

	Sys.UI.Behavior.initializeBase(this);
	this._element = element;
	var behaviors = (element._behaviors = element._behaviors || []);
	behaviors.push(this);
}

	function Sys$UI$Behavior$get_element() {
		/// <value domElement="true" locid="P:J#Sys.UI.Behavior.element"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._element;
	}
	function Sys$UI$Behavior$get_id() {
		/// <value type="String" locid="P:J#Sys.UI.Behavior.id"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		var baseId = Sys.UI.Behavior.callBaseMethod(this, 'get_id');
		if (baseId) return baseId;
		if (!this._element || !this._element.id) return '';
		return this._element.id + '$' + this.get_name();
	}
	function Sys$UI$Behavior$get_name() {
		/// <value type="String" locid="P:J#Sys.UI.Behavior.name"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this._name) return this._name;
		var name = Object.getTypeName(this);
		var i = name.lastIndexOf('.');
		if (i !== -1) name = name.substr(i + 1);
		if (!this._initialized) this._name = name;
		return name;
	}
	function Sys$UI$Behavior$set_name(value) {

		if ((value === '') || (value.charAt(0) === ' ') || (value.charAt(value.length - 1) === ' '))
			throw Error.argument('value', Sys.Res.invalidId);
		if (typeof(this._element[value]) !== 'undefined')
			throw Error.invalidOperation(String.format(Sys.Res.behaviorDuplicateName, value));
		if (this.get_isInitialized()) throw Error.invalidOperation(Sys.Res.cantSetNameAfterInit);
		this._name = value;
	}
	function Sys$UI$Behavior$initialize() {
		Sys.UI.Behavior.callBaseMethod(this, 'initialize');
		var name = this.get_name();
		if (name) this._element[name] = this;
	}
	function Sys$UI$Behavior$dispose() {
		Sys.UI.Behavior.callBaseMethod(this, 'dispose');
		var e = this._element;
		if (e) {
			var name = this.get_name();
			if (name) {
				e[name] = null;
			}
			var behaviors = e._behaviors;
			Array.remove(behaviors, this);
			if (!behaviors.length) {
				e._behaviors = null;
			}
			delete this._element;
		}
	}
Sys.UI.Behavior.prototype = {
	get_element: Sys$UI$Behavior$get_element,
	get_id: Sys$UI$Behavior$get_id,
	get_name: Sys$UI$Behavior$get_name,
	set_name: Sys$UI$Behavior$set_name,
	initialize: Sys$UI$Behavior$initialize,
	dispose: Sys$UI$Behavior$dispose
}
Sys.UI.Behavior.registerClass('Sys.UI.Behavior', Sys.Component);

Sys.UI.Behavior.getBehaviorByName = function Sys$UI$Behavior$getBehaviorByName(element, name) {
	/// <summary locid="M:J#Sys.UI.Behavior.getBehaviorByName" />
	/// <param name="element" domElement="true"></param>
	/// <param name="name" type="String"></param>
	/// <returns type="Sys.UI.Behavior" mayBeNull="true"></returns>

	var b = element[name];
	return (b && Sys.UI.Behavior.isInstanceOfType(b)) ? b : null;
}

Sys.UI.Behavior.getBehaviors = function Sys$UI$Behavior$getBehaviors(element) {
	/// <summary locid="M:J#Sys.UI.Behavior.getBehaviors" />
	/// <param name="element" domElement="true"></param>
	/// <returns type="Array" elementType="Sys.UI.Behavior"></returns>

	if (!element._behaviors) return [];
	return Array.clone(element._behaviors);
}

Sys.UI.Behavior.getBehaviorsByType = function Sys$UI$Behavior$getBehaviorsByType(element, type) {
	/// <summary locid="M:J#Sys.UI.Behavior.getBehaviorsByType" />
	/// <param name="element" domElement="true"></param>
	/// <param name="type" type="Type"></param>
	/// <returns type="Array" elementType="Sys.UI.Behavior"></returns>

	var behaviors = element._behaviors;
	var results = [];
	if (behaviors) {
		for (var i = 0, l = behaviors.length; i < l; i++) {
			if (type.isInstanceOfType(behaviors[i])) {
				results.push(behaviors[i]);
			}
		}
	}
	return results;
}
Sys.UI.VisibilityMode = function Sys$UI$VisibilityMode() {
	/// <summary locid="M:J#Sys.UI.VisibilityMode.#ctor" />
	/// <field name="hide" type="Number" integer="true" static="true" locid="F:J#Sys.UI.VisibilityMode.hide"></field>
	/// <field name="collapse" type="Number" integer="true" static="true" locid="F:J#Sys.UI.VisibilityMode.collapse"></field>
	if (arguments.length !== 0) throw Error.parameterCount();
	throw Error.notImplemented();
}



Sys.UI.VisibilityMode.prototype = {
	hide: 0,
	collapse: 1
}
Sys.UI.VisibilityMode.registerEnum("Sys.UI.VisibilityMode");

Sys.UI.Control = function Sys$UI$Control(element) {
	/// <summary locid="M:J#Sys.UI.Control.#ctor" />
	/// <param name="element" domElement="true"></param>

	if (typeof(element.control) !== 'undefined') throw Error.invalidOperation(Sys.Res.controlAlreadyDefined);
	Sys.UI.Control.initializeBase(this);

	this._element = element;
	element.control = this;
	var role = this.get_role();
	if (role) {
		element.setAttribute("role", role);
	}
}




	function Sys$UI$Control$get_element() {
		/// <value domElement="true" locid="P:J#Sys.UI.Control.element"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._element;
	}
	function Sys$UI$Control$get_id() {
		/// <value type="String" locid="P:J#Sys.UI.Control.id"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._id || (this._element ? this._element.id : "");
	}
	function Sys$UI$Control$get_parent() {
		/// <value type="Sys.UI.Control" locid="P:J#Sys.UI.Control.parent"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this._parent) return this._parent;
		if (!this._element) return null;
		var parentElement = this._element.parentNode;
		while (parentElement) {
			if (parentElement.control) {
				return parentElement.control;
			}
			parentElement = parentElement.parentNode;
		}
		return null;
	}
	function Sys$UI$Control$set_parent(value) {

		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		var parents = [this];
		var current = value;
		while (current) {
			if (Array.contains(parents, current)) throw Error.invalidOperation(Sys.Res.circularParentChain);
			parents[parents.length] = current;
			current = current.get_parent();
		}
		this._parent = value;
	}
	function Sys$UI$Control$get_role() {
		/// <value type="String" locid="P:J#Sys.UI.Control.role"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return null;
	}
	function Sys$UI$Control$get_visibilityMode() {
		/// <value type="Sys.UI.VisibilityMode" locid="P:J#Sys.UI.Control.visibilityMode"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		return Sys.UI.DomElement.getVisibilityMode(this._element);
	}
	function Sys$UI$Control$set_visibilityMode(value) {

		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		Sys.UI.DomElement.setVisibilityMode(this._element, value);
	}
	function Sys$UI$Control$get_visibilityFunction() {
		/// <value type="Function" locid="P:J#Sys.UI.Control.visibilityFunction"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._visibilityFunction;
	}
	function Sys$UI$Control$set_visibilityFunction(value) {

		this._visibilityFunction = value;
	}
	function Sys$UI$Control$get_visible() {
		/// <value type="Boolean" locid="P:J#Sys.UI.Control.visible"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		return Sys.UI.DomElement.getVisible(this._element);
	}
	function Sys$UI$Control$set_visible(value) {

		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		Sys.UI.DomElement.setVisible(this._element, value, this.get_visibilityFunction())
	}
	function Sys$UI$Control$addCssClass(className) {
		/// <summary locid="M:J#Sys.UI.Control.addCssClass" />
		/// <param name="className" type="String"></param>

		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		Sys.UI.DomElement.addCssClass(this._element, className);
	}
	function Sys$UI$Control$dispose() {
		Sys.UI.Control.callBaseMethod(this, 'dispose');
		if (this._element) {
			this._element.control = null;
			delete this._element;
		}
		if (this._parent) delete this._parent;
	}
	function Sys$UI$Control$onBubbleEvent(source, args) {
		/// <summary locid="M:J#Sys.UI.Control.onBubbleEvent" />
		/// <param name="source"></param>
		/// <param name="args" type="Sys.EventArgs"></param>
		/// <returns type="Boolean"></returns>

		return false;
	}
	function Sys$UI$Control$raiseBubbleEvent(source, args) {
		/// <summary locid="M:J#Sys.UI.Control.raiseBubbleEvent" />
		/// <param name="source"></param>
		/// <param name="args" type="Sys.EventArgs"></param>

		this._raiseBubbleEvent(source, args);
	}
	function Sys$UI$Control$_raiseBubbleEvent(source, args) {
		var currentTarget = this.get_parent();
		while (currentTarget) {
			if (currentTarget.onBubbleEvent(source, args)) {
				return;
			}
			currentTarget = currentTarget.get_parent();
		}
	}
	function Sys$UI$Control$removeCssClass(className) {
		/// <summary locid="M:J#Sys.UI.Control.removeCssClass" />
		/// <param name="className" type="String"></param>

		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		Sys.UI.DomElement.removeCssClass(this._element, className);
	}
	function Sys$UI$Control$toggleCssClass(className) {
		/// <summary locid="M:J#Sys.UI.Control.toggleCssClass" />
		/// <param name="className" type="String"></param>

		if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
		Sys.UI.DomElement.toggleCssClass(this._element, className);
	}
Sys.UI.Control.prototype = {
	_parent: null,
	_visibilityMode: Sys.UI.VisibilityMode.hide,
	get_element: Sys$UI$Control$get_element,
	get_id: Sys$UI$Control$get_id,
	get_parent: Sys$UI$Control$get_parent,
	set_parent: Sys$UI$Control$set_parent,
	get_role: Sys$UI$Control$get_role,
	get_visibilityMode: Sys$UI$Control$get_visibilityMode,
	set_visibilityMode: Sys$UI$Control$set_visibilityMode,
	get_visibilityFunction: Sys$UI$Control$get_visibilityFunction,
	set_visibilityFunction: Sys$UI$Control$set_visibilityFunction,
	get_visible: Sys$UI$Control$get_visible,
	set_visible: Sys$UI$Control$set_visible,
	addCssClass: Sys$UI$Control$addCssClass,
	dispose: Sys$UI$Control$dispose,
	onBubbleEvent: Sys$UI$Control$onBubbleEvent,
	raiseBubbleEvent: Sys$UI$Control$raiseBubbleEvent,
	_raiseBubbleEvent: Sys$UI$Control$_raiseBubbleEvent,
	removeCssClass: Sys$UI$Control$removeCssClass,
	toggleCssClass: Sys$UI$Control$toggleCssClass
}
Sys.UI.Control.registerClass('Sys.UI.Control', Sys.Component);






Sys.HistoryEventArgs = function Sys$HistoryEventArgs(state) {
	/// <summary locid="M:J#Sys.HistoryEventArgs.#ctor" />
	/// <param name="state" type="Object"></param>

	Sys.HistoryEventArgs.initializeBase(this);
	this._state = state;
}

	function Sys$HistoryEventArgs$get_state() {
		/// <value type="Object" locid="P:J#Sys.HistoryEventArgs.state"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._state;
	}
Sys.HistoryEventArgs.prototype = {
	get_state: Sys$HistoryEventArgs$get_state
}
Sys.HistoryEventArgs.registerClass('Sys.HistoryEventArgs', Sys.EventArgs);


Sys.Application._appLoadHandler = null;
Sys.Application._beginRequestHandler = null;
Sys.Application._clientId = null;
Sys.Application._currentEntry = '';
Sys.Application._endRequestHandler = null;
Sys.Application._history = null;
Sys.Application._enableHistory = false;
Sys.Application._historyEnabledInScriptManager = false;
Sys.Application._historyFrame = null;
Sys.Application._historyInitialized = false;
Sys.Application._historyPointIsNew = false;
Sys.Application._ignoreTimer = false;
Sys.Application._initialState = null;
Sys.Application._state = {};
Sys.Application._timerCookie = 0;
Sys.Application._timerHandler = null;
Sys.Application._uniqueId = null;



Sys._Application.prototype.get_stateString = function Sys$_Application$get_stateString() {
	/// <summary locid="M:J#Sys._Application.get_stateString" />
	if (arguments.length !== 0) throw Error.parameterCount();
	var hash = null;
	if (isBrowser("Firefox")) {
		var href = window.location.href;
		var hashIndex = href.indexOf('#');
		if (hashIndex !== -1) {
			hash = href.substring(hashIndex + 1);
		}
		else {
			hash = "";
		}
		return hash;
	}
	else {
		hash = window.location.hash;
	}
	if ((hash.length > 0) && (hash.charAt(0) === '#')) {
		hash = hash.substring(1);
	}

	return hash;
};

Sys._Application.prototype.get_enableHistory = function Sys$_Application$get_enableHistory() {
	/// <summary locid="M:J#Sys._Application.get_enableHistory" />
	if (arguments.length !== 0) throw Error.parameterCount();
	return this._enableHistory;
};

Sys._Application.prototype.set_enableHistory = function Sys$_Application$set_enableHistory(value) {
	if (this._initialized && !this._initializing) {
		throw Error.invalidOperation(Sys.Res.historyCannotEnableHistory);
	}
	else if (this._historyEnabledInScriptManager && !value) {
		throw Error.invalidOperation(Sys.Res.invalidHistorySettingCombination);
	}
	this._enableHistory = value;
};

Sys._Application.prototype.add_navigate = function Sys$_Application$add_navigate(handler) {
	/// <summary locid="E:J#Sys.Application.navigate" />
	/// <param name="handler" type="Function"></param>

	this._addHandler("navigate", handler);
};

Sys._Application.prototype.remove_navigate = function Sys$_Application$remove_navigate(handler) {
	/// <summary locid="M:J#Sys._Application.remove_navigate" />
	/// <param name="handler" type="Function"></param>

	this._removeHandler("navigate", handler);
};

Sys._Application.prototype.addHistoryPoint = function Sys$_Application$addHistoryPoint(state, title) {
	/// <summary locid="M:J#Sys.Application.addHistoryPoint" />
	/// <param name="state" type="Object"></param>
	/// <param name="title" type="String" optional="true" mayBeNull="true"></param>

	if (!this._enableHistory) throw Error.invalidOperation(Sys.Res.historyCannotAddHistoryPointWithHistoryDisabled);
	for (var n in state) {
		var v = state[n];
		var t = typeof(v);
		if ((v !== null) && ((t === 'object') || (t === 'function') || (t === 'undefined'))) {
			throw Error.argument('state', Sys.Res.stateMustBeStringDictionary);
		}
	}
	this._ensureHistory();
	var initialState = this._state;
	for (var key in state) {
		var value = state[key];
		if (value === null) {
			if (typeof(initialState[key]) !== 'undefined') {
				delete initialState[key];
			}
		}
		else {
			initialState[key] = value;
		}
	}
	var entry = this._serializeState(initialState);
	this._historyPointIsNew = true;
	this._setState(entry, title);
	this._raiseNavigate();
};

Sys._Application.prototype.setServerId = function Sys$_Application$setServerId(clientId, uniqueId) {
	/// <summary locid="M:J#Sys.Application.setServerId" />
	/// <param name="clientId" type="String"></param>
	/// <param name="uniqueId" type="String"></param>

	this._clientId = clientId;
	this._uniqueId = uniqueId;
};

Sys._Application.prototype.setServerState = function Sys$_Application$setServerState(value) {
	/// <summary locid="M:J#Sys.Application.setServerState" />
	/// <param name="value" type="String"></param>

	this._ensureHistory();
	this._state.__s = value;
	this._updateHiddenField(value);
};

Sys._Application.prototype._deserializeState = function Sys$_Application$_deserializeState(entry) {
	var result = {};
	entry = entry || '';
	var serverSeparator = entry.indexOf('&&');
	if ((serverSeparator !== -1) && (serverSeparator + 2 < entry.length)) {
		result.__s = entry.substr(serverSeparator + 2);
		entry = entry.substr(0, serverSeparator);
	}
	var tokens = entry.split('&');
	for (var i = 0, l = tokens.length; i < l; i++) {
		var token = tokens[i];
		var equal = token.indexOf('=');
		if ((equal !== -1) && (equal + 1 < token.length)) {
			var name = token.substr(0, equal);
			var value = token.substr(equal + 1);
			result[name] = decodeURIComponent(value);
		}
	}
	return result;
};

Sys._Application.prototype._enableHistoryInScriptManager = function Sys$_Application$_enableHistoryInScriptManager() {
	this._enableHistory = true;
	this._historyEnabledInScriptManager = true;
};

Sys._Application.prototype._ensureHistory = function Sys$_Application$_ensureHistory() {
	if (!this._historyInitialized && this._enableHistory) {
		if (isBrowser("InternetExplorer") && (Sys.Browser.documentMode < 8)) {
			this._historyFrame = Sys.get('#__historyFrame');
			if (!this._historyFrame) throw Error.invalidOperation(Sys.Res.historyMissingFrame);
			this._ignoreIFrame = true;
		}
		this._timerHandler = Function.createDelegate(this, this._onIdle);
		this._timerCookie = window.setTimeout(this._timerHandler, 100);
		try {
			this._initialState = this._deserializeState(this.get_stateString());
		} catch(e) {}
		this._historyInitialized = true;
	}
};

Sys._Application.prototype._navigate = function Sys$_Application$_navigate(entry) {
	this._ensureHistory();

	var state = this._deserializeState(entry);
	if (this._uniqueId) {
		var oldServerEntry = this._state.__s || '';
		var newServerEntry = state.__s || '';
		if (newServerEntry !== oldServerEntry) {
			this._updateHiddenField(newServerEntry);
			__doPostBack(this._uniqueId, newServerEntry);
			this._state = state;
			return;
		}
	}
	this._setState(entry);
	this._state = state;
	this._raiseNavigate();
};

Sys._Application.prototype._onIdle = function Sys$_Application$_onIdle() {
	delete this._timerCookie;
	var entry = this.get_stateString();
	if (entry !== this._currentEntry) {
		if (!this._ignoreTimer) {
			this._historyPointIsNew = false;
			this._navigate(entry);
		}
	}
	else {
		this._ignoreTimer = false;
	}
	this._timerCookie = window.setTimeout(this._timerHandler, 100);
};

Sys._Application.prototype._onIFrameLoad = function Sys$_Application$_onIFrameLoad(entry) {
	this._ensureHistory();
	if (!this._ignoreIFrame) {
		this._historyPointIsNew = false;
		this._navigate(entry);
	}
	this._ignoreIFrame = false;
};

Sys._Application.prototype._onPageRequestManagerBeginRequest = function Sys$_Application$_onPageRequestManagerBeginRequest(sender, args) {
	this._ignoreTimer = true;
	this._originalTitle = document.title;
};

Sys._Application.prototype._onPageRequestManagerEndRequest = function Sys$_Application$_onPageRequestManagerEndRequest(sender, args) {
	var dataItem = args.get_dataItems()[this._clientId];
	var originalTitle = this._originalTitle;
	this._originalTitle = null;

	var eventTarget = Sys.get("#__EVENTTARGET");
	if (eventTarget && eventTarget.value === this._uniqueId) {
		eventTarget.value = '';
	}
	if (typeof(dataItem) !== 'undefined') {
		this.setServerState(dataItem);
		this._historyPointIsNew = true;
	}
	else {
		this._ignoreTimer = false;
	}
	var entry = this._serializeState(this._state);
	if (entry !== this._currentEntry) {
		this._ignoreTimer = true;
		if (typeof(originalTitle) === "string") {
			if (Sys.Browser.agent !== Sys.Browser.InternetExplorer || Sys.Browser.version > 7) {
				var newTitle = document.title;
				document.title = originalTitle;
				this._setState(entry);
				document.title = newTitle;
			}
			else {
				this._setState(entry);
			}
			this._raiseNavigate();
		}
		else {
			this._setState(entry);
			this._raiseNavigate();
		}
	}
};

Sys._Application.prototype._raiseNavigate = function Sys$_Application$_raiseNavigate() {
	var isNew = this._historyPointIsNew;
	var stateClone = {};
	for (var key in this._state) {
		if (key !== '__s') {
			stateClone[key] = this._state[key];
		}
	}
	var args = new Sys.HistoryEventArgs(stateClone);
	Sys.Observer.raiseEvent(this, "navigate", args);
	if (!isNew) {
		var err;
		try {
			if (isBrowser("Firefox") && window.location.hash &&
				(!window.frameElement || window.top.location.hash)) {
				(Sys.Browser.version < 3.5) ?
					window.history.go(0) :
					location.hash = this.get_stateString();
			}
		}
		catch(err) {
		}
	}
};

Sys._Application.prototype._serializeState = function Sys$_Application$_serializeState(state) {
	var serialized = [];
	for (var key in state) {
		var value = state[key];
		if (key === '__s') {
			var serverState = value;
		}
		else {
			if (key.indexOf('=') !== -1) throw Error.argument('state', Sys.Res.stateFieldNameInvalid);
			serialized[serialized.length] = key + '=' + encodeURIComponent(value);
		}
	}
	return serialized.join('&') + (serverState ? '&&' + serverState : '');
};

Sys._Application.prototype._setState = function Sys$_Application$_setState(entry, title) {
	if (this._enableHistory) {
		entry = entry || '';
		if (entry !== this._currentEntry) {
			if (window.theForm) {
				var action = window.theForm.action;
				var hashIndex = action.indexOf('#');
				window.theForm.action = ((hashIndex !== -1) ? action.substring(0, hashIndex) : action) + '#' + entry;
			}
			if (this._historyFrame && this._historyPointIsNew) {
				this._ignoreIFrame = true;
				var frameDoc = this._historyFrame.contentWindow.document;
				frameDoc.open("javascript:'<html></html>'");
				frameDoc.write("<html><head><title>" + (title || document.title) +
					"</title><scri" + "pt type=\"text/javascript\">parent.Sys.Application._onIFrameLoad(" +
					Sys.Serialization.JavaScriptSerializer.serialize(entry) +
					");</scri" + "pt></head><body></body></html>");
				frameDoc.close();
			}
			this._ignoreTimer = false;
			this._currentEntry = entry;
			if (this._historyFrame || this._historyPointIsNew) {
				var currentHash = this.get_stateString();
				if (entry !== currentHash) {
					var loc = document.location;
					if (loc.href.length - loc.hash.length + entry.length > 2048) {
						throw Error.invalidOperation(String.format(Sys.Res.urlTooLong, 2048));
					}
					window.location.hash = entry;
					this._currentEntry = this.get_stateString();
					if ((typeof(title) !== 'undefined') && (title !== null)) {
						document.title = title;
					}
				}
			}
			this._historyPointIsNew = false;
		}
	}
};

Sys._Application.prototype._updateHiddenField = function Sys$_Application$_updateHiddenField(value) {
	if (this._clientId) {
		var serverStateField = document.getElementById(this._clientId);
		if (serverStateField) {
			serverStateField.value = value;
		}
	}
};






if (!window.XMLHttpRequest) {
	window.XMLHttpRequest = function window$XMLHttpRequest() {
		var progIDs = [ 'Msxml2.XMLHTTP.3.0', 'Msxml2.XMLHTTP' ];
		for (var i = 0, l = progIDs.length; i < l; i++) {
			try {
				return new ActiveXObject(progIDs[i]);
			}
			catch (ex) {
			}
		}
		return null;
	}
}

Type.registerNamespace('Sys.Net');

Sys.Net.WebRequestExecutor = function Sys$Net$WebRequestExecutor() {
	/// <summary locid="M:J#Sys.Net.WebRequestExecutor.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	this._webRequest = null;
	this._resultObject = null;
}


	function Sys$Net$WebRequestExecutor$get_webRequest() {
		/// <value type="Sys.Net.WebRequest" locid="P:J#Sys.Net.WebRequestExecutor.webRequest"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._webRequest;
	}

	function Sys$Net$WebRequestExecutor$_set_webRequest(value) {
		if (this.get_started()) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'set_webRequest'));
		}

		this._webRequest = value;
	}


	function Sys$Net$WebRequestExecutor$get_started() {
		/// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.started"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}

	function Sys$Net$WebRequestExecutor$get_responseAvailable() {
		/// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.responseAvailable"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}

	function Sys$Net$WebRequestExecutor$get_timedOut() {
		/// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.timedOut"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$get_aborted() {
		/// <value type="Boolean" locid="P:J#Sys.Net.WebRequestExecutor.aborted"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$get_responseData() {
		/// <value type="String" locid="P:J#Sys.Net.WebRequestExecutor.responseData"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$get_statusCode() {
		/// <value type="Number" locid="P:J#Sys.Net.WebRequestExecutor.statusCode"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$get_statusText() {
		/// <value type="String" locid="P:J#Sys.Net.WebRequestExecutor.statusText"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$get_xml() {
		/// <value locid="P:J#Sys.Net.WebRequestExecutor.xml"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$get_object() {
		/// <value locid="P:J#Sys.Net.WebRequestExecutor.object"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._resultObject) {
			this._resultObject = Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData());
		}
		return this._resultObject;
	}


	function Sys$Net$WebRequestExecutor$executeRequest() {
		/// <summary locid="M:J#Sys.Net.WebRequestExecutor.executeRequest" />
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$abort() {
		/// <summary locid="M:J#Sys.Net.WebRequestExecutor.abort" />
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$getResponseHeader(header) {
		/// <summary locid="M:J#Sys.Net.WebRequestExecutor.getResponseHeader" />
		/// <param name="header" type="String"></param>

		throw Error.notImplemented();
	}
	function Sys$Net$WebRequestExecutor$getAllResponseHeaders() {
		/// <summary locid="M:J#Sys.Net.WebRequestExecutor.getAllResponseHeaders" />
		if (arguments.length !== 0) throw Error.parameterCount();
		throw Error.notImplemented();
	}
Sys.Net.WebRequestExecutor.prototype = {
	get_webRequest: Sys$Net$WebRequestExecutor$get_webRequest,
	_set_webRequest: Sys$Net$WebRequestExecutor$_set_webRequest,
	get_started: Sys$Net$WebRequestExecutor$get_started,
	get_responseAvailable: Sys$Net$WebRequestExecutor$get_responseAvailable,
	get_timedOut: Sys$Net$WebRequestExecutor$get_timedOut,
	get_aborted: Sys$Net$WebRequestExecutor$get_aborted,
	get_responseData: Sys$Net$WebRequestExecutor$get_responseData,
	get_statusCode: Sys$Net$WebRequestExecutor$get_statusCode,
	get_statusText: Sys$Net$WebRequestExecutor$get_statusText,
	get_xml: Sys$Net$WebRequestExecutor$get_xml,
	get_object: Sys$Net$WebRequestExecutor$get_object,
	executeRequest: Sys$Net$WebRequestExecutor$executeRequest,
	abort: Sys$Net$WebRequestExecutor$abort,
	getResponseHeader: Sys$Net$WebRequestExecutor$getResponseHeader,
	getAllResponseHeaders: Sys$Net$WebRequestExecutor$getAllResponseHeaders
}
Sys.Net.WebRequestExecutor.registerClass('Sys.Net.WebRequestExecutor');
Sys.Net.XMLDOM = function Sys$Net$XMLDOM(markup) {
	/// <summary locid="M:J#Sys.Net.XMLDOM.#ctor" />
	/// <param name="markup" type="String"></param>

	if (!window.DOMParser) {
		var progIDs = [ 'Msxml2.DOMDocument.3.0', 'Msxml2.DOMDocument' ];
		for (var i = 0, l = progIDs.length; i < l; i++) {
			try {
				var xmlDOM = new ActiveXObject(progIDs[i]);
				xmlDOM.async = false;
				xmlDOM.loadXML(markup);
				xmlDOM.setProperty('SelectionLanguage', 'XPath');
				return xmlDOM;
			}
			catch (ex) {
			}
		}
	}
	else {
		try {
			var domParser = new window.DOMParser();
			return domParser.parseFromString(markup, 'text/xml');
		}
		catch (ex) {
		}
	}
	return null;
}

Sys.Net.XMLHttpExecutor = function Sys$Net$XMLHttpExecutor() {
	/// <summary locid="M:J#Sys.Net.XMLHttpExecutor.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();

	Sys.Net.XMLHttpExecutor.initializeBase(this);

	var _this = this;
	this._xmlHttpRequest = null;
	this._webRequest = null;
	this._responseAvailable = false;
	this._timedOut = false;
	this._timer = null;
	this._aborted = false;
	this._started = false;

	this._onReadyStateChange = (function () {

		if (_this._xmlHttpRequest.readyState === 4
) {
			try {
				if (typeof(_this._xmlHttpRequest.status) === "undefined") {
					return;
				}
			}
			catch(ex) {
				return;
			}
			_this._clearTimer();
			_this._responseAvailable = true;
				_this._webRequest.completed(Sys.EventArgs.Empty);
				if (_this._xmlHttpRequest != null) {
					_this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
					_this._xmlHttpRequest = null;
				}
		}
	});

	this._clearTimer = (function() {
		if (_this._timer != null) {
			window.clearTimeout(_this._timer);
			_this._timer = null;
		}
	});

	this._onTimeout = (function() {
		if (!_this._responseAvailable) {
			_this._clearTimer();
			_this._timedOut = true;
			_this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
			_this._xmlHttpRequest.abort();
			_this._webRequest.completed(Sys.EventArgs.Empty);
			_this._xmlHttpRequest = null;
		}
	});

}



	function Sys$Net$XMLHttpExecutor$get_timedOut() {
		/// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.timedOut"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._timedOut;
	}

	function Sys$Net$XMLHttpExecutor$get_started() {
		/// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.started"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._started;
	}

	function Sys$Net$XMLHttpExecutor$get_responseAvailable() {
		/// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.responseAvailable"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._responseAvailable;
	}

	function Sys$Net$XMLHttpExecutor$get_aborted() {
		/// <value type="Boolean" locid="P:J#Sys.Net.XMLHttpExecutor.aborted"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._aborted;
	}

	function Sys$Net$XMLHttpExecutor$executeRequest() {
		/// <summary locid="M:J#Sys.Net.XMLHttpExecutor.executeRequest" />
		if (arguments.length !== 0) throw Error.parameterCount();
		this._webRequest = this.get_webRequest();

		if (this._started) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'executeRequest'));
		}
		if (this._webRequest === null) {
			throw Error.invalidOperation(Sys.Res.nullWebRequest);
		}

		var body = this._webRequest.get_body();
		var headers = this._webRequest.get_headers();
		this._xmlHttpRequest = new XMLHttpRequest();
		this._xmlHttpRequest.onreadystatechange = this._onReadyStateChange;
		var verb = this._webRequest.get_httpVerb();
		this._xmlHttpRequest.open(verb, this._webRequest.getResolvedUrl(), true
);
		this._xmlHttpRequest.setRequestHeader("X-Requested-With", "XMLHttpRequest");
		if (headers) {
			for (var header in headers) {
				var val = headers[header];
				if (typeof(val) !== "function")
					this._xmlHttpRequest.setRequestHeader(header, val);
			}
		}

		if (verb.toLowerCase() === "post") {
			if ((headers === null) || !headers['Content-Type']) {
				this._xmlHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
			}

			if (!body) {
				body = "";
			}
		}

		var timeout = this._webRequest.get_timeout();
		if (timeout > 0) {
			this._timer = window.setTimeout(Function.createDelegate(this, this._onTimeout), timeout);
		}
		this._xmlHttpRequest.send(body);
		this._started = true;
	}

	function Sys$Net$XMLHttpExecutor$getResponseHeader(header) {
		/// <summary locid="M:J#Sys.Net.XMLHttpExecutor.getResponseHeader" />
		/// <param name="header" type="String"></param>
		/// <returns type="String"></returns>

		if (!this._responseAvailable) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getResponseHeader'));
		}
		if (!this._xmlHttpRequest) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getResponseHeader'));
		}

		var result;
		try {
			result = this._xmlHttpRequest.getResponseHeader(header);
		} catch (e) {
		}
		if (!result) result = "";
		return result;
	}

	function Sys$Net$XMLHttpExecutor$getAllResponseHeaders() {
		/// <summary locid="M:J#Sys.Net.XMLHttpExecutor.getAllResponseHeaders" />
		/// <returns type="String"></returns>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._responseAvailable) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getAllResponseHeaders'));
		}
		if (!this._xmlHttpRequest) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getAllResponseHeaders'));
		}

		return this._xmlHttpRequest.getAllResponseHeaders();
	}

	function Sys$Net$XMLHttpExecutor$get_responseData() {
		/// <value type="String" locid="P:J#Sys.Net.XMLHttpExecutor.responseData"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._responseAvailable) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_responseData'));
		}
		if (!this._xmlHttpRequest) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_responseData'));
		}

		return this._xmlHttpRequest.responseText;
	}

	function Sys$Net$XMLHttpExecutor$get_statusCode() {
		/// <value type="Number" locid="P:J#Sys.Net.XMLHttpExecutor.statusCode"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._responseAvailable) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusCode'));
		}
		if (!this._xmlHttpRequest) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusCode'));
		}
		var result = 0;
		try {
			result = this._xmlHttpRequest.status;
		}
		catch(ex) {
		}
		return result;
	}

	function Sys$Net$XMLHttpExecutor$get_statusText() {
		/// <value type="String" locid="P:J#Sys.Net.XMLHttpExecutor.statusText"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._responseAvailable) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusText'));
		}
		if (!this._xmlHttpRequest) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusText'));
		}

		return this._xmlHttpRequest.statusText;
	}

	function Sys$Net$XMLHttpExecutor$get_xml() {
		/// <value locid="P:J#Sys.Net.XMLHttpExecutor.xml"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._responseAvailable) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_xml'));
		}
		if (!this._xmlHttpRequest) {
			throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_xml'));
		}

		var xml = this._xmlHttpRequest.responseXML;
		if (!xml || !xml.documentElement) {

			xml = Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);

			if (!xml || !xml.documentElement)
				return null;
		}
		else if (navigator.userAgent.indexOf('MSIE') !== -1) {
			xml.setProperty('SelectionLanguage', 'XPath');
		}

		if (xml.documentElement.namespaceURI === "http://www.mozilla.org/newlayout/xml/parsererror.xml" &&
			xml.documentElement.tagName === "parsererror") {
			return null;
		}
		if (xml.documentElement.firstChild && xml.documentElement.firstChild.tagName === "parsererror") {
			return null;
		}
		return xml;
	}

	function Sys$Net$XMLHttpExecutor$abort() {
		/// <summary locid="M:J#Sys.Net.XMLHttpExecutor.abort" />
		if (arguments.length !== 0) throw Error.parameterCount();
		if (!this._started) {
			throw Error.invalidOperation(Sys.Res.cannotAbortBeforeStart);
		}

		if (this._aborted || this._responseAvailable || this._timedOut)
			return;

		this._aborted = true;

		this._clearTimer();

		if (this._xmlHttpRequest && !this._responseAvailable) {

			this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
			this._xmlHttpRequest.abort();
			this._xmlHttpRequest = null;

			this._webRequest.completed(Sys.EventArgs.Empty);
		}
	}
Sys.Net.XMLHttpExecutor.prototype = {
	get_timedOut: Sys$Net$XMLHttpExecutor$get_timedOut,
	get_started: Sys$Net$XMLHttpExecutor$get_started,
	get_responseAvailable: Sys$Net$XMLHttpExecutor$get_responseAvailable,
	get_aborted: Sys$Net$XMLHttpExecutor$get_aborted,
	executeRequest: Sys$Net$XMLHttpExecutor$executeRequest,
	getResponseHeader: Sys$Net$XMLHttpExecutor$getResponseHeader,
	getAllResponseHeaders: Sys$Net$XMLHttpExecutor$getAllResponseHeaders,
	get_responseData: Sys$Net$XMLHttpExecutor$get_responseData,
	get_statusCode: Sys$Net$XMLHttpExecutor$get_statusCode,
	get_statusText: Sys$Net$XMLHttpExecutor$get_statusText,
	get_xml: Sys$Net$XMLHttpExecutor$get_xml,
	abort: Sys$Net$XMLHttpExecutor$abort
}
Sys.Net.XMLHttpExecutor.registerClass('Sys.Net.XMLHttpExecutor', Sys.Net.WebRequestExecutor);
Sys.Net._WebRequestManager = function Sys$Net$_WebRequestManager() {
	/// <summary locid="P:J#Sys.Net.WebRequestManager.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	this._defaultTimeout = 0;
	this._defaultExecutorType = "Sys.Net.XMLHttpExecutor";
}


	function Sys$Net$_WebRequestManager$add_invokingRequest(handler) {
		/// <summary locid="E:J#Sys.Net.WebRequestManager.invokingRequest" />

		Sys.Observer.addEventHandler(this, "invokingRequest", handler);
	}
	function Sys$Net$_WebRequestManager$remove_invokingRequest(handler) {

		Sys.Observer.removeEventHandler(this, "invokingRequest", handler);
	}

	function Sys$Net$_WebRequestManager$add_completedRequest(handler) {
		/// <summary locid="E:J#Sys.Net.WebRequestManager.completedRequest" />

		Sys.Observer.addEventHandler(this, "completedRequest", handler);
	}
	function Sys$Net$_WebRequestManager$remove_completedRequest(handler) {

		Sys.Observer.removeEventHandler(this, "completedRequest", handler);
	}
	function Sys$Net$_WebRequestManager$get_defaultTimeout() {
		/// <value type="Number" locid="P:J#Sys.Net.WebRequestManager.defaultTimeout"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._defaultTimeout;
	}
	function Sys$Net$_WebRequestManager$set_defaultTimeout(value) {

		if (value < 0) {
			throw Error.argumentOutOfRange("value", value, Sys.Res.invalidTimeout);
		}

		this._defaultTimeout = value;
	}

	function Sys$Net$_WebRequestManager$get_defaultExecutorType() {
		/// <value type="String" locid="P:J#Sys.Net.WebRequestManager.defaultExecutorType"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._defaultExecutorType;
	}
	function Sys$Net$_WebRequestManager$set_defaultExecutorType(value) {

		this._defaultExecutorType = value;
	}

	function Sys$Net$_WebRequestManager$executeRequest(webRequest) {
		/// <summary locid="M:J#Sys.Net.WebRequestManager.executeRequest" />
		/// <param name="webRequest" type="Sys.Net.WebRequest"></param>

		var executor = webRequest.get_executor();
		if (!executor) {

			var er, failed = false;
			try {
				var executorType = window.eval(this._defaultExecutorType);
				executor = new executorType();
			} catch (er) {
				failed = true;
			}

			if (failed  || !Sys.Net.WebRequestExecutor.isInstanceOfType(executor) || !executor) {
				throw Error.argument("defaultExecutorType", String.format(Sys.Res.invalidExecutorType, this._defaultExecutorType));
			}

			webRequest.set_executor(executor);
		}

		if (executor.get_aborted()) {
			return;
		}

		var evArgs = new Sys.Net.NetworkRequestEventArgs(webRequest);
		Sys.Observer.raiseEvent(this, "invokingRequest", evArgs);
		if (!evArgs.get_cancel()) {
			executor.executeRequest();
		}
	}
Sys.Net._WebRequestManager.prototype = {
	add_invokingRequest: Sys$Net$_WebRequestManager$add_invokingRequest,
	remove_invokingRequest: Sys$Net$_WebRequestManager$remove_invokingRequest,
	add_completedRequest: Sys$Net$_WebRequestManager$add_completedRequest,
	remove_completedRequest: Sys$Net$_WebRequestManager$remove_completedRequest,
	get_defaultTimeout: Sys$Net$_WebRequestManager$get_defaultTimeout,
	set_defaultTimeout: Sys$Net$_WebRequestManager$set_defaultTimeout,
	get_defaultExecutorType: Sys$Net$_WebRequestManager$get_defaultExecutorType,
	set_defaultExecutorType: Sys$Net$_WebRequestManager$set_defaultExecutorType,
	executeRequest: Sys$Net$_WebRequestManager$executeRequest
}

Sys.Net._WebRequestManager.registerClass('Sys.Net._WebRequestManager');


Sys.Net.WebRequestManager = new Sys.Net._WebRequestManager();
Sys.Net.NetworkRequestEventArgs = function Sys$Net$NetworkRequestEventArgs(webRequest) {
	/// <summary locid="M:J#Sys.Net.NetworkRequestEventArgs.#ctor" />
	/// <param name="webRequest" type="Sys.Net.WebRequest"></param>

	Sys.Net.NetworkRequestEventArgs.initializeBase(this);
	this._webRequest = webRequest;
}


	function Sys$Net$NetworkRequestEventArgs$get_webRequest() {
		/// <value type="Sys.Net.WebRequest" locid="P:J#Sys.Net.NetworkRequestEventArgs.webRequest"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._webRequest;
	}
Sys.Net.NetworkRequestEventArgs.prototype = {
	get_webRequest: Sys$Net$NetworkRequestEventArgs$get_webRequest
}

Sys.Net.NetworkRequestEventArgs.registerClass('Sys.Net.NetworkRequestEventArgs', Sys.CancelEventArgs);
Sys.Net.WebRequest = function Sys$Net$WebRequest() {
	/// <summary locid="M:J#Sys.Net.WebRequest.#ctor" />
	if (arguments.length !== 0) throw Error.parameterCount();
	this._url = "";
	this._headers = { };
	this._body = null;
	this._userContext = null;
	this._httpVerb = null;
	this._executor = null;
	this._invokeCalled = false;
	this._timeout = 0;
}



	function Sys$Net$WebRequest$add_completed(handler) {
	/// <summary locid="E:J#Sys.Net.WebRequest.completed" />

		Sys.Observer.addEventHandler(this, "completed", handler);
	}
	function Sys$Net$WebRequest$remove_completed(handler) {

		Sys.Observer.removeEventHandler(this, "completed", handler);
	}

	function Sys$Net$WebRequest$completed(eventArgs) {
		/// <summary locid="M:J#Sys.Net.WebRequest.completed" />
		/// <param name="eventArgs" type="Sys.EventArgs"></param>

		function raise(source, sender, eventName) {
			var handler = Sys.Observer._getContext(source, true).events.getHandler(eventName);
			if (handler) {
				handler(sender, eventArgs);
			}
		}
		raise(Sys.Net.WebRequestManager, this._executor, "completedRequest");
		raise(this, this._executor, "completed");
		Sys.Observer.clearEventHandlers(this, "completed");
	}

	function Sys$Net$WebRequest$get_url() {
		/// <value type="String" locid="P:J#Sys.Net.WebRequest.url"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._url;
	}
	function Sys$Net$WebRequest$set_url(value) {

		this._url = value;
	}

	function Sys$Net$WebRequest$get_headers() {
		/// <value locid="P:J#Sys.Net.WebRequest.headers"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._headers;
	}

	function Sys$Net$WebRequest$get_httpVerb() {
		/// <value type="String" locid="P:J#Sys.Net.WebRequest.httpVerb"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this._httpVerb === null) {
			if (this._body === null) {
				return "GET";
			}
			return "POST";
		}
		return this._httpVerb;
	}
	function Sys$Net$WebRequest$set_httpVerb(value) {

		if (value.length === 0) {
			throw Error.argument('value', Sys.Res.invalidHttpVerb);
		}

		this._httpVerb = value;
	}

	function Sys$Net$WebRequest$get_body() {
		/// <value mayBeNull="true" locid="P:J#Sys.Net.WebRequest.body"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._body;
	}
	function Sys$Net$WebRequest$set_body(value) {

		this._body = value;
	}

	function Sys$Net$WebRequest$get_userContext() {
		/// <value mayBeNull="true" locid="P:J#Sys.Net.WebRequest.userContext"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._userContext;
	}
	function Sys$Net$WebRequest$set_userContext(value) {

		this._userContext = value;
	}

	function Sys$Net$WebRequest$get_executor() {
		/// <value type="Sys.Net.WebRequestExecutor" locid="P:J#Sys.Net.WebRequest.executor"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._executor;
	}
	function Sys$Net$WebRequest$set_executor(value) {

		if (this._executor !== null && this._executor.get_started()) {
			throw Error.invalidOperation(Sys.Res.setExecutorAfterActive);
		}

		this._executor = value;
		this._executor._set_webRequest(this);
	}

	function Sys$Net$WebRequest$get_timeout() {
		/// <value type="Number" locid="P:J#Sys.Net.WebRequest.timeout"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this._timeout === 0) {
			return Sys.Net.WebRequestManager.get_defaultTimeout();
		}
		return this._timeout;
	}
	function Sys$Net$WebRequest$set_timeout(value) {

		if (value < 0) {
			throw Error.argumentOutOfRange("value", value, Sys.Res.invalidTimeout);
		}

		this._timeout = value;
	}

	function Sys$Net$WebRequest$getResolvedUrl() {
		/// <summary locid="M:J#raise" />
		/// <returns type="String"></returns>
		if (arguments.length !== 0) throw Error.parameterCount();
		return Sys.Net.WebRequest._resolveUrl(this._url);
	}

	function Sys$Net$WebRequest$invoke() {
		/// <summary locid="M:J#raise" />
		if (arguments.length !== 0) throw Error.parameterCount();
		if (this._invokeCalled) {
			throw Error.invalidOperation(Sys.Res.invokeCalledTwice);
		}

		Sys.Net.WebRequestManager.executeRequest(this);
		this._invokeCalled = true;
	}
Sys.Net.WebRequest.prototype = {
	add_completed: Sys$Net$WebRequest$add_completed,
	remove_completed: Sys$Net$WebRequest$remove_completed,
	completed: Sys$Net$WebRequest$completed,
	get_url: Sys$Net$WebRequest$get_url,
	set_url: Sys$Net$WebRequest$set_url,
	get_headers: Sys$Net$WebRequest$get_headers,
	get_httpVerb: Sys$Net$WebRequest$get_httpVerb,
	set_httpVerb: Sys$Net$WebRequest$set_httpVerb,
	get_body: Sys$Net$WebRequest$get_body,
	set_body: Sys$Net$WebRequest$set_body,
	get_userContext: Sys$Net$WebRequest$get_userContext,
	set_userContext: Sys$Net$WebRequest$set_userContext,
	get_executor: Sys$Net$WebRequest$get_executor,
	set_executor: Sys$Net$WebRequest$set_executor,
	get_timeout: Sys$Net$WebRequest$get_timeout,
	set_timeout: Sys$Net$WebRequest$set_timeout,
	getResolvedUrl: Sys$Net$WebRequest$getResolvedUrl,
	invoke: Sys$Net$WebRequest$invoke
}


Sys.Net.WebRequest._resolveUrl = function Sys$Net$WebRequest$_resolveUrl(url, baseUrl) {
	if (url && url.indexOf('://') !== -1) {
		return url;
	}

	if (!baseUrl || baseUrl.length === 0) {
		var baseElement = document.getElementsByTagName('base')[0];
		if (baseElement && baseElement.href && baseElement.href.length > 0) {
			baseUrl = baseElement.href;
		}
		else {
			baseUrl = document.URL;
		}
	}

	var qsStart = baseUrl.indexOf('?');
	if (qsStart !== -1) {
		baseUrl = baseUrl.substr(0, qsStart);
	}
	qsStart = baseUrl.indexOf('#');
	if (qsStart !== -1) {
		baseUrl = baseUrl.substr(0, qsStart);
	}
	baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf('/') + 1);

	if (!url || url.length === 0) {
		return baseUrl;
	}

	if (url.charAt(0) === '/') {
		var slashslash = baseUrl.indexOf('://');
		if (slashslash === -1) {
			throw Error.argument("baseUrl", Sys.Res.badBaseUrl1);
		}

		var nextSlash = baseUrl.indexOf('/', slashslash + 3);
		if (nextSlash === -1) {
			throw Error.argument("baseUrl", Sys.Res.badBaseUrl2);
		}

		return baseUrl.substr(0, nextSlash) + url;
	}
	else {
		var lastSlash = baseUrl.lastIndexOf('/');
		if (lastSlash === -1) {
			throw Error.argument("baseUrl", Sys.Res.badBaseUrl3);
		}

		return baseUrl.substr(0, lastSlash+1) + url;
	}
}

Sys.Net.WebRequest._createQueryString = function Sys$Net$WebRequest$_createQueryString(queryString, encodeMethod, addParams) {
	encodeMethod = encodeMethod || encodeURIComponent;
	var i = 0, obj, val, arg, sb = new Sys.StringBuilder();
	if (queryString) {
		for (arg in queryString) {
			obj = queryString[arg];
			if (typeof(obj) === "function") continue;
			val = Sys.Serialization.JavaScriptSerializer.serialize(obj);
			if (i++) {
				sb.append('&');
			}
			sb.append(arg);
			sb.append('=');
			sb.append(encodeMethod(val));
		}
	}
	if (addParams) {
		if (i) {
			sb.append('&');
		}
		sb.append(addParams);
	}
	return sb.toString();
}

Sys.Net.WebRequest._createUrl = function Sys$Net$WebRequest$_createUrl(url, queryString, addParams) {
	if (!queryString && !addParams) {
		return url;
	}
	var qs = Sys.Net.WebRequest._createQueryString(queryString, null, addParams);
	return qs.length
		? url + ((url && url.indexOf('?') >= 0) ? "&" : "?") + qs
		: url;
}

Sys.Net.WebRequest.registerClass('Sys.Net.WebRequest');






Type.registerNamespace('Sys.Net');

Sys.Net.WebServiceProxy = function Sys$Net$WebServiceProxy() {
}

	function Sys$Net$WebServiceProxy$get_timeout() {
		/// <value type="Number" locid="P:J#Sys.Net.WebServiceProxy.timeout"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._timeout || 0;
	}
	function Sys$Net$WebServiceProxy$set_timeout(value) {

		if (value < 0) {
			throw Error.argumentOutOfRange('value', value, Sys.Res.invalidTimeout);
		}
		this._timeout = value;
	}
	function Sys$Net$WebServiceProxy$get_defaultUserContext() {
		/// <value mayBeNull="true" locid="P:J#Sys.Net.WebServiceProxy.defaultUserContext"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return (typeof(this._userContext) === "undefined") ? null : this._userContext;
	}
	function Sys$Net$WebServiceProxy$set_defaultUserContext(value) {

		this._userContext = value;
	}
	function Sys$Net$WebServiceProxy$get_defaultSucceededCallback() {
		/// <value type="Function" mayBeNull="true" locid="P:J#Sys.Net.WebServiceProxy.defaultSucceededCallback"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._succeeded || null;
	}
	function Sys$Net$WebServiceProxy$set_defaultSucceededCallback(value) {

		this._succeeded = value;
	}
	function Sys$Net$WebServiceProxy$get_defaultFailedCallback() {
		/// <value type="Function" mayBeNull="true" locid="P:J#Sys.Net.WebServiceProxy.defaultFailedCallback"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._failed || null;
	}
	function Sys$Net$WebServiceProxy$set_defaultFailedCallback(value) {

		this._failed = value;
	}
	function Sys$Net$WebServiceProxy$get_enableJsonp() {
		/// <value type="Boolean" locid="P:J#Sys.Net.WebServiceProxy.enableJsonp"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return !!this._jsonp;
	}
	function Sys$Net$WebServiceProxy$set_enableJsonp(value) {

		this._jsonp = value;
	}
	function Sys$Net$WebServiceProxy$get_path() {
		/// <value type="String" locid="P:J#Sys.Net.WebServiceProxy.path"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._path || null;
	}
	function Sys$Net$WebServiceProxy$set_path(value) {

		this._path = value;
	}
	function Sys$Net$WebServiceProxy$get_jsonpCallbackParameter() {
		/// <value type="String" locid="P:J#Sys.Net.WebServiceProxy.jsonpCallbackParameter"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._callbackParameter || "callback";
	}
	function Sys$Net$WebServiceProxy$set_jsonpCallbackParameter(value) {

		this._callbackParameter = value;
	}
	function Sys$Net$WebServiceProxy$_invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext) {
		/// <summary locid="M:J#Sys.Net.WebServiceProxy._invoke" />
		/// <param name="servicePath" type="String"></param>
		/// <param name="methodName" type="String"></param>
		/// <param name="useGet" type="Boolean"></param>
		/// <param name="params"></param>
		/// <param name="onSuccess" type="Function" mayBeNull="true" optional="true"></param>
		/// <param name="onFailure" type="Function" mayBeNull="true" optional="true"></param>
		/// <param name="userContext" mayBeNull="true" optional="true"></param>
		/// <returns type="Sys.Net.WebRequest" mayBeNull="true"></returns>


		onSuccess = onSuccess || this.get_defaultSucceededCallback();
		onFailure = onFailure || this.get_defaultFailedCallback();
		if (userContext === null || typeof userContext === 'undefined') userContext = this.get_defaultUserContext();
		return Sys.Net.WebServiceProxy.invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, this.get_timeout(), this.get_enableJsonp(), this.get_jsonpCallbackParameter());
	}
Sys.Net.WebServiceProxy.prototype = {
	get_timeout: Sys$Net$WebServiceProxy$get_timeout,
	set_timeout: Sys$Net$WebServiceProxy$set_timeout,
	get_defaultUserContext: Sys$Net$WebServiceProxy$get_defaultUserContext,
	set_defaultUserContext: Sys$Net$WebServiceProxy$set_defaultUserContext,
	get_defaultSucceededCallback: Sys$Net$WebServiceProxy$get_defaultSucceededCallback,
	set_defaultSucceededCallback: Sys$Net$WebServiceProxy$set_defaultSucceededCallback,
	get_defaultFailedCallback: Sys$Net$WebServiceProxy$get_defaultFailedCallback,
	set_defaultFailedCallback: Sys$Net$WebServiceProxy$set_defaultFailedCallback,
	get_enableJsonp: Sys$Net$WebServiceProxy$get_enableJsonp,
	set_enableJsonp: Sys$Net$WebServiceProxy$set_enableJsonp,
	get_path: Sys$Net$WebServiceProxy$get_path,
	set_path: Sys$Net$WebServiceProxy$set_path,
	get_jsonpCallbackParameter: Sys$Net$WebServiceProxy$get_jsonpCallbackParameter,
	set_jsonpCallbackParameter: Sys$Net$WebServiceProxy$set_jsonpCallbackParameter,
	_invoke: Sys$Net$WebServiceProxy$_invoke
}
Sys.Net.WebServiceProxy.registerClass('Sys.Net.WebServiceProxy');

Sys.Net.WebServiceProxy.invoke = function Sys$Net$WebServiceProxy$invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, timeout, enableJsonp, jsonpCallbackParameter) {
	/// <summary locid="M:J#Sys.Net.WebServiceProxy.invoke" />
	/// <param name="servicePath" type="String"></param>
	/// <param name="methodName" type="String" mayBeNull="true" optional="true"></param>
	/// <param name="useGet" type="Boolean" optional="true" mayBeNull="true"></param>
	/// <param name="params" mayBeNull="true" optional="true"></param>
	/// <param name="onSuccess" type="Function" mayBeNull="true" optional="true"></param>
	/// <param name="onFailure" type="Function" mayBeNull="true" optional="true"></param>
	/// <param name="userContext" mayBeNull="true" optional="true"></param>
	/// <param name="timeout" type="Number" optional="true" mayBeNull="true"></param>
	/// <param name="enableJsonp" type="Boolean" optional="true" mayBeNull="true"></param>
	/// <param name="jsonpCallbackParameter" type="String" optional="true" mayBeNull="true"></param>
	/// <returns type="Sys.Net.WebRequest" mayBeNull="true"></returns>

	var schemeHost = (enableJsonp !== false) ? Sys.Net.WebServiceProxy._xdomain.exec(servicePath) : null,
		tempCallback, jsonp = schemeHost && (schemeHost.length === 3) &&
			((schemeHost[1] !== location.protocol) || (schemeHost[2] !== location.host));
	useGet = jsonp || useGet;
	if (jsonp) {
		jsonpCallbackParameter = jsonpCallbackParameter || "callback";
		tempCallback = "_jsonp" + Sys._jsonp++;
	}
	if (!params) params = {};
	var urlParams = params;
	if (!useGet || !urlParams) urlParams = {};
	var error, timeoutcookie = null, body = null,
		url = Sys.Net.WebRequest._createUrl(methodName
			? (servicePath+"/"+encodeURIComponent(methodName))
			: servicePath, urlParams, jsonp ? (jsonpCallbackParameter + "=Sys." + tempCallback) : null);
	if (jsonp) {
		function jsonpComplete(data, statusCode) {
			if (timeoutcookie !== null) {
				window.clearTimeout(timeoutcookie);
				timeoutcookie = null;
			}
			delete Sys[tempCallback];
			tempCallback = null;
			if ((typeof(statusCode) !== "undefined") && (statusCode !== 200)) {
				if (onFailure) {
					error = new Sys.Net.WebServiceError(false,
							data.Message || String.format(Sys.Res.webServiceFailedNoMsg, methodName),
							data.StackTrace || null,
							data.ExceptionType || null,
							data);
					error._statusCode = statusCode;
					onFailure(error, userContext, methodName);
				}
				else {
					if (data.StackTrace && data.Message) {
						error = data.StackTrace + "-- " + data.Message;
					}
					else {
						error = data.StackTrace || data.Message;
					}
					error = String.format(error ? Sys.Res.webServiceFailed : Sys.Res.webServiceFailedNoMsg, methodName, error);
					throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
				}
			}
			else if (onSuccess) {
				onSuccess(data, userContext, methodName);
			}
		}
		Sys[tempCallback] = jsonpComplete;
		Sys._loadJsonp(url, function() {
			if (tempCallback) {
				jsonpComplete({ Message: String.format(Sys.Res.webServiceFailedNoMsg, methodName) }, -1);
			}
		});
		return null;
	}
	var request = new Sys.Net.WebRequest();
	request.set_url(url);
	request.get_headers()['Content-Type'] = 'application/json; charset=utf-8';
	if (!useGet) {
		body = Sys.Serialization.JavaScriptSerializer.serialize(params);
		if (body === "{}") body = "";
	}
	request.set_body(body);
	request.add_completed(onComplete);
	if (timeout && timeout > 0) request.set_timeout(timeout);
	request.invoke();
	function onComplete(response, eventArgs) {
		if (response.get_responseAvailable()) {
			var ex, statusCode = response.get_statusCode();
			var result = null;
			try {
				var contentType = response.getResponseHeader("Content-Type");
				result = contentType.startsWith("application/json") ? response.get_object() :
					(contentType.startsWith("text/xml") ? response.get_xml() : response.get_responseData());
			}
			catch (ex) {
			}

			var error = response.getResponseHeader("jsonerror");
			var errorObj = (error === "true");
			if (errorObj) {
				if (result) {
					result = new Sys.Net.WebServiceError(false, result.Message, result.StackTrace, result.ExceptionType, result);
				}
			}
			else if (contentType.startsWith("application/json")) {
				result = (!result || (typeof(result.d) === "undefined")) ? result : result.d;
			}
			if (((statusCode < 200) || (statusCode >= 300)) || errorObj) {
				if (onFailure) {
					if (!result || !errorObj) {
						result = new Sys.Net.WebServiceError(false
, String.format(Sys.Res.webServiceFailedNoMsg, methodName));
					}
					result._statusCode = statusCode;
					onFailure(result, userContext, methodName);
				}
				else {
					if (result && errorObj) {
						error = result.get_exceptionType() + "-- " + result.get_message();
					}
					else {
						error = response.get_responseData();
					}
					throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
				}
			}
			else if (onSuccess) {
				onSuccess(result, userContext, methodName);
			}
		}
		else {
			var timedOut = response.get_timedOut(),
				msg = String.format((timedOut ? Sys.Res.webServiceTimedOut : Sys.Res.webServiceFailedNoMsg), methodName);
			if (onFailure) {
				onFailure(new Sys.Net.WebServiceError(timedOut, msg, "", ""), userContext, methodName);
			}
			else {
				throw Sys.Net.WebServiceProxy._createFailedError(methodName, msg);
			}
		}
	}

	return request;
}

Sys.Net.WebServiceProxy._createFailedError = function Sys$Net$WebServiceProxy$_createFailedError(methodName, errorMessage) {
	var displayMessage = "Sys.Net.WebServiceFailedException: " + errorMessage;
	var e = Error.create(displayMessage, { 'name': 'Sys.Net.WebServiceFailedException', 'methodName': methodName });
	e.popStackFrame();
	return e;
}

Sys.Net.WebServiceProxy._defaultFailedCallback = function Sys$Net$WebServiceProxy$_defaultFailedCallback(err, methodName) {
	var error = err.get_exceptionType() + "-- " + err.get_message();
	throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
}



Sys.Net.WebServiceProxy._generateTypedConstructor = function Sys$Net$WebServiceProxy$_generateTypedConstructor(type) {
	return function(properties) {
		if (properties) {
			for (var name in properties) {
				this[name] = properties[name];
			}
		}
		this.__type = type;
	}
}


Sys._jsonp = 0;


Sys.Net.WebServiceProxy._xdomain = /^\s*([a-zA-Z0-9\+\-\.]+\:)\/\/([^?#\/]+)/;

Sys._loadJsonp = function _loadJsonp(src, callback) {
	var script = createElement('script');
	script.type = 'text/javascript';
	script.src = src;
	var attachEvent = script.attachEvent;
	function onEvent() {
		if (!attachEvent || /loaded|complete/.test(script.readyState)) {
			if (attachEvent) {
				script.detachEvent("onreadystatechange", onEvent);
			}
			else {
				script.removeEventListener("load", onEvent, false);
				script.removeEventListener("error", onEvent, false);
			}
			callback.apply(script);
			script = null;
		}
	}
	if (attachEvent) {
		script.attachEvent("onreadystatechange", onEvent);
	}
	else {
		script.addEventListener("load", onEvent, false);
		script.addEventListener("error", onEvent, false);
	}
	document.getElementsByTagName("head")[0].appendChild(script);
}

Sys.Net.WebServiceError = function Sys$Net$WebServiceError(timedOut, message, stackTrace, exceptionType, errorObject) {
	/// <summary locid="M:J#Sys.Net.WebServiceError.#ctor" />
	/// <param name="timedOut" type="Boolean"></param>
	/// <param name="message" type="String" mayBeNull="true"></param>
	/// <param name="stackTrace" type="String" mayBeNull="true" optional="true"></param>
	/// <param name="exceptionType" type="String" mayBeNull="true" optional="true"></param>
	/// <param name="errorObject" type="Object" mayBeNull="true" optional="true"></param>

	this._timedOut = timedOut;
	this._message = message;
	this._stackTrace = stackTrace;
	this._exceptionType = exceptionType;
	this._errorObject = errorObject;
	this._statusCode = -1;
}


	function Sys$Net$WebServiceError$get_timedOut() {
		/// <value type="Boolean" locid="P:J#Sys.Net.WebServiceError.timedOut"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._timedOut;
	}

	function Sys$Net$WebServiceError$get_statusCode() {
		/// <value type="Number" locid="P:J#Sys.Net.WebServiceError.statusCode"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._statusCode;
	}

	function Sys$Net$WebServiceError$get_message() {
		/// <value type="String" locid="P:J#Sys.Net.WebServiceError.message"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._message;
	}

	function Sys$Net$WebServiceError$get_stackTrace() {
		/// <value type="String" locid="P:J#Sys.Net.WebServiceError.stackTrace"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._stackTrace || "";
	}

	function Sys$Net$WebServiceError$get_exceptionType() {
		/// <value type="String" locid="P:J#Sys.Net.WebServiceError.exceptionType"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._exceptionType || "";
	}

	function Sys$Net$WebServiceError$get_errorObject() {
		/// <value type="Object" locid="P:J#Sys.Net.WebServiceError.errorObject"></value>
		if (arguments.length !== 0) throw Error.parameterCount();
		return this._errorObject || null;
	}
Sys.Net.WebServiceError.prototype = {
	get_timedOut: Sys$Net$WebServiceError$get_timedOut,
	get_statusCode: Sys$Net$WebServiceError$get_statusCode,
	get_message: Sys$Net$WebServiceError$get_message,
	get_stackTrace: Sys$Net$WebServiceError$get_stackTrace,
	get_exceptionType: Sys$Net$WebServiceError$get_exceptionType,
	get_errorObject: Sys$Net$WebServiceError$get_errorObject
}
Sys.Net.WebServiceError.registerClass('Sys.Net.WebServiceError');


Type.registerNamespace("Sys.Services");






var ns = Sys.Services;


var service = "Service",
	role = "Role",
	auth = "Authentication",
	profile = "Profile";
function setPath(path) {
	this._path = path;
}

ns[auth+service] = {
	set_path: setPath,
	_setAuthenticated: function(auth) {
		this._auth = auth;
	}
};
ns["_" + auth + service] = {};


ns[profile + service] = { set_path: setPath };
ns["_" + profile + service] = {};
ns.ProfileGroup = function ns$ProfileGroup(properties) {
	this._propertygroup = properties;
}


ns[role + service] = { set_path: setPath };
ns["_" + role + service] = {};


}

if (Sys.loader) {
	Sys.loader.registerScript("MicrosoftAjax", null, execute);
}
else {
	execute();
}

})(window, window.Sys);
var $get, $create, $addHandler, $addHandlers, $clearHandlers;






Type.registerNamespace('Sys');

Sys.Res={
'invokeCalledTwice':'Cannot call invoke more than once.',
'argumentTypeName':'Value is not the name of an existing type.',
'cantBeCalledAfterDispose':'Can\'t be called after dispose.',
'webServiceFailed':'The server method \'{0}\' failed with the following error: {1}',
'componentCantSetIdAfterAddedToApp':'The id property of a component can\'t be set after it\'s been added to the Application object.',
'behaviorDuplicateName':'A behavior with name \'{0}\' already exists or it is the name of an existing property on the target element.',
'notATypeName':'Value is not a valid type name.',
'elementNotFound':'An element with id \'{0}\' could not be found.',
'stateMustBeStringDictionary':'The state object can only have null and string fields.',
'invalidExecutorType':'Could not create a valid Sys.Net.WebRequestExecutor from: {0}.',
'boolTrueOrFalse':'Value must be \'true\' or \'false\'.',
'cannotCallBeforeResponse':'Cannot call {0} when responseAvailable is false.',
'scriptLoadFailedNoHead':'ScriptLoader requires pages to contain a <head> element.',
'stringFormatInvalid':'The format string is invalid.',
'referenceNotFound':'Component \'{0}\' was not found.',
'enumReservedName':'\'{0}\' is a reserved name that can\'t be used as an enum value name.',
'circularParentChain':'The chain of control parents can\'t have circular references.',
'namespaceContainsNonObject':'Object {0} already exists and is not an object.',
'undefinedEvent':'\'{0}\' is not an event.',
'invalidTimeout':'Value must be greater than or equal to zero.',
'cannotAbortBeforeStart':'Cannot abort when executor has not started.',
'observableConflict':'Object already contains a member with the name \'{0}\'.',
'invalidHttpVerb':'httpVerb cannot be set to an empty or null string.',
'nullWebRequest':'Cannot call executeRequest with a null webRequest.',
'historyCannotEnableHistory':'Cannot set enableHistory after initialization.',
'eventHandlerInvalid':'Handler was not added through the Sys.UI.DomEvent.addHandler method.',
'scriptLoadFailedDebug':'The script \'{0}\' failed to load. Check for:\r\n Inaccessible path.\r\n Script errors. (IE) Enable \'Display a notification about every script error\' under advanced settings.',
'propertyNotWritable':'\'{0}\' is not a writable property.',
'enumInvalidValueName':'\'{0}\' is not a valid name for an enum value.',
'cannotCallOnceStarted':'Cannot call {0} once started.',
'controlAlreadyDefined':'A control is already associated with the element.',
'addHandlerCantBeUsedForError':'Can\'t add a handler for the error event using this method. Please set the window.onerror property instead.',
'badBaseUrl1':'Base URL does not contain ://.',
'badBaseUrl2':'Base URL does not contain another /.',
'badBaseUrl3':'Cannot find last / in base URL.',
'setExecutorAfterActive':'Cannot set executor after it has become active.',
'cantAddNonFunctionhandler':'Can\'t add a handler that is not a function.',
'invalidNameSpace':'Value is not a valid namespace identifier.',
'notAnInterface':'Value is not a valid interface.',
'eventHandlerNotFunction':'Handler must be a function.',
'propertyNotAnArray':'\'{0}\' is not an Array property.',
'namespaceContainsClass':'Object {0} already exists as a class, enum, or interface.',
'typeRegisteredTwice':'Type {0} has already been registered. The type may be defined multiple times or the script file that defines it may have already been loaded. A possible cause is a change of settings during a partial update.',
'cantSetNameAfterInit':'The name property can\'t be set on this object after initialization.',
'historyMissingFrame':'For the history feature to work in IE, the page must have an iFrame element with id \'__historyFrame\' pointed to a page that gets its title from the \'title\' query string parameter and calls Sys.Application._onIFrameLoad() on the parent window. This can be done by setting EnableHistory to true on ScriptManager.',
'appDuplicateComponent':'Two components with the same id \'{0}\' can\'t be added to the application.',
'historyCannotAddHistoryPointWithHistoryDisabled':'A history point can only be added if enableHistory is set to true.',
'expectedElementOrId':'Value must be a DOM element or DOM element id.',
'selectorNotFound':'An element with selector \'{0}\' could not be found.',
'cannotCallOutsideHandler':'Cannot call {0} outside of a completed event handler.',
'methodNotFound':'No method found with name \'{0}\'.',
'arrayParseBadFormat':'Value must be a valid string representation for an array. It must start with a \'[\' and end with a \']\'.',
'cannotSerializeObjectWithCycle':'Cannot serialize object with cyclic reference within child properties.',
'stateFieldNameInvalid':'State field names must not contain any \'=\' characters.',
'stringFormatBraceMismatch':'The format string contains an unmatched opening or closing brace.',
'enumValueNotInteger':'An enumeration definition can only contain integer values.',
'propertyNullOrUndefined':'Cannot set the properties of \'{0}\' because it returned a null value.',
'expectedDomElementOrSelector':'\'{0}\' must be a DOM element or DOM element selector.',
'argumentDomNode':'Value must be a DOM element or a text node.',
'componentCantSetIdTwice':'The id property of a component can\'t be set more than once.',
'createComponentOnDom':'Value must be null for Components that are not Controls or Behaviors.',
'createNoDom':'Value must not be null for Controls and Behaviors.',
'cantAddWithoutId':'Can\'t add a component that doesn\'t have an id.',
'urlTooLong':'The history state must be small enough to not make the url larger than {0} characters.',
'notObservable':'Instances of type \'{0}\' cannot be observed.',
'badTypeName':'Value is not the name of the type being registered or the name is a reserved word.',
'argumentInteger':'Value must be an integer.',
'argumentType':'Object cannot be converted to the required type.',
'argumentNull':'Value cannot be null.',
'scriptAlreadyLoaded':'The script \'{0}\' has been referenced multiple times. If referencing Microsoft AJAX scripts explicitly, set the MicrosoftAjaxMode property of the ScriptManager to Explicit.',
'scriptDependencyNotFound':'The script \'{0}\' failed to load because it is dependent on script \'{1}\'.',
'formatBadFormatSpecifier':'Format specifier was invalid.',
'requiredScriptReferenceNotIncluded':'\'{0}\' requires that you have included a script reference to \'{1}\'.',
'webServiceFailedNoMsg':'The server method \'{0}\' failed.',
'argumentDomElement':'Value must be a DOM element.',
'actualValue':'Actual value was {0}.',
'enumInvalidValue':'\'{0}\' is not a valid value for enum {1}.',
'scriptLoadFailed':'The script \'{0}\' could not be loaded.',
'parameterCount':'Parameter count mismatch.',
'cannotDeserializeEmptyString':'Cannot deserialize empty string.',
'formatInvalidString':'Input string was not in a correct format.',
'argument':'Value does not fall within the expected range.',
'cannotDeserializeInvalidJson':'Cannot deserialize. The data does not correspond to valid JSON.',
'cannotSerializeNonFiniteNumbers':'Cannot serialize non finite numbers.',
'argumentUndefined':'Value cannot be undefined.',
'webServiceInvalidReturnType':'The server method \'{0}\' returned an invalid type. Expected type: {1}',
'servicePathNotSet':'The path to the web service has not been set.',
'argumentTypeWithTypes':'Object of type \'{0}\' cannot be converted to type \'{1}\'.',
'paramName':'Parameter name: {0}',
'nullReferenceInPath':'Null reference while evaluating data path: \'{0}\'.',
'format':'One of the identified items was in an invalid format.',
'assertFailedCaller':'Assertion Failed: {0}\r\nat {1}',
'argumentOutOfRange':'Specified argument was out of the range of valid values.',
'webServiceTimedOut':'The server method \'{0}\' timed out.',
'notImplemented':'The method or operation is not implemented.',
'assertFailed':'Assertion Failed: {0}',
'invalidOperation':'Operation is not valid due to the current state of the object.',
'breakIntoDebugger':'{0}\r\n\r\nBreak into debugger?'
};


/***/ }),

/***/ "../../../Public/ExoWeb/ExoWeb/client/ref/aspnetajax/MicrosoftAjaxTemplates.debug.js":
/*!****************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Public/ExoWeb/ExoWeb/client/ref/aspnetajax/MicrosoftAjaxTemplates.debug.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Name:        MicrosoftAjaxTemplates.debug.js
// Assembly:    System.Web.Ajax
// Version:     3.0.31106.0
// FileVersion: 3.0.31106.0
/// <reference name="MicrosoftAjaxComponentModel.js" />
/// <reference name="MicrosoftAjaxSerialization.js" />



(function () {

	function execute() {
		Type._registerScript("MicrosoftAjaxTemplates.js", ["MicrosoftAjaxComponentModel.js", "MicrosoftAjaxSerialization.js"]);

		var merge = Sys._merge,
			foreach = Sys._foreach,
			forIn = Sys._forIn,
			indexOf = Sys._indexOf,
			isBrowser = Sys._isBrowser;

		function serialize(obj) {
			return Sys.Serialization.JavaScriptSerializer.serialize(obj);
		}

		Type.registerNamespace("Sys.Net");

		Sys.Net.WebRequestEventArgs = function Sys$Net$WebRequestEventArgs(executor, error, result) {
			/// <summary locid="M:J#Sys.Net.WebRequestEventArgs.#ctor" />
			/// <param name="executor" type="Sys.Net.WebRequestExecutor" mayBeNull="true"></param>
			/// <param name="error" type="Sys.Net.WebServiceError" optional="true" mayBeNull="true"></param>
			/// <param name="result" optional="true" mayBeNull="true"></param>
			this._executor = executor;
			this._error = error || null;
			this._result = typeof (result) === "undefined" ? null : result;
			Sys.Net.WebRequestEventArgs.initializeBase(this);
		}

		function Sys$Net$WebRequestEventArgs$get_error() {
			/// <value type="Sys.Net.WebServiceError" mayBeNull="true" locid="P:J#Sys.Net.WebRequestEventArgs.error"></value>
			return this._error || null;
		}
		function Sys$Net$WebRequestEventArgs$get_executor() {
			/// <value type="Sys.Net.WebRequestExecutor" mayBeNull="true" locid="P:J#Sys.Net.WebRequestEventArgs.executor"></value>
			return this._executor;
		}
		function Sys$Net$WebRequestEventArgs$get_result() {
			/// <value mayBeNull="true" locid="P:J#Sys.Net.WebRequestEventArgs.result"></value>
			return this._result;
		}
		Sys.Net.WebRequestEventArgs.prototype = {
			get_error: Sys$Net$WebRequestEventArgs$get_error,
			get_executor: Sys$Net$WebRequestEventArgs$get_executor,
			get_result: Sys$Net$WebRequestEventArgs$get_result
		};
		Sys.Net.WebRequestEventArgs.registerClass("Sys.Net.WebRequestEventArgs", Sys.EventArgs);

		Type.registerNamespace("Sys.Data");

		Sys.Data.DataEventArgs = function Sys$Data$DataEventArgs(data) {
			/// <summary locid="M:J#Sys.Data.DataEventArgs.#ctor" />
			/// <param name="data" mayBeNull="true"></param>
			this._data = data;
			Sys.Data.DataEventArgs.initializeBase(this);
		}

		function Sys$Data$DataEventArgs$get_data() {
			/// <value mayBeNull="true" locid="P:J#Sys.Data.DataEventArgs.data"></value>
			var d = this._data;
			return (typeof (d) === "undefined" ? null : d);
		}
		function Sys$Data$DataEventArgs$set_data(value) {
			this._data = value;
		}
		function Sys$Data$DataEventArgs$get_itemPlaceholder() {
			/// <value mayBeNull="true" locid="P:J#Sys.Data.DataEventArgs.itemPlaceholder"></value>
			return this._placeholder || null;
		}
		function Sys$Data$DataEventArgs$set_itemPlaceholder(value) {
			this._placeholder = value;
		}
		function Sys$Data$DataEventArgs$get_itemTemplate() {
			/// <value mayBeNull="true" locid="P:J#Sys.Data.DataEventArgs.itemTemplate"></value>
			return this._itemTemplate || null;
		}
		function Sys$Data$DataEventArgs$set_itemTemplate(value) {
			this._itemTemplate = value;
		}
		Sys.Data.DataEventArgs.prototype = {
			get_data: Sys$Data$DataEventArgs$get_data,
			set_data: Sys$Data$DataEventArgs$set_data,
			get_itemPlaceholder: Sys$Data$DataEventArgs$get_itemPlaceholder,
			set_itemPlaceholder: Sys$Data$DataEventArgs$set_itemPlaceholder,
			get_itemTemplate: Sys$Data$DataEventArgs$get_itemTemplate,
			set_itemTemplate: Sys$Data$DataEventArgs$set_itemTemplate
		};
		Sys.Data.DataEventArgs.registerClass("Sys.Data.DataEventArgs", Sys.CancelEventArgs);

		if (!Sys.Data.IDataProvider) {
			Sys.Data.IDataProvider = function Sys$Data$IDataProvider() {
			}

			function Sys$Data$IDataProvider$fetchData(operation, parameters, mergeOption, httpVerb, succeededCallback, failedCallback, timeout, userContext) {
				/// <summary locid="M:J#Sys.Data.IDataProvider.fetchData" />
				/// <param name="operation"></param>
				/// <param name="parameters" type="Object" mayBeNull="true" optional="true"></param>
				/// <param name="mergeOption" type="Sys.Data.MergeOption" mayBeNull="true" optional="true"></param>
				/// <param name="httpVerb" type="String" mayBeNull="true" optional="true"></param>
				/// <param name="succeededCallback" type="Function" mayBeNull="true" optional="true"></param>
				/// <param name="failedCallback" type="Function" mayBeNull="true" optional="true"></param>
				/// <param name="timeout" type="Number" integer="true" mayBeNull="true" optional="true"></param>
				/// <param name="userContext" mayBeNull="true" optional="true"></param>
				/// <returns type="Sys.Net.WebRequest"></returns>
				throw Error.notImplemented();
			}
			Sys.Data.IDataProvider.prototype = {
				fetchData: Sys$Data$IDataProvider$fetchData
			}
			Sys.Data.IDataProvider.registerInterface("Sys.Data.IDataProvider");
		}
		if (!Sys.Data.MergeOption) {
			Sys.Data.MergeOption = function Sys$Data$MergeOption() {
				/// <summary locid="M:J#Sys.Data.MergeOption.#ctor" />
				/// <field name="appendOnly" type="Number" integer="true" static="true" locid="F:J#Sys.Data.MergeOption.appendOnly"></field>
				/// <field name="overwriteChanges" type="Number" integer="true" static="true" locid="F:J#Sys.Data.MergeOption.overwriteChanges"></field>
				throw Error.notImplemented();
			}




			Sys.Data.MergeOption.prototype = {
				appendOnly: 0,
				overwriteChanges: 1
			}
			Sys.Data.MergeOption.registerEnum("Sys.Data.MergeOption");

		}

		Type.registerNamespace("Sys.UI");

		Sys.Application.registerMarkupExtension = function Sys$Application$registerMarkupExtension(extensionName, extension, isExpression) {
			/// <summary locid="M:J#Sys.Application.registerMarkupExtension" />
			/// <param name="extensionName" type="String"></param>
			/// <param name="extension" type="Function"></param>
			/// <param name="isExpression" type="Boolean" optional="true"></param>
			if (!this._extensions) {
				this._extensions = {};
			}
			isExpression = ((typeof (isExpression) === "undefined") || (isExpression === true));
			this._extensions[extensionName] = { expression: isExpression, extension: extension };
		}
		Sys.Application._getMarkupExtension = function Sys$Application$_getMarkupExtension(name) {
			var extension = this._extensions ? this._extensions[name] : null;
			if (!extension) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.cannotFindMarkupExtension, name));
			}
			return extension;
		}
		Sys.UI.Template = function Sys$UI$Template(element) {
			/// <summary locid="M:J#Sys.UI.Template.#ctor" />
			/// <param name="element" domElement="true" mayBeNull="false"></param>
			this._element = element;
			this._instantiateIn = null;
			this._instanceId = 0;
		}

		function Sys$UI$Template$get_element() {
			/// <value domElement="true" locid="P:J#Sys.UI.Template.element"></value>
			return this._element;
		}
		function Sys$UI$Template$dispose() {
			this._element = null;
			this._instantiateIn = null;
		}
		function Sys$UI$Template$_appendTextNode(code, storeElementCode, text) {
			code.push(storeElementCode, "document.createTextNode(", serialize(text), "));\n");
		}
		function Sys$UI$Template$_appendAttributeSetter(code, typeIndex, attrib, expression, isExpression, booleanValue) {
			var ns = attrib.ns, name = attrib.name, restricted = (!ns && Sys.UI.Template._isRestricted(name));
			if (restricted) {
				expression = "Sys.UI.Template._checkAttribute('" + name + "', " + expression + ")";
			}
			switch (attrib.type) {
				case 1:
					code.push("  $component = $element;\n  ");
					if (isExpression) {
						if (attrib.textNode) {
							code.push("container.appendChild(document.createTextNode(", expression, "));\n");
						}
						else {
							code.push("$element.", name, " = ", expression, ";\n");
						}
					}
					else {
						code.push(expression, ";\n");
					}
					if (attrib.textNode || name === "innerHTML") return true;
					break;
				case 2:
					if (isExpression) {
						name = serialize(name);
						code.push("  $component = $element;\n    (", expression,
								") ? Sys.UI.DomElement.addCssClass($element, ", name,
								") : Sys.UI.DomElement.removeCssClass($element, ", name, ");\n");
					}
					else {
						code.push("  $component = $element;\n  ", expression, ";\n");
					}
					break;
				case 3:
					var index = typeIndex[ns];
					if (index.isClass) {
						code.push("  $component = __componentIndex['", ns, "'];\n");
						if (isExpression) {
							var map = attrib.map;
							if (map.type === 1) {
								code.push("  $component.", map.setterName, "(", expression, ");\n");
							}
							else if (map.type === 2) {
								code.push("  __f = ", expression, ";\n",
									  "  $component.", map.setterName, '(typeof(__f) === "function" ? __f : new Function("sender", "args", __f));\n');
							}
							else {
								code.push("  $component['", map.name, "'] = ", expression, ";\n");
							}
						}
						else {
							code.push("  ", expression, ";\n");
						}
					}
					else {
						if (!isExpression) {
							throw Error.invalidOperation();
						}
						var prop = serialize(attrib.name) + ": " + expression;
						if (!index.props) {
							index.props = prop;
						}
						else {
							index.props += ", " + prop;
						}
					}
					break;
				case 4:
					this["_" + name] = expression;
					break;
				default:
					if (isExpression) {
						if (/^on/i.test(name)) {
							code.push("  $component = $element;\n  $element." + name + " = new Function(" +
							(document.attachEvent ? "" : "'event', ") + expression + ");\n");
						}
						else {
							if (booleanValue) {
								code.push("  $component = $element;\n  if (" + expression +
										") {\n    __e = document.createAttribute('" + name +
										"');\n    __e.nodeValue = \"" + booleanValue + "\";\n    $element.setAttributeNode(__e);\n  }\n");
							}
							else {
								code.push("  $component = $element;\n  __e = document.createAttribute('" + name + "');\n  __e.nodeValue = " +
									expression + ";\n  $element.setAttributeNode(__e);\n");
							}
						}
					}
					else {
						code.push("  $component = $element;\n  " + expression + ";\n");
					}
					break;
			}
			return false;
		}
		function Sys$UI$Template$_processAttribute(code, typeIndex, attrib, value, booleanValue) {
			value = this._getAttributeExpression(attrib, value);
			if (value) {
				return this._appendAttributeSetter(code, typeIndex, attrib,
				value.code, value.isExpression, booleanValue);
			}
			return false;
		}
		function Sys$UI$Template$_getAttributeExpression(attrib, value, noSerialize) {
			var type = typeof (value);
			if (type === "undefined") return null;
			if (value === null) return { isExpression: true, code: "null" };
			if (!attrib.isNative && (type === "string")) {
				if (value.startsWith("{{") && value.endsWith("}}")) {
					return { isExpression: true, code: value.slice(2, -2).trim() };
				}
				else if (value.startsWith("{") && value.endsWith("}")) {
					var ext = Sys.Application._getExtensionCode(value.slice(1, -1)),
					properties = ext.properties,
					props = "";
					for (var name in properties) {
						var subValue = this._getAttributeExpression(attrib, properties[name]);
						if (subValue && subValue.isExpression) {
							var prop = serialize(name) + ":" + subValue.code;
							if (props) {
								props += "," + prop;
							}
							else {
								props = prop;
							}
						}
					}
					return { isExpression: ext.instance.expression,
						code: "Sys.Application._getMarkupExtension(" + serialize(ext.name) + ").extension($component, " +
						serialize((attrib.type === 2 ? "class:" : "") + attrib.name) +
						", $context, {" + props + "})"
					};
				}
			}
			if (attrib.isId) {
				noSerialize = true;
				value = '$id(' + serialize(value) + ')';
			}
			return { isExpression: true, code: (noSerialize ? value : serialize(value)) };
		}
		function Sys$UI$Template$_processBooleanAttribute(element, code, typeIndex, name) {
			var value, isNative, node = element.getAttributeNode("sys:" + name);
			if (!node) {
				isNative = true;
				node = element.getAttributeNode(name);
				if (node && (node.specified || (node.nodeValue === true))) {
					value = true;
				}
				else if (element.getAttribute(name) === name) {
					value = true;
				}
				else {
					return;
				}
			}
			else {
				value = node.nodeValue;
				if (value === "true") {
					value = true;
				}
				else if (value === "false") {
					return;
				}
			}
			this._processAttribute(code, typeIndex, { name: name, isNative: isNative }, value, name);
		}
		function Sys$UI$Template$_processBooleanAttributes(element, code, typeIndex, attributes) {
			var name, node, value;
			for (var i = 0, l = attributes.length; i < l; i++) {
				this._processBooleanAttribute(element, code, typeIndex, attributes[i]);
			}
		}
		function Sys$UI$Template$_processCodeBlock(name, element, code) {
			var value = this._getExplicitAttribute(null, null, element, name);
			if (value) {
				value = this._getAttributeExpression({ name: name }, value, true).code;
				code.push((name === "sys:if") ? ("  if (" + value + ") {\n")
						: ("  " + value + "\n"));
			}
			return !!value;
		}
		function Sys$UI$Template$_getExplicitAttribute(code, typeIndex, element, name, processName, isNative, attrib) {
			var e, node, value;
			if (name === "style" && element.style) {
				value = element.style.cssText;
			}
			else {
				try {
					// JBP: In IE9 the getAttributeNode method handles 'class' special, in that it appears to actually create
					// a new 'class' attribute and sets the value to empty string if it doesn't exist on the element.
					// This behavior appears to affect the sys:class attribute value, as it is also set to empty string after the getAttributeNode method is called.

					if (name.toLowerCase() === "class" && Sys.Browser.agent === Sys.Browser['InternetExplorer'] && Sys.Browser.version >= 9) {
						if (!element.className) {
							return;
						} else {
							// HACK: evaluate the sys:class attribute, which somehow sets the class attribute equal to sys:class value
							element.getAttributeNode("sys:class");
						}
					}

					node = element.getAttributeNode(name);

					if (node && node.specified) {
						value = node.nodeValue;
					}
				}
				catch (e) {
				}
			}
			if (value && processName) {
				this._processAttribute(code, typeIndex, merge({ name: processName, type: 1, isNative: isNative }, attrib), value);
			}
			return value;
		}
		function Sys$UI$Template$_buildTemplateCode(nestedTemplates, element, code, depth) {
			var i, j, l, m, typeName, isInput, isButton,
			expressionRegExp = Sys.UI.Template._expressionRegExp,
			storeElementCode = "  " + (depth ? ("__p[__d-1].appendChild(") : "__topElements.push("),
			useDirect = isBrowser("InternetExplorer") && Sys.Browser.version < 9;
			code.push("  __d++;\n");
			for (i = 0, l = element.childNodes.length; i < l; i++) {
				var childNode = element.childNodes[i], text = childNode.nodeValue;

				if (childNode.nodeType === 8) {
					code.push(storeElementCode + "document.createComment(" + serialize(text) + "));\n");
				}
				else if (childNode.nodeType === 3) {
					var trimText = text.trim();
					if (trimText.startsWith("{") && trimText.endsWith("}") && (!trimText.startsWith("{{") || !trimText.endsWith("}}"))) {
						var attribName, setComponentCode;
						setComponentCode = '$component=$element;\n';
						if (element.tagName.toLowerCase() === "textarea") {
							attribName = "value";
						}
						else {
							attribName = "innerText";
						}
						var expr = this._getAttributeExpression({ name: attribName }, trimText);
						if (expr.isExpression) {
							code.push(storeElementCode, "document.createTextNode(", expr.code, "));\n");
						}
						else {
							code.push('$component=$element;\n', '  ', expr.code, ';\n');
						}
					}
					else {
						var match = expressionRegExp.exec(text), lastIndex = 0;
						while (match) {
							var catchUpText = text.substring(lastIndex, match.index);
							if (catchUpText) {
								this._appendTextNode(code, storeElementCode, catchUpText);
							}
							code.push(storeElementCode, "document.createTextNode(", match[1], "));\n");
							lastIndex = match.index + match[0].length;
							match = expressionRegExp.exec(text);
						}
						if (lastIndex < text.length) {
							this._appendTextNode(code, storeElementCode, text.substr(lastIndex));
						}
					}
				}
				else {
					var attributes = childNode.attributes,
						typeNames = null, sysAttribute = null, typeIndex = {},
						tagName = childNode.tagName.toLowerCase(),
						booleanAttributes, dp1 = depth + 1, contentTemplate;
					if (tagName === "script") {
						continue;
					}
					var isCodeIfGenerated = this._processCodeBlock("sys:if", childNode, code);
					this._processCodeBlock("sys:codebefore", childNode, code);
					contentTemplate = this._getExplicitAttribute(null, null, childNode, "sys:content-template");
					if (contentTemplate) {
						if (contentTemplate.constructor !== String) throw new Error("The sys:content-template attribute value must be a string.");
						code.push("  __contentTemplates.push('" + contentTemplate + "');\n");
					}
					isButton = (tagName === "button");
					isInput = isButton || (tagName === "input");
					if (isInput) {
						var typeExpression = childNode.getAttribute("sys:type");
						typeExpression = typeExpression ?
						this._getAttributeExpression({ name: "type" }, typeExpression) :
						this._getAttributeExpression({ name: "type", isNative: true }, childNode.getAttribute("type"));
						var nameExpression = childNode.getAttribute("sys:name");
						nameExpression = nameExpression ?
						this._getAttributeExpression({ name: "name" }, nameExpression) :
						this._getAttributeExpression({ name: "name", isNative: true }, childNode.getAttribute("name"));
						if (!typeExpression.isExpression || !nameExpression.isExpression) {
							throw Error.invalidOperation(Sys.UI.TemplatesRes.mustSetInputElementsExplicitly);
						}
						code.push("  $element=container=__p[__d]=Sys.UI.Template._createInput(" + typeExpression.code + ", " + nameExpression.code + ", " + isButton + ");\n");
						booleanAttributes = Sys.UI.Template._inputBooleanAttributes;
						this._processBooleanAttributes(childNode, code, typeIndex, booleanAttributes[" list"]);
					}
					else {
						code.push("  $element=container=__p[__d]=document.createElement('" + childNode.nodeName + "');\n");
					}
					if (!depth) {
						code.push(" $element.__mstcindex = $context._tcindex;\n");
					}
					this._getExplicitAttribute(code, typeIndex, childNode, "sys:id", "id", false, { isId: true }) ||
					this._getExplicitAttribute(code, typeIndex, childNode, "id", "id", true, { isId: true });

					typeNames = this._getExplicitAttribute(code, typeIndex, childNode, "sys:attach");
					if (typeNames) {
						typeNames = typeNames.split(',');
						code.push("  __componentIndex = {}\n");
						for (j = 0, m = typeNames.length; j < m; j++) {
							typeName = typeNames[j].trim();
							if (typeIndex[typeName]) continue;
							var type = Sys.Application._findType(childNode, typeName, useDirect);
							if (!type) {
								throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.invalidAttach, "sys:attach", typeName));
							}
							var isComponent, isControlOrBehavior, isContext, isContentTemplate, isClass = typeof (type) !== "string";
							if (isClass) {
								isComponent = type.inheritsFrom(Sys.Component);
								isControlOrBehavior = (isComponent && (type.inheritsFrom(Sys.UI.Behavior) || type.inheritsFrom(Sys.UI.Control)));
								isContext = type.implementsInterface(Sys.UI.ITemplateContextConsumer);
								isContentTemplate = type.implementsInterface(Sys.UI.IContentTemplateConsumer);
							}
							typeIndex[typeName] = { type: type, isClass: isClass, isComponent: isComponent };
							if (isClass) {
								code.push("  __componentIndex['" + typeName + "'] = $component = new " + type.getName());
								if (isControlOrBehavior) {
									code.push("($element);\n");
								}
								else {
									code.push("();\n  Sys.Application._registerComponent($element, $component);\n");
								}
								if (isComponent) {
									code.push("  $component.beginUpdate();\n");
								}
								if (isContext) {
									code.push("  $component.set_templateContext($context);\n");
								}
								if (isContentTemplate) {
									code.push("  if (__parentContentTemplate && __parentContentTemplate.length > 0) $component.addContentTemplate(__parentContentTemplate);\n");
									code.push("  if (__contentTemplates.length > 0) $component.addContentTemplate(__contentTemplates.join(' '));\n");
								}
								var idattr = typeName + ":id",
								typeattr = Sys.Application._splitAttribute(idattr, false, typeIndex);
								typeattr.isId = true;
								this._getExplicitAttribute(code, typeIndex, childNode, idattr, "id", false, typeattr);
							}
						}
					}
					this._getExplicitAttribute(code, typeIndex, childNode, "style", "style.cssText", true);
					this._getExplicitAttribute(code, typeIndex, childNode, "class", "className", true);
					if (!isInput) {
						booleanAttributes = Sys.UI.Template._booleanAttributes[tagName] ||
						Sys.UI.Template._commonBooleanAttributes;
						this._processBooleanAttributes(childNode, code, typeIndex, booleanAttributes[" list"]);
					}
					var isSelect = (tagName === "select"),
					delayedAttributes = null,
					split = Sys.Application._splitAttribute,
					skipChildren = false,
					skip = { 'id': 1, 'class': 1, 'style': 1, 'sys:attach': 1, 'sys:id': 1, 'sys:disabled': 1, 'sys:checked': 1, 'sys:readonly': 1, 'sys:ismap': 1, 'sys:multiple': 1, 'sys:selected': 1, 'sys:if': 1, 'sys:codebefore': 1, 'sys:codeafter': 1, 'sys:content-template': 1 };
					for (j = 0, m = attributes.length; j < m; j++) {
						var attribute = attributes[j], name = attribute.nodeName, lowerName = name.toLowerCase();

						// HACK: IE includes user-defined attributes, as well as attributes added to an element
						// via JavaScript. This causes undesirable behavior when these attributes are copied to
						// a DOM element via template rendering. For example, in the case of jQuery data, the
						// template element and resulting rendered element will share the same data cache since
						// they have the same value for the expando attribute that is used as the cache key.
						if (name.indexOf("jQuery") === 0)
							continue;

						if (!attribute.specified && (!isInput || lowerName !== "value")) continue;
						if (skip[lowerName] || booleanAttributes[lowerName]) continue;
						if (isInput && Sys.UI.Template._inputRequiredAttributes[lowerName]) continue;
						var attrib = split(name, isSelect, typeIndex),
						ns = attrib.ns,
						value = attribute.nodeValue,
						atype = attrib.type;
						name = attrib.name;
						if (atype === 1) {
							if (isSelect && (!ns || ns === "sys")) {
								delayedAttributes = delayedAttributes || [];
								delayedAttributes.push([attrib, value]);
								continue;
							}
							skip[name.toLowerCase()] = true;
						}
						else if (atype === 0) {
							skip[name.toLowerCase()] = true;
						}
						else if (atype === 3 && name === "id" && typeIndex[ns] && typeIndex[ns].isClass) {
							continue;
						}
						if (this._processAttribute(code, typeIndex, attrib, value)) {
							skipChildren = true;
						}
					}
					if (this._command) {
						code.push(" Sys.UI.DomElement.setCommand($element, " + this._command + ", " + (this._commandargument || 'null') + ", Sys.UI.DomElement._ensureGet(" + (this._commandtarget || 'null') + ", $context, 'sys:commandtarget'));\n");
						this._command = null;
					}
					this._commandargument = null;
					this._commandtarget = null;

					code.push(storeElementCode + "$element);\n");
					for (typeName in typeIndex) {
						var index = typeIndex[typeName];
						if (index.isClass) {
							code.push("  $context._registerComponent(__componentIndex['" + typeName + "']);\n");
						}
						else {
							code.push("  $context._registerIf(");
							code.push(index.type);
							code.push("($element, ");
							code.push("{" + (index.props || "") + "}, $context));\n");
						}
					}
					if (Sys.UI.Template._isTemplate(childNode)) {
						var nestedTemplate = new Sys.UI.Template(childNode);
						nestedTemplate.recompile();
						nestedTemplates.push(childNode._msajaxtemplate);
						code.push("  $element._msajaxtemplate = this.get_element()._msajaxtemplate[2][" + (nestedTemplates.length - 1) + "];\n");
					}
					else if (!skipChildren) {
						this._buildTemplateCode(nestedTemplates, childNode, code, dp1);
						code.push("  $element=container=__p[__d];\n");
					}
					if (delayedAttributes) {
						for (j = 0, m = delayedAttributes.length; j < m; j++) {
							attribute = delayedAttributes[j];
							this._processAttribute(code, typeIndex, attribute[0], attribute[1]);
						}
					}
					if (contentTemplate) {
						code.push("  __contentTemplates.pop();\n");
					}
					this._processCodeBlock("sys:codeafter", childNode, code);
					if (isCodeIfGenerated) {
						code.push("  }\n");
					}
				}
			}
			code.push("  --__d;\n");
		}
		function Sys$UI$Template$_ensureCompiled() {
			if (!this._instantiateIn) {
				var element = this.get_element();
				if (element._msajaxtemplate) {
					this._instantiateIn = element._msajaxtemplate[0];
				}
				else {
					this.recompile();
				}
			}
		}
		function Sys$UI$Template$recompile() {
			/// <summary locid="M:J#Sys.UI.Template.recompile" />
			var element = this.get_element(),
			code = [" $index = (typeof($index) === 'number' ? $index : __instanceId);\n var fragment=document.createDocumentFragment(), $component, __componentIndex, __e, __f, __topElements = [], __d = 0, __p = [fragment], $element = __containerElement, container = fragment, $context = new Sys.UI.TemplateContext(), __contentTemplates = [], $id = function(prefix) { return $context.getInstanceId(prefix); };\n $context.data = (typeof(__data) === 'undefined' ? null : __data);\n $context.components = [];\n $context.nodes = __topElements;\n $context.dataItem = $dataItem;\n $context.index = $index;\n $context.parentContext = __parentContext;\n $context.rootContext = __parentContext.rootContext;\n $context.containerElement = __containerElement;\n $context.insertBeforeNode = __referenceNode;\n $context.template = this;\n with($dataItem || {}) {\n"],
			nestedTemplates = [];
			this._buildTemplateCode(nestedTemplates, element, code, 0);
			code.push("}\n __containerElement.appendChild(fragment);\n $context._onInstantiated(__referenceNode);\n return $context;");
			code = code.join('');
			element._msajaxtemplate = [this._instantiateIn = new Function("__containerElement", "$rootContext", "$vm", "$emit", "__data", "$dataItem", "$index", "__referenceNode", "__parentContext", "__parentContentTemplate", "__instanceId", code), element, nestedTemplates];
		}
		function Sys$UI$Template$instantiateIn(containerElement, data, dataItem, dataIndex, nodeToInsertTemplateBefore, parentContext, parentContentTemplate) {
			/// <summary locid="M:J#$id" />
			/// <param name="containerElement"></param>
			/// <param name="data" optional="true" mayBeNull="true"></param>
			/// <param name="dataItem" optional="true" mayBeNull="true"></param>
			/// <param name="dataIndex" optional="true" mayBeNull="true" type="Number" integer="true"></param>
			/// <param name="nodeToInsertTemplateBefore" optional="true" mayBeNull="true"></param>
			/// <param name="parentContext" type="Sys.UI.TemplateContext" optional="true" mayBeNull="true"></param>
			/// <param name="parentContentTemplate" type="String" optional="true" mayBeNull="true"></param>
			/// <returns type="Sys.UI.TemplateContext"></returns>
			containerElement = Sys.UI.DomElement._ensureGet(containerElement, null, "containerElement");
			nodeToInsertTemplateBefore = Sys.UI.DomElement._ensureGet(nodeToInsertTemplateBefore, null, "nodeToInsertTemplateBefore");
			this._ensureCompiled();
			return this._instantiateIn(containerElement, parentContext.rootContext, parentContext.rootContext.vm, parentContext.rootContext.vm ? parentContext.rootContext.vm.$emit.bind(parentContext.rootContext.vm) : null, data, dataItem, dataIndex, nodeToInsertTemplateBefore, parentContext, parentContentTemplate, this._instanceId++);
		}

		Sys.UI.Template.prototype = {
			get_element: Sys$UI$Template$get_element,
			dispose: Sys$UI$Template$dispose,
			_appendTextNode: Sys$UI$Template$_appendTextNode,
			_appendAttributeSetter: Sys$UI$Template$_appendAttributeSetter,
			_processAttribute: Sys$UI$Template$_processAttribute,
			_getAttributeExpression: Sys$UI$Template$_getAttributeExpression,
			_processBooleanAttribute: Sys$UI$Template$_processBooleanAttribute,
			_processBooleanAttributes: Sys$UI$Template$_processBooleanAttributes,
			_processCodeBlock: Sys$UI$Template$_processCodeBlock,
			_getExplicitAttribute: Sys$UI$Template$_getExplicitAttribute,
			_buildTemplateCode: Sys$UI$Template$_buildTemplateCode,
			_ensureCompiled: Sys$UI$Template$_ensureCompiled,
			recompile: Sys$UI$Template$recompile,
			instantiateIn: Sys$UI$Template$instantiateIn
		}
		Sys.UI.Template._isRestricted = function Sys$UI$Template$_isRestricted(name) {
			var restricted = Sys.UI.Template._getRestrictedIndex();
			return restricted.attributes[name.toLowerCase()];
		}
		Sys.UI.Template._checkAttribute = function Sys$UI$Template$_checkAttribute(name, value) {
			if (value === null || value === undefined) return value;
			var newValue = value, restricted = Sys.UI.Template._getRestrictedIndex();
			if (restricted.attributes[name.toLowerCase()]) {
				if (typeof (value) !== "string") {
					value = value.toString();
				}
				var match = Sys.UI.Template._protocolRegExp.exec(value.toLowerCase());
				if (match) {
					if (!restricted.protocols[match[1]]) {
						newValue = "";
					}
				}
			}
			return newValue;
		}
		Sys.UI.Template._getIdFunction = function Sys$UI$Template$_getIdFunction(instance) {
			return function (prefix) {
				return prefix + instance;
			}
		}
		Sys.UI.Template._createInput = function Sys$UI$Template$_createInput(type, name, isButton) {
			var err, element, callee = arguments.callee, dynamic = callee._dynamic;
			if (dynamic === true) {
				element = document.createElement(isButton ? 'button' : 'input');
				if (type) {
					element.setAttribute("type", type);
				}
				if (name) {
					element.setAttribute("name", name);
				}
			}
			else {
				var html = isButton ? "<button " : "<input ";
				if (type) {
					html += "type='" + type + "' ";
				}
				if (name) {
					html += "name='" + name + "' ";
				}
				html += isButton ? "></button>" : "/>";
				try {
					element = document.createElement(html);
				}
				catch (err) {
					dynamic = true;
				}
				if (typeof (dynamic) === "undefined") {
					dynamc = (element.tagName.toLowerCase() !== (isButton ? "button" : "input"));
				}
				callee._dynamic = dynamic;
				if (dynamic) {
					element = callee(type, name, isButton);
				}
			}
			return element;
		}
		Sys.UI.Template._isTemplate = function Sys$UI$Template$_isTemplate(element) {
			var className = element.className;
			return (className && ((className === "sys-template") || /(^| )sys\-template($| )/.test(className)));
		}
		Sys.UI.Template._inputRequiredAttributes = { "type": 1, "name": 1, "sys:type": 1, "sys:name": 1 };





		Sys.UI.Template._commonBooleanAttributes = { disabled: true, " list": ["disabled"] };
		Sys.UI.Template._inputBooleanAttributes =
	{ disabled: true, checked: true, readonly: true,
		" list": ["disabled", "checked", "readonly"]
	};
		Sys.UI.Template._booleanAttributes = {
			"input": Sys.UI.Template._inputBooleanAttributes,
			"select": { disabled: true, multiple: true, " list": ["disabled", "multiple"] },
			"option": { disabled: true, selected: true, " list": ["disabled", "selected"] },
			"img": { disabled: true, ismap: true, " list": ["disabled", "ismap"] },
			"textarea": { disabled: true, readonly: true, " list": ["disabled", "readonly"] }
		};
		Sys.UI.Template._expressionRegExp = /\{\{\s*([\w\W]*?)\s*\}\}/g;
		Sys.UI.Template.allowedProtocols = [
	"http",
	"https",
	"data"
];
		Sys.UI.Template.restrictedAttributes = [
	"src",
	"href",
	"codebase",
	"cite",
	"background",
	"action",
	"longdesc",
	"profile",
	"usemap",
	"classid",
	"data"
];
		Sys.UI.Template._getRestrictedIndex = function Sys$UI$Template$_getRestrictedIndex() {
			var i, l, protocolIndex, attributeIndex,
		protocols = Sys.UI.Template.allowedProtocols || [],
		attributes = Sys.UI.Template.restrictedAttributes || [],
		index = Sys.UI.Template._restrictedIndex;
			if (!index || (index.allowedProtocols !== protocols) || (index.restrictedAttributes !== attributes)) {
				index = { allowedProtocols: protocols, restrictedAttributes: attributes };
				index.protocols = protocolIndex = {};
				for (i = 0, l = protocols.length; i < l; i++) {
					protocolIndex[protocols[i]] = true;
				}
				index.attributes = attributeIndex = {};
				for (i = 0, l = attributes.length; i < l; i++) {
					attributeIndex[attributes[i]] = true;
				}
				Sys.UI.Template._restrictedIndex = index;
			}
			return index;
		}
		Sys.UI.Template.registerClass("Sys.UI.Template", null, Sys.IDisposable);











		Sys.UI.Template._protocolRegExp = /^\s*([a-zA-Z0-9\+\-\.]+)\:/;

		Sys.UI.Template.findContext = function Sys$UI$Template$findContext(element) {
			/// <summary locid="M:J#Sys.UI.Template.findContext" />
			/// <param name="element" domElement="true"></param>
			/// <returns type="Sys.UI.TemplateContext"></returns>
			var tc;
			do {
				tc = Sys.UI.TemplateContext._contexts[element.__mstcindex];
				element = element.parentNode;
			} while (!tc && element);
			return tc || Sys.Application.get_templateContext();
		}

		Sys._Application.prototype.get_templateContext = function Sys$_Application$get_templateContext() {
			/// <summary locid="M:J#Sys._Application.get_templateContext" />
			return this._context || null;
		}



		Sys._Application.prototype._baseDispose = Sys._Application.prototype.dispose;
		Sys._Application.prototype.dispose = function Sys$_Application$dispose() {
			var ctx = this._context;
			if (ctx) ctx.dispose();
			this._context = null;
			this._baseDispose();
		}

		Sys._Application.prototype.removeComponent = function Sys$_Application$removeComponent(component) {
			/// <summary locid="M:J#Sys._Application.removeComponent" />
			/// <param name="component" type="Sys.Component"></param>
			var id = component.get_id();
			if (id) delete this._components[id];
			var ctx = this._context;
			if (ctx) {
				var tc = component.__tc;
				if (tc && tc[0] === ctx._tcindex) {
					delete ctx.components[tc[1]];
				}
			}
		}
		Sys.UI.TemplateContext = function Sys$UI$TemplateContext(tcindex) {
			/// <summary locid="M:J#Sys.UI.TemplateContext.#ctor" />
			/// <field name="data" locid="F:J#Sys.UI.TemplateContext.data"></field>
			/// <field name="dataItem" locid="F:J#Sys.UI.TemplateContext.dataItem"></field>
			/// <field name="index" type="Number" integer="true" locid="F:J#Sys.UI.TemplateContext.index"></field>
			/// <field name="getInstanceId" type="Function" locid="F:J#Sys.UI.TemplateContext.getInstanceId"></field>
			/// <field name="parentContext" type="Sys.UI.TemplateContext" locid="F:J#Sys.UI.TemplateContext.parentContext"></field>
			/// <field name="containerElement" domElement="true" locid="F:J#Sys.UI.TemplateContext.containerElement"></field>
			/// <field name="components" type="Array" elementType="Object" locid="F:J#Sys.UI.TemplateContext.components"></field>
			/// <field name="nodes" type="Array" elementDomElement="true" locid="F:J#Sys.UI.TemplateContext.nodes"></field>
			var index = this._tcindex = tcindex || Sys.UI.TemplateContext._tcindex++;
			Sys.UI.TemplateContext._contexts[index] = this;
			this._completed = [];
			Sys.UI.TemplateContext.initializeBase(this);
		}











		function Sys$UI$TemplateContext$dispose() {
			/// <summary locid="M:J#Sys.UI.TemplateContext.dispose" />
			if (!this._global) {
				var nodes = this.nodes;
				if (nodes) {
					for (var i = 0, l = nodes.length; i < l; i++) {
						var element = nodes[i];
						if (element.nodeType === 1) {
							Sys.Application.disposeElement(element, false);
						}
					}
				}
				var components = this.components;
				if (components) {
					for (var i = 0, l = components.length; i < l; i++) {
						delete components[i].__tc;
					}
				}
			}
			delete Sys.UI.TemplateContext._contexts[this._tcindex];
			this.nodes = this.dataItem = this.components = this.getInstanceId =
		this.containerElement = this.insertBeforeNode = this.parentContext = this.data = null;
			this.isDisposed = true;
		}
		function Sys$UI$TemplateContext$query(selector) {
			return this._find(selector);
		}
		function Sys$UI$TemplateContext$get(selector) {
			return this._find(selector, true);
		}
		function Sys$UI$TemplateContext$_find(selector, single) {
			return /^[#\$](\w|[$:\.\-])+$/.test(selector) ?
			this._findById(selector.substr(0, 1), selector.substr(1), single) :
			Sys._find(selector, this.nodes, single);
		}
		function Sys$UI$TemplateContext$_findById(kind, id, single) {
			var element = null;
			for (var context = this; !element && context; context = context.parentContext) {
				var nodes = context.nodes,
				instanceId = kind + context.getInstanceId(id);
				if (context._global) {
					element = Sys.get(instanceId) || Sys.get(instanceId, nodes);
				}
				else {
					element = Sys.get(instanceId, nodes);
				}
			}
			element = element || Sys.get(kind + id);
			return single ? element : (element ? [element] : []);
		}
		function Sys$UI$TemplateContext$getInstanceId(prefix) {
			/// <summary locid="M:J#Sys.UI.TemplateContext.getInstanceId" />
			/// <param name="prefix" type="String"></param>
			/// <returns type="String"></returns>
			return prefix + (this._global ? "" : this._tcindex);
		}
		function Sys$UI$TemplateContext$initializeComponents() {
			/// <summary locid="M:J#Sys.UI.TemplateContext.initializeComponents" />
			var components = this.components;
			if (components) {
				var i = components.length - 1, index = this._lastIndex;
				this._lastIndex = i;
				for (; i > index; i--) {
					var component = components[i];
					if (component && Sys.Component.isInstanceOfType(component)) {
						if (component.get_isUpdating()) {
							component.endUpdate();
						}
						else if (!component.get_isInitialized()) {
							component.initialize();
						}
					}
				}
			}
		}
		function Sys$UI$TemplateContext$add_instantiated(handler) {
			/// <summary locid="E:J#Sys.UI.DataViewTemplateContext.instantiated" />
			Sys.Observer.addEventHandler(this, "instantiated", handler);
		}
		function Sys$UI$TemplateContext$remove_instantiated(handler) {
			Sys.Observer.removeEventHandler(this, "instantiated", handler);
		}
		function Sys$UI$TemplateContext$_onInstantiated(referenceNode, leaveInPlace) {
			foreach(this._completed, function (callback) {
				callback();
			});
			this._completed = [];
			if (!leaveInPlace) {
				var container = this.containerElement;
				foreach(this.nodes, function (node) {
					container.insertBefore(node, referenceNode || null);
				});
			}
			Sys.Observer.raiseEvent(this, "instantiated");
		}
		function Sys$UI$TemplateContext$_registerComponent(component) {
			var components = this.components;
			component.__tc = [this._tcindex, components.length];
			components.push(component);
			Sys.Component._register(component, null, true);
		}
		function Sys$UI$TemplateContext$_registerIf(result) {
			if (result instanceof Array) {
				for (var i = 0, l = result.length; i < l; i++) {
					this._registerComponent(result[i]);
				}
			}
			else if (result && typeof (result) === 'object') {
				this._registerComponent(result);
			}
		}
		Sys.UI.TemplateContext.prototype = {
			data: null,
			dataItem: null,
			index: 0,
			parentContext: null,
			containerElement: null,
			insertBeforeNode: null,
			components: null,
			nodes: null,
			isDisposed: false,
			_lastIndex: -1,
			dispose: Sys$UI$TemplateContext$dispose,
			query: Sys$UI$TemplateContext$query,
			get: Sys$UI$TemplateContext$get,
			_find: Sys$UI$TemplateContext$_find,
			_findById: Sys$UI$TemplateContext$_findById,
			getInstanceId: Sys$UI$TemplateContext$getInstanceId,
			initializeComponents: Sys$UI$TemplateContext$initializeComponents,
			add_instantiated: Sys$UI$TemplateContext$add_instantiated,
			remove_instantiated: Sys$UI$TemplateContext$remove_instantiated,
			_onInstantiated: Sys$UI$TemplateContext$_onInstantiated,
			_registerComponent: Sys$UI$TemplateContext$_registerComponent,
			_registerIf: Sys$UI$TemplateContext$_registerIf
		}
		Sys.UI.TemplateContext.registerClass("Sys.UI.TemplateContext", null, Sys.IDisposable);
		Sys.UI.TemplateContext._tcindex = 0;
		Sys.UI.TemplateContext._contexts = [];
		Sys.UI.ITemplateContextConsumer = function Sys$UI$ITemplateContextConsumer() {
			throw Error.notImplemented();
		}

		function Sys$UI$ITemplateContextConsumer$get_templateContext() {
			/// <value type="Sys.UI.TemplateContext" mayBeNull="true" locid="P:J#Sys.UI.ITemplateContextConsumer.templateContext"></value>
			throw Error.notImplemented();
		}
		function Sys$UI$ITemplateContextConsumer$set_templateContext(value) {
			throw Error.notImplemented();
		}
		Sys.UI.ITemplateContextConsumer.prototype = {
			get_templateContext: Sys$UI$ITemplateContextConsumer$get_templateContext,
			set_templateContext: Sys$UI$ITemplateContextConsumer$set_templateContext
		}
		Sys.UI.ITemplateContextConsumer.registerInterface("Sys.UI.ITemplateContextConsumer");

		Sys.UI.IContentTemplateConsumer = function Sys$UI$IContentTemplateConsumer() {
			throw Error.notImplemented();
		};
		function Sys$UI$IContentTemplateConsumer$addContentTemplate(tmpl) {
			/// <value type="String" locid="M:J#Sys.UI.IContentTemplateConsumer.addContentTemplate"></value>
			/// <param name="bindingContext" type="Object" optional="false" mayBeNull="false"></param>
			if (tmpl.constructor !== String) throw new Error("Method \"addContentTemplate\" requires an argument of type String.");
			if (tmpl.length > 0) {
				if (this._contentTemplate) {
					this._contentTemplate += " ";
					this._contentTemplate += tmpl;
				}
				else {
					this._contentTemplate = tmpl;
				}
			}
		}
		Sys.UI.IContentTemplateConsumer.prototype = {
			addContentTemplate: Sys$UI$IContentTemplateConsumer$addContentTemplate
		};
		Sys.UI.IContentTemplateConsumer.registerInterface("Sys.UI.IContentTemplateConsumer");

		Sys.Application._caseIndex = {};

		Sys.Application._prototypeIndex = {};

		Sys.Application._context = new Sys.UI.TemplateContext();
		Sys.Application._context._global = true;
		Sys.Application._context.rootContext = Sys.Application._context;

		Sys.Application.activateElement = function Sys$Application$activateElement(element, bindingContext, recursive, useGlobalContext, vm) {
			/// <summary locid="M:J#Sys.Application.activateElement" />
			/// <param name="element" domElement="true"></param>
			/// <param name="bindingContext" type="Object" optional="true" mayBeNull="true"></param>
			/// <param name="recursive" optional="true" mayBeNull="true"></param>
			/// <returns type="Sys.UI.TemplateContext"></returns>
			return Sys.Application.activateElements(element, bindingContext || null, (recursive !== false), (useGlobalContext !== false), vm);
		};

		Sys.Application.activateElements = function Sys$Application$activateElements(elements, bindingContext, recursive, useGlobalContext, vm) {
			/// <summary locid="M:J#Sys.Application.activateElements" />
			/// <param name="elements"></param>
			/// <param name="bindingContext" optional="true" mayBeNull="true"></param>
			/// <param name="recursive" optional="true" mayBeNull="true"></param>
			/// <returns type="Sys.UI.TemplateContext"></returns>
			var app = Sys.Application,
				tc = useGlobalContext === false ? new Sys.UI.TemplateContext() : app._context,
				useDirect = isBrowser("InternetExplorer") && Sys.Browser.version < 9;
			tc.dataItem = tc.data = typeof (bindingContext) === "undefined" ? null : bindingContext;
			tc.rootContext = tc;
			tc.vm = vm;
			tc.components = tc.components || [];
			tc.nodes = elements;
			recursive = (recursive !== false);
			Sys._queryAll(elements, function (element) {
				app._activateElement(element, tc, useDirect, null, recursive);
			});
			tc.initializeComponents();
			tc._onInstantiated(null, true);
			return tc;
		};

		Sys.registerPlugin({
			name: "activateElements",
			plugin: Sys.Application.activateElements,
			returnType: "Sys.UI.TemplateContext",
			parameters: [
		{ name: "elements", description: "The element or array of elements to activate. You may also pass DOM selectors or array of DOM selectors." },
		{ name: "bindingContext", description: "The binding context." },
		{ name: "recursive", type: "Boolean", description: "Specifies whether processing should occur recursively." }
	]
		});

		Sys.Application._findType = function Sys$Application$_findType(element, prefix, useDirect) {
			var er, err, type, xmlns = "xmlns:" + prefix;
			function getType() {
				var ns;
				try { ns = useDirect ? element[xmlns] : element.getAttribute(xmlns); }
				catch (er) { }
				if (ns && ns.substr(0, 11) === "javascript:") {
					ns = ns.substr(11);
					type = null;
					try {
						type = Type.parse(ns);
					}
					catch (er) {
						err = String.format(Sys.UI.TemplatesRes.invalidTypeNamespace, ns);
						return;
					}
					if (type && type.__class) {
						return;
					}
					else {
						type = ns;
					}
				}
			}
			for (; element; element = element.parentNode) {
				getType();
				if (err) {
					throw Error.invalidOperation(err);
				}
				if (type) return type;
			}
			element = document.body;
			getType();
			if (err) {
				throw Error.invalidOperation(err);
			}
			return type;
		}

		Sys.Application._activateElement = function Sys$Application$_activateElement(parent, templateContext, useDirect, parentContentTemplates, recursive) {
			if (recursive) {
				recursive = !Sys.UI.Template._isTemplate(parent);
			}
			var i = -1,
		allElements = recursive ? (useDirect ? parent.all : parent.getElementsByTagName("*")) : [],
		isTemplate = /(^| )sys\-template($| )/,
		isIgnore = /(^| )sys\-ignore($| )/,
			expandosAreLast = useDirect && Sys.Browser.version <= 7,
		element = parent;
			do {
				if (element.nodeType !== 1) continue;
				///// this code is inline rather than factored out into a function because
				///// performance testing has shown that calling the factored method causes activation
				///// to be measurably slower in IE, due to the overhead of invoking a function.
				///// begin element activation

				var err, j, m, typeList = null, entry = null, index = null, fnIndex = null, contentTemplate = null,
			activated = false,
			nodeName = null,
			attributes = element.attributes,
			alength = attributes.length - 1,
			attributes2 = null;
				if (alength >= 0 && (!expandosAreLast || attributes[alength].expando) && !element.__msajaxactivated) {
					for (j = alength; j >= 0; j--) {
						var attribute = attributes[j];
						if (expandosAreLast && !attribute.expando) break;
						if (!attribute.specified || attribute.nodeName.indexOf(':') < 0) continue;
						activated = true;
						nodeName = attribute.nodeName;
						var value = attribute.nodeValue;
						switch (nodeName) {
							case "sys:attach":
								typeList = value.split(',');
								break;
							case "sys:command":
								var command = Sys.Application._getPropertyValue(null, null, null, value, templateContext, element, null, true);
								var commandArg = Sys.Application._getCommandAttr(element, templateContext, "sys:commandargument", useDirect),
						commandTarget = Sys.Application._getCommandAttr(element, templateContext, "sys:commandtarget", useDirect);
								Sys.UI.DomElement.setCommand(element, command || "", commandArg || null, Sys.UI.DomElement._ensureGet(commandTarget, templateContext, "sys:commandtarget"));
								break;
							case "sys:content-template":
								contentTemplate = Sys.Application._getPropertyValue(null, null, null, value, templateContext, element, null, true);
								break;
							default:
								attributes2 = attributes2 || [];
								attributes2.push(attribute);
						}
					}
					if (contentTemplate !== null && typeList === null) {
						throw Error.invalidOperation("invalidSysContentTemplate");
					}
					if (activated) {
						element.__msajaxactivated = true;
						if (typeList) {
							index = {};
							for (var k = 0, n = typeList.length; k < n; k++) {
								var typeName = typeList[k].trim();
								if (index[typeName]) continue;
								var type = Sys.Application._findType(element, typeName, useDirect);
								if (!type) {
									throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.invalidAttach, "sys:attach", typeName));
								}
								var props = null, isComponent = 0, isControlOrBehavior = 0, isContext = 0, isContentTemplate = 0,
							isClass = (typeof (type) !== "string"),
							instance = null;
								if (isClass) {
									isComponent = type.inheritsFrom(Sys.Component);
									isControlOrBehavior = (isComponent && (type.inheritsFrom(Sys.UI.Behavior) || type.inheritsFrom(Sys.UI.Control)));
									isContext = type.implementsInterface(Sys.UI.ITemplateContextConsumer);
									isContentTemplate = type.implementsInterface(Sys.UI.IContentTemplateConsumer);
									instance = isControlOrBehavior ? new type(element) : new type();
									if (isComponent) {
										instance.beginUpdate();
									}
									if (!isControlOrBehavior) {
										Sys.Application._registerComponent(element, instance);
									}
									if (isContext) {
										instance.set_templateContext(templateContext);
									}
									if (isContentTemplate) {
										if (contentTemplate !== null) {
											instance.addContentTemplate(contentTemplate);
										}
										if (parentContentTemplates) {
											instance.addContentTemplate(parentContentTemplates);
										}
									}
									else if (contentTemplate !== null) {
										throw Error.invalidOperation("invalidSysContentTemplate");
									}
									entry = { instance: instance, isClass: true, typeName: typeName, type: type };
								}
								else if (contentTemplate !== null) {
									throw Error.invalidOperation("invalidSysContentTemplate");
								}
								else {
									props = {};
									instance = Type.parse(type);
									entry = { instance: instance, props: props, typeName: typeName, type: type };
									if (!fnIndex) {
										fnIndex = [entry];
									}
									else {
										fnIndex[fnIndex.length] = entry;
									}
								}
								index[typeName] = entry;
							}
						}
						if (attributes2) {
							for (j = attributes2.length - 1; j >= 0; j--) {
								attribute = attributes2[j];
								nodeName = attribute.nodeName;
								value = attribute.nodeValue;
								var isSelect = (/^select$/i.test(element.tagName)),
							attrib = Sys.Application._splitAttribute(nodeName, isSelect, index),
							atype = attrib.type,
							ns = attrib.ns,
							name = attrib.name;
								if (atype < 0) continue;
								if (atype === 3) {
									entry = attrib.index;
									var target = entry.instance;
									value = Sys.Application._getPropertyValue(attrib, target, name, value, templateContext, element);
									if (typeof (value) === "undefined") continue;
									if (entry.isClass) {
										switch (attrib.map.type) {
											case 1:
												attrib.map.setter.call(target, value);
												break;
											case 2:
												attrib.map.setter.call(target, typeof (value) === "function" ? value : new Function("sender", "args", value));
												break;
											default:
												target[name] = value;
										}
									}
									else {
										entry.props[name] = value;
									}
								}
								else if (atype <= 2) {
									if (attrib.textNode || (name === "innerHTML")) {
										Sys.Application._clearContent(element);
									}
									value = Sys.Application._getPropertyValue(attrib, element, name, value, templateContext, element);
									if (typeof (value) === "undefined") continue;
									switch (attrib.type) {
										case 0:
											if (/^on/i.test(name)) {
												if (typeof value === 'function') {
													element[name] = value;
												}
												else {
													element[name] = document.attachEvent ? new Function(value) : new Function("event", value);
												}
												break;
											}
											if (isSelect && (name === "value")) {
												element.value = value;
												break;
											}
											var booleans = Sys.UI.Template._booleanAttributes,
										lowerTag = element.tagName.toLowerCase(),
										isbool = (name === "disabled") || (booleans[lowerTag] && booleans[lowerTag][name]);
											if (isbool) {
												if (name === "selected") {
													element.selected = value;
												}
												if (!value) {
													element.removeAttribute(name);
													break;
												}
												else if (name === "checked") {
													element.setAttribute(name, name);
													break;
												}
											}
											var a = document.createAttribute(name);
											a.nodeValue = isbool ? name : value;
											element.setAttributeNode(a);
											break;
										case 1:
											if (attrib.textNode) {
												Sys.Application._clearContent(element);
												element.appendChild(document.createTextNode(value));
											}
											else {
												Sys.Observer.setValue(element, name, value);
											}
											break;
										case 2:
											value ? Sys.UI.DomElement.addCssClass(element, name) : Sys.UI.DomElement.removeCssClass(element, name);
											break;
									}
								}
							}
						}
						if (fnIndex) {
							for (j = 0, m = fnIndex.length; j < m; j++) {
								entry = fnIndex[j];
								templateContext._registerIf(entry.instance(element, entry.props, templateContext));
							}
						}
						if (index) {
							for (entry in index) {
								if (index.hasOwnProperty(entry)) {
									entry = index[entry];
									if (entry && entry.isClass) {
										templateContext._registerComponent(entry.instance);
									}
								}
							}
						}
					}
					///// end element activation
				}
				if (recursive) {
					var className = element.className;
					if (className && (className.length >= 10) && (className === "sys-template" || className === "sys-ignore" || isTemplate.test(className) || isIgnore.test(className))) {
						var next = element.nextSibling;
						while (next && (next.nodeType !== 1)) {
							next = next.nextSibling;
						}
						while (!next) {
							element = element.parentNode;
							if (element === parent) {
								break;
							}
							next = element.nextSibling;
							while (next && (next.nodeType !== 1)) {
								next = next.nextSibling;
							}
						}
						if (!next || (next.nodeType !== 1)) {
							break;
						}
						do {
							element = allElements[i + 1];
							if (element === next) break;
							i++;
						}
						while (element);
					}
				}
			}
			while (!!(element = allElements[++i]));
		}

		function Sys$Application$_elementToString(el) {
			if (!el.tagName) {
				return "unknown element";
			}
			var str = el.tagName.toLowerCase();
			if (str === "input") {
				str += "[" + el.type + "]";
			}
			if (el.id) {
				str += "#" + el.id;
			}
			if (el.className) {
				el.className.split(/\s+/g).forEach(function (c) {
					str += "." + c;
				});
			}
			return str;
		}

		// a non-control targeting data attribute, i.e. "data-sys-class"
		var sysDataAttrExpr = /^data\-sys\-([a-z_]*)$/;

		// a control targeting data attribute, i.e.: "data-dataview-data"
		var controlDataAttrExpr = /^data\-([a-z_]*)\-([a-z_]*)$/;

		// a non-control targeting data attribute, i.e. "data-sys-class"
		var sysAttrExpr = /^sys\:([a-z_]*)$/;

		Sys.Application._linkAttributes = function Sys$Application$_linkAttributes(element, parentContext, attachedName) {
			var i, attr, dataAttr, msDataAttrib, isSelect, isTextArea, match, attrName, value, target, targetProp, link, typeIndex, attrLinksElementContent, controlType;

			if (element.control && attachedName) {
				typeIndex = {};
				controlType = element.control.constructor;
				typeIndex[attachedName] = { type: controlType, isClass: true, isComponent: controlType.inheritsFrom && controlType.inheritsFrom(Sys.Component) };
			}

			for (i = 0; i < element.attributes.length; i++) {
				attr = element.attributes[i];
				attrName = attr.name;

				// test for a "data attribute", i.e. "data-dataview-data"
				if (sysDataAttrExpr.test(attrName)) {
					dataAttr = { raw: attrName, prefix: "sys" };
					dataAttr.name = sysDataAttrExpr.exec(attr.name)[1];
					link = true;
				}
				else if (controlDataAttrExpr.test(attrName)) {
					dataAttr = { raw: attrName };
					match = controlDataAttrExpr.exec(attrName);
					dataAttr.control = dataAttr.prefix = match[1];
					dataAttr.name = match[2];
					link = true;
				}
				else if (sysAttrExpr.test(attrName)) {
					dataAttr = { raw: attrName, prefix: "sys" };
					dataAttr.name = sysAttrExpr.exec(attr.name)[1];
					link = false;
				}

				// if this is a data attribute, then link or bind it to the target and remove it from the DOM
				if (dataAttr) {
					target = dataAttr.control ? element.control : element;

					if (target) {
						isSelect = element.tagName === "SELECT";
						isTextArea = element.tagName === "TEXTAREA";
						msDataAttrib = Sys.Application._splitAttribute(dataAttr.prefix + ":" + dataAttr.name, isSelect, typeIndex);
						targetProp = msDataAttrib.name;

						// For inner html and text, the child nodes of the element should not be
						// linked since they are dynamic content that is not defined within the
						// original template markup source, and could potentially be unsafe.
						if (targetProp === "innerHTML" || targetProp === "innerText" || (isTextArea && targetProp === "value")) {
							attrLinksElementContent = true;
						}

						value = Sys.Application._getPropertyValue(msDataAttrib, target, targetProp, attr.nodeValue, parentContext, element, null, false, { isLinkPending: !element.control && link });
						if (value !== undefined) {
							Sys.Observer.setValue(target, msDataAttrib.name || targetProp, value);
						}

						dataAttr = null;

						if (!link) {
							element.removeAttribute(attr.name);
							i -= 1;
						}
					}
				}
			}

			return attrLinksElementContent;
		};

		// marks the beginning or end of a context, i.e. "/item" or "item _$t202"
		var itemCommentExpr = /^(\/|)item(\:([\$_A-Za-z0-9]+)|)$/;

		Sys.Application._linkContexts = function Sys$Application$_linkContexts(parentContext, parentControl, parentData, parentElement, currentContext, parentContentTemplates, recursive, generateIds) {
			var children, newContext, preceedingText, ctxIdx, tcIdx, isSelect, i, node, match, marker, tmplIdx, tmpl, generatesContext, value, foundBinding, isArrayData, generateChildIds,
				isSingleExternalContext, lastIndex, targetProp, msAttrib, text, trimText, exprRegExp, attachName, isContentTemplate, contentTemplate, childContentTemplates, ctxAttr,
				isTextNode, isElementNode, isCommentNode;

			ctxIdx = -1;
			isSingleExternalContext = !recursive && currentContext;
			isArrayData = parentData && parentData instanceof Array;
			isSelect = parentElement.tagName === "SELECT";
			exprRegExp = Sys.UI.Template._expressionRegExp;

			// Copy child nodes into array to isolate from external changes to the DOM
			i = -1;
			children = [];
			while (node = parentElement.childNodes[++i]) {
				children[i] = node;
			}

			for (i = 0; i < children.length; i++) {
				node = children[i];
				marker = tmplIdx = tmpl = match = value = null;
				generatesContext = foundBinding = false;
				generateChildIds = generateIds;
				isElementNode = node.nodeType === 1;
				isTextNode = node.nodeType === 3;
				isCommentNode = node.nodeType === 8;

				// Look for binding expressions in text nodes
				// NOTE: based on _buildTemplateCode
				if (isTextNode) {
					text = node.nodeValue;
					trimText = text.trim();

					// An extension takes the place of node value
					if ((trimText.startsWith("{") && trimText.endsWith("}") && (!trimText.startsWith("{{") || !trimText.endsWith("}}")))) {
						foundBinding = true;
						targetProp = (parentElement.tagName.toLowerCase() === "textarea" ? "value" : "innerText");
						msAttrib = Sys.Application._splitAttribute(targetProp, isSelect);
						value = Sys.Application._getPropertyValue(msAttrib, parentElement, targetProp, text, currentContext, parentElement, null, false);
					}
					// Multiple expressions can be nested within a block of text
					else {
						lastIndex = 0;
						match = exprRegExp.exec(text);
						while (match) {
							if (!foundBinding) {
								value = "";
								foundBinding = true;
								targetProp = (parentElement.tagName.toLowerCase() === "textarea" ? "value" : "innerText");
								msAttrib = Sys.Application._splitAttribute(targetProp, isSelect);
							}
							value += text.substring(lastIndex, match.index) || "";
							value += Sys.Application._getPropertyValue(msAttrib, parentElement, targetProp, match[0], currentContext, parentElement, null, false) || "";
							lastIndex = match.index + match[0].length;
							match = exprRegExp.exec(text);
						}
						if (foundBinding && lastIndex < text.length) {
							value += text.substr(lastIndex);
						}
					}

					// Update the node's value
					if (foundBinding) {
						node.nodeValue = value || "";
					}

					continue;
				}

				// If this is top-level then look for context markers
				if (!recursive) {
					if (isCommentNode && (match = itemCommentExpr.exec(node.nodeValue))) {
						if (match[1] === "") {
							tcIdx = match[3];
							marker = { begin: true, end: false };
						}
						else if (match[1] === "/") {
							marker = { begin: false, end: true };
						}
					}
					else if (isElementNode && node.hasAttribute("data-sys-ctx")) {
						ctxAttr = node.getAttribute("data-sys-ctx");

						if (ctxAttr.indexOf("/") === 0) {
							marker = { begin: false, end: true };
						}
						else {
							tcIdx = ctxAttr;
							marker = { begin: true, end: false };
						}
					}

					if (marker) {
						if (isSingleExternalContext) {
							if (isElementNode) {
								throw new Error("Unexpected context marker in DOM for element '" + Sys$Application$_elementToString(node) + "': context was provided by caller.");
							} else if (isCommentNode) {
								throw new Error("Unexpected context marker in DOM for comment '" + node.nodeValue + "': context was provided by caller.");
							} else {
								throw new Error("Unexpected context marker in DOM: context was provided by caller");
							}
						}

						// Start a new context after this node
						if (marker.begin) {

							// Verify that there isn't currently an active context
							if (currentContext) {
								// There should be no context either because it is supplied by the caller
								// (i.e. Content), we have only just entered the method and haven't yet encountered
								// a context begin marker, or the node was preceeded by a context end marker
								throw new Error("There is already a context in use. This may be caused by invalid markup.");
							}

							if (!tcIdx) {
								throw new Error("Could not find context id for newly created context.");
							}

							// Start new context for a new item when a context begin marker is found (mimicks compiled code)
							newContext = new Sys.UI.TemplateContext(tcIdx);

							newContext.data = parentData;
							newContext.components = [];

							// Use the preceeding text nodes if there are any
							if (preceedingText) {
								newContext.nodes = preceedingText.slice();
							} else {
								newContext.nodes = [];
							}

							newContext.index = ++ctxIdx;

							// Set the index and use it to retrieve the data item for the context
							if (isArrayData) {
								if (ctxIdx >= parentData.length) {
									throw new Error("Unexpected number of contexts: expected " + parentData.length + " but found at least " + (ctxIdx + 1));
								}
								newContext.dataItem = parentData[ctxIdx];
							} else if (ctxIdx > 0) {

								throw new Error("Found multiple contexts in DOM, but data is not an array.");
							} else {
								newContext.dataItem = parentData;
							}

							newContext.parentContext = parentContext;
							newContext.containerElement = parentElement;

							// Get the template from the parent control (i.e. dataview)
							if (parentControl._getTemplate) {
								newContext.template = parentControl._getTemplate();
							}

							// Pre-compile the template if necessary, since we will need to access nested templates
							newContext.template._ensureCompiled();

							// Clear out text nodes array
							preceedingText = null;

							// Add the context to the parent control and use it as the current context
							parentControl._contexts.push(newContext);
							currentContext = newContext;
						}
						// End the current context when a context end marker is found
						else if (marker.end) {
							currentContext._onInstantiated(null, true);

							// Reset variables tied to the current context
							currentContext = null;
						}

						// Remove elements since they may still be shown by the browser
						// in some cases, even if they are hidden (i.e. OPTION).
						if (isElementNode) {
							parentElement.removeChild(node);
						}

						// Continue to the next node if this node was a marker
						continue;
					}
					else {
						// Save text nodes to be included in the following context
						if (isTextNode && !currentContext) {
							if (preceedingText) {
								preceedingText.push(node);
							}
							else {
								preceedingText = [node];
							}
						}
						else {
							if (!currentContext) {
								if (isElementNode) {
									throw new Error("Found element '" + Sys$Application$_elementToString(node) + "' outside of an active context.");
								} else if (isCommentNode) {
									throw new Error("Found comment '" + node.nodeValue + "' outside of an active context.");
								} else {
									throw new Error("Found unknown node '" + node.nodeValue + "' outside of an active context.");
								}
							}

							// Only top-level (non-recursive) nodes are added to the context nodes list
							currentContext.nodes.push(node);
						}
					}
				}

				// Only elements
				if (isElementNode) {

					// If a template index attribute was specified, then us it for templated controls
					if (node.hasAttribute("data-sys-tmplidx")) {
						tmplIdx = parseInt(node.getAttribute("data-sys-tmplidx"), 10);
					}

					// Assign context index (mimics compiled code)
					node.__mstcindex = currentContext._tcindex;

					if (node.hasAttribute("data-continue")) {
						// Children were allowed to continue rendering, so don't start generating ids
					}
					else if (!generateChildIds) {
						// Detect special attributes that would have been taken care of by server-side rendering.
						if (node.hasAttribute("sys:attach") || node.hasAttribute("sys:if") || node.hasAttribute("sys:content-template")) {
							generateChildIds = true;
						}
					}

					// If a sys:if attribute exists, then potentially remove the element from the DOM
					// don't remove it immediately since its contents could affect linking (e.g. child template index)
					if (node.hasAttribute("sys:if")) {
						value = node.getAttribute("sys:if");
						if (Sys.Application._getPropertyValue(null, null, null, value, currentContext, node, null, true)) {
							node.removeAttribute("sys:if");
						}
						else {
							parentElement.removeChild(node);
							continue;
						}
					}

					// generate client id
					if (node.hasAttribute("sys:id")) {
						if (node.id) {
							throw new Error("Found a sys:id binding in pre-rendered markup, but the element already has an id.");
						}

						value = node.getAttribute("sys:id");

						// Evaluate expression value in the current context
						if (value.startsWith("{") && value.endsWith("}")) {
							msAttrib = Sys.Application._splitAttribute("id", false);
							value = Sys.Application._getPropertyValue(msAttrib, parentElement, "id", value, currentContext, parentElement, null, true);
						}
						// Otherwise, call getInstanceId to generate a unique id
						else {
							value = currentContext.getInstanceId(value);
						}

						node.id = value;

						node.removeAttribute("sys:id");
					}
					else if (generateChildIds && node.hasAttribute("id")) {
						value = node.id;
						node.id = currentContext.getInstanceId(value);
					}

					// Detect content-template attribute
					if (node.hasAttribute("data-sys-content-template")) {
						contentTemplate = node.getAttribute("data-sys-content-template");
					}
					else {
						contentTemplate = null;
					}

					// Detect tcindex attribute
					tcIdx = node.getAttribute("data-sys-tcindex");

					// a control was rendered server-side, so link it and it's attributes
					if (node.hasAttribute("data-sys-attach")) {
						attachName = node.getAttribute("data-sys-attach");
						Sys.Application._linkControlElement(node, currentContext);

						// Provide control with content template names if it requires them.
						// NOTE: The assumption that the control's constructor will be a function is OK
						// here since we must assume that it is indeed a control for purposes of linking.
						// Also, attaching controls to label elements would cause other problems anyway.
						isContentTemplate = node.control.constructor.implementsInterface(Sys.UI.IContentTemplateConsumer);
						if (isContentTemplate) {
							if (contentTemplate) {
								node.control.addContentTemplate(contentTemplate);
							}
							if (parentContentTemplates) {
								node.control.addContentTemplate(parentContentTemplates);
							}
						}
						else if (contentTemplate !== null) {
							throw Error.invalidOperation("invalidSysContentTemplate");
						}

						// set the server-generated ctx id
						if (node.control._setTemplateCtxId) {
							node.control._setTemplateCtxId(tcIdx);
						}

						Sys.Application._linkAttributes(node, currentContext, attachName);

						// determine whether the control is a context-generating control (i.e. dataview), in
						// which case it will be responsible for linking it's own content
						if (node.control._generatesContext) {
							generatesContext = node.control._generatesContext();
						}

						// if the control gets its template from it's parent's template it should use
						if (generatesContext && node.control._setTemplate) {
							if (typeof (tmplIdx) !== "number") {
								throw new Error("A templated control is attached to the node, but no template index was specified.");
							}
							tmpl = new Sys.UI.Template(currentContext.template.get_element()._msajaxtemplate[2][tmplIdx][1]);
							tmpl._ensureCompiled();
							node.control._setTemplate(tmpl);
						}

						// register the control with the context here rather than when
						// linking the control (so that attributes can be linked first?)
						currentContext._registerComponent(node.control);
					}

					if (parentContentTemplates) {
						childContentTemplates = parentContentTemplates;
						if (contentTemplate) {
							childContentTemplates += " " + contentTemplate;
						}
					}
					else if (contentTemplate) {
						childContentTemplates = contentTemplate;
					}
					else {
						childContentTemplates = null;
					}

					// if the element doesn't generate a context, then recursively link it's children
					if (!generatesContext) {
						// if the node is a template (class = "sys-template"), then increment the child template index so that
						// context-generating controls that follow will be assigned the correct template
						if (Sys.UI.Template._isTemplate(node)) {
							attachName = node.getAttribute("sys:attach");
							Sys.Application._activateElement(node, currentContext, isBrowser("InternetExplorer") && Sys.Browser.version < 9, childContentTemplates, true);
							Sys.Application._linkAttributes(node, currentContext, attachName);
						}
						else {
							// If the node has any attributes that weren't rendered (i.e. "sys:" attributes), then activate only this node
							if (Array.prototype.some.call(node.attributes, function (a) { return a.name.indexOf(":") >= 0; })) {
								Sys.Application._activateElement(node, currentContext, isBrowser("InternetExplorer") && Sys.Browser.version < 9, childContentTemplates, false);
							}
							if (!Sys.Application._linkAttributes(node, currentContext, attachName)) {
								// The element did NOT have an attribute that results in linking the content
								// of the element (i.e. innerHTML or innerText), so recursively link child nodes.
								Sys.Application._linkContexts(parentContext, parentControl, parentData, node, currentContext, childContentTemplates, true, generateChildIds);
							}
						}
					}
				}
			}

			if (!recursive && isArrayData && !isSingleExternalContext && ctxIdx != parentData.length - 1) {
				throw new Error("Unexpected number of contexts: expected " + parentData.length + " but found " + (ctxIdx + 1));
			}
		};

		Sys.Application._linkControlElement = function Sys$Application$_linkControlElement(element, parentContext) {
			if (!element.hasAttribute("data-sys-attach")) {
				throw new Error("Element '" + Sys$Application$_elementToString(element) + "' is not a control.");
			}

			var controlType = element.getAttribute("data-sys-attach"),
				type = Sys.Application._findType(element, controlType, isBrowser("InternetExplorer") && Sys.Browser.version < 9),
				isContext = type.implementsInterface(Sys.UI.ITemplateContextConsumer),
				control = new type(element);

			control.beginUpdate();
			control.set_isLinkPending(true);
			if (isContext) {
				control.set_templateContext(parentContext);
			}

			return controlType;
		};

		Sys.Application.linkElement = function (element, tmplElement) {
			var appContext, control, controlType, tmpl, contentTemplate, isContentTemplate;

			// Initialize the application context
			appContext = Sys.Application._context;
			appContext.dataItem = null;
			appContext.components = appContext.components || [];
			appContext.nodes = [element];

			// Initialize the root control
			controlType = Sys.Application._linkControlElement(element, appContext);

			// NOTE: Assumption that the control is an MsAjax control is OK here, since we
			// are linking the element if it is not a control then it is an error scenario.
			control = element.control;

			// Detect content-template attribute
			if (element.hasAttribute("data-sys-content-template")) {
				isContentTemplate = control.constructor.implementsInterface(Sys.UI.IContentTemplateConsumer);
				if (!isContentTemplate) {
					throw Error.invalidOperation("invalidSysContentTemplate");
				}
				contentTemplate = element.getAttribute("data-sys-content-template");
				if (contentTemplate) {
					control.addContentTemplate(contentTemplate);
				}
			}

			// Set the template
			if (control._setTemplate) {
				tmpl = new Sys.UI.Template(tmplElement);
				tmpl._ensureCompiled();
				control._setTemplate(tmpl);
			}

			Sys.Application._linkAttributes(element, appContext, controlType);

			appContext._registerComponent(control);
			appContext.initializeComponents();
			appContext._onInstantiated(null, true);
		};

		Sys.Application._clearContent = function Sys$Application$_clearContent(element) {
			var err;
			Sys.Application.disposeElement(element, true);
			try { element.innerHTML = ""; }
			catch (err) {
				while (element.firstChild) {
					element.removeChild(element.firstChild);
				}
			}
		}
		Sys.Application._getCommandAttr = function Sys$Application$_getCommandAttr(element, templateContext, name, useDirect) {
			var err, value = null;
			try {
				value = useDirect ? element[name] : element.getAttribute(name);
				value = value ? Sys.Application._getPropertyValue(null, null, null, value, templateContext, element, null, true) : null;
			}
			catch (err) { }
			return value;
		}
		Sys.Application._directAttributes = {
			"style": "style.cssText",
			"class": "className",
			"cellpadding": "cellPadding",
			"cellspacing": "cellSpacing",
			"colspan": "colSpan",
			"rowspan": "rowSpan",
			"contenteditable": "contentEditable",
			"valign": "vAlign",
			"innertext": "innerText",
			"innerhtml": "innerHTML"
		}
		Sys.Application._splitAttribute = function Sys$Application$_splitAttribute(attributeName, isSelect, typeIndex) {
			var nameParts = attributeName.split(':'),
			ns = nameParts.length > 1 ? nameParts[0] : null,
			name = nameParts[ns ? 1 : 0],
			type = -1,
			textNode, map, index, isSys = (ns === "sys"),
			lowerName = name.toLowerCase(),
			isNative = !ns;
			if (!ns || isSys) {
				var newName = Sys.Application._directAttributes[lowerName];
				if (newName) {
					type = 1;
					if (name === "innertext") {
						textNode = true;
					}
					name = newName;
				}
				else if (isSelect) {
					if (lowerName === "selectedindex") {
						name = "selectedIndex";
						type = 1;
					}
					else if (name === "value") {
						type = 1;
					}
					else if (isSys) {
						type = 0;
						ns = null;
					}
				}
				else if (isSys) {
					if ((name === "command") || (name === "commandargument") || (name === "commandtarget")) {
						type = 4;
					}
					else if (name.indexOf("style-") === 0) {
						name = "style." + Sys.Application._translateStyleName(name.substr(6));
						type = 1;
					}
					else if (name.indexOf("class-") === 0) {
						name = name.substr(6);
						type = 2;
					}
					else {
						ns = null;
						type = 0;
					}
				}
			}
			else if (typeIndex) {
				index = typeIndex[ns];
				if (index) {
					type = 3;
					if (index.isClass) {
						map = Sys.Application._translateName(name, index.type);
						name = map.name;
					}
				}
				else {
					name = ns + ":" + name;
					ns = null;
					type = -1;
				}
			}
			else {
				name = ns + ":" + name;
				ns = null;
				type = -1;
			}
			return { ns: ns, name: name, type: type, map: map, index: index, textNode: textNode, isNative: isNative };
		}

		Sys.Application._translateStyleName = function Sys$Application$_translateStyleName(name) {
			if (name.indexOf('-') === -1) return name;
			var parts = name.toLowerCase().split('-'),
		newName = parts[0];
			for (var i = 1, l = parts.length; i < l; i++) {
				var part = parts[i];
				newName += part.substr(0, 1).toUpperCase() + part.substr(1);
			}
			return newName;
		}

		Sys.Application._getExtensionCode = function Sys$Application$_getExtensionCode(extension, doEval, templateContext, element) {
			extension = extension.trim();
			var name, properties, propertyBag = {}, spaceIndex = extension.indexOf(' ');
			if (spaceIndex !== -1) {
				name = extension.substr(0, spaceIndex);
				properties = extension.substr(spaceIndex + 1);
				if (properties) {
					properties = properties.replace(/\\,/g, '\u0000').split(",");
					for (var i = 0, l = properties.length; i < l; i++) {
						var property = properties[i].replace(/\u0000/g, ","),
						equalIndex = property.indexOf('='),
						pValue, pName;
						if (equalIndex !== -1) {
							pName = property.substr(0, equalIndex).trim();
							pValue = property.substr(equalIndex + 1).trim();
							if (doEval) {
								pValue = this._getPropertyValue(null, null, null, pValue, templateContext, element, true);
							}
						}
						else {
							pName = "$default";
							pValue = property.trim();
						}
						propertyBag[pName] = pValue;
					}
				}
			}
			else {
				name = extension;
			}
			return { instance: Sys.Application._getMarkupExtension(name), name: name, properties: propertyBag };
		}

		Sys.Application._getPropertyValue = function Sys$Application$_getPropertyValue(attrib, target, name, value, templateContext, element, inExtension, suppressExtension, additionalProperties) {
			var propertyValue = value.replace(/&lt;/, "<").replace(/&gt;/, ">");
			if (propertyValue.startsWith("{{") && propertyValue.endsWith("}}")) {
				propertyValue = this._evaluateExpression(propertyValue.slice(2, -2), templateContext, element);
			}
			else if (!suppressExtension && !inExtension && propertyValue.startsWith("{") && propertyValue.endsWith("}")) {
				var extension = this._getExtensionCode(propertyValue.slice(1, -1), true, templateContext, element);
				propertyValue = extension.instance.extension(target, (attrib.type === 2 ? "class:" : "") + name, templateContext, merge(additionalProperties || {}, extension.properties));
			}
			return propertyValue;
		}
		Sys.Application._tryName = function Sys$Application$_tryName(name, type) {
			var prototype = type.prototype,
		setterName = "set_" + name, setter = prototype[setterName];
			if (setter) {
				return { name: name, setterName: setterName, setter: setter, type: 1 };
			}
			if (name.startsWith('on')) {
				setterName = "add_" + name.substr(2);
				var adder = prototype[setterName];
				if (adder) {
					return { name: name, setterName: setterName, setter: adder, type: 2 };
				}
			}
			if (typeof (prototype[name]) !== "undefined") {
				return { name: name };
			}
			return null;
		}
		Sys.Application._translateName = function Sys$Application$_translateName(name, type) {
			if (name && (name !== name.toLowerCase())) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.invalidAttributeName, name));
			}
			var cache, index = Sys.Application._prototypeIndex[type.__typeName];
			if (index) {
				cache = index[name];
				if (cache) return cache;
			}
			else {
				index = {};
			}
			type.resolveInheritance();
			cache = Sys.Application._tryName(name, type);
			if (!cache) {
				var casedName = Sys.Application._mapToPrototype(name, type);
				if (casedName && (casedName !== name)) {
					cache = Sys.Application._tryName(casedName, type);
				}
				if (!cache) {
					cache = { name: name };
				}
			}
			index[name] = cache;
			return cache;
		}
		Sys.Application._mapToPrototype = function Sys$Application$_mapToPrototype(name, type) {
			if (!type) {
				throw new Error("type is undefined (name=\"" + name + "\").");
			}

			if (!type.__typeName) {
				throw new Error("\"" + type + "\" is not a valid type (name=\"" + name + "\").");
			}

			var fixedName, caseIndex = Sys.Application._caseIndex[type.__typeName];
			if (!caseIndex) {
				caseIndex = {};
				type.resolveInheritance();
				for (var memberName in type.prototype) {
					if (memberName.startsWith("get_") || memberName.startsWith("set_") || memberName.startsWith("add_")) {
						memberName = memberName.substr(4);
					}
					else if (memberName.startsWith("remove_")) {
						memberName = memberName.substr(7);
					}
					caseIndex[memberName.toLowerCase()] = memberName;
				}
				Sys.Application._caseIndex[type.__typeName] = caseIndex;
			}
			name = name.toLowerCase();
			if (name.startsWith('on')) {
				fixedName = caseIndex[name.substr(2)];
				if (fixedName) {
					fixedName = "on" + fixedName;
				}
				else {
					fixedName = caseIndex[name];
				}
			}
			else {
				fixedName = caseIndex[name];
			}
			return fixedName;
		}

		Sys.Application._doEval = function Sys$Application$_doEval(__expression, $context) {
			with ($context.dataItem || {}) {
				return eval("(" + __expression + ")");
			}
		};
		Sys.Application._evaluateExpression = function Sys$Application$_evaluateExpression(expression, $context, $element) {
			var fn = new Function("$rootContext", "$context", "$element", "$dataItem", "$index", "$id", "$vm", "$emit", "return " + expression + ";");
			return fn($context.rootContext, $context, $element, $context.dataItem, $context.index, $context.rootContext.vm, $context.rootContext.vm ? $context.rootContext.vm.$emit.bind($context.rootContext.vm) : null, function (prefix) { return $context.getInstanceId(prefix); });
		};

		Sys.Application._registerComponent = function Sys$Application$_registerComponent(element, component) {
			var components = element._components;
			if (!components) {
				element._components = components = [];
			}
			components[components.length] = component;
		}

		Sys.Application._activateOnPartial = function Sys$Application$_activateOnPartial(panel, rendering) {
			this._doUpdatePanel(panel, rendering);
			if (Sys.activateDom) {
				Sys.Application.activateElement(panel);
			}
		}

		Sys.Application._raiseInit = function Sys$Application$_raiseInit() {
			this.beginCreateComponents();
			Sys.Observer.raiseEvent(this, "init");
			if (Sys.activateDom) {
				Sys.Application.activateElement(document.documentElement);
			}
			if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
				var prm = Sys.WebForms.PageRequestManager.getInstance();
				prm._doUpdatePanel = prm._updatePanel;
				prm._updatePanel = Sys.Application._activateOnPartial;
			}
			this.endCreateComponents();
		}
		Sys.BindingMode = function Sys$BindingMode() {
		}






		Sys.BindingMode.prototype = {
			auto: 0,
			oneTime: 1,
			oneWay: 2,
			twoWay: 3,
			oneWayToSource: 4
		}
		Sys.BindingMode.registerEnum("Sys.BindingMode");
		Sys.Binding = function Sys$Binding() {
			Sys.Binding.initializeBase(this);
			this._sourceHandlers = [];
			this._targetHandlers = [];
			this._onSourceChanged = Function.createDelegate(this, this._sourceChanged);
			this._onTargetChanged = Function.createDelegate(this, this._targetChanged);
			this._onOptionsUpdated = Function.createDelegate(this, this._optionsUpdated);
			this._onDispose = Function.createDelegate(this, this.dispose);
		}


		function Sys$Binding$get_convert() {
			/// <value mayBeNull="true" locid="P:J#Sys.Binding.convert"></value>
			return this._convert || null;
		}
		function Sys$Binding$set_convert(value) {
			this._convert = value;
			this._convertFn = this._resolveFunction(value);
		}
		function Sys$Binding$get_convertBack() {
			/// <value mayBeNull="true" locid="P:J#Sys.Binding.convertBack"></value>
			return this._convertBack || null;
		}
		function Sys$Binding$set_convertBack(value) {
			this._convertBack = value;
			this._convertBackFn = this._resolveFunction(value);
		}
		function Sys$Binding$get_ignoreErrors() {
			/// <value type="Boolean" mayBeNull="false" locid="P:J#Sys.Binding.ignoreErrors"></value>
			return !!this._ignoreErrors;
		}
		function Sys$Binding$set_ignoreErrors(value) {
			this._ignoreErrors = value;
		}
		function Sys$Binding$get_mode() {
			/// <value type="Sys.BindingMode" mayBeNull="false" locid="P:J#Sys.Binding.mode"></value>
			return this._mode || Sys.BindingMode.auto;
		}
		function Sys$Binding$set_mode(value) {
			if (this._initialized) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.commonNotAfterInit, "Binding", "mode"));
			}
			this._mode = value;
		}
		function Sys$Binding$get_defaultValue() {
			/// <value mayBeNull="true" locid="P:J#Sys.Binding.defaultValue"></value>
			return this._defaultValue;
		}
		function Sys$Binding$set_defaultValue(value) {
			this._defaultValue = value;
		}
		function Sys$Binding$get_source() {
			/// <value mayBeNull="true" locid="P:J#Sys.Binding.source"></value>
			return this._source || null;
		}
		function Sys$Binding$set_source(value) {
			if (this._initialized) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.commonNotAfterInit, "Binding", "source"));
			}
			this._source = value;
		}
		function Sys$Binding$get_templateContext() {
			/// <value mayBeNull="true" type="Sys.UI.TemplateContext" locid="P:J#Sys.Binding.templateContext"></value>
			return this._templateContext || null;
		}
		function Sys$Binding$set_templateContext(value) {
			this._templateContext = value;
		}
		function Sys$Binding$get_path() {
			/// <value type="String" mayBeNull="true" locid="P:J#Sys.Binding.path"></value>
			return this._path || "";
		}
		function Sys$Binding$set_path(value) {
			if (this._initialized) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.commonNotAfterInit, "Binding", "path"));
			}
			this._path = value;
			this._pathArray = value ? value.split('.') : null;
		}
		function Sys$Binding$get_target() {
			/// <value mayBeNull="true" locid="P:J#Sys.Binding.target"></value>
			return this._target || null;
		}
		function Sys$Binding$set_target(value) {
			if (this._initialized) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.commonNotAfterInit, "Binding", "target"));
			}
			this._target = value;
		}
		function Sys$Binding$get_targetProperty() {
			/// <value type="String" mayBeNull="true" locid="P:J#Sys.Binding.targetProperty"></value>
			return this._targetProperty || "";
		}
		function Sys$Binding$set_targetProperty(value) {
			if (this._initialized) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.commonNotAfterInit, "Binding", "targetProperty"));
			}
			this._targetProperty = value;
			this._targetPropertyArray = value ? value.split('.') : null;
		}
		function Sys$Binding$_addBinding(element) {
			if (element.nodeType === 3) {
				element = element.parentNode;
				if (!element) return;
			}
			var bindings = element.__msajaxbindings = element.__msajaxbindings || [];
			bindings.push(this);
			Sys.UI.DomElement._onDispose(element, Sys.Binding._disposeBindings);
		}
		function Sys$Binding$dispose() {
			/// <summary locid="M:J#Sys.Binding.dispose" />
			if (!this._disposed) {
				this._disposed = true;
				this._watchObject(null);
				this._watchObject(null, true);
				this._targetHandlers = null;
				this._sourceHandlers = null;
				var source = this._source,
				target = this._target;
				if (source) {
					if (this._sourceOption) Sys.Observer.removeEventHandler(source, "optionsChanged", this._onOptionsUpdated);
					if (Sys.INotifyDisposing.isImplementedBy(source)) source.remove_disposing(this._onDispose);
				}
				if (target) {
					if (this._targetOption) Sys.Observer.removeEventHandler(target, "optionsChanged", this._onOptionsUpdated);
					if (Sys.INotifyDisposing.isImplementedBy(target)) target.remove_disposing(this._onDispose);
				}
				this._convert = this._convertBack = this._convertFn = this._convertBackFn = this._lastSource = this._lastTarget =
					this._source = this._target = this._path = this._pathArray = this._defaultValue = this._targetProperty =
					this._targetPropertyArray = this._templateContext = this._updateSource = this._sourceOption = this._updateTarget =
					this._targetOption = this._mode = this._onOptionsUpdated = this._onTargetChanged = this._onSourceChanged =
					this._onDispose = null;
			}
			Sys.Binding.callBaseMethod(this, 'dispose');
		}
		function Sys$Binding$_getPropertyFromIndex(obj, path, startIndex, endIndex) {
			for (var i = startIndex; i <= endIndex; i++) {
				if (obj === null || typeof (obj) === "undefined") {
					return null;
				}
				obj = this._getPropertyData(obj, path[i]);
			}
			return obj;
		}
		function Sys$Binding$_getPropertyData(obj, name) {
			if (typeof (obj["get_" + name]) === "function") {
				return obj["get_" + name]();
			}
			else {
				return obj[name];
			}
		}
		function Sys$Binding$_watchObject(object, isSource) {
			var path = isSource ? this._pathArray : this._targetPropertyArray,
			handlers = isSource ? this._sourceHandlers : this._targetHandlers,
			observable = !!object;
			if (path) {
				for (var i = 0; i < path.length; i++) {
					var property = path[i],
					handler = handlers[i];
					if (!handler || handler.object !== object) {
						if (handler) {
							this._forget(handler);
							handlers[i] = null;
						}
						if (observable) {
							handlers[i] = this._listen(object, property, isSource);

							// if the leaf of the path is a vue ref, listen to the value as well
							if (i === path.length - 1 && _isVueRef(object[property])) {
								path.push('value');
							}
						}
					}
					if (observable) {
						object = this._getPropertyData(object, property);
						observable = (object && (typeof (object) === "object" || (object instanceof Array) || Sys._isDomElement(object)) || _isVueType(object));
					}
					else {
						object = null;
					}
				}

				// clean up orphaned leaf handlers
				for (var i = path.length; i < handlers.length; i++) {
					if (handlers[i]) {
						this._forget(handlers[i]);
						handlers[i] = null;
					}
				}
			}
		}
		function Sys$Binding$_isInput(element, property) {
			var ret,
			tag = (Sys.UI.DomElement.isDomElement(element) && element.nodeType === 1 && element.tagName) ?
				element.tagName.toLowerCase() : "";
			if (tag === "select" || tag === "input" || tag === "textarea") {
				property = (property || "").toLowerCase();
				if (property === "value" || property === "selectedindex" || property === "checked") {
					if (tag !== "input" || (tag === "input" && !/button|image|hidden|submit|reset/i.test(element.type))) {
						ret = tag;
					}
				}
			}
			return ret;
		}
		function _isVueRef(value) {
			return window.Vue && Vue.isRef(value);
		}
		function _isVueReactive(value) {
			return window.Vue && Vue.isReactive(value);
		}
		function _isVueType(value) {
			return _isVueRef(value) || _isVueReactive(value);
		}
		function Sys$Binding$_listen(object, property, isSource) {
			var _this = this,
			listener = isSource ? this._onSourceChanged : this._onTargetChanged,
			handlers = {
				listener: listener,
				object: object,
				pc: function (sender, args) {
					var changed = args.get_propertyName();
					if (!changed || changed === property) {
						listener();
					}
				},
				dom: []
			};
			Sys.Observer._addEventHandler(object, "propertyChanged", handlers.pc);
			var isInput = this._isInput(object, property),
				adder = Sys.UI.DomEvent.addHandler;
			if (_isVueType(object) || _isVueType(object[property])) {
				var o = object;
				var deps = [function () { return o[property]; }];
				var isList = false;
				if (Array.isArray(object[property])) {
					isList = true;
					deps.push(function () { return o[property].length; });
				}
				handlers.dispose = Vue.watch(deps, function (newVals) {
					listener();
					if (isList)
						Sys.Observer.raiseCollectionChanged(newVals[0]);
				}.bind(this));
			}
			if (isInput) {
				handlers.dom.push("change");
				adder(object, "change", listener);
				if (isInput !== "textarea") {
					handlers.dom.push("click");
					adder(object, "click", listener);
					if (isInput === "select") {
						handlers.dom.push("keyup");
						adder(object, "keyup", listener);
					}
				}
			}
			object = null;
			return handlers;
		}
		function Sys$Binding$_forget(handler) {
			var object = handler.object,
			dom = handler.dom;
			if (handler.pc)
				Sys.Observer._removeEventHandler(object, "propertyChanged", handler.pc);
			for (var i = 0, l = dom.length; i < l; i++) {
				Sys.UI.DomEvent.removeHandler(object, dom[i], handler.listener);
			}
			if (handler.dispose)
				handler.dispose();
		}
		function Sys$Binding$_resolveFunction(value) {
			var e, ret;
			if (typeof (value) === 'function') {
				ret = value;
			}
			else {
				if (typeof (value) !== "string") {
					throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.invalidFunctionName, value));
				}
				ret = Sys.converters[value];
				if (!ret) {
					try {
						ret = Type.parse(value);
					}
					catch (e) {
						throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.functionNotFound, value));
					}
				}
			}
			return ret;
		}
		function Sys$Binding$link() {
			/// <summary locid="M:J#Sys.Binding.link" />
			if (this.get_mode() === Sys.BindingMode.oneWayToSource) {
				this._targetChanged(false);
			}
			else {
				this._sourceChanged(false);
			}
			Sys.Binding.callBaseMethod(this, 'link');
		}
		function Sys$Binding$update(mode) {
			/// <summary locid="M:J#Sys.Binding.update" />
			/// <param name="mode" optional="true" mayBeNull="true"></param>
			if (!this._initialized) {
				throw Error.invalidOperation(Sys.UI.TemplatesRes.updateBeforeInit);
			}
			mode = mode || this.get_mode();
			if (mode === Sys.BindingMode.oneWayToSource) {
				this._targetChanged(true);
			}
			else {
				this._sourceChanged(true);
			}
		}
		function Sys$Binding$_notSet(name) {
			throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.bindingPropertyNotSet, name));
		}

		function Sys$Binding$initialize() {
			if (!this.get_isInitialized()) {
				if (!this.get_targetProperty()) {
					this._notSet("targetProperty");
				}
				var tc = this.get_templateContext();
				if (!tc) {
					this._doInitialize();
				}
				else {
					tc._completed.push(Function.createDelegate(this, this._doInitialize));
				}
			}
		}
		function Sys$Binding$_doInitialize() {
			var source = this.get_source(),
				target = this.get_target();
			if (typeof (source) === "string") {
				this.set_source(source = this._resolveReference(source) || null);
			}
			if (typeof (target) === "string") {
				this.set_target(target = this._resolveReference(target) || null);
			}
			var mode = this.get_mode();
			if (target && (mode === Sys.BindingMode.auto)) {
				mode = "oneWay";
				if ((this._isInput(target, this._targetPropertyArray ? this._targetPropertyArray[0] : "")) ||
				Sys.INotifyPropertyChange.isImplementedBy(target)) {
					mode = "twoWay";
				}
				mode = Sys.BindingMode[mode];
				this.set_mode(mode);
			}
			Sys.Binding.callBaseMethod(this, 'initialize');
			if (this.get_isLinkPending()) {
				this.link();
			}
			else {
				this.update(mode);
			}

			if (mode !== Sys.BindingMode.oneTime) {
				if (source) {
					if (mode !== Sys.BindingMode.oneWayToSource) {
						this._watchObject(source, true);
						if (Sys.INotifyDisposing.isImplementedBy(source)) {
							source.add_disposing(this._onDispose);
						}
					}
					if (Sys.UI.DomElement.isDomElement(source)) {
						this._addBinding(source);
					}
				}
				if (target) {
					if (mode !== Sys.BindingMode.oneWay) {
						this._watchObject(target);
						if (Sys.INotifyDisposing.isImplementedBy(target)) {
							target.add_disposing(this._onDispose);
						}
					}
					if (Sys.UI.DomElement.isDomElement(target)) {
						this._addBinding(target);
					}
				}
			}
			function listen(e, p) {
				if (Sys.UI.DomElement.isDomElement(e) && /^select$/i.test(e.tagName) && /^(selectedIndex|value)$/i.test(p)) {
					Sys.Observer.addEventHandler(e, "optionsChanged", this._onOptionsUpdated);
					return true;
				}
				return false;
			}
			if (source && mode >= 3) {
				this._sourceOption = listen.call(this, source, this.get_path());
			}
			if (target && mode <= 3) {
				this._targetOption = listen.call(this, target, this.get_targetProperty());
			}
		}
		function Sys$Binding$_isChecked(element, name) {
			return (name === "checked") && (element.tagName.toLowerCase() === "input");
		}
		function Sys$Binding$_optionsUpdated(select) {
			if (!this._disposed) {
				this.update(select === this.get_source() ? 4 : 2);
			}
		}
		function Sys$Binding$_sourceChanged(force) {
			if (this._disposed) return;
			var er,
				link = force === false,
				target = this.get_target(),
				source = this.get_source();
			force = force === true;
			if (!target) return;
			source = (source && this._pathArray)
					? this._getPropertyFromIndex(source, this._pathArray, 0, this._pathArray.length - 1)
					: source;
			if (_isVueRef(source)) {
				source = source.value;
			}
			if (!this._updateSource && (force || link || (source !== this._lastSource))) {
				try {
					this._updateTarget = true;
					this._lastSource = this._lastTarget = source;
					if (!link) {
						if (this._convertFn) {
							if (this._ignoreErrors) {
								try {
									source = this._convertFn(source, this);
								}
								catch (er) { }
							}
							else {
								source = this._convertFn(source, this);
							}
						}
						if ((source === null) || (typeof (source) === "undefined")) {
							source = this.get_defaultValue();
						}
						if (this._targetProperty && this._targetProperty.startsWith("class:")) {
							var className = this._targetProperty.substr(6).trim();
							source ? Sys.UI.DomElement.addCssClass(target, className) : Sys.UI.DomElement.removeCssClass(target, className);
						}
						else {
							var targetArrayLength = this._targetPropertyArray.length;
							target = this._getPropertyFromIndex(target, this._targetPropertyArray, 0, targetArrayLength - 2);
							if ((target !== null) && (typeof (target) !== "undefined")) {
								var name = this._targetPropertyArray[targetArrayLength - 1],
								isElement = Sys.UI.DomElement.isDomElement(target);
								if (isElement) {
									source = Sys.UI.Template._checkAttribute(name, source);
									if (source === null || source === undefined) {
										source = "";
									}
								}
								if (isElement && (name === "innerHTML" || name === "innerText")) {
									Sys.Application._clearContent(target);
									if (name === "innerHTML") {
										target.innerHTML = source;
									}
									else {
										target.appendChild(document.createTextNode(source));
									}
									Sys.Observer.raisePropertyChanged(target, name);
								}
								else if (isElement && (name === "tabIndex" || name === "tabindex")) {
									Sys.Observer._setValue(target, "tabIndex", source);
								}
								else {
									Sys.Observer._setValue(target, name, source);
								}
								if (source && isElement && this._isChecked(target, name)) {
									var a = document.createAttribute(name);
									a.nodeValue = name;
									target.setAttributeNode(a);
								}
							}
						}
					}
				}
				finally {
					this._updateTarget = false;
				}
			}
			if (!force && !link) {
				this._watchObject(this.get_source(), true);
			}
		}
		function Sys$Binding$_targetChanged(force) {
			if (this._disposed) return;
			var link = force === false,
				target = this.get_target(),
				source = this.get_source();
			force = force === true;
			if (!source) return;
			target = !target ? null : this._getPropertyFromIndex(target, this._targetPropertyArray,
												0, this._targetPropertyArray.length - 1);
			if (!this._updateTarget && (force || link || (target !== this._lastTarget))) {
				try {
					this._updateSource = true;
					this._lastTarget = this._lastSource = target;
					if (!link) {
						if (this._convertBackFn) {
							if (this._ignoreErrors) {
								try {
									target = this._convertBackFn(target, this);
								}
								catch (e) { }
							}
							else {
								target = this._convertBackFn(target, this);
							}
						}
						if (this._pathArray) {
							var sourceArrayLength = this._pathArray.length;
							source = this._getPropertyFromIndex(source, this._pathArray, 0, sourceArrayLength - 2);
							if ((source !== null) && (typeof (source) !== "undefined")) {
								var name = this._pathArray[sourceArrayLength - 1],
								isElement = Sys.UI.DomElement.isDomElement(source);
								if (isElement) {
									target = Sys.UI.Template._checkAttribute(name, target);
									if (name === "innerHTML") {
										Sys.Application._clearContent(source);
									}
								}
								Sys.Observer._setValue(source, name, target);
								if (target && isElement && this._isChecked(source, name)) {
									var a = document.createAttribute(name);
									a.nodeValue = name;
									source.setAttributeNode(a);
								}
							}
						}
					}
				}
				finally {
					this._updateSource = false;
				}
			}
			if (!force && !link) {
				this._watchObject(this.get_target());
			}
		}
		function Sys$Binding$_resolveReference(str) {
			var ref = Sys.get(str, this.get_templateContext());
			if ((ref === null) || (typeof (ref) === "undefined")) {
				throw Error.invalidOperation(String.format(Sys.UI.TemplatesRes.unresolvedReference, str));
			}
			return ref || null;
		}
		Sys.Binding.prototype = {
			_defaultValue: null,
			get_convert: Sys$Binding$get_convert,
			set_convert: Sys$Binding$set_convert,
			get_convertBack: Sys$Binding$get_convertBack,
			set_convertBack: Sys$Binding$set_convertBack,
			get_ignoreErrors: Sys$Binding$get_ignoreErrors,
			set_ignoreErrors: Sys$Binding$set_ignoreErrors,
			get_mode: Sys$Binding$get_mode,
			set_mode: Sys$Binding$set_mode,
			get_defaultValue: Sys$Binding$get_defaultValue,
			set_defaultValue: Sys$Binding$set_defaultValue,
			get_source: Sys$Binding$get_source,
			set_source: Sys$Binding$set_source,
			get_templateContext: Sys$Binding$get_templateContext,
			set_templateContext: Sys$Binding$set_templateContext,
			get_path: Sys$Binding$get_path,
			set_path: Sys$Binding$set_path,
			get_target: Sys$Binding$get_target,
			set_target: Sys$Binding$set_target,
			get_targetProperty: Sys$Binding$get_targetProperty,
			set_targetProperty: Sys$Binding$set_targetProperty,
			_addBinding: Sys$Binding$_addBinding,
			dispose: Sys$Binding$dispose,
			_getPropertyFromIndex: Sys$Binding$_getPropertyFromIndex,
			_getPropertyData: Sys$Binding$_getPropertyData,
			_watchObject: Sys$Binding$_watchObject,
			_isInput: Sys$Binding$_isInput,
			_listen: Sys$Binding$_listen,
			_forget: Sys$Binding$_forget,
			_resolveFunction: Sys$Binding$_resolveFunction,
			update: Sys$Binding$update,
			link: Sys$Binding$link,
			_notSet: Sys$Binding$_notSet,
			initialize: Sys$Binding$initialize,
			_doInitialize: Sys$Binding$_doInitialize,
			_isChecked: Sys$Binding$_isChecked,
			_optionsUpdated: Sys$Binding$_optionsUpdated,
			_sourceChanged: Sys$Binding$_sourceChanged,
			_targetChanged: Sys$Binding$_targetChanged,
			_resolveReference: Sys$Binding$_resolveReference
		}
		Sys.Binding._disposeBindings = function Sys$Binding$_disposeBindings() {
			var bindings = this.__msajaxbindings;
			if (bindings) {
				for (var i = 0, l = bindings.length; i < l; i++) {
					bindings[i].dispose();
				}
			}
			this.__msajaxbindings = null;
		}
		Sys.Binding.registerClass("Sys.Binding", Sys.Component, Sys.UI.ITemplateContextConsumer);
		Sys.converters = Sys.converters || {};

		Sys.Binding.bind = function Sys$Binding$bind(targetOrOptions, property, source, path, options) {
			if (arguments.length > 1) {
				options = merge({
					target: targetOrOptions,
					targetProperty: property,
					source: source,
					path: path,
					templateContext: Sys._isInstanceOfType(Sys.UI.TemplateContext, this) ? this : null
				}, options);
			}
			else {
				options = targetOrOptions;
			}
			var value = options.mode;
			if (typeof (value) === "string") {
				options.mode = Sys.BindingMode.parse(value);
			}
			value = options.ignoreErrors;
			if (typeof (value) === "string") {
				options.ignoreErrors = Boolean.parse(value);
			}
			var binding = new Sys.Binding();
			forIn(options, function (v, n) {
				if (typeof (v) !== "undefined") Sys.Observer.setValue(binding, n, v);
			});
			binding.initialize();
			return binding;
		}

		Sys.registerPlugin({
			name: "bind",
			plugin: Sys.Binding.bind
		});

		Sys.Application.registerMarkupExtension(
"binding",
function (component, targetProperty, templateContext, properties) {
	var options = merge({
		source: templateContext.dataItem,
		templateContext: templateContext,
		target: component,
		targetProperty: targetProperty
	}, properties);
	options.path = options.path || options.$default;
	delete options.$default;
	var binding = Sys.Binding.bind(options);
	templateContext.components.push(binding);
},
false);
		Sys.UI.DataView = function Sys$UI$DataView(element) {
			/// <summary locid="M:J#Sys.UI.DataView.#ctor" />
			/// <param name="element"></param>
			Sys.UI.DataView.initializeBase(this, [element]);
		}

		// Global dataview configuration
		Sys.UI.DataView.config = {
			useOptimalUpdates: false
		};

		function Sys$UI$DataView$add_command(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.command" />
			this._addHandler("command", handler);
		}
		function Sys$UI$DataView$remove_command(handler) {
			this._removeHandler("command", handler);
		}
		function Sys$UI$DataView$add_rendering(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.rendering" />
			this._addHandler("rendering", handler);
		}
		function Sys$UI$DataView$remove_rendering(handler) {
			this._removeHandler("rendering", handler);
		}
		function Sys$UI$DataView$add_rendered(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.rendered" />
			this._addHandler("rendered", handler);
		}
		function Sys$UI$DataView$remove_rendered(handler) {
			this._removeHandler("rendered", handler);
		}
		function Sys$UI$DataView$add_itemRendered(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.itemRendered" />
			this._addHandler("itemRendered", handler);
		}
		function Sys$UI$DataView$remove_itemRendered(handler) {
			this._removeHandler("itemRendered", handler);
		}
		function Sys$UI$DataView$add_itemRendering(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.itemRendering" />
			this._addHandler("itemRendering", handler);
		}
		function Sys$UI$DataView$remove_itemRendering(handler) {
			this._removeHandler("itemRendering", handler);
		}
		function Sys$UI$DataView$add_fetchFailed(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.fetchFailed" />
			this._addHandler("fetchFailed", handler);
		}
		function Sys$UI$DataView$remove_fetchFailed(handler) {
			this._removeHandler("fetchFailed", handler);
		}
		function Sys$UI$DataView$add_fetchSucceeded(handler) {
			/// <summary locid="E:J#Sys.UI.DataView.fetchSucceeded" />
			this._addHandler("fetchSucceeded", handler);
		}
		function Sys$UI$DataView$remove_fetchSucceeded(handler) {
			this._removeHandler("fetchSucceeded", handler);
		}
		function Sys$UI$DataView$get_viewData() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.viewData"></value>
			return this._viewData || null;
		}
		function Sys$UI$DataView$get_data() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.data"></value>
			return this._data;
		}
		function Sys$UI$DataView$set_data(value) {
			if (!this._setData || (this._data !== value)) {
				this._loadData(value);
			}
		}
		function Sys$UI$DataView$get_dataProvider() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.dataProvider"></value>
			return this._provider || null;
		}
		function Sys$UI$DataView$set_dataProvider(value) {
			this._dataProvider = this._wsp = this._wspClass = null;
			if (Sys.Data.IDataProvider.isImplementedBy(value)) {
				this._dataProvider = value;
			}
			else if (Sys.Net.WebServiceProxy.isInstanceOfType(value)) {
				this._wsp = value;
			}
			else if (Type.isClass(value) && value.inheritsFrom(Sys.Net.WebServiceProxy) && typeof (value.get_path) === "function") {
				this._wspClass = value;
			}
			else if ((value !== null) && (typeof (value) !== "string")) {
				throw Error.argument("dataProvider", Sys.UI.TemplatesRes.invalidDataProviderType);
			}
			this._provider = value;
			if (this.get_autoFetch() && this._isActive()) {
				if (value) {
					this._doAutoFetch();
				}
			}
			else {
				this._stale = true;
			}
		}
		function Sys$UI$DataView$get_autoFetch() {
			/// <value locid="P:J#Sys.UI.DataView.autoFetch"></value>
			return this._autoFetch;
		}
		function Sys$UI$DataView$set_autoFetch(value) {
			var was = this._autoFetch;
			if (typeof (value) === "string") {
				value = Boolean.parse(value);
			}
			else if (typeof (value) !== "boolean") {
				throw Error.invalidOperation(Sys.UI.TemplatesRes.stringOrBoolean);
			}
			this._autoFetch = value;
			if (this._isActive() && this._stale && !was && value) {
				this._doAutoFetch();
			}
		}
		function Sys$UI$DataView$get_isFetching() {
			/// <value type="Boolean" locid="P:J#Sys.UI.DataView.isFetching"></value>
			return this._fetching;
		}
		function Sys$UI$DataView$get_httpVerb() {
			/// <value type="String" locid="P:J#Sys.UI.DataView.httpVerb"></value>
			return this._httpVerb || "POST";
		}
		function Sys$UI$DataView$set_httpVerb(value) {
			this._httpVerb = value;
		}
		function Sys$UI$DataView$get_contexts() {
			/// <value type="Array" elementType="Sys.UI.TemplateContext" elementMayBeNull="true" locid="P:J#Sys.UI.DataView.contexts"></value>
			return this._contexts;
		}
		function Sys$UI$DataView$get_fetchParameters() {
			/// <value type="Object" mayBeNull="true" locid="P:J#Sys.UI.DataView.fetchParameters"></value>
			return this._fetchParameters;
		}
		function Sys$UI$DataView$set_fetchParameters(value) {
			if (this._fetchParameters !== value) {
				this._fetchParameters = value;
				if (this.get_autoFetch() && this._isActive()) {
					this._doAutoFetch();
				}
				else {
					this._stale = true;
				}
			}
		}
		function Sys$UI$DataView$get_selectedData() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.selectedData"></value>
			var selectedIndex = this.get_selectedIndex();
			if (selectedIndex > -1) {
				var data = this.get_viewData();
				if ((data instanceof Array) && (selectedIndex < data.length)) {
					return data[selectedIndex];
				}
			}
			return null;
		}
		function Sys$UI$DataView$get_selectedIndex() {
			/// <value locid="P:J#Sys.UI.DataView.selectedIndex"></value>
			return this._selectedIndex;
		}
		function Sys$UI$DataView$set_selectedIndex(value) {
			value = this._validateIndexInput(value);
			if (value < -1) {
				throw Error.argumentOutOfRange("value", value);
			}
			if (!this.get_isInitialized() || !this._setData) {
				this._selectedIndex = value;
			}
			else {
				this._applySelectedIndex(value);
			}
		}
		function Sys$UI$DataView$get_initialSelectedIndex() {
			/// <value locid="P:J#Sys.UI.DataView.initialSelectedIndex"></value>
			return this._initialSelectedIndex;
		}
		function Sys$UI$DataView$set_initialSelectedIndex(value) {
			value = this._validateIndexInput(value);
			if (value < -1) {
				throw Error.argumentOutOfRange("value", value);
			}
			if (value !== this.get_initialSelectedIndex()) {
				this._initialSelectedIndex = value;
				this._raiseChanged("initialSelectedIndex");
			}
		}
		function Sys$UI$DataView$get_selectedItemClass() {
			/// <value type="String" locid="P:J#Sys.UI.DataView.selectedItemClass"></value>
			return this._selectedItemClass || "";
		}
		function Sys$UI$DataView$set_selectedItemClass(value) {
			var name = this.get_selectedItemClass();
			if (value !== name) {
				var index = this.get_selectedIndex();
				this._addRemoveCssClass(index, name, Sys.UI.DomElement.removeCssClass);
				this._addRemoveCssClass(index, value, Sys.UI.DomElement.addCssClass);
				this._selectedItemClass = value;
			}
		}
		function Sys$UI$DataView$get_timeout() {
			/// <value type="Number" integer="true" locid="P:J#Sys.UI.DataView.timeout"></value>
			return this._timeout;
		}
		function Sys$UI$DataView$set_timeout(value) {
			this._timeout = value;
		}
		function Sys$UI$DataView$get_fetchOperation() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.fetchOperation"></value>
			return this._query || "";
		}
		function Sys$UI$DataView$set_fetchOperation(value) {
			if (this._query !== value) {
				this._query = value;
				if (this.get_autoFetch() && this._isActive()) {
					if (value) {
						this._doAutoFetch();
					}
				}
				else {
					this._stale = true;
				}
			}
		}
		function Sys$UI$DataView$get_itemPlaceholder() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.itemPlaceholder"></value>
			return this._placeholder || null;
		}
		function Sys$UI$DataView$set_itemPlaceholder(value) {
			if (this._placeholder !== value) {
				this._placeholder = value;
				this._dirty = true;
				this._raiseChanged("itemPlaceholder");
			}
		}
		function Sys$UI$DataView$get_templateContext() {
			/// <value mayBeNull="true" type="Sys.UI.TemplateContext" locid="P:J#Sys.UI.DataView.templateContext"></value>
			return this._parentContext || Sys.UI.Template.findContext(this.get_element());
		}
		function Sys$UI$DataView$set_templateContext(value) {
			if (this._parentContext !== value) {
				this._parentContext = value;
				this._dirty = true;
				this._raiseChanged("templateContext");
			}
		}
		function Sys$UI$DataView$get_itemTemplate() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataView.itemTemplate"></value>
			return this._template || null;
		}
		function Sys$UI$DataView$set_itemTemplate(value) {
			if (this._template !== value) {
				this._template = value;
				this._dirty = true;
				if (this._dvTemplate) {
					this._dvTemplate.dispose();
					this._dvTemplate = null;
				}
				if (this._isActive()) {
					this.raisePropertyChanged("itemTemplate");
					this.refresh();
				}
				else {
					this._changed = true;
				}
			}
		}
		function Sys$UI$DataView$_applySelectedIndex(value, force) {
			var currentIndex = this.get_selectedIndex();
			if (force || (value !== currentIndex)) {
				var data = this.get_viewData();
				if (!(data instanceof Array)) {
					data = [data];
				}
				var outOfRange = (value < -1) || (value >= data.length);
				if (outOfRange) {
					throw Error.argumentOutOfRange("value", value);
				}
				this._selectedIndex = value;
				this._currentData = ((value === -1) || outOfRange) ? null : data[value];
				var className = this.get_selectedItemClass();
				this._addRemoveCssClass(currentIndex, className, Sys.UI.DomElement.removeCssClass);
				this._addRemoveCssClass(value, className, Sys.UI.DomElement.addCssClass);
				if (!this.get_isUpdating()) {
					if (value !== currentIndex) {
						this.raisePropertyChanged('selectedIndex');
					}
				}
				else {
					this._changed = true;
				}
			}
			if (!this.get_isUpdating()) {
				this._raiseSelectedData();
			}
			else {
				this._changed = true;
			}
		}
		function Sys$UI$DataView$_addRemoveCssClass(index, className, addRemove) {
			if (className && (index > -1)) {
				var items = this.get_contexts(), l = items ? items.length : -1;
				if (l && (index < l)) {
					var elementsSet = items[index].nodes;
					if (elementsSet) {
						for (var i = 0, len = elementsSet.length; i < len; i++) {
							var element = elementsSet[i];
							if (element.nodeType === 1) {
								addRemove(element, className);
							}
						}
					}
				}
			}
		}
		function Sys$UI$DataView$get_useOptimalUpdates() {
			return this._useOptimalUpdates;
		}
		function Sys$UI$DataView$set_useOptimalUpdates(value) {
			this._useOptimalUpdates = value;
		}
		function Sys$UI$DataView$_collectionChanged(sender, args) {
			var oldSelected = this._currentData,
			changes = args.get_changes(),
			selectedIndex = this.get_selectedIndex(), oldIndex = selectedIndex;
			if (this._isActive()) {
				this._changing = true;

				// Determine if the changes contain an add event that occurs before a remove event which preceeds it in the array.
				// i.e.: array = [0, 1], add 2 at index 2, then remove at index 0, resulting in [1, 2]
				var containsAddBeforePrecedingRemove = changes.some(function (evt, i) {
					return evt.action === Sys.NotifyCollectionChangedAction.add && changes.some(function (other, j) {
						return j > i && other.action === Sys.NotifyCollectionChangedAction.remove && other.oldStartingIndex <= evt.newStartingIndex;
					});
				});

				// If an add event occurs before a remove which preceeds it in the array, then fall back to a non-optimal refresh.
				if (containsAddBeforePrecedingRemove) {
					this.refresh();
				}
				else {
					// Determine if the template uses the $index argument by inspecting the compiled template code.
					var template = this._ensureTemplate(this._getTemplate());
					template._ensureCompiled();
					var templateUsesDollarIndex = /with\s*\(.*\$index/.test(template._instantiateIn.toString().replace(/(\r\n|\n|\r)/gm, ""));

					var useOptimalUpdates = this.get_useOptimalUpdates() != null ? this.get_useOptimalUpdates() : Sys.UI.DataView.config.useOptimalUpdates;
					if (useOptimalUpdates !== true || templateUsesDollarIndex) {
						this.refresh();
					}
					else {
						var _this = this;
						foreach(changes, function (evt) {
							var i, arr, start, len;
							if (evt.oldItems && evt.oldItems.length > 0) {
								arr = evt.oldItems;
								start = evt.oldStartingIndex;
								len = arr.length;

								_this._clearContainers(_this._placeholders, start, len);
								_this._contexts.splice(start, len);
							}
							else if (evt.newItems && evt.newItems.length > 0) {
								arr = evt.newItems;
								start = evt.newStartingIndex;
								len = arr.length;

								for (i = 0; i < len; i++) {
									_this._contexts.splice(start + i, 0, null);
								}
								_this.refresh(start, len)
							}
						});
					}
				}
			}
			else {
				this._dirty = true;
				return;
			}
			var data = this.get_viewData();
			if ((selectedIndex !== -1) && (selectedIndex < data.length) &&
			(data[selectedIndex] === oldSelected)) {
				return;
			}
			for (var i = 0, l = changes.length; i < l; i++) {
				var change = changes[i];
				if (change.action === Sys.NotifyCollectionChangedAction.add) {
					if (selectedIndex >= change.newStartingIndex) {
						selectedIndex += change.newItems.length;
					}
				}
				else {
					var index = change.oldStartingIndex, len = change.oldItems.length, lastIndex = index + len - 1;
					if (selectedIndex > lastIndex) {
						selectedIndex -= len;
					}
					else if (selectedIndex >= index) {
						selectedIndex = -1;
						break;
					}
				}
			}
			if (selectedIndex !== oldIndex) {
				this.set_selectedIndex(selectedIndex);
			}
		}
		function Sys$UI$DataView$_elementContains(container, element, excludeSelf) {
			if (container === element) {
				return !excludeSelf;
			}
			do {
				element = element.parentNode;
				if (element === container) return true;
			}
			while (element);
			return false;
		}
		function Sys$UI$DataView$_raiseChanged(name) {
			if (this._isActive()) {
				this.raisePropertyChanged(name);
			}
			else {
				this._changed = true;
			}
		}
		function Sys$UI$DataView$_raiseFailed(request, error) {
			var args = new Sys.Net.WebRequestEventArgs(request ? request.get_executor() : null, error);
			this.onFetchFailed(args);
			Sys.Observer.raiseEvent(this, "fetchFailed", args);
		}
		function Sys$UI$DataView$_raiseSelectedData() {
			if (this._lastData !== this._currentData) {
				this._lastData = this._currentData;
				this.raisePropertyChanged('selectedData');
			}
		}
		function Sys$UI$DataView$_raiseSucceeded(request, result) {
			var args = new Sys.Net.WebRequestEventArgs(request ? request.get_executor() : null, null, result);
			this.onFetchSucceeded(args);
			Sys.Observer.raiseEvent(this, "fetchSucceeded", args);
		}
		function Sys$UI$DataView$_ensureTemplate(template) {
			if (!Sys.UI.Template.isInstanceOfType(template)) {
				template = Sys.UI.DomElement._ensureGet(template, this.get_templateContext(), "itemTemplate");
				if (template) {
					template = new Sys.UI.Template(template);
				}
			}
			return template;
		}
		function Sys$UI$DataView$_setTemplate(value) {
			if (this._dvTemplate) {
				throw Error.invalidOperation(Sys.UI.TemplatesRes.templateAlreadyDefined);
			}
			this._dvTemplate = value;
		}
		function Sys$UI$DataView$_getTemplate() {
			if (this._dvTemplate) return this._dvTemplate;
			var template = this.get_itemTemplate();
			if (!template) {
				var element = this.get_element();
				if (Sys.UI.Template._isTemplate(element)) {
					this._dvTemplate = template = new Sys.UI.Template(element);
				}
			}
			else if (!Sys.UI.Template.isInstanceOfType(template)) {
				template = Sys.UI.DomElement._ensureGet(template, this.get_templateContext(), "itemTemplate");
				var e = this.get_element();
				if ((e !== template) && this._elementContains(e, template, true)) {
					throw Error.invalidOperation(Sys.UI.TemplatesRes.misplacedTemplate);
				}
				this._dvTemplate = template = new Sys.UI.Template(template);
			}
			else {
				if (this._elementContains(this.get_element(), template.get_element(), true)) {
					throw Error.invalidOperation(Sys.UI.TemplatesRes.misplacedTemplate);
				}
			}
			return template;
		}
		function Sys$UI$DataView$_loadData(value) {
			this._swapData(this._data, value);
			this._data = value;
			this._setData = true;
			this._stale = false;
			this._dirty = true;
			if (this._isActive()) {
				if (this.get_isLinkPending()) {
					this.link();
				}
				else {
					this.refresh();
				}
				this.raisePropertyChanged("data");
			}
			else {
				this._changed = true;
			}
		}
		function Sys$UI$DataView$_resetSelectedIndex() {
			var data = this.get_viewData(), initialSelectedIndex = this.get_initialSelectedIndex(),
			selectedIndex = this.get_selectedIndex();
			if (!(data instanceof Array) || (initialSelectedIndex >= data.length)) {
				if (selectedIndex !== -1) {
					this.set_selectedIndex(-1);
					return;
				}
			}
			else if (selectedIndex !== initialSelectedIndex) {
				this.set_selectedIndex(initialSelectedIndex);
				return;
			}
			this._currentData = this.get_selectedData();
			this._raiseSelectedData();
		}
		function Sys$UI$DataView$_initializeResults(start, count) {
			for (var i = start || 0, len = count ? (start + count) : this._contexts.length; i < len; i++) {
				var ctx = this._contexts[i];
				if (ctx) ctx.initializeComponents();
			}
		}
		function Sys$UI$DataView$_isActive() {
			return (this.get_isInitialized() && !this.get_isUpdating());
		}
		function Sys$UI$DataView$_raiseCommand(args) {
			this.onCommand(args);
			Sys.Observer.raiseEvent(this, "command", args);
		}
		function Sys$UI$DataView$_raiseItem(type, args) {
			this['onItem' + type](args);
			Sys.Observer.raiseEvent(this, "item" + type, args);
		}
		function Sys$UI$DataView$abortFetch() {
			/// <summary locid="M:J#Sys.UI.DataView.abortFetch" />
			if (this._request) {
				this._request.get_executor().abort();
				this._request = null;
			}
			if (this._fetching) {
				this._fetching = false;
				this._raiseChanged("isFetching");
			}
		}
		function Sys$UI$DataView$onBubbleEvent(source, args) {
			/// <summary locid="M:J#Sys.UI.DataView.onBubbleEvent" />
			/// <param name="source"></param>
			/// <param name="args" type="Sys.EventArgs"></param>
			/// <returns type="Boolean"></returns>
			if (Sys.CommandEventArgs.isInstanceOfType(args)) {
				this._raiseCommand(args);
				if (args.get_cancel()) {
					return true;
				}
				else {
					var name = args.get_commandName();
					if (name && (name.toLowerCase() === "select")) {
						var index = this._findContextIndex(source);
						if (index !== -1) {
							this.set_selectedIndex(index);
							return true;
						}
					}
				}
			}
			return false;
		}
		function Sys$UI$DataView$onRendering(args) {
			/// <summary locid="M:J#Sys.UI.DataView.onRendering" />
			/// <param name="args" type="Sys.Data.DataEventArgs"></param>
		}
		function Sys$UI$DataView$onFetchFailed(args) {
			/// <summary locid="M:J#Sys.UI.DataView.onFetchFailed" />
			/// <param name="args" type="Sys.Net.WebRequestEventArgs"></param>
		}
		function Sys$UI$DataView$onFetchSucceeded(args) {
			/// <summary locid="M:J#Sys.UI.DataView.onFetchSucceeded" />
			/// <param name="args" type="Sys.Net.WebRequestEventArgs"></param>
		}
		function Sys$UI$DataView$_doAutoFetch() {
			var e;
			try {
				if (this._dataProvider || this._provider) {
					this.fetchData();
					this._stale = false;
				}
			}
			catch (e) {
				this._raiseFailed(null, null);
			}
		}
		function Sys$UI$DataView$_findContextIndex(source) {
			var containers = this._containers;
			if (source && containers) {
				var results = this.get_contexts();
				if (results) {
					var element = Sys.UI.DomElement._ensureGet(source, this.get_templateContext(), "source");
					if (element) {
						var parent = element.parentNode, dvElement = this.get_element(), cindex = -1;
						while (parent && ((cindex = Sys._indexOf(containers, parent)) < 0) && (parent !== dvElement)) {
							element = parent;
							parent = parent.parentNode;
						}
						if (cindex > -1) {
							var container = containers[cindex];
							for (var i = 0, l = results.length; i < l; i++) {
								var result = results[i];
								if ((result.containerElement === container) && (Sys._indexOf(result.nodes, element) > -1)) {
									return i;
								}
							}
						}
					}
				}
			}
			return -1;
		}
		function Sys$UI$DataView$findContext(source) {
			/// <summary locid="M:J#Sys.UI.DataView.findContext" />
			/// <param name="source"></param>
			/// <returns type="Sys.UI.TemplateContext" mayBeNull="true"></returns>
			var index = this._findContextIndex(source);
			return (index !== -1) ? this.get_contexts()[index] : null;
		}
		function Sys$UI$DataView$_clearContainer(container, placeholder, startNode, endNode) {
			var count = placeholder ? placeholder.__msajaxphcount : -1;
			if ((count > -1) && placeholder) placeholder.__msajaxphcount = 0;
			if (count < 0) {
				if (placeholder) {
					container.removeChild(placeholder);
				}
				if (!startNode) {
					Sys.Application.disposeElement(container, true);
				}
				var cleared = false;
				if (!startNode) {
					try {
						container.innerHTML = "";
						cleared = true;
					}
					catch (err) { }
				}
				if (!cleared) {
					var child = startNode || container.firstChild, nextChild;
					while (child) {
						nextChild = child === endNode ? null : child.nextSibling;
						Sys.Application.disposeElement(child, false);
						container.removeChild(child);
						child = nextChild;
					}
				}
				if (placeholder) {
					container.appendChild(placeholder);
				}
			}
			else if (count > 0) {
				var i, l, start, children = container.childNodes;
				for (i = 0, l = children.length; i < l; i++) {
					if (children[i] === placeholder) {
						break;
					}
				}
				start = i - count;
				for (i = 0; i < count; i++) {
					var element = children[start];
					Sys.Application.disposeElement(element, false);
					container.removeChild(element);
				}
			}
		}
		function Sys$UI$DataView$_clearContainers(placeholders, start, count) {
			var i, len;
			for (i = 0, len = placeholders.length; i < len; i++) {
				var ph = placeholders[i],
				container = ph ? ph.parentNode : this.get_element();
				this._clearContainer(container, ph);
			}
			for (i = start || 0, len = count ? (start + count) : this._contexts.length; i < len; i++) {
				var ctx = this._contexts[i];
				ctx.nodes = null;
				ctx.dispose();
			}
		}
		function Sys$UI$DataView$_isAlone(container, ph) {
			var childNodes = container.childNodes;
			if (childNodes.length === 1) return true;
			var node = container.firstChild, notWhitespace = /\S/;
			while (node) {
				if (node !== ph) {
					var type = node.nodeType;
					if (type === 3) {
						if (notWhitespace.test(node.nodeValue)) return false;
					}
					else if (type !== 8) {
						return false;
					}
				}
				node = node.nextSibling;
			}
			return true;
		}
		function Sys$UI$DataView$_generatesContext() {
			return true;
		}
		function Sys$UI$DataView$refresh(start, count) {
			/// <summary locid="M:J#Sys.UI.DataView.refresh" />
			if (!this._setData) return;
			var collectionChange = this._changing;
			this._changing = false;
			var data = this.get_data(),
				pctx = this.get_templateContext(),
				renderArgs = new Sys.Data.DataEventArgs(data);
			renderArgs._itemTemplate = this._getTemplate();
			renderArgs._placeholder = Sys.UI.DomElement._ensureGet(this.get_itemPlaceholder(), pctx, "itemPlaceholder");
			this.onRendering(renderArgs);
			Sys.Observer.raiseEvent(this, "rendering", renderArgs);
			if (renderArgs.get_cancel()) return;
			data = renderArgs.get_data();
			this._viewData = data;

			var template = this._ensureTemplate(renderArgs._itemTemplate);
			this._dirty = false;
			var ph = Sys.UI.DomElement._ensureGet(renderArgs._placeholder, pctx, "itemPlaceholder"),
				element = this.get_element(),
				result, itemTemplate, args,
				contentTemplate = this._contentTemplate;
			if (this._placeholders && arguments.length === 0) {
				this._clearContainers(this._placeholders);
			}
			var list = data;
			var len, i;
			if ((data === null) || (typeof (data) === "undefined")) {
				i = 0;
				len = 0;
			}
			else if (!(data instanceof Array)) {
				list = [data];
				i = 0;
				len = 1;
			}
			else {
				i = start || 0;
				len = count ? (start + count) : data.length;
			}
			function clearAndShow() {
				if (!this._cleared) {
					if (Sys.UI.Template._isTemplate(element)) {
						var selfTemplate = new Sys.UI.Template(element);
						selfTemplate._ensureCompiled();
						selfTemplate.dispose();
						Sys.UI.DomElement.removeCssClass(element, "sys-template");
					}
					this._clearContainer(element, null);
					element.__msajaxphcount = -1;
					this._cleared = true;
				}
			}
			if (!len && template && template.get_element() === element) {
				clearAndShow.call(this);
			}
			var currentPh, lastPh, placeholders, container, containers, optionsChanged, insertBefore;
			if (arguments.length === 0) {
				this._placeholders = placeholders = [];
				this._containers = containers = [];
				this._contexts = new Array(len);
			}
			else {
				placeholders = this._placeholders;
				containers = this._containers;
				var nextContext = this._contexts[start + count];
				if (nextContext && nextContext.nodes) {
					insertBefore = nextContext.nodes[0];
				}
			}
			for (; i < len; i++) {
				var item = list[i];
				args = new Sys.UI.DataViewItemEventArgs(item);
				args._itemTemplate = template;
				args._placeholder = ph;
				this._raiseItem("Rendering", args);
				itemTemplate = this._ensureTemplate(args._itemTemplate);
				currentPh = Sys.UI.DomElement._ensureGet(args._placeholder, pctx, "itemPlaceholder");
				currentPh = currentPh ? (currentPh.__msajaxphoption || currentPh) : null;
				if (currentPh !== lastPh) {
					container = currentPh ? currentPh.parentNode : element;
					if (Sys._indexOf(placeholders, currentPh) < 0) {
						if (currentPh) {
							if (/^option$/i.test(currentPh.tagName) && /select/i.test(container.tagName)) {
								var newPh = document.createElement('_hiddenPlaceholder');
								container.replaceChild(newPh, currentPh);
								currentPh.__msajaxphoption = newPh;
								newPh.appendChild(currentPh);
								currentPh = newPh;
							}
							currentPh.style.display = 'none';
							var phcount = currentPh.__msajaxphcount;
							if (typeof (phcount) === "undefined" && this._isAlone(container, currentPh)) {
								currentPh.__msajaxphcount = -1;
								this._clearContainer(container, currentPh);
							}
						}
						else {
							clearAndShow.call(this);
						}
						placeholders.push(currentPh);
						if (Sys._indexOf(containers, container) < 0) {
							containers.push(container);
							if (/^select$/i.test(container.tagName)) {
								optionsChanged = optionsChanged || [];
								optionsChanged.push(container);
							}
						}
					}
				}
				lastPh = currentPh;
				if (itemTemplate) {
					result = itemTemplate.instantiateIn(container, data, item, i, currentPh || insertBefore, pctx, contentTemplate);
				}
				else {
					result = merge(new Sys.UI.TemplateContext(), {
						nodes: [],
						dataItem: item,
						data: data,
						index: i,
						parentContext: pctx
					});
				}
				args._ctx = result;
				this._contexts[i] = result;
				this._raiseItem("Rendered", result);
				if (itemTemplate && currentPh) {
					var count = currentPh.__msajaxphcount || 0;
					if (count > -1) {
						currentPh.__msajaxphcount = count + result.nodes.length;
					}
				}
			}
			if (optionsChanged) {
				for (i = 0; i < optionsChanged.length; i++) {
					Sys.Observer.raiseEvent(optionsChanged[i], "optionsChanged", Sys.EventArgs.Empty);
				}
			}

			if (!collectionChange) {
				if (!this._rendered && this.get_selectedIndex() > -1) {
					this._applySelectedIndex(this.get_selectedIndex(), true);
				}
				else {
					this._resetSelectedIndex();
				}
			}
			this._rendered = true;

			var selectedClass = this.get_selectedItemClass();
			if (selectedClass) {
				var selectedIndex = this.get_selectedIndex();
				if (selectedIndex !== -1) {
					this._addRemoveCssClass(selectedIndex, selectedClass, Sys.UI.DomElement.addCssClass);
				}
			}
			this.raisePropertyChanged("viewData");
			Sys.Observer.raiseEvent(this, "rendered", renderArgs);
			this._initializeResults(start, count);
		}
		function Sys$UI$DataView$_swapData(oldData, newData) {
			if (oldData) {
				switch (this._eventType) {
					case 1:
						oldData.remove_collectionChanged(this._changedHandler);
						break;
					case 2:
						Sys.Observer.removeCollectionChanged(oldData, this._changedHandler);
						break;
				}
			}
			this._eventType = 0;
			if (newData) {
				if (!this._changedHandler) {
					this._changedHandler = Function.createDelegate(this, this._collectionChanged);
				}
				if (typeof (newData.add_collectionChanged) === "function") {
					newData.add_collectionChanged(this._changedHandler);
					this._eventType = 1;
				}
				else if (newData instanceof Array) {
					Sys.Observer.addCollectionChanged(newData, this._changedHandler);
					this._eventType = 2;
				}
			}
		}
		function Sys$UI$DataView$_validateIndexInput(value) {
			var type = typeof (value);
			if (type === "string") {
				value = parseInt(value);
				if (isNaN(value)) {
					throw Error.argument(Sys.UI.TemplatesRes.invalidSelectedIndexValue);
				}
			}
			else if (type !== "number") {
				throw Error.argument(Sys.UI.TemplatesRes.invalidSelectedIndexValue);
			}
			return value;
		}
		function Sys$UI$DataView$dispose() {
			/// <summary locid="M:J#dispose" />
			if (this._placeholders && !Sys.Application.get_isDisposing()) {
				this._clearContainers(this._placeholders);
			}
			if (this._dvTemplate) {
				this._dvTemplate.dispose();
			}
			if (this.get_isFetching()) {
				this.abortFetch();
				this._fetching = false;
			}
			this._swapData(this._data, null);
			this._currentData = this._lastData = this._placeholders = this._containers = this._placeholder = this._contexts =
				this._autoFetch = this._parentContext = this._dvTemplate = this._request = this._dataProvider = this._wsp =
				this._wspClass = this._fetching = this._initialSelectedIndex = this._selectedIndex = this._provider = this._data =
				this._fetchParameters = this._query = this._contentTemplate = this._changed = this._dirty = this._eventType =
				this._stale = this._timeout = this._visibilityMode = this._changing = this._changedHandler = this._viewData =
				this._cleared = this._rendered = this._setData = null;
			Sys.UI.DataView.callBaseMethod(this, "dispose");
		}
		function Sys$UI$DataView$initialize() {
			/// <summary locid="M:J#initialize" />
			Sys.UI.DataView.callBaseMethod(this, "initialize");
			if (this.get_isLinkPending()) {
				if (this.hasOwnProperty("_data")) {
					this.link();
				}
			}
			else {
				this.refresh();
				this.updated();
			}
		}
		function Sys$UI$DataView$fetchData(succeededCallback, failedCallback, mergeOption, userContext) {
			/// <summary locid="M:J#fetchData" />
			/// <param name="succeededCallback" type="Function" mayBeNull="true" optional="true"></param>
			/// <param name="failedCallback" type="Function" mayBeNull="true" optional="true"></param>
			/// <param name="mergeOption" type="Sys.Data.MergeOption" mayBeNull="true" optional="true"></param>
			/// <param name="userContext" mayBeNull="true" optional="true"></param>
			/// <returns type="Sys.Net.WebRequest"></returns>
			this._stale = false;
			var request, _this = this;
			function onSuccess(data) {
				_this._loadData(data);
				_this._fetching = false;
				_this._request = null;
				_this._raiseChanged("isFetching");
				_this._raiseSucceeded(request, data);
				if (succeededCallback) {
					succeededCallback(data, userContext, "fetchData");
				}
			}
			function onFail(error) {
				_this._fetching = false;
				_this._request = null;
				_this._raiseChanged("isFetching");
				_this._raiseFailed(request, error);
				if (failedCallback) {
					failedCallback(error, userContext, "fetchData");
				}
			}
			if (this._fetching) {
				this.abortFetch();
			}
			var dataProvider = this._dataProvider,
			wsp = this._wsp,
			wspc = this._wspClass,
			query = this.get_fetchOperation(),
			parameters = this.get_fetchParameters() || null,
			httpVerb = this.get_httpVerb() || "POST",
			timeout = this.get_timeout() || 0;
			if (typeof (mergeOption) === "undefined") {
				mergeOption = null;
			}
			if (dataProvider) {
				request = dataProvider.fetchData(query, parameters, mergeOption, httpVerb, onSuccess, onFail, timeout, userContext);
			}
			else if (wsp) {
				var path = wsp.get_path();
				if (!path) {
					var type = Object.getType(wsp);
					if (type && (typeof (type.get_path) === "function")) {
						path = type.get_path();
					}
				}
				Type._checkDependency("MicrosoftAjaxWebServices.js", "Sys.UI.DataView.fetchData");
				request = Sys.UI.DataView._fetchWSP(null, path, query, parameters, httpVerb, onSuccess, onFail, timeout || wsp.get_timeout());
			}
			else {
				Type._checkDependency("MicrosoftAjaxWebServices.js", "Sys.UI.DataView.fetchData");
				if (wspc) {
					request = Sys.UI.DataView._fetchWSP(null, wspc.get_path(), query, parameters, httpVerb, onSuccess,
														 onFail, timeout || wspc.get_timeout());
				}
				else {
					request = Sys.UI.DataView._fetchWSP(null, this._provider, query, parameters, httpVerb, onSuccess, onFail, timeout);
				}
			}
			this._request = request;
			this._fetching = true;
			this._raiseChanged("isFetching");
			return request;
		}
		function Sys$UI$DataView$onCommand(args) {
			/// <summary locid="M:J#Sys.UI.DataView.onCommand" />
			/// <param name="args" type="Sys.CommandEventArgs"></param>
		}
		function Sys$UI$DataView$onItemRendering(args) {
			/// <summary locid="M:J#Sys.UI.DataView.onItemRendering" />
			/// <param name="args" type="Sys.UI.DataViewItemEventArgs"></param>
		}
		function Sys$UI$DataView$onItemRendered(args) {
			/// <summary locid="M:J#Sys.UI.DataView.onItemRendered" />
			/// <param name="args" type="Sys.UI.DataViewItemEventArgs"></param>
		}
		function Sys$UI$DataView$updated() {
			/// <summary locid="M:J#Sys.UI.DataView.updated" />
			if (this._stale && this.get_autoFetch()) {
				this._doAutoFetch();
			}
			if (this._dirty) {
				this.refresh();
			}
			if (this._changed) {
				this.raisePropertyChanged("");
				this._changed = false;
			}
		}
		function Sys$UI$DataView$link() {
			/// <summary locid="M:J#Sys.UI.DataView.link" />

			// Make sure that the control doesn't appear that it needs to re-render
			this._changed = false;
			this._dirty = false;

			// Would normally be set up by "refresh"
			this._contexts = [];
			this._placeholders = [null];
			this._containers = [this.get_element()];

			Sys.Application._linkContexts(this.get_templateContext(), this, this.get_data(), this.get_element(), null, this._contentTemplate);

			// Would normally be called at the end of "refresh"
			this._initializeResults();

			Sys.UI.DataView.callBaseMethod(this, "link");
		}
		Sys.UI.DataView.prototype = {
			_autoFetch: false,
			_fetching: false,
			_changed: false,
			_data: null,
			_dataProvider: null,
			_wsp: null,
			_wspClass: null,
			_dirty: false,
			_stale: true,
			_dvTemplate: null,
			_eventType: 0,
			_httpVerb: null,
			_initialSelectedIndex: -1,
			_fetchParameters: null,
			_parentContext: null,
			_placeholder: null,
			_query: null,
			_contexts: null,
			_selectedIndex: -1,
			_selectedItemClass: null,
			_template: null,
			_timeout: 0,
			_request: null,
			add_command: Sys$UI$DataView$add_command,
			remove_command: Sys$UI$DataView$remove_command,
			add_rendering: Sys$UI$DataView$add_rendering,
			remove_rendering: Sys$UI$DataView$remove_rendering,
			add_rendered: Sys$UI$DataView$add_rendered,
			remove_rendered: Sys$UI$DataView$remove_rendered,
			add_itemRendered: Sys$UI$DataView$add_itemRendered,
			remove_itemRendered: Sys$UI$DataView$remove_itemRendered,
			add_itemRendering: Sys$UI$DataView$add_itemRendering,
			remove_itemRendering: Sys$UI$DataView$remove_itemRendering,
			add_fetchFailed: Sys$UI$DataView$add_fetchFailed,
			remove_fetchFailed: Sys$UI$DataView$remove_fetchFailed,
			add_fetchSucceeded: Sys$UI$DataView$add_fetchSucceeded,
			remove_fetchSucceeded: Sys$UI$DataView$remove_fetchSucceeded,
			get_viewData: Sys$UI$DataView$get_viewData,
			get_data: Sys$UI$DataView$get_data,
			set_data: Sys$UI$DataView$set_data,
			get_dataProvider: Sys$UI$DataView$get_dataProvider,
			set_dataProvider: Sys$UI$DataView$set_dataProvider,
			get_autoFetch: Sys$UI$DataView$get_autoFetch,
			set_autoFetch: Sys$UI$DataView$set_autoFetch,
			get_isFetching: Sys$UI$DataView$get_isFetching,
			get_httpVerb: Sys$UI$DataView$get_httpVerb,
			set_httpVerb: Sys$UI$DataView$set_httpVerb,
			get_contexts: Sys$UI$DataView$get_contexts,
			get_fetchParameters: Sys$UI$DataView$get_fetchParameters,
			set_fetchParameters: Sys$UI$DataView$set_fetchParameters,
			get_selectedData: Sys$UI$DataView$get_selectedData,
			get_selectedIndex: Sys$UI$DataView$get_selectedIndex,
			set_selectedIndex: Sys$UI$DataView$set_selectedIndex,
			get_initialSelectedIndex: Sys$UI$DataView$get_initialSelectedIndex,
			set_initialSelectedIndex: Sys$UI$DataView$set_initialSelectedIndex,
			get_selectedItemClass: Sys$UI$DataView$get_selectedItemClass,
			set_selectedItemClass: Sys$UI$DataView$set_selectedItemClass,
			get_timeout: Sys$UI$DataView$get_timeout,
			set_timeout: Sys$UI$DataView$set_timeout,
			get_fetchOperation: Sys$UI$DataView$get_fetchOperation,
			set_fetchOperation: Sys$UI$DataView$set_fetchOperation,
			get_itemPlaceholder: Sys$UI$DataView$get_itemPlaceholder,
			set_itemPlaceholder: Sys$UI$DataView$set_itemPlaceholder,
			get_templateContext: Sys$UI$DataView$get_templateContext,
			set_templateContext: Sys$UI$DataView$set_templateContext,
			get_itemTemplate: Sys$UI$DataView$get_itemTemplate,
			set_itemTemplate: Sys$UI$DataView$set_itemTemplate,
			get_useOptimalUpdates: Sys$UI$DataView$get_useOptimalUpdates,
			set_useOptimalUpdates: Sys$UI$DataView$set_useOptimalUpdates,
			_applySelectedIndex: Sys$UI$DataView$_applySelectedIndex,
			_addRemoveCssClass: Sys$UI$DataView$_addRemoveCssClass,
			_collectionChanged: Sys$UI$DataView$_collectionChanged,
			_elementContains: Sys$UI$DataView$_elementContains,
			_raiseChanged: Sys$UI$DataView$_raiseChanged,
			_raiseFailed: Sys$UI$DataView$_raiseFailed,
			_raiseSelectedData: Sys$UI$DataView$_raiseSelectedData,
			_raiseSucceeded: Sys$UI$DataView$_raiseSucceeded,
			_ensureTemplate: Sys$UI$DataView$_ensureTemplate,
			_setTemplate: Sys$UI$DataView$_setTemplate,
			_getTemplate: Sys$UI$DataView$_getTemplate,
			_loadData: Sys$UI$DataView$_loadData,
			_resetSelectedIndex: Sys$UI$DataView$_resetSelectedIndex,
			_initializeResults: Sys$UI$DataView$_initializeResults,
			_isActive: Sys$UI$DataView$_isActive,
			_raiseCommand: Sys$UI$DataView$_raiseCommand,
			_raiseItem: Sys$UI$DataView$_raiseItem,
			abortFetch: Sys$UI$DataView$abortFetch,
			onBubbleEvent: Sys$UI$DataView$onBubbleEvent,
			onRendering: Sys$UI$DataView$onRendering,
			onFetchFailed: Sys$UI$DataView$onFetchFailed,
			onFetchSucceeded: Sys$UI$DataView$onFetchSucceeded,
			_doAutoFetch: Sys$UI$DataView$_doAutoFetch,
			_findContextIndex: Sys$UI$DataView$_findContextIndex,
			findContext: Sys$UI$DataView$findContext,
			_clearContainer: Sys$UI$DataView$_clearContainer,
			_clearContainers: Sys$UI$DataView$_clearContainers,
			_isAlone: Sys$UI$DataView$_isAlone,
			_generatesContext: Sys$UI$DataView$_generatesContext,
			refresh: Sys$UI$DataView$refresh,
			_swapData: Sys$UI$DataView$_swapData,
			_validateIndexInput: Sys$UI$DataView$_validateIndexInput,
			dispose: Sys$UI$DataView$dispose,
			initialize: Sys$UI$DataView$initialize,
			fetchData: Sys$UI$DataView$fetchData,
			onCommand: Sys$UI$DataView$onCommand,
			onItemRendering: Sys$UI$DataView$onItemRendering,
			onItemRendered: Sys$UI$DataView$onItemRendered,
			updated: Sys$UI$DataView$updated,
			link: Sys$UI$DataView$link
		}
		Sys.UI.DataView.registerClass("Sys.UI.DataView", Sys.UI.Control, Sys.UI.ITemplateContextConsumer, Sys.UI.IContentTemplateConsumer);
		Sys.registerComponent(Sys.UI.DataView);

		Sys.UI.DataView._fetchWSP = function Sys$UI$DataView$_fetchWSP(dataContext, uri, operation, parameters, httpVerb, succeededCallback, failedCallback, timeout, context) {
			if (!uri) {
				throw Error.invalidOperation(Sys.UI.TemplatesRes.requiredUri);
			}
			return Sys.Net.WebServiceProxy.invoke(
		uri, operation,
		httpVerb === "GET", parameters, succeededCallback,
		failedCallback, context, timeout);
		}
		Sys.UI.DataViewItemEventArgs = function Sys$UI$DataViewItemEventArgs(dataItem, itemContext) {
			/// <summary locid="M:J#Sys.UI.DataViewItemEventArgs.#ctor" />
			/// <param name="dataItem"></param>
			/// <param name="itemContext" type="Sys.UI.TemplateContext" mayBeNull="true" optional="true"></param>
			Sys.UI.DataViewItemEventArgs.initializeBase(this);
			this._ctx = itemContext;
			this._data = dataItem || null;
		}

		function Sys$UI$DataViewItemEventArgs$get_dataItem() {
			/// <value locid="P:J#Sys.UI.DataViewItemEventArgs.dataItem"></value>
			return this._data;
		}
		function Sys$UI$DataViewItemEventArgs$get_itemContext() {
			/// <value type="Sys.UI.TemplateContext" locid="P:J#Sys.UI.DataViewItemEventArgs.itemContext"></value>
			return this._ctx || null;
		}
		function Sys$UI$DataViewItemEventArgs$get_itemPlaceholder() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataViewItemEventArgs.itemPlaceholder"></value>
			return this._placeholder || null;
		}
		function Sys$UI$DataViewItemEventArgs$set_itemPlaceholder(value) {
			this._placeholder = value;
		}
		function Sys$UI$DataViewItemEventArgs$get_itemTemplate() {
			/// <value mayBeNull="true" locid="P:J#Sys.UI.DataViewItemEventArgs.itemTemplate"></value>
			return this._itemTemplate || null;
		}
		function Sys$UI$DataViewItemEventArgs$set_itemTemplate(value) {
			this._itemTemplate = value;
		}
		Sys.UI.DataViewItemEventArgs.prototype = {
			get_dataItem: Sys$UI$DataViewItemEventArgs$get_dataItem,
			get_itemContext: Sys$UI$DataViewItemEventArgs$get_itemContext,
			get_itemPlaceholder: Sys$UI$DataViewItemEventArgs$get_itemPlaceholder,
			set_itemPlaceholder: Sys$UI$DataViewItemEventArgs$set_itemPlaceholder,
			get_itemTemplate: Sys$UI$DataViewItemEventArgs$get_itemTemplate,
			set_itemTemplate: Sys$UI$DataViewItemEventArgs$set_itemTemplate
		}
		Sys.UI.DataViewItemEventArgs.registerClass("Sys.UI.DataViewItemEventArgs", Sys.EventArgs);
	}

	if (window.Sys && Sys.loader) {
		Sys.loader.registerScript("Templates", null, execute);
	}
	else {
		execute();
	}

})();

Type.registerNamespace('Sys.UI');

Sys.UI.TemplatesRes={
'commonNotAfterInit':'{0} \'{1}\' cannot be set after initialize.',
'unresolvedReference':'Sys.Binding could not find an element or component with the selector \"{0}\".',
'stringOrBoolean':'Value must be the string \"true\", \"false\", or a Boolean.',
'elementNotFound':'An element with id \'{0}\' could not be found.',
'updateBeforeInit':'Update cannot be called before initialize.',
'invalidAttributeName':'Invalid attribute name \'{0}\'. Declared attribute names must be in lowercase.',
'invalidFunctionName':'\'{0}\' must be of type Function or the name of a function as a String.',
'invalidDataProviderType':'Value must be a service URI, an instance of Sys.Net.WebServiceProxy, or class that implements Sys.Data.IDataProvider.',
'requiredUri':'A serviceUri must be set prior to calling fetchData.',
'invalidAttach':'Invalid attribute \'{0}\', the type \'{1}\' is not a registered namespace.',
'cannotActivate':'Could not activate element with id \'{0}\', the element could not be found.',
'misplacedTemplate':'DataView item template must not be a child element of the DataView.',
'templateAlreadyDefined': 'DataView template is already defined.',
'functionNotFound':'A function with the name \'{0}\' could not be found.',
'bindingPropertyNotSet':'Binding \'{0}\' must be set prior to initialize.',
'invalidSelectedIndexValue':'Value must be a Number or a String that can be converted to a Number.',
'mustSetInputElementsExplicitly':'Input elements \'type\' and \'name\' attributes must be explicitly set.',
'invalidTypeNamespace':'Invalid type namespace declaration, \'{0}\' is not a valid type.',
'cannotFindMarkupExtension':'A markup extension with the name \'{0}\' could not be found.',
'invalidSysContentTemplate': 'The sys:content-template attribute must be used on or within an control that implements Sys.UI.IContentTemplateConsumer.'
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,