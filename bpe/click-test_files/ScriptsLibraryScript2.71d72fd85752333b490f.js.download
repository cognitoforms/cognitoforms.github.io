(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ScriptsLibraryScript2"],{

/***/ "../../../Cognito.Services/Scripts/library/expression-builder.js":
/*!********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/library/expression-builder.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function (isInIframe) {
Cognito.ready("expression-builder", ["cognito-select-input", "entryview-script"], function expressionBuilderInit($) {
	// Global objects
	var module;
	// expressionBuilder
	var _eb = {};
	// Info: when trying to create ExpressionConditionSets outside of the Expression Builder, we don't want to run the ExoWeb validation rules and calculations due to
	// some rules altering the entities due to the condition sets not matching the (potentially) stale data in the expression builder.
	// We now track whether or not the expression builder is open and only run some of these validation rules when the expression builder is open.
	_eb.closed = true;
	var dialogNum = 0;
	var expressionBuilderDialog;
	var dialogSaveCallback;
	var dialogCancelCallback;
	var ExpressionConditionConditionType;
	var supportedOperations = {
		String: ["IsFilledOut", "IsNotFilledOut", "StringEquals", "StringDoesNotEqual", "Contains", "DoesNotContain", "EndsWith", "DoesNotEndWith", "StartsWith", "DoesNotStartWith", "StringInList", "StringNotInList"],
		Enum: ["EnumEquals", "EnumDoesNotEqual"],
		Number: ["IsFilledOut", "IsNotFilledOut", "NumberEquals", "NumberDoesNotEqual", "IsGreaterThan", "IsLessThan", "IsPositive", "IsPositiveOrZero", "IsNegative", "IsGreaterThanOrEqual", "IsLessThanOrEqual"],
		YesNo: ["EqualsYes", "EqualsNo", "BoolEquals", "BoolDoesNotEqual"],
		Date: ["IsFilledOut", "IsNotFilledOut", "DateTimeEquals", "DateTimeDoesNotEqual", "InTheFuture", "InThePast", "IsAfter", "IsBefore", "OnOrAfter", "OnOrBefore", "IsToday", "DayEquals", "DayOfWeekEquals", "MonthEquals", "YearEquals", "IsBetween"],
		Time: ["IsFilledOut", "IsNotFilledOut", "DateTimeEquals", "DateTimeDoesNotEqual", "IsAfter", "IsBefore", "OnOrAfter", "OnOrBefore", "HourEquals", "MinuteEquals"],
		DateTime: ["IsFilledOut", "IsNotFilledOut", "DateTimeEquals", "DateTimeDoesNotEqual", "InTheFuture", "InThePast", "IsAfter", "IsBefore", "OnOrAfter", "OnOrBefore", "IsToday", "DayEquals", "DayOfWeekEquals", "MonthEquals", "YearEquals", "HourEquals", "MinuteEquals"],
		File: ["FileIsUploaded", "FileIsNotUploaded", "NumberUploadedEquals"],
		RepeatingSection: ["ContainsItems", "DoesNotContainItems", "NumberOfSectionsEquals"],
		Signature: ["SignatureFilledOut", "SignatureNotFilledOut"],
		ChoiceCheckboxes: ["ChoiceCheckboxesContains", "ChoiceCheckboxesDoesNotContain", "ChoiceCheckboxesIsFilledOut", "ChoiceCheckboxesIsNotFilledOut"],
		FormEntry: ["FormEntryEquals", "FormEntryDoesNotEqual", "FormEntryInList", "FormEntryNotInList", "IsFilledOut", "IsNotFilledOut"],
		FormEntryList: ["FormEntryListContains", "FormEntryListDoesNotContain", "FormEntryListHasEntries", "FormEntryListHasNoEntries"]
	};

	var valueTypeMappings = {
		Text: [],
		Field: ["FormEntryEquals", "FormEntryListContains", "FormEntryListDoesNotContain", "FormEntryDoesNotEqual", "BoolEquals", "BoolDoesNotEqual"],
		Checkboxes: ["FormEntryInList", "StringInList", "FormentryNotInList", "StringNotInList"],
		Number: ["NumberEquals", "NumberDoesNotEqual", "IsGreaterThan", "IsLessThan", "IsGreaterThanOrEqual", "IsLessThanOrEqual", "IsPositive", "IsPositiveOrZero", "IsNegative", "DayEquals", "MonthEquals", "YearEquals", "HourEquals", "MinuteEquals", "NumberUploadedEquals", "NumberOfSectionsEquals"],
		DatePicker: ["DateTimeEquals", "DateTimeDoesNotEqual", "IsAfter", "IsBefore", "OnOrAfter", "OnOrBefore", "IsBetween"],
		TimePicker: ["DateTimeEquals", "DateTimeDoesNotEqual", "IsAfter", "IsBefore", "OnOrAfter", "OnOrBefore"],
		DateTimePicker: ["DateTimeEquals", "DateTimeDoesNotEqual", "IsAfter", "IsBefore"],
		Hidden: ["SignatureFilledOut", "SignatureNotFilledOut", "IsFilledOut", "IsNotFilledOut", "IsPositive", "IsPositiveOrZero", "IsNegative", "InTheFuture", "InThePast", "IsLeapYear", "IsToday", "ContainsItems", "DoesNotContainItems", "EqualsYes", "EqualsNo", "FileIsUploaded", "FileIsNotUploaded", "ChoiceCheckboxesIsFilledOut", "ChoiceCheckboxesIsNotFilledOut", "FormEntryListHasEntries", "FormEntryListHasNoEntries"]
	};

	var multiSelectSupportedOperations = {
		"ChoiceCheckboxesContains": "contains any of",
		"ChoiceCheckboxesDoesNotContain": "does not contain any of",
		"StringEquals": "is one of",
		"StringDoesNotEqual": "is not one of",
		"EnumEquals": "is one of",
		"EnumDoesNotEqual": "is not one of"
	}
	var multiSelectSupportedFields = ["Choice", "ChoiceCheckboxes", "Enum"];

	var defaultValueMap = {
		Text: "",
		Number: "0",
		DatePicker: new Date().localeFormat("MM/dd/yyyy"),
		DateTimePicker: new Date().localeFormat("MM/dd/yyyy"),
		TimePicker: Sys.CultureInfo.CurrentCulture.dateTimeFormat.LongTimePattern === "h:mm:ss tt" && Sys.CultureInfo.CurrentCulture.dateTimeFormat.AMDesignator === "AM" ? "8:00 AM" : "00:00",
		Hidden: null
	};

	var fieldComparisonExclusiveOperations = ["FormEntryInList", "StringInList", "FormEntryNotInList", "StringNotInList", "BoolEquals", "BoolDoesNotEqual"];
	var optionValidatedOperations = ["FormEntryEquals", "FormEntryDoesNotEqual", "FormEntryListContains", "FormEntryListDoesNotContain", "ChoiceCheckboxesContains", "ChoiceCheckboxesDoesNotContain", "StringEquals", "StringDoesNotEqual"];

	var valueComparisonExclusiveOperations = [];

	var trackingChanges;
	var validationTask = $.Deferred().resolve();

	function parseLookupOptionValue(index) {
		return index.get_entryId();
	}

	function getSupportedOperations(propType) {
		if (propType === 'Choice')
			propType = 'String';
		return supportedOperations[propType].filter(function (op) {
			return true;
		});
	}

	function doTypesMatch(left, right) {
		if (left === 'Choice')
			left = 'String';
		if (right === 'Choice')
			right = 'String';
		return left === right;
	}

	function removeDuplicateOptions(options) {
		return options.reduce(function (list, option) {
			if (!list.filter(function (o) { return o.value === option.value || (o.friendlyValue && o.friendlyValue === option.friendlyValue); }).length)
				list.push(option);
			return list;
		}, []);
	}

	function getLookupTokenKey(field) {
		var key = field.Id;
		if (key.indexOf("Form.") === 0)
			key = key.substr(5);
		else if (_eb.idScope)
			key = _eb.idScope + "." + key;
		return key;
	}


	function loadConditionLookupIndexes(condition) {
		var leftField = condition.get_leftHandField();
		var key = getLookupTokenKey(leftField);

		var tokenData = _eb.get_lookupTokenData()[key];
		Cognito.ready("expression-builder-load-entryset", "entryview", function () {
			Cognito.Forms.db.getEntrySet(tokenData.ViewId, "", tokenData.Token, null, null, function (indexes) {
				// slice to make it a normal array
				tokenData.Indexes = indexes.slice();
				// Don't set the choice options if the left field is different now
				if (condition.get_leftHandField() === leftField) {
					condition.set_choiceOptions(removeDuplicateOptions(tokenData.Indexes.map(function (i) { return { friendlyValue: i.get_Summary(), value: parseLookupOptionValue(i) }; })));
					condition.set_choiceOptionsLoaded(true);
				}
			});
		});
	}

	function valueTypeToDataType(valueType) {
		var valueType = (valueType ? valueType.get_Name() : "")
		if (valueType === "DatePicker")
			return "Date";
		else if (valueType === "TimePicker")
			return "Time";
		else
			return "Text";
	}

	function getAllConditions(conditionSet) {
		return Array.prototype.concat.apply([], conditionSet.get_ConditionSets().map(function (set) { return set.get_Conditions(); }));
	}

	function defineBuilderModel() {
		var name = "Cognito.ExpressionBuilder";
		context.model.meta.addType(name);

		$extend(name, function (Builder) {
			Builder.meta.addProperty({ name: "viewModel", type: Cognito.ExpressionConditionSet });
			Builder.meta.addProperty({ name: "label", type: String });
			Builder.meta.addProperty({ name: "expression", type: String })

				// Change event for expression to show validation errors in advanced editor
				.addChanged(function (sender, args) {
					// Hide validation while validating
					$('.c-expression-builder-advanced .c-validation').hide();
					validationTask = $.Deferred();
					var options = sender.options;

					// Validate advanced editor expression
					Cognito.validatePropertyExpression(options.rootType, options.scope, options.property, options.label, options.fieldType, options.fieldSubType, options.format, _eb.get_expression(), options.localization, function (validationResults) {
						// Show validation error if exists
						var exception = Cognito.deserialize(Cognito.ValidationResult, validationResults);
						if (exception && exception.get_ExceptionMessage()) {

							var message = exception.get_ExceptionMessage();
							if (exception.get_ExceptionPosition() !== -1)
								message += " <a class=\"c-validation-message\" data-position=\"" + exception.get_ExceptionPosition() + "\">at character " + exception.get_ExceptionPosition() + "</a>";

							_eb.set_expressionValidation(message);

							// Delay showing the validation message
							$('.c-expression-builder-advanced .c-validation').show().toggleClass("validation-warning", exception.get_IsWarning());
							validationTask.resolve();
						}
						else if (Cognito.Forms.model.views && /\b ago| from now|DateTime\.Today|DateTime\.UtcNow|DateTime\.Now\b/.test(args.newValue)) {
							//Relative dates on the entries page should show validation error if expression cannot be viewed on the basic logic builder
							Cognito.createExpressionBuilderViewModel({ rootType: _eb.rootType, scope: _eb.scope, expression: _eb.get_expression() }).then(function (builder) {
								if (builder.viewModel == null) {
									//relative date expression check, throw error
									_eb.set_expressionValidation("This filter is not supported. Please use the Basic Editor to create filters with relative dates.");
									$('.c-expression-builder-advanced .c-validation').show();
								}
								validationTask.resolve();
							});
						}
						else {
							_eb.set_expressionValidation("");
							if (exception && exception.get_FormattedValue() && exception.get_FormattedValue() != _eb.expression)
								_eb.set_expression(exception.get_FormattedValue());
							$('.c-expression-builder-advanced .c-validation').show();
							validationTask.resolve();
						}
					});
				});

			Builder.meta.addProperty({ name: "expressionValidation", type: String });
			Builder.meta.addProperty({ name: "usePropertyFieldId", type: Boolean });
			Builder.meta.addProperty({ name: "allowSameFieldComparison", type: Boolean });
			Builder.meta.addProperty({ name: "isAdvanced", type: Boolean });
			Builder.meta.addProperty({ name: "translationError", type: Boolean });
			// {name, type}
			Builder.meta.addProperty({ name: "leftHandFields", isList: true, type: Object }).defaultValue([]);
			// {name, type}
			Builder.meta.addProperty({ name: "rightHandFields", isList: true, type: Object }).defaultValue([]);
			// fieldId => {ViewId, Token}
			Builder.meta.addProperty({ name: "lookupTokenData", type: Object });
			Builder.meta.addRule({
				execute: function (sender, args) {
					if (sender.get_viewModel() && Object.keys(sender.get_lookupTokenData()).length) {
						// ensure any lookup fields selected have options loaded
						Array.prototype.concat.apply([], sender.get_viewModel().get_ConditionSets().map(function (set) { return set.get_Conditions(); })).forEach(function (cond) {
							if (cond.get_PropertyType().get_Name().indexOf("FormEntry") === 0) {
								loadConditionLookupIndexes(cond);
							}
						});
					}
				},
				onChangeOf: ["viewModel", "lookupTokenData"]
			});
		});

		$extend("Cognito.ExpressionConditionOperation", function ExtendExpressionConditionOperation(ConditionOperation) {
			ConditionOperation.meta.addProperty({ name: "multiValueName", type: String }).calculated({
				calculate: function () {
					return multiSelectSupportedOperations[this.get_Name()] || this.get_DisplayName();
				}
			});
		});

		$extend("Cognito.ExpressionCondition", function ExtendExpressionCondition(Condition) {
			Condition.meta.addProperty({ name: "leftHandFields", isList: true, type: Object })
				.calculated({
					calculate: function () {
						return _eb.get_leftHandFields();
					}
				});

			var missingFieldConditionType = new ExoWeb.Model.ConditionType.Error("ExpressionBuilderMissingField", "A referenced field is no longer available.", []);

			Condition.meta.addProperty({ name: "singleValue", type: Cognito.ExpressionConditionValue })
				.calculated({
					calculate: function () {
						return this.get_Values()[0];
					},
					onChangeOf: ["Values"]
				});

			Condition.meta.addProperty({ name: "leftHandField", type: Object })
				.allowedValues("leftHandFields")
				.calculated({
					calculate: function $leftHandField() {
						var value = this.get_Property();
						var targetField = this.get_leftHandFields().filter(function (f) { return (_eb.get_usePropertyFieldId() ? f.Id : f.Name) === value; })[0];

						if (value && !targetField && !this.meta.getCondition(missingFieldConditionType))
							new ExoWeb.Model.Condition(missingFieldConditionType, "A referenced field is no longer available.", this, ["Values"], "client");

						return targetField || this.get_leftHandFields()[0] || null;
					},
					onChangeOf: ["Property", "leftHandFields"]
				})
				.addChanged(function (sender, args) {
					if (args.newValue && _eb.closed === false) {
						sender.meta.property("Property").value(sender, _eb.get_usePropertyFieldId() ? args.newValue.Id : args.newValue.Name, { calculated: true })
					}
				});

			Condition.$Property.addChanged(function (sender, args) {
				var c = sender.meta.getCondition(missingFieldConditionType);
				if (!args.calculated && c)
					c.condition.destroy();
			});

			new ExoWeb.Model.Rule.allowedValues(Condition, {
				property: Condition.$Property,
				source: "leftHandFields",
				ignoreValidation: true
			});


			// Calculate property type
			Condition.$PropertyType.calculated({
				calculate: function () {
					var leftHandField = this.get_leftHandField();
					if (leftHandField)
						return Cognito.getEnumWithName(Cognito.ExpressionConditionPropertyType, leftHandField.Type.Name);
					return null;
				},
				onChangeOf: ["Property"]
			});

			function getValueTypeByOperationName(opName) {
				for (var valueType in valueTypeMappings) {
					if (valueTypeMappings[valueType].indexOf(opName) !== -1)
						return Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, valueType);
				}
				return Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Text");
			}

			function filterFieldsByPropertyTypeAndOperation(propType, operation) {
				if (_eb.closed !== false)
					return [];
				var searchType = propType.get_Name();
				if (operation) {
					var valueType = getValueTypeByOperationName(operation.get_Name());

					if (searchType === "FormEntryList")
						searchType = "FormEntry";

					if (["StringInList", "StringNotInList"].indexOf(operation.get_Name()) !== -1)
						searchType = "ChoiceCheckboxes";
					else if (["FormEntryInList", "FormEntryNotInList"].indexOf(operation.get_Name()) !== -1)
						searchType = "FormEntryList";
					else if (valueType.get_Name() === "Text")
						searchType = "String";
					else if (valueType.get_Name() === "Number")
						searchType = "Number";
					else if (valueType && valueType.get_Name() !== "Hidden") {
						var valueOps = valueTypeMappings[valueType.get_Name()];

						function operationMatches(op) {
							// ensure the operation supports field comparison, and is relevant for the current ValueType
							return valueComparisonExclusiveOperations.indexOf(op) === -1 && valueOps.some(function (vop) { return vop === op; });
						}

						// If the current property type already supports the value type operations, don't search any further
						if (!getSupportedOperations(searchType).some(operationMatches)) {
							for (var type in supportedOperations) {
								if (getSupportedOperations(type).some(operationMatches)) {
									searchType = type;
								}
							}
						}
					}
				}

				return _eb.get_rightHandFields().filter(function (f) {
					return doTypesMatch(f.Type.Name, searchType);
				});
			}

			Condition.meta.addProperty({ name: "rightHandFields", isList: true, type: Object })
				.calculated({
					calculate: function $rightHandFields() {
						var left = this.get_leftHandField();
						return filterFieldsByPropertyTypeAndOperation(this.get_PropertyType(), this.get_Operation(), this)
							.filter(function (right) {
								return _eb.get_allowSameFieldComparison() || right.Id !== left.Id;
							});
					},
					onChangeOf: ["Property", "ValueType", "Operation"]
				});

			Condition.meta.addProperty({ name: "choiceOptionsLoaded", type: Boolean });
			Condition.meta.addProperty({ name: "choiceOptionsLoading", type: Boolean }).calculated({
				calculate: function () {
					return !this.get_choiceOptionsLoaded();
				},
				onChangeOf: ["choiceOptionsLoaded"]
			});

			Condition.meta.addProperty({ name: "choiceOptions", isList: true, type: Object })
				.addChanged(function (sender, args) {
					var currentValue = sender.get_Values()[0];
					if (!currentValue)
						return;

					// handle change in friendly value
					var selectedOption = args.newValue.filter(function (o) { return o.value === currentValue.get_Value(); })[0];
					if (selectedOption && selectedOption.friendlyValue) {
						currentValue.set_FriendlyValue(selectedOption.friendlyValue);
						sender.get_inputModel().set_value(selectedOption.friendlyValue);
					}
				});

			setupVueMultiSelectModel(Condition);

			Condition.meta.addProperty({ name: "allowedOperations", type: Cognito.ExpressionConditionOperation, isList: true })
				.calculated({
					calculate: function $allowedOperations() {
						if (_eb.closed !== false)
							return [];
						var sender = this;
						var validOperations = getSupportedOperations(this.get_PropertyType().get_Name());
						if (validOperations) {
							var left = this.get_leftHandField();
							return Cognito.ExpressionConditionOperation.get_All().filter(function (o) {
								var opName = o.get_Name();
								if (validOperations.indexOf(opName) !== -1) {
									var validFields = filterFieldsByPropertyTypeAndOperation(sender.get_PropertyType(), o).filter(function (right) { return _eb.get_allowSameFieldComparison() || right.Id !== left.Id; });
									// If there would be no fields to select for a fieldComparisonExclusiveOperation, do not show the operation
									if ((fieldComparisonExclusiveOperations.indexOf(opName) !== -1 && validFields.length === 0)
										|| (valueTypeMappings.Hidden.indexOf(opName) === -1 && left.ValidateChoices && sender.get_choiceOptionsLoaded() && sender.get_choiceOptions().length === 0 && validFields.length === 0)) {
										return false;
									}
									return true;
								}
								return false;
							});
						}
						return [];
					},
					onChangeOf: ["Property", "choiceOptions", "choiceOptionsLoaded"]
				}).addChanged(function (sender, args) {
					if (args.newValue.indexOf(sender.get_Operation()) === -1)
						sender.set_Operation(args.newValue[0]);
				});

			new ExoWeb.Model.Rule.allowedValues(Condition, {
				property: Condition.$Operation,
				source: "allowedOperations",
				ignoreValidation: true
			});

			Condition.meta.addProperty({ name: "inputModel", type: Cognito.SelectInput }).calculated({
				calculate: function () {
					var rhs = this.get_singleValue();
					return new Cognito.SelectInput({
						value: rhs ? rhs.get_Value() : null,
						dataType: valueTypeToDataType(this.get_ValueType())
					});
				}
			});

			// Default the Operation to the first one that applies to the selected Property
			Condition.meta.addRule({
				execute: function (sender, args) {
					if (args.oldValue !== null || !sender.get_Operation())
						sender.set_Operation(sender.get_allowedOperations()[0] || null);
				},
				onChangeOf: ["Property"]
			});

			Condition.meta.addRule({
				execute: function (sender, args) {
					var field = sender.get_leftHandField();
					var fieldComparisonExclusive = sender.get_Operation() && fieldComparisonExclusiveOperations.indexOf(sender.get_Operation().get_Name()) !== -1;
					if (!field || !sender.get_Operation() || fieldComparisonExclusive) {
						if (fieldComparisonExclusive)
							sender.set_choiceOptionsLoaded(true);

						sender.set_choiceOptions([]);
						return;
					}

					if (field.Type.Name.indexOf("FormEntry") === 0) {
						var tokenData = _eb.get_lookupTokenData()[getLookupTokenKey(field)];
						if (tokenData) {
							if (tokenData.Indexes) {
								sender.set_choiceOptionsLoaded(true);

								// When the operation changes and we already have options, don't recalculate
								if (args.property._name === 'Operation' && sender._choiceOptions.length === tokenData.Indexes.length)
									return;

								sender.set_choiceOptions(removeDuplicateOptions(tokenData.Indexes.map(function (i) { return { friendlyValue: i.get_Summary(), value: parseLookupOptionValue(i) }; })));
								return;
							}
							else {
								sender.set_choiceOptionsLoaded(false);
								loadConditionLookupIndexes(sender);
							}
						}
					}
					else
						sender.set_choiceOptionsLoaded(true);

					var options = (field.Choices || []).map(function (c) { return { value: c }; });

					// Filter out visible duplicates
					sender.set_choiceOptions(removeDuplicateOptions(options));
				},
				onChangeOf: ["leftHandField", "Operation"]
			});

			// Update combobox options when the field options change
			Condition.meta.addRule({
				execute: function $updateComboboxOptions(sender, args) {
					var options = sender.get_inputModel().get_options();
					options.beginUpdate();
					options.clear();
					options.addRange(sender.get_choiceOptions().map(function (o) {
						return new Cognito.SelectInputOption({ value: o.friendlyValue || o.value });
					}));
					options.addRange(sender.get_rightHandFields().map(function (f) {
						return new Cognito.SelectInputOption({
							display: f.Name,
							value: _eb.get_usePropertyFieldId() ? f.Id : f.Name
						});
					}));
					options.endUpdate();

					var rhs = sender.get_singleValue();
					if (rhs && rhs.get_IsFieldPath())
						sender.get_inputModel().set_selectedOption(options.filter(function (o) { return o.get_value() === rhs.get_Value(); })[0] || null);
				},
				onChangeOf: ["rightHandFields", "choiceOptions"],
				onInitExisting: true
			});

			// Update the data type of the combobox
			Condition.$ValueType.addChanged(function (sender, args) {
				sender.get_inputModel().set_dataType(valueTypeToDataType(args.newValue));
				if (args.newValue.get_Name() === "Hidden" || args.newValue.get_Name() === "None")
					sender.get_Values().clear();
			});

			// Update the ValueType when the Operation changes
			Condition.meta.addRule({
				execute: function (sender, args) {
					if (!args.newValue)
						return;

					var opName = args.newValue.get_Name();
					var propType = sender.get_PropertyType();
					if (valueTypeMappings.Hidden.indexOf(opName) !== -1) {
						sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Hidden"));
					}
					else if (propType == Cognito.getEnumWithName(Cognito.ExpressionConditionPropertyType, "Date") && valueTypeMappings.DatePicker.indexOf(opName) !== -1) {
						sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "DatePicker"));
					}
					else if (propType == Cognito.getEnumWithName(Cognito.ExpressionConditionPropertyType, "Time") && valueTypeMappings.TimePicker.indexOf(opName) !== -1) {
						sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "TimePicker"));
					}
					else if (valueTypeMappings.Number.indexOf(opName) !== -1) {
						sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Number"));
					}
					else if (propType == Cognito.getEnumWithName(Cognito.ExpressionConditionPropertyType, "DateTime") && valueTypeMappings.DateTimePicker.indexOf(opName) !== -1) {
						sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "DateTimePicker"));
					}
					else if (fieldComparisonExclusiveOperations.indexOf(opName) !== -1) {
						if (valueTypeMappings.Checkboxes.indexOf(opName) !== -1)
							sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Checkboxes"));
						else
							sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Field"));
					}
					else {
						sender.set_ValueType(Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Text"));
					}
				},
				onChangeOf: ["Operation"]
			});

			//26747: Allow input and don't show choice options on the right side of the CLB for single-select choices using substring operators
			Condition.meta.addRule({
				execute: function (sender, args) {
					if (!args.newValue || _eb.closed !== false)
 						return;

					var newOp = "";
					if (sender.get_Operation())
						newOp = sender.get_Operation().get_Name();

					var previousOp = "";
					if (args.property._name === 'Operation' && args.oldValue)
						previousOp = args.oldValue.get_Id();

					var substringOps = ["Contains", "DoesNotContain", "EndsWith", "DoesNotEndWith", "StartsWith", "DoesNotStartWith"];
					if (sender.get_leftHandField().Type.Id === "Choice" && substringOps.includes(newOp)) {
						sender.set_choiceOptions([]);
						sender.get_inputModel().set_allowInput(true);
					}
					// handles cases where user creates option then changes op to non-substring op
					else if (sender.get_leftHandField().Type.Id === "Choice" && substringOps.includes(previousOp)) {
						sender.get_inputModel().set_allowInput(false);
					}
				},
				onChangeOf: ["Operation", "leftHandField"]
			});

			Condition.$ValueType.addChanged(function (sender, args) {
				function setValue(val) {
					if (val !== undefined)
						sender.get_inputModel().set_value(val);
				}

				if (args.newValue && _eb.closed === false) {
					sender.get_inputModel().set_allowInput(true);
					var t = args.newValue.get_Name();
					setValue(defaultValueMap[t]);

					if (t === "Field" || t === "Checkboxes" || sender.get_leftHandField().ValidateChoices)
						sender.get_inputModel().set_allowInput(false);
				}
			});

			// Validate value after changes
			Condition.meta.addRule({
				execute: function $validateCondition(sender, args) {
					setTimeout(function () {
						if (_eb.closed !== false)
							return;
						// No validation for hidden value types or field comparisons
						if (sender.get_Values().every(function (v) { return v.get_IsFieldPath(); }) || sender.get_ValueType() === Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Hidden")) {
							if (sender.meta.getCondition(ExpressionConditionConditionType))
								sender.meta.getCondition(ExpressionConditionConditionType).condition.destroy();
							return;
						}

						Cognito.validateExpressionCondition(sender);
					});
				},
				onChangeOf: ["Values{Value}", "ValueType"]
			});

			Condition.meta.addRule({
				execute: function (sender, args) {
					var op = sender.get_Operation();
					if (!sender.get_Values().length && op && sender.get_rightHandFields().length && fieldComparisonExclusiveOperations.indexOf(op.get_Name()) !== -1) {
						sender.get_inputModel().set_selectedOption(sender.get_inputModel().get_options()[0]);
					}
				},
				onChangeOf: ["Operation", "rightHandFields"]
			});

			function isInvalidChoiceOption(model, value) {
				return shouldValidateChoices(model)
					&& !value.get_IsFieldPath()
					&& value.get_Value()
					&& !model.get_choiceOptions().some(function (o) { return o.value === value.get_Value(); });
			}

			function shouldValidateChoices(model) {
				return model.get_leftHandField().ValidateChoices
					&& model.get_Operation()
					&& optionValidatedOperations.indexOf(model.get_Operation().get_Name()) !== -1
					&& model.get_choiceOptions().length
			}

			Condition.meta.addProperty({ name: "forceValidation", type: Boolean });

			Condition.meta.conditionIf({
				assert: function $assertchoiceOptions(sender, args) {
					if (_eb.closed !== false)
						return false;
					if (sender.get_forceValidation() && shouldValidateChoices(sender) && sender.get_Values().length === 0)
						return true;

					// return an error if any of the right hand values do not match allowed choice options
					return sender.get_Values().some(function (v) {
						return isInvalidChoiceOption(sender, v);
					});
				},
				message: function () {
					var invalidOptions = this.get_Values().filter(function (v) {
						return isInvalidChoiceOption(this, v);
					}.bind(this)).map(function (v) {
						return v.get_Value();
					});
					var plural = invalidOptions.length > 1;
					return "The value" + (plural ? "s" : "") + " \"" + invalidOptions.join(", ") + "\" " + (plural ? "are" : "is") + " not valid for '" + this.get_leftHandField().Name + "'.";
				},
				properties: ["Values"],
				onChangeOf: ["forceValidation", "Values{Value}", "Operation", "choiceOptions"],
				onInitNew: false,
				onInitExisting: false
			});
		});

		function setupVueMultiSelectModel(Condition) {
			Condition.meta.addProperty({ name: "valueDataType", type: String }).calculated({
				calculate: function () {
					return valueTypeToDataType(this.get_ValueType());
				},
				onChangeOf: ["ValueType"]
			});

			Condition.meta.addProperty({ name: "hasFieldPathValue", type: Boolean }).calculated({
				calculate: function () {
					return this.get_Values().some(function (v) {
						return v.get_IsFieldPath();
					});
				},
				onChangeOf: ["Values{IsFieldPath}"]
			});

			Condition.meta.addProperty({ name: "useDatePicker", type: Boolean }).calculated({
				calculate: function () {
					return this.get_valueDataType() === "Date" && !this.get_hasFieldPathValue();
				},
				onChangeOf: ["valueDataType", "hasFieldPathValue"]
			});

			Condition.meta.addProperty({ name: "useTimePicker", type: Boolean }).calculated({
				calculate: function () {
					return this.get_valueDataType() === "Time" && !this.get_hasFieldPathValue();
				},
				onChangeOf: ["valueDataType", "hasFieldPathValue"]
			});

			Condition.meta.addProperty({ name: "dateTimeValue", type: String })
				.addChanged(function (sender, args) {
					// update vueValues with the dateTimeValue if user enters/picks a date
					var vueValues = sender.get_vueValues();
					vueValues.splice(0, vueValues.length, { value: args.newValue, label: args.newValue, dynamic: false });
					// for some reason splicing vueValues isn't triggering the change handler, so update values
					var values = sender.get_Values();
					values.splice(0, values.length, new Cognito.ExpressionConditionValue({ Value: args.newValue, FriendlyValue: args.newValue, IsFieldPath: false }));
				});

			Condition.meta.addProperty({ name: "vueValues", type: Array, isList: true }).addChanged(function (sender, args) {
				// update Condition.Values when vueValues change
				var values = sender.get_Values();
				values.beginUpdate();
				values.clear();
				values.addRange(args.newValue.filter(function (newValue) {
					return newValue !== undefined;
				}).map(function (v) {
					return new Cognito.ExpressionConditionValue({
						Value: v.value,
						IsFieldPath: !!v.dynamic
					});
				}));
				values.endUpdate();
			});

			Condition.meta.addProperty({ name: "vueOptions", type: Object, isList: true }).calculated({
				calculate: function () {
					return this.get_choiceOptions()
						.map(function (o) {
							return {
								value: o.value,
								label: o.friendlyValue || o.value,
								dynamic: false
							};
						})
						.concat(this.get_rightHandFields().map(function (f) {
							return {
								value: _eb.get_usePropertyFieldId() ? f.Id : f.Name,
								label: f.Name,
								dynamic: true
							};
						}));
				},
				onChangeOf: ["rightHandFields", "choiceOptions", "choiceOptionsLoaded"],
				onInitExisting: true
			});

			Condition.meta.addProperty({ name: "isBetween", type: Boolean }).calculated({
				calculate: function () {
					return this.get_Operation().get_Name() === 'IsBetween';
				},
				onChangeOf: ["Operation"],
				onInitExisting: true
			})

			Condition.meta.addProperty({ name: "multiple", type: Boolean }).calculated({
				calculate: function () {
					if (!this.get_PropertyType())
						return false;

					var propertyType = this.get_PropertyType().get_Name();
					var operationName = this.get_Operation().get_Name();

					if (multiSelectSupportedOperations[operationName] && multiSelectSupportedFields.includes(propertyType))
						return true;

					return false;

				},
				onChangeOf: ["PropertyType", "Operation"]
			});

			Condition.meta.addProperty({ name: "hasMultipleValues", type: Boolean }).calculated({
				calculate: function () {
					if (this.get_multiple() && this.get_Values().length > 1)
						return true;

					return false;
				},
				onChangeOf: ["Values", "multiple"]
			});

			Condition.meta.addRule({
				name: 'ClearValuesOnLeftFieldChange',
				execute: function (sender) {
					if (_eb.closed)
						return;
					setTimeout(function () {
						sender.get_Values().clear();
						initializeVueValues(sender);
					});
				},
				onChangeOf: ["Property"],
				onInitExisting: false,
				onInitNew: false
			});

			Condition.meta.addRule({
				name: 'ClearValuesOnValueTypeChange',
				execute: function (sender, args) {
					setTimeout(function () {
						if (_eb.closed)
							return;
						var defaultValue = defaultValueMap[sender.get_ValueType().get_Name()];
						// Coming from a non isbetween operator we will have 1 element in our Values array we want to clear that out and then add our new isbetween default values
						if (sender.get_isBetween() && sender.get_Values().length < 2) {
							sender.get_Values().clear();
							sender.get_Values().add(new Cognito.ExpressionConditionValue({ Value: "Yesterday" }));
							sender.get_Values().add(new Cognito.ExpressionConditionValue({ Value: "Tomorrow" }));
						}
						// Coming from an isbetween operator we want to reset our value to the default
						else if (defaultValue && !sender.get_isBetween()) {
							sender.get_Values().clear();
							sender.get_Values().add(new Cognito.ExpressionConditionValue({ Value: defaultValue }));
						}
						// Hidden valueTypes result in defaultValue being null also Text valueTypes result in defaultValue being an empty string
						else if (!defaultValue)
							sender.get_Values().clear();

						initializeVueValues(sender);

						if (!sender.get_inputModel().get_allowInput() && fieldComparisonExclusiveOperations.includes(sender.get_Operation().get_Name())) {
							var options = sender.get_vueOptions().filter(function (o) { return o.dynamic; });
							if (options.length) {
								sender.get_vueValues().push(options[0]);
								sender.get_Values().add(new Cognito.ExpressionConditionValue({ Value: options[0].value, IsFieldPath: true }));
							}
						}
					});
				},
				onChangeOf: ["ValueType", "isBetween"],
				onInitExisting: false,
				onInitNew: false
			});

			Condition.meta.addRule({
				name: 'InitConditionVueValues',
				execute: function (sender) {
					sender.get_Values().slice().forEach(function (v) {
						if (v.get_Value() === '' || v.get_Value() === null)
							sender.get_Values().remove(v);
					});
					initializeVueValues(sender);
				},
				onInitExisting: true,
				onInitNew: true
			});

			function initializeVueValues(condition) {
				var values = condition.get_vueValues();
				values.beginUpdate();
				values.splice.apply(values, [0, values.length].concat(condition.get_Values().map(function (value) {
					return {
						value: value.get_Value(),
						label: value.get_FriendlyValue() || value.get_Value(),
						dynamic: value.get_IsFieldPath()
					};
				})));
				values.endUpdate();
			}
		}
	}

	// Setup variables after types have loaded
	Cognito.modelReady(function () {
		module = Cognito.config.modules[0];

		defineBuilderModel();

		_eb = module.model.expressionBuilder = new Cognito.ExpressionBuilder();
		_eb.closed = true;

		ExpressionConditionConditionType = new ExoWeb.Model.ConditionType.Error("ExpressionCondition", "The condition value is invalid.", []);

		expressionBuilderDialog = $.fn.dialog({
			title: "Expression Builder",
			instance: "Cognito." + module.name.charAt(0).toUpperCase() + module.name.slice(1) + ".model.expressionBuilder",
			width: 1000,
			height: 580,
			templateName: "expression-builder",
			templateDep: "expression-builder.htm",
			cancel: function () {
				_eb.closed = true;

				if (trackingChanges)
					context.server.beginCapturingChanges();

				// Call cancel callback if exists
				if (dialogCancelCallback)
					dialogCancelCallback();

			},
			buttons: [
				// Execute cancel behavior on cancel click
				{
					label: "Cancel",
					isCancel: true
				},
				{
					label: "Save",
					autoClose: false,
					isDefault: true,
					click: function (e) {
						var that = this;
						validationTask.then(function () {
							_eb.get_viewModel().get_ConditionSets().forEach(function (set) {
								set.get_Conditions().forEach(function (condition) {
									condition.set_forceValidation(true);
								});
							});

							// Check if there are any errors
							if (!isViewModelValid())
								return;

							_eb.closed = true;

							if (trackingChanges)
								context.server.beginCapturingChanges();

							var errorElement = document.querySelector('.c-expression-builder-dialog .c-validation.toggle-on');
							var errorMessage = errorElement ? errorElement.innerHTML : "";
							// Return entered expression if on advanced screen
							if (_eb.get_isAdvanced()) {
								dialogSaveCallback(_eb.get_expression(), _eb.get_viewModel(), errorMessage);
								that.close();
							}
							else {
								// Empty expression
								if (_eb.get_viewModel().get_ConditionSets().length === 0) {
									dialogSaveCallback("", _eb.get_viewModel(), errorMessage);
									that.close();
								}
								// Translate view model to string expression
								else {
									Cognito.translateExpressionBuilderViewModel(_eb.get_viewModel(), function (newExpression) {
										// Return the expression back to the caller
										dialogSaveCallback(newExpression, _eb.get_viewModel(), errorMessage);
										that.close();
									});
								}
							}
						});
					}
				},
				{
					label: "Basic Editor",
					align: "left",
					isTab: true,
					isDefaultTab: true,
					autoClose: false,
					click: function () {
						validationTask.then(function () {
							// In advanced tab, try to build view model
							if (_eb.get_isAdvanced()) {

								if (!isViewModelValid())
									return;

								// Empty expression, create default view model
								if (_eb.get_expression() === "") {
									_eb.set_viewModel(getDefaultConditionSet());
									updateIsAdvanced(false);
								}
								// Try to create view model from string expression
								else {
									Cognito.createExpressionBuilderViewModel({ rootType: _eb.rootType, scope: _eb.scope, expression: _eb.get_expression() }).then(function (builder) {
										if (builder.viewModel == null) {
											_eb.set_translationError(true);
											updateActiveTab(false);
										}
										else {
											updateIsAdvanced(false);
											var viewModel = Cognito.deserialize(Cognito.ExpressionConditionSet, builder.viewModel);
											if (getAllConditions(viewModel).length > 8) {
												$(".c-expression-builder").addClass("c-loading");
												setTimeout(function () {
													_eb.set_viewModel(viewModel);
													$(".c-expression-builder").removeClass("c-loading");
												});
											}
											else
												_eb.set_viewModel(viewModel);
										}
									});
								}
							}
						});
					}
				},
				{
					label: "Advanced Editor",
					align: "left",
					isTab: true,
					autoClose: false,
					click: function () {
						// Check if there are any errors
						if (!isViewModelValid())
							return;

						// Translation error page open, flip back to advanced editor
						if (_eb.get_translationError()) {
							_eb.set_translationError(false);
							updateActiveTab(true);
						}
						// In basic tab, create string equivalent
						else if (!_eb.get_isAdvanced()) {
							Cognito.translateExpressionBuilderViewModel(_eb.get_viewModel()).then(function (newExpression) {
								_eb.set_expression(newExpression);
								updateIsAdvanced(true);
							});
						}
					}
				}
			]
		});
		expressionBuilderDialog._defaultButton = null;
	});


	(function apiDefinition() {
		var _options = {
			rootType: null,
			scope: "",
			rightHandType: null,
			rightHandScope: "",

			usePropertyFieldId: false,

			conditionSet: null,
			expression: null,

			allowAdvanced: true,

			property: null,
			label: null,

			fieldType: "YesNo",
			fieldSubType: "YesNo",

			localization: null,
			format: null,

			saveCallback: null,
			cancelCallback: null,
			openCallback: null,
		};

		// Get view model from server, open expression builder, and store callback for when the expression builder is closed
		Cognito.openExpressionBuilder = function Cognito$openExpressionBuilder(options) {
			_eb.closed = false;
			// Record the dialog number when the dialog is opened so that we can detect multiple attempts to open a dialog
			var thisDialogNum = ++dialogNum;

			options = $.extend({}, _options, options);
			if (!options.localization && options.rootType.get_Localization)
				options.localization = options.rootType.get_Localization();

			trackingChanges = context.server.isCapturingChanges();
			if (trackingChanges)
				context.server.stopCapturingChanges();

			var isEmptyExpression = options.expression === null || options.expression === "";
			dialogSaveCallback = options.saveCallback;
			dialogCancelCallback = options.cancelCallback;

			var lhsPromise = createExpressionBuilderViewModel({
				rootType: options.rootType,
				scope: options.scope,
				expression: options.expression,
				includeTransientProperties: options.includeTransientProperties
			});
			var rhsPromise = (options.rightHandType ? createExpressionBuilderViewModel({ rootType: options.rightHandType, scope: options.rightHandScope }) : $.Deferred().resolve());

			function populateFields(list, propertyMappings) {
				list.beginUpdate();
				list.clear();
				list.addRange(propertyMappings);
				list.endUpdate();
			}

			// start with fresh state
			_eb.set_viewModel(null);

			$.when(lhsPromise, rhsPromise).done(function (builder, rhsBuilder) {
				if (thisDialogNum !== dialogNum) {
					// The user attempted to open another dialog before this one could be opened, so exit to avoid corrupting data or errors
					// due to cross-dialog state interactions (ex: options of second invokation applied to first dialog when opened)
					//console.log("Abandoning dialog " + thisDialogNum + " promises since another dialog (" + dialogNum + ") has since been opened.");
					return;
				}

				// clear prior lookup token data
				_eb.set_lookupTokenData({});
				// request lookup view tokens for loading any lookup options we may need
				Cognito.getExpressionBuilderLookupTokens(options.rootType, options.scope).then(function (tokenMap) {
					_eb.set_lookupTokenData(tokenMap);
				});

				populateFields(_eb.get_leftHandFields(), builder.propertyMappings);
				populateFields(_eb.get_rightHandFields(), (rhsBuilder ? rhsBuilder.propertyMappings : builder.propertyMappings).filter(function (m) { return m.Name.indexOf(options.property + ".") !== 0; }));

				_eb.options = options;
				_eb.rootType = options.rootType;
				_eb.scope = options.scope;
				_eb.idScope = "";
				// Derive the id scope from the scope
				if (typeof options.rootType !== "string" && options.scope) {
					_eb.idScope = options.scope.split('.').reduce(function (fieldSteps, step) {
						var type = (fieldSteps.length ? fieldSteps[fieldSteps.length - 1].get_ChildType() : _eb.rootType);
						var field = type.get_Fields().filter(function (f) { return f.get_InternalName() === step; })[0];
						fieldSteps.push(field);
						return fieldSteps;
					}, []).map(function (field) {
						return field.get_Index();
					}).join(".");
				}

				_eb.set_allowSameFieldComparison(!!options.rightHandType);
				_eb.set_usePropertyFieldId(options.usePropertyFieldId);
				_eb.set_label(options.label);

				// hide the 'Basic Editor' button if the expression is not for a Yes/No or if there are no mappings present
				if (!_eb.get_leftHandFields().length || options.fieldSubType !== "YesNo") {
					expressionBuilderDialog._dialog.find(".c-modal-tab")
						.first().hide();
					expressionBuilderDialog._dialog.addClass("c-expression-builder-dialog--only-advanced");
				}
				else {
					expressionBuilderDialog._dialog.find(".c-modal-tab")
						.first().show();
					expressionBuilderDialog._dialog.removeClass("c-expression-builder-dialog--only-advanced");
				}

				expressionBuilderDialog._dialog.find(".c-modal-tab").last().toggle(options.allowAdvanced);

				_eb.set_translationError(false);
				updateIsAdvanced(options.allowAdvanced && (!_eb.get_leftHandFields().length || options.fieldSubType !== "YesNo" || (isEmptyExpression ? false : builder.viewModel == null)));

				var viewModel;
				// If a condition set was provided in options, clone it and use as view model
				if (options.conditionSet) {
					viewModel = Cognito.deserialize(Cognito.ExpressionConditionSet, Cognito.serialize(options.conditionSet));
					if (!viewModel.get_ConditionSets().length)
						viewModel.get_ConditionSets().add(getDefaultConditionSet());
				}
				// Create default view model
				else if (isEmptyExpression || builder.viewModel === null)
					viewModel = new Cognito.ExpressionConditionSet({ ConditionSets: [getDefaultConditionSet()] });
				// Deserialize view model
				else
					viewModel = Cognito.deserialize(Cognito.ExpressionConditionSet, builder.viewModel);

				if (getAllConditions(viewModel).length > 8) {
					$(".c-expression-builder").addClass("c-loading");
					setTimeout(function () {
						_eb.set_viewModel(viewModel);
						$(".c-expression-builder").removeClass("c-loading");
					}, 400);
				}
				else
					_eb.set_viewModel(viewModel);

				if (options.allowAdvanced) {
					(function advancedEditorSetup() {

						_eb.set_expression(isEmptyExpression ? "" : options.expression);

						// Setup intellisense for textarea (advanced view)
						Cognito.initializeIntellisense(expressionBuilderDialog._dialog[0], options.rootType, options.scope, options.localization);

						// Configure advanced help
						expressionBuilderDialog._dialog.find(".c-expression-help>div").hide();
						var helpType =
							options.fieldSubType == "Date" ? "date" :
								options.fieldSubType == "Time" ? "time" :
									options.fieldSubType == "Integer" || options.fieldSubType == "Decimal" || options.fieldSubType == "Percent" || options.fieldSubType == "Currency" || options.fieldType == "Currency" ? "number" :
										options.fieldSubType == "YesNo" || options.fieldType == "YesNo" ? "boolean" :
											"text";
						expressionBuilderDialog._dialog.find(".c-expression-help-" + helpType).show();
					})();
				}

				// Open dialog
				expressionBuilderDialog._dialog.addClass("c-expression-builder-dialog");
				expressionBuilderDialog._dialog.find(".c-modal-title").text(options.label);
				expressionBuilderDialog.open();

				// Invoke the open callback
				if (options.openCallback)
					options.openCallback(expressionBuilderDialog);
			});
		};

		// Translate view model to a human readable string
		Cognito.getExpressionBuilderPreview = function Cognito$getExpressionBuilderPreview(rootType, scope, expression, callback, error, query) {
			var task = $.Deferred();
			// Make service call to get view model
			Cognito.createExpressionBuilderViewModel({ rootType: rootType, scope: scope, expression: expression, callback: undefined, query: query }).then(function (builder) {
				task.resolve(builder.friendlyExpression, builder.invalidExpression);
				if (callback)
					callback(builder.friendlyExpression, builder.invalidExpression);
			}, error);
			return task.promise();
		};

		Cognito.getFriendlyExpression = (function () {
			var _requests = {};
			return function Cognito$getFriendlyExpression(rootType, scope, rightHandType, rightHandScope, conditionSet, requestIdentifier) {
				var _request = _requests[requestIdentifier];
				if (_request)
					return _request;

				var task = $.Deferred();

				module.serviceRequest({
					dataType: "json",
					endpoint: "getFriendlyExpression",
					contentType: "application/json+cognito; charset=utf-8",
					method: "POST",
					data:
					{
						RootTypeId: typeof (rootType) === "string" ? rootType : null,
						RootType: rootType instanceof Object ? Cognito.serialize(rootType) : null,
						RightHandTypeId: typeof (rightHandType) === "string" ? rightHandType : null,
						RightHandType: rightHandType instanceof Object ? Cognito.serialize(rightHandType) : null,
						Scope: scope,
						RightHandScope: rightHandScope,
						ConditionSet: Cognito.serialize(conditionSet)
					},
					success: task.resolve
				});

				if (requestIdentifier) {
					_requests[requestIdentifier] = task.promise();
					task.then(function () {
						delete _requests[requestIdentifier];
					});
				}

				return task.promise();
			};
		})();

		// Creates a view model based on a string expression and type meta.
		/**
		 * @param {object} options
		 * @param {object|string} options.rootType
		 * @param {boolean} options.includeTransientProperties
		 * @param {string} options.scope
		 * @param {string} options.expression
		 * @param {function} options.callback
		 * @param {string} options.query
		 */
		function createExpressionBuilderViewModel(options) {
			var task = $.Deferred();
			var endpoint = "createExpressionBuilderViewModel";
			if (options.query)
				endpoint += "?" + options.query;
			module.serviceRequest({
				dataType: "json",
				endpoint: endpoint,
				contentType: "application/json+cognito; charset=utf-8",
				method: "POST",
				data:
				{
					RootTypeId: typeof (options.rootType) === "string" ? options.rootType : null,
					RootType: options.rootType instanceof Object ? Cognito.serialize(options.rootType) : null,
					Scope: options.scope,
					Expression: options.expression,
					IncludeTransientProperties: options.includeTransientProperties === false ? false : true
				},
				success: function (data) {
					task.resolve(data);
					if (options.callback)
						options.callback(data);
				},
				error: function () {
					task.reject();
				}
			});
			return task.promise();
		};

		Cognito.createExpressionBuilderViewModel = createExpressionBuilderViewModel;

		// Translates an expression condition set to its string equivalent
		Cognito.translateExpressionBuilderViewModel = function translateExpressionBuilderViewModel(viewModel, callback) {
			var task = $.Deferred();
			module.serviceRequest({
				dataType: "json",
				endpoint: "translateExpressionBuilderViewModel",
				contentType: "application/json+cognito; charset=utf-8",
				method: "POST",
				data: viewModel,
				success: function (data) {
					task.resolve(data);
					if (callback)
						callback(data);
				}
			});
			return task.promise();
		};

		Cognito.getExpressionBuilderLookupTokens = function getExpressionBuilderLookupTokens(rootType, scope) {
			var task = $.Deferred();
			module.serviceRequest({
				dataType: "json",
				endpoint: "getExpressionBuilderLookupTokens",
				contentType: "application/json; charset=utf-8",
				method: "POST",
				data: {
					RootTypeId: typeof (rootType) === "string" ? rootType : null,
					RootType: rootType instanceof Object ? JSON.stringify(Cognito.serialize(rootType)) : null,
					Scope: scope
				},
				success: function (data) {
					task.resolve(data);
				}
			});
			return task.promise();
		}

		// Validates an expression condition for correctness
		Cognito.validateExpressionCondition = function validateExpressionCondition(expressionCondition) {
			module.serviceRequest({
				dataType: "json",
				endpoint: "validateExpressionConditionValue",
				contentType: "application/json+cognito; charset=utf-8",
				method: "POST",
				data: expressionCondition,
				success: function (validationResults) {

					// Clear old error
					if (expressionCondition.meta.getCondition(ExpressionConditionConditionType))
						expressionCondition.meta.getCondition(ExpressionConditionConditionType).condition.destroy();

					// Show validation error if exists
					var exceptions = Cognito.deserialize(Cognito.ValidationResult, validationResults);
					exceptions.forEach(function (exception) {
						if (exception != null && exception.get_ExceptionMessage() != null) {
							var message = exception.get_ExceptionMessage();
							new ExoWeb.Model.Condition(ExpressionConditionConditionType, message, expressionCondition, ["Values"], "client");
						}
					});
				}
			});
		};

		Cognito.createPersonFieldConditionSet = function createPersonFieldConditionSet(property, propertyType, operation, value, valueType, isFieldPath) {
			var conditionSets = new Cognito.ExpressionConditionSet();
			var propType = Cognito.getEnumWithName(Cognito.ExpressionConditionPropertyType, propertyType);
			var condition = new Cognito.ExpressionCondition({
				Property: property,
				Operation: Cognito.getEnumWithName(Cognito.ExpressionConditionOperation, operation),
				ValueType: value ? Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, valueType) : Cognito.getEnumWithName(Cognito.ExpressionConditionValueType, "Hidden")
			});
			condition.set_PropertyType(propType);
			if (value) {
				var val = new Cognito.ExpressionConditionValue({ Value: value, IsFieldPath: isFieldPath || false });
				condition.set_Values([val]);
			}
			conditionSets.get_Conditions().add(condition);

			return conditionSets;
		}
	})();


	// Update isAdvanced variable and active tab
	function updateIsAdvanced(isAdvanced) {
		_eb.set_isAdvanced(isAdvanced);
		updateActiveTab(isAdvanced);
		if (isAdvanced) {
			expressionBuilderDialog._dialog.addClass("c-expression-builder-dialog--is-advanced");
			// Set up auto expanding textarea
			var $textarea = expressionBuilderDialog._dialog.find('textarea');
			setTextareaHeight($textarea);
			if(!$textarea.hasClass('auto-expand')) {
				$textarea.on('input', function() {
					setTextareaHeight($(this));
				});
				$textarea.addClass('auto-expand');
			}
		} else {
			expressionBuilderDialog._dialog.removeClass("c-expression-builder-dialog--is-advanced");
		}
	}

	function setTextareaHeight($textarea) {
		$textarea.height('auto');
		$textarea.height($textarea.prop('scrollHeight') - 8);
	}

	// Update active tab
	function updateActiveTab(isAdvanced) {
		var activeTab = expressionBuilderDialog._dialog.find('.c-modal-tab-active');
		if ((activeTab.text().includes("Advanced") && !isAdvanced) || (activeTab.text().includes("Basic") && isAdvanced)) {
			expressionBuilderDialog._dialog.find('.c-modal-tab:not(.c-modal-tab-active)').addClass('c-modal-tab-active');
			activeTab.removeClass('c-modal-tab-active');
		}
	}

	// Default Cognito.ExpressionCondition
	function getDefaultCondition() {
		var defaultProperty = _eb.get_leftHandFields()[0];
		if (defaultProperty) {
			return new Cognito.ExpressionCondition({
				Property: defaultProperty.Name,
				PropertyType: Cognito.getEnumWithName(Cognito.ExpressionConditionPropertyType, defaultProperty.Type.Name)
			});
		}
		return null;
	}

	// Default Cognito.ExpressionConditionSet
	function getDefaultConditionSet() {
		//console.log("Default condition set")
		// Create condition set with default condition added
		var conditionSet = new Cognito.ExpressionConditionSet();
		var operation = Cognito.getEnumWithName(Cognito.ExpressionConditionSetOperation, "And");
		conditionSet.set_Operation(operation);
		conditionSet.get_Conditions().add(getDefaultCondition());
		return conditionSet;
	}

	// Checks if view model contains any errors, if so, scrolls to the position of the first visible error
	function isViewModelValid() {
		if (expressionBuilderDialog._dialog.find('.c-validation:not(:empty):not(.validation-warning)').filter(':visible').length == 0)
			return true;

		// Don't need to scroll in advanced editor
		if (!_eb.get_isAdvanced()) {
			var firstError = expressionBuilderDialog._dialog.find('.c-validation:not(:empty):not(.validation-warning)').filter(':visible').first();
			firstError.closest('.c-expression-builder-and-container').get(0).scrollIntoView();
		}
		expressionBuilderDialog._dialog.find('.c-modal-button-executing').removeClass("c-modal-button-executing");
		return false;
	}

	// Select input text from start position to end position
	function setSelectionRange(input, selectionStart, selectionEnd) {
		if (input.setSelectionRange) {
			input.focus();
			input.setSelectionRange(selectionStart, selectionEnd);
		}
		else if (input.createTextRange) {
			var range = input.createTextRange();
			range.collapse(true);
			range.moveEnd('character', selectionEnd);
			range.moveStart('character', selectionStart);
			range.select();
		}
	}

	Cognito.ExpressionBuilder.openDateTimePicker = function (type, iconEl) {
		var container = $(iconEl).closest('.c-expression-builder-value');
		if (type === "Date") {
			container.find(".c-datepicker").data("datepicker").show();
		}
		else if (type === "Time") {
			container.find(".c-timepicker").data("timepicker").showOrHighlight();
		}
	}

	Cognito.ready("register-expression-builder-events", "ExoWeb.dom", function domEvents($) {

		$(Cognito.config.flags.AppNav ? "body" : ".cognito")

			// Add AND filter
			.on("click", ".c-expression-builder-add-and", function (event) {
				if (expressionBuilderDialog._dialogVisible) {
					// Add new, default condition
					var conditionSet = $parentContextData($(event.target).closest('.c-expression-builder-or-container')[0]);
					conditionSet.get_Conditions().add(getDefaultCondition());
				}
			})

			// Remove AND filter
			.on("click", ".c-expression-builder-remove-and", function (event) {
				if (expressionBuilderDialog._dialogVisible) {
					var conditionSet = $parentContextData($(event.target).closest('.c-expression-builder-or-container')[0]);
					// If only one condition, delete entire condition set
					if (conditionSet.get_Conditions().length === 1) {
						_eb.get_viewModel().get_ConditionSets().remove(conditionSet);
					}
					// Otherwise delete condition
					else {
						var condition = $parentContextData(event.target);
						conditionSet.get_Conditions().remove(condition);
					}
				}
			})

			// Add OR filter
			.on("click", ".c-expression-builder-add-or", function (event) {
				if (expressionBuilderDialog._dialogVisible) {
					// Add new, default condition set
					_eb.get_viewModel().get_ConditionSets().add(getDefaultConditionSet());
				}
			})

			// Go to character position of error
			.on('click', '.c-expression-builder-advanced .c-validation-message', function () {
				if (expressionBuilderDialog._dialogVisible) {
					var position = $(this).data('position');
					var input = $('.c-expression-builder-advanced textarea')[0];
					setSelectionRange(input, position + 1, position + 1);
				}
			})


	});
});
})(typeof exports === 'undefined');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,