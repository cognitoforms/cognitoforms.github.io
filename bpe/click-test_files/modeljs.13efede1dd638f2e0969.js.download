(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["modeljs"],{

/***/ "../../libs/model.js/lib/allowed-values-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowedValuesRule = void 0;
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var property_chain_1 = __webpack_require__("../../libs/model.js/lib/property-chain.js");
var AllowedValuesRule = /** @class */ (function (_super) {
    __extends(AllowedValuesRule, _super);
    /**
     * Creates a rule that validates whether a selected value or values is in a list of allowed values.
     * @param rootType The root type to bind the rule to
     * @param options The rule configuration options
     */
    function AllowedValuesRule(rootType, options) {
        var _this = this;
        // ensure the rule name is specified
        options.name = options.name || "AllowedValues";
        // ensure the error message is specified
        options.message = options.message || function () { return rootType.model.getResource("allowed-values"); };
        // convert property path sources into a source function
        var source;
        if (options.source instanceof property_1.Property || options.source instanceof property_chain_1.PropertyChain) {
            var sourcePath_1 = options.source;
            options.onChangeOf = [sourcePath_1];
            options.source = source = function () { return sourcePath_1.value(this); };
        }
        else
            source = options.source;
        // create the validation function
        options.isValid = function (prop, value) {
            if (options.ignoreValidation) {
                return true;
            }
            // return true if no value is currently selected
            if (!value) {
                return true;
            }
            // get the list of allowed values of the property for the given object
            var allowed = source.call(this);
            // ensure that the value or list of values is in the allowed values list (single and multi-select)
            if (value instanceof Array) {
                return value.every(function (item) { return allowed.indexOf(item) >= 0; });
            }
            else {
                return allowed.indexOf(value) >= 0;
            }
        };
        // call the base type constructor
        _this = _super.call(this, rootType, options) || this;
        // store the allowed values source
        _this.source = source;
        _this.ignoreValidation = !!options.ignoreValidation;
        _this.preventInvalidValues = !!options.preventInvalidValues;
        return _this;
    }
    AllowedValuesRule.prototype.values = function (obj) {
        return this.source.call(obj);
    };
    AllowedValuesRule.prototype.toString = function () {
        return this.property.containingType.fullName + "." + this.property.name + " allowed values";
    };
    return AllowedValuesRule;
}(validation_rule_1.ValidationRule));
exports.AllowedValuesRule = AllowedValuesRule;


/***/ }),

/***/ "../../libs/model.js/lib/calculated-property-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalculatedPropertyRule = void 0;
var rule_1 = __webpack_require__("../../libs/model.js/lib/rule.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var rule_invocation_type_1 = __webpack_require__("../../libs/model.js/lib/rule-invocation-type.js");
var calculationErrorDefault = null;
var CalculatedPropertyRule = /** @class */ (function (_super) {
    __extends(CalculatedPropertyRule, _super);
    function CalculatedPropertyRule(rootType, name, options) {
        var _this = this;
        var property;
        var defaultIfError = calculationErrorDefault;
        var calculateFn;
        if (!name) {
            name = options.name;
        }
        if (options) {
            if (options.property) {
                property = typeof options.property === "string" ? rootType.getProperty(options.property) : options.property;
                // indicate that the rule is responsible for returning the value of the calculated property
                options.returns = [property];
            }
            if (!name) {
                // Generate a reasonable default rule name if not specified
                name = options.name = (rootType.fullName + "." + (typeof property === "string" ? property : property.name) + ".Calculated");
            }
            if (options.hasOwnProperty("defaultIfError"))
                defaultIfError = options.defaultIfError;
            calculateFn = options.calculate;
        }
        // Call the base rule constructor
        _this = _super.call(this, rootType, name, options) || this;
        // Public read-only properties
        Object.defineProperty(_this, "property", { enumerable: true, value: property });
        // Public settable properties
        _this.defaultIfError = defaultIfError;
        _this.isDefaultValue = !!options.isDefaultValue;
        // Backing fields for properties
        if (calculateFn)
            Object.defineProperty(_this, "_calculateFn", { enumerable: false, value: calculateFn, writable: true });
        // register the rule with the target property
        _this.property.rules.push(_this);
        // mark the property as calculated if the rule runs on property access and is not a default value calculation
        if (!options.isDefaultValue && _this.invocationTypes & rule_invocation_type_1.RuleInvocationType.PropertyGet)
            _this.property.isCalculated = true;
        return _this;
    }
    CalculatedPropertyRule.prototype.register = function () {
        var _this = this;
        _super.prototype.register.call(this);
        if (this.isDefaultValue) {
            // Ensure that a default value rule will run if a calculation that it depends on is changed.
            // A property with a default value rule may have a persisted value, in which case it will
            // not run unless one of its predicates fires a change event. A calculation will not fire
            // a change event the first time it runs if it didn't previously have a value, which may
            // be the case for existing instances if the calculation is never accessed (ex: a hidden field).
            // So, in order to ensure that the default rule's calculated predicates fire a change event,
            // we must ensure that the calculation is accessed when the object is initialized.
            this.rootType.initExisting.subscribe(function (args) {
                // If the property is initialized (i.e. it has an initial persisted value),
                // run the calculation and throw away the result.
                var initialValue = args.entity.__fields__[_this.property.name];
                if (initialValue !== undefined) {
                    try {
                        _this.calculateFn.call(args.entity);
                    }
                    catch (e) {
                    }
                }
            });
        }
    };
    Object.defineProperty(CalculatedPropertyRule.prototype, "calculateFn", {
        get: function () {
            var calculateFn;
            // Convert string functions into compiled functions on first execution
            if (this._calculateFn.constructor === String) {
                // TODO: Calculation expression support
                var calculateExpr = this._calculateFn;
                var calculateCompiledFn = new Function("return " + calculateExpr + ";");
                calculateFn = this._calculateFn = calculateCompiledFn;
            }
            else {
                calculateFn = this._calculateFn;
            }
            return calculateFn;
        },
        enumerable: false,
        configurable: true
    });
    CalculatedPropertyRule.prototype.execute = function (obj) {
        // Calculate the new property value
        var newValue;
        if (this.defaultIfError === undefined) {
            newValue = this.calculateFn.call(obj);
        }
        else {
            try {
                newValue = this.calculateFn.call(obj);
            }
            catch (e) {
                newValue = this.defaultIfError;
            }
        }
        // Exit immediately if the calculated result was undefined
        if (newValue === undefined) {
            return;
        }
        // modify list properties to match the calculated value instead of overwriting the property
        if (this.property.isList) {
            var newList_1 = newValue;
            // ensure the initial calculation of the list does not raise change events
            // defaulting a list property should raise change events
            if (!this.isDefaultValue && !this.property.isInited(obj))
                property_1.Property$init(this.property, obj, newList_1);
            else {
                // compare the new list to the old one to see if changes were made
                var curList = this.property.value(obj);
                if (newList_1.length === curList.length) {
                    var noChanges = true;
                    for (var i = 0; i < newList_1.length; ++i) {
                        if (newList_1[i] !== curList[i]) {
                            noChanges = false;
                            break;
                        }
                    }
                    if (noChanges) {
                        return;
                    }
                }
                // update the current list so observers will receive the change events
                // events will not be raised if this is the initial calculation of the list
                curList.batchUpdate(function (array) {
                    observable_array_1.updateArray(array, newList_1);
                });
            }
        }
        else {
            // Otherwise, just set the property to the new value
            this.property.value(obj, newValue, { calculated: true });
        }
    };
    CalculatedPropertyRule.prototype.toString = function () {
        return "calculation of " + this.property.name;
    };
    return CalculatedPropertyRule;
}(rule_1.Rule));
exports.CalculatedPropertyRule = CalculatedPropertyRule;


/***/ }),

/***/ "../../libs/model.js/lib/condition-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionRule = void 0;
var rule_1 = __webpack_require__("../../libs/model.js/lib/rule.js");
var condition_type_1 = __webpack_require__("../../libs/model.js/lib/condition-type.js");
var ConditionRule = /** @class */ (function (_super) {
    __extends(ConditionRule, _super);
    /**
     * Creates a rule that asserts a condition based on a predicate
     * @param rootType The model type the rule is for
     * @param options The options for the rule, of type ConditionRuleOptions
     */
    function ConditionRule(rootType, options) {
        var _this = this;
        // automatically run the condition rule during initialization of new and existing instances
        options.onInit = true;
        // call the base rule constructor
        _this = _super.call(this, rootType, options.name, options) || this;
        // assertion function
        _this.assert = options.assert;
        // message
        _this.message = options.message;
        // condition type
        _this.conditionType = options.conditionType ? (typeof options.conditionType === "string" ?
            condition_type_1.ConditionType.get(options.conditionType) :
            options.conditionType) :
            rule_1.Rule$ensureConditionType(options.name, rootType, options.category || "Error");
        // properties
        _this.properties = options.properties;
        return _this;
    }
    // asserts the condition and adds or removes it from the model if necessary
    ConditionRule.prototype.execute = function (entity) {
        var assert;
        var message;
        if (this.assert) {
            // If an assert function is defined, then use it to determine whether to attach a condition
            assert = this.assert.call(entity);
            message = typeof this.message === "string" ? this.message : this.message.call(entity);
        }
        else if (this.message instanceof Function) {
            message = this.message.call(entity);
            assert = typeof message === "string" && message.trim().length > 0;
        }
        // create or remove the condition if necessary
        if (typeof assert !== "undefined") {
            // pass through "this" so it can add the source when the rule is constructed
            // Add the source to the condition instead of the condition type
            this.conditionType.when(this, assert, entity, message);
        }
    };
    // gets the string representation of the condition rule
    ConditionRule.prototype.toString = function () {
        return typeof this.message === "string" ? this.message : this.conditionType.message;
    };
    return ConditionRule;
}(rule_1.Rule));
exports.ConditionRule = ConditionRule;


/***/ }),

/***/ "../../libs/model.js/lib/condition-target.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionTarget = void 0;
var format_error_1 = __webpack_require__("../../libs/model.js/lib/format-error.js");
/** Represents the association of a condition to a specific target entity. */
var ConditionTarget = /** @class */ (function () {
    /**
    * Creates the association of a condition to a specific target entity.
    * @param condition The condition the target is for.
    * @param target The target entity the condition is associated with.
    * @param properties The set of properties on the target entity the condition is related to.
    */
    function ConditionTarget(condition, target, properties) {
        this.condition = condition;
        this.target = target;
        this.properties = properties;
        // Attach the condition target to the target entity.
        if (this.condition.type !== format_error_1.FormatError.ConditionType) {
            target.meta.setCondition(this);
        }
    }
    return ConditionTarget;
}());
exports.ConditionTarget = ConditionTarget;


/***/ }),

/***/ "../../libs/model.js/lib/condition-type-set.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionTypeSet = void 0;
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var allConditionTypeSets = {};
/** Groups condition types into a set in order to be notified conditions for these types change. */
var ConditionTypeSet = /** @class */ (function () {
    /**
    * Creates a set of condition types.
    * @param name The name of the set
    */
    function ConditionTypeSet(name) {
        if (allConditionTypeSets[name])
            throw new Error("A set with the name '" + name + "' has already been created.");
        this.name = name;
        this.types = observable_array_1.ObservableArray.create();
        this.conditions = observable_array_1.ObservableArray.create();
        allConditionTypeSets[name] = this;
    }
    /**
    * Gets all condition type sets that have been created.
    * @returns Array of all condition type sets.
    * */
    ConditionTypeSet.all = function () {
        var all = [];
        for (var type in allConditionTypeSets.keys) {
            all.push(allConditionTypeSets[type]);
        }
        return all;
    };
    /**
    * Gets the condition type set with the specified name.
    * @param name
    */
    ConditionTypeSet.get = function (name) {
        return allConditionTypeSets[name];
    };
    return ConditionTypeSet;
}());
exports.ConditionTypeSet = ConditionTypeSet;


/***/ }),

/***/ "../../libs/model.js/lib/condition-type.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionConditionType = exports.WarningConditionType = exports.ErrorConditionType = exports.ConditionType = void 0;
var condition_1 = __webpack_require__("../../libs/model.js/lib/condition.js");
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var allConditionTypes = {};
var ConditionType = /** @class */ (function () {
    /**
    * Creates a unique type of model condition.
    * @param code The unique condition type code.
    * @param category The category of the condition type, such as "Error", "Warning", or "Permission".
    * @param message The default message to use when the condition is present.
    * @param sets One or more sets the condition type belongs to.
    */
    function ConditionType(code, category, message, sets) {
        // Ensure unique condition type codes
        if (allConditionTypes[code])
            throw new Error("A condition type with the code \"" + code + "\" has already been created.");
        this.code = code;
        this.category = category;
        this.message = message;
        // this.rules = [];
        this.conditions = observable_array_1.ObservableArray.create();
        this.sets = observable_array_1.ObservableArray.ensureObservable(sets || []);
        // Register with the static dictionary of all condition types
        allConditionTypes[code] = this;
    }
    /**
    * Adds or removes a condition from the model for the specified target if necessary.
    * @param condition Whether or not the condition should be present
    * @param target The target instance
    * @param properties The properties to attach the condition to
    * @param message The condition message (or a function to generate the message)
    */
    ConditionType.prototype.when = function (source, condition, target, message) {
        // get the current condition if it exists
        var conditionTarget = target.meta.getCondition(this);
        // add the condition on the target if it does not exist yet
        if (condition) {
            // if the message is a function, invoke to get the actual message
            message = message instanceof Function ? message(target) : message;
            // create a new condition if one does not exist
            if (!conditionTarget) {
                return new condition_1.Condition(this, message, target, source, source.properties);
            }
            // replace the condition if the message has changed
            else if (message && message !== conditionTarget.condition.message) {
                // destroy the existing condition
                conditionTarget.condition.destroy();
                // create a new condition with the updated message
                return new condition_1.Condition(this, message, target, source, source.properties);
            }
            // otherwise, just return the existing condition
            else {
                return conditionTarget.condition;
            }
        }
        // Destroy the condition if it exists on the target and is no longer valid
        if (conditionTarget != null)
            conditionTarget.condition.destroy();
        // Return null to indicate that no condition was created
        return null;
    };
    /**
        * Gets all condition types that have been created.
        * @returns Array of all condition types.
        * */
    ConditionType.all = function () {
        var all = [];
        for (var type in allConditionTypes.keys) {
            all.push(allConditionTypes[type]);
        }
        return all;
    };
    /**
        * Returns the condition type with the given code, if it exists.
        * @param code The unique code of the condition type to find.
        */
    ConditionType.get = function (code) {
        return allConditionTypes[code];
    };
    ;
    return ConditionType;
}());
exports.ConditionType = ConditionType;
var ErrorConditionType = /** @class */ (function (_super) {
    __extends(ErrorConditionType, _super);
    function ErrorConditionType(code, message, sets) {
        return _super.call(this, code, "Error", message, sets) || this;
    }
    return ErrorConditionType;
}(ConditionType));
exports.ErrorConditionType = ErrorConditionType;
var WarningConditionType = /** @class */ (function (_super) {
    __extends(WarningConditionType, _super);
    function WarningConditionType(code, message, sets) {
        return _super.call(this, code, "Warning", message, sets) || this;
    }
    return WarningConditionType;
}(ConditionType));
exports.WarningConditionType = WarningConditionType;
var PermissionConditionType = /** @class */ (function (_super) {
    __extends(PermissionConditionType, _super);
    function PermissionConditionType(code, message, sets, isAllowed) {
        if (isAllowed === void 0) { isAllowed = true; }
        var _this = _super.call(this, code, "Warning", message, sets) || this;
        _this.isAllowed = !(isAllowed === false);
        return _this;
    }
    return PermissionConditionType;
}(ConditionType));
exports.PermissionConditionType = PermissionConditionType;


/***/ }),

/***/ "../../libs/model.js/lib/condition.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = void 0;
var format_error_1 = __webpack_require__("../../libs/model.js/lib/format-error.js");
var condition_target_1 = __webpack_require__("../../libs/model.js/lib/condition-target.js");
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var Condition = /** @class */ (function () {
    /**
        * Creates a condition of a specific type associated with one or more entities in a model.
        * @param type The type of condition, which usually is an instance of a subclass like Error, Warning or Permission.
        * @param message The optional message to use for the condition, which will default to the condition type message if not specified.
        * @param target The root target entity the condition is associated with.
        * @param properties The set of property paths specifying which properties and entities the condition should be attached to.
        */
    function Condition(type, message, target, source, properties) {
        var _this = this;
        if (properties === void 0) { properties = []; }
        this.type = type;
        this._message = message || (type ? type.message : undefined);
        var targets = this.targets = observable_array_1.ObservableArray.create();
        this.source = source;
        // create targets if a root was specified
        if (target) {
            var _loop_1 = function (p) {
                var path = properties[p];
                var targetInfos = [];
                // build list of objects containing ConditionTarget information
                // we don't want to construct ConditionTargets as we're processing the path because we may not have gathered all targeted properties,
                // and the constructor triggers change on the entity meta's conditions list, which should be in a correct state before publishing the event
                path.each(target, function (entity, property) {
                    if (property !== path.lastProperty)
                        return;
                    // see if a target already exists for the current instance
                    var targetInfo = targetInfos.find(function (t) { return t.entity === entity; });
                    // create the condition target if it does not already exist
                    if (!targetInfo) {
                        targetInfo = { entity: entity, properties: [property] };
                        targetInfos.push(targetInfo);
                    }
                    // otherwise, just ensure it references the current step
                    else if (!targetInfo.properties.includes(property))
                        targetInfo.properties.push(property);
                });
                // construct the ConditionTargets here now that we've gathered all information
                targets.push.apply(targets, targetInfos.map(function (i) { return new condition_target_1.ConditionTarget(_this, i.entity, i.properties); }));
            };
            // process each property path to build up the condition sources
            for (var p = properties.length - 1; p >= 0; p--) {
                _loop_1(p);
            }
        }
        // raise events for the new condition
        if (type !== format_error_1.FormatError.ConditionType) {
            var conditionType = type;
            // raise events on condition targets
            for (var t = targets.length - 1; t >= 0; t--) {
                var conditionTarget = targets[t];
                // type events
                for (var objectType = conditionTarget.target.meta.type; objectType != null; objectType = objectType.baseType) {
                    // (objectType.conditionsChanged as Event<Type, ConditionTargetsChangedEventArgs>).publish(objectType, { conditionTarget: conditionTarget, add: true });
                }
            }
            // Add the condition to the corresponding condition type
            conditionType.conditions.push(this);
            // Add the condition to relevant condition type sets
            if (this.type.sets) {
                for (var s = this.type.sets.length - 1; s >= 0; s--) {
                    this.type.sets[s].conditions.push(this);
                }
            }
        }
    }
    Object.defineProperty(Condition.prototype, "message", {
        get: function () {
            if (typeof (this._message) === "string")
                return this._message;
            else
                return this._message();
        },
        set: function (val) {
            this._message = val;
        },
        enumerable: false,
        configurable: true
    });
    Condition.prototype.destroy = function () {
        /// <summary>Removes the condition targets from all target instances and raises condition change events.</summary>
        // raise events on condition type sets
        if (this.type.sets) {
            for (var s = this.type.sets.length - 1; s >= 0; s--) {
                var set = this.type.sets[s];
                var idx_1 = set.conditions.indexOf(this);
                if (idx_1 >= 0) {
                    set.conditions.splice(idx_1, 1);
                }
            }
        }
        // raise events on condition types
        var idx = this.type.conditions.indexOf(this);
        if (idx >= 0) {
            this.type.conditions.splice(idx, 1);
        }
        for (var t = this.targets.length - 1; t >= 0; t--) {
            var conditionTarget = this.targets[t];
            var objectMeta = conditionTarget.target.meta;
            objectMeta.clearCondition(conditionTarget.condition.type);
            // type events
            for (var objectType = conditionTarget.target.meta.type; objectType != null; objectType = objectType.baseType) {
                // (objectType.conditionsChanged as Event<Type, ConditionTargetsChangedEventArgs>).publish(objectType, { conditionTarget: conditionTarget, add: false, remove: true });
            }
        }
        // remove references to all condition targets
        this.targets.splice(0);
    };
    Condition.prototype.toString = function () {
        return this.message;
    };
    return Condition;
}());
exports.Condition = Condition;


/***/ }),

/***/ "../../libs/model.js/lib/entity-serializer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitySerializer = exports.DefaultSerializationSettings = exports.PropertyConverter = exports.IgnoreProperty = void 0;
var type_1 = __webpack_require__("../../libs/model.js/lib/type.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
exports.IgnoreProperty = {
    key: "ignore",
    value: "ignore"
};
/**
 * Allows transformation of the serialized name and value of a model property.
 */
var PropertyConverter = /** @class */ (function () {
    function PropertyConverter() {
    }
    /**
     * @param context The `Entity` containing the specified property.
     * @param prop The property being serialized/deserialized.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    PropertyConverter.prototype.shouldConvert = function (context, prop) {
        return true;
    };
    /**
     * Return `IgnoreProperty` to prevent serialization of the property.
     * @param context The `Entity` containing the specified property.
     * @param prop The current property being serialized.
     * @param value The value of the property on the entity currently being serialized.
     */
    PropertyConverter.prototype.serialize = function (context, value, property, settings) {
        var result = { key: property.name, value: value };
        if (value) {
            if (type_1.isEntityType(property.propertyType)) {
                if (property.isList && Array.isArray(value))
                    result.value = value.map(function (ent) { return ent.serialize(settings); });
                else
                    result.value = value.serialize(settings);
            }
            else if (property.isList)
                result.value = value.slice();
        }
        return result;
    };
    /**
     * Return `IgnoreProperty` to prevent deserialization of the property.
     * @param context The `Entity` containing the specified property.
     * @param prop The current property being deserialized.
     * @param value The value to deserialize.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    PropertyConverter.prototype.deserialize = function (context, value, property) {
        return value;
    };
    return PropertyConverter;
}());
exports.PropertyConverter = PropertyConverter;
exports.DefaultSerializationSettings = {
    force: false,
    useAliases: false
};
var EntitySerializer = /** @class */ (function () {
    function EntitySerializer() {
        this._propertyConverters = [];
        this._propertyInjectors = new Map();
        this._propertyAliases = new Map();
        this._valueResolvers = [];
    }
    /**
     * Property converters should be registered in order of increasing specificity.
     * If two converters would convert a property, only the one registered last will apply.
     */
    EntitySerializer.prototype.registerPropertyConverter = function (converter) {
        this._propertyConverters.unshift(converter);
    };
    /**
     * Property injections will occur when serializing entities of the specified type, or entities which
     * inherit from the specified type. Injected properties will appear before model properties in the serialized
     * output.
     * @param type Either a Type or the fullName of a Type
     * @param injector
     */
    EntitySerializer.prototype.registerPropertyInjector = function (type, injector) {
        var injectors = this._propertyInjectors.get(type) || [];
        injectors.push(injector);
        this._propertyInjectors.set(type, injectors);
    };
    EntitySerializer.prototype.registerPropertyAlias = function (type, alias, propertyName) {
        var aliases = this._propertyAliases.get(type) || {};
        aliases[alias] = propertyName;
        aliases[propertyName] = alias;
        this._propertyAliases.set(type, aliases);
    };
    EntitySerializer.prototype.registerValueResolver = function (resolver) {
        this._valueResolvers.push(resolver);
    };
    /**
     * Returns the property injectors registered for a specific type, including name-based registrations.
     * @param type
     */
    EntitySerializer.prototype.getInjectorsOrDefault = function (type) {
        return (this._propertyInjectors.get(type) || []).concat(this._propertyInjectors.get(type.fullName) || []);
    };
    /**
     * Returns property injectors registered for a type and its base types.
     * @param type
     */
    EntitySerializer.prototype.getPropertyInjectors = function (type) {
        var injectors = [];
        do {
            injectors.push.apply(injectors, this.getInjectorsOrDefault(type));
            type = type.baseType;
        } while (type);
        return injectors;
    };
    EntitySerializer.prototype.serializePropertyValue = function (entity, property, value, settings) {
        var converters = this._propertyConverters.filter(function (c) { return c.shouldConvert(entity, property); });
        var result = (function () {
            if (converters) {
                for (var _i = 0, converters_1 = converters; _i < converters_1.length; _i++) {
                    var converter = converters_1[_i];
                    var res = converter.serialize(entity, value, property, settings);
                    if (!settings.force || res !== exports.IgnoreProperty)
                        return res;
                }
            }
            return EntitySerializer.defaultPropertyConverter.serialize(entity, value, property, settings);
        })();
        if (result && result !== exports.IgnoreProperty && settings.useAliases)
            result.key = this.getPropertyAliases(property.containingType)[property.name] || result.key;
        return result;
    };
    /**
     * Produces a JSON-valid object representation of the entity.
     * @param entity
     */
    EntitySerializer.prototype.serialize = function (entity, settings) {
        var _this = this;
        if (settings === void 0) { settings = exports.DefaultSerializationSettings; }
        var result = {};
        var type = entity.meta.type;
        helpers_1.flatMap(this.getPropertyInjectors(type), function (i) { return i.inject(entity); })
            .concat(type.properties
            .filter(function (p) { return !p.isCalculated && !p.isConstant; })
            .map(function (prop) { return _this.serializePropertyValue(entity, prop, prop.value(entity), settings); }))
            .forEach(function (pair) {
            if (pair && pair !== exports.IgnoreProperty) {
                if (result.hasOwnProperty(pair.key))
                    throw new Error("Property '" + pair.key + "' was encountered twice during serialization. Make sure injected properties do not collide with model properties.");
                result[pair.key] = pair.value;
            }
        });
        return result;
    };
    EntitySerializer.prototype.deserialize = function (instance, data, property, context, constructEntity) {
        var _this = this;
        if (constructEntity === void 0) { constructEntity = true; }
        // Apply custom converters before deserializing
        var converter = this._propertyConverters.find(function (c) { return c.shouldConvert(instance, property); });
        if (converter)
            data = converter.deserialize(instance, data, property);
        if (data === exports.IgnoreProperty)
            return;
        var value;
        var resolveEntity = function (type, state) {
            var entity;
            var id = type.meta.identifier ? state[type.meta.identifier.name] : null;
            if (id)
                entity = type.meta.get(id);
            if (!entity)
                entity = new type(id, state, context);
            return entity;
        };
        // Entities
        if (type_1.isEntityType(property.propertyType)) {
            var ChildEntity_1 = property.propertyType;
            if (!constructEntity)
                value = data;
            // Entity List
            else if (property.isList && Array.isArray(data))
                value = data.map(function (s) { return s instanceof ChildEntity_1 ? s : resolveEntity(ChildEntity_1, s); });
            // Entity
            else if (data instanceof ChildEntity_1)
                value = data;
            else if (data instanceof Object)
                value = resolveEntity(ChildEntity_1, data);
            else if (data === null)
                value = data;
        }
        // Value List
        else if (property.isList && Array.isArray(data))
            value = data.map(function (i) { return _this.deserialize(instance, i, property, context); });
        // Value
        else if (property.format && data && typeof (data) === "string" && data.constructor !== property.propertyType)
            value = property.format.convertFromString(data);
        else
            value = data;
        return value;
    };
    EntitySerializer.prototype.getPropertyAliases = function (type) {
        return Object.assign({}, this._propertyAliases.get(type), this._propertyAliases.get(type.fullName));
    };
    EntitySerializer.prototype.resolveProperty = function (context, propName) {
        var prop = context.meta.type.getProperty(propName);
        if (prop)
            return prop;
        propName = this.getPropertyAliases(context.meta.type)[propName];
        return context.meta.type.getProperty(propName);
    };
    EntitySerializer.prototype.resolveValue = function (context, property, value) {
        for (var _i = 0, _a = this._valueResolvers; _i < _a.length; _i++) {
            var resolve = _a[_i];
            var result = resolve(context, property, value);
            if (result)
                return result;
        }
    };
    EntitySerializer.defaultPropertyConverter = new PropertyConverter();
    return EntitySerializer;
}());
exports.EntitySerializer = EntitySerializer;


/***/ }),

/***/ "../../libs/model.js/lib/entity.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEntity = exports.Entity = void 0;
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var type_1 = __webpack_require__("../../libs/model.js/lib/type.js");
var initilization_context_1 = __webpack_require__("../../libs/model.js/lib/initilization-context.js");
var object_meta_1 = __webpack_require__("../../libs/model.js/lib/object-meta.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
var entity_serializer_1 = __webpack_require__("../../libs/model.js/lib/entity-serializer.js");
var Entity = /** @class */ (function () {
    function Entity(type, id, properties, context) {
        var _this = this;
        if (arguments.length === 0) {
            // TODO: Warn about direct call in dev build?
        }
        else if (Entity.ctorDepth === 0)
            throw new Error("Entity constructor should not be called directly.");
        else {
            Object.defineProperty(this, "_context", { enumerable: false, configurable: false, writable: true, value: null });
            Object.defineProperty(this, "accessed", { enumerable: false, configurable: false, writable: false, value: new events_1.Event() });
            Object.defineProperty(this, "changed", { enumerable: false, configurable: false, writable: false, value: new events_1.Event() });
            var isNew_1 = false;
            if (typeof id === "string")
                type.assertValidId(id);
            else {
                // Was id provided as undefined, or not provided at all?
                if (id !== null && typeof id === "object")
                    properties = id;
                id = type.newId();
                isNew_1 = context ? context.isNewDocument : true;
            }
            // If context was provided, it should be the last argument
            context = arguments[arguments.length - 1];
            if (!(context instanceof initilization_context_1.InitializationContext))
                context = new initilization_context_1.InitializationContext(isNew_1);
            Object.defineProperty(this, "meta", { enumerable: true, configurable: false, writable: false, value: new object_meta_1.ObjectMeta(type, this, id, isNew_1) });
            Object.defineProperty(this, "__fields__", { enumerable: false, configurable: false, writable: false, value: {} });
            Object.defineProperty(this, "__pendingInit__", { enumerable: false, configurable: false, writable: false, value: {} });
            // Register the newly constructed instance
            type.register(this);
            // Initialize existing entity with provided property values
            if (!isNew_1 && properties) {
                // We need to pause processing of callbacks to prevent publishing entity events while still processing the state graph
                context.execute(function () { return _this.init(properties, context); });
            }
            // Raise the initNew or initExisting event on this type and all base types
            this.initialized = new Promise(function (resolve) {
                context.whenReady(function () {
                    // Set values of new entity for provided properties
                    if (isNew_1 && properties)
                        _this.updateWithContext(context, properties);
                    for (var t = type; t; t = t.baseType) {
                        if (isNew_1)
                            t.initNew.publish(t, { entity: _this });
                        else
                            t.initExisting.publish(t, { entity: _this });
                    }
                    context.whenReady(resolve);
                });
            });
        }
    }
    Entity.getSortedPropertyData = function (properties) {
        return helpers_1.entries(properties).sort(function (a, b) {
            return Number(b[1] instanceof Entity) - Number(a[1] instanceof Entity);
        });
    };
    Entity.prototype.init = function (property, context, value) {
        var _a;
        var _this = this;
        if (Entity.ctorDepth === 0) {
            throw new Error("Entity.init() should not be called directly.");
        }
        var properties;
        // Convert property/value pair to a property dictionary
        if (typeof property === "string")
            properties = (_a = {}, _a[property] = value, _a);
        else
            properties = property;
        var initializedProps = new Set();
        var _loop_1 = function (propName, state) {
            var prop = this_1.serializer.resolveProperty(this_1, propName);
            if (prop && !prop.isCalculated && !prop.isConstant) {
                initializedProps.add(prop);
                var valueResolution = context.tryResolveValue(this_1, prop, state);
                if (valueResolution)
                    valueResolution.then(function (asyncState) { return _this.initProp(prop, asyncState, context); });
                else
                    this_1.initProp(prop, state, context);
            }
        };
        var this_1 = this;
        // Initialize the specified properties
        for (var _i = 0, _b = Entity.getSortedPropertyData(properties); _i < _b.length; _i++) {
            var _c = _b[_i], propName = _c[0], state = _c[1];
            _loop_1(propName, state);
        }
        // Pass all unspecified properties through the deserializer to allow initialization logic via converters
        for (var _d = 0, _e = this.meta.type.properties.filter(function (p) { return !initializedProps.has(p); }); _d < _e.length; _d++) {
            var prop = _e[_d];
            var value_1 = this.serializer.deserialize(this, undefined, prop, context);
            if (value_1 !== undefined)
                property_1.Property$init(prop, this, value_1);
        }
    };
    Entity.prototype.initProp = function (prop, state, context) {
        var value;
        value = this.serializer.deserialize(this, state, prop, context);
        if (value !== undefined)
            property_1.Property$init(prop, this, value);
    };
    Entity.prototype.updateWithContext = function (context, state) {
        var _this = this;
        var hadContext = !!this._context;
        // Do not allow reentrant updates of the same entity for a given context
        if (this._context === context)
            return;
        // Don't overwrite existing context
        if (!this._context)
            this._context = context;
        // Ensure provided context waits on the existing context to be ready
        else if (this._context !== context)
            context.wait(this._context.ready);
        this.update(state);
        if (context !== null && !hadContext) {
            context.whenReady(function () {
                _this._context = null;
            });
        }
    };
    Entity.createOrUpdate = function (type, state, context) {
        var id = type_1.getIdFromState(type, state);
        var isNew = !id;
        if (!context)
            context = new initilization_context_1.InitializationContext(isNew);
        // We need to pause processing of callbacks to prevent publishing entity events while still processing
        // the state graph
        var instance = context.execute(function () {
            var instance = id && type.get(id);
            if (instance) {
                // Assign state to the existing object
                instance.updateWithContext(context, state);
            }
            else {
                // Cast the jstype to any so we can call the internal constructor signature that takes a context
                // We don't want to put the context on the public constructor interface
                var Ctor = type.jstype;
                // Construct an instance using the known id if it is present
                instance = (id ? new Ctor(id, state, context) : new Ctor(state, context));
            }
            return instance;
        });
        return instance;
    };
    Entity.prototype.update = function (property, value) {
        var _a;
        var _this = this;
        var properties;
        // Convert property/value pair to a property dictionary
        if (typeof property === "string")
            properties = (_a = {}, _a[property] = value, _a);
        else
            properties = property;
        if (!this._context) {
            var wasNew_1 = this.meta.isNew;
            var context_1 = new initilization_context_1.InitializationContext(true);
            context_1.execute(function () { return _this.updateWithContext(context_1, properties); });
            var markPersistedWhenIdAssigned = function () {
                if (wasNew_1 && !_this.meta.isNew)
                    _this.markPersisted();
            };
            // call markPersistedWhenIdAssigned using whenReady and after the promise resolves to ensure models with no async
            // behavior produce the correct outcome upon returning from update()
            context_1.whenReady(markPersistedWhenIdAssigned);
            return context_1.ready.then(markPersistedWhenIdAssigned);
        }
        var context = this._context;
        var _loop_2 = function (propName, state) {
            var prop = this_2.serializer.resolveProperty(this_2, propName);
            if (prop && !prop.isCalculated && !prop.isConstant) {
                var valueResolution = context.tryResolveValue(this_2, prop, state);
                if (valueResolution)
                    valueResolution.then(function (asyncState) { return _this.setProp(prop, asyncState); });
                else
                    this_2.setProp(prop, state);
            }
        };
        var this_2 = this;
        // Set the specified properties
        for (var _i = 0, _b = Entity.getSortedPropertyData(properties); _i < _b.length; _i++) {
            var _c = _b[_i], propName = _c[0], state = _c[1];
            _loop_2(propName, state);
        }
        return context.ready;
    };
    Entity.prototype.setProp = function (prop, state) {
        var _this = this;
        var value;
        var currentValue = prop.value(this);
        if (type_1.isEntityType(prop.propertyType)) {
            var ChildEntity_1 = prop.propertyType;
            if (prop.isList && Array.isArray(state) && Array.isArray(currentValue)) {
                if (!state.length)
                    currentValue.splice(0);
                else {
                    state.forEach(function (s, idx) {
                        if (!(s instanceof ChildEntity_1))
                            s = _this.serializer.deserialize(_this, s, prop, _this._context, false);
                        // Undefined(IgnoreProperty) got assigned, so do not set the property
                        if (s === undefined)
                            return;
                        // Modifying/replacing existing list item
                        if (idx < currentValue.length) {
                            // If the item is a state object, create/update the entity using the state
                            if (!(s instanceof ChildEntity_1) && typeof s === "object") {
                                var listItem = currentValue[idx];
                                // If the entity is a non-pooled type, update in place
                                // If the entity id matches the id in the state, update in place
                                if (!ChildEntity_1.meta.identifier || type_1.getIdFromState(ChildEntity_1.meta, s) === listItem.meta.id)
                                    listItem.updateWithContext(_this._context, s);
                                else
                                    currentValue.splice(idx, 1, Entity.createOrUpdate(ChildEntity_1.meta, s, _this._context));
                            }
                            else if (s instanceof ChildEntity_1)
                                currentValue.splice(idx, 1, s);
                            else
                                console.warn("Provided state,", s, ", is not valid for type " + ChildEntity_1.meta.fullName + "[].");
                        }
                        // Add a list item
                        else if (s instanceof ChildEntity_1)
                            currentValue.push(s);
                        else
                            currentValue.push(Entity.createOrUpdate(ChildEntity_1.meta, s, _this._context));
                    });
                    // Remove excess items from the list
                    currentValue.splice(state.length);
                }
                // Mark property pendingInit = false, since value is not assigned so the setter is not called
                property_1.Property$pendingInit(this, prop, false);
            }
            else if (state instanceof ChildEntity_1)
                value = state;
            else if (state == null)
                value = null;
            else {
                // Attempt to deserialize the state
                var newState = this.serializer.deserialize(this, state, prop, this._context, false);
                // Undefined(IgnoreProperty) got assigned, so do not set the property
                if (newState === undefined)
                    return;
                if (typeof newState !== "undefined")
                    state = newState;
                // Got null, so assign null to the property
                if (state == null)
                    value = null;
                // Got a valid instance, so use it
                else if (state instanceof ChildEntity_1)
                    value = state;
                // Got something other than an object, so just use it and expect to get a down-stream error
                else if (typeof state !== "object")
                    value = state;
                else if (currentValue && !type_1.getIdFromState(ChildEntity_1.meta, state))
                    currentValue.updateWithContext(this._context, state);
                // Got an object, so attempt to fetch or create and assign the state
                else
                    value = Entity.createOrUpdate(ChildEntity_1.meta, state, this._context);
            }
        }
        else if (prop.isList && Array.isArray(state) && Array.isArray(currentValue)) {
            currentValue.splice.apply(currentValue, __spreadArrays([0, currentValue.length], state.map(function (s) { return _this.serializer.deserialize(_this, s, prop, _this._context); })));
            // Mark property pendingInit = false, since value is not assigned so the setter is not called
            property_1.Property$pendingInit(this, prop, false);
        }
        else
            value = this.serializer.deserialize(this, state, prop, this._context);
        if (value !== undefined)
            try {
                property_1.Property$setter(prop, this, value);
            }
            catch (e) {
                console.warn(e);
            }
    };
    Entity.prototype.get = function (property) {
        return this.meta.type.getProperty(property).value(this);
    };
    Entity.prototype.toString = function (format, formatEval) {
        // Get the entity format to use
        var formatter = null;
        if (format) {
            formatter = this.meta.type.model.getFormat(this.constructor, format, formatEval);
        }
        else {
            formatter = this.meta.type.format;
        }
        // Use the formatter, if available, to create the string representation
        if (formatter) {
            return formatter.convert(this);
        }
        else {
            return this.meta.type.fullName + "|" + this.meta.id;
        }
    };
    Object.defineProperty(Entity.prototype, "serializer", {
        get: function () {
            return this.meta.type.model.serializer;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Produces a JSON-valid object representation of the entity.
     * @param entity
     */
    Entity.prototype.serialize = function (settings) {
        if (settings === void 0) { settings = entity_serializer_1.DefaultSerializationSettings; }
        return this.serializer.serialize(this, settings);
    };
    Entity.prototype.markPersisted = function () {
        if (!this.meta.type.identifier || !this.meta.type.identifier.value(this))
            return;
        var visited = new Set();
        var _persist = function (entity) {
            if (visited.has(entity))
                return;
            visited.add(entity);
            entity.meta.isNew = false;
            // visit reference properties with non-identifying types
            for (var _i = 0, _a = entity.meta.type.properties.filter(function (p) { return type_1.isEntityType(p.propertyType) && !p.propertyType.meta.identifier; }); _i < _a.length; _i++) {
                var property = _a[_i];
                var value = property.value(entity);
                if (Array.isArray(value))
                    value.forEach(function (item) { return _persist(item); });
                else if (value)
                    _persist(value);
            }
        };
        _persist(this);
    };
    Entity.ctorDepth = 0;
    return Entity;
}());
exports.Entity = Entity;
function isEntity(obj) {
    return obj && obj.meta && obj.meta.type && obj.meta.type.jstype && type_1.isEntityType(obj.meta.type.jstype);
}
exports.isEntity = isEntity;


/***/ }),

/***/ "../../libs/model.js/lib/event-scope.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventScope = exports.EVENT_SCOPE_DEFAULT_SETTINGS = void 0;
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
exports.EVENT_SCOPE_DEFAULT_SETTINGS = {
    maxExitingTransferCount: 100,
    maxDepth: 1000
};
var __lastEventScopeId = 0;
var EventScope = /** @class */ (function () {
    function EventScope(parent, maxExitingTransferCount, maxDepth, isActive) {
        if (isActive === void 0) { isActive = false; }
        this.current = null;
        this.parent = parent;
        this.current = null;
        this.isActive = isActive;
        this.settings = { maxExitingTransferCount: maxExitingTransferCount, maxDepth: maxDepth };
        this.onError = new events_1.Event();
        this._uid = ++__lastEventScopeId;
        this._depth = parent === null ? 1 : parent._depth + 1;
        this._onExit = new events_1.Event();
    }
    EventScope.create = function (_a) {
        var _b = _a.maxExitingTransferCount, maxExitingTransferCount = _b === void 0 ? exports.EVENT_SCOPE_DEFAULT_SETTINGS.maxExitingTransferCount : _b, _c = _a.maxDepth, maxDepth = _c === void 0 ? exports.EVENT_SCOPE_DEFAULT_SETTINGS.maxDepth : _c;
        return new EventScope(null, maxExitingTransferCount, maxDepth, false);
    };
    /**
     * Creates a new event scope, performs the action, then exits the scope
     * @param callback The action to perform within the new scope
     */
    EventScope.prototype.perform = function (callback) {
        var scope = new EventScope(this.current, this.settings.maxExitingTransferCount, this.settings.maxDepth, true);
        var isDisposing = false;
        try {
            this.current = scope;
            if (scope._depth >= this.settings.maxDepth)
                throw new Error("Exceeded max scope depth.");
            // Invoke the callback
            callback();
            // Dispose of the event scope
            isDisposing = true;
            this.current.dispose({ abort: false });
        }
        catch (e) {
            if (!isDisposing)
                this.current.dispose({ abort: true });
            var errorEvent = this.onError.publish(this, { error: e });
            if (errorEvent === undefined || !errorEvent.isDefaultPrevented)
                throw e;
        }
        finally {
            // Roll back to the closest active scope
            while (this.current && !this.current.isActive) {
                this.current = this.current.parent;
            }
        }
    };
    /**
     * Subscribes to the "exit" event of the current scope, or invokes immediately if there is not a current scope
     * @param handler The event handler to invoke when exited
     */
    EventScope.prototype.onExit = function (handler) {
        if (this.current === null) {
            // Immediately invoke the callback
            handler({ abort: false });
        }
        else if (!this.current.isActive) {
            throw new Error("The current event scope cannot be inactive.");
        }
        else {
            // Subscribe to the exit event
            this.current._onExit.subscribe(handler);
        }
    };
    EventScope.prototype.dispose = function (_a) {
        var _b = _a.abort, abort = _b === void 0 ? false : _b;
        if (!this.isActive) {
            throw new Error("The event scope cannot be exited because it is not active.");
        }
        try {
            if (abort) {
                this._onExit.publish(this, { abort: true });
            }
            else {
                var exitSubscriptions = helpers_1.getEventSubscriptions(this._onExit);
                if (exitSubscriptions && exitSubscriptions.length > 0) {
                    // If there is no parent scope, then go ahead and execute the 'exit' event
                    if (this.parent === null || !this.parent.isActive) {
                        // Record the initial "version" before starting to call subscribers
                        this._exitEventVersion = 0;
                        // Invoke all subscribers
                        this._onExit.publish(this, { abort: false });
                        // Delete the field to indicate that raising the exit event suceeded
                        delete this._exitEventVersion;
                    }
                    else {
                        try {
                            // Attempt to move subscribers to the parent scope
                            this.parent.receiveExitEventSubscribers(exitSubscriptions);
                        }
                        catch (e) {
                            this.dispose({ abort: true });
                            throw e;
                        }
                    }
                }
            }
            // Clear the events to ensure that they aren't inadvertantly raised again through this scope
            this._onExit.clear();
        }
        finally {
            // The event scope is no longer active
            this.isActive = false;
        }
    };
    EventScope.prototype.receiveExitEventSubscribers = function (subscriptions) {
        var _this = this;
        var maxNesting = this.settings.maxExitingTransferCount - 1;
        if (this._exitEventVersion >= maxNesting) {
            throw new Error("Exceeded max scope event transfer.");
        }
        // Move subscribers to the parent scope
        subscriptions.forEach(function (sub) { return _this._onExit.subscribe(sub.handler); });
        if (this._exitEventVersion !== undefined) {
            this._exitEventVersion++;
        }
    };
    EventScope.prototype.toString = function () {
        return "" + (this.parent ? this.parent.toString() + "->" : "") + this._uid;
    };
    return EventScope;
}());
exports.EventScope = EventScope;


/***/ }),

/***/ "../../libs/model.js/lib/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Event = exports.createEventObject = exports.EventObjectImpl = void 0;
var functor_1 = __webpack_require__("../../libs/model.js/lib/functor.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
var EventObjectImpl = /** @class */ (function () {
    function EventObjectImpl() {
        this.isDefaultPrevented = false;
    }
    EventObjectImpl.prototype.preventDefault = function () {
        this.isDefaultPrevented = true;
    };
    return EventObjectImpl;
}());
exports.EventObjectImpl = EventObjectImpl;
function createEventObject(args) {
    var eventObject = new EventObjectImpl();
    for (var prop in args) {
        if (helpers_1.hasOwnProperty(args, prop)) {
            eventObject[prop] = args[prop];
        }
    }
    return eventObject;
}
exports.createEventObject = createEventObject;
var Event = /** @class */ (function () {
    function Event(subscriptionChanged) {
        if (subscriptionChanged) {
            this.subscriptionChanged = subscriptionChanged;
        }
    }
    Event.prototype.publish = function (thisObject, args) {
        if (!this.func) {
            // No subscribers
            return;
        }
        var eventObject = createEventObject(args);
        this.func.call(thisObject, eventObject);
        return eventObject;
    };
    Event.prototype.subscribe = function (handler) {
        if (!this.func) {
            Object.defineProperty(this, "func", { value: functor_1.Functor$create() });
        }
        this.func.add(handler);
        if (this.subscriptionChanged)
            this.subscriptionChanged(this);
    };
    Event.prototype.subscribeOne = function (handler) {
        if (!this.func) {
            Object.defineProperty(this, "func", { value: functor_1.Functor$create() });
        }
        this.func.add(handler, null, true);
        if (this.subscriptionChanged)
            this.subscriptionChanged(this);
    };
    Event.prototype.hasSubscribers = function (handler) {
        if (!this.func) {
            return false;
        }
        var functorItems = (this.func._funcs);
        return handler ? functorItems.some(function (i) { return i.fn === handler; }) : functorItems.length > 0;
    };
    Event.prototype.unsubscribe = function (handler) {
        if (!this.func) {
            // No subscribers
            return;
        }
        this.func.remove(handler);
        if (this.subscriptionChanged)
            this.subscriptionChanged(this);
    };
    Event.prototype.clear = function () {
        if (!this.func) {
            // No subscribers
            return;
        }
        this.func.clear();
        if (this.subscriptionChanged)
            this.subscriptionChanged(this);
    };
    return Event;
}());
exports.Event = Event;


/***/ }),

/***/ "../../libs/model.js/lib/format-error.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatError = void 0;
var condition_type_1 = __webpack_require__("../../libs/model.js/lib/condition-type.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var condition_1 = __webpack_require__("../../libs/model.js/lib/condition.js");
var FormatError = /** @class */ (function () {
    function FormatError(format, message, invalidValue) {
        if (FormatError.ConditionType === null) {
            FormatError.ConditionType = new condition_type_1.ErrorConditionType("FormatError", "The value is not properly formatted.");
        }
        this.format = format;
        this.messageTemplate = message;
        this.invalidValue = invalidValue;
    }
    FormatError.prototype.createCondition = function (target, prop) {
        var _this = this;
        return new condition_1.Condition(FormatError.ConditionType, function () { return _this.messageTemplate.replace("{property}", property_1.evaluateLabel(prop, target)); }, target, this.format, [prop]);
    };
    FormatError.prototype.toString = function () {
        return this.invalidValue;
    };
    FormatError.ConditionType = null;
    return FormatError;
}());
exports.FormatError = FormatError;


/***/ }),

/***/ "../../libs/model.js/lib/format.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFormat = exports.ModelFormat = exports.CustomFormat = exports.Format = exports.getFormatTemplateParser = void 0;
var format_error_1 = __webpack_require__("../../libs/model.js/lib/format-error.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var property_chain_1 = __webpack_require__("../../libs/model.js/lib/property-chain.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
var model_1 = __webpack_require__("../../libs/model.js/lib/model.js");
var globalization_1 = __webpack_require__("../../libs/model.js/lib/globalization.js");
exports.getFormatTemplateParser = function () { return /\[([_a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][_.0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]*)(:(.+?))?\]/ig; };
var metaPathParser = /^(.*\.|)meta(\..*|)$/;
var Format = /** @class */ (function () {
    function Format(model, specifier, description, nullString, undefinedString) {
        if (description === void 0) { description = null; }
        if (nullString === void 0) { nullString = null; }
        if (undefinedString === void 0) { undefinedString = undefined; }
        if (true) {
            if (!model || !(model instanceof model_1.Model))
                throw new Error("Model must be provided.");
            if (!specifier || typeof specifier !== "string")
                throw new Error("Format specifier string must be provided.");
        }
        this.model = model;
        this.specifier = specifier;
        this.description = description;
        this.nullString = nullString || "";
        this.undefinedString = undefinedString || "";
    }
    Format.prototype.convert = function (val) {
        if (val === undefined) {
            return this.undefinedString;
        }
        if (val === null) {
            return this.nullString;
        }
        if (val instanceof format_error_1.FormatError) {
            return val.invalidValue;
        }
        return this.convertToString(val);
    };
    Format.prototype.convertBack = function (text) {
        if (text === null || text === this.nullString) {
            return null;
        }
        if (text === undefined || text === this.undefinedString) {
            return;
        }
        if (typeof text === "string") {
            text = text.trim();
            if (text.length === 0) {
                return null;
            }
        }
        return this.convertFromString(text);
    };
    Format.prototype.toString = function () {
        return this.specifier;
    };
    Format.create = function (model, options) {
        return new CustomFormat(model, options);
    };
    Format.fromTemplate = function (type, template, formatEval) {
        return new ModelFormat(type, template, formatEval);
    };
    Format.hasTokens = function (template) {
        return exports.getFormatTemplateParser().test(template);
    };
    return Format;
}());
exports.Format = Format;
var CustomFormat = /** @class */ (function (_super) {
    __extends(CustomFormat, _super);
    function CustomFormat(model, options) {
        var _this = _super.call(this, model, options.specifier, options.description, options.nullString, options.undefinedString) || this;
        _this.customConvert = options.convert;
        _this.customConvertBack = options.convertBack;
        _this.paths = options.paths;
        return _this;
    }
    CustomFormat.prototype.convertToString = function (val) {
        if (!this.customConvert) {
            return val;
        }
        return this.customConvert(val);
    };
    CustomFormat.prototype.convertFromString = function (text) {
        if (!this.customConvertBack) {
            return text;
        }
        try {
            return this.customConvertBack(text);
        }
        catch (err) {
            if (err instanceof format_error_1.FormatError) {
                return err;
            }
            var formatError = new format_error_1.FormatError(this, this.description ?
                this.model.getResource("format-with-description").replace("{description}", this.description) :
                this.model.getResource("format-without-description"), text);
            return formatError;
        }
    };
    return CustomFormat;
}(Format));
exports.CustomFormat = CustomFormat;
var ModelFormat = /** @class */ (function (_super) {
    __extends(ModelFormat, _super);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function ModelFormat(type, specifier, formatEval) {
        var _this = _super.call(this, type.model, specifier) || this;
        _this.type = type;
        _this.formatEval = formatEval;
        // Compile the model format when the model is ready
        _this.model.ready(function () { return _this.compile(); }, { enqueueWhileProcessing: false });
        return _this;
    }
    ModelFormat.prototype.compile = function () {
        if (!this.tokens) {
            this.paths = [];
            this.tokens = [];
            this.template = this.specifier;
            // Replace escaped \, [ or ] characters with placeholders
            var template = this.template.replace(/\\\\/g, "\u0000").replace(/\\\[/g, "\u0001").replace(/\\\]/g, "\u0002");
            var index = 0;
            var formatTemplateParser = exports.getFormatTemplateParser();
            var match = formatTemplateParser.exec(template);
            // Process each token match
            while (match) {
                var path = match[1];
                var propertyPath = path;
                // See if the path represents a property path in the model
                var propertyDefaultFormat = null;
                try {
                    // Detect property path followed by ".meta..."
                    propertyPath = propertyPath.replace(metaPathParser, "$1");
                    var isMetaPath = propertyPath.length > 0 && propertyPath.length < path.length;
                    var allowFormat = !isMetaPath;
                    if (isMetaPath) {
                        propertyPath = propertyPath.substring(0, propertyPath.length - 1);
                    }
                    // If a property path remains, then attempt to find a default format and paths for the format
                    if (propertyPath) {
                        var property = this.type.getPath(propertyPath);
                        if (property) {
                            // Only allow formats for a property path that is not followed by ".meta..."
                            if (allowFormat) {
                                // Determine the default property format
                                if (property instanceof property_1.Property) {
                                    propertyDefaultFormat = property.format;
                                }
                                else if (property instanceof property_chain_1.PropertyChain) {
                                    var lastProperty = property.lastProperty;
                                    propertyDefaultFormat = lastProperty.format;
                                }
                                // Ensure the target format is compiled so we can collect its paths
                                if (propertyDefaultFormat instanceof ModelFormat)
                                    propertyDefaultFormat.compile();
                                // If the path references one or more entity properties, include paths for the property format. Otherwise, just add the path.
                                if (propertyDefaultFormat && propertyDefaultFormat instanceof Format && propertyDefaultFormat !== this && propertyDefaultFormat.paths.length > 0)
                                    Array.prototype.push.apply(this.paths, propertyDefaultFormat.paths.map(function (p) { return propertyPath + "." + p; }));
                                else
                                    this.paths.push(propertyPath);
                            }
                            // Formats are not allowed, so just add the path
                            else {
                                this.paths.push(propertyPath);
                            }
                        }
                    }
                }
                catch (e) {
                    //
                }
                // Create a token for the current match, including the prefix, path and format
                this.tokens.push({
                    prefix: template.substring(index, formatTemplateParser.lastIndex - match[0].length).replace(/\u0000/g, "\\").replace(/\u0001/g, "[").replace(/\u0002/g, "]"),
                    path: path,
                    format: match[3] ? match[3].replace(/\u0000/g, "\\").replace(/\u0001/g, "[").replace(/\u0002/g, "]") : propertyDefaultFormat
                });
                // Track the last index and find the next match
                index = formatTemplateParser.lastIndex;
                match = formatTemplateParser.exec(template);
            }
            // Capture any trailing literal text as a token without a path
            if (index < template.length) {
                this.tokens.push({
                    prefix: template.substring(index).replace(/\u0000/g, "\\").replace(/\u0001/g, "[").replace(/\u0002/g, "]")
                });
            }
        }
    };
    ModelFormat.prototype.convertToString = function (obj) {
        var _this = this;
        if (obj === null || obj === undefined) {
            return "";
        }
        var convertTokens = function (obj) {
            var result = "";
            for (var index = 0; index < _this.tokens.length; index++) {
                var token = _this.tokens[index];
                if (token.prefix)
                    result = result + token.prefix;
                if (token.path) {
                    var value = helpers_1.evalPath(obj, token.path);
                    if (value === undefined || value === null) {
                        value = "";
                    }
                    else if (token.format) {
                        var format = void 0;
                        if (token.format instanceof Format) {
                            format = token.format;
                        }
                        else if (typeof token.format === "string") {
                            format = token.format = obj.meta.type.model.getFormat(value.constructor, token.format);
                        }
                        value = format.convert(value);
                    }
                    if (_this.formatEval)
                        value = _this.formatEval(value);
                    if (Array.isArray(value))
                        value = value.join(", ");
                    result = result + value;
                }
            }
            return result;
        };
        if (Array.isArray(obj))
            return obj.map(function (item) { return convertTokens(item); }).join(", ");
        else
            return convertTokens(obj);
    };
    ModelFormat.prototype.convertFromString = function () {
        throw new Error("Cannot convert from a format string back to an entity.");
    };
    return ModelFormat;
}(Format));
exports.ModelFormat = ModelFormat;
function createFormat(model, type, format) {
    if (type === Date) {
        // Add support for g and G that are not natively supported by the format and parse methods
        if (format === "g")
            format = globalization_1.expandDateFormat(model.$culture.dateTimeFormat, "d") + " " + globalization_1.expandDateFormat(model.$culture.dateTimeFormat, "t");
        else if (format === "G")
            format = globalization_1.expandDateFormat(model.$culture.dateTimeFormat, "d") + " " + globalization_1.expandDateFormat(model.$culture.dateTimeFormat, "T");
        return Format.create(model, {
            specifier: format,
            description: "",
            paths: [],
            convert: function (value) {
                return globalization_1.formatDate(value, format, model.$culture);
            },
            convertBack: function (str) {
                var date;
                // Time value, set default date to 1/1/1970 to easily compare time values
                if (format === "t") {
                    var timeFormat = globalization_1.expandDateFormat(model.$culture.dateTimeFormat, "d") + " " + globalization_1.expandDateFormat(model.$culture.dateTimeFormat, "t");
                    var startDate = globalization_1.formatDate(new Date(1970, 0, 1), "d", model.$culture);
                    date = globalization_1.parseDate(startDate + " " + str, model.$culture, [timeFormat]);
                }
                else
                    date = globalization_1.parseDate(str, model.$culture, [format]);
                if (date === null)
                    throw new Error("Invalid date format");
                return date;
            }
        });
    }
    else if (type === Number) {
        var isCurrencyFormat = format.match(/[$c]+/i);
        var isPercentageFormat = format.match(/[%p]+/i);
        var isIntegerFormat = format.match(/[dnfg]0/i);
        return Format.create(model, {
            specifier: format,
            description: isCurrencyFormat ? model.getResource("format-currency") : isPercentageFormat ? model.getResource("format-percentage") : isIntegerFormat ? model.getResource("format-integer") : model.getResource("format-decimal"),
            convert: function (val) {
                // Default to browser formatting for general format
                if (format.toLowerCase() === "g")
                    return val.toString();
                // Otherwise, use the localized format
                return globalization_1.formatNumber(val, format, model.$culture);
            },
            convertBack: function (str) {
                var result = globalization_1.parseNumber(str, globalization_1.getNumberStyle(format), model.$culture);
                if (isNaN(result))
                    throw new Error("Invalid format");
                return result;
            }
        });
    }
    else if (type === Boolean) {
        // Format strings used for true, false, and null (or undefined) values
        var trueFormat_1, falseFormat_1, nullFormat_1;
        if (format && format.toLowerCase() === "g") {
            trueFormat_1 = "True";
            falseFormat_1 = "False";
            nullFormat_1 = "";
        }
        else {
            var formats = format.split(";");
            trueFormat_1 = formats.length > 0 ? formats[0] : "";
            falseFormat_1 = formats.length > 1 ? formats[1] : "";
            nullFormat_1 = formats.length > 2 ? formats[2] : "";
        }
        /**
         * Determines if the given string matches the given format option
         * @param str The text to check
         * @param formatValue The true or false format option
         */
        var isFormatMatch_1 = function (str, formatValue) {
            return str.trim().toLowerCase() === formatValue.trim().toLowerCase();
        };
        return Format.create(model, {
            specifier: format,
            convert: function (val) {
                if (val === true) {
                    return trueFormat_1;
                }
                else if (val === false) {
                    return falseFormat_1;
                }
                else {
                    return nullFormat_1;
                }
            },
            convertBack: function (str) {
                if (isFormatMatch_1(str, trueFormat_1))
                    return true;
                else if (isFormatMatch_1(str, falseFormat_1))
                    return false;
                else
                    return null;
            }
        });
    }
    else {
        console.log("WARN: Unable to create format for type '" + helpers_1.getConstructorName(type) + "'.");
    }
}
exports.createFormat = createFormat;


/***/ }),

/***/ "../../libs/model.js/lib/functor.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Functor$clear = exports.Functor$isEmpty = exports.Functor$remove = exports.Functor$add = exports.FunctorItem$new = exports.Functor$create = void 0;
function Functor$create(returns) {
    if (returns === void 0) { returns = false; }
    var funcs = [];
    // TODO: Detect functor invocation resulting in continually adding subscribers
    function Functor$fn() {
        var returnsArray;
        if (returns) {
            returnsArray = [];
        }
        for (var i = 0; i < funcs.length; ++i) {
            var item = funcs[i];
            // Don't re-run one-time subscriptions that have already been applied.
            if (item.applied === true) {
                continue;
            }
            // Ensure that there is either no filter or the filter passes.
            if (!item.filter || item.filter.apply(this, arguments) === true) {
                // If handler is set to execute once,
                // remove the handler before calling.
                if (item.once === true) {
                    // Mark as applied but leave item in array to avoid potential
                    // problems due to re-entry into event invalidating iteration
                    // index. In some cases re-entry would be a red-flag, but for
                    // "global" events, where the context of the event is derived
                    // from the arguments, the event could easily be re-entered
                    // in a different context with different arguments.
                    item.applied = true;
                }
                // Call the handler function.
                var returnValue = item.fn.apply(this, arguments);
                if (returns) {
                    returnsArray.push(returnValue);
                }
            }
        }
        if (returns) {
            return returnsArray;
        }
    }
    ;
    var f = Functor$fn;
    f._funcs = funcs;
    f.add = Functor$add;
    f.remove = Functor$remove;
    f.isEmpty = Functor$isEmpty;
    f.clear = Functor$clear;
    return f;
}
exports.Functor$create = Functor$create;
function FunctorItem$new(fn, filter, once) {
    if (filter === void 0) { filter = null; }
    if (once === void 0) { once = false; }
    var item = { fn: fn };
    if (filter != null) {
        item.filter = filter;
    }
    if (once != null) {
        item.once = once;
    }
    return item;
}
exports.FunctorItem$new = FunctorItem$new;
function Functor$add(fn, filter, once) {
    if (filter === void 0) { filter = null; }
    if (once === void 0) { once = false; }
    var item = FunctorItem$new(fn, filter, once);
    this._funcs.push(item);
}
exports.Functor$add = Functor$add;
function Functor$remove(fn) {
    for (var i = this._funcs.length - 1; i >= 0; --i) {
        if (this._funcs[i].fn === fn) {
            this._funcs.splice(i, 1);
            return true;
        }
    }
    return false;
}
exports.Functor$remove = Functor$remove;
function Functor$isEmpty(args) {
    if (args === void 0) { args = null; }
    return !this._funcs.some(function (item) { return item.applied !== true && (!args || !item.filter || item.filter.apply(this, args)); }, this);
}
exports.Functor$isEmpty = Functor$isEmpty;
function Functor$clear() {
    this._funcs.length = 0;
}
exports.Functor$clear = Functor$clear;


/***/ }),

/***/ "../../libs/model.js/lib/globalization.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Based on portions of MicrosoftAjax.debug.js (v3.0.31106.1) from System.Web.Extensions.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureInfo = exports.formatNumber = exports._parseNumber = exports.parseNumber = exports.getNumberStyle = exports.formatDate = exports.parseDate = exports.expandDateFormat = void 0;
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
/**
 * Internally used resource strings
 * TODO: Make these localizable resources?
 */
var Res = {
    "format": "One of the identified items was in an invalid format.",
    "formatBadFormatSpecifier": "Format specifier was invalid.",
    "formatInvalidString": "Input string was not in a correct format."
};
/**
 * A class for building a string programmatically
 */
var StringBuilder = /** @class */ (function () {
    function StringBuilder(initialText) {
        this._parts = (typeof (initialText) !== "undefined" && initialText !== null && initialText !== "") ? [initialText.toString()] : [];
        this._value = {};
        this._len = 0;
    }
    StringBuilder.prototype.append = function (text) {
        this._parts.push(text);
        return this;
    };
    StringBuilder.prototype.appendLine = function (text) {
        this._parts.push(((typeof (text) === "undefined") || (text === null) || (text === "")) ? "\r\n" : (text + "\r\n"));
        return this;
    };
    StringBuilder.prototype.clear = function () {
        this._parts = [];
        this._value = {};
        this._len = 0;
    };
    StringBuilder.prototype.isEmpty = function () {
        if (this._parts.length === 0)
            return true;
        return this.toString() === "";
    };
    StringBuilder.prototype.toString = function (separator) {
        separator = separator || "";
        var parts = this._parts;
        if (this._len !== parts.length) {
            this._value = {};
            this._len = parts.length;
        }
        var val = this._value;
        if (typeof (val[separator]) === "undefined") {
            if (separator !== "") {
                for (var i = 0; i < parts.length;) {
                    if ((typeof (parts[i]) === "undefined") || (parts[i] === "") || (parts[i] === null)) {
                        parts.splice(i, 1);
                    }
                    else {
                        i++;
                    }
                }
            }
            val[separator] = this._parts.join(separator);
        }
        return val[separator];
    };
    return StringBuilder;
}());
/**
 * Subclass of error for invalid format strings
 */
var FormatError = /** @class */ (function (_super) {
    __extends(FormatError, _super);
    function FormatError(message) {
        var _this = this;
        var displayMessage = "Sys.FormatException: " + (message || Res.format);
        _this = _super.call(this, displayMessage) || this;
        _this.name = "Sys.FormatException";
        return _this;
    }
    return FormatError;
}(Error));
function date$appendPreOrPostMatch(preMatch, strBuilder) {
    var quoteCount = 0;
    var escaped = false;
    for (var i = 0, il = preMatch.length; i < il; i++) {
        var c = preMatch.charAt(i);
        switch (c) {
            case "'":
                if (escaped)
                    strBuilder.append("'");
                else
                    quoteCount++;
                escaped = false;
                break;
            case "\\":
                if (escaped)
                    strBuilder.append("\\");
                escaped = !escaped;
                break;
            default:
                strBuilder.append(c);
                escaped = false;
                break;
        }
    }
    return quoteCount;
}
function expandDateFormat(dtf, format) {
    if (!format) {
        format = "F";
    }
    var len = format.length;
    if (len === 1) {
        switch (format) {
            case "d":
                return dtf["ShortDatePattern"];
            case "D":
                return dtf["LongDatePattern"];
            case "t":
                return dtf["ShortTimePattern"];
            case "T":
                return dtf["LongTimePattern"];
            case "f":
                return dtf["LongDatePattern"] + " " + dtf["ShortTimePattern"];
            case "F":
                return dtf["FullDateTimePattern"];
            case "g":
                return dtf["ShortDatePattern"] + " " + dtf["ShortTimePattern"];
            case "G":
                return dtf["ShortDatePattern"] + " " + dtf["LongTimePattern"];
            case "M":
            case "m":
                return dtf["MonthDayPattern"];
            case "s":
                return dtf["SortableDateTimePattern"];
            case "Y":
            case "y":
                return dtf["YearMonthPattern"];
            default:
                throw new FormatError(Res.formatInvalidString);
        }
    }
    else if ((len === 2) && (format.charAt(0) === "%")) {
        format = format.charAt(1);
    }
    return format;
}
exports.expandDateFormat = expandDateFormat;
function expandYear(dtf, year) {
    var now = new Date();
    var era = getEra(now);
    if (year < 100) {
        var curr = getEraYear(now, dtf, era);
        year += curr - (curr % 100);
        if (year > dtf.Calendar.TwoDigitYearMax) {
            year -= 100;
        }
    }
    return year;
}
function getEra(date, eras) {
    if (!eras)
        return 0;
    var start;
    var ticks = date.getTime();
    for (var i = 0, l = eras.length; i < l; i += 4) {
        start = eras[i + 2];
        if ((start === null) || (ticks >= start)) {
            return i;
        }
    }
    return 0;
}
function getEraYear(date, dtf, era, sortable) {
    var year = date.getFullYear();
    if (!sortable && dtf.Eras) {
        year -= dtf.Eras[era + 3];
    }
    return year;
}
function getDateParseRegExp(dtf, format) {
    // Get or initialize the regex cache
    var cache;
    if (!(cache = dtf._parseRegExp)) {
        cache = dtf._parseRegExp = {};
    }
    // Return a cached format if available
    if (cache[format]) {
        return cache[format];
    }
    var expFormat = expandDateFormat(dtf, format);
    // eslint-disable-next-line no-useless-escape
    expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");
    var regexp = new StringBuilder("^");
    var groups = [];
    var index = 0;
    var quoteCount = 0;
    var tokenRegExp = getDateTokenRegExp();
    var match;
    while ((match = tokenRegExp.exec(expFormat)) !== null) {
        var preMatch = expFormat.slice(index, match.index);
        index = tokenRegExp.lastIndex;
        quoteCount += date$appendPreOrPostMatch(preMatch, regexp);
        if ((quoteCount % 2) === 1) {
            regexp.append(match[0]);
            continue;
        }
        switch (match[0]) {
            case "dddd":
            case "ddd":
            case "MMMM":
            case "MMM":
            case "gg":
            case "g":
                regexp.append("(\\D+)");
                break;
            case "tt":
            case "t":
                regexp.append("(\\D*)");
                break;
            case "yyyy":
                regexp.append("(\\d{4})");
                break;
            case "fff":
                regexp.append("(\\d{3})");
                break;
            case "ff":
                regexp.append("(\\d{2})");
                break;
            case "f":
                regexp.append("(\\d)");
                break;
            case "dd":
            case "d":
            case "MM":
            case "M":
            case "yy":
            case "y":
            case "HH":
            case "H":
            case "hh":
            case "h":
            case "mm":
            case "m":
            case "ss":
            case "s":
                regexp.append("(\\d\\d?)");
                break;
            case "zzz":
                regexp.append("([+-]?\\d\\d?:\\d{2})");
                break;
            case "zz":
            case "z":
                regexp.append("([+-]?\\d\\d?)");
                break;
            case "/":
                regexp.append("(\\" + dtf.DateSeparator + ")");
                break;
        }
        groups.push(match[0]);
    }
    date$appendPreOrPostMatch(expFormat.slice(index), regexp);
    regexp.append("$");
    var regexpStr = regexp.toString().replace(/\s+/g, "\\s+");
    var parseRegExp = { regExp: regexpStr, groups: groups };
    cache[format] = parseRegExp;
    return parseRegExp;
}
;
function getDateTokenRegExp() {
    return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
}
/**
 * Parses the given text as a date
 * @param value The text to parse
 * @param cultureInfo The culture
 * @param formats An optional list of formats to use
 */
function parseDate(value, cultureInfo, formats) {
    var formatsSpecified = false;
    // Try to parse using format strings if specified
    if (formats) {
        for (var i = 0; i < formats.length; i++) {
            var format = formats[i];
            if (format) {
                formatsSpecified = true;
                var date = parseDateExact(value, format, cultureInfo);
                if (date)
                    return date;
            }
        }
    }
    // Use the culture's date/time formats if formats were not specified
    if (!formatsSpecified) {
        formats = cultureInfo._getDateTimeFormats();
        for (var i = 0; i < formats.length; i++) {
            var date = parseDateExact(value, formats[i], cultureInfo);
            if (date)
                return date;
        }
    }
    return null;
}
exports.parseDate = parseDate;
function parseDateExact(value, format, cultureInfo) {
    value = value.trim();
    var dtf = cultureInfo.dateTimeFormat;
    var parseInfo = getDateParseRegExp(dtf, format);
    var match = new RegExp(parseInfo.regExp).exec(value);
    if (match === null)
        return null;
    var groups = parseInfo.groups;
    var era = null;
    var year = null;
    var month = null;
    var date = null;
    var weekDay = null;
    var hour = 0;
    var hourOffset;
    var min = 0;
    var sec = 0;
    var msec = 0;
    var tzMinOffset = null;
    var pmHour = false;
    for (var j = 0, jl = groups.length; j < jl; j++) {
        var matchGroup = match[j + 1];
        if (matchGroup) {
            switch (groups[j]) {
                case "dd":
                case "d":
                    date = parseInt(matchGroup, 10);
                    if ((date < 1) || (date > 31))
                        return null;
                    break;
                case "MMMM":
                    month = cultureInfo._getMonthIndex(matchGroup);
                    if ((month < 0) || (month > 11))
                        return null;
                    break;
                case "MMM":
                    month = cultureInfo._getMonthIndex(matchGroup, true);
                    if ((month < 0) || (month > 11))
                        return null;
                    break;
                case "M":
                case "MM":
                    month = parseInt(matchGroup, 10) - 1;
                    if ((month < 0) || (month > 11))
                        return null;
                    break;
                case "y":
                case "yy":
                    year = expandYear(dtf, parseInt(matchGroup, 10));
                    if ((year < 0) || (year > 9999))
                        return null;
                    break;
                case "yyyy":
                    year = parseInt(matchGroup, 10);
                    if ((year < 0) || (year > 9999))
                        return null;
                    break;
                case "h":
                case "hh":
                    hour = parseInt(matchGroup, 10);
                    if (hour === 12)
                        hour = 0;
                    if ((hour < 0) || (hour > 11))
                        return null;
                    break;
                case "H":
                case "HH":
                    hour = parseInt(matchGroup, 10);
                    if ((hour < 0) || (hour > 23))
                        return null;
                    break;
                case "m":
                case "mm":
                    min = parseInt(matchGroup, 10);
                    if ((min < 0) || (min > 59))
                        return null;
                    break;
                case "s":
                case "ss":
                    sec = parseInt(matchGroup, 10);
                    if ((sec < 0) || (sec > 59))
                        return null;
                    break;
                case "tt":
                case "t":
                    var upperToken = matchGroup.toUpperCase();
                    pmHour = (upperToken === dtf.PMDesignator.toUpperCase());
                    if (!pmHour && (upperToken !== dtf.AMDesignator.toUpperCase()))
                        return null;
                    break;
                case "f":
                    msec = parseInt(matchGroup, 10) * 100;
                    if ((msec < 0) || (msec > 999))
                        return null;
                    break;
                case "ff":
                    msec = parseInt(matchGroup, 10) * 10;
                    if ((msec < 0) || (msec > 999))
                        return null;
                    break;
                case "fff":
                    msec = parseInt(matchGroup, 10);
                    if ((msec < 0) || (msec > 999))
                        return null;
                    break;
                case "dddd":
                    weekDay = cultureInfo._getDayIndex(matchGroup);
                    if ((weekDay < 0) || (weekDay > 6))
                        return null;
                    break;
                case "ddd":
                    weekDay = cultureInfo._getDayIndex(matchGroup, true);
                    if ((weekDay < 0) || (weekDay > 6))
                        return null;
                    break;
                case "zzz":
                    var offsets = matchGroup.split(/:/);
                    if (offsets.length !== 2)
                        return null;
                    hourOffset = parseInt(offsets[0], 10);
                    if ((hourOffset < -12) || (hourOffset > 13))
                        return null;
                    var minOffset = parseInt(offsets[1], 10);
                    if ((minOffset < 0) || (minOffset > 59))
                        return null;
                    tzMinOffset = (hourOffset * 60) + (matchGroup.startsWith("-") ? -minOffset : minOffset);
                    break;
                case "z":
                case "zz":
                    hourOffset = parseInt(matchGroup, 10);
                    if ((hourOffset < -12) || (hourOffset > 13))
                        return null;
                    tzMinOffset = hourOffset * 60;
                    break;
                case "g":
                case "gg":
                    var eraName = matchGroup;
                    if (!eraName || !dtf.Eras)
                        return null;
                    eraName = eraName.toLowerCase().trim();
                    for (var i = 0, l = dtf.Eras.length; i < l; i += 4) {
                        if (eraName === dtf.Eras[i + 1].toLowerCase()) {
                            era = i;
                            break;
                        }
                    }
                    if (era === null)
                        return null;
                    break;
            }
        }
    }
    var result = new Date();
    var defaultYear;
    var convert = dtf.Calendar.convert;
    // If none are specified, set to todays date to 1/1/1970
    if (year == null && month == null && date == null) {
        year = 1970;
        month = 0;
        date = 1;
    }
    else {
        if (convert) {
            defaultYear = convert.fromGregorian(result)[0];
        }
        else {
            defaultYear = result.getFullYear();
        }
        if (year === null) {
            year = defaultYear;
        }
        else if (dtf.Eras) {
            year += dtf.Eras[(era || 0) + 3];
        }
        if (month === null) {
            month = 0;
        }
        if (date === null) {
            date = 1;
        }
    }
    if (convert) {
        result = convert.toGregorian(year, month, date);
        if (result === null)
            return null;
    }
    else {
        result.setFullYear(year, month, date);
        if (result.getDate() !== date)
            return null;
        if ((weekDay !== null) && (result.getDay() !== weekDay)) {
            return null;
        }
    }
    if (pmHour && (hour < 12)) {
        hour += 12;
    }
    result.setHours(hour, min, sec, msec);
    if (tzMinOffset !== null) {
        var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
        result.setHours(result.getHours() + parseInt((adjustedMin / 60).toString(), 10), adjustedMin % 60);
    }
    return result;
}
function addLeadingZero(num) {
    if (num < 10) {
        return "0" + num;
    }
    return num.toString();
}
function addLeadingZeros(num) {
    if (num < 10) {
        return "00" + num;
    }
    if (num < 100) {
        return "0" + num;
    }
    return num.toString();
}
function padYear(year) {
    if (year < 10) {
        return "000" + year;
    }
    else if (year < 100) {
        return "00" + year;
    }
    else if (year < 1000) {
        return "0" + year;
    }
    return year.toString();
}
/**
 * Formats a date as text using the given format string and culture
 * @param date The date to format
 * @param format The format specifier
 * @param cultureInfo The culture
 */
function formatDate(date, format, cultureInfo) {
    if (!date)
        return null;
    var dtf = cultureInfo.dateTimeFormat;
    var convert = dtf.Calendar.convert;
    if (!format || !format.length || (format === "i")) {
        if (cultureInfo && cultureInfo.name.length) {
            if (convert) {
                return formatDate(date, dtf.FullDateTimePattern, cultureInfo);
            }
            else {
                var eraDate = new Date(date.getTime());
                var era = getEra(date, dtf.Eras);
                eraDate.setFullYear(getEraYear(date, dtf, era));
                return eraDate.toLocaleString();
            }
        }
        else {
            return date.toString();
        }
    }
    var eras = dtf.Eras;
    var sortable = (format === "s");
    format = expandDateFormat(dtf, format);
    var ret = new StringBuilder();
    var hour;
    var foundDay;
    var checkedDay;
    var dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g;
    var hasDay = function hasDay() {
        if (foundDay || checkedDay) {
            return foundDay;
        }
        foundDay = dayPartRegExp.test(format);
        checkedDay = true;
        return foundDay;
    };
    var quoteCount = 0;
    var tokenRegExp = getDateTokenRegExp();
    var converted;
    if (!sortable && convert) {
        converted = convert.fromGregorian(date);
    }
    for (;;) {
        var index = tokenRegExp.lastIndex;
        var ar = tokenRegExp.exec(format);
        var preMatch = format.slice(index, ar ? ar.index : format.length);
        quoteCount += date$appendPreOrPostMatch(preMatch, ret);
        if (!ar)
            break;
        if ((quoteCount % 2) === 1) {
            ret.append(ar[0]);
            continue;
        }
        var getDatePart = function getDatePart(date, part) {
            if (converted) {
                return converted[part];
            }
            switch (part) {
                case 0: return date.getFullYear();
                case 1: return date.getMonth();
                case 2: return date.getDate();
            }
        };
        switch (ar[0]) {
            case "dddd":
                ret.append(dtf.DayNames[date.getDay()]);
                break;
            case "ddd":
                ret.append(dtf.AbbreviatedDayNames[date.getDay()]);
                break;
            case "dd":
                foundDay = true;
                ret.append(addLeadingZero(getDatePart(date, 2)));
                break;
            case "d":
                foundDay = true;
                ret.append(getDatePart(date, 2).toString());
                break;
            case "MMMM":
                ret.append((dtf.MonthGenitiveNames && hasDay())
                    ? dtf.MonthGenitiveNames[getDatePart(date, 1)]
                    : dtf.MonthNames[getDatePart(date, 1)]);
                break;
            case "MMM":
                ret.append((dtf.AbbreviatedMonthGenitiveNames && hasDay())
                    ? dtf.AbbreviatedMonthGenitiveNames[getDatePart(date, 1)]
                    : dtf.AbbreviatedMonthNames[getDatePart(date, 1)]);
                break;
            case "MM":
                ret.append(addLeadingZero(getDatePart(date, 1) + 1));
                break;
            case "M":
                ret.append((getDatePart(date, 1) + 1).toString());
                break;
            case "yyyy":
                ret.append(padYear(converted ? converted[0] : getEraYear(date, dtf, getEra(date, eras), sortable)));
                break;
            case "yy":
                ret.append(addLeadingZero((converted ? converted[0] : getEraYear(date, dtf, getEra(date, eras), sortable)) % 100));
                break;
            case "y":
                ret.append(((converted ? converted[0] : getEraYear(date, dtf, getEra(date, eras), sortable)) % 100).toString());
                break;
            case "hh":
                hour = date.getHours() % 12;
                if (hour === 0)
                    hour = 12;
                ret.append(addLeadingZero(hour));
                break;
            case "h":
                hour = date.getHours() % 12;
                if (hour === 0)
                    hour = 12;
                ret.append(hour.toString());
                break;
            case "HH":
                ret.append(addLeadingZero(date.getHours()));
                break;
            case "H":
                ret.append(date.getHours().toString());
                break;
            case "mm":
                ret.append(addLeadingZero(date.getMinutes()));
                break;
            case "m":
                ret.append(date.getMinutes().toString());
                break;
            case "ss":
                ret.append(addLeadingZero(date.getSeconds()));
                break;
            case "s":
                ret.append(date.getSeconds().toString());
                break;
            case "tt":
                ret.append((date.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator);
                break;
            case "t":
                ret.append(((date.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator).charAt(0));
                break;
            case "f":
                ret.append(addLeadingZeros(date.getMilliseconds()).charAt(0));
                break;
            case "ff":
                ret.append(addLeadingZeros(date.getMilliseconds()).substr(0, 2));
                break;
            case "fff":
                ret.append(addLeadingZeros(date.getMilliseconds()));
                break;
            case "z":
                hour = date.getTimezoneOffset() / 60;
                ret.append(((hour <= 0) ? "+" : "-") + Math.floor(Math.abs(hour)));
                break;
            case "zz":
                hour = date.getTimezoneOffset() / 60;
                ret.append(((hour <= 0) ? "+" : "-") + addLeadingZero(Math.floor(Math.abs(hour))));
                break;
            case "zzz":
                hour = date.getTimezoneOffset() / 60;
                ret.append(((hour <= 0) ? "+" : "-") + addLeadingZero(Math.floor(Math.abs(hour))) +
                    ":" + addLeadingZero(Math.abs(date.getTimezoneOffset() % 60)));
                break;
            case "g":
            case "gg":
                if (dtf.Eras) {
                    ret.append(dtf.Eras[getEra(date, eras) + 1]);
                }
                break;
            case "/":
                ret.append(dtf.DateSeparator);
                break;
        }
    }
    return ret.toString();
}
exports.formatDate = formatDate;
function getNumberStyle(format) {
    format = format || "";
    if (format.match(/[$c]+/i))
        return "Currency";
    if (format.match(/[%p]+/i))
        return "Percent";
    if (format.match(/[dnfg]0/i))
        return "Integer";
    return "Number";
}
exports.getNumberStyle = getNumberStyle;
function parseNumber(value, style, cultureInfo) {
    // Handle use of () to denote negative numbers
    var sign = 1;
    if (value.match(/^\(.*\)$/)) {
        value = value.substring(1, value.length - 1);
        sign = -1;
    }
    var result;
    // Remove currency symbols before parsing
    if (style === "Currency") {
        result = _parseNumber(value.replace(cultureInfo.numberFormat.CurrencySymbol, ""), cultureInfo) * sign;
        // if there is a decimal place, check the precision isnt greater than allowed for currency.
        // Floating points in js can be skewed under certain circumstances, we are just checking the decimals instead of multiplying results.
        var resultvalue = result.toString();
        if (resultvalue.indexOf(".") > -1 && (resultvalue.length - (resultvalue.indexOf(".") + 1)) > cultureInfo.numberFormat.CurrencyDecimalDigits) {
            result = NaN;
        }
    }
    // Remove percentage symbols before parsing and divide by 100
    else if (style === "Percent")
        result = _parseNumber(value.replace(cultureInfo.numberFormat.PercentSymbol, ""), cultureInfo) / 100 * sign;
    // Ensure integers are actual whole numbers
    else if (style === "Integer" && !isInteger(_parseNumber(value, cultureInfo)))
        result = NaN;
    // Just parse a simple number
    else
        result = _parseNumber(value, cultureInfo) * sign;
    return result;
}
exports.parseNumber = parseNumber;
function isInteger(obj) {
    return typeof (obj) === "number" && !isNaN(obj) && /^-?[0-9]{1,10}$/.test(obj.toString()) && (obj >= -2147483648 && obj <= 2147483647);
}
/**
 * Parses the given text as a number
 * @param value The text to parse
 * @param cultureInfo The culture
 */
function _parseNumber(value, cultureInfo) {
    value = value.trim();
    if (value.match(/^[+-]?infinity$/i)) {
        return parseFloat(value);
    }
    if (value.match(/^0x[a-f0-9]+$/i)) {
        return parseInt(value);
    }
    var numFormat = cultureInfo.numberFormat;
    var signInfo = parseNumberNegativePattern(value, numFormat, numFormat.NumberNegativePattern);
    var sign = signInfo[0];
    var num = signInfo[1];
    if ((sign === "") && (numFormat.NumberNegativePattern !== 1)) {
        signInfo = parseNumberNegativePattern(value, numFormat, 1);
        sign = signInfo[0];
        num = signInfo[1];
    }
    if (sign === "")
        sign = "+";
    var exponent;
    var intAndFraction;
    var exponentPos = num.indexOf("e");
    if (exponentPos < 0)
        exponentPos = num.indexOf("E");
    if (exponentPos < 0) {
        intAndFraction = num;
        exponent = null;
    }
    else {
        intAndFraction = num.substr(0, exponentPos);
        exponent = num.substr(exponentPos + 1);
    }
    var integer;
    var fraction;
    var decimalPos = intAndFraction.indexOf(numFormat.NumberDecimalSeparator);
    if (decimalPos < 0) {
        integer = intAndFraction;
        fraction = null;
    }
    else {
        integer = intAndFraction.substr(0, decimalPos);
        fraction = intAndFraction.substr(decimalPos + numFormat.NumberDecimalSeparator.length);
    }
    integer = integer.split(numFormat.NumberGroupSeparator).join("");
    var altNumGroupSeparator = numFormat.NumberGroupSeparator.replace(/\u00A0/g, " ");
    if (numFormat.NumberGroupSeparator !== altNumGroupSeparator) {
        integer = integer.split(altNumGroupSeparator).join("");
    }
    var p = sign + integer;
    if (fraction !== null) {
        p += "." + fraction;
    }
    if (exponent !== null) {
        var expSignInfo = parseNumberNegativePattern(exponent, numFormat, 1);
        if (expSignInfo[0] === "") {
            expSignInfo[0] = "+";
        }
        p += "e" + expSignInfo[0] + expSignInfo[1];
    }
    if (p.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) {
        return parseFloat(p);
    }
    return Number.NaN;
}
exports._parseNumber = _parseNumber;
;
function parseNumberNegativePattern(value, numberFormatInfo, numberNegativePattern) {
    var neg = numberFormatInfo.NegativeSign;
    var pos = numberFormatInfo.PositiveSign;
    switch (numberNegativePattern) {
        case 4:
            neg = " " + neg;
            pos = " " + pos;
        // eslint-disable-next-line no-fallthrough
        case 3:
            if (value.endsWith(neg)) {
                return ["-", value.substr(0, value.length - neg.length)];
            }
            else if (value.endsWith(pos)) {
                return ["+", value.substr(0, value.length - pos.length)];
            }
            break;
        case 2:
            neg += " ";
            pos += " ";
        // eslint-disable-next-line no-fallthrough
        case 1:
            if (value.startsWith(neg)) {
                return ["-", value.substr(neg.length)];
            }
            else if (value.startsWith(pos)) {
                return ["+", value.substr(pos.length)];
            }
            break;
        case 0:
            if (value.startsWith("(") && value.endsWith(")")) {
                return ["-", value.substr(1, value.length - 2)];
            }
            break;
    }
    return ["", value];
}
;
function zeroPad(str, count, left) {
    for (var l = str.length; l < count; l++) {
        str = (left ? ("0" + str) : (str + "0"));
    }
    return str;
}
function expandNumber(number, precision, groupSizes, sep, decimalChar) {
    var curSize = groupSizes[0];
    var curGroupIndex = 1;
    var factor = Math.pow(10, precision);
    var rounded = (Math.round(number * factor) / factor);
    if (!isFinite(rounded)) {
        rounded = number;
    }
    number = rounded;
    var numberString = number.toString();
    var right = "";
    var exponent;
    var split = numberString.split(/e/i);
    numberString = split[0];
    exponent = (split.length > 1 ? parseInt(split[1]) : 0);
    split = numberString.split(".");
    numberString = split[0];
    right = split.length > 1 ? split[1] : "";
    if (exponent > 0) {
        right = zeroPad(right, exponent, false);
        numberString += right.slice(0, exponent);
        right = right.substr(exponent);
    }
    else if (exponent < 0) {
        exponent = -exponent;
        numberString = zeroPad(numberString, exponent + 1, true);
        right = numberString.slice(-exponent, numberString.length) + right;
        numberString = numberString.slice(0, -exponent);
    }
    if (precision > 0) {
        if (right.length > precision) {
            right = right.slice(0, precision);
        }
        else {
            right = zeroPad(right, precision, false);
        }
        right = decimalChar + right;
    }
    else {
        right = "";
    }
    var stringIndex = numberString.length - 1;
    var ret = "";
    while (stringIndex >= 0) {
        if (curSize === 0 || curSize > stringIndex) {
            if (ret.length > 0)
                return numberString.slice(0, stringIndex + 1) + sep + ret + right;
            else
                return numberString.slice(0, stringIndex + 1) + right;
        }
        if (ret.length > 0)
            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + sep + ret;
        else
            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1);
        stringIndex -= curSize;
        if (curGroupIndex < groupSizes.length) {
            curSize = groupSizes[curGroupIndex];
            curGroupIndex++;
        }
    }
    return numberString.slice(0, stringIndex + 1) + sep + ret + right;
}
/**
 * Formats a number as text using the given format string and culture
 * @param number The number to format
 * @param format The format specifier
 * @param cultureInfo The culture
 */
function formatNumber(number, format, cultureInfo) {
    if (typeof number !== "number" || isNaN(number))
        return null;
    if (!format || (format.length === 0) || (format === "i")) {
        if (cultureInfo && (cultureInfo.name.length > 0)) {
            return number.toLocaleString();
        }
        else {
            return number.toString();
        }
    }
    var _percentPositivePattern = ["n %", "n%", "%n"];
    var _percentNegativePattern = ["-n %", "-n%", "-%n"];
    var _numberNegativePattern = ["(n)", "-n", "- n", "n-", "n -"];
    var _currencyPositivePattern = ["$n", "n$", "$ n", "n $"];
    var _currencyNegativePattern = ["($n)", "-$n", "$-n", "$n-", "(n$)", "-n$", "n-$", "n$-", "-n $", "-$ n", "n $-", "$ n-", "$ -n", "n- $", "($ n)", "(n $)"];
    var nf = cultureInfo.numberFormat;
    var num = Math.abs(number);
    if (!format)
        format = "D";
    var precision = -1;
    if (format.length > 1)
        precision = parseInt(format.slice(1), 10);
    var pattern;
    switch (format.charAt(0)) {
        case "d":
        case "D":
            pattern = "n";
            if (precision !== -1) {
                num = zeroPad("" + num, precision, true);
            }
            if (number < 0)
                num = -num;
            break;
        case "c":
        case "C":
            if (number < 0)
                pattern = _currencyNegativePattern[nf.CurrencyNegativePattern];
            else
                pattern = _currencyPositivePattern[nf.CurrencyPositivePattern];
            if (precision === -1)
                precision = nf.CurrencyDecimalDigits;
            num = expandNumber(Math.abs(number), precision, nf.CurrencyGroupSizes, nf.CurrencyGroupSeparator, nf.CurrencyDecimalSeparator);
            break;
        case "n":
        case "N":
            if (number < 0)
                pattern = _numberNegativePattern[nf.NumberNegativePattern];
            else
                pattern = "n";
            if (precision === -1)
                precision = nf.NumberDecimalDigits;
            num = expandNumber(Math.abs(number), precision, nf.NumberGroupSizes, nf.NumberGroupSeparator, nf.NumberDecimalSeparator);
            break;
        case "p":
        case "P":
            if (number < 0)
                pattern = _percentNegativePattern[nf.PercentNegativePattern];
            else
                pattern = _percentPositivePattern[nf.PercentPositivePattern];
            if (precision === -1)
                precision = nf.PercentDecimalDigits;
            num = expandNumber(Math.abs(number) * 100, precision, nf.PercentGroupSizes, nf.PercentGroupSeparator, nf.PercentDecimalSeparator);
            break;
        default:
            throw new FormatError(Res.formatBadFormatSpecifier);
    }
    var regex = /n|\$|-|%/g;
    var ret = "";
    for (;;) {
        var index = regex.lastIndex;
        var ar = regex.exec(pattern);
        ret += pattern.slice(index, ar ? ar.index : pattern.length);
        if (!ar)
            break;
        switch (ar[0]) {
            case "n":
                ret += num;
                break;
            case "$":
                ret += nf.CurrencySymbol;
                break;
            case "-":
                if (/[1-9]/.test(num.toString())) {
                    ret += nf.NegativeSign;
                }
                break;
            case "%":
                ret += nf.PercentSymbol;
                break;
        }
    }
    return ret;
}
exports.formatNumber = formatNumber;
function toUpper(value) {
    return value.split("\u00A0").join(" ").toUpperCase();
}
function toUpperArray(arr) {
    var result = [];
    for (var i = 0; i < arr.length; i++) {
        var value = arr[i];
        result[i] = toUpper(value);
    }
    return result;
}
var invariantCultureInfo = {
    name: "",
    numberFormat: {
        CurrencyDecimalDigits: 2,
        CurrencyDecimalSeparator: ".",
        CurrencyGroupSizes: [3],
        NumberGroupSizes: [3],
        PercentGroupSizes: [3],
        CurrencyGroupSeparator: ",",
        CurrencySymbol: "\u00A4",
        NaNSymbol: "NaN",
        CurrencyNegativePattern: 0,
        NumberNegativePattern: 1,
        PercentPositivePattern: 0,
        PercentNegativePattern: 0,
        NegativeInfinitySymbol: "-Infinity",
        NegativeSign: "-",
        NumberDecimalDigits: 2,
        NumberDecimalSeparator: ".",
        NumberGroupSeparator: ",",
        CurrencyPositivePattern: 0,
        PositiveInfinitySymbol: "Infinity",
        PositiveSign: "+",
        PercentDecimalDigits: 2,
        PercentDecimalSeparator: ".",
        PercentGroupSeparator: ",",
        PercentSymbol: "%",
        PerMilleSymbol: "\u2030",
        NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
        DigitSubstitution: 1
    },
    dateTimeFormat: {
        AMDesignator: "AM",
        Calendar: { MinSupportedDateTime: "@-62135568000000@", MaxSupportedDateTime: "@253402300799999@", AlgorithmType: 1, CalendarType: 1, Eras: [1], TwoDigitYearMax: 2029 },
        DateSeparator: "/",
        FirstDayOfWeek: 0,
        CalendarWeekRule: 0,
        FullDateTimePattern: "dddd, dd MMMM yyyy HH:mm:ss",
        LongDatePattern: "dddd, dd MMMM yyyy",
        LongTimePattern: "HH:mm:ss",
        MonthDayPattern: "MMMM dd",
        PMDesignator: "PM",
        RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
        ShortDatePattern: "MM/dd/yyyy",
        ShortTimePattern: "h:mm tt",
        SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
        TimeSeparator: ":",
        UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
        YearMonthPattern: "yyyy MMMM",
        AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        DayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        AbbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
        MonthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
        NativeCalendarName: "Gregorian Calendar",
        AbbreviatedMonthGenitiveNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
        MonthGenitiveNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""]
    },
    eras: [1, "A.D.", null, 0]
};
var CultureInfo = /** @class */ (function () {
    function CultureInfo(name, numberFormat, dateTimeFormat) {
        this.name = name;
        this.numberFormat = numberFormat;
        this.dateTimeFormat = dateTimeFormat;
    }
    CultureInfo.parse = function (value) {
        var dtf = value.dateTimeFormat;
        if (dtf && !dtf.Eras) {
            dtf.Eras = value.eras;
        }
        return new CultureInfo(value.name, value.numberFormat, dtf);
    };
    CultureInfo.setup = function (cultureInfo) {
        if (cultureInfo === void 0) { cultureInfo = null; }
        if (cultureInfo != null && typeof cultureInfo === "object") {
            CultureInfo.CurrentCulture = CultureInfo.parse(cultureInfo);
        }
        else if (!CultureInfo.CurrentCulture) {
            // Set up default culture
            var defaultCulture = CultureInfo._defaultCulture;
            if (!CultureInfo._defaultCulture) {
                var cultureInfoObject = helpers_1.clone(invariantCultureInfo);
                cultureInfoObject.name = "en-US";
                cultureInfoObject.numberFormat.CurrencySymbol = "$";
                var dtf = cultureInfoObject.dateTimeFormat;
                dtf.FullDateTimePattern = "dddd, MMMM dd, yyyy h:mm:ss tt";
                dtf.LongDatePattern = "dddd, MMMM dd, yyyy";
                dtf.LongTimePattern = "h:mm:ss tt";
                dtf.ShortDatePattern = "M/d/yyyy";
                dtf.ShortTimePattern = "h:mm tt";
                dtf.YearMonthPattern = "MMMM, yyyy";
                defaultCulture = CultureInfo.parse(cultureInfoObject);
                CultureInfo._defaultCulture = defaultCulture;
            }
            CultureInfo.CurrentCulture = defaultCulture;
        }
    };
    CultureInfo.prototype._getDateTimeFormats = function () {
        var formats = this._dateTimeFormats;
        if (!formats) {
            var dtf = this.dateTimeFormat;
            this._dateTimeFormats = formats = [
                dtf["MonthDayPattern"],
                dtf["YearMonthPattern"],
                dtf["ShortDatePattern"],
                dtf["ShortTimePattern"],
                dtf["LongDatePattern"],
                dtf["LongTimePattern"],
                dtf["FullDateTimePattern"],
                dtf["RFC1123Pattern"],
                dtf["SortableDateTimePattern"],
                dtf["UniversalSortableDateTimePattern"]
            ];
        }
        return formats;
    };
    CultureInfo.prototype._getMonthIndex = function (value, abbr) {
        // Get or create the cache of upper-case month names
        var upperMonths = abbr ? this._upperAbbrMonths : this._upperMonths;
        if (!upperMonths) {
            if (abbr)
                upperMonths = this._upperAbbrMonths = toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);
            else
                upperMonths = this._upperMonths = toUpperArray(this.dateTimeFormat.MonthNames);
        }
        // Convert the month name to upper-case and get its index in the list
        value = toUpper(value);
        var i = upperMonths.indexOf(value);
        if (i < 0) {
            // Get or create the cache of upper-case genitive month names
            var upperMonthsGenitive = abbr ? this._upperAbbrMonthsGenitive : this._upperMonthsGenitive;
            if (!upperMonthsGenitive) {
                if (abbr)
                    upperMonthsGenitive = this._upperAbbrMonthsGenitive = toUpperArray(this.dateTimeFormat.AbbreviatedMonthGenitiveNames);
                else
                    upperMonthsGenitive = this._upperMonthsGenitive = toUpperArray(this.dateTimeFormat.MonthGenitiveNames);
            }
            // Check the list of genitive month names
            i = upperMonthsGenitive.indexOf(value);
        }
        return i;
    };
    CultureInfo.prototype._getDayIndex = function (value, abbr) {
        // Get or create the cache of upper-case day names
        var upperDays = abbr ? this._upperAbbrDays : this._upperDays;
        if (!upperDays) {
            if (abbr)
                upperDays = this._upperAbbrDays = toUpperArray(this.dateTimeFormat.AbbreviatedDayNames);
            else
                upperDays = this._upperDays = toUpperArray(this.dateTimeFormat.DayNames);
        }
        // Convert the day name to upper-case and get its index in the list
        value = toUpper(value);
        return upperDays.indexOf(value);
    };
    return CultureInfo;
}());
exports.CultureInfo = CultureInfo;
CultureInfo.InvariantCulture = CultureInfo.parse(invariantCultureInfo);


/***/ }),

/***/ "../../libs/model.js/lib/helpers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.entries = exports.flatMap = exports.clone = exports.mixin = exports.getEventSubscriptions = exports.merge = exports.hasOwnProperty = exports.toTitleCase = exports.randomText = exports.randomInt = exports.isType = exports.getDefaultValue = exports.isNumber = exports.getConstructorName = exports.getTypeName = exports.parseFunctionName = exports.replaceTokens = exports.evalPath = exports.navigateAttribute = exports.ensureNamespace = exports.getGlobalObject = void 0;
function getGlobalObject() {
    if (typeof window === "object" && Object.prototype.toString.call(window) === "[object Window]") {
        return window;
    }
    else if (typeof global === "object") {
        return global;
    }
    else {
        return null;
    }
}
exports.getGlobalObject = getGlobalObject;
function ensureNamespace(name, parentNamespace) {
    var result;
    var nsTokens;
    var target = parentNamespace;
    if (typeof target === "string") {
        nsTokens = target.split(".");
        target = getGlobalObject();
        nsTokens.forEach(function (token) {
            target = target[token];
            if (target === undefined) {
                throw new Error("Parent namespace \"" + parentNamespace + "\" could not be found.");
            }
        });
    }
    else if (target === undefined || target === null) {
        target = getGlobalObject();
    }
    // create the namespace object if it doesn't exist, otherwise return the existing namespace
    if (!(name in target)) {
        result = target[name] = {};
        return result;
    }
    else {
        return target[name];
    }
}
exports.ensureNamespace = ensureNamespace;
function navigateAttribute(obj, attr, callback, thisPtr) {
    if (thisPtr === void 0) { thisPtr = null; }
    for (var val = obj[attr]; val != null; val = val[attr]) {
        if (callback.call(thisPtr || obj, val) === false) {
            return;
        }
    }
}
exports.navigateAttribute = navigateAttribute;
function isObject(obj) {
    return getTypeName(obj) === "object" || (obj && obj instanceof Object);
}
// If a getter method matching the given property name is found on the target it is invoked and returns the
// value, unless the the value is undefined, in which case null is returned instead.  This is done so that
// calling code can interpret a return value of undefined to mean that the property it requested does not exist.
function getValue(target, property) {
    var value;
    // the see if there is an explicit getter function for the property
    var getter = target["get_" + property];
    if (getter) {
        value = getter.call(target);
        if (value === undefined) {
            value = null;
        }
    }
    // otherwise search for the property
    else {
        if ((isObject(target) && property in target) ||
            Object.prototype.hasOwnProperty.call(target, property) ||
            (target.constructor === String && /^[0-9]+$/.test(property) && parseInt(property, 10) < target.length)) {
            value = target[property];
            if (value === undefined) {
                value = null;
            }
        }
        else if (/\./.test(property)) {
            // TODO: Warn about passing multi-hop path to `getValue()`
            // logWarning("Possible incorrect usage of \"getValue()\", the path \"" + property + "\" does not exist on the target and appears to represent a multi-hop path.");
        }
    }
    return value;
}
function evalPath(obj, path, nullValue, undefinedValue) {
    if (nullValue === void 0) { nullValue = null; }
    if (undefinedValue === void 0) { undefinedValue = undefined; }
    var value = obj;
    var steps = path.split(".");
    for (var i = 0; i < steps.length; ++i) {
        var name_1 = steps[i];
        var source = value;
        value = getValue(source, name_1);
        if (value === null) {
            return nullValue;
        }
        if (value === undefined) {
            return undefinedValue;
        }
    }
    return value;
}
exports.evalPath = evalPath;
/**
 * Replace tokens (ex: {0}) in the given string
 * @param template The template string
 * @param params The replacement parameters
 */
function replaceTokens(template, params) {
    if (params) {
        return template.replace(/{([^}]+)}/g, function (match, key) {
            return hasOwnProperty(params, key) ? params[key] : match;
        });
    }
    return template;
}
exports.replaceTokens = replaceTokens;
var fnRegex = /function\s*([\w_$]*)/i;
function parseFunctionName(fn) {
    var fnMatch = fnRegex.exec(fn.toString());
    return fnMatch ? (fnMatch[1] || "{anonymous}") : "{anonymous}";
}
exports.parseFunctionName = parseFunctionName;
var typeNameExpr = /\s([a-z|A-Z]+)/;
function getTypeName(obj) {
    if (obj === undefined)
        return "undefined";
    if (obj === null)
        return "null";
    return Object.prototype.toString.call(obj).match(typeNameExpr)[1].toLowerCase();
}
exports.getTypeName = getTypeName;
function getConstructorName(ctor) {
    // Handle value types explicitly
    if (ctor === String)
        return "String";
    if (ctor === Number)
        return "Number";
    if (ctor === Date)
        return "Date";
    if (ctor === Boolean)
        return "Boolean";
    // Try to use function name
    if (typeof ctor === "function" && ctor.name) {
        return ctor.name;
    }
    // Fall back to the low-level 'toString' on the prototype
    return getTypeName(ctor.prototype);
}
exports.getConstructorName = getConstructorName;
function isNumber(obj) {
    return getTypeName(obj) === "number" && !isNaN(obj);
}
exports.isNumber = isNumber;
function getDefaultValue(isList, jstype) {
    if (isList)
        return [];
    if (jstype === Boolean)
        return false;
    if (jstype === Number)
        return 0;
    return null;
}
exports.getDefaultValue = getDefaultValue;
function isType(obj, test) {
    if (test === void 0) { test = null; }
    if (test) {
        return test(obj);
    }
    else {
        // Do nothing, assume object is of the type
        return true;
    }
}
exports.isType = isType;
function randomInt(min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 9; }
    var rand = Math.random();
    return rand === 1 ? max : Math.floor(rand * (max - min + 1)) + min;
}
exports.randomInt = randomInt;
function randomText(len, includeLetters, includeDigits) {
    if (includeLetters === void 0) { includeLetters = true; }
    if (includeDigits === void 0) { includeDigits = true; }
    if (!includeLetters && !includeDigits) {
        return;
    }
    var result = "";
    for (var i = 0; i < len; i++) {
        var min = includeLetters ? 0 : 26;
        var max = includeDigits ? 35 : 25;
        var rand = randomInt(min, max);
        var charCode;
        if (rand <= 25) {
            // Alpha: add 97 for 'a'
            charCode = rand + 97;
        }
        else {
            // Num: start at 0 and add 48 for 0
            charCode = (rand - 26) + 48;
        }
        result += String.fromCharCode(charCode);
    }
    return result;
}
exports.randomText = randomText;
function toTitleCase(input) {
    // https://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript/6475125#6475125
    var i, j, str, lowers, uppers;
    str = input.replace(/([^\W_]+[^\s-]*) */g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
    // Certain minor words should be left lowercase unless
    // they are the first or last words in the string
    lowers = ["A", "An", "The", "And", "But", "Or", "For", "Nor", "As", "At",
        "By", "For", "From", "In", "Into", "Near", "Of", "On", "Onto",
        "To", "With"];
    for (i = 0, j = lowers.length; i < j; i++) {
        str = str.replace(new RegExp("\\s" + lowers[i] + "\\s", "g"), function (txt) {
            return txt.toLowerCase();
        });
    }
    // Certain words such as initialisms or acronyms should be left uppercase
    uppers = ["Id", "Tv"];
    for (i = 0, j = uppers.length; i < j; i++) {
        str = str.replace(new RegExp("\\b" + uppers[i] + "\\b", "g"), uppers[i].toUpperCase());
    }
    return str;
}
exports.toTitleCase = toTitleCase;
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
exports.hasOwnProperty = hasOwnProperty;
function merge(obj1) {
    var objs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objs[_i - 1] = arguments[_i];
    }
    var target = {};
    for (var arg in obj1) {
        if (hasOwnProperty(obj1, arg)) {
            target[arg] = obj1[arg];
        }
    }
    for (var i = 0; i < objs.length; i++) {
        var obj = objs[i];
        for (var arg in obj) {
            if (hasOwnProperty(obj, arg)) {
                target[arg] = obj[arg];
            }
        }
    }
    return target;
}
exports.merge = merge;
function getEventSubscriptions(event) {
    var func = event.func;
    if (func) {
        var funcs = func._funcs;
        if (funcs.length > 0) {
            var subs = funcs.map(function (f) { return { handler: f.fn, isExecuted: f.applied, isOnce: f.once }; });
            return subs;
        }
        else {
            return null;
        }
    }
}
exports.getEventSubscriptions = getEventSubscriptions;
function mixin(ctor, methods) {
    for (var key in methods) {
        if (hasOwnProperty(methods, key) && methods[key] instanceof Function) {
            ctor.prototype[key] = methods[key];
        }
    }
}
exports.mixin = mixin;
/**
 * Recursively clone an object and its children
 * @param value The object to clone
 */
function clone(obj) {
    var result = {};
    for (var prop in obj) {
        if (hasOwnProperty(obj, prop)) {
            var value = obj[prop];
            result[prop] = value instanceof Array ? (value.length === 1 ? [value[0]] : Array.apply(null, value)) : typeof value === "object" ? clone(value) : value;
        }
    }
    return result;
}
exports.clone = clone;
/**
 * Helper alternative to Array.prototype.flatMap
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#Alternative
 * @param input The input array
 * @param callback A function that returns an array of outputs for each input
 */
function flatMap(input, callback) {
    return input.reduce(function (arr, i) { return arr.concat(callback(i)); }, []);
}
exports.flatMap = flatMap;
/**
 * Helper alternative to Object.entries
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries#Polyfill
 * @param input The input array
 */
function entries(obj) {
    // eslint-disable-next-line one-var
    var ownProps = Object.keys(obj), i = ownProps.length, resArray = new Array(i); // preallocate the Array
    while (i--)
        resArray[i] = [ownProps[i], obj[ownProps[i]]];
    return resArray;
}
exports.entries = entries;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../../node_modules/.pnpm/webpack@4.46.0_webpack-cli@3.3.12/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../libs/model.js/lib/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
// Core model
__exportStar(__webpack_require__("../../libs/model.js/lib/model.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/type.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/property.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/property-chain.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/property-path.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/entity.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/object-meta.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/format.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/observable-array.js"), exports);
// Conditions, etc.
__exportStar(__webpack_require__("../../libs/model.js/lib/condition-target.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/condition-type-set.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/condition-type.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/condition.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/format-error.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/string-format-rule.js"), exports);
// Rules engine and various rule types
__exportStar(__webpack_require__("../../libs/model.js/lib/rule.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/rule-invocation-type.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/condition-rule.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/validation-rule.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/allowed-values-rule.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/calculated-property-rule.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/required-rule.js"), exports);
// Serialization
__exportStar(__webpack_require__("../../libs/model.js/lib/entity-serializer.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/initilization-context.js"), exports);
// Globalization & Localization
__exportStar(__webpack_require__("../../libs/model.js/lib/globalization.js"), exports);
__exportStar(__webpack_require__("../../libs/model.js/lib/resource.js"), exports);
// Internal helpers, etc.
// export * from "./event-scope";
// export * from "./events";
// export * from "./functor";
// export * from "./helpers";


/***/ }),

/***/ "../../libs/model.js/lib/initilization-context.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InitializationContext = void 0;
var InitializationContext = /** @class */ (function () {
    function InitializationContext(newDocument) {
        this.newDocument = false;
        this.tasks = new Set();
        this.waiting = [];
        this.newDocument = newDocument;
    }
    /**
     * Prevents any waiting callbacks from being executed before the specified action completes.
     * @returns The return value of `action`.
     */
    InitializationContext.prototype.execute = function (action) {
        // create a promise which will never actually be resolved, but it will prevent the waiting queue from being processed
        var marker = new Promise(function () { });
        this.tasks.add(marker);
        var result = action();
        this.tasks.delete(marker);
        this.processWaitingQueue();
        return result;
    };
    InitializationContext.prototype.wait = function (task) {
        var _this = this;
        this.tasks.add(task);
        task.then(function () {
            // process the queue asynchronously to allow additional tasks to be queued as a result of this one
            Promise.resolve().then(function () {
                _this.tasks.delete(task);
                _this.processWaitingQueue();
            });
        });
    };
    Object.defineProperty(InitializationContext.prototype, "canProcessQueue", {
        get: function () {
            return this.tasks.size === 0;
        },
        enumerable: false,
        configurable: true
    });
    InitializationContext.prototype.processWaitingQueue = function () {
        if (this.canProcessQueue) {
            while (this.waiting.length > 0 && this.canProcessQueue) {
                var done = this.waiting.shift();
                done();
            }
        }
    };
    InitializationContext.prototype.whenReady = function (callback) {
        if (this.canProcessQueue)
            callback();
        else
            this.waiting.push(callback);
    };
    InitializationContext.prototype.tryResolveValue = function (instance, property, value) {
        var task = instance.serializer.resolveValue(instance, property, value);
        if (task)
            this.wait(task);
        return task;
    };
    Object.defineProperty(InitializationContext.prototype, "isNewDocument", {
        get: function () {
            return this.newDocument;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InitializationContext.prototype, "ready", {
        get: function () {
            var _this = this;
            return new Promise(function (resolve) { return _this.whenReady(resolve); });
        },
        enumerable: false,
        configurable: true
    });
    return InitializationContext;
}());
exports.InitializationContext = InitializationContext;


/***/ }),

/***/ "../../libs/model.js/lib/list-length-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListLengthRule = void 0;
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
var ListLengthRule = /** @class */ (function (_super) {
    __extends(ListLengthRule, _super);
    function ListLengthRule(rootType, options) {
        var _this = this;
        // ensure the rule name is specified
        options.name = options.name || "ListLength";
        options.message = function () {
            var range = {};
            if (options.min && options.min instanceof Function) {
                try {
                    range.min = options.min.call(this);
                }
                catch (e) {
                    // Silently ignore min errors
                }
            }
            else if (typeof (options.min) === "number") {
                range.min = options.min;
            }
            if (options.max && options.max instanceof Function) {
                try {
                    range.max = options.max.call(this);
                }
                catch (e) {
                    // Silently ignore max errors
                }
            }
            else if (typeof (options.min) === "number") {
                range.min = options.min;
            }
            var val = options.property.value(this);
            if (!val) {
                return null;
            }
            if ((range.min == null || val.length >= range.min) && (range.max == null || val.length <= range.max)) {
                // Value is within range
                return null;
            }
            if (range.min != null && range.max != null)
                return rootType.model.getResource("listlength-between").replace("{min}", range.min.toString()).replace("{max}", range.max.toString());
            if (range.min != null)
                return rootType.model.getResource("listlength-at-least").replace("{min}", range.min.toString());
            else
                return rootType.model.getResource("listlength-at-most").replace("{max}", range.max.toString());
        };
        // call the base type constructor
        _this = _super.call(this, rootType, options) || this;
        return _this;
    }
    return ListLengthRule;
}(validation_rule_1.ValidationRule));
exports.ListLengthRule = ListLengthRule;


/***/ }),

/***/ "../../libs/model.js/lib/model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.normalize = exports.ModelSettings = exports.createModel = exports.Model = void 0;
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
var type_1 = __webpack_require__("../../libs/model.js/lib/type.js");
var format_1 = __webpack_require__("../../libs/model.js/lib/format.js");
var entity_serializer_1 = __webpack_require__("../../libs/model.js/lib/entity-serializer.js");
var resource_1 = __webpack_require__("../../libs/model.js/lib/resource.js");
var globalization_1 = __webpack_require__("../../libs/model.js/lib/globalization.js");
var event_scope_1 = __webpack_require__("../../libs/model.js/lib/event-scope.js");
var valueTypes = { string: String, number: Number, date: Date, boolean: Boolean };
var Model = /** @class */ (function () {
    function Model(options, config) {
        this._readyProcessing = false;
        this.serializer = new entity_serializer_1.EntitySerializer();
        this.types = {};
        this.settings = new ModelSettings(config);
        this.entityRegistered = new events_1.Event();
        this.afterPropertySet = new events_1.Event();
        this.listChanged = new events_1.Event();
        this.eventScope = event_scope_1.EventScope.create(this.settings.eventScopeSettings);
        Object.defineProperty(this, "_formats", { enumerable: false, configurable: false, writable: true, value: {} });
        if (options) {
            this.extend(options);
        }
    }
    /**
     * Sets the default locale to use when a model's locale is not explicitly set
     * @param locale The default locale
     */
    Model.setDefaultLocale = function (locale) {
        resource_1.setDefaultLocale(locale);
    };
    /**
     * Defines global resource messages for the given locale
     * @param locale The locale to set messages for
     * @param resources The resources messages
     */
    Model.defineResources = function (locale, resources) {
        resource_1.defineResources(locale, resources);
    };
    Model.getResource = function (name, arg2, arg3) {
        var locale;
        var params;
        if (arguments.length === 2) {
            if (typeof arg2 === "string") {
                locale = arg2;
                params = null;
            }
            else if (typeof arg2 === "object") {
                locale = null;
                params = arg2;
            }
        }
        else if (arguments.length >= 3) {
            locale = arg2;
            params = arg3;
        }
        var resource = resource_1.getResource(name, locale);
        if (params)
            return helpers_1.replaceTokens(resource, params);
        return resource;
    };
    /**
     * Gets the resource with the specified name
     * @param name The resource name/key
     * @param params The parameters to use for string format substitution
     */
    Model.prototype.getResource = function (name, params) {
        if (params === void 0) { params = null; }
        var resource = resource_1.getResource(name, this.$resources, this.$locale);
        if (params)
            return helpers_1.replaceTokens(resource, params);
        return resource;
    };
    Model.prototype.resourceExists = function (name) {
        return resource_1.resourceExists(name, this.$resources, this.$locale);
    };
    /**
     * Formats a date as text using the given format string
     * @param date The date to format
     * @param format The format specifier
     */
    Model.prototype.formatDate = function (date, format) {
        return globalization_1.formatDate(date, format, this.$culture);
    };
    /**
     * Parses a date from text
     * @param text The text to parse
     */
    Model.prototype.parseDate = function (text, formats) {
        return globalization_1.parseDate(text, this.$culture, formats);
    };
    /**
     * Expands a date/time format string, which may be a predefined short format, into the equivalent full format strin
     * @param format The format string
     */
    Model.prototype.expandDateFormat = function (format) {
        return globalization_1.expandDateFormat(this.$culture.dateTimeFormat, format);
    };
    /**
     * Formats a number as text using the given format string
     * @param number The number to format
     * @param format The format specifier
     */
    Model.prototype.formatNumber = function (number, format) {
        return globalization_1.formatNumber(number, format, this.$culture);
    };
    /**
     * Parses a number from text
     * @param text The text to parse
     */
    Model.prototype.parseNumber = function (text, format) {
        return globalization_1.parseNumber(text, globalization_1.getNumberStyle(format), this.$culture);
    };
    /**
     * Extends the model with the specified type information.
     * @param options The set of model types to add and/or extend.
     */
    Model.prototype.extend = function (options) {
        var _this = this;
        // Use prepare() to defer property path resolution while the model is being extended
        this.prepare(function () {
            // Namespace
            if (options.$namespace) {
                // TODO: Guard against namespace being set after types have been created
                var $namespace = options.$namespace;
                if (!_this.$namespace) {
                    Object.defineProperty(_this, "$namespace", { configurable: false, enumerable: true, value: $namespace, writable: false });
                }
                else if ($namespace !== _this.$namespace) {
                    throw new Error("Cannot redefine namespace for model.");
                }
            }
            // Locale
            if (options.$locale && typeof options.$locale === "string") {
                // TODO: Guard against locale being set after types have been created
                var $locale = options.$locale;
                if (!_this.$locale) {
                    Object.defineProperty(_this, "$locale", { configurable: false, enumerable: true, value: $locale, writable: false });
                }
                else if ($locale !== _this.$locale) {
                    throw new Error("Cannot redefine locale for model.");
                }
            }
            // Resources
            if (options.$resources && typeof options.$resources === "object") {
                // TODO: Guard against resources being set after types have been created
                var $resources = options.$resources;
                if (!_this.$resources) {
                    Object.defineProperty(_this, "$resources", { configurable: false, enumerable: true, value: $resources, writable: false });
                }
                else if ($resources !== _this.$resources) {
                    throw new Error("Cannot redefine resources for model.");
                }
            }
            // Culture
            if (options.$culture) {
                var $culture = void 0;
                // TODO: Guard against culture being set after types have been created
                if (typeof options.$culture === "object") {
                    $culture = options.$culture;
                }
                else if (typeof options.$culture === "string") {
                    globalization_1.CultureInfo.setup();
                    if (globalization_1.CultureInfo.CurrentCulture.name === options.$culture) {
                        $culture = globalization_1.CultureInfo.CurrentCulture;
                    }
                    if (!$culture) {
                        throw new Error("Could not find culture '" + options.$culture + "'.");
                    }
                }
                if ($culture) {
                    if (!_this.$culture) {
                        Object.defineProperty(_this, "$culture", { configurable: false, enumerable: true, value: $culture, writable: false });
                    }
                    else if ($culture !== _this.$culture) {
                        throw new Error("Cannot redefine culture for model.");
                    }
                }
            }
            var typesToCreate = Object.keys(options).filter(function (typeName) { return !typeName.startsWith("$"); });
            var typesToInitialize = [];
            // Create New Types
            while (typesToCreate.length > 0) {
                var typeName = typesToCreate.splice(0, 1)[0];
                for (var typeNameIdx = -1, pos = typeName.length - 1, i = typeName.lastIndexOf(".", pos); i > 0; pos = i - 1, i = typeName.lastIndexOf(".", pos)) {
                    var typeNamespace = typeName.substring(0, i);
                    var typeNamespaceIdx = typesToCreate.indexOf(typeNamespace);
                    if (typeNamespaceIdx > typeNameIdx) {
                        if (true) {
                            console.warn("Type '" + typeNamespace + "' should be created before type '" + typeName + "'.");
                        }
                        // Remove the current  type's "namespace" type and re-add the current type to the list
                        typesToCreate.splice(typeNamespaceIdx, 1);
                        typesToCreate.splice(0, 0, typeName);
                        typeNameIdx++;
                        // Resume the loop using the new namespace type (resetting index variables isn't necessary)
                        typeName = typeNamespace;
                    }
                }
                var typeOptions = options[typeName];
                var type = _this.types[typeName];
                typesToInitialize.push(typeName);
                if (!type) {
                    var baseType = null;
                    if (typeOptions.$extends) {
                        baseType = _this.types[typeOptions.$extends];
                        if (!baseType) {
                            throw new Error("Base type '" + typeOptions.$extends + "' for type '" + typeName + "' wasn't found.");
                        }
                    }
                    var format = typeOptions.$format;
                    type = new type_1.Type(_this, typeName, baseType, format);
                    _this.types[typeName] = type;
                }
            }
            // Extend Types
            for (var _i = 0, typesToInitialize_1 = typesToInitialize; _i < typesToInitialize_1.length; _i++) {
                var typeName = typesToInitialize_1[_i];
                var typeOptions = options[typeName];
                _this.types[typeName].extend(typeOptions);
            }
        });
    };
    /**
     * Prepares the model by invoking and extension function, which tracking the model
     * ready state to allow use of the @ready promise to defer property path resolution.
     * @param extend The function extending the model
     */
    Model.prototype.prepare = function (extend) {
        // Create a model initialization scope
        if (!this._readyCallbacks) {
            this._readyProcessing = false;
            // Create an array to track model initialization callbacks
            Object.defineProperty(this, "_readyCallbacks", { enumerable: false, configurable: true, writable: true, value: [] });
            // Extend the model
            extend();
            // Complete pending model initialization steps
            this._readyProcessing = true;
            for (var _i = 0, _a = this._readyCallbacks; _i < _a.length; _i++) {
                var init = _a[_i];
                init();
            }
            this._readyProcessing = false;
            delete this._readyCallbacks;
        }
        // Leverage the current model initialization scope
        else
            extend();
    };
    /**
     * Execute a function when the model is ready.
     * @param init The function to invoke when the model is ready.
     * @param enqueueWhileProcessing Determines whether the callback should be added to the queue while the queue is being processed.
     */
    Model.prototype.ready = function (callback, _a) {
        var _b = (_a === void 0 ? {} : _a).enqueueWhileProcessing, enqueueWhileProcessing = _b === void 0 ? true : _b;
        if (this._readyCallbacks && (!this._readyProcessing || enqueueWhileProcessing))
            this._readyCallbacks.push(callback);
        else
            callback();
    };
    /**
     * Gets the format for the specified property type and format string.
     * @param type The type the format is for
     * @param format The format template or specifier
     */
    Model.prototype.getFormat = function (type, format, formatEval) {
        // Return null if a format specifier was not provided
        if (!format) {
            return null;
        }
        // Get the format cache for the type
        var formats;
        if (type_1.isEntityType(type)) {
            formats = type.meta._formats;
        }
        else {
            formats = this._formats[type.name];
            if (!formats)
                formats = this._formats[type.name] = {};
        }
        // First see if the requested format is cached
        var f = formats[format];
        if (f) {
            return f;
        }
        // Otherwise, create and cache the format
        if (type_1.isEntityType(type)) {
            return (formats[format] = format_1.Format.fromTemplate(type.meta, format, formatEval));
        }
        else {
            // otherwise, call the format provider to create a new format
            return (formats[format] = format_1.createFormat(this, type, format));
        }
    };
    /**
     * Gets the javascript property type with the specified name.
     * @param type
     */
    Model.prototype.getJsType = function (type) {
        var jstype = type.toLowerCase() === "object" ? Object : valueTypes[type.toLowerCase()];
        if (!jstype) {
            var modelType = this.types[type];
            return modelType ? modelType.jstype : null;
        }
        return jstype;
    };
    return Model;
}());
exports.Model = Model;
// eslint-disable-next-line no-redeclare
function createModel(options, config) {
    return new Promise(function (resolve) {
        var model = new Model(options, config);
        model.ready(function () {
            resolve(model);
        });
    });
}
exports.createModel = createModel;
var ModelSettings = /** @class */ (function () {
    function ModelSettings(config) {
        // There is a slight speed cost to creating own properties,
        // which may be noticeable with very large object counts.
        this.createOwnProperties = false;
        this.autogeneratePropertyLabels = true;
        // Don't pollute the window object by default
        this.useGlobalObject = false;
        // Use sane defaults for event scope settings, i.e. "non-exiting" scope detection
        this.eventScopeSettings = event_scope_1.EVENT_SCOPE_DEFAULT_SETTINGS;
        this.createOwnProperties = config && !!config.createOwnProperties;
        if (config && config.autogeneratePropertyLabels === false)
            this.autogeneratePropertyLabels = false;
        this.useGlobalObject = config && !!config.useGlobalObject;
        this.eventScopeSettings = {
            maxExitingTransferCount: (config && typeof config.maxExitingEventScopeTransferCount === "number" ? config.maxExitingEventScopeTransferCount : null) || event_scope_1.EVENT_SCOPE_DEFAULT_SETTINGS.maxExitingTransferCount,
            maxDepth: (config && typeof config.maxEventScopeDepth === "number" ? config.maxEventScopeDepth : null) || event_scope_1.EVENT_SCOPE_DEFAULT_SETTINGS.maxDepth
        };
    }
    return ModelSettings;
}());
exports.ModelSettings = ModelSettings;
// eslint-disable-next-line no-redeclare
function normalize(val, format) {
    if (!val && val !== false)
        return val;
    if (val.constructor.name === "Date") {
        var dateFormat = typeof format === "string" ? format : format.specifier;
        if (dateFormat === "t") {
            // Set the date of the dateTime to January 1st, 1970
            var newDate = new Date(val.valueOf());
            newDate.setFullYear(1970);
            newDate.setMonth(0);
            newDate.setDate(1);
            return newDate;
        }
        else if (dateFormat === "d") {
            // Set the time of the dateTime to 12AM
            return new Date(val.getFullYear(), val.getMonth(), val.getDate());
        }
    }
    return val;
}
exports.normalize = normalize;


/***/ }),

/***/ "../../libs/model.js/lib/object-meta.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectMeta = void 0;
var condition_type_1 = __webpack_require__("../../libs/model.js/lib/condition-type.js");
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var format_error_1 = __webpack_require__("../../libs/model.js/lib/format-error.js");
var ObjectMeta = /** @class */ (function () {
    function ObjectMeta(type, entity, id, isNew) {
        Object.defineProperty(this, "type", { enumerable: true, configurable: false, writable: false, value: type });
        Object.defineProperty(this, "entity", { enumerable: true, configurable: false, writable: false, value: entity });
        Object.defineProperty(this, "id", { enumerable: true, configurable: false, writable: true, value: id });
        Object.defineProperty(this, "isNew", { enumerable: true, configurable: false, writable: true, value: isNew });
        Object.defineProperty(this, "conditions", { enumerable: true, configurable: false, writable: true, value: observable_array_1.ObservableArray.create() });
        Object.defineProperty(this, "__pendingInvocation__", { enumerable: false, configurable: false, writable: false, value: [] });
    }
    /**
     * Gets the condition target with the specified condition type
     * @param conditionType The type of condition to retrieve
     */
    ObjectMeta.prototype.getCondition = function (conditionType) {
        return this.conditions.filter(function (c) { return c.condition.type === conditionType; })[0];
    };
    /**
     * Stores the condition target for the current instance
     * @param conditionTarget The condition target to store
     */
    ObjectMeta.prototype.setCondition = function (conditionTarget) {
        if (conditionTarget.condition.type !== format_error_1.FormatError.ConditionType) {
            this.conditions.push(conditionTarget);
        }
    };
    /**
     * Clears the condition for the current instance with the specified condition type
     * @param conditionType The type of condition to clear
     */
    ObjectMeta.prototype.clearCondition = function (conditionType) {
        for (var i = 0; i < this.conditions.length; i++) {
            var conditionTarget = this.conditions[i];
            if (conditionTarget.condition.type === conditionType) {
                this.conditions.splice(i--, 1);
            }
        }
    };
    /**
     * Determines if the set of permissions are allowed for the current instance
     * @param codes The permission condition type code(s)
     */
    ObjectMeta.prototype.isAllowed = function () {
        var codes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            codes[_i] = arguments[_i];
        }
        // ensure each condition type is allowed for the current instance
        for (var c = codes.length - 1; c >= 0; c--) {
            var code = codes[c];
            var conditionType = condition_type_1.ConditionType.get(code);
            // return undefined if the condition type does not exist
            if (conditionType === undefined) {
                return undefined;
            }
            // throw an exception if the condition type is not a permission
            if (!(conditionType instanceof condition_type_1.PermissionConditionType)) {
                throw new Error("Condition type \"" + code + "\" should be a Permission.");
            }
            // return false if a condition of the current type exists and is a deny permission or does not exist and is a grant permission
            if (this.getCondition(conditionType) ? !conditionType.isAllowed : conditionType.isAllowed) {
                return false;
            }
        }
        return true;
    };
    return ObjectMeta;
}());
exports.ObjectMeta = ObjectMeta;


/***/ }),

/***/ "../../libs/model.js/lib/observable-array.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArray = exports.ArrayObserver = exports.ObservableArray$unshift = exports.ObservableArray$splice = exports.ObservableArray$sort = exports.ObservableArray$shift = exports.ObservableArray$reverse = exports.ObservableArray$push = exports.ObservableArray$pop = exports.ObservableArray$fill = exports.ObservableArray$copyWithin = exports.ObservableArray$batchUpdate = exports.ObservableArray$overrideNativeMethods = exports.ObservableArrayImplementation = exports.ArrayChangeType = exports.ObservableArray = void 0;
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
// eslint-disable-next-line import/export, no-redeclare, @typescript-eslint/no-unused-vars
var ObservableArray = /** @class */ (function () {
    function ObservableArray() {
    }
    /**
     * Returns a value indicating whether the given array is observable
     * @param array The array to check for observability
     */
    ObservableArray.isObservableArray = function (array) {
        return helpers_1.hasOwnProperty(array, "__aob__") && array.__aob__.constructor === ArrayObserver;
    };
    /**
     * Makes the given array observable, if not already
     * @param array The array to make observable
     */
    ObservableArray.ensureObservable = function (array) {
        // Check to see if the array is already an observable list
        if (ObservableArray.isObservableArray(array)) {
            return array;
        }
        if (helpers_1.hasOwnProperty(array, "__aob__")) {
            // TODO: Warn about invalid '__aob__' property?
            return;
        }
        Object.defineProperty(array, "__aob__", {
            configurable: false,
            enumerable: false,
            value: new ArrayObserver(array),
            writable: false
        });
        Object.defineProperty(array, "changed", {
            configurable: false,
            enumerable: true,
            get: function () {
                return this.__aob__.changed;
            }
        });
        array["batchUpdate"] = ObservableArray$batchUpdate;
        ObservableArray$overrideNativeMethods.call(array);
        return array;
    };
    /**
     * Creates a new observable array
     * @param items The initial array items
     */
    ObservableArray.create = function (items) {
        if (items === void 0) { items = []; }
        var array;
        if (items instanceof ObservableArray)
            array = items;
        else
            array = new (ObservableArrayImplementation.bind.apply(ObservableArrayImplementation, __spreadArrays([void 0], items)))();
        ObservableArray.ensureObservable(array);
        return array;
    };
    return ObservableArray;
}());
exports.ObservableArray = ObservableArray;
var ArrayChangeType;
(function (ArrayChangeType) {
    ArrayChangeType[ArrayChangeType["add"] = 1] = "add";
    ArrayChangeType[ArrayChangeType["remove"] = 2] = "remove";
    ArrayChangeType[ArrayChangeType["replace"] = 4] = "replace";
    ArrayChangeType[ArrayChangeType["reorder"] = 8] = "reorder";
})(ArrayChangeType = exports.ArrayChangeType || (exports.ArrayChangeType = {}));
var ObservableArrayImplementation = /** @class */ (function (_super) {
    __extends(ObservableArrayImplementation, _super);
    /**
     * Creates a new observable array
     * @param items The array of initial items
     */
    function ObservableArrayImplementation() {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var _this = _super.apply(this, items) || this;
        Object.defineProperty(_this, "__aob__", {
            configurable: false,
            enumerable: false,
            value: new ArrayObserver(_this),
            writable: false
        });
        Object.defineProperty(_this, "changed", {
            get: function () {
                return this.__aob__.changed;
            }
        });
        if (_this.constructor !== ObservableArrayImplementation) {
            _this["batchUpdate"] = (function (fn) { ObservableArray$batchUpdate.call(this, fn); });
            ObservableArray$overrideNativeMethods.call(_this);
        }
        return _this;
    }
    Object.defineProperty(ObservableArrayImplementation.prototype, "changed", {
        /** Expose the changed event */
        get: function () {
            return this.__aob__.changed;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Begin queueing changes to the array, make changes in the given callback function, then stop queueing and raise events
     */
    ObservableArrayImplementation.prototype.batchUpdate = function (fn, additionalArgs) {
        if (additionalArgs === void 0) { additionalArgs = null; }
        ObservableArray$batchUpdate.call(this, fn, additionalArgs);
    };
    /**
     * The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin
     * @param target Zero based index at which to copy the sequence to. If negative, target will be counted from the end. If target is at or greater than arr.length, nothing will be copied. If target is positioned after start, the copied sequence will be trimmed to fit arr.length.
     * @param start Zero based index at which to start copying elements from. If negative, start will be counted from the end. If start is omitted, copyWithin will copy from the start (defaults to 0).
     * @param end Zero based index at which to end copying elements from. copyWithin copies up to but not including end. If negative, end will be counted from the end. If end is omitted, copyWithin will copy until the end (default to arr.length).
     * @returns The modified array.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ObservableArrayImplementation.prototype.copyWithin = function (target, start, end) {
        return ObservableArray$copyWithin.apply(this, arguments);
    };
    /**
     * The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
     * @param value Value to fill an array.
     * @param start Start index, defaults to 0.
     * @param end End index, defaults to this.length.
     * @returns The modified array.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ObservableArrayImplementation.prototype.fill = function (value, start, end) {
        return ObservableArray$fill.apply(this, arguments);
    };
    /**
     * The pop() method removes the last element from an array and returns that element. This method changes the length of the array.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop
     * @returns The removed element from the array; undefined if the array is empty.
     */
    ObservableArrayImplementation.prototype.pop = function () {
        return ObservableArray$pop.apply(this, arguments);
    };
    /**
     * The push() method adds one or more elements to the end of an array and returns the new length of the array.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push
     * @param items The elements to add to the end of the array.
     * @returns The new length property of the object upon which the method was called.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ObservableArrayImplementation.prototype.push = function () {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            elements[_i] = arguments[_i];
        }
        return ObservableArray$push.apply(this, arguments);
    };
    /**
     * The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse
     * @returns The reversed array.
     */
    ObservableArrayImplementation.prototype.reverse = function () {
        return ObservableArray$reverse.apply(this, arguments);
    };
    /**
     * The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift
     * @returns The removed element from the array; undefined if the array is empty.
     */
    ObservableArrayImplementation.prototype.shift = function () {
        return ObservableArray$shift.apply(this, arguments);
    };
    /**
     * The sort() method sorts the elements of an array in place and returns the array. Javascript sort algorithm on V8 is now stable. The default sort order is according to string Unicode code points.
     * The time and space complexity of the sort cannot be guaranteed as it is implementation dependent.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
     * @param compareFunction Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's Unicode code point value, according to the string conversion of each element.
     * @returns The sorted array. Note that the array is sorted in place, and no copy is made.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ObservableArrayImplementation.prototype.sort = function (compareFunction) {
        return ObservableArray$sort.apply(this, arguments);
    };
    /**
     * The splice() method changes the contents of an array by removing existing elements and/or adding new elements.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
     * @param start  Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.
     * @param deleteCount An integer indicating the number of old array elements to remove. If deleteCount is omitted, or if its value is larger than array.length - start (that is, if it is greater than the number of elements left in the array, starting at start), then all of the elements from start through the end of the array will be deleted. If deleteCount is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).
     * @param items The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.
     * @returns An array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ObservableArrayImplementation.prototype.splice = function (start, deleteCount) {
        var items = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            items[_i - 2] = arguments[_i];
        }
        return ObservableArray$splice.apply(this, arguments);
    };
    /**
     * The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift
     * @param items The elements to add to the front of the array.
     * @returns The new length property of the object upon which the method was called.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ObservableArrayImplementation.prototype.unshift = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return ObservableArray$unshift.apply(this, arguments);
    };
    return ObservableArrayImplementation;
}(Array));
exports.ObservableArrayImplementation = ObservableArrayImplementation;
/**
 * Override's native Array methods that manipulate the array
 * @param array The array to extend
 */
function ObservableArray$overrideNativeMethods() {
    this["copyWithin"] = ObservableArray$copyWithin;
    this["fill"] = ObservableArray$fill;
    this["pop"] = ObservableArray$pop;
    this["push"] = ObservableArray$push;
    this["reverse"] = ObservableArray$reverse;
    this["shift"] = ObservableArray$shift;
    this["sort"] = ObservableArray$sort;
    this["splice"] = ObservableArray$splice;
    this["unshift"] = ObservableArray$unshift;
}
exports.ObservableArray$overrideNativeMethods = ObservableArray$overrideNativeMethods;
/**
 * Begin queueing changes to the array, make changes in the given callback function, then stop queueing and raise events
 */
function ObservableArray$batchUpdate(fn, additionalArgs) {
    if (additionalArgs === void 0) { additionalArgs = null; }
    this.__aob__.startQueueingChanges();
    try {
        fn(this);
        this.__aob__.stopQueueingChanges(true, additionalArgs);
    }
    finally {
        if (this.__aob__._isQueuingChanges) {
            this.__aob__.stopQueueingChanges(false, additionalArgs);
        }
    }
}
exports.ObservableArray$batchUpdate = ObservableArray$batchUpdate;
/**
 * The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin
 * @param array The observable array
 * @param target Zero based index at which to copy the sequence to. If negative, target will be counted from the end. If target is at or greater than arr.length, nothing will be copied. If target is positioned after start, the copied sequence will be trimmed to fit arr.length.
 * @param start Zero based index at which to start copying elements from. If negative, start will be counted from the end. If start is omitted, copyWithin will copy from the start (defaults to 0).
 * @param end Zero based index at which to end copying elements from. copyWithin copies up to but not including end. If negative, end will be counted from the end. If end is omitted, copyWithin will copy until the end (default to arr.length).
 */
function ObservableArray$copyWithin(target, start, end) {
    Array.prototype.copyWithin.apply(this, arguments);
    // TODO: Warn about non-observable manipulation of observable array?
    this.__aob__.raiseEvents({ type: ArrayChangeType.replace, startIndex: start, endIndex: end });
    return this;
}
exports.ObservableArray$copyWithin = ObservableArray$copyWithin;
/**
 * The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
 * @param array The observable array
 * @param value Value to fill an array.
 * @param start Start index, defaults to 0.
 * @param end End index, defaults to this.length.
 */
function ObservableArray$fill(value, start, end) {
    Array.prototype.fill.apply(this, arguments);
    // TODO: Warn about non-observable manipulation of observable array?
    this.__aob__.raiseEvents({ type: ArrayChangeType.replace, startIndex: start, endIndex: end });
    return this;
}
exports.ObservableArray$fill = ObservableArray$fill;
/**
 * The pop() method removes the last element from an array and returns that element. This method changes the length of the array.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop
 * @param array The observable array
 * @returns The removed element from the array; undefined if the array is empty.
 */
function ObservableArray$pop() {
    var originalLength = this.length;
    var removed = Array.prototype.pop.apply(this, arguments);
    if (this.length !== originalLength) {
        var removedIndex = originalLength - 1;
        this.__aob__.raiseEvents({ type: ArrayChangeType.remove, startIndex: removedIndex, endIndex: removedIndex, items: [removed] });
    }
    return removed;
}
exports.ObservableArray$pop = ObservableArray$pop;
/**
 * The push() method adds one or more elements to the end of an array and returns the new length of the array.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push
 * @param array The observable array
 * @param items The elements to add to the end of the array.
 * @returns The new length property of the object upon which the method was called.
 */
function ObservableArray$push() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
    }
    // BUG: Babel's handling of rest arguments seems to be thrown off by 1 (due to the "this" argument?) - cognitoforms/model.js:#5
    items = Array.prototype.slice.call(arguments);
    var originalLength = this.length;
    var newLength = Array.prototype.push.apply(this, arguments);
    if (newLength > 0) {
        this.__aob__.raiseEvents({ type: ArrayChangeType.add, startIndex: originalLength, endIndex: originalLength + (newLength - originalLength) - 1, items: items });
    }
    return newLength;
}
exports.ObservableArray$push = ObservableArray$push;
/**
 * The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse
 * @param array The observable array
 * @returns The reversed array.
 */
function ObservableArray$reverse() {
    Array.prototype.reverse.apply(this, arguments);
    // TODO: Warn about non-observable manipulation of observable array?
    this.__aob__.raiseEvents({ type: ArrayChangeType.reorder, startIndex: 0, endIndex: this.length - 1 });
    return this;
}
exports.ObservableArray$reverse = ObservableArray$reverse;
/**
 * The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift
 * @param array The observable array
 * @returns The removed element from the array; undefined if the array is empty.
 */
function ObservableArray$shift() {
    var originalLength = this.length;
    var removed = Array.prototype.shift.apply(this, arguments);
    if (this.length !== originalLength) {
        this.__aob__.raiseEvents({ type: ArrayChangeType.remove, startIndex: 0, endIndex: 0, items: [removed] });
    }
    return removed;
}
exports.ObservableArray$shift = ObservableArray$shift;
/**
 * The sort() method sorts the elements of an array in place and returns the array. Javascript sort algorithm on V8 is now stable. The default sort order is according to string Unicode code points.
 * The time and space complexity of the sort cannot be guaranteed as it is implementation dependent.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
 * @param array The observable array
 * @param compareFunction Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's Unicode code point value, according to the string conversion of each element.
 * @returns The sorted array. Note that the array is sorted in place, and no copy is made.
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function ObservableArray$sort(compareFunction) {
    Array.prototype.sort.apply(this, arguments);
    // TODO: Warn about non-observable manipulation of observable array?
    this.__aob__.raiseEvents({ type: ArrayChangeType.reorder, startIndex: 0, endIndex: this.length - 1 });
    return this;
}
exports.ObservableArray$sort = ObservableArray$sort;
/**
 * The splice() method changes the contents of an array by removing existing elements and/or adding new elements.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
 * @param array The observable array
 * @param start  Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.
 * @param deleteCount An integer indicating the number of old array elements to remove. If deleteCount is omitted, or if its value is larger than array.length - start (that is, if it is greater than the number of elements left in the array, starting at start), then all of the elements from start through the end of the array will be deleted. If deleteCount is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).
 * @param items The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.
 * @returns An array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned.
 */
function ObservableArray$splice(start, deleteCount) {
    var items = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        items[_i - 2] = arguments[_i];
    }
    // BUG: Babel's handling of rest arguments seems to be thrown off by 1 (due to the "this" argument?) - cognitoforms/model.js:#5
    items = Array.prototype.slice.call(arguments, 2);
    var removed = Array.prototype.splice.apply(this, arguments);
    if (removed.length > 0 || items.length > 0) {
        var changeEvents = [];
        if (removed.length > 0) {
            changeEvents.push({ type: ArrayChangeType.remove, startIndex: start, endIndex: start + removed.length - 1, items: removed });
        }
        if (items.length > 0) {
            changeEvents.push({ type: ArrayChangeType.add, startIndex: start, endIndex: start + items.length - 1, items: items });
        }
        this.__aob__.raiseEvents(changeEvents);
    }
    return removed;
}
exports.ObservableArray$splice = ObservableArray$splice;
/**
 * The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift
 * @param array The observable array
 * @param items The elements to add to the front of the array.
 * @returns The new length property of the object upon which the method was called.
 */
function ObservableArray$unshift() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
    }
    // BUG: Babel's handling of rest arguments seems to be thrown off by 1 (due to the "this" argument?) - cognitoforms/model.js:#5
    items = Array.prototype.slice.call(arguments);
    var originalLength = this.length;
    var newLength = Array.prototype.unshift.apply(this, arguments);
    if (newLength !== originalLength) {
        this.__aob__.raiseEvents({ type: ArrayChangeType.add, startIndex: 0, endIndex: items.length - 1, items: items });
    }
    return newLength;
}
exports.ObservableArray$unshift = ObservableArray$unshift;
var ArrayObserver = /** @class */ (function () {
    function ArrayObserver(array) {
        this.array = array;
        this.changed = new events_1.Event();
        this._isQueuingChanges = false;
    }
    ArrayObserver.prototype.raiseEvents = function (changes, additionalArgs) {
        if (this._isQueuingChanges) {
            if (!this._queuedChanges) {
                this._queuedChanges = [];
            }
            if (Array.isArray(changes)) {
                Array.prototype.push.apply(this._queuedChanges, changes);
            }
            else {
                this._queuedChanges.push(changes);
            }
        }
        else if (Array.isArray(changes)) {
            if (changes.length)
                this.changed.publish(this.array, { changes: changes, additionalArgs: additionalArgs });
        }
        else {
            this.changed.publish(this.array, { changes: [changes], additionalArgs: additionalArgs });
        }
    };
    ArrayObserver.prototype.startQueueingChanges = function () {
        this._isQueuingChanges = true;
        if (!this._queuedChanges) {
            this._queuedChanges = [];
        }
    };
    ArrayObserver.prototype.stopQueueingChanges = function (raiseEvents, additionalArgs) {
        if (additionalArgs === void 0) { additionalArgs = null; }
        this._isQueuingChanges = false;
        if (raiseEvents) {
            this.raiseEvents(this._queuedChanges, additionalArgs);
            delete this._queuedChanges;
        }
    };
    return ArrayObserver;
}());
exports.ArrayObserver = ArrayObserver;
function callSplice(arr, index, removeCount, addItems) {
    if (removeCount || addItems.length > 0) {
        var addItemsArgs = [index, removeCount].concat(addItems);
        arr.splice.apply(arr, addItemsArgs);
    }
}
function updateArray(array, values) {
    var pointer = 0;
    var srcSeek = 0;
    var tgtSeek = 0;
    while (srcSeek < array.length) {
        if (array[srcSeek] === values[tgtSeek]) {
            if (pointer === srcSeek && pointer === tgtSeek) {
                // items match, so advance
                pointer = srcSeek = tgtSeek = pointer + 1;
            }
            else {
                // remove range from source and add range from target
                callSplice(array, pointer, srcSeek - pointer, values.slice(pointer, tgtSeek));
                // reset to index follow target seek location since arrays match up to that point
                pointer = srcSeek = tgtSeek = tgtSeek + 1;
            }
        }
        else if (tgtSeek >= values.length) {
            // reached the end of the target array, so advance the src pointer and test again
            tgtSeek = pointer;
            srcSeek += 1;
        }
        else {
            // advance to the next target item to test
            tgtSeek += 1;
        }
    }
    callSplice(array, pointer, srcSeek - pointer, values.slice(pointer, Math.max(tgtSeek, values.length)));
}
exports.updateArray = updateArray;


/***/ }),

/***/ "../../libs/model.js/lib/property-chain.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyChain = void 0;
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var format_1 = __webpack_require__("../../libs/model.js/lib/format.js");
/**
 * Encapsulates the logic required to work with a chain of properties and
 * a root object, allowing interaction with the chain as if it were a
 * single property of the root object.
 */
var PropertyChain = /** @class */ (function () {
    function PropertyChain(rootType, path) {
        var _this = this;
        this.rootType = rootType;
        // replace "." in type casts so that they do not interfere with splitting path
        path = path.replace(/<[^>]*>/ig, function (e) { return e.replace(/\./ig, function () { return "$_$"; }); });
        var currentType = rootType;
        this.properties = path.split(".").map(function (step) {
            var property;
            // Regex pattern matches all letters and digits that are valid for javascript identifiers, including  "_"
            var parsed = step.match(/^([_0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]+)(<([_$0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc$]+)>)?$/i);
            if (parsed) {
                property = currentType.getProperty(parsed[1]);
            }
            // Invalid property
            if (!property) {
                throw new Error("Path '" + path + "' references unknown property '" + step + "' on type '" + currentType + "'.");
            }
            // Get the current type of the step
            currentType = property.propertyType.meta;
            if (parsed[3]) {
                currentType = rootType.model.types[parsed[3]];
            }
            // Return the property
            return property;
        });
        // create the accessed event and automatically subscribe to property accesses along the path when the event is used
        this.accessed = new events_1.Event(function (event) {
            if (event.hasSubscribers() && !_this.stepAccessed) {
                _this.stepAccessed = [];
                _this.properties.forEach(function (property, index, props) {
                    var handler;
                    var priorProp = index > 0 ? props[index - 1] : null;
                    handler = function (args) {
                        _this.rootType.known().forEach(function (known) {
                            if (_this.testConnection(known, args.entity, priorProp)) {
                                _this.accessed.publish(known, {
                                    entity: known,
                                    property: args.property,
                                    value: args.value
                                });
                            }
                        });
                    };
                    _this.stepAccessed[index] = handler;
                    property.accessed.subscribe(handler);
                });
            }
            else if (!event.hasSubscribers() && _this.stepAccessed) {
                _this.properties.forEach(function (property, index) { return property.accessed.unsubscribe(_this.stepAccessed[index]); });
                _this.stepAccessed = null;
            }
        });
        // create the changed event and automatically subscribe to property changes along the path when the event is used
        this.changed = new events_1.Event(function (event) {
            if (event.hasSubscribers() && !_this.stepChanged) {
                _this.stepChanged = [];
                _this.properties.forEach(function (property, index, props) {
                    var handler;
                    var priorProp = index > 0 ? props[index - 1] : null;
                    handler = function (args) {
                        if (priorProp) {
                            _this.rootType.known().forEach(function (known) {
                                if (_this.testConnection(known, args.entity, priorProp)) {
                                    _this.changed.publish(known, {
                                        entity: known,
                                        property: args.property,
                                        oldValue: args.oldValue,
                                        newValue: args.newValue
                                    });
                                }
                            });
                        }
                        else {
                            _this.changed.publish(args.entity, {
                                entity: args.entity,
                                property: args.property,
                                oldValue: args.oldValue,
                                newValue: args.newValue
                            });
                        }
                    };
                    _this.stepChanged[index] = handler;
                    property.changed.subscribe(handler);
                });
            }
            else if (!event.hasSubscribers() && _this.stepChanged) {
                _this.properties.forEach(function (property, index) { return property.changed.unsubscribe(_this.stepChanged[index]); });
                _this.stepChanged = null;
            }
        });
        // calculate the path
        this.path = getPropertyChainPathFromIndex(this, 0);
    }
    PropertyChain.prototype.equals = function (prop) {
        if (prop === null || prop === undefined) {
            return;
        }
        if (prop instanceof property_1.Property) {
            return this.properties.length === 1 && this.properties[0] === prop;
        }
        if (prop instanceof PropertyChain) {
            if (prop.properties.length !== this.properties.length) {
                return false;
            }
            for (var i = 0; i < this.properties.length; i++) {
                if (!this.properties[i].equals(prop.properties[i])) {
                    return false;
                }
            }
            return true;
        }
    };
    /**
     * Iterates over all objects along a property chain starting with the root object (obj).
     * This is analogous to the Array forEach function. The callback may return a Boolean
     * value to indicate whether or not to continue iterating.
     * @param obj The root object (of type `IEntity`) to use in iterating over the chain.
     * @param callback The function to invoke at each iteration step.  May return a Boolean value to indicate whether or not to continue iterating.
     * @param filter An optional property filter, if specified, only iterates over the results of this property.
     */
    PropertyChain.prototype.each = function (obj, callback, filter /*, target: IEntity, p: number, lastProp: IProperty */) {
        if (filter === void 0) { filter = null; }
        if (obj == null)
            throw new Error("Argument 'obj' cannot be null or undefined.");
        if (callback == null)
            throw new Error("Argument 'callback' cannot be null or undefined.");
        if (typeof (callback) !== "function")
            throw new Error("Argument 'callback' must be of type function: " + callback + ".");
        // invoke callback on obj first
        var target = arguments[3] || obj;
        var lastProp = arguments[5] || null;
        for (var p = arguments[4] || 0; p < this.properties.length; p++) {
            var prop = this.properties[p];
            var isLastProperty = p === this.properties.length - 1;
            var canSkipRemainingProps = isLastProperty || (filter && lastProp === filter);
            var enableCallback = (!filter || lastProp === filter);
            // if the target is a list, invoke the callback once per item in the list
            if (target instanceof Array) {
                for (var i = 0; i < target.length; ++i) {
                    if (enableCallback && callback(target[i], prop) === false) {
                        return false;
                    }
                    if (!canSkipRemainingProps) {
                        var targetValue = prop.value(target[i]);
                        // continue along the chain for this list item
                        if (!targetValue || PropertyChain.prototype.each.call(this, obj, callback, filter, targetValue, p + 1, prop) === false) {
                            return false;
                        }
                    }
                }
                // subsequent properties already visited in preceding loop
                return true;
            }
            else {
                // take into account any chain filters along the way
                if (enableCallback && callback(target, prop) === false) {
                    return false;
                }
            }
            // if a property filter is used and was just evaluated, stop early
            if (canSkipRemainingProps) {
                break;
            }
            // move to next property in the chain
            target = target.__fields__[prop.name];
            // break early if the target is undefined
            if (target === undefined || target === null) {
                break;
            }
            lastProp = prop;
        }
        return true;
    };
    Object.defineProperty(PropertyChain.prototype, "containingType", {
        get: function () {
            return this.rootType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "firstProperty", {
        get: function () {
            return this.properties[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "lastProperty", {
        get: function () {
            return this.properties[this.properties.length - 1];
        },
        enumerable: false,
        configurable: true
    });
    PropertyChain.prototype.toPropertyArray = function () {
        return this.properties.slice();
    };
    PropertyChain.prototype.getLastTarget = function (obj) {
        for (var p = 0; p < this.properties.length - 1; p++) {
            var prop = this.properties[p];
            // exit early on null or undefined
            if (!obj === undefined || obj === null)
                return obj;
            obj = prop.value(obj);
        }
        return obj;
    };
    PropertyChain.prototype.canSetValue = function (obj, value) {
        return this.lastProperty.canSetValue(this.getLastTarget(obj), value);
    };
    // Determines if this property chain connects two objects.
    PropertyChain.prototype.testConnection = function (fromRoot, toObj, viaProperty) {
        var connected = false;
        // perform simple comparison if no property is defined
        if (!viaProperty) {
            return fromRoot === toObj;
        }
        this.each(fromRoot, function (target) {
            if (target === toObj) {
                connected = true;
                return false;
            }
        }, viaProperty);
        return connected;
    };
    Object.defineProperty(PropertyChain.prototype, "propertyType", {
        get: function () {
            return this.lastProperty.propertyType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "format", {
        get: function () {
            return this.lastProperty.format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "isList", {
        get: function () {
            return this.lastProperty.isList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "isCalculated", {
        get: function () {
            return this.lastProperty.isCalculated;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "label", {
        get: function () {
            return this.lastProperty.label;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "labelSource", {
        get: function () {
            return this.lastProperty.labelSource;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "labelIsFormat", {
        get: function () {
            return format_1.Format.hasTokens(this.label);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "helptext", {
        get: function () {
            return this.lastProperty.helptext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "helptextIsFormat", {
        get: function () {
            return format_1.Format.hasTokens(this.helptext);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyChain.prototype, "name", {
        get: function () {
            return this.lastProperty.name;
        },
        enumerable: false,
        configurable: true
    });
    PropertyChain.prototype.value = function (obj, val, additionalArgs) {
        if (obj === void 0) { obj = null; }
        if (val === void 0) { val = null; }
        if (additionalArgs === void 0) { additionalArgs = null; }
        var lastTarget = this.getLastTarget(obj);
        var lastProp = this.lastProperty;
        if (arguments.length > 1) {
            lastProp.value(lastTarget, val, additionalArgs);
        }
        else if (lastTarget) {
            return lastProp.value(lastTarget);
        }
    };
    PropertyChain.prototype.toString = function () {
        var path = this.properties.map(function (e) { return e.name; }).join(".");
        return "this<" + this.rootType + ">." + path;
    };
    return PropertyChain;
}());
exports.PropertyChain = PropertyChain;
function getPropertyChainPathFromIndex(chain, startIndex) {
    var steps = [];
    var props = chain.toPropertyArray();
    var previousStepType;
    props.slice(startIndex).forEach(function (p, i) {
        if (i !== 0) {
            if (p.containingType !== previousStepType && p.containingType.isSubclassOf(previousStepType)) {
                steps[steps.length - 1] = steps[steps.length - 1] + "<" + p.containingType.fullName + ">";
            }
        }
        steps.push(p.name);
        previousStepType = p.propertyType.meta;
    });
    return steps.join(".");
}


/***/ }),

/***/ "../../libs/model.js/lib/property-path.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "../../libs/model.js/lib/property.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Property$setter = exports.Property$init = exports.Property$pendingInit = exports.Property$generateOwnProperty = exports.Property$generatePrototypeProperty = exports.Property$generateStaticProperty = exports.Property$generateShortcuts = exports.Property$format = exports.evaluateLabel = exports.getLabelSourceType = exports.getLabelFormat = exports.isPropertyOptions = exports.isPropertyBooleanFunction = exports.isPropertyBooleanFunctionAndOptions = exports.isPropertyValueFunction = exports.Property = void 0;
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var format_1 = __webpack_require__("../../libs/model.js/lib/format.js");
var type_1 = __webpack_require__("../../libs/model.js/lib/type.js");
var property_chain_1 = __webpack_require__("../../libs/model.js/lib/property-chain.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var rule_1 = __webpack_require__("../../libs/model.js/lib/rule.js");
var calculated_property_rule_1 = __webpack_require__("../../libs/model.js/lib/calculated-property-rule.js");
var string_format_rule_1 = __webpack_require__("../../libs/model.js/lib/string-format-rule.js");
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
var allowed_values_rule_1 = __webpack_require__("../../libs/model.js/lib/allowed-values-rule.js");
var required_rule_1 = __webpack_require__("../../libs/model.js/lib/required-rule.js");
var range_rule_1 = __webpack_require__("../../libs/model.js/lib/range-rule.js");
var string_length_rule_1 = __webpack_require__("../../libs/model.js/lib/string-length-rule.js");
var list_length_rule_1 = __webpack_require__("../../libs/model.js/lib/list-length-rule.js");
var initilization_context_1 = __webpack_require__("../../libs/model.js/lib/initilization-context.js");
var condition_type_1 = __webpack_require__("../../libs/model.js/lib/condition-type.js");
var Property = /** @class */ (function () {
    function Property(containingType, name, propertyType, isIdentifier, isList, options) {
        this.containingType = containingType;
        this.name = name;
        this.propertyType = propertyType;
        this.isIdentifier = isIdentifier;
        this.isList = isList;
        this.required = false;
        this.rules = [];
        this.getter = Property$makeGetter(this, Property$getter);
        this.setter = Property$makeSetter(this, Property$setter);
        this.changed = new events_1.Event();
        this.accessed = new events_1.Event();
        // Apply property options
        if (options)
            this.extend(options);
    }
    Object.defineProperty(Property.prototype, "isConstant", {
        get: function () {
            return this.constant !== null && this.constant !== undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "labelIsFormat", {
        get: function () {
            return format_1.Format.hasTokens(this.label);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "helptextIsFormat", {
        get: function () {
            return format_1.Format.hasTokens(this.helptext);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "path", {
        get: function () {
            return this.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "firstProperty", {
        get: function () {
            return this;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Property.prototype, "lastProperty", {
        get: function () {
            return this;
        },
        enumerable: false,
        configurable: true
    });
    Property.prototype.getLastTarget = function (obj) {
        return obj;
    };
    Object.defineProperty(Property.prototype, "defaultValue", {
        get: function () {
            if (this._defaultValue !== undefined) {
                // clone array and date defaults since they are mutable javascript types
                return this._defaultValue instanceof Array ? this._defaultValue.slice() :
                    this._defaultValue instanceof Date ? new Date(+this._defaultValue) :
                        // TODO: Implement TimeSpan class/type?
                        // this._defaultValue instanceof TimeSpan ? new TimeSpan(this._defaultValue.totalMilliseconds) :
                        this._defaultValue;
            }
            else
                return helpers_1.getDefaultValue(this.isList, this.propertyType);
        },
        enumerable: false,
        configurable: true
    });
    Property.prototype.extend = function (options, targetType) {
        var _this = this;
        if (!targetType)
            targetType = this.containingType;
        // Utility function to convert a path string into a resolved array of Property and PropertyChain instances
        function resolveDependsOn(property, rule, dependsOn) {
            // return an empty dependency array if no path was specified
            if (!dependsOn)
                return [];
            // throw an exception if dependsOn is not a string
            if (typeof (dependsOn) !== "string")
                throw new Error("Invalid dependsOn property for '" + rule + "' rule on '" + property + ".");
            // get the property paths for the specified dependency string
            return targetType.getPaths(dependsOn);
        }
        // Use prepare() to defer property path resolution while the model is being extended
        targetType.model.prepare(function () {
            options = __assign({}, options);
            // Label
            if (options.label)
                _this.label = options.label;
            else if (targetType.model.settings.autogeneratePropertyLabels && !_this.label)
                _this.label = _this.name.replace(/(^[a-z]+|[A-Z]{2,}(?=[A-Z][a-z]|$)|[A-Z][a-z]*)/g, " $1").trim();
            // Label Source
            if (options.labelSource) {
                if (typeof (options.labelSource) !== "string")
                    throw new Error("Invalid labelSource property for '" + _this + ".");
                targetType.model.ready(function () {
                    _this.labelSource = targetType.getPath(options.labelSource);
                });
            }
            // Helptext
            _this.helptext = options.helptext;
            // Format
            if (options.format) {
                // Specifier
                if (typeof (options.format) === "string") {
                    var format = options.format;
                    _this.format = targetType.model.getFormat(_this.propertyType, format);
                }
                // Format
                else if (options.format instanceof format_1.Format) {
                    // TODO: convert description/expression/reformat into a Format object
                    _this.format = options.format;
                }
                // String Format
                else if (helpers_1.isType(options.format, function (f) { return helpers_1.getTypeName(f) === "object" && f.expression; })) {
                    var format_2 = options.format;
                    targetType.model.ready(function () {
                        new string_format_rule_1.StringFormatRule(targetType, {
                            property: _this,
                            description: format_2.description,
                            message: format_2.message,
                            expression: format_2.expression,
                            reformat: format_2.reformat
                        })
                            .register();
                    });
                }
                // Error
                else {
                    throw new Error("Invalid 'format' option for '" + _this + "'.");
                }
            }
            // Constant
            if (options.constant !== null && options.constant !== undefined) {
                targetType.model.ready(function () {
                    // Lazily obtain the constant to ensure all types/rules associated with the constant value have been loaded and initialized
                    _this.constant = function () { return targetType.model.serializer.deserialize(null, options.constant, _this, new initilization_context_1.InitializationContext(true)); };
                });
            }
            // Get
            if (options.get) {
                if (typeof (options.get) === "function") {
                    options.get = { function: options.get, dependsOn: "" };
                }
                if (isPropertyOptions(options.get)) {
                    var getOptions_1 = options.get;
                    if (typeof (getOptions_1.function) !== "function") {
                        throw new Error("Invalid property 'get' function of type '" + helpers_1.getTypeName(getOptions_1.function) + "'.");
                    }
                    targetType.model.ready(function () {
                        new calculated_property_rule_1.CalculatedPropertyRule(targetType, null, {
                            property: _this,
                            calculate: getOptions_1.function,
                            onChangeOf: resolveDependsOn(_this, "get", getOptions_1.dependsOn)
                        }).register();
                    });
                }
                else {
                    throw new Error("Invalid property 'get' option of type '" + helpers_1.getTypeName(options.get) + "'.");
                }
            }
            // Set
            if (typeof options.set === "function") {
                var property_1 = _this;
                new rule_1.Rule(targetType, null, {
                    onInit: true,
                    onChangeOf: [_this],
                    execute: function () {
                        options.set.call(this, property_1.value(this));
                    }
                }).register();
            }
            // Init
            if (options.init !== undefined) {
                var initFn = void 0;
                if (isPropertyValueFunction(options.init))
                    initFn = options.init;
                else
                    throw new Error("Invalid property 'init' option of type '" + helpers_1.getTypeName(options.init) + "'.");
                _this.initializer = initFn;
            }
            // Default
            if (options.default !== undefined) {
                if (isPropertyValueFunction(options.default)) {
                    // Always generate a rule for default function
                    options.default = { function: options.default, dependsOn: "" };
                }
                else if (isPropertyOptions(options.default)) {
                    // Use default object as specified
                }
                else if (options.default === null || type_1.isValue(options.default) || type_1.isValueArray(options.default)) {
                    // Constant
                    var defaultConstant_1 = options.default;
                    // Cannot set default constant value for entity-typed property
                    if (type_1.isEntityType(_this.propertyType)) {
                        throw new Error("Cannot set a constant default value for a property of type '" + _this.propertyType.meta.fullName + "'.");
                    }
                    // Verify that the constant value is of the proper built-in type
                    if (options.default !== null && type_1.isValue(options.default)) {
                        var defaultOptionTypeName = helpers_1.getTypeName(defaultConstant_1);
                        var propertyTypeName = helpers_1.getConstructorName(_this.propertyType).toLowerCase();
                        if (defaultOptionTypeName !== propertyTypeName) {
                            throw new Error("Cannot set a default value of type '" + defaultOptionTypeName + "' for a property of type '" + propertyTypeName + "'.");
                        }
                    }
                    // If extending baseType property specifically for a child type, use a rule
                    if (_this.containingType === targetType)
                        _this._defaultValue = defaultConstant_1;
                    else
                        options.default = { function: function () { return defaultConstant_1; }, dependsOn: "" };
                }
                else {
                    throw new Error("Invalid property 'default' option of type '" + helpers_1.getTypeName(options.default) + "'.");
                }
                if (isPropertyOptions(options.default)) {
                    var defaultOptions_1 = options.default;
                    if (typeof (options.default.function) !== "function") {
                        throw new Error("Invalid property 'default' function of type '" + helpers_1.getTypeName(options.default.function) + "'.");
                    }
                    var defaultFn_1 = options.default.function;
                    targetType.model.ready(function () {
                        new calculated_property_rule_1.CalculatedPropertyRule(targetType, null, {
                            property: _this,
                            calculate: defaultFn_1,
                            onChangeOf: resolveDependsOn(_this, "default", defaultOptions_1.dependsOn),
                            isDefaultValue: true
                        }).register();
                    });
                }
            }
            // Allowed Values
            if (options.allowedValues) {
                if (typeof (options.allowedValues) === "function") {
                    var originalAllowedValues_1 = options.allowedValues;
                    var allowedValuesFunction = function () { return originalAllowedValues_1.call(this); };
                    options.get = { function: allowedValuesFunction, dependsOn: "" };
                }
                if (isPropertyOptions(options.allowedValues)) {
                    var allowedValuesOptions_1 = options.allowedValues;
                    if (typeof (options.allowedValues.function) !== "function") {
                        throw new Error("Invalid property 'allowedValues' function of type '" + helpers_1.getTypeName(options.allowedValues.function) + "'.");
                    }
                    targetType.model.ready(function () {
                        (new allowed_values_rule_1.AllowedValuesRule(targetType, {
                            property: _this,
                            source: allowedValuesOptions_1.function,
                            ignoreValidation: allowedValuesOptions_1.ignoreValidation,
                            preventInvalidValues: allowedValuesOptions_1.preventInvalidValues,
                            onChangeOf: resolveDependsOn(_this, "allowedValues", allowedValuesOptions_1.dependsOn)
                        })).register();
                    });
                }
                else {
                    throw new Error("Invalid property 'get' option of type '" + helpers_1.getTypeName(options.get) + "'.");
                }
            }
            // Range
            if (options.range) {
                var min_1;
                if (options.range.min != null) {
                    if (isPropertyValueFunction(options.range.min)) {
                        min_1 = options.range.min;
                    }
                    else if (type_1.isValue(options.range.min)) {
                        var minConstant_1 = options.range.min;
                        min_1 = function () { return minConstant_1; };
                    }
                    else {
                        throw new Error("Invalid property 'range.min' option of type '" + helpers_1.getTypeName(options.range.min) + "'.");
                    }
                }
                var max_1;
                if (options.range.max != null) {
                    if (isPropertyValueFunction(options.range.max)) {
                        max_1 = options.range.max;
                    }
                    else if (type_1.isValue(options.range.max)) {
                        var maxConstant_1 = options.range.max;
                        max_1 = function () { return maxConstant_1; };
                    }
                    else {
                        throw new Error("Invalid property 'range.max' option of type '" + helpers_1.getTypeName(options.range.max) + "'.");
                    }
                }
                targetType.model.ready(function () {
                    var onChangeOf = resolveDependsOn(_this, "range", options.range.dependsOn);
                    new range_rule_1.RangeRule(targetType, { property: _this, onChangeOf: onChangeOf, min: min_1, max: max_1 }).register();
                });
            }
            // Length
            if (options.length) {
                var min_2;
                if (options.length.min != null) {
                    if (isPropertyValueFunction(options.length.min)) {
                        min_2 = options.length.min;
                    }
                    else if (type_1.isValue(options.length.min, Number)) {
                        var minConstant_2 = options.length.min;
                        min_2 = function () { return minConstant_2; };
                    }
                    else {
                        throw new Error("Invalid property 'length.min' option of type '" + helpers_1.getTypeName(options.length.min) + "'.");
                    }
                }
                var max_2;
                if (options.length.max != null) {
                    if (isPropertyValueFunction(options.length.max)) {
                        max_2 = options.length.max;
                    }
                    else if (type_1.isValue(options.length.max, Number)) {
                        var maxConstant_2 = options.length.max;
                        max_2 = function () { return maxConstant_2; };
                    }
                    else {
                        throw new Error("Invalid property 'length.max' option of type '" + helpers_1.getTypeName(options.length.max) + "'.");
                    }
                }
                targetType.model.ready(function () {
                    var onChangeOf = resolveDependsOn(_this, "length", options.length.dependsOn);
                    if (_this.isList) {
                        new list_length_rule_1.ListLengthRule(targetType, { property: _this, onChangeOf: onChangeOf, min: min_2, max: max_2 }).register();
                    }
                    else {
                        new string_length_rule_1.StringLengthRule(targetType, { property: _this, onChangeOf: onChangeOf, min: min_2, max: max_2 }).register();
                    }
                });
            }
            // Required
            if (options.required) {
                var requiredOptions = options.required;
                // Store required options on property so that they can be referenced externally
                _this.required = requiredOptions;
                // Always Required
                if (typeof (options.required) === "boolean") {
                    if (options.required) {
                        targetType.model.ready(function () {
                            var requiredRule = new required_rule_1.RequiredRule(targetType, { property: _this });
                            requiredRule.register();
                        });
                    }
                }
                // Conditionally Required
                else {
                    var requiredFn_1;
                    var requiredMessage_1;
                    var requiredDependsOn_1;
                    if (isPropertyOptions(options.required)) {
                        requiredFn_1 = options.required.function;
                        requiredMessage_1 = options.required.message;
                        requiredDependsOn_1 = options.required.dependsOn;
                    }
                    else {
                        requiredFn_1 = options.required;
                    }
                    targetType.model.ready(function () {
                        (new required_rule_1.RequiredRule(targetType, {
                            property: _this,
                            when: requiredFn_1,
                            message: requiredMessage_1,
                            onChangeOf: requiredDependsOn_1 ? resolveDependsOn(_this, "required", requiredDependsOn_1) : null
                        })).register();
                    });
                }
            }
            // Error
            if (options.error) {
                (Array.isArray(options.error) ? options.error : [options.error]).forEach(function (errorOptions) {
                    var errorFn = errorOptions.function;
                    if (errorOptions.resource)
                        errorFn = function () {
                            return errorOptions.function.call(this) ? targetType.model.getResource(errorOptions.resource) : null;
                        };
                    var errorDependsOn = errorOptions.dependsOn;
                    if (typeof (errorFn) !== "function") {
                        throw new Error("Invalid property 'error' function of type '" + helpers_1.getTypeName(errorOptions.function) + "'.");
                    }
                    var conditionType;
                    if (errorOptions.code)
                        conditionType = condition_type_1.ConditionType.get(errorOptions.code) || new condition_type_1.ErrorConditionType(errorOptions.code, "error");
                    targetType.model.ready(function () {
                        (new validation_rule_1.ValidationRule(targetType, {
                            property: _this,
                            properties: errorOptions.properties ? helpers_1.flatMap(errorOptions.properties, function (p) { return targetType.getPaths(p); }) : null,
                            onChangeOf: resolveDependsOn(_this, "", errorDependsOn),
                            message: errorFn,
                            conditionType: conditionType
                        })).register();
                    });
                });
            }
        });
    };
    Property.prototype.equals = function (prop) {
        if (prop === null || prop === undefined) {
            return;
        }
        if (prop instanceof property_chain_1.PropertyChain) {
            return prop.equals(this);
        }
        if (prop instanceof Property) {
            return this === prop;
        }
    };
    Property.prototype.each = function (obj, callback, filter) {
        if (filter === void 0) { filter = null; }
        if (!filter || filter === this)
            callback(obj, this);
    };
    Property.prototype.toString = function () {
        return "this<" + this.containingType + ">." + this.name;
    };
    Property.prototype.canSetValue = function (obj, val) {
        // NOTE: only allow values of the correct data type to be set in the model
        if (val === undefined) {
            // TODO: Warn about setting value to undefined?
            // logWarning("You should not set property values to undefined, use null instead: property = ." + this._name + ".");
            // console.warn(`You should not set property values to undefined, use null instead: property = ${this.name}.`);
            return true;
        }
        if (val === null) {
            return true;
        }
        // for entities check base types as well
        if (val.constructor && val.constructor.meta) {
            for (var valType = val.constructor.meta; valType; valType = valType.baseType) {
                if (valType.jstype === this.propertyType) {
                    return true;
                }
            }
            return false;
        }
        // Data types
        else {
            var valObjectType = val.constructor;
            // "Normalize" data type in case it came from another frame as well as ensure that the types are the same
            switch (helpers_1.getTypeName(val)) {
                case "string":
                    valObjectType = String;
                    break;
                case "number":
                    valObjectType = Number;
                    break;
                case "boolean":
                    valObjectType = Boolean;
                    break;
                case "date":
                    valObjectType = Date;
                    break;
                case "array":
                    valObjectType = Array;
                    break;
            }
            // value property type check
            return valObjectType === this.propertyType ||
                // entity array type check
                (valObjectType === Array && this.isList && (!this.propertyType || val.every(function (child) {
                    if (type_1.isEntityType(this.propertyType)) {
                        if (child.constructor && child.constructor.meta) {
                            for (var childType = child.constructor.meta; childType; childType = childType.baseType) {
                                if (childType.jstype === this.propertyType) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    }
                    else {
                        var itemObjectType = child.constructor;
                        // "Normalize" data type in case it came from another frame as well as ensure that the types are the same
                        switch (helpers_1.getTypeName(child)) {
                            case "string":
                                itemObjectType = String;
                                break;
                            case "number":
                                itemObjectType = Number;
                                break;
                            case "boolean":
                                itemObjectType = Boolean;
                                break;
                            case "date":
                                itemObjectType = Date;
                                break;
                            case "array":
                                itemObjectType = Array;
                                break;
                        }
                        return itemObjectType === this.propertyType;
                    }
                }, this)));
        }
    };
    Property.prototype.value = function (obj, val, additionalArgs) {
        if (obj === void 0) { obj = null; }
        if (val === void 0) { val = null; }
        if (additionalArgs === void 0) { additionalArgs = null; }
        if (obj === undefined || obj === null) {
            throw new Error("Cannot " + (arguments.length > 1 ? "set" : "get") + " value for property \"" + this.name + "\" on type \"" + this.containingType + "\": target is null or undefined.");
        }
        if (arguments.length > 1) {
            Property$setter(this, obj, val, additionalArgs);
        }
        else {
            return Property$getter(this, obj);
        }
    };
    Property.prototype.isInited = function (obj) {
        // If the backing field has been created, the property is initialized
        return obj.__fields__.hasOwnProperty(this.name);
    };
    return Property;
}());
exports.Property = Property;
function isPropertyValueFunction(obj) {
    return typeof (obj) === "function";
}
exports.isPropertyValueFunction = isPropertyValueFunction;
function isPropertyBooleanFunctionAndOptions(obj) {
    return typeof (obj) === "object";
}
exports.isPropertyBooleanFunctionAndOptions = isPropertyBooleanFunctionAndOptions;
function isPropertyBooleanFunction(obj) {
    return typeof (obj) === "function";
}
exports.isPropertyBooleanFunction = isPropertyBooleanFunction;
function isPropertyOptions(obj, check) {
    if (check === void 0) { check = null; }
    return helpers_1.isType(obj, function (d) { return helpers_1.getTypeName(d) === "object" && (!check || check(d)); });
}
exports.isPropertyOptions = isPropertyOptions;
/**
 * Gets a format object for the given property's label, if it is dynamic (i.e. contains format tokens)
 */
function getLabelFormat(property) {
    if (property.label && property.labelIsFormat) {
        var labelSourceType = getLabelSourceType(property);
        return labelSourceType.model.getFormat(labelSourceType.jstype, property.label);
    }
}
exports.getLabelFormat = getLabelFormat;
/**
 * Gets the model type of the source object that should be used to evaluate the
 * property's label, if it is dynamic (i.e. contains format tokens)
 */
function getLabelSourceType(property) {
    // If a label source is specified, then determine it's model type
    if (property.labelSource) {
        var labelSourceType = property.labelSource.propertyType;
        if (type_1.isEntityType(labelSourceType))
            return labelSourceType.meta;
    }
    return property.containingType;
}
exports.getLabelSourceType = getLabelSourceType;
/**
 * Evaluates the given property's label, using the given entity as context if the label is dynamic (i.e. contains format tokens)
 */
function evaluateLabel(property, entity) {
    if (property.labelIsFormat) {
        var labelFormat = getLabelFormat(property);
        var labelFormatInstance = entity;
        if (property.labelSource) {
            labelFormatInstance = property.labelSource.value(entity);
        }
        return labelFormat.convert(labelFormatInstance);
    }
    else {
        return property.label;
    }
}
exports.evaluateLabel = evaluateLabel;
function Property$format(prop, val) {
    if (prop.format) {
        return prop.format.convert(val);
    }
}
exports.Property$format = Property$format;
// export function Property$equals(prop1: Property | IPropertyChain, prop2: Property | IPropertyChain): boolean {
// 	if (prop1 === null || prop1 === undefined || prop2 === null || prop2 === undefined) {
// 		return;
// 	}
// 	if (PropertyChain$isPropertyChain(prop1)) {
// 		return (prop1 as PropertyChain).equals(prop2);
// 	}
// 	if (PropertyChain$isPropertyChain(prop2)) {
// 		return (prop2 as PropertyChain).equals(prop1);
// 	}
// 	if (Property$isProperty(prop1) && Property$isProperty(prop2)) {
// 		return prop1 === prop2;
// 	}
// }
function Property$generateShortcuts(property, target, overwrite) {
    if (overwrite === void 0) { overwrite = null; }
    var shortcutName = "$" + property.name;
    if (!(Object.prototype.hasOwnProperty.call(target, shortcutName)) || overwrite) {
        target[shortcutName] = property;
    }
}
exports.Property$generateShortcuts = Property$generateShortcuts;
function Property$generateStaticProperty(property, target) {
    Object.defineProperty(target, property.name, {
        configurable: false,
        enumerable: true,
        get: property.getter,
        set: property.setter
    });
}
exports.Property$generateStaticProperty = Property$generateStaticProperty;
function Property$generatePrototypeProperty(property, target) {
    Object.defineProperty(target, property.name, {
        configurable: false,
        enumerable: true,
        get: property.getter,
        set: property.setter
    });
}
exports.Property$generatePrototypeProperty = Property$generatePrototypeProperty;
function Property$generateOwnProperty(property, obj) {
    Object.defineProperty(obj, property.name, {
        configurable: false,
        enumerable: true,
        get: property.getter,
        set: property.setter
    });
}
exports.Property$generateOwnProperty = Property$generateOwnProperty;
function Property$pendingInit(obj, prop, value) {
    if (value === void 0) { value = null; }
    var pendingInit;
    if (Object.prototype.hasOwnProperty.call(obj, "__pendingInit__")) {
        pendingInit = obj.__pendingInit__;
    }
    else {
        Object.defineProperty(obj, "__pendingInit__", { enumerable: false, value: (pendingInit = {}), writable: true });
    }
    if (arguments.length > 2) {
        if (value === false) {
            delete pendingInit[prop.name];
        }
        else {
            pendingInit[prop.name] = value;
        }
    }
    else {
        var currentValue = obj.__fields__[prop.name];
        return currentValue === undefined || pendingInit[prop.name] === true;
    }
}
exports.Property$pendingInit = Property$pendingInit;
function Property$subArrayEvents(obj, property, array) {
    array.changed.subscribe(function (args) {
        Property$pendingInit(obj, property, false);
        // Don't raise a no-op list change event
        if (!args.changes.length)
            return;
        // NOTE: oldValue is not currently implemented for lists
        var eventArgs = { entity: obj, property: property, newValue: array };
        // Assign additional collection change event arguments to the property change event
        var additionalArgs = __assign({ changes: args.changes, collectionChanged: true }, args.additionalArgs);
        property.containingType.model.listChanged.publish(obj, helpers_1.merge(eventArgs, additionalArgs));
        property.changed.publish(obj, helpers_1.merge(eventArgs, additionalArgs));
        obj.changed.publish(obj, helpers_1.merge(eventArgs, additionalArgs));
    });
}
function Property$getInitialValue(property) {
    // Constant
    if (property.isConstant)
        return typeof property.constant === "function" ? (property.constant = property.constant()) : property.constant;
    var val = property.defaultValue;
    if (Array.isArray(val)) {
        val = observable_array_1.ObservableArray.ensureObservable(val);
        // Override the default toString on arrays so that we get a comma-delimited list
        // TODO: Implement toString on observable list?
        // val.toString = Property$_arrayToString.bind(val);
    }
    return val;
}
function Property$init(property, obj, val) {
    Property$pendingInit(obj, property, false);
    Object.defineProperty(obj.__fields__, property.name, { value: val, writable: true });
    if (Array.isArray(val)) {
        Property$subArrayEvents(obj, property, observable_array_1.ObservableArray.ensureObservable(val));
    }
    // TODO: Implement observable?
    obj.changed.publish(obj, { entity: obj, property: property, newValue: val });
}
exports.Property$init = Property$init;
function Property$ensureInited(property, obj) {
    // Determine if the property has been initialized with a value and initialize the property if necessary
    if (!obj.__fields__.hasOwnProperty(property.name)) {
        Property$pendingInit(obj, property, true);
        // Do not initialize calculated properties. Calculated properties should be initialized using a property get rule.
        if (!property.isCalculated) {
            var setPendingInit = !property.isConstant;
            Property$init(property, obj, Property$getInitialValue(property));
            if (property.initializer) {
                obj.update(property.name, property.initializer.call(obj));
                setPendingInit = false;
            }
            // Mark the property as pending initialization if the property value may need to
            // be established by a default calculation rule, or some other external logic.
            // This is not relevant if it is a constant or its value is established via an initilizer.
            if (setPendingInit)
                Property$pendingInit(obj, property, true);
        }
    }
}
function Property$getter(property, obj) {
    // Ensure that the property has an initial (possibly default) value
    Property$ensureInited(property, obj);
    // Raise access events
    property.accessed.publish(obj, { entity: obj, property: property, value: obj.__fields__[property.name] });
    obj.accessed.publish(obj, { entity: obj, property: property });
    // Return the property value
    return obj.__fields__[property.name];
}
function Property$setter(property, obj, val, additionalArgs) {
    if (additionalArgs === void 0) { additionalArgs = null; }
    // Ensure that the property has an initial (possibly default) value
    Property$ensureInited(property, obj);
    var old = obj.__fields__[property.name];
    if (Property$shouldSetValue(property, obj, old, val)) {
        Property$setValue(property, obj, old, val, additionalArgs);
    }
    else {
        // Set pendingInit to false here, since the setter is not called since the value is not changing
        Property$pendingInit(obj, property, false);
    }
}
exports.Property$setter = Property$setter;
function Property$shouldSetValue(property, obj, old, val) {
    if (!property.canSetValue(obj, val)) {
        throw new Error("Cannot set " + property.name + "=" + (val === undefined ? "<undefined>" : val) + " for instance " + obj.meta.type.fullName + "|" + obj.meta.id + ": a value of type " + (type_1.isEntityType(property.propertyType) ? property.propertyType.meta.fullName : helpers_1.parseFunctionName(property.propertyType)) + " was expected.");
    }
    for (var _i = 0, _a = property.rules; _i < _a.length; _i++) {
        var rule = _a[_i];
        if (rule instanceof allowed_values_rule_1.AllowedValuesRule && rule.preventInvalidValues && !rule.values(obj).includes(val) && val !== null && val !== undefined) {
            throw new Error("Cannot set " + property.name + ", \"" + val + "\" is not an allowed value.");
        }
    }
    // Update lists as batch remove/add operations
    if (property.isConstant) {
        throw new Error("Constant properties cannot be modified.");
    }
    else {
        // compare values so that this check is accurate for primitives
        var oldValue = (old === undefined || old === null) ? old : old.valueOf();
        var newValue = (val === undefined || val === null) ? val : val.valueOf();
        // Do nothing if the new value is the same as the old value. Account for NaN numbers, which are
        // not equivalent (even to themselves). Although isNaN returns true for non-Number values, we won't
        // get this far for Number properties unless the value is actually of type Number (a number or NaN).
        return (oldValue !== newValue && !(property.propertyType === Number && isNaN(oldValue) && isNaN(newValue)));
    }
}
function Property$setValue(property, obj, currentValue, newValue, additionalArgs) {
    if (additionalArgs === void 0) { additionalArgs = null; }
    // Update lists as batch remove/add operations
    if (property.isList) {
        var currentArray = currentValue;
        currentArray.batchUpdate(function (array) {
            observable_array_1.updateArray(array, newValue);
        }, additionalArgs);
        // Set pendingInit to false here, since an array change event will not be raised if there are no changes
        // (ex: array was previously an empty array and newValue is also an empty array).
        Property$pendingInit(obj, property, false);
    }
    else {
        var oldValue = currentValue;
        // Set or create the backing field value
        if (Object.prototype.hasOwnProperty.call(obj.__fields__, property.name)) {
            obj.__fields__[property.name] = newValue;
        }
        else {
            Object.defineProperty(obj.__fields__, property.name, { value: newValue, writable: true });
        }
        if (property.isIdentifier && newValue && newValue !== obj.meta.id) {
            // If the identifier property is set or changed, then change the object's id and re-pool with the new id
            obj.meta.type.changeObjectId(obj.meta.id, newValue);
        }
        Property$pendingInit(obj, property, false);
        // Do not raise change if the property has not been initialized.
        if (oldValue !== undefined) {
            var eventArgs = { entity: obj, property: property, newValue: newValue, oldValue: oldValue };
            property.containingType.model.afterPropertySet.publish(obj, helpers_1.merge(eventArgs, additionalArgs));
            property.changed.publish(obj, helpers_1.merge(eventArgs, additionalArgs));
            obj.changed.publish(obj, helpers_1.merge(eventArgs, additionalArgs));
        }
    }
}
function Property$makeGetter(property, getter) {
    return function (additionalArgs) {
        if (additionalArgs === void 0) { additionalArgs = null; }
        // ensure the property is initialized
        return getter(property, this, additionalArgs);
    };
}
function Property$makeSetter(prop, setter, skipTypeCheck) {
    // TODO: Is setter "__notifies" needed?
    // setter.__notifies = true;
    if (skipTypeCheck === void 0) { skipTypeCheck = false; }
    return function (val, additionalArgs) {
        if (additionalArgs === void 0) { additionalArgs = null; }
        setter(prop, this, val, additionalArgs, skipTypeCheck);
    };
}


/***/ }),

/***/ "../../libs/model.js/lib/range-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangeRule = void 0;
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var model_1 = __webpack_require__("../../libs/model.js/lib/model.js");
/**
 * A rule that validates that a property value is within a specific range
 */
var RangeRule = /** @class */ (function (_super) {
    __extends(RangeRule, _super);
    /**
     * Creates a rule that validates a property value is within a specific range
     * @param rootType The model type the rule is for
     * @param options The options for the rule
     */
    function RangeRule(rootType, options) {
        var _this = this;
        // ensure the rule name is specified
        options.name = options.name || "Range";
        options.message = function () {
            var format = options.property.format;
            var val = model_1.normalize(options.property.value(this), format);
            if (val == null) {
                return null;
            }
            var range = {};
            if (options.min && options.min instanceof Function) {
                try {
                    range.min = model_1.normalize(options.min.call(this), format);
                }
                catch (e) {
                    // Silently ignore min errors
                }
            }
            if (options.max && options.max instanceof Function) {
                try {
                    range.max = model_1.normalize(options.max.call(this), format);
                }
                catch (e) {
                    // Silently ignore max errors
                }
            }
            if ((range.min == null || val >= range.min) && (range.max == null || val <= range.max)) {
                // Value is within range
                return null;
            }
            var hasMin = range.min || range.min === 0;
            var hasMax = range.max || range.max === 0;
            if (hasMin && hasMax)
                return rootType.model.getResource("range-between").replace("{min}", property_1.Property$format(options.property, range.min) || range.min).replace("{max}", property_1.Property$format(options.property, range.max) || range.max);
            if (options.property.propertyType === Date) {
                if (hasMin)
                    return rootType.model.getResource("range-on-or-after").replace("{min}", property_1.Property$format(options.property, range.min) || range.min);
                else
                    return rootType.model.getResource("range-on-or-before").replace("{max}", property_1.Property$format(options.property, range.max) || range.max);
            }
            if (hasMin)
                return rootType.model.getResource("range-at-least").replace("{min}", property_1.Property$format(options.property, range.min) || range.min);
            else
                return rootType.model.getResource("range-at-most").replace("{max}", property_1.Property$format(options.property, range.max) || range.max);
        };
        // call the base type constructor
        _this = _super.call(this, rootType, options) || this;
        return _this;
    }
    // get the string representation of the rule
    RangeRule.prototype.toString = function () {
        return this.property.containingType.fullName + "." + this.property.name + " in range, min: , max: ";
    };
    return RangeRule;
}(validation_rule_1.ValidationRule));
exports.RangeRule = RangeRule;


/***/ }),

/***/ "../../libs/model.js/lib/required-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequiredRule = void 0;
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
/**
 * A rule that validates that a property has a value
 */
var RequiredRule = /** @class */ (function (_super) {
    __extends(RequiredRule, _super);
    /**
     * Creates a rule that validates that a property has a value.
     * @param rootType The model type the rule is for
     * @param options The options for the rule
     */
    function RequiredRule(rootType, options) {
        var _this = this;
        // ensure the rule name is specified
        options.name = options.name || "Required";
        if (typeof options.message === "function") {
            if (options.when) {
                var messageFn_1 = options.message;
                options.message = function () {
                    if (options.when && !options.when.call(this))
                        return null;
                    return messageFn_1.call(this);
                };
            }
        }
        else {
            // ensure the error message is specified
            options.message = options.message || function () { return rootType.model.getResource("required"); };
            if (options.isValid) {
                if (options.when) {
                    var isValidFn_1 = options.isValid;
                    options.isValid = function () {
                        if (options.when && !options.when.call(this)) {
                            // Valid whether or not there is a value, since requiredness is not in effect
                            return true;
                        }
                        return isValidFn_1.apply(this, arguments);
                    };
                }
            }
            else if (options.message) {
                // create the validation function based on the rule options
                options.isValid = function (prop, val) {
                    if (options.when && !options.when.call(this)) {
                        // Valid whether or not there is a value, since requiredness is not in effect
                        return true;
                    }
                    if (val === undefined || val === null)
                        return false;
                    // Blank string does not pass required check
                    if (typeof val === "string" && val.trim() === "")
                        return false;
                    // Empty array does not pass required check
                    if (Array.isArray(val) && val.length === 0)
                        return false;
                    // False does not pass required check
                    if (typeof val === "boolean" && val === false)
                        return false;
                    return true;
                };
            }
        }
        // call the base type constructor
        _this = _super.call(this, rootType, options) || this;
        return _this;
    }
    // get the string representation of the rule
    RequiredRule.prototype.toString = function () {
        return this.property.containingType.fullName + "." + this.property.name + " is required";
    };
    return RequiredRule;
}(validation_rule_1.ValidationRule));
exports.RequiredRule = RequiredRule;


/***/ }),

/***/ "../../libs/model.js/lib/resource-en.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var resource_1 = __webpack_require__("../../libs/model.js/lib/resource.js");
resource_1.defineResources("en", {
    "allowed-values": "{property} is not in the list of allowed values.",
    "listlength-at-least": "Please specify at least {min} {property}.",
    "listlength-at-most": "Please specify no more than {max} {property}.",
    "listlength-between": "Please specify between {min} and {max} {property}.",
    "range-at-least": "{property} must be at least {min}.",
    "range-at-most": "{property} must be at most {max}.",
    "range-between": "{property} must be between {min} and {max}.",
    "range-on-or-after": "{property} must be on or after {min}.",
    "range-on-or-before": "{property} must be on or before {max}.",
    "required": "{property} is required.",
    "string-format": "{property} must be formatted as {formatDescription}.",
    "string-length-at-least": "{property} must be at least {min} characters.",
    "string-length-at-most": "{property} must be at most {max} characters.",
    "string-length-between": "{property} must be between {min} and {max} characters.",
    "format-with-description": "{property} must be formatted as {description}.",
    "format-without-description": "{property} is not properly formatted.",
    "format-currency": "$#,###.##",
    "format-percentage": "#.##%",
    "format-integer": "#,###",
    "format-decimal": "#,###.##"
});


/***/ }),

/***/ "../../libs/model.js/lib/resource.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceExists = exports.getResource = exports.defineResources = exports.setDefaultLocale = exports.Resources = void 0;
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
/**
 * The dictionary of localized resource messages
 */
exports.Resources = {};
function mapContainsResource(resources, locale, name) {
    return helpers_1.hasOwnProperty(resources, locale) && helpers_1.hasOwnProperty(resources[locale], name);
}
/**
 * The default locale, can be changed via `setDefaultLocale(locale)`.
 */
var defaultLocale = null;
/**
 * Sets the default locale
 * @param locale The default locale
 */
function setDefaultLocale(locale) {
    defaultLocale = locale;
}
exports.setDefaultLocale = setDefaultLocale;
/**
 * Globally defined resources
 */
var globalResources = {};
/**
 * Globally define localized resource messages for the given locale
 * @param locale The locale to set messages for
 * @param resources The resources messages
 */
function defineResources(locale, resources) {
    globalResources[locale] = helpers_1.hasOwnProperty(globalResources, locale) ? helpers_1.merge(globalResources[locale], resources) : resources;
}
exports.defineResources = defineResources;
// eslint-disable-next-line no-redeclare
function getResource(name, arg2, arg3) {
    var customResources;
    var locale;
    if (arguments.length === 2) {
        if (typeof arg2 === "object") {
            customResources = arg2;
            locale = null;
        }
        else if (typeof arg2 === "string") {
            customResources = null;
            locale = arg2;
        }
    }
    else if (arguments.length >= 3) {
        customResources = arg2;
        locale = arg3;
    }
    if (!locale)
        locale = defaultLocale || "en";
    var res;
    if (customResources && mapContainsResource(customResources, locale, name))
        res = customResources[locale][name];
    else if (mapContainsResource(globalResources, locale, name))
        res = globalResources[locale][name];
    else
        throw new Error("Resource '" + name + "' is not defined for locale '" + locale + "'.");
    return res;
}
exports.getResource = getResource;
function resourceExists(name, customResources, locale) {
    if (!locale)
        locale = defaultLocale || "en";
    return mapContainsResource(globalResources, locale, name) || (customResources && mapContainsResource(customResources, locale, name));
}
exports.resourceExists = resourceExists;


/***/ }),

/***/ "../../libs/model.js/lib/rule-invocation-type.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleInvocationType = void 0;
var RuleInvocationType;
(function (RuleInvocationType) {
    /** Occurs when an existing instance is initialized. */
    RuleInvocationType[RuleInvocationType["InitExisting"] = 2] = "InitExisting";
    /** Occurs when a new instance is initialized. */
    RuleInvocationType[RuleInvocationType["InitNew"] = 4] = "InitNew";
    /** Occurs when a property value is retrieved. */
    RuleInvocationType[RuleInvocationType["PropertyGet"] = 8] = "PropertyGet";
    /** Occurs when a property value is changed. */
    RuleInvocationType[RuleInvocationType["PropertyChanged"] = 16] = "PropertyChanged";
})(RuleInvocationType = exports.RuleInvocationType || (exports.RuleInvocationType = {}));


/***/ }),

/***/ "../../libs/model.js/lib/rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule$ensureConditionType = exports.Rule = void 0;
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var type_1 = __webpack_require__("../../libs/model.js/lib/type.js");
var rule_invocation_type_1 = __webpack_require__("../../libs/model.js/lib/rule-invocation-type.js");
var condition_type_1 = __webpack_require__("../../libs/model.js/lib/condition-type.js");
var Rule$customRuleIndex = 0;
var Rule = /** @class */ (function () {
    /**
     * Creates a rule that executes a delegate when specified model events occur.
     * @param rootType The model type the rule is for.
     * @param options The options for the rule.
     */
    function Rule(rootType, name, options) {
        this.invocationTypes = 0;
        this.predicates = [];
        this.returnValues = [];
        // Track the root type
        this.rootType = rootType;
        this.name = name || (options ? options.name : null) || (rootType.fullName + ".Custom." + (++Rule$customRuleIndex));
        // Configure the rule based on the specified options
        if (options) {
            if (options.onInit)
                this.onInit();
            if (options.onInitNew)
                this.onInitNew();
            if (options.onInitExisting)
                this.onInitExisting();
            if (options.onChangeOf)
                this.onChangeOf(options.onChangeOf);
            if (options.returns)
                this.returns(options.returns);
            if (options.execute instanceof Function)
                this._execute = options.execute;
        }
    }
    Object.defineProperty(Rule.prototype, "model", {
        get: function () {
            return this.rootType.model;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rule.prototype, "eventScope", {
        get: function () {
            return this.rootType.model.eventScope;
        },
        enumerable: false,
        configurable: true
    });
    Rule.prototype.execute = function (entity) {
        if (this._execute) {
            this._execute.call(entity);
        }
        else {
            // TODO: Warn about execute function not implemented?
        }
    };
    // Indicates that the rule should run only for new instances when initialized
    Rule.prototype.onInitNew = function () {
        // ensure the rule has not already been registered
        if (this._registered)
            throw new Error("Rules cannot be configured once they have been registered: " + this.name);
        // configure the rule to run on init new
        this.invocationTypes |= rule_invocation_type_1.RuleInvocationType.InitNew;
        return this;
    };
    // indicates that the rule should run only for existing instances when initialized
    Rule.prototype.onInitExisting = function () {
        // ensure the rule has not already been registered
        if (this._registered)
            throw new Error("Rules cannot be configured once they have been registered: " + this.name);
        // configure the rule to run on init existingh
        this.invocationTypes |= rule_invocation_type_1.RuleInvocationType.InitExisting;
        return this;
    };
    // indicates that the rule should run for both new and existing instances when initialized
    Rule.prototype.onInit = function () {
        // ensure the rule has not already been registered
        if (this._registered)
            throw new Error("Rules cannot be configured once they have been registered: " + this.name);
        // configure the rule to run on both init new and init existing
        this.invocationTypes |= rule_invocation_type_1.RuleInvocationType.InitNew | rule_invocation_type_1.RuleInvocationType.InitExisting;
        return this;
    };
    Rule.prototype.onChangeOf = function (predicates) {
        // ensure the rule has not already been registered
        if (this._registered)
            throw new Error("Rules cannot be configured once they have been registered: " + this.name);
        // allow change of predicates to be specified as a parameter array without []'s
        if (!(predicates instanceof Array)) {
            predicates = Array.prototype.slice.call(arguments);
        }
        // add to the set of existing change predicates
        this.predicates = this.predicates.length > 0 ? this.predicates.concat(predicates) : predicates;
        // also configure the rule to run on property change unless it has already been configured to run on property get
        if ((this.invocationTypes & rule_invocation_type_1.RuleInvocationType.PropertyGet) === 0)
            this.invocationTypes |= rule_invocation_type_1.RuleInvocationType.PropertyChanged;
        return this;
    };
    Rule.prototype.returns = function (properties) {
        // Ensure the rule has not already been registered
        if (this._registered)
            throw new Error("Rules cannot be configured once they have been registered: " + this.name);
        // Allow return properties to be specified as a parameter array without []'s
        if (properties && properties.constructor === String)
            properties = Array.prototype.slice.call(arguments);
        if (!properties)
            throw new Error("Rule must specify at least one property for returns.");
        // Add to the set of existing return value properties
        this.returnValues = this.returnValues.length > 0 ? this.returnValues.concat(properties) : properties;
        // Configure the rule to run on property get and not on property change
        this.invocationTypes |= rule_invocation_type_1.RuleInvocationType.PropertyGet;
        this.invocationTypes &= ~rule_invocation_type_1.RuleInvocationType.PropertyChanged;
        return this;
    };
    // registers the rule based on the configured invocation types, predicates, and return values
    Rule.prototype.register = function () {
        var rule = this;
        if (rule._registered) {
            throw new Error("Rules cannot be registered more than once: " + rule.name);
        }
        // Indicate that the rule should now be considered registered and cannot be reconfigured
        Object.defineProperty(this, "_registered", { enumerable: false, value: true, writable: false });
        // register for init new
        if (rule.invocationTypes & rule_invocation_type_1.RuleInvocationType.InitNew) {
            rule.rootType.initNew.subscribe(function (args) { executeRule(rule, args.entity); });
        }
        // register for init existing
        if (rule.invocationTypes & rule_invocation_type_1.RuleInvocationType.InitExisting) {
            rule.rootType.initExisting.subscribe(function (args) { executeRule(rule, args.entity); });
        }
        // register for property change
        if (rule.invocationTypes & rule_invocation_type_1.RuleInvocationType.PropertyChanged) {
            rule.predicates.forEach(function (predicate) {
                predicate.changed.subscribe(function (args) {
                    if (canExecuteRule(rule, args.entity) && !pendingInvocation(args.entity.meta, rule)) {
                        pendingInvocation(args.entity.meta, rule, true);
                        rule.eventScope.onExit(function (e) {
                            pendingInvocation(args.entity.meta, rule, false);
                            if (!e.abort)
                                executeRule(rule, args.entity);
                        });
                    }
                });
            });
        }
        // register for property get
        if (rule.invocationTypes & rule_invocation_type_1.RuleInvocationType.PropertyGet && rule.returnValues) {
            // register for property get events for each return value to calculate the property when accessed
            rule.returnValues.forEach(function (returnValue) {
                returnValue.accessed.subscribe(function (args) {
                    // run the rule to initialize the property if it is pending initialization
                    if (canExecuteRule(rule, args.entity) && property_1.Property$pendingInit(args.entity, returnValue)) {
                        property_1.Property$pendingInit(args.entity, returnValue, false);
                        executeRule(rule, args.entity);
                    }
                });
            });
            // register for property change events for each predicate to invalidate the property value when inputs change
            rule.predicates.forEach(function (predicate) {
                predicate.changed.subscribe(function (args) {
                    if (rule.returnValues.some(function (returnValue) { return returnValue.changed.hasSubscribers(); })) {
                        // Immediately execute the rule if there are explicit event subscriptions for the property
                        if (canExecuteRule(rule, args.entity) && !pendingInvocation(args.entity.meta, rule)) {
                            pendingInvocation(args.entity.meta, rule, true);
                            rule.eventScope.onExit(function (e) {
                                pendingInvocation(args.entity.meta, rule, false);
                                if (!e.abort)
                                    executeRule(rule, args.entity);
                            });
                        }
                    }
                    else {
                        // Otherwise, just mark the property as pending initialization and raise property change for UI subscribers
                        rule.returnValues.forEach(function (returnValue) {
                            property_1.Property$pendingInit(args.entity, returnValue, true);
                        });
                        // Defer change notification until the scope of work has completed
                        rule.eventScope.onExit(function (e) {
                            if (!e.abort) {
                                rule.returnValues.forEach(function (returnValue) {
                                    args.entity.changed.publish(args.entity, { entity: args.entity, property: returnValue, newValue: returnValue.value(args.entity) });
                                });
                            }
                        });
                    }
                });
            });
        }
    };
    return Rule;
}());
exports.Rule = Rule;
function pendingInvocation(target, rule, value) {
    if (value === void 0) { value = null; }
    var pendingInvocation;
    if (Object.prototype.hasOwnProperty.call(target, "__pendingInvocation__")) {
        pendingInvocation = target.__pendingInvocation__;
    }
    else {
        Object.defineProperty(target, "__pendingInvocation__", { enumerable: false, value: (pendingInvocation = []), writable: true });
    }
    var indexOfRule = pendingInvocation.indexOf(rule);
    if (arguments.length > 2) {
        if (value && indexOfRule < 0) {
            pendingInvocation.push(rule);
        }
        else if (!value && indexOfRule >= 0) {
            pendingInvocation.splice(indexOfRule, 1);
        }
    }
    else {
        return indexOfRule >= 0;
    }
}
function canExecuteRule(rule, obj) {
    // ensure the rule target is a valid rule root type
    return obj instanceof rule.rootType.jstype;
}
function executeRule(rule, obj) {
    // Ensure that the rule can be executed.
    if (!canExecuteRule(rule, obj)) {
        // TODO: Warn that rule can't be executed?
        return;
    }
    try {
        rule.eventScope.perform(function () {
            rule.execute(obj);
        });
    }
    catch (e) {
        console.warn("Error encountered while running rule \"" + rule.name + "\".");
        if (e)
            console.warn(e);
    }
}
;
function Rule$ensureConditionType(ruleName, typeOrProp, category) {
    var generatedCode = typeOrProp instanceof property_1.Property ? typeOrProp.containingType.fullName + "." + typeOrProp.name + "." + ruleName :
        typeOrProp instanceof type_1.Type ? typeOrProp + "." + ruleName :
            ruleName;
    var counter = "";
    while (condition_type_1.ConditionType.get(generatedCode + counter))
        counter = (typeof counter === "string" ? 0 : counter) + 1;
    var DesiredConditionType;
    if (category === "Error") {
        DesiredConditionType = condition_type_1.ErrorConditionType;
    }
    else if (category === "Warning") {
        DesiredConditionType = condition_type_1.WarningConditionType;
    }
    else {
        throw new Error("Cannot create condition type for unsupported category '" + category + "'.");
    }
    // return a new client condition type of the specified category
    return new DesiredConditionType(generatedCode + counter, "Generated condition type for " + ruleName + " rule.");
}
exports.Rule$ensureConditionType = Rule$ensureConditionType;


/***/ }),

/***/ "../../libs/model.js/lib/string-format-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringFormatRule = void 0;
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
var StringFormatRule = /** @class */ (function (_super) {
    __extends(StringFormatRule, _super);
    /**
     * Creates a rule that validates that a string property value is correctly formatted.
     * @param rootType The model type the rule is for.
     * @param options The options for the rules.
     */
    function StringFormatRule(rootType, options) {
        var _this = this;
        // exit immediately if called with no arguments
        if (arguments.length > 0) {
            // ensure the rule name is specified
            options.name = options.name || "StringFormat";
            // see if the error message is a valid resource: {resource-name}
            if (typeof options.message === "string" && rootType.model.resourceExists(options.message)) {
                var message_1 = options.message;
                options.message = function () { return rootType.model.getResource(message_1); };
            }
            // get the default validation message if not specified
            if (!options.message) {
                options.message = function () { return rootType.model.getResource("string-format").replace("{formatDescription}", options.description); };
            }
            var expression_1 = options.expression instanceof RegExp ? options.expression : RegExp(options.expression);
            var reformat_1 = options.reformat;
            // create the string format validation function
            options.isValid = function (prop, val) {
                var isValid = true;
                if (val && val !== "") {
                    expression_1.lastIndex = 0;
                    isValid = expression_1.test(val);
                    if (isValid && options.reformat) {
                        if (reformat_1 instanceof Function) {
                            val = reformat_1(val);
                        }
                        else {
                            expression_1.lastIndex = 0;
                            val = val.replace(expression_1, reformat_1);
                        }
                        prop.value(this, val);
                    }
                }
                return isValid;
            };
        }
        // call the base type constructor
        _this = _super.call(this, rootType, options) || this;
        // define properties for the rule
        _this.description = options.description;
        return _this;
    }
    // get the string representation of the rule
    StringFormatRule.prototype.toString = function () {
        return this.property.containingType.fullName + "." + this.property.name + " formatted as " + this.description;
    };
    return StringFormatRule;
}(validation_rule_1.ValidationRule));
exports.StringFormatRule = StringFormatRule;


/***/ }),

/***/ "../../libs/model.js/lib/string-length-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringLengthRule = void 0;
var validation_rule_1 = __webpack_require__("../../libs/model.js/lib/validation-rule.js");
/**
 * A rule that validates that validates that the length of a string property is within a specific range
 */
var StringLengthRule = /** @class */ (function (_super) {
    __extends(StringLengthRule, _super);
    /**
     * Creates a rule that validates that the length of a string property is within a specific range
     * @param rootType The model type the rule is for
     * @param options The options for the rule
     */
    function StringLengthRule(rootType, options) {
        var _this = this;
        // ensure the rule name is specified
        options.name = options.name || "StringLength";
        options.message = function () {
            var range = {};
            if (options.min && options.min instanceof Function) {
                try {
                    range.min = options.min.call(this);
                }
                catch (e) {
                    // Silently ignore min errors
                }
            }
            if (options.max && options.max instanceof Function) {
                try {
                    range.max = options.max.call(this);
                }
                catch (e) {
                    // Silently ignore max errors
                }
            }
            var val = options.property.value(this);
            if (val == null || typeof val !== "string" || val.length === 0) {
                return null;
            }
            if ((range.min == null || val.length >= range.min) && (range.max == null || val.length <= range.max)) {
                // Value is within range
                return null;
            }
            if (range.min != null && range.max != null)
                return rootType.model.getResource("string-length-between").replace("{min}", range.min.toString()).replace("{max}", range.max.toString());
            if (range.min != null)
                return rootType.model.getResource("string-length-at-least").replace("{min}", range.min.toString());
            else
                return rootType.model.getResource("string-length-at-most").replace("{max}", range.max.toString());
        };
        // call the base type constructor
        _this = _super.call(this, rootType, options) || this;
        return _this;
    }
    // get the string representation of the rule
    StringLengthRule.prototype.toString = function () {
        return this.property.containingType.fullName + "." + this.property.name + " string length, min: , max: ";
    };
    return StringLengthRule;
}(validation_rule_1.ValidationRule));
exports.StringLengthRule = StringLengthRule;


/***/ }),

/***/ "../../libs/model.js/lib/type.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type$generateConstructor = exports.Type$generateMethod = exports.getIdFromState = exports.isEntityType = exports.isValueArray = exports.isValue = exports.isValueType = exports.Type = exports.Type$newIdPrefix = void 0;
var entity_1 = __webpack_require__("../../libs/model.js/lib/entity.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var helpers_1 = __webpack_require__("../../libs/model.js/lib/helpers.js");
var events_1 = __webpack_require__("../../libs/model.js/lib/events.js");
var observable_array_1 = __webpack_require__("../../libs/model.js/lib/observable-array.js");
var rule_1 = __webpack_require__("../../libs/model.js/lib/rule.js");
var format_1 = __webpack_require__("../../libs/model.js/lib/format.js");
var property_chain_1 = __webpack_require__("../../libs/model.js/lib/property-chain.js");
exports.Type$newIdPrefix = "+c";
var Type = /** @class */ (function () {
    // readonly conditionsChanged: EventSubscriber<Type, ConditionTargetsChangedEventArgs>;
    function Type(model, fullName, baseType, format, options) {
        if (baseType === void 0) { baseType = null; }
        this.model = model;
        this.fullName = fullName;
        this.jstype = Type$generateConstructor(this, fullName, baseType, model.settings.useGlobalObject ? helpers_1.getGlobalObject() : null);
        this.baseType = baseType;
        this.derivedTypes = [];
        this._identifier = null;
        Object.defineProperty(this, "__pool__", { enumerable: false, configurable: false, writable: false, value: {} });
        Object.defineProperty(this, "__properties__", { enumerable: false, configurable: false, writable: false, value: {} });
        Object.defineProperty(this, "_lastId", { enumerable: false, configurable: false, writable: true, value: 0 });
        Object.defineProperty(this, "_formats", { enumerable: false, configurable: false, writable: true, value: {} });
        Object.defineProperty(this, "_chains", { enumerable: false, configurable: false, writable: true, value: {} });
        if (baseType) {
            baseType.derivedTypes.push(this);
        }
        this.initNew = new events_1.Event();
        this.initExisting = new events_1.Event();
        // this.conditionsChanged = new Event<Type, ConditionTargetsChangedEventArgs>();
        // Set Format
        if (format) {
            if (typeof (format) === "string") {
                this.format = this.model.getFormat(this.jstype, format);
            }
            else
                this.format = format;
        }
        // Apply type options
        if (options)
            this.extend(options);
    }
    Object.defineProperty(Type.prototype, "identifier", {
        get: function () {
            if (this._identifier)
                return this._identifier;
            return this.baseType ? this.baseType.identifier : null;
        },
        set: function (val) {
            this._identifier = val;
        },
        enumerable: false,
        configurable: true
    });
    Type.prototype.createIfNotExists = function (state) {
        var id = getIdFromState(this, state);
        if (id) {
            var existing = this.get(id);
            if (existing)
                return existing;
        }
        var Ctor = this.jstype;
        // Construct an instance using the known id if it is present
        var instance = (id ? new Ctor(id, state) : new Ctor(state));
        return instance;
    };
    Type.prototype.createSync = function (state) {
        var id = getIdFromState(this, state);
        if (id && this.get(id))
            throw new Error("Could not create instance of type '" + this.fullName + "' with identifier '" + id + "' because this object already exists.");
        var Ctor = this.jstype;
        // Construct an instance using the known id if it is present
        var instance = (id ? new Ctor(id, state) : new Ctor(state));
        return instance;
    };
    Type.prototype.create = function (state) {
        var instance = this.createSync(state);
        return instance.initialized.then(function () { return instance; });
    };
    /** Generates a unique id suitable for an instance in the current type hierarchy. */
    Type.prototype.newId = function () {
        var lastId;
        for (var type = this; type; type = type.baseType) {
            lastId = Math.max(lastId || 0, type._lastId);
        }
        var nextId = lastId + 1;
        // Update the last id for each type in the heirarchy.
        for (var type = this; type; type = type.baseType) {
            type._lastId = nextId;
        }
        // Return the new id.
        return exports.Type$newIdPrefix + nextId;
    };
    Type.prototype.assertValidId = function (id) {
        if (id === null || id === undefined) {
            throw new Error("Id cannot be " + (id === null ? "null" : "undefined") + " (entity = " + this.fullName + ").");
        }
        else if (helpers_1.getTypeName(id) !== "string") {
            throw new Error("Id must be a string:  encountered id " + id + " of type \"" + helpers_1.parseFunctionName(id.constructor) + "\" (entity = " + this.fullName + ").");
        }
        else if (id === "") {
            throw new Error("Id cannot be a blank string (entity = " + this.fullName + ").");
        }
    };
    Type.prototype.register = function (obj) {
        this.assertValidId(obj.meta.id);
        var key = obj.meta.id.toLowerCase();
        for (var t = this; t; t = t.baseType) {
            if (t.__pool__.hasOwnProperty(key)) {
                throw new Error("Object \"" + this.fullName + "|" + obj.meta.id + "\" has already been registered.");
            }
            t.__pool__[key] = obj;
            if (t.__known__) {
                t.__known__.push(obj);
            }
        }
        if (this.model.settings.createOwnProperties === true) {
            for (var prop in this.__properties__) {
                if (Object.prototype.hasOwnProperty.call(this.__properties__, prop)) {
                    var property = this.__properties__[prop];
                    property_1.Property$generateOwnProperty(property, obj);
                }
            }
        }
        this.model.entityRegistered.publish(this.model, { entity: obj });
    };
    Type.prototype.changeObjectId = function (oldId, newId) {
        this.assertValidId(oldId);
        this.assertValidId(newId);
        var oldKey = oldId.toLowerCase();
        var newKey = newId.toLowerCase();
        if (this.__pool__[newKey]) {
            throw new Error("Entity '" + this.fullName + "|" + newKey + "' is already registered.");
        }
        var obj = this.__pool__[oldKey];
        if (!obj) {
            // TODO: Throw error or warn when attempting to change an object Id that is unknown?
            return;
        }
        for (var t = this; t; t = t.baseType) {
            t.__pool__[newKey] = obj;
        }
        obj.meta.id = newId;
        obj.markPersisted();
        return obj;
    };
    Type.prototype.get = function (id, exactTypeOnly) {
        if (exactTypeOnly === void 0) { exactTypeOnly = false; }
        if (!id) {
            throw new Error("Method \"" + this.fullName + ".meta.get()\" was called without a valid id argument.");
        }
        var key = id.toLowerCase();
        var obj = this.__pool__[key];
        // If exactTypeOnly is specified, don't return sub-types.
        if (obj && exactTypeOnly === true && obj.meta.type !== this) {
            throw new Error("The entity with id='" + id + "' is expected to be of type '" + this.fullName + "' but found type '" + obj.meta.type.fullName + "'.");
        }
        return obj;
    };
    // Gets an array of all objects of this type that have been registered.
    // The returned array is observable and collection changed events will be raised
    // when new objects are registered.
    // The array is in no particular order.
    Type.prototype.known = function () {
        var known = this.__known__;
        if (!known) {
            var list = [];
            for (var id in this.__pool__) {
                if (Object.prototype.hasOwnProperty.call(this.__pool__, id)) {
                    list.push(this.__pool__[id]);
                }
            }
            known = observable_array_1.ObservableArray.ensureObservable(list);
            Object.defineProperty(this, "__known__", { enumerable: false, configurable: false, writable: false, value: known });
        }
        return known;
    };
    Type.prototype.getProperty = function (name) {
        var prop;
        for (var t = this; t && !prop; t = t.baseType) {
            prop = t.__properties__[name];
            if (prop) {
                return prop;
            }
        }
        return null;
    };
    /** Gets the {Property} or {PropertyChain} for the specified simple path {string}. */
    Type.prototype.getPath = function (path) {
        // Get single property
        var property = this.getProperty(path);
        // Get cached property chain
        if (!property)
            property = this._chains[path];
        // Create and cache property chain
        if (!property) {
            property = this._chains[path] = new property_chain_1.PropertyChain(this, path);
        }
        // Return the property path
        return property;
    };
    /** Gets and array of {Property} or {PropertyChain} instances for the specified complex graph path {string}. */
    Type.prototype.getPaths = function (path) {
        var start = 0;
        var paths = [];
        // Process the path
        if (/{|,|}/g.test(path)) {
            var stack = [];
            var parent_1;
            for (var i = 0, len = path.length; i < len; ++i) {
                var c = path.charAt(i);
                if (c === "{" || c === "," || c === "}") {
                    var seg = path.substring(start, i).trim();
                    start = i + 1;
                    if (c === "{") {
                        if (parent_1) {
                            stack.push(parent_1);
                            parent_1 += "." + seg;
                        }
                        else {
                            parent_1 = seg;
                        }
                    }
                    else { // ',' or '}'
                        if (seg.length > 0) {
                            paths.push(this.getPath(parent_1 ? parent_1 + "." + seg : seg));
                        }
                        if (c === "}") {
                            parent_1 = (stack.length === 0) ? undefined : stack.pop();
                        }
                    }
                }
            }
            if (stack.length > 0 || parent_1) {
                throw new Error("Unclosed '{' in path: " + path);
            }
            if (start < path.length) {
                var seg = path.substring(start).trim();
                if (seg.length > 0) {
                    paths.push(this.getPath(seg));
                }
                // Set start to past the end of the list to indicate that the entire string was processed
                start = path.length;
            }
        }
        // If the input is a simple property or path, then add the single property or chain
        if (start === 0) {
            paths.push(this.getPath(path.trim()));
        }
        return paths;
    };
    Object.defineProperty(Type.prototype, "properties", {
        get: function () {
            var propertiesObject = __assign({}, this.__properties__);
            for (var type = this.baseType; type != null; type = type.baseType) {
                for (var propertyName in type.__properties__) {
                    if (!propertiesObject.hasOwnProperty(propertyName)) {
                        propertiesObject[propertyName] = type.__properties__[propertyName];
                    }
                }
            }
            return Object.values(propertiesObject);
        },
        enumerable: false,
        configurable: true
    });
    Type.prototype.addRule = function (optionsOrFunction) {
        var options;
        if (optionsOrFunction) {
            // The options are the function to execute
            if (optionsOrFunction instanceof Function) {
                options = { execute: optionsOrFunction };
            }
            else {
                options = optionsOrFunction;
            }
        }
        var rule = new rule_1.Rule(this, options.name, options);
        // TODO: Track rules on the type?
        return rule;
    };
    Type.prototype.hasModelProperty = function (prop) {
        return prop.containingType === this || this.isSubclassOf(prop.containingType);
    };
    Type.prototype.isSubclassOf = function (type) {
        var result = false;
        helpers_1.navigateAttribute(this, "baseType", function (baseType) {
            if (baseType === type) {
                result = true;
                return false;
            }
        });
        return result;
    };
    Type.prototype.toString = function () {
        return this.fullName;
    };
    /**
     * Extends the current type with the specified format, properties and methods
     * @param options The options specifying how to extend the type
     */
    Type.prototype.extend = function (options) {
        var _this = this;
        var type = this;
        // Utility function to convert a path string into a resolved array of Property and PropertyChain instances
        function resolveDependsOn(rule, dependsOn) {
            // return an empty dependency array if no path was specified
            if (!dependsOn)
                return [];
            // throw an exception if dependsOn is not a string
            if (typeof (dependsOn) !== "string")
                throw new Error("Invalid dependsOn property for '" + rule + "' rule on '" + type + ".");
            // get the property paths for the specified dependency string
            return type.getPaths(dependsOn);
        }
        // Use prepare() to defer property path resolution while the model is being extended
        this.model.prepare(function () {
            var isRuleMethod = function (value) { return value.hasOwnProperty("function"); };
            var _loop_1 = function (name_1, member) {
                if (name_1.startsWith("$"))
                    return "continue";
                // Ignore Type and Format values, which do not represent type members
                if (member instanceof Type || member instanceof format_1.Format)
                    return "continue";
                // Property Type Name
                if (typeof (member) === "string")
                    member = { type: member };
                // Property Type
                else if (isValueType(member))
                    member = { type: member };
                // Non-Rule Method/Function
                if (typeof (member) === "function") {
                    Type$generateMethod(_this, _this.jstype.prototype, name_1, member);
                }
                // Rule Method
                else if (isRuleMethod(member)) {
                    var func = member.function, dependsOn_1 = member.dependsOn;
                    Type$generateMethod(_this, _this.jstype.prototype, name_1, func);
                    _this.model.ready(function () {
                        new rule_1.Rule(_this, _this.fullName + "." + name_1 + "Rule", {
                            execute: (new Function("return this." + name_1 + "();")),
                            onChangeOf: resolveDependsOn("get", dependsOn_1)
                        }).register();
                    });
                }
                // Property
                else {
                    member = __assign({}, member);
                    // Get Property
                    var property = _this.getProperty(name_1);
                    // Add Property
                    if (!property
                        || (member.type && isEntityType(property.propertyType) && property.propertyType.meta.fullName !== member.type)
                        || (member.type && isValueType(member.type) && isValueType(property.propertyType) && property.propertyType !== member.type)) {
                        // Type & IsList
                        var isList = false;
                        if (typeof (member.type) === "string") {
                            var typeName = member.type;
                            // Type names ending in [] are lists
                            if (typeName.lastIndexOf("[]") === (typeName.length - 2)) {
                                isList = true;
                                typeName = typeName.substr(0, typeName.length - 2);
                            }
                            // Convert type names to javascript types
                            member.type = _this.model.getJsType(typeName);
                            // Warn if the type couldn't be found
                            if (!member.type && window.console && console.warn) {
                                console.warn("Could not resolve type '" + typeName + ".");
                            }
                        }
                        var isIdentifier = member.identifier === true;
                        // Add Property
                        var property_2 = new property_1.Property(_this, name_1, member.type, isIdentifier, isList, member);
                        if (isIdentifier) {
                            _this.identifier = property_2;
                        }
                        _this.__properties__[name_1] = property_2;
                        property_1.Property$generateShortcuts(property_2, _this.jstype);
                        if (!_this.model.settings.createOwnProperties) {
                            property_1.Property$generatePrototypeProperty(property_2, _this.jstype.prototype);
                        }
                    }
                    else {
                        property.extend(member, _this);
                    }
                }
            };
            // Type Members
            for (var _i = 0, _a = helpers_1.entries(options); _i < _a.length; _i++) {
                var _b = _a[_i], name_1 = _b[0], member = _b[1];
                _loop_1(name_1, member);
            }
        });
    };
    return Type;
}());
exports.Type = Type;
function isValueType(type) {
    return type === String || type === Number || type === Date || type === Boolean;
}
exports.isValueType = isValueType;
function isValue(value, type) {
    if (type === void 0) { type = null; }
    if (value == null)
        return false;
    var valueType = value.constructor;
    if (type != null)
        return valueType === type;
    return isValueType(valueType);
}
exports.isValue = isValue;
function isValueArray(value) {
    if (value == null)
        return false;
    if (!Array.isArray(value))
        return false;
    if (value.length === 0)
        return true;
    var item = value[0];
    if (item == null)
        return false;
    var itemType = item.constructor;
    return isValueType(itemType);
}
exports.isValueArray = isValueArray;
function isEntityType(type) {
    return type.meta && type.meta instanceof Type;
}
exports.isEntityType = isEntityType;
function getIdFromState(type, state) {
    if (type.identifier && typeof state === "object") {
        var id = state[type.identifier.name];
        if (id && typeof id === "string" && id.length > 0)
            return id;
    }
}
exports.getIdFromState = getIdFromState;
function Type$generateMethod(type, target, name, fn) {
    target[name] = fn;
}
exports.Type$generateMethod = Type$generateMethod;
// TODO: Get rid of disableConstruction?
var disableConstruction = false;
function Type$generateConstructor(type, fullName, baseType, global) {
    if (baseType === void 0) { baseType = null; }
    if (global === void 0) { global = null; }
    // Create namespaces as needed
    var nameTokens = fullName.split(".");
    var token = nameTokens.shift();
    var namespaceObj = type.model.$namespace || type.model;
    var namespacePrefix = "";
    var globalObj = global;
    while (nameTokens.length > 0) {
        namespacePrefix = namespacePrefix + token + ".";
        namespaceObj = helpers_1.ensureNamespace(token, namespaceObj);
        if (global) {
            globalObj = helpers_1.ensureNamespace(token, globalObj);
        }
        token = nameTokens.shift();
    }
    // The final name to use is the last token
    var finalName = token;
    var BaseConstructor;
    if (baseType) {
        BaseConstructor = baseType.jstype;
        // // TODO: Implement `inheritBaseTypePropShortcuts`
        // // inherit all shortcut properties that have aleady been defined
        // inheritBaseTypePropShortcuts(ctor, baseType);
    }
    else {
        BaseConstructor = entity_1.Entity;
    }
    var ctorFactory = new Function("construct", "return function " + finalName + " () { construct.apply(this, arguments); }");
    function construct() {
        if (!disableConstruction) {
            try {
                entity_1.Entity.ctorDepth++;
                var args = Array.from(arguments);
                if (!(args[0] instanceof Type))
                    args.unshift(type);
                BaseConstructor.apply(this, args);
            }
            finally {
                entity_1.Entity.ctorDepth--;
            }
        }
    }
    var ctor = ctorFactory(construct);
    var namespaceKey = finalName;
    // If the namespace already contains a type with this name, prepend a '$' to the name
    while (namespaceObj[namespaceKey]) {
        if (true) {
            console.warn("Namespace path '" + namespacePrefix + namespaceKey + "' is already assigned.");
        }
        namespaceKey = "$" + namespaceKey;
    }
    namespaceObj[namespaceKey] = ctor;
    if (global) {
        var globalKey = finalName;
        // If the global object already contains a type with this name, append a '$' to the name
        while (globalObj[globalKey]) {
            if (true) {
                console.warn("Global path '" + namespacePrefix + globalKey + "' is already assigned.");
            }
            globalKey = "$" + globalKey;
        }
        globalObj[globalKey] = ctor;
    }
    // Setup inheritance
    disableConstruction = true;
    ctor.prototype = new BaseConstructor();
    disableConstruction = false;
    ctor.prototype.constructor = ctor;
    // Add the 'meta' helper
    Object.defineProperty(ctor, "meta", { enumerable: false, value: type, configurable: false, writable: false });
    return ctor;
}
exports.Type$generateConstructor = Type$generateConstructor;


/***/ }),

/***/ "../../libs/model.js/lib/validation-rule.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationRule = void 0;
var condition_rule_1 = __webpack_require__("../../libs/model.js/lib/condition-rule.js");
var property_1 = __webpack_require__("../../libs/model.js/lib/property.js");
var ValidationRule = /** @class */ (function (_super) {
    __extends(ValidationRule, _super);
    function ValidationRule(rootType, options) {
        var _this = this;
        // ensure the rule name is specified
        options.name = options.name || "ValidatedProperty";
        // store the property being validated
        var property = options.property;
        // ensure the properties and predicates to include the target property
        if (!options.properties)
            options.properties = [];
        if (!options.properties.includes(property))
            options.properties.push(property);
        if (!options.onChangeOf) {
            options.onChangeOf = [property];
        }
        else if (options.onChangeOf.indexOf(property) < 0) {
            options.onChangeOf.push(property);
        }
        // default condition category to Error if a condition category was not specified
        if (!options.conditionType) {
            options.category = "Error";
        }
        // replace the property label token in the validation message if present
        if (options.message && (typeof options.message === "function" || (typeof options.message === "string" && options.message.indexOf("{property}") >= 0))) {
            // Property label with dynamic format tokens
            if (property.labelIsFormat) {
                var labelSourceType_1 = property_1.getLabelSourceType(property);
                var labelFormat = property_1.getLabelFormat(property);
                // ensure tokens included in the format trigger rule execution
                labelFormat.paths.forEach(function (p) {
                    labelSourceType_1.getPaths(p).forEach(function (prop) {
                        var labelTokenProp = prop;
                        if (property.labelSource) {
                            labelTokenProp = rootType.getPath(property.labelSource.path + "." + prop.path);
                        }
                        if (!options.onChangeOf) {
                            options.onChangeOf = [labelTokenProp];
                        }
                        else if (options.onChangeOf.indexOf(labelTokenProp) < 0) {
                            options.onChangeOf.push(labelTokenProp);
                        }
                    });
                });
                if (typeof options.message === "function") {
                    var messageFunction_1 = options.message;
                    // Create a function to apply the format to the property label when generating the message
                    options.message = function () {
                        var message = "";
                        try {
                            message = messageFunction_1.call(this);
                            if (typeof message === "string") {
                                if (message.trim().length > 0 && message.indexOf("{property}") >= 0) {
                                    message = message.replace("{property}", property_1.evaluateLabel(property, this));
                                }
                            }
                            else if (message != null) {
                                console.warn("Converting message of type '" + (typeof message) + "' for rule '" + options.name + "' to a string.");
                                message = message.toString();
                            }
                        }
                        catch (e) {
                            console.warn(e);
                        }
                        return message;
                    };
                }
                else if (typeof options.message === "string") {
                    var messageTemplate_1 = options.message;
                    // Create a function to apply the format to the property label when generating the message
                    options.message = function () {
                        return messageTemplate_1.replace("{property}", property_1.evaluateLabel(property, this));
                    };
                }
            }
            // Static property label
            else if (typeof options.message === "string") {
                options.message = options.message.replace("{property}", property.label);
            }
            // Use static property label in function return value
            else if (typeof options.message === "function") {
                var messageFunction_2 = options.message;
                // Create a function to apply the format to the property label when generating the message
                options.message = function () {
                    var message = "";
                    try {
                        message = messageFunction_2.call(this);
                        if (typeof message === "string") {
                            if (message.trim().length > 0 && message.indexOf("{property}") >= 0) {
                                message = message.replace("{property}", property.label);
                            }
                        }
                        else if (message != null) {
                            console.warn("Converting message of type '" + (typeof message) + "' for rule '" + options.name + "' to a string.");
                            message = message.toString();
                        }
                    }
                    catch (e) {
                        console.warn(e);
                    }
                    return message;
                };
            }
        }
        if (options.isValid) {
            options.assert = function () {
                var isValid;
                try {
                    isValid = options.isValid.call(this, options.property, options.property.value(this));
                }
                catch (e) {
                    console.warn(e);
                }
                return isValid === undefined ? isValid : !isValid;
            };
        }
        // call the base rule constructor
        _this = _super.call(this, rootType, options) || this;
        Object.defineProperty(_this, "property", { value: property });
        // register the rule with the target property
        _this.property.rules.push(_this);
        return _this;
    }
    return ValidationRule;
}(condition_rule_1.ConditionRule));
exports.ValidationRule = ValidationRule;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,