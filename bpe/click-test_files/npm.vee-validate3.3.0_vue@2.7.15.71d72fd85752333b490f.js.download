(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.vee-validate3.3.0_vue@2.7.15"],{

/***/ "../../node_modules/.pnpm/vee-validate@3.3.0_vue@2.7.15/node_modules/vee-validate/dist/rules.js":
/*!*************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vee-validate@3.3.0_vue@2.7.15/node_modules/vee-validate/dist/rules.js ***!
  \*************************************************************************************************************************************************************/
/*! exports provided: alpha, alpha_dash, alpha_num, alpha_spaces, between, confirmed, digits, dimensions, email, excluded, ext, image, integer, is, is_not, length, max, max_value, mimes, min, min_value, numeric, oneOf, regex, required, required_if, size */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha", function() { return alpha$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha_dash", function() { return alpha_dash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha_num", function() { return alpha_num; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alpha_spaces", function() { return alpha_spaces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "between", function() { return between; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmed", function() { return confirmed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "digits", function() { return digits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dimensions", function() { return dimensions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "email", function() { return email; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "excluded", function() { return excluded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ext", function() { return ext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "image", function() { return image; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integer", function() { return integer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is", function() { return is; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "is_not", function() { return is_not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max_value", function() { return max_value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mimes", function() { return mimes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min_value", function() { return min_value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numeric", function() { return numeric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneOf", function() { return oneOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "regex", function() { return regex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "required", function() { return required; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "required_if", function() { return required_if; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "size", function() { return size; });
/**
  * vee-validate v3.3.0
  * (c) 2020 Abdelrahman Awad
  * @license MIT
  */
/**
 * Some Alpha Regex helpers.
 * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js
 */
/* eslint-disable no-misleading-character-class */
var alpha = {
    en: /^[A-Z]*$/i,
    cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,
    da: /^[A-ZÆØÅ]*$/i,
    de: /^[A-ZÄÖÜß]*$/i,
    es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,
    fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
    fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,
    it: /^[A-Z\xC0-\xFF]*$/i,
    lt: /^[A-ZĄČĘĖĮŠŲŪŽ]*$/i,
    nl: /^[A-ZÉËÏÓÖÜ]*$/i,
    hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,
    pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,
    pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,
    ru: /^[А-ЯЁ]*$/i,
    sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,
    sr: /^[A-ZČĆŽŠĐ]*$/i,
    sv: /^[A-ZÅÄÖ]*$/i,
    tr: /^[A-ZÇĞİıÖŞÜ]*$/i,
    uk: /^[А-ЩЬЮЯЄІЇҐ]*$/i,
    ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,
    az: /^[A-ZÇƏĞİıÖŞÜ]*$/i
};
var alphaSpaces = {
    en: /^[A-Z\s]*$/i,
    cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\s]*$/i,
    da: /^[A-ZÆØÅ\s]*$/i,
    de: /^[A-ZÄÖÜß\s]*$/i,
    es: /^[A-ZÁÉÍÑÓÚÜ\s]*$/i,
    fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
    fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\s]*$/i,
    it: /^[A-Z\xC0-\xFF\s]*$/i,
    lt: /^[A-ZĄČĘĖĮŠŲŪŽ\s]*$/i,
    nl: /^[A-ZÉËÏÓÖÜ\s]*$/i,
    hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\s]*$/i,
    pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\s]*$/i,
    pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\s]*$/i,
    ru: /^[А-ЯЁ\s]*$/i,
    sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ\s]*$/i,
    sr: /^[A-ZČĆŽŠĐ\s]*$/i,
    sv: /^[A-ZÅÄÖ\s]*$/i,
    tr: /^[A-ZÇĞİıÖŞÜ\s]*$/i,
    uk: /^[А-ЩЬЮЯЄІЇҐ\s]*$/i,
    ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\s]*$/,
    az: /^[A-ZÇƏĞİıÖŞÜ\s]*$/i
};
var alphanumeric = {
    en: /^[0-9A-Z]*$/i,
    cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,
    da: /^[0-9A-ZÆØÅ]$/i,
    de: /^[0-9A-ZÄÖÜß]*$/i,
    es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,
    fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
    fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,
    it: /^[0-9A-Z\xC0-\xFF]*$/i,
    lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ]*$/i,
    hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,
    nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,
    pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,
    pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,
    ru: /^[0-9А-ЯЁ]*$/i,
    sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,
    sr: /^[0-9A-ZČĆŽŠĐ]*$/i,
    sv: /^[0-9A-ZÅÄÖ]*$/i,
    tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,
    uk: /^[0-9А-ЩЬЮЯЄІЇҐ]*$/i,
    ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,
    az: /^[0-9A-ZÇƏĞİıÖŞÜ]*$/i
};
var alphaDash = {
    en: /^[0-9A-Z_-]*$/i,
    cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,
    da: /^[0-9A-ZÆØÅ_-]*$/i,
    de: /^[0-9A-ZÄÖÜß_-]*$/i,
    es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,
    fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
    fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,
    it: /^[0-9A-Z\xC0-\xFF_-]*$/i,
    lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ_-]*$/i,
    nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,
    hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,
    pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,
    pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,
    ru: /^[0-9А-ЯЁ_-]*$/i,
    sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ_-]*$/i,
    sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,
    sv: /^[0-9A-ZÅÄÖ_-]*$/i,
    tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,
    uk: /^[0-9А-ЩЬЮЯЄІЇҐ_-]*$/i,
    ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/,
    az: /^[0-9A-ZÇƏĞİıÖŞÜ_-]*$/i
};

var validate = function (value, _a) {
    var _b = (_a === void 0 ? {} : _a).locale, locale = _b === void 0 ? '' : _b;
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate(val, { locale: locale }); });
    }
    // Match at least one locale.
    if (!locale) {
        return Object.keys(alpha).some(function (loc) { return alpha[loc].test(value); });
    }
    return (alpha[locale] || alpha.en).test(value);
};
var params = [
    {
        name: 'locale'
    }
];
var alpha$1 = {
    validate: validate,
    params: params
};

var validate$1 = function (value, _a) {
    var _b = (_a === void 0 ? {} : _a).locale, locale = _b === void 0 ? '' : _b;
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$1(val, { locale: locale }); });
    }
    // Match at least one locale.
    if (!locale) {
        return Object.keys(alphaDash).some(function (loc) { return alphaDash[loc].test(value); });
    }
    return (alphaDash[locale] || alphaDash.en).test(value);
};
var params$1 = [
    {
        name: 'locale'
    }
];
var alpha_dash = {
    validate: validate$1,
    params: params$1
};

var validate$2 = function (value, _a) {
    var _b = (_a === void 0 ? {} : _a).locale, locale = _b === void 0 ? '' : _b;
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$2(val, { locale: locale }); });
    }
    // Match at least one locale.
    if (!locale) {
        return Object.keys(alphanumeric).some(function (loc) { return alphanumeric[loc].test(value); });
    }
    return (alphanumeric[locale] || alphanumeric.en).test(value);
};
var params$2 = [
    {
        name: 'locale'
    }
];
var alpha_num = {
    validate: validate$2,
    params: params$2
};

var validate$3 = function (value, _a) {
    var _b = (_a === void 0 ? {} : _a).locale, locale = _b === void 0 ? '' : _b;
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$3(val, { locale: locale }); });
    }
    // Match at least one locale.
    if (!locale) {
        return Object.keys(alphaSpaces).some(function (loc) { return alphaSpaces[loc].test(value); });
    }
    return (alphaSpaces[locale] || alphaSpaces.en).test(value);
};
var params$3 = [
    {
        name: 'locale'
    }
];
var alpha_spaces = {
    validate: validate$3,
    params: params$3
};

var validate$4 = function (value, _a) {
    var _b = _a === void 0 ? {} : _a, min = _b.min, max = _b.max;
    if (Array.isArray(value)) {
        return value.every(function (val) { return !!validate$4(val, { min: min, max: max }); });
    }
    return Number(min) <= value && Number(max) >= value;
};
var params$4 = [
    {
        name: 'min'
    },
    {
        name: 'max'
    }
];
var between = {
    validate: validate$4,
    params: params$4
};

var validate$5 = function (value, _a) {
    var target = _a.target;
    return String(value) === String(target);
};
var params$5 = [
    {
        name: 'target',
        isTarget: true
    }
];
var confirmed = {
    validate: validate$5,
    params: params$5
};

var validate$6 = function (value, _a) {
    var length = _a.length;
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$6(val, { length: length }); });
    }
    var strVal = String(value);
    return /^[0-9]*$/.test(strVal) && strVal.length === length;
};
var params$6 = [
    {
        name: 'length',
        cast: function (value) {
            return Number(value);
        }
    }
];
var digits = {
    validate: validate$6,
    params: params$6
};

var validateImage = function (file, width, height) {
    var URL = window.URL || window.webkitURL;
    return new Promise(function (resolve) {
        var image = new Image();
        image.onerror = function () { return resolve(false); };
        image.onload = function () { return resolve(image.width === width && image.height === height); };
        image.src = URL.createObjectURL(file);
    });
};
var validate$7 = function (files, _a) {
    var width = _a.width, height = _a.height;
    var list = [];
    files = Array.isArray(files) ? files : [files];
    for (var i = 0; i < files.length; i++) {
        // if file is not an image, reject.
        if (!/\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(files[i].name)) {
            return Promise.resolve(false);
        }
        list.push(files[i]);
    }
    return Promise.all(list.map(function (file) { return validateImage(file, width, height); })).then(function (values) {
        return values.every(function (v) { return v; });
    });
};
var params$7 = [
    {
        name: 'width',
        cast: function (value) {
            return Number(value);
        }
    },
    {
        name: 'height',
        cast: function (value) {
            return Number(value);
        }
    }
];
var dimensions = {
    validate: validate$7,
    params: params$7
};

var validate$8 = function (value, _a) {
    var multiple = (_a === void 0 ? {} : _a).multiple;
    // eslint-disable-next-line
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if (multiple && !Array.isArray(value)) {
        value = String(value)
            .split(',')
            .map(function (emailStr) { return emailStr.trim(); });
    }
    if (Array.isArray(value)) {
        return value.every(function (val) { return re.test(String(val)); });
    }
    return re.test(String(value));
};
var params$8 = [
    {
        name: 'multiple',
        default: false
    }
];
var email = {
    validate: validate$8,
    params: params$8
};

function isNullOrUndefined(value) {
    return value === null || value === undefined;
}
function isEmptyArray(arr) {
    return Array.isArray(arr) && arr.length === 0;
}
function isCallable(fn) {
    return typeof fn === 'function';
}

function includes(collection, item) {
    return collection.indexOf(item) !== -1;
}
/**
 * Converts an array-like object to array, provides a simple polyfill for Array.from
 */
function toArray(arrayLike) {
    if (isCallable(Array.from)) {
        return Array.from(arrayLike);
    }
    /* istanbul ignore next */
    return _copyArray(arrayLike);
}
/* istanbul ignore next */
function _copyArray(arrayLike) {
    var array = [];
    var length = arrayLike.length;
    for (var i = 0; i < length; i++) {
        array.push(arrayLike[i]);
    }
    return array;
}

var validate$9 = function (value, options) {
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$9(val, options); });
    }
    return toArray(options).some(function (item) {
        // eslint-disable-next-line
        return item == value;
    });
};
var oneOf = {
    validate: validate$9
};

var validate$a = function (value, args) {
    return !validate$9(value, args);
};
var excluded = {
    validate: validate$a
};

var validate$b = function (files, extensions) {
    var regex = new RegExp(".(" + extensions.join('|') + ")$", 'i');
    if (Array.isArray(files)) {
        return files.every(function (file) { return regex.test(file.name); });
    }
    return regex.test(files.name);
};
var ext = {
    validate: validate$b
};

var validate$c = function (files) {
    var regex = /\.(jpg|svg|jpeg|png|bmp|gif)$/i;
    if (Array.isArray(files)) {
        return files.every(function (file) { return regex.test(file.name); });
    }
    return regex.test(files.name);
};
var image = {
    validate: validate$c
};

var validate$d = function (value) {
    if (Array.isArray(value)) {
        return value.every(function (val) { return /^-?[0-9]+$/.test(String(val)); });
    }
    return /^-?[0-9]+$/.test(String(value));
};
var integer = {
    validate: validate$d
};

var validate$e = function (value, _a) {
    var other = _a.other;
    return value === other;
};
var params$9 = [
    {
        name: 'other'
    }
];
var is = {
    validate: validate$e,
    params: params$9
};

var validate$f = function (value, _a) {
    var other = _a.other;
    return value !== other;
};
var params$a = [
    {
        name: 'other'
    }
];
var is_not = {
    validate: validate$f,
    params: params$a
};

var validate$g = function (value, _a) {
    var length = _a.length;
    if (isNullOrUndefined(value)) {
        return false;
    }
    if (typeof value === 'number') {
        value = String(value);
    }
    if (!value.length) {
        value = toArray(value);
    }
    return value.length === length;
};
var params$b = [
    {
        name: 'length',
        cast: function (value) { return Number(value); }
    }
];
var length = {
    validate: validate$g,
    params: params$b
};

var validate$h = function (value, _a) {
    var length = _a.length;
    if (isNullOrUndefined(value)) {
        return length >= 0;
    }
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$h(val, { length: length }); });
    }
    return String(value).length <= length;
};
var params$c = [
    {
        name: 'length',
        cast: function (value) {
            return Number(value);
        }
    }
];
var max = {
    validate: validate$h,
    params: params$c
};

var validate$i = function (value, _a) {
    var max = _a.max;
    if (isNullOrUndefined(value) || value === '') {
        return false;
    }
    if (Array.isArray(value)) {
        return value.length > 0 && value.every(function (val) { return validate$i(val, { max: max }); });
    }
    return Number(value) <= max;
};
var params$d = [
    {
        name: 'max',
        cast: function (value) {
            return Number(value);
        }
    }
];
var max_value = {
    validate: validate$i,
    params: params$d
};

var validate$j = function (files, mimes) {
    var regex = new RegExp(mimes.join('|').replace('*', '.+') + "$", 'i');
    if (Array.isArray(files)) {
        return files.every(function (file) { return regex.test(file.type); });
    }
    return regex.test(files.type);
};
var mimes = {
    validate: validate$j
};

var validate$k = function (value, _a) {
    var length = _a.length;
    if (isNullOrUndefined(value)) {
        return false;
    }
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$k(val, { length: length }); });
    }
    return String(value).length >= length;
};
var params$e = [
    {
        name: 'length',
        cast: function (value) {
            return Number(value);
        }
    }
];
var min = {
    validate: validate$k,
    params: params$e
};

var validate$l = function (value, _a) {
    var min = _a.min;
    if (isNullOrUndefined(value) || value === '') {
        return false;
    }
    if (Array.isArray(value)) {
        return value.length > 0 && value.every(function (val) { return validate$l(val, { min: min }); });
    }
    return Number(value) >= min;
};
var params$f = [
    {
        name: 'min',
        cast: function (value) {
            return Number(value);
        }
    }
];
var min_value = {
    validate: validate$l,
    params: params$f
};

var ar = /^[٠١٢٣٤٥٦٧٨٩]+$/;
var en = /^[0-9]+$/;
var validate$m = function (value) {
    var testValue = function (val) {
        var strValue = String(val);
        return en.test(strValue) || ar.test(strValue);
    };
    if (Array.isArray(value)) {
        return value.every(testValue);
    }
    return testValue(value);
};
var numeric = {
    validate: validate$m
};

var validate$n = function (value, _a) {
    var regex = _a.regex;
    if (Array.isArray(value)) {
        return value.every(function (val) { return validate$n(val, { regex: regex }); });
    }
    return regex.test(String(value));
};
var params$g = [
    {
        name: 'regex',
        cast: function (value) {
            if (typeof value === 'string') {
                return new RegExp(value);
            }
            return value;
        }
    }
];
var regex = {
    validate: validate$n,
    params: params$g
};

var validate$o = function (value, _a) {
    var allowFalse = (_a === void 0 ? { allowFalse: true } : _a).allowFalse;
    var result = {
        valid: false,
        required: true
    };
    if (isNullOrUndefined(value) || isEmptyArray(value)) {
        return result;
    }
    // incase a field considers `false` as an empty value like checkboxes.
    if (value === false && !allowFalse) {
        return result;
    }
    result.valid = !!String(value).trim().length;
    return result;
};
var computesRequired = true;
var params$h = [
    {
        name: 'allowFalse',
        default: true
    }
];
var required = {
    validate: validate$o,
    params: params$h,
    computesRequired: computesRequired
};

var testEmpty = function (value) {
    return isEmptyArray(value) || includes([false, null, undefined], value) || !String(value).trim().length;
};
var validate$p = function (value, _a) {
    var target = _a.target, values = _a.values;
    var required;
    if (values && values.length) {
        if (!Array.isArray(values) && typeof values === 'string') {
            values = [values];
        }
        // eslint-disable-next-line
        required = values.some(function (val) { return val == String(target).trim(); });
    }
    else {
        required = !testEmpty(target);
    }
    if (!required) {
        return {
            valid: true,
            required: required
        };
    }
    return {
        valid: !testEmpty(value),
        required: required
    };
};
var params$i = [
    {
        name: 'target',
        isTarget: true
    },
    {
        name: 'values'
    }
];
var computesRequired$1 = true;
var required_if = {
    validate: validate$p,
    params: params$i,
    computesRequired: computesRequired$1
};

var validate$q = function (files, _a) {
    var size = _a.size;
    if (isNaN(size)) {
        return false;
    }
    var nSize = size * 1024;
    if (!Array.isArray(files)) {
        return files.size <= nSize;
    }
    for (var i = 0; i < files.length; i++) {
        if (files[i].size > nSize) {
            return false;
        }
    }
    return true;
};
var params$j = [
    {
        name: 'size',
        cast: function (value) {
            return Number(value);
        }
    }
];
var size = {
    validate: validate$q,
    params: params$j
};




/***/ }),

/***/ "../../node_modules/.pnpm/vee-validate@3.3.0_vue@2.7.15/node_modules/vee-validate/dist/vee-validate.esm.js":
/*!************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vee-validate@3.3.0_vue@2.7.15/node_modules/vee-validate/dist/vee-validate.esm.js ***!
  \************************************************************************************************************************************************************************/
/*! exports provided: ValidationObserver, ValidationProvider, configure, extend, localeChanged, localize, normalizeRules, setInteractionMode, validate, version, withValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationObserver", function() { return ValidationObserver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidationProvider", function() { return ValidationProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localeChanged", function() { return localeChanged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "localize", function() { return localize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeRules", function() { return normalizeRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setInteractionMode", function() { return setInteractionMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return validate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withValidation", function() { return withValidation; });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
/**
  * vee-validate v3.3.0
  * (c) 2020 Abdelrahman Awad
  * @license MIT
  */


/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function isNaN(value) {
    // NaN is the one value that does not equal itself.
    // eslint-disable-next-line
    return value !== value;
}
function isNullOrUndefined(value) {
    return value === null || value === undefined;
}
function isEmptyArray(arr) {
    return Array.isArray(arr) && arr.length === 0;
}
var isObject = function (obj) {
    return obj !== null && obj && typeof obj === 'object' && !Array.isArray(obj);
};
/**
 * Shallow object comparison.
 */
function isEqual(lhs, rhs) {
    if (lhs instanceof RegExp && rhs instanceof RegExp) {
        return isEqual(lhs.source, rhs.source) && isEqual(lhs.flags, rhs.flags);
    }
    if (Array.isArray(lhs) && Array.isArray(rhs)) {
        if (lhs.length !== rhs.length)
            return false;
        for (var i = 0; i < lhs.length; i++) {
            if (!isEqual(lhs[i], rhs[i])) {
                return false;
            }
        }
        return true;
    }
    // if both are objects, compare each key recursively.
    if (isObject(lhs) && isObject(rhs)) {
        return (Object.keys(lhs).every(function (key) {
            return isEqual(lhs[key], rhs[key]);
        }) &&
            Object.keys(rhs).every(function (key) {
                return isEqual(lhs[key], rhs[key]);
            }));
    }
    if (isNaN(lhs) && isNaN(rhs)) {
        return true;
    }
    return lhs === rhs;
}
// Checks if a given value is not an empty string or null or undefined.
function isSpecified(val) {
    if (val === '') {
        return false;
    }
    return !isNullOrUndefined(val);
}
function isCallable(fn) {
    return typeof fn === 'function';
}
function isLocator(value) {
    return isCallable(value) && !!value.__locatorRef;
}

function findIndex(arrayLike, predicate) {
    var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);
    if (isCallable(array.findIndex)) {
        return array.findIndex(predicate);
    }
    /* istanbul ignore next */
    for (var i = 0; i < array.length; i++) {
        if (predicate(array[i], i)) {
            return i;
        }
    }
    /* istanbul ignore next */
    return -1;
}
/**
 * finds the first element that satisfies the predicate callback, polyfills array.find
 */
function find(arrayLike, predicate) {
    var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);
    var idx = findIndex(array, predicate);
    return idx === -1 ? undefined : array[idx];
}
function includes(collection, item) {
    return collection.indexOf(item) !== -1;
}
/**
 * Converts an array-like object to array, provides a simple polyfill for Array.from
 */
function toArray(arrayLike) {
    if (isCallable(Array.from)) {
        return Array.from(arrayLike);
    }
    /* istanbul ignore next */
    return _copyArray(arrayLike);
}
/* istanbul ignore next */
function _copyArray(arrayLike) {
    var array = [];
    var length = arrayLike.length;
    for (var i = 0; i < length; i++) {
        array.push(arrayLike[i]);
    }
    return array;
}
function values(obj) {
    if (isCallable(Object.values)) {
        return Object.values(obj);
    }
    // fallback to keys()
    /* istanbul ignore next */
    return Object.keys(obj).map(function (k) { return obj[k]; });
}
function merge(target, source) {
    Object.keys(source).forEach(function (key) {
        if (isObject(source[key])) {
            if (!target[key]) {
                target[key] = {};
            }
            merge(target[key], source[key]);
            return;
        }
        target[key] = source[key];
    });
    return target;
}

function createFlags() {
    return {
        untouched: true,
        touched: false,
        dirty: false,
        pristine: true,
        valid: false,
        invalid: false,
        validated: false,
        pending: false,
        required: false,
        changed: false,
        passed: false,
        failed: false
    };
}

function identity(x) {
    return x;
}
function debounce(fn, wait, token) {
    if (wait === void 0) { wait = 0; }
    if (token === void 0) { token = { cancelled: false }; }
    if (wait === 0) {
        return fn;
    }
    var timeout;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = undefined;
            // check if the fn call was cancelled.
            if (!token.cancelled)
                fn.apply(void 0, args);
        };
        // because we might want to use Node.js setTimout for SSR.
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

/**
 * Emits a warning to the console
 */
function warn(message) {
    console.warn("[vee-validate] " + message);
}
/**
 * Replaces placeholder values in a string with their actual values
 */
function interpolate(template, values) {
    return template.replace(/{([^}]+)}/g, function (_, p) {
        return p in values ? values[p] : "{" + p + "}";
    });
}

var RULES = {};
function normalizeSchema(schema) {
    var _a;
    if ((_a = schema.params) === null || _a === void 0 ? void 0 : _a.length) {
        schema.params = schema.params.map(function (param) {
            if (typeof param === 'string') {
                return { name: param };
            }
            return param;
        });
    }
    return schema;
}
var RuleContainer = /** @class */ (function () {
    function RuleContainer() {
    }
    RuleContainer.extend = function (name, schema) {
        // if rule already exists, overwrite it.
        var rule = normalizeSchema(schema);
        if (RULES[name]) {
            RULES[name] = merge(RULES[name], schema);
            return;
        }
        RULES[name] = __assign({ lazy: false, computesRequired: false }, rule);
    };
    RuleContainer.isLazy = function (name) {
        var _a;
        return !!((_a = RULES[name]) === null || _a === void 0 ? void 0 : _a.lazy);
    };
    RuleContainer.isRequireRule = function (name) {
        var _a;
        return !!((_a = RULES[name]) === null || _a === void 0 ? void 0 : _a.computesRequired);
    };
    RuleContainer.getRuleDefinition = function (ruleName) {
        return RULES[ruleName];
    };
    return RuleContainer;
}());
/**
 * Adds a custom validator to the list of validation rules.
 */
function extend(name, schema) {
    // makes sure new rules are properly formatted.
    guardExtend(name, schema);
    // Full schema object.
    if (typeof schema === 'object') {
        RuleContainer.extend(name, schema);
        return;
    }
    RuleContainer.extend(name, {
        validate: schema
    });
}
/**
 * Guards from extension violations.
 */
function guardExtend(name, validator) {
    if (isCallable(validator)) {
        return;
    }
    if (isCallable(validator.validate)) {
        return;
    }
    if (RuleContainer.getRuleDefinition(name)) {
        return;
    }
    throw new Error("Extension Error: The validator '" + name + "' must be a function or have a 'validate' method.");
}

var DEFAULT_CONFIG = {
    defaultMessage: "{_field_} is not valid.",
    skipOptional: true,
    classes: {
        touched: 'touched',
        untouched: 'untouched',
        valid: 'valid',
        invalid: 'invalid',
        pristine: 'pristine',
        dirty: 'dirty' // control has been interacted with
    },
    bails: true,
    mode: 'aggressive',
    useConstraintAttrs: true
};
var currentConfig = __assign({}, DEFAULT_CONFIG);
var getConfig = function () { return currentConfig; };
var setConfig = function (newConf) {
    currentConfig = __assign(__assign({}, currentConfig), newConf);
};
var configure = function (cfg) {
    setConfig(cfg);
};

/**
 * Normalizes the given rules expression.
 */
function normalizeRules(rules) {
    // if falsy value return an empty object.
    var acc = {};
    Object.defineProperty(acc, '_$$isNormalized', {
        value: true,
        writable: false,
        enumerable: false,
        configurable: false
    });
    if (!rules) {
        return acc;
    }
    // Object is already normalized, skip.
    if (isObject(rules) && rules._$$isNormalized) {
        return rules;
    }
    if (isObject(rules)) {
        return Object.keys(rules).reduce(function (prev, curr) {
            var params = [];
            var preserveArrayParams = false;
            if (rules[curr] === true) {
                params = [];
            }
            else if (Array.isArray(rules[curr])) {
                params = rules[curr];
                preserveArrayParams = true;
            }
            else if (isObject(rules[curr])) {
                params = rules[curr];
            }
            else {
                params = [rules[curr]];
            }
            if (rules[curr] !== false) {
                prev[curr] = buildParams(curr, params, preserveArrayParams);
            }
            return prev;
        }, acc);
    }
    /* istanbul ignore if */
    if (typeof rules !== 'string') {
        warn('rules must be either a string or an object.');
        return acc;
    }
    return rules.split('|').reduce(function (prev, rule) {
        var parsedRule = parseRule(rule);
        if (!parsedRule.name) {
            return prev;
        }
        prev[parsedRule.name] = buildParams(parsedRule.name, parsedRule.params);
        return prev;
    }, acc);
}
function buildParams(ruleName, provided, preserveArrayParams) {
    if (preserveArrayParams === void 0) { preserveArrayParams = false; }
    var ruleSchema = RuleContainer.getRuleDefinition(ruleName);
    if (!ruleSchema) {
        return provided;
    }
    var params = {};
    if (!ruleSchema.params && !Array.isArray(provided)) {
        throw new Error('You provided an object params to a rule that has no defined schema.');
    }
    // Rule probably uses an array for their args, keep it as is.
    if (Array.isArray(provided) && !ruleSchema.params) {
        return provided;
    }
    var definedParams;
    // collect the params schema.
    if (!ruleSchema.params || (ruleSchema.params.length < provided.length && Array.isArray(provided))) {
        var lastDefinedParam_1;
        // collect any additional parameters in the last item.
        definedParams = provided.map(function (_, idx) {
            var _a;
            var param = (_a = ruleSchema.params) === null || _a === void 0 ? void 0 : _a[idx];
            lastDefinedParam_1 = param || lastDefinedParam_1;
            if (!param) {
                param = lastDefinedParam_1;
            }
            return param;
        });
    }
    else {
        definedParams = ruleSchema.params;
    }
    // Match the provided array length with a temporary schema.
    for (var i = 0; i < definedParams.length; i++) {
        var options = definedParams[i];
        var value = options.default;
        // if the provided is an array, map element value.
        if (Array.isArray(provided) && !preserveArrayParams) {
            if (i in provided) {
                value = provided[i];
            }
        }
        else {
            // If the param exists in the provided object.
            if (options.name in provided) {
                value = provided[options.name];
                // if the provided is the first param value.
            }
            else if (definedParams.length === 1) {
                value = provided;
            }
        }
        // if the param is a target, resolve the target value.
        if (options.isTarget) {
            value = createLocator(value, options.cast);
        }
        // A target param using interpolation
        if (typeof value === 'string' && value[0] === '@') {
            value = createLocator(value.slice(1), options.cast);
        }
        // If there is a transformer defined.
        if (!isLocator(value) && options.cast) {
            value = options.cast(value);
        }
        // already been set, probably multiple values.
        if (params[options.name]) {
            params[options.name] = Array.isArray(params[options.name]) ? params[options.name] : [params[options.name]];
            params[options.name].push(value);
        }
        else {
            // set the value.
            params[options.name] = value;
        }
    }
    return params;
}
/**
 * Parses a rule string expression.
 */
var parseRule = function (rule) {
    var params = [];
    var name = rule.split(':')[0];
    if (includes(rule, ':')) {
        params = rule
            .split(':')
            .slice(1)
            .join(':')
            .split(',');
    }
    return { name: name, params: params };
};
function createLocator(value, castFn) {
    var locator = function (crossTable) {
        var val = crossTable[value];
        return castFn ? castFn(val) : val;
    };
    locator.__locatorRef = value;
    return locator;
}
function extractLocators(params) {
    if (Array.isArray(params)) {
        return params.filter(isLocator);
    }
    return Object.keys(params)
        .filter(function (key) { return isLocator(params[key]); })
        .map(function (key) { return params[key]; });
}

/**
 * Validates a value against the rules.
 */
function validate(value, rules, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var shouldBail, skipIfEmpty, field, result, errors, failedRules, regenerateMap;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    shouldBail = options === null || options === void 0 ? void 0 : options.bails;
                    skipIfEmpty = options === null || options === void 0 ? void 0 : options.skipIfEmpty;
                    field = {
                        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',
                        rules: normalizeRules(rules),
                        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,
                        skipIfEmpty: skipIfEmpty !== null && skipIfEmpty !== void 0 ? skipIfEmpty : true,
                        forceRequired: false,
                        crossTable: (options === null || options === void 0 ? void 0 : options.values) || {},
                        names: (options === null || options === void 0 ? void 0 : options.names) || {},
                        customMessages: (options === null || options === void 0 ? void 0 : options.customMessages) || {}
                    };
                    return [4 /*yield*/, _validate(field, value, options)];
                case 1:
                    result = _a.sent();
                    errors = [];
                    failedRules = {};
                    regenerateMap = {};
                    result.errors.forEach(function (e) {
                        var msg = e.msg();
                        errors.push(msg);
                        failedRules[e.rule] = msg;
                        regenerateMap[e.rule] = e.msg;
                    });
                    return [2 /*return*/, {
                            valid: result.valid,
                            errors: errors,
                            failedRules: failedRules,
                            regenerateMap: regenerateMap
                        }];
            }
        });
    });
}
/**
 * Starts the validation process.
 */
function _validate(field, value, _a) {
    var _b = (_a === void 0 ? {} : _a).isInitial, isInitial = _b === void 0 ? false : _b;
    return __awaiter(this, void 0, void 0, function () {
        var _c, shouldSkip, errors, rules, length, i, rule, result;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, _shouldSkip(field, value)];
                case 1:
                    _c = _d.sent(), shouldSkip = _c.shouldSkip, errors = _c.errors;
                    if (shouldSkip) {
                        return [2 /*return*/, {
                                valid: !errors.length,
                                errors: errors
                            }];
                    }
                    rules = Object.keys(field.rules).filter(function (rule) { return !RuleContainer.isRequireRule(rule); });
                    length = rules.length;
                    i = 0;
                    _d.label = 2;
                case 2:
                    if (!(i < length)) return [3 /*break*/, 5];
                    if (isInitial && RuleContainer.isLazy(rules[i])) {
                        return [3 /*break*/, 4];
                    }
                    rule = rules[i];
                    return [4 /*yield*/, _test(field, value, {
                            name: rule,
                            params: field.rules[rule]
                        })];
                case 3:
                    result = _d.sent();
                    if (!result.valid && result.error) {
                        errors.push(result.error);
                        if (field.bails) {
                            return [2 /*return*/, {
                                    valid: false,
                                    errors: errors
                                }];
                        }
                    }
                    _d.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/, {
                        valid: !errors.length,
                        errors: errors
                    }];
            }
        });
    });
}
function _shouldSkip(field, value) {
    return __awaiter(this, void 0, void 0, function () {
        var requireRules, length, errors, isEmpty, isEmptyAndOptional, isRequired, i, rule, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requireRules = Object.keys(field.rules).filter(RuleContainer.isRequireRule);
                    length = requireRules.length;
                    errors = [];
                    isEmpty = isNullOrUndefined(value) || value === '' || isEmptyArray(value);
                    isEmptyAndOptional = isEmpty && field.skipIfEmpty;
                    isRequired = false;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < length)) return [3 /*break*/, 4];
                    rule = requireRules[i];
                    return [4 /*yield*/, _test(field, value, {
                            name: rule,
                            params: field.rules[rule]
                        })];
                case 2:
                    result = _a.sent();
                    if (!isObject(result)) {
                        throw new Error('Require rules has to return an object (see docs)');
                    }
                    if (result.required) {
                        isRequired = true;
                    }
                    if (!result.valid && result.error) {
                        errors.push(result.error);
                        // Exit early as the field is required and failed validation.
                        if (field.bails) {
                            return [2 /*return*/, {
                                    shouldSkip: true,
                                    errors: errors
                                }];
                        }
                    }
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4:
                    if (isEmpty && !isRequired && !field.skipIfEmpty) {
                        return [2 /*return*/, {
                                shouldSkip: false,
                                errors: errors
                            }];
                    }
                    // field is configured to run through the pipeline regardless
                    if (!field.bails && !isEmptyAndOptional) {
                        return [2 /*return*/, {
                                shouldSkip: false,
                                errors: errors
                            }];
                    }
                    // skip if the field is not required and has an empty value.
                    return [2 /*return*/, {
                            shouldSkip: !isRequired && isEmpty,
                            errors: errors
                        }];
            }
        });
    });
}
/**
 * Tests a single input value against a rule.
 */
function _test(field, value, rule) {
    return __awaiter(this, void 0, void 0, function () {
        var ruleSchema, normalizedValue, params, result, values_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ruleSchema = RuleContainer.getRuleDefinition(rule.name);
                    if (!ruleSchema || !ruleSchema.validate) {
                        throw new Error("No such validator '" + rule.name + "' exists.");
                    }
                    normalizedValue = ruleSchema.castValue ? ruleSchema.castValue(value) : value;
                    params = fillTargetValues(rule.params, field.crossTable);
                    return [4 /*yield*/, ruleSchema.validate(normalizedValue, params)];
                case 1:
                    result = _a.sent();
                    if (typeof result === 'string') {
                        values_1 = __assign(__assign({}, (params || {})), { _field_: field.name, _value_: value, _rule_: rule.name });
                        return [2 /*return*/, {
                                valid: false,
                                error: { rule: rule.name, msg: function () { return interpolate(result, values_1); } }
                            }];
                    }
                    if (!isObject(result)) {
                        result = { valid: result };
                    }
                    return [2 /*return*/, {
                            valid: result.valid,
                            required: result.required,
                            error: result.valid ? undefined : _generateFieldError(field, value, ruleSchema, rule.name, params)
                        }];
            }
        });
    });
}
/**
 * Generates error messages.
 */
function _generateFieldError(field, value, ruleSchema, ruleName, params) {
    var _a;
    var message = (_a = field.customMessages[ruleName]) !== null && _a !== void 0 ? _a : ruleSchema.message;
    var ruleTargets = _getRuleTargets(field, ruleSchema, ruleName);
    var _b = _getUserTargets(field, ruleSchema, ruleName, message), userTargets = _b.userTargets, userMessage = _b.userMessage;
    var values = __assign(__assign(__assign(__assign({}, (params || {})), { _field_: field.name, _value_: value, _rule_: ruleName }), ruleTargets), userTargets);
    return {
        msg: function () { return _normalizeMessage(userMessage || getConfig().defaultMessage, field.name, values); },
        rule: ruleName
    };
}
function _getRuleTargets(field, ruleSchema, ruleName) {
    var params = ruleSchema.params;
    if (!params) {
        return {};
    }
    var numTargets = params.filter(function (param) { return param.isTarget; }).length;
    if (numTargets <= 0) {
        return {};
    }
    var names = {};
    var ruleConfig = field.rules[ruleName];
    if (!Array.isArray(ruleConfig) && isObject(ruleConfig)) {
        ruleConfig = params.map(function (param) {
            return ruleConfig[param.name];
        });
    }
    for (var index = 0; index < params.length; index++) {
        var param = params[index];
        var key = ruleConfig[index];
        if (!isLocator(key)) {
            continue;
        }
        key = key.__locatorRef;
        var name_1 = field.names[key] || key;
        names[param.name] = name_1;
        names["_" + param.name + "_"] = field.crossTable[key];
    }
    return names;
}
function _getUserTargets(field, ruleSchema, ruleName, userMessage) {
    var userTargets = {};
    var rules = field.rules[ruleName];
    var params = ruleSchema.params || [];
    // early return if no rules
    if (!rules) {
        return {};
    }
    // check all rules to convert targets
    Object.keys(rules).forEach(function (key, index) {
        // get the rule
        var rule = rules[key];
        if (!isLocator(rule)) {
            return {};
        }
        // get associated parameter
        var param = params[index];
        if (!param) {
            return {};
        }
        // grab the name of the target
        var name = rule.__locatorRef;
        userTargets[param.name] = field.names[name] || name;
        userTargets["_" + param.name + "_"] = field.crossTable[name];
    });
    return {
        userTargets: userTargets,
        userMessage: userMessage
    };
}
function _normalizeMessage(template, field, values) {
    if (typeof template === 'function') {
        return template(field, values);
    }
    return interpolate(template, __assign(__assign({}, values), { _field_: field }));
}
function fillTargetValues(params, crossTable) {
    if (Array.isArray(params)) {
        return params;
    }
    var values = {};
    var normalize = function (value) {
        if (isLocator(value)) {
            return value(crossTable);
        }
        return value;
    };
    Object.keys(params).forEach(function (param) {
        values[param] = normalize(params[param]);
    });
    return values;
}

var aggressive = function () { return ({
    on: ['input', 'blur']
}); };
var lazy = function () { return ({
    on: ['change']
}); };
var eager = function (_a) {
    var errors = _a.errors;
    if (errors.length) {
        return {
            on: ['input', 'change']
        };
    }
    return {
        on: ['change', 'blur']
    };
};
var passive = function () { return ({
    on: []
}); };
var modes = {
    aggressive: aggressive,
    eager: eager,
    passive: passive,
    lazy: lazy
};
var setInteractionMode = function (mode, implementation) {
    setConfig({ mode: mode });
    if (!implementation) {
        return;
    }
    if (!isCallable(implementation)) {
        throw new Error('A mode implementation must be a function');
    }
    modes[mode] = implementation;
};

var EVENT_BUS = new vue__WEBPACK_IMPORTED_MODULE_0___default.a();
function localeChanged() {
    EVENT_BUS.$emit('change:locale');
}

var Dictionary = /** @class */ (function () {
    function Dictionary(locale, dictionary) {
        this.container = {};
        this.locale = locale;
        this.merge(dictionary);
    }
    Dictionary.prototype.resolve = function (field, rule, values) {
        return this.format(this.locale, field, rule, values);
    };
    Dictionary.prototype.format = function (locale, field, rule, values) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message;
        // find if specific message for that field was specified.
        message = ((_c = (_b = (_a = this.container[locale]) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c[rule]) || ((_e = (_d = this.container[locale]) === null || _d === void 0 ? void 0 : _d.messages) === null || _e === void 0 ? void 0 : _e[rule]);
        if (!message) {
            message = '{_field_} is not valid';
        }
        field = (_h = (_g = (_f = this.container[locale]) === null || _f === void 0 ? void 0 : _f.names) === null || _g === void 0 ? void 0 : _g[field]) !== null && _h !== void 0 ? _h : field;
        return isCallable(message) ? message(field, values) : interpolate(message, __assign(__assign({}, values), { _field_: field }));
    };
    Dictionary.prototype.merge = function (dictionary) {
        merge(this.container, dictionary);
    };
    Dictionary.prototype.hasRule = function (name) {
        var _a, _b;
        return !!((_b = (_a = this.container[this.locale]) === null || _a === void 0 ? void 0 : _a.messages) === null || _b === void 0 ? void 0 : _b[name]);
    };
    return Dictionary;
}());
var DICTIONARY;
function localize(locale, dictionary) {
    var _a;
    if (!DICTIONARY) {
        DICTIONARY = new Dictionary('en', {});
        setConfig({
            defaultMessage: function (field, values) {
                return DICTIONARY.resolve(field, values === null || values === void 0 ? void 0 : values._rule_, values || {});
            }
        });
    }
    if (typeof locale === 'string') {
        DICTIONARY.locale = locale;
        if (dictionary) {
            DICTIONARY.merge((_a = {}, _a[locale] = dictionary, _a));
        }
        localeChanged();
        return;
    }
    DICTIONARY.merge(locale);
}

var isEvent = function (evt) {
    if (!evt) {
        return false;
    }
    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {
        return true;
    }
    // this is for IE
    /* istanbul ignore next */
    if (evt && evt.srcElement) {
        return true;
    }
    return false;
};
function normalizeEventValue(value) {
    var _a, _b;
    if (!isEvent(value)) {
        return value;
    }
    var input = value.target;
    if (input.type === 'file' && input.files) {
        return toArray(input.files);
    }
    // If the input has a `v-model.number` modifier applied.
    if ((_a = input._vModifiers) === null || _a === void 0 ? void 0 : _a.number) {
        // as per the spec the v-model.number uses parseFloat
        var valueAsNumber = parseFloat(input.value);
        if (isNaN(valueAsNumber)) {
            return input.value;
        }
        return valueAsNumber;
    }
    if ((_b = input._vModifiers) === null || _b === void 0 ? void 0 : _b.trim) {
        var trimmedValue = typeof input.value === 'string' ? input.value.trim() : input.value;
        return trimmedValue;
    }
    return input.value;
}

var isTextInput = function (vnode) {
    var _a;
    var attrs = ((_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs) || vnode.elm;
    // it will fallback to being a text input per browsers spec.
    if (vnode.tag === 'input' && (!attrs || !attrs.type)) {
        return true;
    }
    if (vnode.tag === 'textarea') {
        return true;
    }
    return includes(['text', 'password', 'search', 'email', 'tel', 'url', 'number'], attrs === null || attrs === void 0 ? void 0 : attrs.type);
};
// export const isCheckboxOrRadioInput = (vnode: VNode): boolean => {
//   const attrs = (vnode.data && vnode.data.attrs) || vnode.elm;
//   return includes(['radio', 'checkbox'], attrs && attrs.type);
// };
// Gets the model object on the vnode.
function findModel(vnode) {
    if (!vnode.data) {
        return undefined;
    }
    // Component Model
    // THIS IS NOT TYPED IN OFFICIAL VUE TYPINGS
    // eslint-disable-next-line
    var nonStandardVNodeData = vnode.data;
    if ('model' in nonStandardVNodeData) {
        return nonStandardVNodeData.model;
    }
    if (!vnode.data.directives) {
        return undefined;
    }
    return find(vnode.data.directives, function (d) { return d.name === 'model'; });
}
function findValue(vnode) {
    var _a, _b;
    var model = findModel(vnode);
    if (model) {
        return { value: model.value };
    }
    var config = findModelConfig(vnode);
    var prop = (config === null || config === void 0 ? void 0 : config.prop) || 'value';
    if (((_a = vnode.componentOptions) === null || _a === void 0 ? void 0 : _a.propsData) && prop in vnode.componentOptions.propsData) {
        var propsDataWithValue = vnode.componentOptions.propsData;
        return { value: propsDataWithValue[prop] };
    }
    if (((_b = vnode.data) === null || _b === void 0 ? void 0 : _b.domProps) && 'value' in vnode.data.domProps) {
        return { value: vnode.data.domProps.value };
    }
    return undefined;
}
function extractChildren(vnode) {
    if (Array.isArray(vnode)) {
        return vnode;
    }
    if (Array.isArray(vnode.children)) {
        return vnode.children;
    }
    /* istanbul ignore next */
    if (vnode.componentOptions && Array.isArray(vnode.componentOptions.children)) {
        return vnode.componentOptions.children;
    }
    return [];
}
function findInputNode(vnode) {
    if (!Array.isArray(vnode) && findValue(vnode) !== undefined) {
        return vnode;
    }
    var children = extractChildren(vnode);
    return children.reduce(function (candidate, node) {
        if (candidate) {
            return candidate;
        }
        return findInputNode(node);
    }, null);
}
// Resolves v-model config if exists.
function findModelConfig(vnode) {
    /* istanbul ignore next */
    if (!vnode.componentOptions)
        return null;
    // This is also not typed in the standard Vue TS.
    return vnode.componentOptions.Ctor.options.model;
}
// Adds a listener to vnode listener object.
function mergeVNodeListeners(obj, eventName, handler) {
    // no listener at all.
    if (isNullOrUndefined(obj[eventName])) {
        obj[eventName] = [handler];
        return;
    }
    // Is an invoker.
    if (isCallable(obj[eventName]) && obj[eventName].fns) {
        var invoker = obj[eventName];
        invoker.fns = Array.isArray(invoker.fns) ? invoker.fns : [invoker.fns];
        if (!includes(invoker.fns, handler)) {
            invoker.fns.push(handler);
        }
        return;
    }
    if (isCallable(obj[eventName])) {
        var prev = obj[eventName];
        obj[eventName] = [prev];
    }
    if (Array.isArray(obj[eventName]) && !includes(obj[eventName], handler)) {
        obj[eventName].push(handler);
    }
}
// Adds a listener to a native HTML vnode.
function addNativeNodeListener(node, eventName, handler) {
    /* istanbul ignore next */
    if (!node.data) {
        node.data = {};
    }
    if (isNullOrUndefined(node.data.on)) {
        node.data.on = {};
    }
    mergeVNodeListeners(node.data.on, eventName, handler);
}
// Adds a listener to a Vue component vnode.
function addComponentNodeListener(node, eventName, handler) {
    /* istanbul ignore next */
    if (!node.componentOptions) {
        return;
    }
    /* istanbul ignore next */
    if (!node.componentOptions.listeners) {
        node.componentOptions.listeners = {};
    }
    mergeVNodeListeners(node.componentOptions.listeners, eventName, handler);
}
function addVNodeListener(vnode, eventName, handler) {
    if (vnode.componentOptions) {
        addComponentNodeListener(vnode, eventName, handler);
        return;
    }
    addNativeNodeListener(vnode, eventName, handler);
}
// Determines if `change` should be used over `input` for listeners.
function getInputEventName(vnode, model) {
    var _a;
    // Is a component.
    if (vnode.componentOptions) {
        var event_1 = (findModelConfig(vnode) || { event: 'input' }).event;
        return event_1;
    }
    // Lazy Models typically use change event
    if ((_a = model === null || model === void 0 ? void 0 : model.modifiers) === null || _a === void 0 ? void 0 : _a.lazy) {
        return 'change';
    }
    // is a textual-type input.
    if (isTextInput(vnode)) {
        return 'input';
    }
    return 'change';
}
function isHTMLNode(node) {
    return includes(['input', 'select', 'textarea'], node.tag);
}
// TODO: Type this one properly.
function normalizeSlots(slots, ctx) {
    var acc = [];
    return Object.keys(slots).reduce(function (arr, key) {
        slots[key].forEach(function (vnode) {
            if (!vnode.context) {
                slots[key].context = ctx;
                if (!vnode.data) {
                    vnode.data = {};
                }
                vnode.data.slot = key;
            }
        });
        return arr.concat(slots[key]);
    }, acc);
}
function resolveTextualRules(vnode) {
    var _a;
    var attrs = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs;
    var rules = {};
    if (!attrs)
        return rules;
    if (attrs.type === 'email' && RuleContainer.getRuleDefinition('email')) {
        rules.email = ['multiple' in attrs];
    }
    if (attrs.pattern && RuleContainer.getRuleDefinition('regex')) {
        rules.regex = attrs.pattern;
    }
    if (attrs.maxlength >= 0 && RuleContainer.getRuleDefinition('max')) {
        rules.max = attrs.maxlength;
    }
    if (attrs.minlength >= 0 && RuleContainer.getRuleDefinition('min')) {
        rules.min = attrs.minlength;
    }
    if (attrs.type === 'number') {
        if (isSpecified(attrs.min) && RuleContainer.getRuleDefinition('min_value')) {
            rules.min_value = Number(attrs.min);
        }
        if (isSpecified(attrs.max) && RuleContainer.getRuleDefinition('max_value')) {
            rules.max_value = Number(attrs.max);
        }
    }
    return rules;
}
function resolveRules(vnode) {
    var _a;
    var htmlTags = ['input', 'select', 'textarea'];
    var attrs = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs;
    if (!includes(htmlTags, vnode.tag) || !attrs) {
        return {};
    }
    var rules = {};
    if ('required' in attrs && attrs.required !== false && RuleContainer.getRuleDefinition('required')) {
        rules.required = attrs.type === 'checkbox' ? [true] : true;
    }
    if (isTextInput(vnode)) {
        return normalizeRules(__assign(__assign({}, rules), resolveTextualRules(vnode)));
    }
    return normalizeRules(rules);
}
function normalizeChildren(context, slotProps) {
    if (context.$scopedSlots.default) {
        return context.$scopedSlots.default(slotProps) || [];
    }
    return context.$slots.default || [];
}

/**
 * Determines if a provider needs to run validation.
 */
function shouldValidate(ctx, value) {
    // when an immediate/initial validation is needed and wasn't done before.
    if (!ctx._ignoreImmediate && ctx.immediate) {
        return true;
    }
    // when the value changes for whatever reason.
    if (ctx.value !== value && ctx.normalizedEvents.length) {
        return true;
    }
    // when it needs validation due to props/cross-fields changes.
    if (ctx._needsValidation) {
        return true;
    }
    // when the initial value is undefined and the field wasn't rendered yet.
    if (!ctx.initialized && value === undefined) {
        return true;
    }
    return false;
}
function createValidationCtx(ctx) {
    return __assign(__assign({}, ctx.flags), { errors: ctx.errors, classes: ctx.classes, failedRules: ctx.failedRules, reset: function () { return ctx.reset(); }, validate: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return ctx.validate.apply(ctx, args);
        }, ariaInput: {
            'aria-invalid': ctx.flags.invalid ? 'true' : 'false',
            'aria-required': ctx.isRequired ? 'true' : 'false',
            'aria-errormessage': "vee_" + ctx.id
        }, ariaMsg: {
            id: "vee_" + ctx.id,
            'aria-live': ctx.errors.length ? 'assertive' : 'off'
        } });
}
function onRenderUpdate(vm, value) {
    if (!vm.initialized) {
        vm.initialValue = value;
    }
    var validateNow = shouldValidate(vm, value);
    vm._needsValidation = false;
    vm.value = value;
    vm._ignoreImmediate = true;
    if (!validateNow) {
        return;
    }
    var validate = function () {
        if (vm.immediate || vm.flags.validated) {
            return triggerThreadSafeValidation(vm);
        }
        vm.validateSilent();
    };
    if (vm.initialized) {
        validate();
        return;
    }
    vm.$once('hook:mounted', function () { return validate(); });
}
function computeModeSetting(ctx) {
    var compute = (isCallable(ctx.mode) ? ctx.mode : modes[ctx.mode]);
    return compute(ctx);
}
function triggerThreadSafeValidation(vm) {
    var pendingPromise = vm.validateSilent();
    // avoids race conditions between successive validations.
    vm._pendingValidation = pendingPromise;
    return pendingPromise.then(function (result) {
        if (pendingPromise === vm._pendingValidation) {
            vm.applyResult(result);
            vm._pendingValidation = undefined;
        }
        return result;
    });
}
// Creates the common handlers for a validatable context.
function createCommonHandlers(vm) {
    if (!vm.$veeOnInput) {
        vm.$veeOnInput = function (e) {
            vm.syncValue(e); // track and keep the value updated.
            vm.setFlags({ dirty: true, pristine: false });
        };
    }
    var onInput = vm.$veeOnInput;
    if (!vm.$veeOnBlur) {
        vm.$veeOnBlur = function () {
            vm.setFlags({ touched: true, untouched: false });
        };
    }
    // Blur event listener.
    var onBlur = vm.$veeOnBlur;
    var onValidate = vm.$veeHandler;
    var mode = computeModeSetting(vm);
    // Handle debounce changes.
    if (!onValidate || vm.$veeDebounce !== vm.debounce) {
        onValidate = debounce(function () {
            vm.$nextTick(function () {
                if (!vm._pendingReset) {
                    triggerThreadSafeValidation(vm);
                }
                vm._pendingReset = false;
            });
        }, mode.debounce || vm.debounce);
        // Cache the handler so we don't create it each time.
        vm.$veeHandler = onValidate;
        // cache the debounce value so we detect if it was changed.
        vm.$veeDebounce = vm.debounce;
    }
    return { onInput: onInput, onBlur: onBlur, onValidate: onValidate };
}
// Adds all plugin listeners to the vnode.
function addListeners(vm, node) {
    var value = findValue(node);
    // cache the input eventName.
    vm._inputEventName = vm._inputEventName || getInputEventName(node, findModel(node));
    onRenderUpdate(vm, value === null || value === void 0 ? void 0 : value.value);
    var _a = createCommonHandlers(vm), onInput = _a.onInput, onBlur = _a.onBlur, onValidate = _a.onValidate;
    addVNodeListener(node, vm._inputEventName, onInput);
    addVNodeListener(node, 'blur', onBlur);
    // add the validation listeners.
    vm.normalizedEvents.forEach(function (evt) {
        addVNodeListener(node, evt, onValidate);
    });
    vm.initialized = true;
}

var PROVIDER_COUNTER = 0;
function data() {
    var errors = [];
    var fieldName = '';
    var defaultValues = {
        errors: errors,
        value: undefined,
        initialized: false,
        initialValue: undefined,
        flags: createFlags(),
        failedRules: {},
        isActive: true,
        fieldName: fieldName,
        id: ''
    };
    return defaultValues;
}
var ValidationProvider = vue__WEBPACK_IMPORTED_MODULE_0___default.a.extend({
    inject: {
        $_veeObserver: {
            from: '$_veeObserver',
            default: function () {
                if (!this.$vnode.context.$_veeObserver) {
                    this.$vnode.context.$_veeObserver = createObserver();
                }
                return this.$vnode.context.$_veeObserver;
            }
        }
    },
    props: {
        vid: {
            type: String,
            default: ''
        },
        name: {
            type: String,
            default: null
        },
        mode: {
            type: [String, Function],
            default: function () {
                return getConfig().mode;
            }
        },
        rules: {
            type: [Object, String],
            default: null
        },
        immediate: {
            type: Boolean,
            default: false
        },
        bails: {
            type: Boolean,
            default: function () { return getConfig().bails; }
        },
        skipIfEmpty: {
            type: Boolean,
            default: function () { return getConfig().skipOptional; }
        },
        debounce: {
            type: Number,
            default: 0
        },
        tag: {
            type: String,
            default: 'span'
        },
        slim: {
            type: Boolean,
            default: false
        },
        disabled: {
            type: Boolean,
            default: false
        },
        customMessages: {
            type: Object,
            default: function () {
                return {};
            }
        }
    },
    watch: {
        rules: {
            deep: true,
            handler: function (val, oldVal) {
                this._needsValidation = !isEqual(val, oldVal);
            }
        }
    },
    data: data,
    computed: {
        fieldDeps: function () {
            var _this = this;
            return Object.keys(this.normalizedRules).reduce(function (acc, rule) {
                var deps = extractLocators(_this.normalizedRules[rule]).map(function (dep) { return dep.__locatorRef; });
                acc.push.apply(acc, deps);
                deps.forEach(function (depName) {
                    watchCrossFieldDep(_this, depName);
                });
                return acc;
            }, []);
        },
        normalizedEvents: function () {
            var _this = this;
            var on = computeModeSetting(this).on;
            return (on || []).map(function (e) {
                if (e === 'input') {
                    return _this._inputEventName;
                }
                return e;
            });
        },
        isRequired: function () {
            var rules = __assign(__assign({}, this._resolvedRules), this.normalizedRules);
            var isRequired = Object.keys(rules).some(RuleContainer.isRequireRule);
            this.flags.required = !!isRequired;
            return isRequired;
        },
        classes: function () {
            var names = getConfig().classes;
            return computeClassObj(names, this.flags);
        },
        normalizedRules: function () {
            return normalizeRules(this.rules);
        }
    },
    mounted: function () {
        var _this = this;
        var onLocaleChanged = function () {
            if (!_this.flags.validated) {
                return;
            }
            var regenerateMap = _this._regenerateMap;
            if (regenerateMap) {
                var errors_1 = [];
                var failedRules_1 = {};
                Object.keys(regenerateMap).forEach(function (rule) {
                    var msg = regenerateMap[rule]();
                    errors_1.push(msg);
                    failedRules_1[rule] = msg;
                });
                _this.applyResult({ errors: errors_1, failedRules: failedRules_1, regenerateMap: regenerateMap });
                return;
            }
            _this.validate();
        };
        EVENT_BUS.$on('change:locale', onLocaleChanged);
        this.$on('hook:beforeDestroy', function () {
            EVENT_BUS.$off('change:locale', onLocaleChanged);
        });
    },
    render: function (h) {
        var _a, _b, _c, _d;
        this.registerField();
        var ctx = createValidationCtx(this);
        var children = normalizeChildren(this, ctx);
        var input = findInputNode(children);
        if (!input) {
            // Silent exit if no input was found.
            return this.slim && children.length <= 1 ? children[0] : h(this.tag, children);
        }
        var resolved = getConfig().useConstraintAttrs ? resolveRules(input) : {};
        if (!isEqual(this._resolvedRules, resolved)) {
            this._needsValidation = true;
        }
        if (isHTMLNode(input)) {
            this.fieldName = ((_b = (_a = input.data) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b.name) || ((_d = (_c = input.data) === null || _c === void 0 ? void 0 : _c.attrs) === null || _d === void 0 ? void 0 : _d.id);
        }
        this._resolvedRules = resolved;
        addListeners(this, input);
        return this.slim && children.length <= 1 ? children[0] : h(this.tag, children);
    },
    beforeDestroy: function () {
        // cleanup reference.
        this.$_veeObserver.unobserve(this.id);
    },
    activated: function () {
        this.isActive = true;
    },
    deactivated: function () {
        this.isActive = false;
    },
    methods: {
        setFlags: function (flags) {
            var _this = this;
            Object.keys(flags).forEach(function (flag) {
                _this.flags[flag] = flags[flag];
            });
        },
        syncValue: function (v) {
            var value = normalizeEventValue(v);
            this.value = value;
            this.flags.changed = this.initialValue !== value;
        },
        reset: function () {
            var _this = this;
            this.errors = [];
            this.initialValue = this.value;
            var flags = createFlags();
            flags.required = this.isRequired;
            this.setFlags(flags);
            this.failedRules = {};
            this.validateSilent();
            this._pendingValidation = undefined;
            this._pendingReset = true;
            setTimeout(function () {
                _this._pendingReset = false;
            }, this.debounce);
        },
        validate: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (args.length > 0) {
                        this.syncValue(args[0]);
                    }
                    return [2 /*return*/, triggerThreadSafeValidation(this)];
                });
            });
        },
        validateSilent: function () {
            return __awaiter(this, void 0, void 0, function () {
                var rules, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.setFlags({ pending: true });
                            rules = __assign(__assign({}, this._resolvedRules), this.normalizedRules);
                            Object.defineProperty(rules, '_$$isNormalized', {
                                value: true,
                                writable: false,
                                enumerable: false,
                                configurable: false
                            });
                            return [4 /*yield*/, validate(this.value, rules, __assign(__assign({ name: this.name || this.fieldName }, createLookup(this)), { bails: this.bails, skipIfEmpty: this.skipIfEmpty, isInitial: !this.initialized, customMessages: this.customMessages }))];
                        case 1:
                            result = _a.sent();
                            this.setFlags({
                                pending: false,
                                valid: result.valid,
                                invalid: !result.valid
                            });
                            return [2 /*return*/, result];
                    }
                });
            });
        },
        setErrors: function (errors) {
            this.applyResult({ errors: errors, failedRules: {} });
        },
        applyResult: function (_a) {
            var errors = _a.errors, failedRules = _a.failedRules, regenerateMap = _a.regenerateMap;
            this.errors = errors;
            this._regenerateMap = regenerateMap;
            this.failedRules = __assign({}, (failedRules || {}));
            this.setFlags({
                valid: !errors.length,
                passed: !errors.length,
                invalid: !!errors.length,
                failed: !!errors.length,
                validated: true,
                changed: this.value !== this.initialValue
            });
        },
        registerField: function () {
            updateRenderingContextRefs(this);
        }
    }
});
function computeClassObj(names, flags) {
    var acc = {};
    var keys = Object.keys(flags);
    var length = keys.length;
    var _loop_1 = function (i) {
        var flag = keys[i];
        var className = (names && names[flag]) || flag;
        var value = flags[flag];
        if (isNullOrUndefined(value)) {
            return "continue";
        }
        if ((flag === 'valid' || flag === 'invalid') && !flags.validated) {
            return "continue";
        }
        if (typeof className === 'string') {
            acc[className] = value;
        }
        else if (Array.isArray(className)) {
            className.forEach(function (cls) {
                acc[cls] = value;
            });
        }
    };
    for (var i = 0; i < length; i++) {
        _loop_1(i);
    }
    return acc;
}
function createLookup(vm) {
    var providers = vm.$_veeObserver.refs;
    var reduced = {
        names: {},
        values: {}
    };
    return vm.fieldDeps.reduce(function (acc, depName) {
        if (!providers[depName]) {
            return acc;
        }
        acc.values[depName] = providers[depName].value;
        acc.names[depName] = providers[depName].name;
        return acc;
    }, reduced);
}
function extractId(vm) {
    if (vm.vid) {
        return vm.vid;
    }
    if (vm.name) {
        return vm.name;
    }
    if (vm.id) {
        return vm.id;
    }
    if (vm.fieldName) {
        return vm.fieldName;
    }
    PROVIDER_COUNTER++;
    return "_vee_" + PROVIDER_COUNTER;
}
function updateRenderingContextRefs(vm) {
    var providedId = extractId(vm);
    var id = vm.id;
    // Nothing has changed.
    if (!vm.isActive || (id === providedId && vm.$_veeObserver.refs[id])) {
        return;
    }
    // vid was changed.
    if (id !== providedId && vm.$_veeObserver.refs[id] === vm) {
        vm.$_veeObserver.unobserve(id);
    }
    vm.id = providedId;
    vm.$_veeObserver.observe(vm);
}
function createObserver() {
    return {
        refs: {},
        observe: function (vm) {
            this.refs[vm.id] = vm;
        },
        unobserve: function (id) {
            delete this.refs[id];
        }
    };
}
function watchCrossFieldDep(ctx, depName, withHooks) {
    if (withHooks === void 0) { withHooks = true; }
    var providers = ctx.$_veeObserver.refs;
    if (!ctx._veeWatchers) {
        ctx._veeWatchers = {};
    }
    if (!providers[depName] && withHooks) {
        return ctx.$once('hook:mounted', function () {
            watchCrossFieldDep(ctx, depName, false);
        });
    }
    if (!isCallable(ctx._veeWatchers[depName]) && providers[depName]) {
        ctx._veeWatchers[depName] = providers[depName].$watch('value', function () {
            if (ctx.flags.validated) {
                ctx._needsValidation = true;
                ctx.validate();
            }
        });
    }
}

var FLAGS_STRATEGIES = [
    ['pristine', 'every'],
    ['dirty', 'some'],
    ['touched', 'some'],
    ['untouched', 'every'],
    ['valid', 'every'],
    ['invalid', 'some'],
    ['pending', 'some'],
    ['validated', 'every'],
    ['changed', 'some'],
    ['passed', 'every'],
    ['failed', 'some']
];
var OBSERVER_COUNTER = 0;
function data$1() {
    var refs = {};
    var errors = {};
    var flags = createObserverFlags();
    var fields = {};
    // FIXME: Not sure of this one can be typed, circular type reference.
    var observers = [];
    return {
        id: '',
        refs: refs,
        observers: observers,
        errors: errors,
        flags: flags,
        fields: fields
    };
}
function provideSelf() {
    return {
        $_veeObserver: this
    };
}
var ValidationObserver = vue__WEBPACK_IMPORTED_MODULE_0___default.a.extend({
    name: 'ValidationObserver',
    provide: provideSelf,
    inject: {
        $_veeObserver: {
            from: '$_veeObserver',
            default: function () {
                if (!this.$vnode.context.$_veeObserver) {
                    return null;
                }
                return this.$vnode.context.$_veeObserver;
            }
        }
    },
    props: {
        tag: {
            type: String,
            default: 'span'
        },
        vid: {
            type: String,
            default: function () {
                return "obs_" + OBSERVER_COUNTER++;
            }
        },
        slim: {
            type: Boolean,
            default: false
        },
        disabled: {
            type: Boolean,
            default: false
        }
    },
    data: data$1,
    created: function () {
        var _this = this;
        this.id = this.vid;
        register(this);
        var onChange = debounce(function (_a) {
            var errors = _a.errors, flags = _a.flags, fields = _a.fields;
            _this.errors = errors;
            _this.flags = flags;
            _this.fields = fields;
        }, 16);
        this.$watch(computeObserverState, onChange);
    },
    activated: function () {
        register(this);
    },
    deactivated: function () {
        unregister(this);
    },
    beforeDestroy: function () {
        unregister(this);
    },
    render: function (h) {
        var children = normalizeChildren(this, prepareSlotProps(this));
        return this.slim && children.length <= 1 ? children[0] : h(this.tag, { on: this.$listeners }, children);
    },
    methods: {
        observe: function (subscriber, kind) {
            var _a;
            if (kind === void 0) { kind = 'provider'; }
            if (kind === 'observer') {
                this.observers.push(subscriber);
                return;
            }
            this.refs = __assign(__assign({}, this.refs), (_a = {}, _a[subscriber.id] = subscriber, _a));
        },
        unobserve: function (id, kind) {
            if (kind === void 0) { kind = 'provider'; }
            if (kind === 'provider') {
                var provider = this.refs[id];
                if (!provider) {
                    return;
                }
                this.$delete(this.refs, id);
                return;
            }
            var idx = findIndex(this.observers, function (o) { return o.id === id; });
            if (idx !== -1) {
                this.observers.splice(idx, 1);
            }
        },
        validate: function (_a) {
            var _b = (_a === void 0 ? {} : _a).silent, silent = _b === void 0 ? false : _b;
            return __awaiter(this, void 0, void 0, function () {
                var results;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, Promise.all(__spreadArrays(values(this.refs)
                                .filter(function (r) { return !r.disabled; })
                                .map(function (ref) { return ref[silent ? 'validateSilent' : 'validate']().then(function (r) { return r.valid; }); }), this.observers.filter(function (o) { return !o.disabled; }).map(function (obs) { return obs.validate({ silent: silent }); })))];
                        case 1:
                            results = _c.sent();
                            return [2 /*return*/, results.every(function (r) { return r; })];
                    }
                });
            });
        },
        handleSubmit: function (cb) {
            return __awaiter(this, void 0, void 0, function () {
                var isValid;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validate()];
                        case 1:
                            isValid = _a.sent();
                            if (!isValid || !cb) {
                                return [2 /*return*/];
                            }
                            return [2 /*return*/, cb()];
                    }
                });
            });
        },
        reset: function () {
            return __spreadArrays(values(this.refs), this.observers).forEach(function (ref) { return ref.reset(); });
        },
        setErrors: function (errors) {
            var _this = this;
            Object.keys(errors).forEach(function (key) {
                var provider = _this.refs[key];
                if (!provider)
                    return;
                var errorArr = errors[key] || [];
                errorArr = typeof errorArr === 'string' ? [errorArr] : errorArr;
                provider.setErrors(errorArr);
            });
            this.observers.forEach(function (observer) {
                observer.setErrors(errors);
            });
        }
    }
});
function unregister(vm) {
    if (vm.$_veeObserver) {
        vm.$_veeObserver.unobserve(vm.id, 'observer');
    }
}
function register(vm) {
    if (vm.$_veeObserver) {
        vm.$_veeObserver.observe(vm, 'observer');
    }
}
function prepareSlotProps(vm) {
    return __assign(__assign({}, vm.flags), { errors: vm.errors, fields: vm.fields, validate: vm.validate, passes: vm.handleSubmit, handleSubmit: vm.handleSubmit, reset: vm.reset });
}
// Creates a modified version of validation flags
function createObserverFlags() {
    return __assign(__assign({}, createFlags()), { valid: true, invalid: false });
}
function computeObserverState() {
    var vms = __spreadArrays(values(this.refs), this.observers);
    var errors = {};
    var flags = createObserverFlags();
    var fields = {};
    var length = vms.length;
    for (var i = 0; i < length; i++) {
        var vm = vms[i];
        // validation provider
        if (Array.isArray(vm.errors)) {
            errors[vm.id] = vm.errors;
            fields[vm.id] = __assign({ id: vm.id, name: vm.name, failedRules: vm.failedRules }, vm.flags);
            continue;
        }
        // Nested observer, merge errors and fields
        errors = __assign(__assign({}, errors), vm.errors);
        fields = __assign(__assign({}, fields), vm.fields);
    }
    FLAGS_STRATEGIES.forEach(function (_a) {
        var flag = _a[0], method = _a[1];
        flags[flag] = vms[method](function (vm) { return vm.flags[flag]; });
    });
    return { errors: errors, flags: flags, fields: fields };
}

function withValidation(component, mapProps) {
    if (mapProps === void 0) { mapProps = identity; }
    var _a;
    var options = 'options' in component ? component.options : component;
    var providerOpts = ValidationProvider.options;
    var hoc = {
        name: (options.name || 'AnonymousHoc') + "WithValidation",
        props: __assign({}, providerOpts.props),
        data: providerOpts.data,
        computed: __assign({}, providerOpts.computed),
        methods: __assign({}, providerOpts.methods),
        beforeDestroy: providerOpts.beforeDestroy,
        inject: providerOpts.inject
    };
    var eventName = ((_a = options === null || options === void 0 ? void 0 : options.model) === null || _a === void 0 ? void 0 : _a.event) || 'input';
    hoc.render = function (h) {
        var _a;
        this.registerField();
        var vctx = createValidationCtx(this);
        var listeners = __assign({}, this.$listeners);
        var model = findModel(this.$vnode);
        this._inputEventName = this._inputEventName || getInputEventName(this.$vnode, model);
        var value = findValue(this.$vnode);
        onRenderUpdate(this, value === null || value === void 0 ? void 0 : value.value);
        var _b = createCommonHandlers(this), onInput = _b.onInput, onBlur = _b.onBlur, onValidate = _b.onValidate;
        mergeVNodeListeners(listeners, eventName, onInput);
        mergeVNodeListeners(listeners, 'blur', onBlur);
        this.normalizedEvents.forEach(function (evt) {
            mergeVNodeListeners(listeners, evt, onValidate);
        });
        // Props are any attrs not associated with ValidationProvider Plus the model prop.
        // WARNING: Accidental prop overwrite will probably happen.
        var prop = (findModelConfig(this.$vnode) || { prop: 'value' }).prop;
        var props = __assign(__assign(__assign({}, this.$attrs), (_a = {}, _a[prop] = model === null || model === void 0 ? void 0 : model.value, _a)), mapProps(vctx));
        return h(options, {
            attrs: this.$attrs,
            props: props,
            on: listeners
        }, normalizeSlots(this.$slots, this.$vnode.context));
    };
    return hoc;
}

var version = '3.3.0';




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9DOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3ZlZS12YWxpZGF0ZUAzLjMuMF92dWVAMi43LjE1L25vZGVfbW9kdWxlcy92ZWUtdmFsaWRhdGUvZGlzdC9ydWxlcy5qcyIsIndlYnBhY2s6Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9DOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3ZlZS12YWxpZGF0ZUAzLjMuMF92dWVAMi43LjE1L25vZGVfbW9kdWxlcy92ZWUtdmFsaWRhdGUvZGlzdC92ZWUtdmFsaWRhdGUuZXNtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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RCx3QkFBd0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBOztBQUVxSyIsImZpbGUiOiJucG0udmVlLXZhbGlkYXRlMy4zLjBfdnVlQDIuNy4xNS43MWQ3MmZkODU3NTIzMzNiNDkwZi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAqIHZlZS12YWxpZGF0ZSB2My4zLjBcbiAgKiAoYykgMjAyMCBBYmRlbHJhaG1hbiBBd2FkXG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4vKipcclxuICogU29tZSBBbHBoYSBSZWdleCBoZWxwZXJzLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNvL3ZhbGlkYXRvci5qcy9ibG9iL21hc3Rlci9zcmMvbGliL2FscGhhLmpzXHJcbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1taXNsZWFkaW5nLWNoYXJhY3Rlci1jbGFzcyAqL1xyXG52YXIgYWxwaGEgPSB7XHJcbiAgICBlbjogL15bQS1aXSokL2ksXHJcbiAgICBjczogL15bQS1aw4HEjMSOw4nEmsONxYfDk8WYxaDFpMOaxa7DncW9XSokL2ksXHJcbiAgICBkYTogL15bQS1aw4bDmMOFXSokL2ksXHJcbiAgICBkZTogL15bQS1aw4TDlsOcw59dKiQvaSxcclxuICAgIGVzOiAvXltBLVrDgcOJw43DkcOTw5rDnF0qJC9pLFxyXG4gICAgZmE6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsNm+2pjar9qG2qnbjF0qJC8sXHJcbiAgICBmcjogL15bQS1aw4DDgsOGw4fDicOIw4rDi8OPw47DlMWSw5nDm8OcxbhdKiQvaSxcclxuICAgIGl0OiAvXltBLVpcXHhDMC1cXHhGRl0qJC9pLFxyXG4gICAgbHQ6IC9eW0EtWsSExIzEmMSWxK7FoMWyxarFvV0qJC9pLFxyXG4gICAgbmw6IC9eW0EtWsOJw4vDj8OTw5bDnF0qJC9pLFxyXG4gICAgaHU6IC9eW0EtWsOBw4nDjcOTw5bFkMOaw5zFsF0qJC9pLFxyXG4gICAgcGw6IC9eW0EtWsSExIbEmMWaxYHFg8OTxbvFuV0qJC9pLFxyXG4gICAgcHQ6IC9eW0EtWsODw4HDgMOCw4fDicOKw43DlcOTw5TDmsOcXSokL2ksXHJcbiAgICBydTogL15b0JAt0K/QgV0qJC9pLFxyXG4gICAgc2s6IC9eW0EtWsOBw4TEjMSOw4nDjcS5xL3Fh8OTxZTFoMWkw5rDncW9XSokL2ksXHJcbiAgICBzcjogL15bQS1axIzEhsW9xaDEkF0qJC9pLFxyXG4gICAgc3Y6IC9eW0EtWsOFw4TDll0qJC9pLFxyXG4gICAgdHI6IC9eW0EtWsOHxJ7EsMSxw5bFnsOcXSokL2ksXHJcbiAgICB1azogL15b0JAt0KnQrNCu0K/QhNCG0IfSkF0qJC9pLFxyXG4gICAgYXI6IC9eW9ih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0qJC8sXHJcbiAgICBhejogL15bQS1aw4fGj8SexLDEscOWxZ7DnF0qJC9pXHJcbn07XHJcbnZhciBhbHBoYVNwYWNlcyA9IHtcclxuICAgIGVuOiAvXltBLVpcXHNdKiQvaSxcclxuICAgIGNzOiAvXltBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1cXHNdKiQvaSxcclxuICAgIGRhOiAvXltBLVrDhsOYw4VcXHNdKiQvaSxcclxuICAgIGRlOiAvXltBLVrDhMOWw5zDn1xcc10qJC9pLFxyXG4gICAgZXM6IC9eW0EtWsOBw4nDjcORw5PDmsOcXFxzXSokL2ksXHJcbiAgICBmYTogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmw2b7amNqv2obaqduMXSokLyxcclxuICAgIGZyOiAvXltBLVrDgMOCw4bDh8OJw4jDisOLw4/DjsOUxZLDmcObw5zFuFxcc10qJC9pLFxyXG4gICAgaXQ6IC9eW0EtWlxceEMwLVxceEZGXFxzXSokL2ksXHJcbiAgICBsdDogL15bQS1axITEjMSYxJbErsWgxbLFqsW9XFxzXSokL2ksXHJcbiAgICBubDogL15bQS1aw4nDi8OPw5PDlsOcXFxzXSokL2ksXHJcbiAgICBodTogL15bQS1aw4HDicONw5PDlsWQw5rDnMWwXFxzXSokL2ksXHJcbiAgICBwbDogL15bQS1axITEhsSYxZrFgcWDw5PFu8W5XFxzXSokL2ksXHJcbiAgICBwdDogL15bQS1aw4PDgcOAw4LDh8OJw4rDjcOVw5PDlMOaw5xcXHNdKiQvaSxcclxuICAgIHJ1OiAvXlvQkC3Qr9CBXFxzXSokL2ksXHJcbiAgICBzazogL15bQS1aw4HDhMSMxI7DicONxLnEvcWHw5PFlMWgxaTDmsOdxb1cXHNdKiQvaSxcclxuICAgIHNyOiAvXltBLVrEjMSGxb3FoMSQXFxzXSokL2ksXHJcbiAgICBzdjogL15bQS1aw4XDhMOWXFxzXSokL2ksXHJcbiAgICB0cjogL15bQS1aw4fEnsSwxLHDlsWew5xcXHNdKiQvaSxcclxuICAgIHVrOiAvXlvQkC3QqdCs0K7Qr9CE0IbQh9KQXFxzXSokL2ksXHJcbiAgICBhcjogL15b2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmwXFxzXSokLyxcclxuICAgIGF6OiAvXltBLVrDh8aPxJ7EsMSxw5bFnsOcXFxzXSokL2lcclxufTtcclxudmFyIGFscGhhbnVtZXJpYyA9IHtcclxuICAgIGVuOiAvXlswLTlBLVpdKiQvaSxcclxuICAgIGNzOiAvXlswLTlBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1dKiQvaSxcclxuICAgIGRhOiAvXlswLTlBLVrDhsOYw4VdJC9pLFxyXG4gICAgZGU6IC9eWzAtOUEtWsOEw5bDnMOfXSokL2ksXHJcbiAgICBlczogL15bMC05QS1aw4HDicONw5HDk8Oaw5xdKiQvaSxcclxuICAgIGZhOiAvXlvYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtti32LjYudi62YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS2bDZvtqY2q/ahtqp24xdKiQvLFxyXG4gICAgZnI6IC9eWzAtOUEtWsOAw4LDhsOHw4nDiMOKw4vDj8OOw5TFksOZw5vDnMW4XSokL2ksXHJcbiAgICBpdDogL15bMC05QS1aXFx4QzAtXFx4RkZdKiQvaSxcclxuICAgIGx0OiAvXlswLTlBLVrEhMSMxJjElsSuxaDFssWqxb1dKiQvaSxcclxuICAgIGh1OiAvXlswLTlBLVrDgcOJw43Dk8OWxZDDmsOcxbBdKiQvaSxcclxuICAgIG5sOiAvXlswLTlBLVrDicOLw4/Dk8OWw5xdKiQvaSxcclxuICAgIHBsOiAvXlswLTlBLVrEhMSGxJjFmsWBxYPDk8W7xbldKiQvaSxcclxuICAgIHB0OiAvXlswLTlBLVrDg8OBw4DDgsOHw4nDisONw5XDk8OUw5rDnF0qJC9pLFxyXG4gICAgcnU6IC9eWzAtOdCQLdCv0IFdKiQvaSxcclxuICAgIHNrOiAvXlswLTlBLVrDgcOExIzEjsOJw43EucS9xYfDk8WUxaDFpMOaw53FvV0qJC9pLFxyXG4gICAgc3I6IC9eWzAtOUEtWsSMxIbFvcWgxJBdKiQvaSxcclxuICAgIHN2OiAvXlswLTlBLVrDhcOEw5ZdKiQvaSxcclxuICAgIHRyOiAvXlswLTlBLVrDh8SexLDEscOWxZ7DnF0qJC9pLFxyXG4gICAgdWs6IC9eWzAtOdCQLdCp0KzQrtCv0ITQhtCH0pBdKiQvaSxcclxuICAgIGFyOiAvXlvZoNmh2aLZo9mk2aXZptmn2ajZqTAtOdih2KLYo9ik2KXYptin2KjYqdiq2KvYrNit2K7Yr9iw2LHYstiz2LTYtdi22LfYuNi52LrZgdmC2YPZhNmF2YbZh9mI2YnZitmL2YzZjdmO2Y/ZkNmR2ZLZsF0qJC8sXHJcbiAgICBhejogL15bMC05QS1aw4fGj8SexLDEscOWxZ7DnF0qJC9pXHJcbn07XHJcbnZhciBhbHBoYURhc2ggPSB7XHJcbiAgICBlbjogL15bMC05QS1aXy1dKiQvaSxcclxuICAgIGNzOiAvXlswLTlBLVrDgcSMxI7DicSaw43Fh8OTxZjFoMWkw5rFrsOdxb1fLV0qJC9pLFxyXG4gICAgZGE6IC9eWzAtOUEtWsOGw5jDhV8tXSokL2ksXHJcbiAgICBkZTogL15bMC05QS1aw4TDlsOcw59fLV0qJC9pLFxyXG4gICAgZXM6IC9eWzAtOUEtWsOBw4nDjcORw5PDmsOcXy1dKiQvaSxcclxuICAgIGZhOiAvXlvYodii2KPYpNil2KbYp9io2KnYqtir2KzYrdiu2K/YsNix2LLYs9i02LXYtti32LjYudi62YHZgtmD2YTZhdmG2YfZiNmJ2YrZi9mM2Y3ZjtmP2ZDZkdmS2bDZvtqY2q/ahtqp24xdKiQvLFxyXG4gICAgZnI6IC9eWzAtOUEtWsOAw4LDhsOHw4nDiMOKw4vDj8OOw5TFksOZw5vDnMW4Xy1dKiQvaSxcclxuICAgIGl0OiAvXlswLTlBLVpcXHhDMC1cXHhGRl8tXSokL2ksXHJcbiAgICBsdDogL15bMC05QS1axITEjMSYxJbErsWgxbLFqsW9Xy1dKiQvaSxcclxuICAgIG5sOiAvXlswLTlBLVrDicOLw4/Dk8OWw5xfLV0qJC9pLFxyXG4gICAgaHU6IC9eWzAtOUEtWsOBw4nDjcOTw5bFkMOaw5zFsF8tXSokL2ksXHJcbiAgICBwbDogL15bMC05QS1axITEhsSYxZrFgcWDw5PFu8W5Xy1dKiQvaSxcclxuICAgIHB0OiAvXlswLTlBLVrDg8OBw4DDgsOHw4nDisONw5XDk8OUw5rDnF8tXSokL2ksXHJcbiAgICBydTogL15bMC050JAt0K/QgV8tXSokL2ksXHJcbiAgICBzazogL15bMC05QS1aw4HDhMSMxI7DicONxLnEvcWHw5PFlMWgxaTDmsOdxb1fLV0qJC9pLFxyXG4gICAgc3I6IC9eWzAtOUEtWsSMxIbFvcWgxJBfLV0qJC9pLFxyXG4gICAgc3Y6IC9eWzAtOUEtWsOFw4TDll8tXSokL2ksXHJcbiAgICB0cjogL15bMC05QS1aw4fEnsSwxLHDlsWew5xfLV0qJC9pLFxyXG4gICAgdWs6IC9eWzAtOdCQLdCp0KzQrtCv0ITQhtCH0pBfLV0qJC9pLFxyXG4gICAgYXI6IC9eW9mg2aHZotmj2aTZpdmm2afZqNmpMC052KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbYt9i42LnYutmB2YLZg9mE2YXZhtmH2YjZidmK2YvZjNmN2Y7Zj9mQ2ZHZktmwXy1dKiQvLFxyXG4gICAgYXo6IC9eWzAtOUEtWsOHxo/EnsSwxLHDlsWew5xfLV0qJC9pXHJcbn07XG5cbnZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkubG9jYWxlLCBsb2NhbGUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYjtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSh2YWwsIHsgbG9jYWxlOiBsb2NhbGUgfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWF0Y2ggYXQgbGVhc3Qgb25lIGxvY2FsZS5cclxuICAgIGlmICghbG9jYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFscGhhKS5zb21lKGZ1bmN0aW9uIChsb2MpIHsgcmV0dXJuIGFscGhhW2xvY10udGVzdCh2YWx1ZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhbHBoYVtsb2NhbGVdIHx8IGFscGhhLmVuKS50ZXN0KHZhbHVlKTtcclxufTtcclxudmFyIHBhcmFtcyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGEkMSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSxcclxuICAgIHBhcmFtczogcGFyYW1zXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQxID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5sb2NhbGUsIGxvY2FsZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDEodmFsLCB7IGxvY2FsZTogbG9jYWxlIH0pOyB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hdGNoIGF0IGxlYXN0IG9uZSBsb2NhbGUuXHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhbHBoYURhc2gpLnNvbWUoZnVuY3Rpb24gKGxvYykgeyByZXR1cm4gYWxwaGFEYXNoW2xvY10udGVzdCh2YWx1ZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhbHBoYURhc2hbbG9jYWxlXSB8fCBhbHBoYURhc2guZW4pLnRlc3QodmFsdWUpO1xyXG59O1xyXG52YXIgcGFyYW1zJDEgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xvY2FsZSdcclxuICAgIH1cclxuXTtcclxudmFyIGFscGhhX2Rhc2ggPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkMSxcclxuICAgIHBhcmFtczogcGFyYW1zJDFcclxufTtcblxudmFyIHZhbGlkYXRlJDIgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLmxvY2FsZSwgbG9jYWxlID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkMih2YWwsIHsgbG9jYWxlOiBsb2NhbGUgfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWF0Y2ggYXQgbGVhc3Qgb25lIGxvY2FsZS5cclxuICAgIGlmICghbG9jYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFscGhhbnVtZXJpYykuc29tZShmdW5jdGlvbiAobG9jKSB7IHJldHVybiBhbHBoYW51bWVyaWNbbG9jXS50ZXN0KHZhbHVlKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGFscGhhbnVtZXJpY1tsb2NhbGVdIHx8IGFscGhhbnVtZXJpYy5lbikudGVzdCh2YWx1ZSk7XHJcbn07XHJcbnZhciBwYXJhbXMkMiA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGFfbnVtID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDIsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQyXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQzID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5sb2NhbGUsIGxvY2FsZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDModmFsLCB7IGxvY2FsZTogbG9jYWxlIH0pOyB9KTtcclxuICAgIH1cclxuICAgIC8vIE1hdGNoIGF0IGxlYXN0IG9uZSBsb2NhbGUuXHJcbiAgICBpZiAoIWxvY2FsZSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhbHBoYVNwYWNlcykuc29tZShmdW5jdGlvbiAobG9jKSB7IHJldHVybiBhbHBoYVNwYWNlc1tsb2NdLnRlc3QodmFsdWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoYWxwaGFTcGFjZXNbbG9jYWxlXSB8fCBhbHBoYVNwYWNlcy5lbikudGVzdCh2YWx1ZSk7XHJcbn07XHJcbnZhciBwYXJhbXMkMyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbG9jYWxlJ1xyXG4gICAgfVxyXG5dO1xyXG52YXIgYWxwaGFfc3BhY2VzID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDMsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQzXHJcbn07XG5cbnZhciB2YWxpZGF0ZSQ0ID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIG1pbiA9IF9iLm1pbiwgbWF4ID0gX2IubWF4O1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuICEhdmFsaWRhdGUkNCh2YWwsIHsgbWluOiBtaW4sIG1heDogbWF4IH0pOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBOdW1iZXIobWluKSA8PSB2YWx1ZSAmJiBOdW1iZXIobWF4KSA+PSB2YWx1ZTtcclxufTtcclxudmFyIHBhcmFtcyQ0ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtaW4nXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdtYXgnXHJcbiAgICB9XHJcbl07XHJcbnZhciBiZXR3ZWVuID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJDQsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyQ0XHJcbn07XG5cbnZhciB2YWxpZGF0ZSQ1ID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIHRhcmdldCA9IF9hLnRhcmdldDtcclxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpID09PSBTdHJpbmcodGFyZ2V0KTtcclxufTtcclxudmFyIHBhcmFtcyQ1ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICd0YXJnZXQnLFxyXG4gICAgICAgIGlzVGFyZ2V0OiB0cnVlXHJcbiAgICB9XHJcbl07XHJcbnZhciBjb25maXJtZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkNSxcclxuICAgIHBhcmFtczogcGFyYW1zJDVcclxufTtcblxudmFyIHZhbGlkYXRlJDYgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gX2EubGVuZ3RoO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJDYodmFsLCB7IGxlbmd0aDogbGVuZ3RoIH0pOyB9KTtcclxuICAgIH1cclxuICAgIHZhciBzdHJWYWwgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgcmV0dXJuIC9eWzAtOV0qJC8udGVzdChzdHJWYWwpICYmIHN0clZhbC5sZW5ndGggPT09IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyQ2ID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBkaWdpdHMgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkNixcclxuICAgIHBhcmFtczogcGFyYW1zJDZcclxufTtcblxudmFyIHZhbGlkYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZmlsZSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKGZhbHNlKTsgfTtcclxuICAgICAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKGltYWdlLndpZHRoID09PSB3aWR0aCAmJiBpbWFnZS5oZWlnaHQgPT09IGhlaWdodCk7IH07XHJcbiAgICAgICAgaW1hZ2Uuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgdmFsaWRhdGUkNyA9IGZ1bmN0aW9uIChmaWxlcywgX2EpIHtcclxuICAgIHZhciB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgZmlsZXMgPSBBcnJheS5pc0FycmF5KGZpbGVzKSA/IGZpbGVzIDogW2ZpbGVzXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyBpZiBmaWxlIGlzIG5vdCBhbiBpbWFnZSwgcmVqZWN0LlxyXG4gICAgICAgIGlmICghL1xcLihqcGd8c3ZnfGpwZWd8cG5nfGJtcHxnaWYpJC9pLnRlc3QoZmlsZXNbaV0ubmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3QucHVzaChmaWxlc1tpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobGlzdC5tYXAoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHZhbGlkYXRlSW1hZ2UoZmlsZSwgd2lkdGgsIGhlaWdodCk7IH0pKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWVzLmV2ZXJ5KGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9KTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgcGFyYW1zJDcgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3dpZHRoJyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaGVpZ2h0JyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgZGltZW5zaW9ucyA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSQ3LFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkN1xyXG59O1xuXG52YXIgdmFsaWRhdGUkOCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBtdWx0aXBsZSA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkubXVsdGlwbGU7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgICBpZiAobXVsdGlwbGUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXHJcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGVtYWlsU3RyKSB7IHJldHVybiBlbWFpbFN0ci50cmltKCk7IH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHJlLnRlc3QoU3RyaW5nKHZhbCkpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZS50ZXN0KFN0cmluZyh2YWx1ZSkpO1xyXG59O1xyXG52YXIgcGFyYW1zJDggPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ211bHRpcGxlJyxcclxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgfVxyXG5dO1xyXG52YXIgZW1haWwgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkOCxcclxuICAgIHBhcmFtczogcGFyYW1zJDhcclxufTtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHlBcnJheShhcnIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgJiYgYXJyLmxlbmd0aCA9PT0gMDtcclxufVxyXG5mdW5jdGlvbiBpc0NhbGxhYmxlKGZuKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xyXG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIGl0ZW0pIHtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uLmluZGV4T2YoaXRlbSkgIT09IC0xO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhcnJheSwgcHJvdmlkZXMgYSBzaW1wbGUgcG9seWZpbGwgZm9yIEFycmF5LmZyb21cclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXkoYXJyYXlMaWtlKSB7XHJcbiAgICBpZiAoaXNDYWxsYWJsZShBcnJheS5mcm9tKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGFycmF5TGlrZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIF9jb3B5QXJyYXkoYXJyYXlMaWtlKTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBfY29weUFycmF5KGFycmF5TGlrZSkge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cblxudmFyIHZhbGlkYXRlJDkgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSQ5KHZhbCwgb3B0aW9ucyk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvQXJyYXkob3B0aW9ucykuc29tZShmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgICAgIHJldHVybiBpdGVtID09IHZhbHVlO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBvbmVPZiA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSQ5XHJcbn07XG5cbnZhciB2YWxpZGF0ZSRhID0gZnVuY3Rpb24gKHZhbHVlLCBhcmdzKSB7XHJcbiAgICByZXR1cm4gIXZhbGlkYXRlJDkodmFsdWUsIGFyZ3MpO1xyXG59O1xyXG52YXIgZXhjbHVkZWQgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkYVxyXG59O1xuXG52YXIgdmFsaWRhdGUkYiA9IGZ1bmN0aW9uIChmaWxlcywgZXh0ZW5zaW9ucykge1xyXG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIi4oXCIgKyBleHRlbnNpb25zLmpvaW4oJ3wnKSArIFwiKSRcIiwgJ2knKTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGVzKSkge1xyXG4gICAgICAgIHJldHVybiBmaWxlcy5ldmVyeShmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gcmVnZXgudGVzdChmaWxlLm5hbWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZWdleC50ZXN0KGZpbGVzLm5hbWUpO1xyXG59O1xyXG52YXIgZXh0ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGJcclxufTtcblxudmFyIHZhbGlkYXRlJGMgPSBmdW5jdGlvbiAoZmlsZXMpIHtcclxuICAgIHZhciByZWdleCA9IC9cXC4oanBnfHN2Z3xqcGVnfHBuZ3xibXB8Z2lmKSQvaTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGVzKSkge1xyXG4gICAgICAgIHJldHVybiBmaWxlcy5ldmVyeShmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gcmVnZXgudGVzdChmaWxlLm5hbWUpOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZWdleC50ZXN0KGZpbGVzLm5hbWUpO1xyXG59O1xyXG52YXIgaW1hZ2UgPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkY1xyXG59O1xuXG52YXIgdmFsaWRhdGUkZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIC9eLT9bMC05XSskLy50ZXN0KFN0cmluZyh2YWwpKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gL14tP1swLTldKyQvLnRlc3QoU3RyaW5nKHZhbHVlKSk7XHJcbn07XHJcbnZhciBpbnRlZ2VyID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGRcclxufTtcblxudmFyIHZhbGlkYXRlJGUgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgb3RoZXIgPSBfYS5vdGhlcjtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXI7XHJcbn07XHJcbnZhciBwYXJhbXMkOSA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnb3RoZXInXHJcbiAgICB9XHJcbl07XHJcbnZhciBpcyA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRlLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkOVxyXG59O1xuXG52YXIgdmFsaWRhdGUkZiA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBvdGhlciA9IF9hLm90aGVyO1xyXG4gICAgcmV0dXJuIHZhbHVlICE9PSBvdGhlcjtcclxufTtcclxudmFyIHBhcmFtcyRhID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdvdGhlcidcclxuICAgIH1cclxuXTtcclxudmFyIGlzX25vdCA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRmLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkYVxyXG59O1xuXG52YXIgdmFsaWRhdGUkZyA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBsZW5ndGggPSBfYS5sZW5ndGg7XHJcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgIHZhbHVlID0gdG9BcnJheSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoID09PSBsZW5ndGg7XHJcbn07XHJcbnZhciBwYXJhbXMkYiA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbGVuZ3RoJyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIE51bWJlcih2YWx1ZSk7IH1cclxuICAgIH1cclxuXTtcclxudmFyIGxlbmd0aCA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRnLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkYlxyXG59O1xuXG52YXIgdmFsaWRhdGUkaCA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBsZW5ndGggPSBfYS5sZW5ndGg7XHJcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA+PSAwO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHZhbGlkYXRlJGgodmFsLCB7IGxlbmd0aDogbGVuZ3RoIH0pOyB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcodmFsdWUpLmxlbmd0aCA8PSBsZW5ndGg7XHJcbn07XHJcbnZhciBwYXJhbXMkYyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbGVuZ3RoJyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgbWF4ID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGgsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRjXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRpID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIG1heCA9IF9hLm1heDtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA+IDAgJiYgdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkaSh2YWwsIHsgbWF4OiBtYXggfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE51bWJlcih2YWx1ZSkgPD0gbWF4O1xyXG59O1xyXG52YXIgcGFyYW1zJGQgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ21heCcsXHJcbiAgICAgICAgY2FzdDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXTtcclxudmFyIG1heF92YWx1ZSA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRpLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkZFxyXG59O1xuXG52YXIgdmFsaWRhdGUkaiA9IGZ1bmN0aW9uIChmaWxlcywgbWltZXMpIHtcclxuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAobWltZXMuam9pbignfCcpLnJlcGxhY2UoJyonLCAnLisnKSArIFwiJFwiLCAnaScpO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZpbGVzLmV2ZXJ5KGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiByZWdleC50ZXN0KGZpbGUudHlwZSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZXMudHlwZSk7XHJcbn07XHJcbnZhciBtaW1lcyA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRqXHJcbn07XG5cbnZhciB2YWxpZGF0ZSRrID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xyXG4gICAgdmFyIGxlbmd0aCA9IF9hLmxlbmd0aDtcclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdmFsaWRhdGUkayh2YWwsIHsgbGVuZ3RoOiBsZW5ndGggfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkubGVuZ3RoID49IGxlbmd0aDtcclxufTtcclxudmFyIHBhcmFtcyRlID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsZW5ndGgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBtaW4gPSB7XHJcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGUkayxcclxuICAgIHBhcmFtczogcGFyYW1zJGVcclxufTtcblxudmFyIHZhbGlkYXRlJGwgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgbWluID0gX2EubWluO1xyXG4gICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gMCAmJiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSRsKHZhbCwgeyBtaW46IG1pbiB9KTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTnVtYmVyKHZhbHVlKSA+PSBtaW47XHJcbn07XHJcbnZhciBwYXJhbXMkZiA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnbWluJyxcclxuICAgICAgICBjYXN0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5dO1xyXG52YXIgbWluX3ZhbHVlID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJGwsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRmXHJcbn07XG5cbnZhciBhciA9IC9eW9mg2aHZotmj2aTZpdmm2afZqNmpXSskLztcclxudmFyIGVuID0gL15bMC05XSskLztcclxudmFyIHZhbGlkYXRlJG0gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIHZhciB0ZXN0VmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgdmFyIHN0clZhbHVlID0gU3RyaW5nKHZhbCk7XHJcbiAgICAgICAgcmV0dXJuIGVuLnRlc3Qoc3RyVmFsdWUpIHx8IGFyLnRlc3Qoc3RyVmFsdWUpO1xyXG4gICAgfTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeSh0ZXN0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRlc3RWYWx1ZSh2YWx1ZSk7XHJcbn07XHJcbnZhciBudW1lcmljID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJG1cclxufTtcblxudmFyIHZhbGlkYXRlJG4gPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgcmVnZXggPSBfYS5yZWdleDtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5ldmVyeShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWxpZGF0ZSRuKHZhbCwgeyByZWdleDogcmVnZXggfSk7IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoU3RyaW5nKHZhbHVlKSk7XHJcbn07XHJcbnZhciBwYXJhbXMkZyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAncmVnZXgnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciByZWdleCA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRuLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkZ1xyXG59O1xuXG52YXIgdmFsaWRhdGUkbyA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcclxuICAgIHZhciBhbGxvd0ZhbHNlID0gKF9hID09PSB2b2lkIDAgPyB7IGFsbG93RmFsc2U6IHRydWUgfSA6IF9hKS5hbGxvd0ZhbHNlO1xyXG4gICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgIH07XHJcbiAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHx8IGlzRW1wdHlBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLy8gaW5jYXNlIGEgZmllbGQgY29uc2lkZXJzIGBmYWxzZWAgYXMgYW4gZW1wdHkgdmFsdWUgbGlrZSBjaGVja2JveGVzLlxyXG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSAmJiAhYWxsb3dGYWxzZSkge1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXN1bHQudmFsaWQgPSAhIVN0cmluZyh2YWx1ZSkudHJpbSgpLmxlbmd0aDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbnZhciBjb21wdXRlc1JlcXVpcmVkID0gdHJ1ZTtcclxudmFyIHBhcmFtcyRoID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdhbGxvd0ZhbHNlJyxcclxuICAgICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICB9XHJcbl07XHJcbnZhciByZXF1aXJlZCA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRvLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkaCxcclxuICAgIGNvbXB1dGVzUmVxdWlyZWQ6IGNvbXB1dGVzUmVxdWlyZWRcclxufTtcblxudmFyIHRlc3RFbXB0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzRW1wdHlBcnJheSh2YWx1ZSkgfHwgaW5jbHVkZXMoW2ZhbHNlLCBudWxsLCB1bmRlZmluZWRdLCB2YWx1ZSkgfHwgIVN0cmluZyh2YWx1ZSkudHJpbSgpLmxlbmd0aDtcclxufTtcclxudmFyIHZhbGlkYXRlJHAgPSBmdW5jdGlvbiAodmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgdGFyZ2V0ID0gX2EudGFyZ2V0LCB2YWx1ZXMgPSBfYS52YWx1ZXM7XHJcbiAgICB2YXIgcmVxdWlyZWQ7XHJcbiAgICBpZiAodmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB0eXBlb2YgdmFsdWVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgcmVxdWlyZWQgPSB2YWx1ZXMuc29tZShmdW5jdGlvbiAodmFsKSB7IHJldHVybiB2YWwgPT0gU3RyaW5nKHRhcmdldCkudHJpbSgpOyB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlcXVpcmVkID0gIXRlc3RFbXB0eSh0YXJnZXQpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFyZXF1aXJlZCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZDogIXRlc3RFbXB0eSh2YWx1ZSksXHJcbiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkXHJcbiAgICB9O1xyXG59O1xyXG52YXIgcGFyYW1zJGkgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3RhcmdldCcsXHJcbiAgICAgICAgaXNUYXJnZXQ6IHRydWVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3ZhbHVlcydcclxuICAgIH1cclxuXTtcclxudmFyIGNvbXB1dGVzUmVxdWlyZWQkMSA9IHRydWU7XHJcbnZhciByZXF1aXJlZF9pZiA9IHtcclxuICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSRwLFxyXG4gICAgcGFyYW1zOiBwYXJhbXMkaSxcclxuICAgIGNvbXB1dGVzUmVxdWlyZWQ6IGNvbXB1dGVzUmVxdWlyZWQkMVxyXG59O1xuXG52YXIgdmFsaWRhdGUkcSA9IGZ1bmN0aW9uIChmaWxlcywgX2EpIHtcclxuICAgIHZhciBzaXplID0gX2Euc2l6ZTtcclxuICAgIGlmIChpc05hTihzaXplKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHZhciBuU2l6ZSA9IHNpemUgKiAxMDI0O1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVzKSkge1xyXG4gICAgICAgIHJldHVybiBmaWxlcy5zaXplIDw9IG5TaXplO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChmaWxlc1tpXS5zaXplID4gblNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xyXG52YXIgcGFyYW1zJGogPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ3NpemUnLFxyXG4gICAgICAgIGNhc3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbl07XHJcbnZhciBzaXplID0ge1xyXG4gICAgdmFsaWRhdGU6IHZhbGlkYXRlJHEsXHJcbiAgICBwYXJhbXM6IHBhcmFtcyRqXHJcbn07XG5cbmV4cG9ydCB7IGFscGhhJDEgYXMgYWxwaGEsIGFscGhhX2Rhc2gsIGFscGhhX251bSwgYWxwaGFfc3BhY2VzLCBiZXR3ZWVuLCBjb25maXJtZWQsIGRpZ2l0cywgZGltZW5zaW9ucywgZW1haWwsIGV4Y2x1ZGVkLCBleHQsIGltYWdlLCBpbnRlZ2VyLCBpcywgaXNfbm90LCBsZW5ndGgsIG1heCwgbWF4X3ZhbHVlLCBtaW1lcywgbWluLCBtaW5fdmFsdWUsIG51bWVyaWMsIG9uZU9mLCByZWdleCwgcmVxdWlyZWQsIHJlcXVpcmVkX2lmLCBzaXplIH07XG4iLCIvKipcbiAgKiB2ZWUtdmFsaWRhdGUgdjMuMy4wXG4gICogKGMpIDIwMjAgQWJkZWxyYWhtYW4gQXdhZFxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxuXG5mdW5jdGlvbiBpc05hTih2YWx1ZSkge1xyXG4gICAgLy8gTmFOIGlzIHRoZSBvbmUgdmFsdWUgdGhhdCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHlBcnJheShhcnIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgJiYgYXJyLmxlbmd0aCA9PT0gMDtcclxufVxyXG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmopO1xyXG59O1xyXG4vKipcclxuICogU2hhbGxvdyBvYmplY3QgY29tcGFyaXNvbi5cclxuICovXHJcbmZ1bmN0aW9uIGlzRXF1YWwobGhzLCByaHMpIHtcclxuICAgIGlmIChsaHMgaW5zdGFuY2VvZiBSZWdFeHAgJiYgcmhzIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzRXF1YWwobGhzLnNvdXJjZSwgcmhzLnNvdXJjZSkgJiYgaXNFcXVhbChsaHMuZmxhZ3MsIHJocy5mbGFncyk7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShsaHMpICYmIEFycmF5LmlzQXJyYXkocmhzKSkge1xyXG4gICAgICAgIGlmIChsaHMubGVuZ3RoICE9PSByaHMubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCFpc0VxdWFsKGxoc1tpXSwgcmhzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgYm90aCBhcmUgb2JqZWN0cywgY29tcGFyZSBlYWNoIGtleSByZWN1cnNpdmVseS5cclxuICAgIGlmIChpc09iamVjdChsaHMpICYmIGlzT2JqZWN0KHJocykpIHtcclxuICAgICAgICByZXR1cm4gKE9iamVjdC5rZXlzKGxocykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNFcXVhbChsaHNba2V5XSwgcmhzW2tleV0pO1xyXG4gICAgICAgIH0pICYmXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJocykuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRXF1YWwobGhzW2tleV0sIHJoc1trZXldKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzTmFOKGxocykgJiYgaXNOYU4ocmhzKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxocyA9PT0gcmhzO1xyXG59XHJcbi8vIENoZWNrcyBpZiBhIGdpdmVuIHZhbHVlIGlzIG5vdCBhbiBlbXB0eSBzdHJpbmcgb3IgbnVsbCBvciB1bmRlZmluZWQuXHJcbmZ1bmN0aW9uIGlzU3BlY2lmaWVkKHZhbCkge1xyXG4gICAgaWYgKHZhbCA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gIWlzTnVsbE9yVW5kZWZpbmVkKHZhbCk7XHJcbn1cclxuZnVuY3Rpb24gaXNDYWxsYWJsZShmbikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG5mdW5jdGlvbiBpc0xvY2F0b3IodmFsdWUpIHtcclxuICAgIHJldHVybiBpc0NhbGxhYmxlKHZhbHVlKSAmJiAhIXZhbHVlLl9fbG9jYXRvclJlZjtcclxufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXlMaWtlLCBwcmVkaWNhdGUpIHtcclxuICAgIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkoYXJyYXlMaWtlKSA/IGFycmF5TGlrZSA6IHRvQXJyYXkoYXJyYXlMaWtlKTtcclxuICAgIGlmIChpc0NhbGxhYmxlKGFycmF5LmZpbmRJbmRleCkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXkuZmluZEluZGV4KHByZWRpY2F0ZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaV0sIGkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICByZXR1cm4gLTE7XHJcbn1cclxuLyoqXHJcbiAqIGZpbmRzIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIHRoZSBwcmVkaWNhdGUgY2FsbGJhY2ssIHBvbHlmaWxscyBhcnJheS5maW5kXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kKGFycmF5TGlrZSwgcHJlZGljYXRlKSB7XHJcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KGFycmF5TGlrZSkgPyBhcnJheUxpa2UgOiB0b0FycmF5KGFycmF5TGlrZSk7XHJcbiAgICB2YXIgaWR4ID0gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpO1xyXG4gICAgcmV0dXJuIGlkeCA9PT0gLTEgPyB1bmRlZmluZWQgOiBhcnJheVtpZHhdO1xyXG59XHJcbmZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIGl0ZW0pIHtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uLmluZGV4T2YoaXRlbSkgIT09IC0xO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhcnJheSwgcHJvdmlkZXMgYSBzaW1wbGUgcG9seWZpbGwgZm9yIEFycmF5LmZyb21cclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXkoYXJyYXlMaWtlKSB7XHJcbiAgICBpZiAoaXNDYWxsYWJsZShBcnJheS5mcm9tKSkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGFycmF5TGlrZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIF9jb3B5QXJyYXkoYXJyYXlMaWtlKTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBfY29weUFycmF5KGFycmF5TGlrZSkge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuZnVuY3Rpb24gdmFsdWVzKG9iaikge1xyXG4gICAgaWYgKGlzQ2FsbGFibGUoT2JqZWN0LnZhbHVlcykpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhvYmopO1xyXG4gICAgfVxyXG4gICAgLy8gZmFsbGJhY2sgdG8ga2V5cygpXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBvYmpba107IH0pO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlKSB7XHJcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmxhZ3MoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVudG91Y2hlZDogdHJ1ZSxcclxuICAgICAgICB0b3VjaGVkOiBmYWxzZSxcclxuICAgICAgICBkaXJ0eTogZmFsc2UsXHJcbiAgICAgICAgcHJpc3RpbmU6IHRydWUsXHJcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgIGludmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgIHZhbGlkYXRlZDogZmFsc2UsXHJcbiAgICAgICAgcGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgICAgIGNoYW5nZWQ6IGZhbHNlLFxyXG4gICAgICAgIHBhc3NlZDogZmFsc2UsXHJcbiAgICAgICAgZmFpbGVkOiBmYWxzZVxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XHJcbiAgICByZXR1cm4geDtcclxufVxyXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCwgdG9rZW4pIHtcclxuICAgIGlmICh3YWl0ID09PSB2b2lkIDApIHsgd2FpdCA9IDA7IH1cclxuICAgIGlmICh0b2tlbiA9PT0gdm9pZCAwKSB7IHRva2VuID0geyBjYW5jZWxsZWQ6IGZhbHNlIH07IH1cclxuICAgIGlmICh3YWl0ID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZuO1xyXG4gICAgfVxyXG4gICAgdmFyIHRpbWVvdXQ7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBmbiBjYWxsIHdhcyBjYW5jZWxsZWQuXHJcbiAgICAgICAgICAgIGlmICghdG9rZW4uY2FuY2VsbGVkKVxyXG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgbWlnaHQgd2FudCB0byB1c2UgTm9kZS5qcyBzZXRUaW1vdXQgZm9yIFNTUi5cclxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xyXG4gICAgfTtcclxufVxuXG4vKipcclxuICogRW1pdHMgYSB3YXJuaW5nIHRvIHRoZSBjb25zb2xlXHJcbiAqL1xyXG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcclxuICAgIGNvbnNvbGUud2FybihcIlt2ZWUtdmFsaWRhdGVdIFwiICsgbWVzc2FnZSk7XHJcbn1cclxuLyoqXHJcbiAqIFJlcGxhY2VzIHBsYWNlaG9sZGVyIHZhbHVlcyBpbiBhIHN0cmluZyB3aXRoIHRoZWlyIGFjdHVhbCB2YWx1ZXNcclxuICovXHJcbmZ1bmN0aW9uIGludGVycG9sYXRlKHRlbXBsYXRlLCB2YWx1ZXMpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC97KFtefV0rKX0vZywgZnVuY3Rpb24gKF8sIHApIHtcclxuICAgICAgICByZXR1cm4gcCBpbiB2YWx1ZXMgPyB2YWx1ZXNbcF0gOiBcIntcIiArIHAgKyBcIn1cIjtcclxuICAgIH0pO1xyXG59XG5cbnZhciBSVUxFUyA9IHt9O1xyXG5mdW5jdGlvbiBub3JtYWxpemVTY2hlbWEoc2NoZW1hKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAoKF9hID0gc2NoZW1hLnBhcmFtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkge1xyXG4gICAgICAgIHNjaGVtYS5wYXJhbXMgPSBzY2hlbWEucGFyYW1zLm1hcChmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IHBhcmFtIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjaGVtYTtcclxufVxyXG52YXIgUnVsZUNvbnRhaW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJ1bGVDb250YWluZXIoKSB7XHJcbiAgICB9XHJcbiAgICBSdWxlQ29udGFpbmVyLmV4dGVuZCA9IGZ1bmN0aW9uIChuYW1lLCBzY2hlbWEpIHtcclxuICAgICAgICAvLyBpZiBydWxlIGFscmVhZHkgZXhpc3RzLCBvdmVyd3JpdGUgaXQuXHJcbiAgICAgICAgdmFyIHJ1bGUgPSBub3JtYWxpemVTY2hlbWEoc2NoZW1hKTtcclxuICAgICAgICBpZiAoUlVMRVNbbmFtZV0pIHtcclxuICAgICAgICAgICAgUlVMRVNbbmFtZV0gPSBtZXJnZShSVUxFU1tuYW1lXSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSVUxFU1tuYW1lXSA9IF9fYXNzaWduKHsgbGF6eTogZmFsc2UsIGNvbXB1dGVzUmVxdWlyZWQ6IGZhbHNlIH0sIHJ1bGUpO1xyXG4gICAgfTtcclxuICAgIFJ1bGVDb250YWluZXIuaXNMYXp5ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IFJVTEVTW25hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGF6eSk7XHJcbiAgICB9O1xyXG4gICAgUnVsZUNvbnRhaW5lci5pc1JlcXVpcmVSdWxlID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuICEhKChfYSA9IFJVTEVTW25hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29tcHV0ZXNSZXF1aXJlZCk7XHJcbiAgICB9O1xyXG4gICAgUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChydWxlTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBSVUxFU1tydWxlTmFtZV07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJ1bGVDb250YWluZXI7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBZGRzIGEgY3VzdG9tIHZhbGlkYXRvciB0byB0aGUgbGlzdCBvZiB2YWxpZGF0aW9uIHJ1bGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0ZW5kKG5hbWUsIHNjaGVtYSkge1xyXG4gICAgLy8gbWFrZXMgc3VyZSBuZXcgcnVsZXMgYXJlIHByb3Blcmx5IGZvcm1hdHRlZC5cclxuICAgIGd1YXJkRXh0ZW5kKG5hbWUsIHNjaGVtYSk7XHJcbiAgICAvLyBGdWxsIHNjaGVtYSBvYmplY3QuXHJcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBSdWxlQ29udGFpbmVyLmV4dGVuZChuYW1lLCBzY2hlbWEpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFJ1bGVDb250YWluZXIuZXh0ZW5kKG5hbWUsIHtcclxuICAgICAgICB2YWxpZGF0ZTogc2NoZW1hXHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogR3VhcmRzIGZyb20gZXh0ZW5zaW9uIHZpb2xhdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBndWFyZEV4dGVuZChuYW1lLCB2YWxpZGF0b3IpIHtcclxuICAgIGlmIChpc0NhbGxhYmxlKHZhbGlkYXRvcikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNDYWxsYWJsZSh2YWxpZGF0b3IudmFsaWRhdGUpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKFJ1bGVDb250YWluZXIuZ2V0UnVsZURlZmluaXRpb24obmFtZSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHRlbnNpb24gRXJyb3I6IFRoZSB2YWxpZGF0b3IgJ1wiICsgbmFtZSArIFwiJyBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgaGF2ZSBhICd2YWxpZGF0ZScgbWV0aG9kLlwiKTtcclxufVxuXG52YXIgREVGQVVMVF9DT05GSUcgPSB7XHJcbiAgICBkZWZhdWx0TWVzc2FnZTogXCJ7X2ZpZWxkX30gaXMgbm90IHZhbGlkLlwiLFxyXG4gICAgc2tpcE9wdGlvbmFsOiB0cnVlLFxyXG4gICAgY2xhc3Nlczoge1xyXG4gICAgICAgIHRvdWNoZWQ6ICd0b3VjaGVkJyxcclxuICAgICAgICB1bnRvdWNoZWQ6ICd1bnRvdWNoZWQnLFxyXG4gICAgICAgIHZhbGlkOiAndmFsaWQnLFxyXG4gICAgICAgIGludmFsaWQ6ICdpbnZhbGlkJyxcclxuICAgICAgICBwcmlzdGluZTogJ3ByaXN0aW5lJyxcclxuICAgICAgICBkaXJ0eTogJ2RpcnR5JyAvLyBjb250cm9sIGhhcyBiZWVuIGludGVyYWN0ZWQgd2l0aFxyXG4gICAgfSxcclxuICAgIGJhaWxzOiB0cnVlLFxyXG4gICAgbW9kZTogJ2FnZ3Jlc3NpdmUnLFxyXG4gICAgdXNlQ29uc3RyYWludEF0dHJzOiB0cnVlXHJcbn07XHJcbnZhciBjdXJyZW50Q29uZmlnID0gX19hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHKTtcclxudmFyIGdldENvbmZpZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGN1cnJlbnRDb25maWc7IH07XHJcbnZhciBzZXRDb25maWcgPSBmdW5jdGlvbiAobmV3Q29uZikge1xyXG4gICAgY3VycmVudENvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjdXJyZW50Q29uZmlnKSwgbmV3Q29uZik7XHJcbn07XHJcbnZhciBjb25maWd1cmUgPSBmdW5jdGlvbiAoY2ZnKSB7XHJcbiAgICBzZXRDb25maWcoY2ZnKTtcclxufTtcblxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgdGhlIGdpdmVuIHJ1bGVzIGV4cHJlc3Npb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVSdWxlcyhydWxlcykge1xyXG4gICAgLy8gaWYgZmFsc3kgdmFsdWUgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cclxuICAgIHZhciBhY2MgPSB7fTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY2MsICdfJCRpc05vcm1hbGl6ZWQnLCB7XHJcbiAgICAgICAgdmFsdWU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG4gICAgaWYgKCFydWxlcykge1xyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9XHJcbiAgICAvLyBPYmplY3QgaXMgYWxyZWFkeSBub3JtYWxpemVkLCBza2lwLlxyXG4gICAgaWYgKGlzT2JqZWN0KHJ1bGVzKSAmJiBydWxlcy5fJCRpc05vcm1hbGl6ZWQpIHtcclxuICAgICAgICByZXR1cm4gcnVsZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNPYmplY3QocnVsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJ1bGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnIpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgcHJlc2VydmVBcnJheVBhcmFtcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAocnVsZXNbY3Vycl0gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocnVsZXNbY3Vycl0pKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBydWxlc1tjdXJyXTtcclxuICAgICAgICAgICAgICAgIHByZXNlcnZlQXJyYXlQYXJhbXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHJ1bGVzW2N1cnJdKSkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcnVsZXNbY3Vycl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBbcnVsZXNbY3Vycl1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChydWxlc1tjdXJyXSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHByZXZbY3Vycl0gPSBidWlsZFBhcmFtcyhjdXJyLCBwYXJhbXMsIHByZXNlcnZlQXJyYXlQYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgIH0sIGFjYyk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICh0eXBlb2YgcnVsZXMgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgd2FybigncnVsZXMgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcnVsZXMuc3BsaXQoJ3wnKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHJ1bGUpIHtcclxuICAgICAgICB2YXIgcGFyc2VkUnVsZSA9IHBhcnNlUnVsZShydWxlKTtcclxuICAgICAgICBpZiAoIXBhcnNlZFJ1bGUubmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJldltwYXJzZWRSdWxlLm5hbWVdID0gYnVpbGRQYXJhbXMocGFyc2VkUnVsZS5uYW1lLCBwYXJzZWRSdWxlLnBhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICB9LCBhY2MpO1xyXG59XHJcbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKHJ1bGVOYW1lLCBwcm92aWRlZCwgcHJlc2VydmVBcnJheVBhcmFtcykge1xyXG4gICAgaWYgKHByZXNlcnZlQXJyYXlQYXJhbXMgPT09IHZvaWQgMCkgeyBwcmVzZXJ2ZUFycmF5UGFyYW1zID0gZmFsc2U7IH1cclxuICAgIHZhciBydWxlU2NoZW1hID0gUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbihydWxlTmFtZSk7XHJcbiAgICBpZiAoIXJ1bGVTY2hlbWEpIHtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZWQ7XHJcbiAgICB9XHJcbiAgICB2YXIgcGFyYW1zID0ge307XHJcbiAgICBpZiAoIXJ1bGVTY2hlbWEucGFyYW1zICYmICFBcnJheS5pc0FycmF5KHByb3ZpZGVkKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGFuIG9iamVjdCBwYXJhbXMgdG8gYSBydWxlIHRoYXQgaGFzIG5vIGRlZmluZWQgc2NoZW1hLicpO1xyXG4gICAgfVxyXG4gICAgLy8gUnVsZSBwcm9iYWJseSB1c2VzIGFuIGFycmF5IGZvciB0aGVpciBhcmdzLCBrZWVwIGl0IGFzIGlzLlxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvdmlkZWQpICYmICFydWxlU2NoZW1hLnBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlZDtcclxuICAgIH1cclxuICAgIHZhciBkZWZpbmVkUGFyYW1zO1xyXG4gICAgLy8gY29sbGVjdCB0aGUgcGFyYW1zIHNjaGVtYS5cclxuICAgIGlmICghcnVsZVNjaGVtYS5wYXJhbXMgfHwgKHJ1bGVTY2hlbWEucGFyYW1zLmxlbmd0aCA8IHByb3ZpZGVkLmxlbmd0aCAmJiBBcnJheS5pc0FycmF5KHByb3ZpZGVkKSkpIHtcclxuICAgICAgICB2YXIgbGFzdERlZmluZWRQYXJhbV8xO1xyXG4gICAgICAgIC8vIGNvbGxlY3QgYW55IGFkZGl0aW9uYWwgcGFyYW1ldGVycyBpbiB0aGUgbGFzdCBpdGVtLlxyXG4gICAgICAgIGRlZmluZWRQYXJhbXMgPSBwcm92aWRlZC5tYXAoZnVuY3Rpb24gKF8sIGlkeCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbSA9IChfYSA9IHJ1bGVTY2hlbWEucGFyYW1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbaWR4XTtcclxuICAgICAgICAgICAgbGFzdERlZmluZWRQYXJhbV8xID0gcGFyYW0gfHwgbGFzdERlZmluZWRQYXJhbV8xO1xyXG4gICAgICAgICAgICBpZiAoIXBhcmFtKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbSA9IGxhc3REZWZpbmVkUGFyYW1fMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBkZWZpbmVkUGFyYW1zID0gcnVsZVNjaGVtYS5wYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvLyBNYXRjaCB0aGUgcHJvdmlkZWQgYXJyYXkgbGVuZ3RoIHdpdGggYSB0ZW1wb3Jhcnkgc2NoZW1hLlxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWZpbmVkUGFyYW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBkZWZpbmVkUGFyYW1zW2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnMuZGVmYXVsdDtcclxuICAgICAgICAvLyBpZiB0aGUgcHJvdmlkZWQgaXMgYW4gYXJyYXksIG1hcCBlbGVtZW50IHZhbHVlLlxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3ZpZGVkKSAmJiAhcHJlc2VydmVBcnJheVBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAoaSBpbiBwcm92aWRlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcm92aWRlZFtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHBhcmFtIGV4aXN0cyBpbiB0aGUgcHJvdmlkZWQgb2JqZWN0LlxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5uYW1lIGluIHByb3ZpZGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3ZpZGVkW29wdGlvbnMubmFtZV07XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJvdmlkZWQgaXMgdGhlIGZpcnN0IHBhcmFtIHZhbHVlLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZmluZWRQYXJhbXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3ZpZGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHRoZSBwYXJhbSBpcyBhIHRhcmdldCwgcmVzb2x2ZSB0aGUgdGFyZ2V0IHZhbHVlLlxyXG4gICAgICAgIGlmIChvcHRpb25zLmlzVGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gY3JlYXRlTG9jYXRvcih2YWx1ZSwgb3B0aW9ucy5jYXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQSB0YXJnZXQgcGFyYW0gdXNpbmcgaW50ZXJwb2xhdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlWzBdID09PSAnQCcpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBjcmVhdGVMb2NhdG9yKHZhbHVlLnNsaWNlKDEpLCBvcHRpb25zLmNhc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHRyYW5zZm9ybWVyIGRlZmluZWQuXHJcbiAgICAgICAgaWYgKCFpc0xvY2F0b3IodmFsdWUpICYmIG9wdGlvbnMuY2FzdCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbnMuY2FzdCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFscmVhZHkgYmVlbiBzZXQsIHByb2JhYmx5IG11bHRpcGxlIHZhbHVlcy5cclxuICAgICAgICBpZiAocGFyYW1zW29wdGlvbnMubmFtZV0pIHtcclxuICAgICAgICAgICAgcGFyYW1zW29wdGlvbnMubmFtZV0gPSBBcnJheS5pc0FycmF5KHBhcmFtc1tvcHRpb25zLm5hbWVdKSA/IHBhcmFtc1tvcHRpb25zLm5hbWVdIDogW3BhcmFtc1tvcHRpb25zLm5hbWVdXTtcclxuICAgICAgICAgICAgcGFyYW1zW29wdGlvbnMubmFtZV0ucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICBwYXJhbXNbb3B0aW9ucy5uYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIFBhcnNlcyBhIHJ1bGUgc3RyaW5nIGV4cHJlc3Npb24uXHJcbiAqL1xyXG52YXIgcGFyc2VSdWxlID0gZnVuY3Rpb24gKHJ1bGUpIHtcclxuICAgIHZhciBwYXJhbXMgPSBbXTtcclxuICAgIHZhciBuYW1lID0gcnVsZS5zcGxpdCgnOicpWzBdO1xyXG4gICAgaWYgKGluY2x1ZGVzKHJ1bGUsICc6JykpIHtcclxuICAgICAgICBwYXJhbXMgPSBydWxlXHJcbiAgICAgICAgICAgIC5zcGxpdCgnOicpXHJcbiAgICAgICAgICAgIC5zbGljZSgxKVxyXG4gICAgICAgICAgICAuam9pbignOicpXHJcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgcGFyYW1zOiBwYXJhbXMgfTtcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlTG9jYXRvcih2YWx1ZSwgY2FzdEZuKSB7XHJcbiAgICB2YXIgbG9jYXRvciA9IGZ1bmN0aW9uIChjcm9zc1RhYmxlKSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IGNyb3NzVGFibGVbdmFsdWVdO1xyXG4gICAgICAgIHJldHVybiBjYXN0Rm4gPyBjYXN0Rm4odmFsKSA6IHZhbDtcclxuICAgIH07XHJcbiAgICBsb2NhdG9yLl9fbG9jYXRvclJlZiA9IHZhbHVlO1xyXG4gICAgcmV0dXJuIGxvY2F0b3I7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdExvY2F0b3JzKHBhcmFtcykge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xyXG4gICAgICAgIHJldHVybiBwYXJhbXMuZmlsdGVyKGlzTG9jYXRvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocGFyYW1zKVxyXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gaXNMb2NhdG9yKHBhcmFtc1trZXldKTsgfSlcclxuICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHBhcmFtc1trZXldOyB9KTtcclxufVxuXG4vKipcclxuICogVmFsaWRhdGVzIGEgdmFsdWUgYWdhaW5zdCB0aGUgcnVsZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSwgcnVsZXMsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNob3VsZEJhaWwsIHNraXBJZkVtcHR5LCBmaWVsZCwgcmVzdWx0LCBlcnJvcnMsIGZhaWxlZFJ1bGVzLCByZWdlbmVyYXRlTWFwO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZEJhaWwgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYmFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgc2tpcElmRW1wdHkgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcElmRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubmFtZSkgfHwgJ3tmaWVsZH0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlczogbm9ybWFsaXplUnVsZXMocnVsZXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWlsczogc2hvdWxkQmFpbCAhPT0gbnVsbCAmJiBzaG91bGRCYWlsICE9PSB2b2lkIDAgPyBzaG91bGRCYWlsIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElmRW1wdHk6IHNraXBJZkVtcHR5ICE9PSBudWxsICYmIHNraXBJZkVtcHR5ICE9PSB2b2lkIDAgPyBza2lwSWZFbXB0eSA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlUmVxdWlyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc1RhYmxlOiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnZhbHVlcykgfHwge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzOiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5hbWVzKSB8fCB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tTWVzc2FnZXM6IChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3VzdG9tTWVzc2FnZXMpIHx8IHt9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfdmFsaWRhdGUoZmllbGQsIHZhbHVlLCBvcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZhaWxlZFJ1bGVzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnZW5lcmF0ZU1hcCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gZS5tc2coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2gobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbGVkUnVsZXNbZS5ydWxlXSA9IG1zZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnZW5lcmF0ZU1hcFtlLnJ1bGVdID0gZS5tc2c7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiByZXN1bHQudmFsaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9ycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZFJ1bGVzOiBmYWlsZWRSdWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2VuZXJhdGVNYXA6IHJlZ2VuZXJhdGVNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTdGFydHMgdGhlIHZhbGlkYXRpb24gcHJvY2Vzcy5cclxuICovXHJcbmZ1bmN0aW9uIF92YWxpZGF0ZShmaWVsZCwgdmFsdWUsIF9hKSB7XHJcbiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLmlzSW5pdGlhbCwgaXNJbml0aWFsID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2I7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9jLCBzaG91bGRTa2lwLCBlcnJvcnMsIHJ1bGVzLCBsZW5ndGgsIGksIHJ1bGUsIHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9kKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2QubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgX3Nob3VsZFNraXAoZmllbGQsIHZhbHVlKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBfZC5zZW50KCksIHNob3VsZFNraXAgPSBfYy5zaG91bGRTa2lwLCBlcnJvcnMgPSBfYy5lcnJvcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZFNraXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZDogIWVycm9ycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBydWxlcyA9IE9iamVjdC5rZXlzKGZpZWxkLnJ1bGVzKS5maWx0ZXIoZnVuY3Rpb24gKHJ1bGUpIHsgcmV0dXJuICFSdWxlQ29udGFpbmVyLmlzUmVxdWlyZVJ1bGUocnVsZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IHJ1bGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA8IGxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luaXRpYWwgJiYgUnVsZUNvbnRhaW5lci5pc0xhenkocnVsZXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBydWxlID0gcnVsZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgX3Rlc3QoZmllbGQsIHZhbHVlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBydWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBmaWVsZC5ydWxlc1tydWxlXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LnZhbGlkICYmIHJlc3VsdC5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChyZXN1bHQuZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuYmFpbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZDogIWVycm9ycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIF9zaG91bGRTa2lwKGZpZWxkLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXF1aXJlUnVsZXMsIGxlbmd0aCwgZXJyb3JzLCBpc0VtcHR5LCBpc0VtcHR5QW5kT3B0aW9uYWwsIGlzUmVxdWlyZWQsIGksIHJ1bGUsIHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlUnVsZXMgPSBPYmplY3Qua2V5cyhmaWVsZC5ydWxlcykuZmlsdGVyKFJ1bGVDb250YWluZXIuaXNSZXF1aXJlUnVsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gcmVxdWlyZVJ1bGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpc0VtcHR5ID0gaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpIHx8IHZhbHVlID09PSAnJyB8fCBpc0VtcHR5QXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRW1wdHlBbmRPcHRpb25hbCA9IGlzRW1wdHkgJiYgZmllbGQuc2tpcElmRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpIDwgbGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZSA9IHJlcXVpcmVSdWxlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfdGVzdChmaWVsZCwgdmFsdWUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJ1bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IGZpZWxkLnJ1bGVzW3J1bGVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc09iamVjdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZSBydWxlcyBoYXMgdG8gcmV0dXJuIGFuIG9iamVjdCAoc2VlIGRvY3MpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LnZhbGlkICYmIHJlc3VsdC5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChyZXN1bHQuZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGl0IGVhcmx5IGFzIHRoZSBmaWVsZCBpcyByZXF1aXJlZCBhbmQgZmFpbGVkIHZhbGlkYXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5iYWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2tpcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5ICYmICFpc1JlcXVpcmVkICYmICFmaWVsZC5za2lwSWZFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNraXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmllbGQgaXMgY29uZmlndXJlZCB0byBydW4gdGhyb3VnaCB0aGUgcGlwZWxpbmUgcmVnYXJkbGVzc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGQuYmFpbHMgJiYgIWlzRW1wdHlBbmRPcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNraXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogZXJyb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBpZiB0aGUgZmllbGQgaXMgbm90IHJlcXVpcmVkIGFuZCBoYXMgYW4gZW1wdHkgdmFsdWUuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNraXA6ICFpc1JlcXVpcmVkICYmIGlzRW1wdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFRlc3RzIGEgc2luZ2xlIGlucHV0IHZhbHVlIGFnYWluc3QgYSBydWxlLlxyXG4gKi9cclxuZnVuY3Rpb24gX3Rlc3QoZmllbGQsIHZhbHVlLCBydWxlKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJ1bGVTY2hlbWEsIG5vcm1hbGl6ZWRWYWx1ZSwgcGFyYW1zLCByZXN1bHQsIHZhbHVlc18xO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVTY2hlbWEgPSBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKHJ1bGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFydWxlU2NoZW1hIHx8ICFydWxlU2NoZW1hLnZhbGlkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggdmFsaWRhdG9yICdcIiArIHJ1bGUubmFtZSArIFwiJyBleGlzdHMuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkVmFsdWUgPSBydWxlU2NoZW1hLmNhc3RWYWx1ZSA/IHJ1bGVTY2hlbWEuY2FzdFZhbHVlKHZhbHVlKSA6IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IGZpbGxUYXJnZXRWYWx1ZXMocnVsZS5wYXJhbXMsIGZpZWxkLmNyb3NzVGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJ1bGVTY2hlbWEudmFsaWRhdGUobm9ybWFsaXplZFZhbHVlLCBwYXJhbXMpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc18xID0gX19hc3NpZ24oX19hc3NpZ24oe30sIChwYXJhbXMgfHwge30pKSwgeyBfZmllbGRfOiBmaWVsZC5uYW1lLCBfdmFsdWVfOiB2YWx1ZSwgX3J1bGVfOiBydWxlLm5hbWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB7IHJ1bGU6IHJ1bGUubmFtZSwgbXNnOiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcnBvbGF0ZShyZXN1bHQsIHZhbHVlc18xKTsgfSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc09iamVjdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHsgdmFsaWQ6IHJlc3VsdCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHJlc3VsdC52YWxpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiByZXN1bHQucmVxdWlyZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogcmVzdWx0LnZhbGlkID8gdW5kZWZpbmVkIDogX2dlbmVyYXRlRmllbGRFcnJvcihmaWVsZCwgdmFsdWUsIHJ1bGVTY2hlbWEsIHJ1bGUubmFtZSwgcGFyYW1zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBlcnJvciBtZXNzYWdlcy5cclxuICovXHJcbmZ1bmN0aW9uIF9nZW5lcmF0ZUZpZWxkRXJyb3IoZmllbGQsIHZhbHVlLCBydWxlU2NoZW1hLCBydWxlTmFtZSwgcGFyYW1zKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgbWVzc2FnZSA9IChfYSA9IGZpZWxkLmN1c3RvbU1lc3NhZ2VzW3J1bGVOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogcnVsZVNjaGVtYS5tZXNzYWdlO1xyXG4gICAgdmFyIHJ1bGVUYXJnZXRzID0gX2dldFJ1bGVUYXJnZXRzKGZpZWxkLCBydWxlU2NoZW1hLCBydWxlTmFtZSk7XHJcbiAgICB2YXIgX2IgPSBfZ2V0VXNlclRhcmdldHMoZmllbGQsIHJ1bGVTY2hlbWEsIHJ1bGVOYW1lLCBtZXNzYWdlKSwgdXNlclRhcmdldHMgPSBfYi51c2VyVGFyZ2V0cywgdXNlck1lc3NhZ2UgPSBfYi51c2VyTWVzc2FnZTtcclxuICAgIHZhciB2YWx1ZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKHBhcmFtcyB8fCB7fSkpLCB7IF9maWVsZF86IGZpZWxkLm5hbWUsIF92YWx1ZV86IHZhbHVlLCBfcnVsZV86IHJ1bGVOYW1lIH0pLCBydWxlVGFyZ2V0cyksIHVzZXJUYXJnZXRzKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbXNnOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfbm9ybWFsaXplTWVzc2FnZSh1c2VyTWVzc2FnZSB8fCBnZXRDb25maWcoKS5kZWZhdWx0TWVzc2FnZSwgZmllbGQubmFtZSwgdmFsdWVzKTsgfSxcclxuICAgICAgICBydWxlOiBydWxlTmFtZVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBfZ2V0UnVsZVRhcmdldHMoZmllbGQsIHJ1bGVTY2hlbWEsIHJ1bGVOYW1lKSB7XHJcbiAgICB2YXIgcGFyYW1zID0gcnVsZVNjaGVtYS5wYXJhbXM7XHJcbiAgICBpZiAoIXBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuICAgIHZhciBudW1UYXJnZXRzID0gcGFyYW1zLmZpbHRlcihmdW5jdGlvbiAocGFyYW0pIHsgcmV0dXJuIHBhcmFtLmlzVGFyZ2V0OyB9KS5sZW5ndGg7XHJcbiAgICBpZiAobnVtVGFyZ2V0cyA8PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gICAgdmFyIG5hbWVzID0ge307XHJcbiAgICB2YXIgcnVsZUNvbmZpZyA9IGZpZWxkLnJ1bGVzW3J1bGVOYW1lXTtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShydWxlQ29uZmlnKSAmJiBpc09iamVjdChydWxlQ29uZmlnKSkge1xyXG4gICAgICAgIHJ1bGVDb25maWcgPSBwYXJhbXMubWFwKGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcnVsZUNvbmZpZ1twYXJhbS5uYW1lXTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBwYXJhbXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zW2luZGV4XTtcclxuICAgICAgICB2YXIga2V5ID0gcnVsZUNvbmZpZ1tpbmRleF07XHJcbiAgICAgICAgaWYgKCFpc0xvY2F0b3Ioa2V5KSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAga2V5ID0ga2V5Ll9fbG9jYXRvclJlZjtcclxuICAgICAgICB2YXIgbmFtZV8xID0gZmllbGQubmFtZXNba2V5XSB8fCBrZXk7XHJcbiAgICAgICAgbmFtZXNbcGFyYW0ubmFtZV0gPSBuYW1lXzE7XHJcbiAgICAgICAgbmFtZXNbXCJfXCIgKyBwYXJhbS5uYW1lICsgXCJfXCJdID0gZmllbGQuY3Jvc3NUYWJsZVtrZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVzO1xyXG59XHJcbmZ1bmN0aW9uIF9nZXRVc2VyVGFyZ2V0cyhmaWVsZCwgcnVsZVNjaGVtYSwgcnVsZU5hbWUsIHVzZXJNZXNzYWdlKSB7XHJcbiAgICB2YXIgdXNlclRhcmdldHMgPSB7fTtcclxuICAgIHZhciBydWxlcyA9IGZpZWxkLnJ1bGVzW3J1bGVOYW1lXTtcclxuICAgIHZhciBwYXJhbXMgPSBydWxlU2NoZW1hLnBhcmFtcyB8fCBbXTtcclxuICAgIC8vIGVhcmx5IHJldHVybiBpZiBubyBydWxlc1xyXG4gICAgaWYgKCFydWxlcykge1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIGFsbCBydWxlcyB0byBjb252ZXJ0IHRhcmdldHNcclxuICAgIE9iamVjdC5rZXlzKHJ1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGluZGV4KSB7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBydWxlXHJcbiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1trZXldO1xyXG4gICAgICAgIGlmICghaXNMb2NhdG9yKHJ1bGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZ2V0IGFzc29jaWF0ZWQgcGFyYW1ldGVyXHJcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zW2luZGV4XTtcclxuICAgICAgICBpZiAoIXBhcmFtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZ3JhYiB0aGUgbmFtZSBvZiB0aGUgdGFyZ2V0XHJcbiAgICAgICAgdmFyIG5hbWUgPSBydWxlLl9fbG9jYXRvclJlZjtcclxuICAgICAgICB1c2VyVGFyZ2V0c1twYXJhbS5uYW1lXSA9IGZpZWxkLm5hbWVzW25hbWVdIHx8IG5hbWU7XHJcbiAgICAgICAgdXNlclRhcmdldHNbXCJfXCIgKyBwYXJhbS5uYW1lICsgXCJfXCJdID0gZmllbGQuY3Jvc3NUYWJsZVtuYW1lXTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VyVGFyZ2V0czogdXNlclRhcmdldHMsXHJcbiAgICAgICAgdXNlck1lc3NhZ2U6IHVzZXJNZXNzYWdlXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIF9ub3JtYWxpemVNZXNzYWdlKHRlbXBsYXRlLCBmaWVsZCwgdmFsdWVzKSB7XHJcbiAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlKGZpZWxkLCB2YWx1ZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGludGVycG9sYXRlKHRlbXBsYXRlLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdmFsdWVzKSwgeyBfZmllbGRfOiBmaWVsZCB9KSk7XHJcbn1cclxuZnVuY3Rpb24gZmlsbFRhcmdldFZhbHVlcyhwYXJhbXMsIGNyb3NzVGFibGUpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcclxuICAgICAgICByZXR1cm4gcGFyYW1zO1xyXG4gICAgfVxyXG4gICAgdmFyIHZhbHVlcyA9IHt9O1xyXG4gICAgdmFyIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmIChpc0xvY2F0b3IodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZShjcm9zc1RhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcclxuICAgICAgICB2YWx1ZXNbcGFyYW1dID0gbm9ybWFsaXplKHBhcmFtc1twYXJhbV0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG59XG5cbnZhciBhZ2dyZXNzaXZlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcclxuICAgIG9uOiBbJ2lucHV0JywgJ2JsdXInXVxyXG59KTsgfTtcclxudmFyIGxhenkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xyXG4gICAgb246IFsnY2hhbmdlJ11cclxufSk7IH07XHJcbnZhciBlYWdlciA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgdmFyIGVycm9ycyA9IF9hLmVycm9ycztcclxuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb246IFsnaW5wdXQnLCAnY2hhbmdlJ11cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBvbjogWydjaGFuZ2UnLCAnYmx1ciddXHJcbiAgICB9O1xyXG59O1xyXG52YXIgcGFzc2l2ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XHJcbiAgICBvbjogW11cclxufSk7IH07XHJcbnZhciBtb2RlcyA9IHtcclxuICAgIGFnZ3Jlc3NpdmU6IGFnZ3Jlc3NpdmUsXHJcbiAgICBlYWdlcjogZWFnZXIsXHJcbiAgICBwYXNzaXZlOiBwYXNzaXZlLFxyXG4gICAgbGF6eTogbGF6eVxyXG59O1xyXG52YXIgc2V0SW50ZXJhY3Rpb25Nb2RlID0gZnVuY3Rpb24gKG1vZGUsIGltcGxlbWVudGF0aW9uKSB7XHJcbiAgICBzZXRDb25maWcoeyBtb2RlOiBtb2RlIH0pO1xyXG4gICAgaWYgKCFpbXBsZW1lbnRhdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaXNDYWxsYWJsZShpbXBsZW1lbnRhdGlvbikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgbW9kZSBpbXBsZW1lbnRhdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIG1vZGVzW21vZGVdID0gaW1wbGVtZW50YXRpb247XHJcbn07XG5cbnZhciBFVkVOVF9CVVMgPSBuZXcgVnVlKCk7XHJcbmZ1bmN0aW9uIGxvY2FsZUNoYW5nZWQoKSB7XHJcbiAgICBFVkVOVF9CVVMuJGVtaXQoJ2NoYW5nZTpsb2NhbGUnKTtcclxufVxuXG52YXIgRGljdGlvbmFyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERpY3Rpb25hcnkobG9jYWxlLCBkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSB7fTtcclxuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcclxuICAgICAgICB0aGlzLm1lcmdlKGRpY3Rpb25hcnkpO1xyXG4gICAgfVxyXG4gICAgRGljdGlvbmFyeS5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChmaWVsZCwgcnVsZSwgdmFsdWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMubG9jYWxlLCBmaWVsZCwgcnVsZSwgdmFsdWVzKTtcclxuICAgIH07XHJcbiAgICBEaWN0aW9uYXJ5LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobG9jYWxlLCBmaWVsZCwgcnVsZSwgdmFsdWVzKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcclxuICAgICAgICB2YXIgbWVzc2FnZTtcclxuICAgICAgICAvLyBmaW5kIGlmIHNwZWNpZmljIG1lc3NhZ2UgZm9yIHRoYXQgZmllbGQgd2FzIHNwZWNpZmllZC5cclxuICAgICAgICBtZXNzYWdlID0gKChfYyA9IChfYiA9IChfYSA9IHRoaXMuY29udGFpbmVyW2xvY2FsZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maWVsZHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYltmaWVsZF0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1tydWxlXSkgfHwgKChfZSA9IChfZCA9IHRoaXMuY29udGFpbmVyW2xvY2FsZV0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5tZXNzYWdlcykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lW3J1bGVdKTtcclxuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9ICd7X2ZpZWxkX30gaXMgbm90IHZhbGlkJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZmllbGQgPSAoX2ggPSAoX2cgPSAoX2YgPSB0aGlzLmNvbnRhaW5lcltsb2NhbGVdKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YubmFtZXMpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ1tmaWVsZF0pICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IGZpZWxkO1xyXG4gICAgICAgIHJldHVybiBpc0NhbGxhYmxlKG1lc3NhZ2UpID8gbWVzc2FnZShmaWVsZCwgdmFsdWVzKSA6IGludGVycG9sYXRlKG1lc3NhZ2UsIF9fYXNzaWduKF9fYXNzaWduKHt9LCB2YWx1ZXMpLCB7IF9maWVsZF86IGZpZWxkIH0pKTtcclxuICAgIH07XHJcbiAgICBEaWN0aW9uYXJ5LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChkaWN0aW9uYXJ5KSB7XHJcbiAgICAgICAgbWVyZ2UodGhpcy5jb250YWluZXIsIGRpY3Rpb25hcnkpO1xyXG4gICAgfTtcclxuICAgIERpY3Rpb25hcnkucHJvdG90eXBlLmhhc1J1bGUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgcmV0dXJuICEhKChfYiA9IChfYSA9IHRoaXMuY29udGFpbmVyW3RoaXMubG9jYWxlXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2VzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbbmFtZV0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEaWN0aW9uYXJ5O1xyXG59KCkpO1xyXG52YXIgRElDVElPTkFSWTtcclxuZnVuY3Rpb24gbG9jYWxpemUobG9jYWxlLCBkaWN0aW9uYXJ5KSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAoIURJQ1RJT05BUlkpIHtcclxuICAgICAgICBESUNUSU9OQVJZID0gbmV3IERpY3Rpb25hcnkoJ2VuJywge30pO1xyXG4gICAgICAgIHNldENvbmZpZyh7XHJcbiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiAoZmllbGQsIHZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERJQ1RJT05BUlkucmVzb2x2ZShmaWVsZCwgdmFsdWVzID09PSBudWxsIHx8IHZhbHVlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWVzLl9ydWxlXywgdmFsdWVzIHx8IHt9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBsb2NhbGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgRElDVElPTkFSWS5sb2NhbGUgPSBsb2NhbGU7XHJcbiAgICAgICAgaWYgKGRpY3Rpb25hcnkpIHtcclxuICAgICAgICAgICAgRElDVElPTkFSWS5tZXJnZSgoX2EgPSB7fSwgX2FbbG9jYWxlXSA9IGRpY3Rpb25hcnksIF9hKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvY2FsZUNoYW5nZWQoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBESUNUSU9OQVJZLm1lcmdlKGxvY2FsZSk7XHJcbn1cblxudmFyIGlzRXZlbnQgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICBpZiAoIWV2dCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgRXZlbnQgIT09ICd1bmRlZmluZWQnICYmIGlzQ2FsbGFibGUoRXZlbnQpICYmIGV2dCBpbnN0YW5jZW9mIEV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB0aGlzIGlzIGZvciBJRVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIGlmIChldnQgJiYgZXZ0LnNyY0VsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufTtcclxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgdmFyIF9hLCBfYjtcclxuICAgIGlmICghaXNFdmVudCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICB2YXIgaW5wdXQgPSB2YWx1ZS50YXJnZXQ7XHJcbiAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2ZpbGUnICYmIGlucHV0LmZpbGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvQXJyYXkoaW5wdXQuZmlsZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gSWYgdGhlIGlucHV0IGhhcyBhIGB2LW1vZGVsLm51bWJlcmAgbW9kaWZpZXIgYXBwbGllZC5cclxuICAgIGlmICgoX2EgPSBpbnB1dC5fdk1vZGlmaWVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm51bWJlcikge1xyXG4gICAgICAgIC8vIGFzIHBlciB0aGUgc3BlYyB0aGUgdi1tb2RlbC5udW1iZXIgdXNlcyBwYXJzZUZsb2F0XHJcbiAgICAgICAgdmFyIHZhbHVlQXNOdW1iZXIgPSBwYXJzZUZsb2F0KGlucHV0LnZhbHVlKTtcclxuICAgICAgICBpZiAoaXNOYU4odmFsdWVBc051bWJlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWVBc051bWJlcjtcclxuICAgIH1cclxuICAgIGlmICgoX2IgPSBpbnB1dC5fdk1vZGlmaWVycykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRyaW0pIHtcclxuICAgICAgICB2YXIgdHJpbW1lZFZhbHVlID0gdHlwZW9mIGlucHV0LnZhbHVlID09PSAnc3RyaW5nJyA/IGlucHV0LnZhbHVlLnRyaW0oKSA6IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIHJldHVybiB0cmltbWVkVmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5wdXQudmFsdWU7XHJcbn1cblxudmFyIGlzVGV4dElucHV0ID0gZnVuY3Rpb24gKHZub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgYXR0cnMgPSAoKF9hID0gdm5vZGUuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzKSB8fCB2bm9kZS5lbG07XHJcbiAgICAvLyBpdCB3aWxsIGZhbGxiYWNrIHRvIGJlaW5nIGEgdGV4dCBpbnB1dCBwZXIgYnJvd3NlcnMgc3BlYy5cclxuICAgIGlmICh2bm9kZS50YWcgPT09ICdpbnB1dCcgJiYgKCFhdHRycyB8fCAhYXR0cnMudHlwZSkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbmNsdWRlcyhbJ3RleHQnLCAncGFzc3dvcmQnLCAnc2VhcmNoJywgJ2VtYWlsJywgJ3RlbCcsICd1cmwnLCAnbnVtYmVyJ10sIGF0dHJzID09PSBudWxsIHx8IGF0dHJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhdHRycy50eXBlKTtcclxufTtcclxuLy8gZXhwb3J0IGNvbnN0IGlzQ2hlY2tib3hPclJhZGlvSW5wdXQgPSAodm5vZGU6IFZOb2RlKTogYm9vbGVhbiA9PiB7XHJcbi8vICAgY29uc3QgYXR0cnMgPSAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzKSB8fCB2bm9kZS5lbG07XHJcbi8vICAgcmV0dXJuIGluY2x1ZGVzKFsncmFkaW8nLCAnY2hlY2tib3gnXSwgYXR0cnMgJiYgYXR0cnMudHlwZSk7XHJcbi8vIH07XHJcbi8vIEdldHMgdGhlIG1vZGVsIG9iamVjdCBvbiB0aGUgdm5vZGUuXHJcbmZ1bmN0aW9uIGZpbmRNb2RlbCh2bm9kZSkge1xyXG4gICAgaWYgKCF2bm9kZS5kYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8vIENvbXBvbmVudCBNb2RlbFxyXG4gICAgLy8gVEhJUyBJUyBOT1QgVFlQRUQgSU4gT0ZGSUNJQUwgVlVFIFRZUElOR1NcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4gICAgdmFyIG5vblN0YW5kYXJkVk5vZGVEYXRhID0gdm5vZGUuZGF0YTtcclxuICAgIGlmICgnbW9kZWwnIGluIG5vblN0YW5kYXJkVk5vZGVEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vblN0YW5kYXJkVk5vZGVEYXRhLm1vZGVsO1xyXG4gICAgfVxyXG4gICAgaWYgKCF2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbmQodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnbW9kZWwnOyB9KTtcclxufVxyXG5mdW5jdGlvbiBmaW5kVmFsdWUodm5vZGUpIHtcclxuICAgIHZhciBfYSwgX2I7XHJcbiAgICB2YXIgbW9kZWwgPSBmaW5kTW9kZWwodm5vZGUpO1xyXG4gICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG1vZGVsLnZhbHVlIH07XHJcbiAgICB9XHJcbiAgICB2YXIgY29uZmlnID0gZmluZE1vZGVsQ29uZmlnKHZub2RlKTtcclxuICAgIHZhciBwcm9wID0gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5wcm9wKSB8fCAndmFsdWUnO1xyXG4gICAgaWYgKCgoX2EgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJvcHNEYXRhKSAmJiBwcm9wIGluIHZub2RlLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhKSB7XHJcbiAgICAgICAgdmFyIHByb3BzRGF0YVdpdGhWYWx1ZSA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xyXG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBwcm9wc0RhdGFXaXRoVmFsdWVbcHJvcF0gfTtcclxuICAgIH1cclxuICAgIGlmICgoKF9iID0gdm5vZGUuZGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmRvbVByb3BzKSAmJiAndmFsdWUnIGluIHZub2RlLmRhdGEuZG9tUHJvcHMpIHtcclxuICAgICAgICByZXR1cm4geyB2YWx1ZTogdm5vZGUuZGF0YS5kb21Qcm9wcy52YWx1ZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0Q2hpbGRyZW4odm5vZGUpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xyXG4gICAgICAgIHJldHVybiB2bm9kZS5jaGlsZHJlbjtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICBpZiAodm5vZGUuY29tcG9uZW50T3B0aW9ucyAmJiBBcnJheS5pc0FycmF5KHZub2RlLmNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW107XHJcbn1cclxuZnVuY3Rpb24gZmluZElucHV0Tm9kZSh2bm9kZSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZub2RlKSAmJiBmaW5kVmFsdWUodm5vZGUpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbiAgICB2YXIgY2hpbGRyZW4gPSBleHRyYWN0Q2hpbGRyZW4odm5vZGUpO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbiAoY2FuZGlkYXRlLCBub2RlKSB7XHJcbiAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmluZElucHV0Tm9kZShub2RlKTtcclxuICAgIH0sIG51bGwpO1xyXG59XHJcbi8vIFJlc29sdmVzIHYtbW9kZWwgY29uZmlnIGlmIGV4aXN0cy5cclxuZnVuY3Rpb24gZmluZE1vZGVsQ29uZmlnKHZub2RlKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCF2bm9kZS5jb21wb25lbnRPcHRpb25zKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gVGhpcyBpcyBhbHNvIG5vdCB0eXBlZCBpbiB0aGUgc3RhbmRhcmQgVnVlIFRTLlxyXG4gICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3Rvci5vcHRpb25zLm1vZGVsO1xyXG59XHJcbi8vIEFkZHMgYSBsaXN0ZW5lciB0byB2bm9kZSBsaXN0ZW5lciBvYmplY3QuXHJcbmZ1bmN0aW9uIG1lcmdlVk5vZGVMaXN0ZW5lcnMob2JqLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcclxuICAgIC8vIG5vIGxpc3RlbmVyIGF0IGFsbC5cclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZChvYmpbZXZlbnROYW1lXSkpIHtcclxuICAgICAgICBvYmpbZXZlbnROYW1lXSA9IFtoYW5kbGVyXTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBJcyBhbiBpbnZva2VyLlxyXG4gICAgaWYgKGlzQ2FsbGFibGUob2JqW2V2ZW50TmFtZV0pICYmIG9ialtldmVudE5hbWVdLmZucykge1xyXG4gICAgICAgIHZhciBpbnZva2VyID0gb2JqW2V2ZW50TmFtZV07XHJcbiAgICAgICAgaW52b2tlci5mbnMgPSBBcnJheS5pc0FycmF5KGludm9rZXIuZm5zKSA/IGludm9rZXIuZm5zIDogW2ludm9rZXIuZm5zXTtcclxuICAgICAgICBpZiAoIWluY2x1ZGVzKGludm9rZXIuZm5zLCBoYW5kbGVyKSkge1xyXG4gICAgICAgICAgICBpbnZva2VyLmZucy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNDYWxsYWJsZShvYmpbZXZlbnROYW1lXSkpIHtcclxuICAgICAgICB2YXIgcHJldiA9IG9ialtldmVudE5hbWVdO1xyXG4gICAgICAgIG9ialtldmVudE5hbWVdID0gW3ByZXZdO1xyXG4gICAgfVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2V2ZW50TmFtZV0pICYmICFpbmNsdWRlcyhvYmpbZXZlbnROYW1lXSwgaGFuZGxlcikpIHtcclxuICAgICAgICBvYmpbZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgfVxyXG59XHJcbi8vIEFkZHMgYSBsaXN0ZW5lciB0byBhIG5hdGl2ZSBIVE1MIHZub2RlLlxyXG5mdW5jdGlvbiBhZGROYXRpdmVOb2RlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFub2RlLmRhdGEpIHtcclxuICAgICAgICBub2RlLmRhdGEgPSB7fTtcclxuICAgIH1cclxuICAgIGlmIChpc051bGxPclVuZGVmaW5lZChub2RlLmRhdGEub24pKSB7XHJcbiAgICAgICAgbm9kZS5kYXRhLm9uID0ge307XHJcbiAgICB9XHJcbiAgICBtZXJnZVZOb2RlTGlzdGVuZXJzKG5vZGUuZGF0YS5vbiwgZXZlbnROYW1lLCBoYW5kbGVyKTtcclxufVxyXG4vLyBBZGRzIGEgbGlzdGVuZXIgdG8gYSBWdWUgY29tcG9uZW50IHZub2RlLlxyXG5mdW5jdGlvbiBhZGRDb21wb25lbnROb2RlTGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFub2RlLmNvbXBvbmVudE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFub2RlLmNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzKSB7XHJcbiAgICAgICAgbm9kZS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgfVxyXG4gICAgbWVyZ2VWTm9kZUxpc3RlbmVycyhub2RlLmNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzLCBldmVudE5hbWUsIGhhbmRsZXIpO1xyXG59XHJcbmZ1bmN0aW9uIGFkZFZOb2RlTGlzdGVuZXIodm5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xyXG4gICAgaWYgKHZub2RlLmNvbXBvbmVudE9wdGlvbnMpIHtcclxuICAgICAgICBhZGRDb21wb25lbnROb2RlTGlzdGVuZXIodm5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgYWRkTmF0aXZlTm9kZUxpc3RlbmVyKHZub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpO1xyXG59XHJcbi8vIERldGVybWluZXMgaWYgYGNoYW5nZWAgc2hvdWxkIGJlIHVzZWQgb3ZlciBgaW5wdXRgIGZvciBsaXN0ZW5lcnMuXHJcbmZ1bmN0aW9uIGdldElucHV0RXZlbnROYW1lKHZub2RlLCBtb2RlbCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgLy8gSXMgYSBjb21wb25lbnQuXHJcbiAgICBpZiAodm5vZGUuY29tcG9uZW50T3B0aW9ucykge1xyXG4gICAgICAgIHZhciBldmVudF8xID0gKGZpbmRNb2RlbENvbmZpZyh2bm9kZSkgfHwgeyBldmVudDogJ2lucHV0JyB9KS5ldmVudDtcclxuICAgICAgICByZXR1cm4gZXZlbnRfMTtcclxuICAgIH1cclxuICAgIC8vIExhenkgTW9kZWxzIHR5cGljYWxseSB1c2UgY2hhbmdlIGV2ZW50XHJcbiAgICBpZiAoKF9hID0gbW9kZWwgPT09IG51bGwgfHwgbW9kZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1vZGVsLm1vZGlmaWVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxhenkpIHtcclxuICAgICAgICByZXR1cm4gJ2NoYW5nZSc7XHJcbiAgICB9XHJcbiAgICAvLyBpcyBhIHRleHR1YWwtdHlwZSBpbnB1dC5cclxuICAgIGlmIChpc1RleHRJbnB1dCh2bm9kZSkpIHtcclxuICAgICAgICByZXR1cm4gJ2lucHV0JztcclxuICAgIH1cclxuICAgIHJldHVybiAnY2hhbmdlJztcclxufVxyXG5mdW5jdGlvbiBpc0hUTUxOb2RlKG5vZGUpIHtcclxuICAgIHJldHVybiBpbmNsdWRlcyhbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddLCBub2RlLnRhZyk7XHJcbn1cclxuLy8gVE9ETzogVHlwZSB0aGlzIG9uZSBwcm9wZXJseS5cclxuZnVuY3Rpb24gbm9ybWFsaXplU2xvdHMoc2xvdHMsIGN0eCkge1xyXG4gICAgdmFyIGFjYyA9IFtdO1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNsb3RzKS5yZWR1Y2UoZnVuY3Rpb24gKGFyciwga2V5KSB7XHJcbiAgICAgICAgc2xvdHNba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh2bm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIXZub2RlLmNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHNsb3RzW2tleV0uY29udGV4dCA9IGN0eDtcclxuICAgICAgICAgICAgICAgIGlmICghdm5vZGUuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLmRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZub2RlLmRhdGEuc2xvdCA9IGtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhcnIuY29uY2F0KHNsb3RzW2tleV0pO1xyXG4gICAgfSwgYWNjKTtcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlVGV4dHVhbFJ1bGVzKHZub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgYXR0cnMgPSAoX2EgPSB2bm9kZS5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXR0cnM7XHJcbiAgICB2YXIgcnVsZXMgPSB7fTtcclxuICAgIGlmICghYXR0cnMpXHJcbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xyXG4gICAgaWYgKGF0dHJzLnR5cGUgPT09ICdlbWFpbCcgJiYgUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbignZW1haWwnKSkge1xyXG4gICAgICAgIHJ1bGVzLmVtYWlsID0gWydtdWx0aXBsZScgaW4gYXR0cnNdO1xyXG4gICAgfVxyXG4gICAgaWYgKGF0dHJzLnBhdHRlcm4gJiYgUnVsZUNvbnRhaW5lci5nZXRSdWxlRGVmaW5pdGlvbigncmVnZXgnKSkge1xyXG4gICAgICAgIHJ1bGVzLnJlZ2V4ID0gYXR0cnMucGF0dGVybjtcclxuICAgIH1cclxuICAgIGlmIChhdHRycy5tYXhsZW5ndGggPj0gMCAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdtYXgnKSkge1xyXG4gICAgICAgIHJ1bGVzLm1heCA9IGF0dHJzLm1heGxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmIChhdHRycy5taW5sZW5ndGggPj0gMCAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdtaW4nKSkge1xyXG4gICAgICAgIHJ1bGVzLm1pbiA9IGF0dHJzLm1pbmxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmIChhdHRycy50eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmIChpc1NwZWNpZmllZChhdHRycy5taW4pICYmIFJ1bGVDb250YWluZXIuZ2V0UnVsZURlZmluaXRpb24oJ21pbl92YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHJ1bGVzLm1pbl92YWx1ZSA9IE51bWJlcihhdHRycy5taW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNTcGVjaWZpZWQoYXR0cnMubWF4KSAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdtYXhfdmFsdWUnKSkge1xyXG4gICAgICAgICAgICBydWxlcy5tYXhfdmFsdWUgPSBOdW1iZXIoYXR0cnMubWF4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcnVsZXM7XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZVJ1bGVzKHZub2RlKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICB2YXIgaHRtbFRhZ3MgPSBbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddO1xyXG4gICAgdmFyIGF0dHJzID0gKF9hID0gdm5vZGUuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzO1xyXG4gICAgaWYgKCFpbmNsdWRlcyhodG1sVGFncywgdm5vZGUudGFnKSB8fCAhYXR0cnMpIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICB2YXIgcnVsZXMgPSB7fTtcclxuICAgIGlmICgncmVxdWlyZWQnIGluIGF0dHJzICYmIGF0dHJzLnJlcXVpcmVkICE9PSBmYWxzZSAmJiBSdWxlQ29udGFpbmVyLmdldFJ1bGVEZWZpbml0aW9uKCdyZXF1aXJlZCcpKSB7XHJcbiAgICAgICAgcnVsZXMucmVxdWlyZWQgPSBhdHRycy50eXBlID09PSAnY2hlY2tib3gnID8gW3RydWVdIDogdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChpc1RleHRJbnB1dCh2bm9kZSkpIHtcclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplUnVsZXMoX19hc3NpZ24oX19hc3NpZ24oe30sIHJ1bGVzKSwgcmVzb2x2ZVRleHR1YWxSdWxlcyh2bm9kZSkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVSdWxlcyhydWxlcyk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4oY29udGV4dCwgc2xvdFByb3BzKSB7XHJcbiAgICBpZiAoY29udGV4dC4kc2NvcGVkU2xvdHMuZGVmYXVsdCkge1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0LiRzY29wZWRTbG90cy5kZWZhdWx0KHNsb3RQcm9wcykgfHwgW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGV4dC4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcclxufVxuXG4vKipcclxuICogRGV0ZXJtaW5lcyBpZiBhIHByb3ZpZGVyIG5lZWRzIHRvIHJ1biB2YWxpZGF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hvdWxkVmFsaWRhdGUoY3R4LCB2YWx1ZSkge1xyXG4gICAgLy8gd2hlbiBhbiBpbW1lZGlhdGUvaW5pdGlhbCB2YWxpZGF0aW9uIGlzIG5lZWRlZCBhbmQgd2Fzbid0IGRvbmUgYmVmb3JlLlxyXG4gICAgaWYgKCFjdHguX2lnbm9yZUltbWVkaWF0ZSAmJiBjdHguaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzIGZvciB3aGF0ZXZlciByZWFzb24uXHJcbiAgICBpZiAoY3R4LnZhbHVlICE9PSB2YWx1ZSAmJiBjdHgubm9ybWFsaXplZEV2ZW50cy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIHdoZW4gaXQgbmVlZHMgdmFsaWRhdGlvbiBkdWUgdG8gcHJvcHMvY3Jvc3MtZmllbGRzIGNoYW5nZXMuXHJcbiAgICBpZiAoY3R4Ll9uZWVkc1ZhbGlkYXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIHdoZW4gdGhlIGluaXRpYWwgdmFsdWUgaXMgdW5kZWZpbmVkIGFuZCB0aGUgZmllbGQgd2Fzbid0IHJlbmRlcmVkIHlldC5cclxuICAgIGlmICghY3R4LmluaXRpYWxpemVkICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0aW9uQ3R4KGN0eCkge1xyXG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBjdHguZmxhZ3MpLCB7IGVycm9yczogY3R4LmVycm9ycywgY2xhc3NlczogY3R4LmNsYXNzZXMsIGZhaWxlZFJ1bGVzOiBjdHguZmFpbGVkUnVsZXMsIHJlc2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjdHgucmVzZXQoKTsgfSwgdmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY3R4LnZhbGlkYXRlLmFwcGx5KGN0eCwgYXJncyk7XHJcbiAgICAgICAgfSwgYXJpYUlucHV0OiB7XHJcbiAgICAgICAgICAgICdhcmlhLWludmFsaWQnOiBjdHguZmxhZ3MuaW52YWxpZCA/ICd0cnVlJyA6ICdmYWxzZScsXHJcbiAgICAgICAgICAgICdhcmlhLXJlcXVpcmVkJzogY3R4LmlzUmVxdWlyZWQgPyAndHJ1ZScgOiAnZmFsc2UnLFxyXG4gICAgICAgICAgICAnYXJpYS1lcnJvcm1lc3NhZ2UnOiBcInZlZV9cIiArIGN0eC5pZFxyXG4gICAgICAgIH0sIGFyaWFNc2c6IHtcclxuICAgICAgICAgICAgaWQ6IFwidmVlX1wiICsgY3R4LmlkLFxyXG4gICAgICAgICAgICAnYXJpYS1saXZlJzogY3R4LmVycm9ycy5sZW5ndGggPyAnYXNzZXJ0aXZlJyA6ICdvZmYnXHJcbiAgICAgICAgfSB9KTtcclxufVxyXG5mdW5jdGlvbiBvblJlbmRlclVwZGF0ZSh2bSwgdmFsdWUpIHtcclxuICAgIGlmICghdm0uaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICB2bS5pbml0aWFsVmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIHZhciB2YWxpZGF0ZU5vdyA9IHNob3VsZFZhbGlkYXRlKHZtLCB2YWx1ZSk7XHJcbiAgICB2bS5fbmVlZHNWYWxpZGF0aW9uID0gZmFsc2U7XHJcbiAgICB2bS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgdm0uX2lnbm9yZUltbWVkaWF0ZSA9IHRydWU7XHJcbiAgICBpZiAoIXZhbGlkYXRlTm93KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh2bS5pbW1lZGlhdGUgfHwgdm0uZmxhZ3MudmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyVGhyZWFkU2FmZVZhbGlkYXRpb24odm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2bS52YWxpZGF0ZVNpbGVudCgpO1xyXG4gICAgfTtcclxuICAgIGlmICh2bS5pbml0aWFsaXplZCkge1xyXG4gICAgICAgIHZhbGlkYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdm0uJG9uY2UoJ2hvb2s6bW91bnRlZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlKCk7IH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNvbXB1dGVNb2RlU2V0dGluZyhjdHgpIHtcclxuICAgIHZhciBjb21wdXRlID0gKGlzQ2FsbGFibGUoY3R4Lm1vZGUpID8gY3R4Lm1vZGUgOiBtb2Rlc1tjdHgubW9kZV0pO1xyXG4gICAgcmV0dXJuIGNvbXB1dGUoY3R4KTtcclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyVGhyZWFkU2FmZVZhbGlkYXRpb24odm0pIHtcclxuICAgIHZhciBwZW5kaW5nUHJvbWlzZSA9IHZtLnZhbGlkYXRlU2lsZW50KCk7XHJcbiAgICAvLyBhdm9pZHMgcmFjZSBjb25kaXRpb25zIGJldHdlZW4gc3VjY2Vzc2l2ZSB2YWxpZGF0aW9ucy5cclxuICAgIHZtLl9wZW5kaW5nVmFsaWRhdGlvbiA9IHBlbmRpbmdQcm9taXNlO1xyXG4gICAgcmV0dXJuIHBlbmRpbmdQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgIGlmIChwZW5kaW5nUHJvbWlzZSA9PT0gdm0uX3BlbmRpbmdWYWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZtLmFwcGx5UmVzdWx0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgIHZtLl9wZW5kaW5nVmFsaWRhdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0pO1xyXG59XHJcbi8vIENyZWF0ZXMgdGhlIGNvbW1vbiBoYW5kbGVycyBmb3IgYSB2YWxpZGF0YWJsZSBjb250ZXh0LlxyXG5mdW5jdGlvbiBjcmVhdGVDb21tb25IYW5kbGVycyh2bSkge1xyXG4gICAgaWYgKCF2bS4kdmVlT25JbnB1dCkge1xyXG4gICAgICAgIHZtLiR2ZWVPbklucHV0ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdm0uc3luY1ZhbHVlKGUpOyAvLyB0cmFjayBhbmQga2VlcCB0aGUgdmFsdWUgdXBkYXRlZC5cclxuICAgICAgICAgICAgdm0uc2V0RmxhZ3MoeyBkaXJ0eTogdHJ1ZSwgcHJpc3RpbmU6IGZhbHNlIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICB2YXIgb25JbnB1dCA9IHZtLiR2ZWVPbklucHV0O1xyXG4gICAgaWYgKCF2bS4kdmVlT25CbHVyKSB7XHJcbiAgICAgICAgdm0uJHZlZU9uQmx1ciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uc2V0RmxhZ3MoeyB0b3VjaGVkOiB0cnVlLCB1bnRvdWNoZWQ6IGZhbHNlIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBCbHVyIGV2ZW50IGxpc3RlbmVyLlxyXG4gICAgdmFyIG9uQmx1ciA9IHZtLiR2ZWVPbkJsdXI7XHJcbiAgICB2YXIgb25WYWxpZGF0ZSA9IHZtLiR2ZWVIYW5kbGVyO1xyXG4gICAgdmFyIG1vZGUgPSBjb21wdXRlTW9kZVNldHRpbmcodm0pO1xyXG4gICAgLy8gSGFuZGxlIGRlYm91bmNlIGNoYW5nZXMuXHJcbiAgICBpZiAoIW9uVmFsaWRhdGUgfHwgdm0uJHZlZURlYm91bmNlICE9PSB2bS5kZWJvdW5jZSkge1xyXG4gICAgICAgIG9uVmFsaWRhdGUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZtLl9wZW5kaW5nUmVzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyVGhyZWFkU2FmZVZhbGlkYXRpb24odm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdm0uX3BlbmRpbmdSZXNldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBtb2RlLmRlYm91bmNlIHx8IHZtLmRlYm91bmNlKTtcclxuICAgICAgICAvLyBDYWNoZSB0aGUgaGFuZGxlciBzbyB3ZSBkb24ndCBjcmVhdGUgaXQgZWFjaCB0aW1lLlxyXG4gICAgICAgIHZtLiR2ZWVIYW5kbGVyID0gb25WYWxpZGF0ZTtcclxuICAgICAgICAvLyBjYWNoZSB0aGUgZGVib3VuY2UgdmFsdWUgc28gd2UgZGV0ZWN0IGlmIGl0IHdhcyBjaGFuZ2VkLlxyXG4gICAgICAgIHZtLiR2ZWVEZWJvdW5jZSA9IHZtLmRlYm91bmNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgb25JbnB1dDogb25JbnB1dCwgb25CbHVyOiBvbkJsdXIsIG9uVmFsaWRhdGU6IG9uVmFsaWRhdGUgfTtcclxufVxyXG4vLyBBZGRzIGFsbCBwbHVnaW4gbGlzdGVuZXJzIHRvIHRoZSB2bm9kZS5cclxuZnVuY3Rpb24gYWRkTGlzdGVuZXJzKHZtLCBub2RlKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBmaW5kVmFsdWUobm9kZSk7XHJcbiAgICAvLyBjYWNoZSB0aGUgaW5wdXQgZXZlbnROYW1lLlxyXG4gICAgdm0uX2lucHV0RXZlbnROYW1lID0gdm0uX2lucHV0RXZlbnROYW1lIHx8IGdldElucHV0RXZlbnROYW1lKG5vZGUsIGZpbmRNb2RlbChub2RlKSk7XHJcbiAgICBvblJlbmRlclVwZGF0ZSh2bSwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnZhbHVlKTtcclxuICAgIHZhciBfYSA9IGNyZWF0ZUNvbW1vbkhhbmRsZXJzKHZtKSwgb25JbnB1dCA9IF9hLm9uSW5wdXQsIG9uQmx1ciA9IF9hLm9uQmx1ciwgb25WYWxpZGF0ZSA9IF9hLm9uVmFsaWRhdGU7XHJcbiAgICBhZGRWTm9kZUxpc3RlbmVyKG5vZGUsIHZtLl9pbnB1dEV2ZW50TmFtZSwgb25JbnB1dCk7XHJcbiAgICBhZGRWTm9kZUxpc3RlbmVyKG5vZGUsICdibHVyJywgb25CbHVyKTtcclxuICAgIC8vIGFkZCB0aGUgdmFsaWRhdGlvbiBsaXN0ZW5lcnMuXHJcbiAgICB2bS5ub3JtYWxpemVkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIGFkZFZOb2RlTGlzdGVuZXIobm9kZSwgZXZ0LCBvblZhbGlkYXRlKTtcclxuICAgIH0pO1xyXG4gICAgdm0uaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG59XG5cbnZhciBQUk9WSURFUl9DT1VOVEVSID0gMDtcclxuZnVuY3Rpb24gZGF0YSgpIHtcclxuICAgIHZhciBlcnJvcnMgPSBbXTtcclxuICAgIHZhciBmaWVsZE5hbWUgPSAnJztcclxuICAgIHZhciBkZWZhdWx0VmFsdWVzID0ge1xyXG4gICAgICAgIGVycm9yczogZXJyb3JzLFxyXG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGluaXRpYWxWYWx1ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgIGZsYWdzOiBjcmVhdGVGbGFncygpLFxyXG4gICAgICAgIGZhaWxlZFJ1bGVzOiB7fSxcclxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcclxuICAgICAgICBmaWVsZE5hbWU6IGZpZWxkTmFtZSxcclxuICAgICAgICBpZDogJydcclxuICAgIH07XHJcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlcztcclxufVxyXG52YXIgVmFsaWRhdGlvblByb3ZpZGVyID0gVnVlLmV4dGVuZCh7XHJcbiAgICBpbmplY3Q6IHtcclxuICAgICAgICAkX3ZlZU9ic2VydmVyOiB7XHJcbiAgICAgICAgICAgIGZyb206ICckX3ZlZU9ic2VydmVyJyxcclxuICAgICAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiR2bm9kZS5jb250ZXh0LiRfdmVlT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiR2bm9kZS5jb250ZXh0LiRfdmVlT2JzZXJ2ZXIgPSBjcmVhdGVPYnNlcnZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHZub2RlLmNvbnRleHQuJF92ZWVPYnNlcnZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHZpZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBuYW1lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9kZToge1xyXG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBGdW5jdGlvbl0sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb25maWcoKS5tb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBydWxlczoge1xyXG4gICAgICAgICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbW1lZGlhdGU6IHtcclxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJhaWxzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldENvbmZpZygpLmJhaWxzOyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBza2lwSWZFbXB0eToge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRDb25maWcoKS5za2lwT3B0aW9uYWw7IH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlYm91bmNlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgICAgICAgZGVmYXVsdDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFnOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ3NwYW4nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzbGltOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VzdG9tTWVzc2FnZXM6IHtcclxuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgd2F0Y2g6IHtcclxuICAgICAgICBydWxlczoge1xyXG4gICAgICAgICAgICBkZWVwOiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiAodmFsLCBvbGRWYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25lZWRzVmFsaWRhdGlvbiA9ICFpc0VxdWFsKHZhbCwgb2xkVmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhOiBkYXRhLFxyXG4gICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICBmaWVsZERlcHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubm9ybWFsaXplZFJ1bGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcnVsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlcHMgPSBleHRyYWN0TG9jYXRvcnMoX3RoaXMubm9ybWFsaXplZFJ1bGVzW3J1bGVdKS5tYXAoZnVuY3Rpb24gKGRlcCkgeyByZXR1cm4gZGVwLl9fbG9jYXRvclJlZjsgfSk7XHJcbiAgICAgICAgICAgICAgICBhY2MucHVzaC5hcHBseShhY2MsIGRlcHMpO1xyXG4gICAgICAgICAgICAgICAgZGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXBOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hDcm9zc0ZpZWxkRGVwKF90aGlzLCBkZXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgW10pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbm9ybWFsaXplZEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgb24gPSBjb21wdXRlTW9kZVNldHRpbmcodGhpcykub247XHJcbiAgICAgICAgICAgIHJldHVybiAob24gfHwgW10pLm1hcChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT09ICdpbnB1dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2lucHV0RXZlbnROYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNSZXF1aXJlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5fcmVzb2x2ZWRSdWxlcyksIHRoaXMubm9ybWFsaXplZFJ1bGVzKTtcclxuICAgICAgICAgICAgdmFyIGlzUmVxdWlyZWQgPSBPYmplY3Qua2V5cyhydWxlcykuc29tZShSdWxlQ29udGFpbmVyLmlzUmVxdWlyZVJ1bGUpO1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLnJlcXVpcmVkID0gISFpc1JlcXVpcmVkO1xyXG4gICAgICAgICAgICByZXR1cm4gaXNSZXF1aXJlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsYXNzZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gZ2V0Q29uZmlnKCkuY2xhc3NlcztcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVDbGFzc09iaihuYW1lcywgdGhpcy5mbGFncyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBub3JtYWxpemVkUnVsZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVJ1bGVzKHRoaXMucnVsZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb25Mb2NhbGVDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIV90aGlzLmZsYWdzLnZhbGlkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZWdlbmVyYXRlTWFwID0gX3RoaXMuX3JlZ2VuZXJhdGVNYXA7XHJcbiAgICAgICAgICAgIGlmIChyZWdlbmVyYXRlTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JzXzEgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBmYWlsZWRSdWxlc18xID0ge307XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyZWdlbmVyYXRlTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IHJlZ2VuZXJhdGVNYXBbcnVsZV0oKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnNfMS5wdXNoKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkUnVsZXNfMVtydWxlXSA9IG1zZztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYXBwbHlSZXN1bHQoeyBlcnJvcnM6IGVycm9yc18xLCBmYWlsZWRSdWxlczogZmFpbGVkUnVsZXNfMSwgcmVnZW5lcmF0ZU1hcDogcmVnZW5lcmF0ZU1hcCB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy52YWxpZGF0ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRVZFTlRfQlVTLiRvbignY2hhbmdlOmxvY2FsZScsIG9uTG9jYWxlQ2hhbmdlZCk7XHJcbiAgICAgICAgdGhpcy4kb24oJ2hvb2s6YmVmb3JlRGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgRVZFTlRfQlVTLiRvZmYoJ2NoYW5nZTpsb2NhbGUnLCBvbkxvY2FsZUNoYW5nZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckZpZWxkKCk7XHJcbiAgICAgICAgdmFyIGN0eCA9IGNyZWF0ZVZhbGlkYXRpb25DdHgodGhpcyk7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4odGhpcywgY3R4KTtcclxuICAgICAgICB2YXIgaW5wdXQgPSBmaW5kSW5wdXROb2RlKGNoaWxkcmVuKTtcclxuICAgICAgICBpZiAoIWlucHV0KSB7XHJcbiAgICAgICAgICAgIC8vIFNpbGVudCBleGl0IGlmIG5vIGlucHV0IHdhcyBmb3VuZC5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2xpbSAmJiBjaGlsZHJlbi5sZW5ndGggPD0gMSA/IGNoaWxkcmVuWzBdIDogaCh0aGlzLnRhZywgY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBnZXRDb25maWcoKS51c2VDb25zdHJhaW50QXR0cnMgPyByZXNvbHZlUnVsZXMoaW5wdXQpIDoge307XHJcbiAgICAgICAgaWYgKCFpc0VxdWFsKHRoaXMuX3Jlc29sdmVkUnVsZXMsIHJlc29sdmVkKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9uZWVkc1ZhbGlkYXRpb24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNIVE1MTm9kZShpbnB1dCkpIHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZE5hbWUgPSAoKF9iID0gKF9hID0gaW5wdXQuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZSkgfHwgKChfZCA9IChfYyA9IGlucHV0LmRhdGEpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5hdHRycykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWRSdWxlcyA9IHJlc29sdmVkO1xyXG4gICAgICAgIGFkZExpc3RlbmVycyh0aGlzLCBpbnB1dCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2xpbSAmJiBjaGlsZHJlbi5sZW5ndGggPD0gMSA/IGNoaWxkcmVuWzBdIDogaCh0aGlzLnRhZywgY2hpbGRyZW4pO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBjbGVhbnVwIHJlZmVyZW5jZS5cclxuICAgICAgICB0aGlzLiRfdmVlT2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuaWQpO1xyXG4gICAgfSxcclxuICAgIGFjdGl2YXRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xyXG4gICAgfSxcclxuICAgIGRlYWN0aXZhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBzZXRGbGFnczogZnVuY3Rpb24gKGZsYWdzKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGZsYWdzKS5mb3JFYWNoKGZ1bmN0aW9uIChmbGFnKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5mbGFnc1tmbGFnXSA9IGZsYWdzW2ZsYWddO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN5bmNWYWx1ZTogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbm9ybWFsaXplRXZlbnRWYWx1ZSh2KTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLmNoYW5nZWQgPSB0aGlzLmluaXRpYWxWYWx1ZSAhPT0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIHZhciBmbGFncyA9IGNyZWF0ZUZsYWdzKCk7XHJcbiAgICAgICAgICAgIGZsYWdzLnJlcXVpcmVkID0gdGhpcy5pc1JlcXVpcmVkO1xyXG4gICAgICAgICAgICB0aGlzLnNldEZsYWdzKGZsYWdzKTtcclxuICAgICAgICAgICAgdGhpcy5mYWlsZWRSdWxlcyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlU2lsZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdWYWxpZGF0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9wZW5kaW5nUmVzZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSwgdGhpcy5kZWJvdW5jZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3luY1ZhbHVlKGFyZ3NbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdHJpZ2dlclRocmVhZFNhZmVWYWxpZGF0aW9uKHRoaXMpXTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlU2lsZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBydWxlcywgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGFncyh7IHBlbmRpbmc6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9yZXNvbHZlZFJ1bGVzKSwgdGhpcy5ub3JtYWxpemVkUnVsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJ1bGVzLCAnXyQkaXNOb3JtYWxpemVkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHZhbGlkYXRlKHRoaXMudmFsdWUsIHJ1bGVzLCBfX2Fzc2lnbihfX2Fzc2lnbih7IG5hbWU6IHRoaXMubmFtZSB8fCB0aGlzLmZpZWxkTmFtZSB9LCBjcmVhdGVMb29rdXAodGhpcykpLCB7IGJhaWxzOiB0aGlzLmJhaWxzLCBza2lwSWZFbXB0eTogdGhpcy5za2lwSWZFbXB0eSwgaXNJbml0aWFsOiAhdGhpcy5pbml0aWFsaXplZCwgY3VzdG9tTWVzc2FnZXM6IHRoaXMuY3VzdG9tTWVzc2FnZXMgfSkpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGFncyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHJlc3VsdC52YWxpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkOiAhcmVzdWx0LnZhbGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEVycm9yczogZnVuY3Rpb24gKGVycm9ycykge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5UmVzdWx0KHsgZXJyb3JzOiBlcnJvcnMsIGZhaWxlZFJ1bGVzOiB7fSB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFwcGx5UmVzdWx0OiBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIGVycm9ycyA9IF9hLmVycm9ycywgZmFpbGVkUnVsZXMgPSBfYS5mYWlsZWRSdWxlcywgcmVnZW5lcmF0ZU1hcCA9IF9hLnJlZ2VuZXJhdGVNYXA7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWdlbmVyYXRlTWFwID0gcmVnZW5lcmF0ZU1hcDtcclxuICAgICAgICAgICAgdGhpcy5mYWlsZWRSdWxlcyA9IF9fYXNzaWduKHt9LCAoZmFpbGVkUnVsZXMgfHwge30pKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRGbGFncyh7XHJcbiAgICAgICAgICAgICAgICB2YWxpZDogIWVycm9ycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBwYXNzZWQ6ICFlcnJvcnMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgaW52YWxpZDogISFlcnJvcnMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgZmFpbGVkOiAhIWVycm9ycy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VkOiB0aGlzLnZhbHVlICE9PSB0aGlzLmluaXRpYWxWYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZ2lzdGVyRmllbGQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXBkYXRlUmVuZGVyaW5nQ29udGV4dFJlZnModGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuZnVuY3Rpb24gY29tcHV0ZUNsYXNzT2JqKG5hbWVzLCBmbGFncykge1xyXG4gICAgdmFyIGFjYyA9IHt9O1xyXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmbGFncyk7XHJcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgdmFyIGZsYWcgPSBrZXlzW2ldO1xyXG4gICAgICAgIHZhciBjbGFzc05hbWUgPSAobmFtZXMgJiYgbmFtZXNbZmxhZ10pIHx8IGZsYWc7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZmxhZ3NbZmxhZ107XHJcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKGZsYWcgPT09ICd2YWxpZCcgfHwgZmxhZyA9PT0gJ2ludmFsaWQnKSAmJiAhZmxhZ3MudmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBhY2NbY2xhc3NOYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lLmZvckVhY2goZnVuY3Rpb24gKGNscykge1xyXG4gICAgICAgICAgICAgICAgYWNjW2Nsc10gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBfbG9vcF8xKGkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjYztcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVMb29rdXAodm0pIHtcclxuICAgIHZhciBwcm92aWRlcnMgPSB2bS4kX3ZlZU9ic2VydmVyLnJlZnM7XHJcbiAgICB2YXIgcmVkdWNlZCA9IHtcclxuICAgICAgICBuYW1lczoge30sXHJcbiAgICAgICAgdmFsdWVzOiB7fVxyXG4gICAgfTtcclxuICAgIHJldHVybiB2bS5maWVsZERlcHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGRlcE5hbWUpIHtcclxuICAgICAgICBpZiAoIXByb3ZpZGVyc1tkZXBOYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY2MudmFsdWVzW2RlcE5hbWVdID0gcHJvdmlkZXJzW2RlcE5hbWVdLnZhbHVlO1xyXG4gICAgICAgIGFjYy5uYW1lc1tkZXBOYW1lXSA9IHByb3ZpZGVyc1tkZXBOYW1lXS5uYW1lO1xyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCByZWR1Y2VkKTtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0SWQodm0pIHtcclxuICAgIGlmICh2bS52aWQpIHtcclxuICAgICAgICByZXR1cm4gdm0udmlkO1xyXG4gICAgfVxyXG4gICAgaWYgKHZtLm5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdm0ubmFtZTtcclxuICAgIH1cclxuICAgIGlmICh2bS5pZCkge1xyXG4gICAgICAgIHJldHVybiB2bS5pZDtcclxuICAgIH1cclxuICAgIGlmICh2bS5maWVsZE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdm0uZmllbGROYW1lO1xyXG4gICAgfVxyXG4gICAgUFJPVklERVJfQ09VTlRFUisrO1xyXG4gICAgcmV0dXJuIFwiX3ZlZV9cIiArIFBST1ZJREVSX0NPVU5URVI7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlUmVuZGVyaW5nQ29udGV4dFJlZnModm0pIHtcclxuICAgIHZhciBwcm92aWRlZElkID0gZXh0cmFjdElkKHZtKTtcclxuICAgIHZhciBpZCA9IHZtLmlkO1xyXG4gICAgLy8gTm90aGluZyBoYXMgY2hhbmdlZC5cclxuICAgIGlmICghdm0uaXNBY3RpdmUgfHwgKGlkID09PSBwcm92aWRlZElkICYmIHZtLiRfdmVlT2JzZXJ2ZXIucmVmc1tpZF0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdmlkIHdhcyBjaGFuZ2VkLlxyXG4gICAgaWYgKGlkICE9PSBwcm92aWRlZElkICYmIHZtLiRfdmVlT2JzZXJ2ZXIucmVmc1tpZF0gPT09IHZtKSB7XHJcbiAgICAgICAgdm0uJF92ZWVPYnNlcnZlci51bm9ic2VydmUoaWQpO1xyXG4gICAgfVxyXG4gICAgdm0uaWQgPSBwcm92aWRlZElkO1xyXG4gICAgdm0uJF92ZWVPYnNlcnZlci5vYnNlcnZlKHZtKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlcigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVmczoge30sXHJcbiAgICAgICAgb2JzZXJ2ZTogZnVuY3Rpb24gKHZtKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmc1t2bS5pZF0gPSB2bTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVub2JzZXJ2ZTogZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlZnNbaWRdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gd2F0Y2hDcm9zc0ZpZWxkRGVwKGN0eCwgZGVwTmFtZSwgd2l0aEhvb2tzKSB7XHJcbiAgICBpZiAod2l0aEhvb2tzID09PSB2b2lkIDApIHsgd2l0aEhvb2tzID0gdHJ1ZTsgfVxyXG4gICAgdmFyIHByb3ZpZGVycyA9IGN0eC4kX3ZlZU9ic2VydmVyLnJlZnM7XHJcbiAgICBpZiAoIWN0eC5fdmVlV2F0Y2hlcnMpIHtcclxuICAgICAgICBjdHguX3ZlZVdhdGNoZXJzID0ge307XHJcbiAgICB9XHJcbiAgICBpZiAoIXByb3ZpZGVyc1tkZXBOYW1lXSAmJiB3aXRoSG9va3MpIHtcclxuICAgICAgICByZXR1cm4gY3R4LiRvbmNlKCdob29rOm1vdW50ZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdhdGNoQ3Jvc3NGaWVsZERlcChjdHgsIGRlcE5hbWUsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmICghaXNDYWxsYWJsZShjdHguX3ZlZVdhdGNoZXJzW2RlcE5hbWVdKSAmJiBwcm92aWRlcnNbZGVwTmFtZV0pIHtcclxuICAgICAgICBjdHguX3ZlZVdhdGNoZXJzW2RlcE5hbWVdID0gcHJvdmlkZXJzW2RlcE5hbWVdLiR3YXRjaCgndmFsdWUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjdHguZmxhZ3MudmFsaWRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguX25lZWRzVmFsaWRhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjdHgudmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XG5cbnZhciBGTEFHU19TVFJBVEVHSUVTID0gW1xyXG4gICAgWydwcmlzdGluZScsICdldmVyeSddLFxyXG4gICAgWydkaXJ0eScsICdzb21lJ10sXHJcbiAgICBbJ3RvdWNoZWQnLCAnc29tZSddLFxyXG4gICAgWyd1bnRvdWNoZWQnLCAnZXZlcnknXSxcclxuICAgIFsndmFsaWQnLCAnZXZlcnknXSxcclxuICAgIFsnaW52YWxpZCcsICdzb21lJ10sXHJcbiAgICBbJ3BlbmRpbmcnLCAnc29tZSddLFxyXG4gICAgWyd2YWxpZGF0ZWQnLCAnZXZlcnknXSxcclxuICAgIFsnY2hhbmdlZCcsICdzb21lJ10sXHJcbiAgICBbJ3Bhc3NlZCcsICdldmVyeSddLFxyXG4gICAgWydmYWlsZWQnLCAnc29tZSddXHJcbl07XHJcbnZhciBPQlNFUlZFUl9DT1VOVEVSID0gMDtcclxuZnVuY3Rpb24gZGF0YSQxKCkge1xyXG4gICAgdmFyIHJlZnMgPSB7fTtcclxuICAgIHZhciBlcnJvcnMgPSB7fTtcclxuICAgIHZhciBmbGFncyA9IGNyZWF0ZU9ic2VydmVyRmxhZ3MoKTtcclxuICAgIHZhciBmaWVsZHMgPSB7fTtcclxuICAgIC8vIEZJWE1FOiBOb3Qgc3VyZSBvZiB0aGlzIG9uZSBjYW4gYmUgdHlwZWQsIGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlLlxyXG4gICAgdmFyIG9ic2VydmVycyA9IFtdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogJycsXHJcbiAgICAgICAgcmVmczogcmVmcyxcclxuICAgICAgICBvYnNlcnZlcnM6IG9ic2VydmVycyxcclxuICAgICAgICBlcnJvcnM6IGVycm9ycyxcclxuICAgICAgICBmbGFnczogZmxhZ3MsXHJcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gcHJvdmlkZVNlbGYoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgICRfdmVlT2JzZXJ2ZXI6IHRoaXNcclxuICAgIH07XHJcbn1cclxudmFyIFZhbGlkYXRpb25PYnNlcnZlciA9IFZ1ZS5leHRlbmQoe1xyXG4gICAgbmFtZTogJ1ZhbGlkYXRpb25PYnNlcnZlcicsXHJcbiAgICBwcm92aWRlOiBwcm92aWRlU2VsZixcclxuICAgIGluamVjdDoge1xyXG4gICAgICAgICRfdmVlT2JzZXJ2ZXI6IHtcclxuICAgICAgICAgICAgZnJvbTogJyRfdmVlT2JzZXJ2ZXInLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuJHZub2RlLmNvbnRleHQuJF92ZWVPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHZub2RlLmNvbnRleHQuJF92ZWVPYnNlcnZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHRhZzoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdzcGFuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib2JzX1wiICsgT0JTRVJWRVJfQ09VTlRFUisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzbGltOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhOiBkYXRhJDEsXHJcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmlkID0gdGhpcy52aWQ7XHJcbiAgICAgICAgcmVnaXN0ZXIodGhpcyk7XHJcbiAgICAgICAgdmFyIG9uQ2hhbmdlID0gZGVib3VuY2UoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvcnMgPSBfYS5lcnJvcnMsIGZsYWdzID0gX2EuZmxhZ3MsIGZpZWxkcyA9IF9hLmZpZWxkcztcclxuICAgICAgICAgICAgX3RoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgICAgICBfdGhpcy5mbGFncyA9IGZsYWdzO1xyXG4gICAgICAgICAgICBfdGhpcy5maWVsZHMgPSBmaWVsZHM7XHJcbiAgICAgICAgfSwgMTYpO1xyXG4gICAgICAgIHRoaXMuJHdhdGNoKGNvbXB1dGVPYnNlcnZlclN0YXRlLCBvbkNoYW5nZSk7XHJcbiAgICB9LFxyXG4gICAgYWN0aXZhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmVnaXN0ZXIodGhpcyk7XHJcbiAgICB9LFxyXG4gICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1bnJlZ2lzdGVyKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1bnJlZ2lzdGVyKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbih0aGlzLCBwcmVwYXJlU2xvdFByb3BzKHRoaXMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zbGltICYmIGNoaWxkcmVuLmxlbmd0aCA8PSAxID8gY2hpbGRyZW5bMF0gOiBoKHRoaXMudGFnLCB7IG9uOiB0aGlzLiRsaXN0ZW5lcnMgfSwgY2hpbGRyZW4pO1xyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBvYnNlcnZlOiBmdW5jdGlvbiAoc3Vic2NyaWJlciwga2luZCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSB2b2lkIDApIHsga2luZCA9ICdwcm92aWRlcic7IH1cclxuICAgICAgICAgICAgaWYgKGtpbmQgPT09ICdvYnNlcnZlcicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZWZzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMucmVmcyksIChfYSA9IHt9LCBfYVtzdWJzY3JpYmVyLmlkXSA9IHN1YnNjcmliZXIsIF9hKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bm9ic2VydmU6IGZ1bmN0aW9uIChpZCwga2luZCkge1xyXG4gICAgICAgICAgICBpZiAoa2luZCA9PT0gdm9pZCAwKSB7IGtpbmQgPSAncHJvdmlkZXInOyB9XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSAncHJvdmlkZXInKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSB0aGlzLnJlZnNbaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwcm92aWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuJGRlbGV0ZSh0aGlzLnJlZnMsIGlkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaWR4ID0gZmluZEluZGV4KHRoaXMub2JzZXJ2ZXJzLCBmdW5jdGlvbiAobykgeyByZXR1cm4gby5pZCA9PT0gaWQ7IH0pO1xyXG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5zaWxlbnQsIHNpbGVudCA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cztcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoX19zcHJlYWRBcnJheXModmFsdWVzKHRoaXMucmVmcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiAhci5kaXNhYmxlZDsgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIHJlZltzaWxlbnQgPyAndmFsaWRhdGVTaWxlbnQnIDogJ3ZhbGlkYXRlJ10oKS50aGVuKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnZhbGlkOyB9KTsgfSksIHRoaXMub2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobykgeyByZXR1cm4gIW8uZGlzYWJsZWQ7IH0pLm1hcChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnMudmFsaWRhdGUoeyBzaWxlbnQ6IHNpbGVudCB9KTsgfSkpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0cy5ldmVyeShmdW5jdGlvbiAocikgeyByZXR1cm4gcjsgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhbmRsZVN1Ym1pdDogZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnZhbGlkYXRlKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkIHx8ICFjYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjYigpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheXModmFsdWVzKHRoaXMucmVmcyksIHRoaXMub2JzZXJ2ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIHJlZi5yZXNldCgpOyB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEVycm9yczogZnVuY3Rpb24gKGVycm9ycykge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhlcnJvcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gX3RoaXMucmVmc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwcm92aWRlcilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JBcnIgPSBlcnJvcnNba2V5XSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGVycm9yQXJyID0gdHlwZW9mIGVycm9yQXJyID09PSAnc3RyaW5nJyA/IFtlcnJvckFycl0gOiBlcnJvckFycjtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnNldEVycm9ycyhlcnJvckFycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuc2V0RXJyb3JzKGVycm9ycyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbmZ1bmN0aW9uIHVucmVnaXN0ZXIodm0pIHtcclxuICAgIGlmICh2bS4kX3ZlZU9ic2VydmVyKSB7XHJcbiAgICAgICAgdm0uJF92ZWVPYnNlcnZlci51bm9ic2VydmUodm0uaWQsICdvYnNlcnZlcicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyKHZtKSB7XHJcbiAgICBpZiAodm0uJF92ZWVPYnNlcnZlcikge1xyXG4gICAgICAgIHZtLiRfdmVlT2JzZXJ2ZXIub2JzZXJ2ZSh2bSwgJ29ic2VydmVyJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcHJlcGFyZVNsb3RQcm9wcyh2bSkge1xyXG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCB2bS5mbGFncyksIHsgZXJyb3JzOiB2bS5lcnJvcnMsIGZpZWxkczogdm0uZmllbGRzLCB2YWxpZGF0ZTogdm0udmFsaWRhdGUsIHBhc3Nlczogdm0uaGFuZGxlU3VibWl0LCBoYW5kbGVTdWJtaXQ6IHZtLmhhbmRsZVN1Ym1pdCwgcmVzZXQ6IHZtLnJlc2V0IH0pO1xyXG59XHJcbi8vIENyZWF0ZXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHZhbGlkYXRpb24gZmxhZ3NcclxuZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXJGbGFncygpIHtcclxuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY3JlYXRlRmxhZ3MoKSksIHsgdmFsaWQ6IHRydWUsIGludmFsaWQ6IGZhbHNlIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNvbXB1dGVPYnNlcnZlclN0YXRlKCkge1xyXG4gICAgdmFyIHZtcyA9IF9fc3ByZWFkQXJyYXlzKHZhbHVlcyh0aGlzLnJlZnMpLCB0aGlzLm9ic2VydmVycyk7XHJcbiAgICB2YXIgZXJyb3JzID0ge307XHJcbiAgICB2YXIgZmxhZ3MgPSBjcmVhdGVPYnNlcnZlckZsYWdzKCk7XHJcbiAgICB2YXIgZmllbGRzID0ge307XHJcbiAgICB2YXIgbGVuZ3RoID0gdm1zLmxlbmd0aDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgdm0gPSB2bXNbaV07XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvbiBwcm92aWRlclxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZtLmVycm9ycykpIHtcclxuICAgICAgICAgICAgZXJyb3JzW3ZtLmlkXSA9IHZtLmVycm9ycztcclxuICAgICAgICAgICAgZmllbGRzW3ZtLmlkXSA9IF9fYXNzaWduKHsgaWQ6IHZtLmlkLCBuYW1lOiB2bS5uYW1lLCBmYWlsZWRSdWxlczogdm0uZmFpbGVkUnVsZXMgfSwgdm0uZmxhZ3MpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTmVzdGVkIG9ic2VydmVyLCBtZXJnZSBlcnJvcnMgYW5kIGZpZWxkc1xyXG4gICAgICAgIGVycm9ycyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBlcnJvcnMpLCB2bS5lcnJvcnMpO1xyXG4gICAgICAgIGZpZWxkcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBmaWVsZHMpLCB2bS5maWVsZHMpO1xyXG4gICAgfVxyXG4gICAgRkxBR1NfU1RSQVRFR0lFUy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgIHZhciBmbGFnID0gX2FbMF0sIG1ldGhvZCA9IF9hWzFdO1xyXG4gICAgICAgIGZsYWdzW2ZsYWddID0gdm1zW21ldGhvZF0oZnVuY3Rpb24gKHZtKSB7IHJldHVybiB2bS5mbGFnc1tmbGFnXTsgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7IGVycm9yczogZXJyb3JzLCBmbGFnczogZmxhZ3MsIGZpZWxkczogZmllbGRzIH07XHJcbn1cblxuZnVuY3Rpb24gd2l0aFZhbGlkYXRpb24oY29tcG9uZW50LCBtYXBQcm9wcykge1xyXG4gICAgaWYgKG1hcFByb3BzID09PSB2b2lkIDApIHsgbWFwUHJvcHMgPSBpZGVudGl0eTsgfVxyXG4gICAgdmFyIF9hO1xyXG4gICAgdmFyIG9wdGlvbnMgPSAnb3B0aW9ucycgaW4gY29tcG9uZW50ID8gY29tcG9uZW50Lm9wdGlvbnMgOiBjb21wb25lbnQ7XHJcbiAgICB2YXIgcHJvdmlkZXJPcHRzID0gVmFsaWRhdGlvblByb3ZpZGVyLm9wdGlvbnM7XHJcbiAgICB2YXIgaG9jID0ge1xyXG4gICAgICAgIG5hbWU6IChvcHRpb25zLm5hbWUgfHwgJ0Fub255bW91c0hvYycpICsgXCJXaXRoVmFsaWRhdGlvblwiLFxyXG4gICAgICAgIHByb3BzOiBfX2Fzc2lnbih7fSwgcHJvdmlkZXJPcHRzLnByb3BzKSxcclxuICAgICAgICBkYXRhOiBwcm92aWRlck9wdHMuZGF0YSxcclxuICAgICAgICBjb21wdXRlZDogX19hc3NpZ24oe30sIHByb3ZpZGVyT3B0cy5jb21wdXRlZCksXHJcbiAgICAgICAgbWV0aG9kczogX19hc3NpZ24oe30sIHByb3ZpZGVyT3B0cy5tZXRob2RzKSxcclxuICAgICAgICBiZWZvcmVEZXN0cm95OiBwcm92aWRlck9wdHMuYmVmb3JlRGVzdHJveSxcclxuICAgICAgICBpbmplY3Q6IHByb3ZpZGVyT3B0cy5pbmplY3RcclxuICAgIH07XHJcbiAgICB2YXIgZXZlbnROYW1lID0gKChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tb2RlbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV2ZW50KSB8fCAnaW5wdXQnO1xyXG4gICAgaG9jLnJlbmRlciA9IGZ1bmN0aW9uIChoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJGaWVsZCgpO1xyXG4gICAgICAgIHZhciB2Y3R4ID0gY3JlYXRlVmFsaWRhdGlvbkN0eCh0aGlzKTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gX19hc3NpZ24oe30sIHRoaXMuJGxpc3RlbmVycyk7XHJcbiAgICAgICAgdmFyIG1vZGVsID0gZmluZE1vZGVsKHRoaXMuJHZub2RlKTtcclxuICAgICAgICB0aGlzLl9pbnB1dEV2ZW50TmFtZSA9IHRoaXMuX2lucHV0RXZlbnROYW1lIHx8IGdldElucHV0RXZlbnROYW1lKHRoaXMuJHZub2RlLCBtb2RlbCk7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZmluZFZhbHVlKHRoaXMuJHZub2RlKTtcclxuICAgICAgICBvblJlbmRlclVwZGF0ZSh0aGlzLCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudmFsdWUpO1xyXG4gICAgICAgIHZhciBfYiA9IGNyZWF0ZUNvbW1vbkhhbmRsZXJzKHRoaXMpLCBvbklucHV0ID0gX2Iub25JbnB1dCwgb25CbHVyID0gX2Iub25CbHVyLCBvblZhbGlkYXRlID0gX2Iub25WYWxpZGF0ZTtcclxuICAgICAgICBtZXJnZVZOb2RlTGlzdGVuZXJzKGxpc3RlbmVycywgZXZlbnROYW1lLCBvbklucHV0KTtcclxuICAgICAgICBtZXJnZVZOb2RlTGlzdGVuZXJzKGxpc3RlbmVycywgJ2JsdXInLCBvbkJsdXIpO1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgbWVyZ2VWTm9kZUxpc3RlbmVycyhsaXN0ZW5lcnMsIGV2dCwgb25WYWxpZGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gUHJvcHMgYXJlIGFueSBhdHRycyBub3QgYXNzb2NpYXRlZCB3aXRoIFZhbGlkYXRpb25Qcm92aWRlciBQbHVzIHRoZSBtb2RlbCBwcm9wLlxyXG4gICAgICAgIC8vIFdBUk5JTkc6IEFjY2lkZW50YWwgcHJvcCBvdmVyd3JpdGUgd2lsbCBwcm9iYWJseSBoYXBwZW4uXHJcbiAgICAgICAgdmFyIHByb3AgPSAoZmluZE1vZGVsQ29uZmlnKHRoaXMuJHZub2RlKSB8fCB7IHByb3A6ICd2YWx1ZScgfSkucHJvcDtcclxuICAgICAgICB2YXIgcHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy4kYXR0cnMpLCAoX2EgPSB7fSwgX2FbcHJvcF0gPSBtb2RlbCA9PT0gbnVsbCB8fCBtb2RlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbW9kZWwudmFsdWUsIF9hKSksIG1hcFByb3BzKHZjdHgpKTtcclxuICAgICAgICByZXR1cm4gaChvcHRpb25zLCB7XHJcbiAgICAgICAgICAgIGF0dHJzOiB0aGlzLiRhdHRycyxcclxuICAgICAgICAgICAgcHJvcHM6IHByb3BzLFxyXG4gICAgICAgICAgICBvbjogbGlzdGVuZXJzXHJcbiAgICAgICAgfSwgbm9ybWFsaXplU2xvdHModGhpcy4kc2xvdHMsIHRoaXMuJHZub2RlLmNvbnRleHQpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gaG9jO1xyXG59XG5cbnZhciB2ZXJzaW9uID0gJzMuMy4wJztcblxuZXhwb3J0IHsgVmFsaWRhdGlvbk9ic2VydmVyLCBWYWxpZGF0aW9uUHJvdmlkZXIsIGNvbmZpZ3VyZSwgZXh0ZW5kLCBsb2NhbGVDaGFuZ2VkLCBsb2NhbGl6ZSwgbm9ybWFsaXplUnVsZXMsIHNldEludGVyYWN0aW9uTW9kZSwgdmFsaWRhdGUsIHZlcnNpb24sIHdpdGhWYWxpZGF0aW9uIH07XG4iXSwic291cmNlUm9vdCI6IiJ9