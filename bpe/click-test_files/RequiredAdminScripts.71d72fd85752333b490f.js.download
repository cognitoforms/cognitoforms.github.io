(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["RequiredAdminScripts"],{

/***/ "../../../Cognito.Services/Scripts/Cognito-core-admin.js":
/*!************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/Cognito-core-admin.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(( true ? exports : undefined).exec = function(isInIframe) {
(function($) {

	// Create an overlay to hide the underlying page when displaying modal content
	var overlay;
	var onOverlayClick;

	Cognito.ready("append-overlay", "ExoWeb.dom", function ($) {
		overlay = $("#c-modal-overlay");
		if (overlay.length === 0) {
			var cognitoDiv = $('.cognito:first');
			overlay = $("<div id='c-modal-overlay' />").appendTo(cognitoDiv.length == 0 || Cognito.config.flags.AppNav ? document.body : cognitoDiv);
		}
		overlay.click(function () { if (onOverlayClick) onOverlayClick(); });
	});

	// Broadcast token if coming from the login page
	Cognito.ready("broadcast-token", "ExoWeb.dom", function ($) {
		$(document).on("click", '.c-button-progress:not([class*="c-status-"])', function () {
			var $this = $(this);

			// It is possible for the "progress-finished" event to fire before the click event
			// So check to see if there is already a failed or successful class on button
			if(!$this.is(".c-status-failed, .c-status-successful"))
				$this.addClass("c-status-working").prop("disabled", true);
		})
		.on("progress-finished", ".c-button-progress", function(e, status) {
			var $button = $(this);
			$button.removeClass("c-status-working");
			$button.addClass("c-status-" + status);
			setTimeout(function(){
				$button.removeClass("c-status-" + status).prop("disabled", false);
			}, 2500);
		});

	});

	// Shows the modal overlay
	function showOverlay(onClick) {
		onOverlayClick = onClick;
		Cognito.Messaging.trigger("showOverlay");
		overlay.fadeIn();
	}
	Cognito.showOverlay = showOverlay;

	// Hides the modal overlay
	function hideOverlay() {
		onOverlayClick = null;
		Cognito.Messaging.trigger("hideOverlay");
		overlay.fadeOut();
	}
	Cognito.hideOverlay = hideOverlay;

	Cognito.Messaging.addHandler("overlayClicked", function () { $('#c-modal-overlay').trigger('click'); });

	if (isInIframe) {
		Cognito.Messaging.addHandler("navigate", function (data) {
			var navigate = function () {
				if (data.target === "top") {
					window.parent.location = data.url;
				}
				else {
					document.location.href = data.url;
				}
			};
			if (onNavigateDialog) {
				onNavigateDialog.continue = navigate;
				if (!onNavigateDialog.open(data))
					navigate();
			}
			else
				navigate();
		});
	}

	function tryOpenNavigateDialog(data) {
		return new Promise(function (resolve) {
			if (onNavigateDialog) {
				onNavigateDialog.continue = function (changesSaved) {
					resolve({ changesSaved: changesSaved })
				};
				if (!onNavigateDialog.open(data))
					resolve(true);
			}
			else
				resolve(true);
		});
	};

	Cognito.tryOpenNavigateDialog = tryOpenNavigateDialog;

	// Formats value as currency
	function formatCurrency(val) {
		var valString = "$" + Cognito.formatNumber(Math.abs(val).toFixed(2));
		return val >= 0 ? valString : "(" + valString + ")";
	}
	Cognito.formatCurrency = formatCurrency;

	// Format number with thousands separators
	function formatNumber(val) {
		return val.toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",");
	}
	Cognito.formatNumber = formatNumber;

	Cognito.Emails = {}

	Cognito.Emails.formatAddresses = function (addresses, tokenPaths, maxNumberOfAddresses) {
		if (typeof addresses !== "string")
			addresses = addresses.join(";");

		var _addresses = [];

		// Get all valid email addresses
		(addresses.match(Cognito.emailAndTokenRegex) || []).forEach(function (addr) {
			addr = addr.replace(/(\xa0|\s)/g, "");
			// Not Empty
			if (addr !== "") {
				// Specific Email Address
				if (addr.match(Cognito.emailRegex))
					_addresses.push(addr);
				// Token
				else if (tokenPaths && addr[0] == '[' && addr[addr.length - 1] == ']' && tokenPaths.indexOf(addr.slice(1, addr.length - 1)) >= 0)
					_addresses.push(addr);
			}
		});

		// Get a distinct set of addresses
		_temp = [];
		_addresses.forEach(function (r) {
			r = r.trim();
			if (_temp.indexOf(r) < 0)
				_temp.push(r);
		})
		_addresses = _temp;

		// Get only the max number of addresses specified
		if (_addresses.length > maxNumberOfAddresses)
			_addresses = _addresses.slice(0, maxNumberOfAddresses);

		return _addresses.join('; ');
	}

	Cognito.Messaging.addHandler("changeOrganization", function(data) {
		Cognito.changeOrganization(data.id, function (responseData) {
			if (responseData.redirect)
				if (responseData.success)
					document.location.href = responseData.redirect;
				else
					window.parent.location.href = responseData.redirect;
			else if (data.redirect)
				document.location.href = data.redirect;
		});
	});

	// Enable views to suppress/participate in navigation
	var onNavigateDialog;
	var blockNavigation;
	var forceNavigation;
	function onNavigate(options) {
		if (!onNavigateDialog) {
			onNavigateDialog = $.fn.dialog(options);
			onNavigateDialog._dialog.css("z-index", 1060);
		}

		blockNavigation = options.open;
		if (onNavigateDialog.open) {
			$(window).on("beforeunload", function (event) {
				if (blockNavigation(event) && !forceNavigation) {
					return options.text;
				}
			});
		}
	}
	Cognito.onNavigate = onNavigate;

	// Performs the specified navigation action if allowed
	// action can also be a data object used by the unsaved changes dialog
	Cognito.navigate = function navigate(action, force) {
		if (force) {
			forceNavigation = true;
			if (typeof action === "function")
				action();
			return Promise.resolve();
		}
		else {
			if (onNavigateDialog) {
				return new Promise(function (resolve) {
					onNavigateDialog.continue = function () {
						onNavigateDialog.close();
						if (typeof action === "function") action.apply(this, arguments);
						resolve();
					};
					if (!onNavigateDialog.open(action))
					{
						if (typeof action === "function")
							action();
						resolve();
					}
				});
			}
			else {
				if (typeof action === "function")
					action();
				return Promise.resolve();
			}
		}
	};

	/**
	 * Hides/shows an element using fadeIn/fadeOut (for use with MS Ajax *:visible and *:visibilityFunction)
	 * @param {HTMLElement} element The target element
	 * @param {boolean} show Whether to show/fadeIn or hide/fadeOut
	 * @param {boolean} isInitializing Whether this is the first time the function has run
	 */
	function visibilityFade(element, show, isInitializing) {
		// Simply hide/show when the visiblity function is first run, since it
		// shouldn't require animation and using fadeIn/fadeOut may not work properly.
		if (isInitializing) {
			if (show)
				$(element).show();
			else
				$(element).hide();
		}

		if (show)
			$(element).fadeIn();
		else
			$(element).fadeOut();
	}

	Cognito.visibilityFade = visibilityFade;

	var module;

	// Get current module
	Cognito.modelReady(function () {
		module = Cognito.config.modules[0];
	});

	Cognito.resendVerification = function() {
		Cognito.serviceRequest({
			endpoint: "admin/resend-verification",
			method: "POST"
		});
	};

	Cognito.createCredentials = function(username, password, success, error) {
		module.serviceRequest({
			endpoint: "credentials",
			method: "POST",
			data: { username: username, password: password },
			success: function(data) {
				if (success && success instanceof Function)
					success(data);
			},
			error: function(jqXHR, textStatus, errorThrown) {
				if (error && error instanceof Function)
					error(jqXHR, textStatus, errorThrown);
			}
		});
	};

	Cognito.updateCredentials = function(id, username, password, success, error) {
		module.serviceRequest({
			endpoint: "credentials",
			method: "PUT",
			data: { id: id, username: username, password: password },
			success: function() {
				if (success && success instanceof Function)
					success();
			},
			error: function(jqXHR, textStatus, errorThrown) {
				if (error && error instanceof Function)
					error(jqXHR, textStatus, errorThrown);
			}
		});
	};

	Cognito.deleteCredentials = function(id, success, error) {
		module.serviceRequest({
			endpoint: "credentials",
			method: "DELETE",
			data: { id: id },
			success: function() {
				if (success && success instanceof Function)
					success();
			},
			error: function(jqXHR, textStatus, errorThrown) {
				if (error && error instanceof Function)
					error(jqXHR, textStatus, errorThrown);
			}
		});
	};

	Cognito.showAnnouncement = function (selector, parentSelector) {
		Cognito.serviceRequest({
			endpoint: "marketing/announcement?module=forms",
			dataType: "html",
			success: function (data) {
				if (data.length === 0) {
					$(parentSelector).hide();
				} else {
					$(parentSelector).show();
					$(selector).attr("data-name", data.substring(4, data.indexOf('-->')));
					$(selector).html(data);
				}
			}
		});
	}

	Cognito.dismissAnnouncment = function(selector, parentSelector) {
		Cognito.serviceRequest({
			endpoint: "marketing/dismissannouncement?name=" + $(selector).attr("data-name"),
			success: function () {
				Cognito.showAnnouncement(selector, parentSelector);
			}
		});
	}

	Cognito.changeOrganization = function(id, callback) {
		Cognito.serviceRequest({
			endpoint: "admin/organization",
			method: "PUT",
			data: { id: id },
			success: function (data) {
				Cognito.Messaging.trigger("organizationChanged", { data: id });

				if (callback instanceof Function) {
					callback(data);
				}
			}
		});
	};

	Cognito.dismissNotification = function(id, callback) {
		Cognito.serviceRequest({
			endpoint: "admin/deletenotification",
			method: "POST",
			data: { id: id },
			success: function(data) {
				if (callback instanceof Function) {
					callback(data);
				}
			}
		});
	};

	var resizeTimeout;
	$(window).resize(function () {
		if (resizeTimeout)
			window.clearTimeout(resizeTimeout);
	});

	if (isInIframe) {
		$(function () {
			// Do not execute during UI Unit testing
			if (document.cookie.indexOf("TestId=") === -1 && !Cognito.config.whiteLabel) {
				if (window.top == window.self) {
					var url = document.location.pathname + document.location.search;

					// Normalize url to NOT have a leading "/"
					// https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname#Browser_compatibility
					if (url.indexOf("/") === 0)
						url = url.substring(1);

					if (url.indexOf("admin/") === 0)
						url = url.substring(6);

					url = url.replace("admin/view/", "");
					document.location.href = Cognito.config.formsUrl + url;
				}
			}

			// Handy little eventing that allows forcing navigation outside of the frame
			$(document).on("click", "a", function (e) {
				var $this = $(this);
				if ($this.attr("data-target") === "top") {
					Cognito.Messaging.trigger("navigate", { data: { location: $this.attr("href") } });

					e.preventDefault();
					return false;
				}
			});
		});
	}
})(ExoJQuery);
})(typeof exports === 'undefined');


/***/ }),

/***/ "../../../Cognito.Services/Scripts/component/cognito-messaging.js":
/*!*********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/component/cognito-messaging.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

﻿(( true ? exports : undefined).exec = function() {
window.Cognito = window.Cognito || {};
(function (window) {
	var _handlers = {};

	var Messaging = function () {
		var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
		var event = window.addEventListener ? "message" : "onmessage";
		var eventer = window[eventMethod];

		eventer(event, this._handle, false);
	}

	// Get the value at the specified property path
	function evalPath(obj, path) {
		function index(obj, i) { return obj[i] }
		return path.split('.').reduce(index, obj);
	}

	Messaging.prototype = {
		_handle: function (event) {
			try {
				var payload = JSON.parse(event.data);
			}
			catch (e)
			{ }

			if (payload && payload.event) {
				var handlerList = _handlers[payload.event];

				if (handlerList) {
                    handlerList.forEach(function (handler) {
                        handler.call(event, payload.data);
                    });
				}
			}
		},

		dispose: function () {
			_handlers = {};
		},

		addHandler: function (name, handler) {
            _handlers[name] = _handlers[name] || [];
            _handlers[name].push(handler);
		},

		trigger: function (/* [event,] options */) {
			var event;
			var options;

			if (arguments.length === 2) {
				event = arguments[0];
				options = arguments[1];
			} else if (arguments.length === 1) {
				if (typeof (arguments[0]) === "string") {
					event = arguments[0];
				} else {
					options = arguments[0];
					event = options.event;
				}
			}

			var payload = {};
			payload["event"] = event;

			if (options && options.data) {
					payload["data"] = options.data;
			}

			var target = (options && options.target) || window.parent;
			var origin = (options && options.origin) || "*";

			target.postMessage(JSON.stringify(payload), origin);
		},

		// Creates a proxy for a set of functions that can be safely called across frame boundaries
		proxy: function (target, scope) {

			// Get the function set for the specified target and scope
			var fnSet = evalPath(target, scope);
			var proxy = {};

			// Define a closure to create a proxy wrapper function
			function createProxy(fn) {
				return function () {
					var args = [];
					for (var i = 0; i < arguments.length; i++) {
						arg = arguments[i];

						// Serialize Entity
						if (arg instanceof ExoWeb.Model.Entity) {
							var type = arg.meta.type.get_fullName();
							arg = Cognito.serialize(arg);
							arg.$type = arg.$type || type;
						}

						// Serialize Entity Array
						else if (arg instanceof Array && arg.length > 0 && arg[0] instanceof ExoWeb.Model.Entity) {
							for (var j = 0; j < arg.length; j++) {
								var type = arg[j].meta.type.get_fullName();
								arg[j] = Cognito.serialize(arg[j]);
								arg[j].$type = arg[j].$type || type;
							}
						}

						// Cleanse Arrays
						else if (arg instanceof Array) {
							if (arg.length > 0 && arg[0] instanceof Object) {
								for (var j = 0; j < arg.length; j++) {
									var obj = arg[j];
									var clean = {};
									for (var prop in obj) {
										var val = obj[prop];
										if (val instanceof ExoWeb.Model.Entity || (val instanceof Array && val.length > 0 && val[0] instanceof ExoWeb.Model.Entity))
											continue;
										clean[prop] = val;
									}
									arg[j] = clean;
								}
							}
						}

						// Cleanse Objects
						else if (arg instanceof Object) {
							var clean = {};
							for (var prop in arg) {
								var val = arg[prop];
								if (val instanceof ExoWeb.Model.Entity || (val instanceof Array && val.length > 0 && val[0] instanceof ExoWeb.Model.Entity))
									continue;
								clean[prop] = val;
							}
							arg = clean;
						}						

						args.push(arg);
					}
					Cognito.Messaging.trigger("proxy", { target: target, data: { scope: scope, fn: fn, args: args } });
				};
			}

			// Create proxy functions for each function in the set
			for (var fn in fnSet) {
				proxy[fn] = createProxy(fn);
			}

			return proxy;
		}
	};

	window.Cognito.Messaging = new Messaging();

	// Add a default event handler to generically support controller proxies
	Cognito.Messaging.addHandler("proxy", function (data) {
		for (var i = 0; i < data.args.length; i++) {
			arg = data.args[i];

			// Deserialize Entity
			if (arg && arg.$type) {
				var entity = null;
				if (arg.Id) {
					var type = context.model.meta.type(arg.$type).get_jstype();
					entity = type.meta.get(arg.Id.toString());
				}	
				data.args[i] = Cognito.deserialize(null, arg, entity);
			}

			// Deserialize Entity Array
			if (arg && arg instanceof Array && arg.length > 0 && arg[0].$type) {
				var type = context.model.meta.type(arg[0].$type).get_jstype();
				for (var j = 0; j < arg.length; j++) {
					var entity = null;
					if (arg[j].Id)
						entity = type.meta.get(arg.Id.toString());
					arg[j] = Cognito.deserialize(null, arg[j], entity);
				}
			}
		}
		evalPath(window, data.scope)[data.fn].apply(window, data.args);
	});
})(window);
})();


/***/ }),

/***/ "../../../Cognito.Services/Scripts/required/Cognito-core.js":
/*!***************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/required/Cognito-core.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(( true ? exports : undefined).exec = function (isInIframe) {
window.Cognito = window.Cognito || {};
Cognito.ieSupportLoaded = false;
Cognito.timers = {};
Cognito.templateComponents = Cognito.templateComponents || [];

// Compatibility
if (!window.console) console = { log: function () { }, error: function () { }, debug: function () { }, warn: function () { } };

(function ($) {

	// ensure the appropriate namespaces exist on the body tag
	document.documentElement.setAttribute("xmlns:sys", "javascript:Sys");
	document.documentElement.setAttribute("xmlns:dataview", "javascript:Sys.UI.DataView");
	document.documentElement.setAttribute("xmlns:content", "javascript:ExoWeb.UI.Content");
	document.documentElement.setAttribute("xmlns:toggle", "javascript:ExoWeb.UI.Toggle");
	document.documentElement.setAttribute("xmlns:template", "javascript:ExoWeb.UI.Template");
	document.documentElement.setAttribute("xmlns:vue", "javascript:ExoWeb.UI.VueComponent");

	var config = {
		sessionToken: "",
		baseUrl: "",
		formsUrl: "",
		websiteBaseUrl: "",
		currentUser: null,
		mode: "",
		organizationCode: "",
		loginAttempts: 0,
		maxLoginAttempts: 1,
		isReady: false,
		tokenUpdated: null,
		authenticate: null,
		serverTimeOffset: 0,
		redirectUrl: "",
		errorCount: 0,
		maxClientErrors: 10,
		scripts: [],
		modules: [],
		resources: {}
	};

	Cognito.config = config = $.extend({}, config, Cognito.config);
	Cognito.resources = $.extend({}, Cognito.resources);

	Cognito._afterReadyEvents = [];
	Cognito._domReadyEvents = [];

	/**
	 * Prevent Vue from making an object observable.
	 * Adapted from VueModel -  https://github.com/cognitoforms/VueModel/blob/master/src/vue-model-observability.ts
	 */
	function preventVueObservability(obj) {
		if (obj && !obj.hasOwnProperty("__ob__")) {
			// Mark the object as "raw" so that Vue won't try to make it observable
			Vue.markRaw(obj);
			return true;
		}
	}

	// Initialize ExoWeb
	$exoweb({
		init: function () {
			var currentUserType = context.model.meta.addType("Cognito.CurrentUserType");
			if (window.Vue) {
				preventVueObservability(context);
				preventVueObservability(context.model);
				preventVueObservability(context.model.meta);
				context.model.meta.addObjectRegistered(function (obj) {
					preventVueObservability(obj);
				});
			}
			currentUserType
				.addProperty({
					name: "Id",
					type: String
				});

			currentUserType
				.addProperty({
					name: "FullName",
					type: String
				});

			currentUserType
				.addProperty({
					name: "EmailAddress",
					type: String
				});
		},

		contextReady: function () { Cognito.ready("ExoWeb.context"); },

		domReady: function () {
			try {
				// Determine if the page is hosted in an iframe dialog.
				var frame = window.frameElement;
				if (frame && $(frame.parentElement).is(".c-modal-content-container")) {
					// If the frame was loaded with a URL, but the src is empty, then assume
					// that the dialog and iframe are being disposed and don't raise events.
					if (frame.contentWindow.location.href && frame.hasAttribute("src") && !frame.getAttribute("src")) {
						return;
					}
				}
			} catch (e) {
				// Ignore potential cross-domain errors when attempting to access the frame element...
			}

			// Set viewport
			Cognito.viewport = $($(".cognito")[0]);

			// Browser detection
			if (Sys.Browser.agent == Sys.Browser.Firefox) {
				$(".cognito:first").addClass("c-firefox");
			}
			else if (Sys.Browser.agent == Sys.Browser.Safari) {
				$(".cognito:first").addClass("c-safari");
			}
			else if (Sys.Browser.agent == Sys.Browser.Opera) {
				$(".cognito:first").addClass("c-opera");
			}

			// Fire any remaining events
			Cognito.ready("ExoWeb.dom");

			// After ready
			Cognito.timers.afterReady = window.setTimeout(function () {
				Cognito.heartbeat();

				$.each(Cognito._afterReadyEvents, function () {
					this.call(window, ExoJQuery);
				});
			}, 0);

			Cognito.config.isReady = true;
		}
	});

	// Start heartbeat
	function heartbeat() {
		$.event.trigger({
			type: "heartbeat.cognito"
		});
		window.setTimeout(heartbeat, 60000);
	}
	Cognito.heartbeat = heartbeat;

	// create on method
	function on(evtName, callback) {
		$(document).on(evtName, callback);
	}
	Cognito.on = on;

	// create fire method
	function fire(/* [event,] options */) {
		var event;
		var options;

		if (arguments.length === 2) {
			event = arguments[0];
			options = arguments[1];
		} else if (arguments.length === 1) {
			if (typeof (arguments[0]) === "string") {
				event = arguments[0];
			} else {
				options = arguments[0];
				event = options.event;
			}
		}

		var payload = {};

		if (options && options.data) {
			payload = options.data;
		}

		if (event) {
			var jqEvent = $.Event(event);
            $(document).trigger(jqEvent, [payload]);

            // If there is another copy of jquery loaded, raise the event on it as well
            if (window.jQuery && $ !== window.jQuery) {
                var otherEvent = new window.jQuery.Event(event);
                window.jQuery(document).trigger(otherEvent, [payload]);
            }

			return jqEvent;
		}
	}
	Cognito.fire = fire;

	function getScript(url) {
		var head = document.getElementsByTagName("head")[0] || document.documentElement;
		var scriptNode = document.createElement("script");
		scriptNode.type = "text/javascript";
		scriptNode.async = false;
		scriptNode.defer = false;

		head.insertBefore(scriptNode, head.firstChild);

		scriptNode.src = url;
	}
	Cognito.getScript = getScript;


	function deleteCookie(name) {
		document.cookie = name + "=deleted; expires=" + new Date(0).toUTCString();
	}

	// Gets the current time adjusting for the server time offset
	function now() {
		return config.serverTimeOffset ? new Date(new Date().getTime() + config.serverTimeOffset) : new Date();
	}
	Cognito.now = now;

	// Gets the current date adjusting for the server time offset and the form timezone offset
	function today(offset) {
		var correctDate = now();
		return new Date(new Date(correctDate.getFullYear(), correctDate.getMonth(), correctDate.getDate(), 0, correctDate.getHours() * 60 + correctDate.getMinutes() + offset + correctDate.getTimezoneOffset()).setHours(0, 0, 0, 0));
	}
	Cognito.today = today;

	function serverNow() {
		return new Date(config.serverTimeOffset);
	}
	Cognito.serverNow = serverNow;

	// Ready - handles tracking of one time dependencies to synchronize code execution
	var readyDependencies = Cognito.readyDependencies || {};
	Cognito.readyDependencies = readyDependencies;
	function ready(/* name, [[, dependencies], action] */) {

		// Invoke the dependent action if dependencies are all available
		var invokeDependent = function (dependent) {
			if (!dependent.action)
				return false;
			for (var d = 0; d < dependent.dependencies.length; d++) {
				var dependency = readyDependencies[dependent.dependencies[d]];
				if (!(dependency == true))
					return false;
			}
			//console.log("%cInvoking: " + dependent.name + (dependent.name == "Unknown" ? " (" + dependent.action.toString().substring(0, 50).replace(/[^a-zA-Z0-9\(\{\)\}]/gi, '') + ")" : ""), (dependent.name.indexOf('activate') > -1 ? 'color: red;' : 'color: blue;'));
			try {
				dependent.action(ExoJQuery);
				dependent.action = null;
				ready(dependent.name);
				return true;
			} catch (e) {
				console.error(e);

				if (window.appInsights) {
					appInsights.trackException(e, "Cognito.ready", { readyActionName: dependent.name });
				}

				readyDependencies[dependent.name] = false;
				return false;
			}
		}

		// Dependency
		if (arguments.length == 1) {
			var dependents = readyDependencies[arguments[0]];
			readyDependencies[arguments[0]] = true;
			//console.log("%cRaising: " + arguments[0], "color: green;");
			if (dependents) {
				for (var d = 0; d < dependents.length; d++) {
					if (readyDependencies[dependents[d]] !== false) {
						invokeDependent(dependents[d]);
					}
				}
			}
		}

			// Dependent
		else {

			// Create the dependent tracking object
			var dependent = {
				name: arguments[0],
				dependencies: arguments.length == 3 ? (typeof (arguments[1]) == "string" ? [arguments[1]] : arguments[1]) : [],
				action: arguments.length == 3 ? arguments[2] : arguments[1]
			};

			// Register the dependent if it cannot be invoked
			if (!invokeDependent(dependent)) {
				//console.log("%cRegistering: " + dependent.name + (dependent.name == "Unknown" ? " (" + dependent.action.toString().substring(0, 50).replace(/[^a-zA-Z0-9\(\{\)\}]/gi, '') + ")" : "") + ", dependent upon: " + dependent.dependencies.toString(), "color: #aaa;");
				for (var d = 0; d < dependent.dependencies.length; d++) {
					var dependency = readyDependencies[dependent.dependencies[d]];
					if (!dependency)
						readyDependencies[dependent.dependencies[d]] = [dependent];
					else if (dependency instanceof Array)
						dependency.push(dependent);
				}
			}
		}
	}
	Cognito.ready = ready;

	function domReady(action) {
		if (action instanceof Function) {
			Cognito.ready(action.name || "Unknown", "ExoWeb.dom", action);
		}
	}
	Cognito.domReady = domReady;

	function afterDomReady(/* readyFunction */) {
		if (arguments[0] instanceof Function) {
			if ($.isReady) {
				arguments[0].call(window, ExoJQuery);
			} else {
				Cognito._afterReadyEvents.push(arguments[0]);
			}
		}
	}
	Cognito.afterDomReady = afterDomReady;

	function modelReady(/* readyFunction */) {
		if (arguments[0] instanceof Function) {
			$exoweb({ contextReady: arguments[0] });
		}
	}
	Cognito.modelReady = modelReady;

	var pendingRequests = {};

	function abortRequests(endpoint) {
		// Needed for removing all requests with razor migration
		if (arguments.length === 0) {
			Object.keys(pendingRequests).forEach(function (key) {
				abortRequests(key);
			});
		}
		else {
			var requests = pendingRequests[endpoint];
			if (requests) {
				requests = requests.slice();
				while (requests.length > 0) {
					var reqObj = requests.pop();
					reqObj.__abort = true;
					reqObj.abort();
				}
			}
		}
	}
	Cognito.abortRequests = abortRequests;

	function serviceRequest(options) {
		options.module = options.module || "";
		options.mode = options.mode || Cognito.config.mode;
		options.method = options.method || "GET";
		options.endpoint = options.endpoint || "";
		options.data = options.data || {};
		options.dataType = options.dataType || "json";
		options.success = options.success || function (data, textStatus, jqXHR) { };

		var errorOption = options.error;
		options.error = function (jqXHR, textStatus, errorThrown) {
			if (jqXHR && jqXHR.__abort === true)
				return;

			if (errorOption)
				errorOption.apply(this, arguments);
			else if (window.console)
				console.error(textStatus);
		};
		options.complete = options.complete || function (jqXHR, textStatus) { };
		options.async = typeof (options.async) === "undefined" ? true : options.async;
		options.contentType = options.overrideContentType ? options.contentType : options.contentType || "application/json; charset=utf-8";
		options.uploadProgress = options.uploadProgress || null;
		options.context = options.context || null;
		options.passive = options.passive || false;
		options.useSubmissionToken = options.useSubmissionToken || false;

		if (options.method.toUpperCase() === "GET")
			options.contentType = "text/plain";

		// serialize the object if it is a Cognito object
		if (options.data.meta) {
			options.contentType = "application/json+cognito; charset=utf-8";
			options.data = Cognito.serialize(options.data);
		}

		if (typeof (options.data) !== "string" && options.contentType && options.contentType.indexOf("application/json") === 0) {
			options.data = JSON.stringify(options.data);
		}

		// Coerce arrays into distinct parameter values
		var data = options.data;
		if (typeof (options.data) !== "string") {
			for (var key in data) {
				if (data.hasOwnProperty(key) && data[key] instanceof Array) {
					var arr = data[key];
					delete data[key];
					for (var i = 0; i < arr.length; i++) {
						data[key + "[" + i + "]"] = arr[i] instanceof Object ? JSON.stringify(arr[i]) : arr[i];
					}
				}
			}
		}

		if (options.endpoint === "") {
			if (window.console) {
				console.error("endpoint is required");
			}
			return;
		}

		// If the browser is IE, append token to requests
		if ($.browser.msie && parseInt($.browser.version, 10) < 10) {
			if (options.endpoint.indexOf("?") == -1) {
				options.endpoint += "?";
			}
			else {
				options.endpoint += "&";
			}

			options.endpoint += "me1=" + options.method;
			options.endpoint += "&ct1=" + encodeURIComponent(options.contentType);

            if ($('#g-recaptcha-response')[0])
                options.endpoint += "&xrec1=" + encodeURIComponent(grecaptcha.getResponse());
			else if ($('#c-nobots')[0])
				options.endpoint += "&xnobots1=" + encodeURIComponent($('#c-nobots').val());
		}

		// Pass through the test id to support UI unit testing
		try {
			if (document.cookie.indexOf("TestId=") >= 0) {
				if (options.endpoint.indexOf("?") == -1) {
					options.endpoint += "?";
				}
				else {
					options.endpoint += "&";
				}
				options.endpoint += "TestId=" + encodeURIComponent(document.cookie.substr(document.cookie.indexOf("TestId=") + 7, 36));
			}
		} catch (e) { }

		var headers = {
			"X-Requested-With": "XMLHttpRequest"
		};

		if (Cognito.config.oid) {
			headers["X-Organization"] = Cognito.config.oid;
		}

        if (options.passive === true) {
            headers["X-Passive-Request"] = 1;
        }

		if ($.inArray(options.method.toUpperCase(), ["GET", "POST"]) === -1) {
			headers["X-HTTP-Method-Override"] = options.method;
			options.method = "POST";
		}
		//recaptcha box showing
		if ($('#g-recaptcha-response')[0])
			headers["X-Recaptcha"] = grecaptcha.getResponse();

        //dom event raised, user not a bot
		else if ($('#c-nobots')[0])
			headers["X-NoBots"] = $('#c-nobots').val();

		// workaround because jqXHR does not expose upload property
		if (options.uploadProgress) {
			options.xhr = function () {
				var xhr = $.ajaxSettings.xhr();
				if (xhr.upload) {
					xhr.upload.onprogress = function (event) {
						var percent = 0;
						var position = event.loaded || event.position; /*event.position is deprecated*/
						var total = event.total;
						if (event.lengthComputable) {
							percent = Math.ceil(position / total * 100);
						}
						options.uploadProgress(event, position, total, percent);
					};
				}
				return xhr;
			};
		}

		var url = Cognito.config.baseUrl;
		if (options.module.length !== 0) {
			url += options.module + "/" + options.mode + "/";
		}

		url += options.endpoint;

		// Raise service request event
		$.event.trigger({
			type: "cognito.serviceRequest"
		});

		function sendRequest() {
			// Track pending requests to the specified endpoint
			var requests = pendingRequests[options.endpoint];
			if (requests === undefined)
				pendingRequests[options.endpoint] = requests = [];

			var jqXHR = $.ajax({
				contentType: options.contentType,
				type: options.method,
				url: url,
				dataType: options.dataType,
				async: options.async,
				data: options.data,
				success: function (data, textStatus, jqXHR) {

					// Remove the pending request
					var index = requests.indexOf(jqXHR);
					if (index >= 0)
						requests.splice(index, 1);

					var token = jqXHR.getResponseHeader("X-SessionToken");

					// Determine the server time offset relative to the client time during posts
					try {
						var serverTimeHeader = jqXHR.getResponseHeader("X-Server-Time");
						if (serverTimeHeader) {
							var serverTime = new Date(serverTimeHeader);
							Cognito.config.serverTimeOffset = serverTime.getTime() - new Date().getTime();
						}
					}
					catch (e) { }

					options.success(data, textStatus, jqXHR);
				},
				error: function (jqXHR, textStatus, errorThrown) {

					// Remove the pending request
					var index = requests.indexOf(jqXHR);
					if (index >= 0)
						requests.splice(index, 1);

					// If session timed out, allow user to reload the page
					if (jqXHR.status === 419) {
						if ($("#c-core-timeout").length === 0) {
							// Create timeout view if it does not currently exist
							$(".cognito:first").append("<div id='c-core-timeout'>Your request has timed out, click <a href='javascript: document.location.reload()'>here</a> to reload</div>");
						}

						$(".cognito").children().hide();
						$("#c-core-timeout").show();
					}
					else if (jqXHR.status === 400 && jqXHR.responseText === 'captcha') {
						if (!$('#g-recaptcha-response')[0]) {
							grecaptcha.render("c-recaptcha-div", {
								theme: "clean",
								sitekey: Cognito.config.recaptchaKey
							});
						}
					}
					else if (jqXHR.status === 401) {
						var returnUrl = encodeURIComponent(location.href);
						location.href = '/login?logoutReason=TokenTimeout&returnUrl=' + returnUrl;
					}

					if (options.context)
						options.error.call(this, jqXHR, textStatus, errorThrown, options.context);
					else
						options.error.call(this, jqXHR, textStatus, errorThrown);
				},
				complete: options.complete,
				beforeSend: options.beforeSend,
				processData: options.processData,
				headers: headers,
				context: !options.context ? this : options.context,
				xhr: options.xhr
			});

			// Add the request to the list of pending endpoint requests
			requests.push(jqXHR);
		}

		if (options.useSubmissionToken) {
			var submissionToken = localStorage.getItem('SubmissionToken');
			var segments = submissionToken !== null ? submissionToken.split('|') : null;

			/* eslint-disable-next-line es/no-number-parseint, es5/no-es6-static-methods */
			if (!submissionToken || new Date().getTime() > Number.parseInt(segments[1]) || Cognito.config.oid !== segments[2]) {
				serviceRequest({
					endpoint: "/svc/csrf",
					dataType: "text",
					success: function (data) {
						headers['CsrfToken'] = data;
						localStorage.setItem('SubmissionToken', data + '|' + (new Date().getTime() + 60 * 60 * 23 * 1000) + '|' + Cognito.config.oid);
						sendRequest();
					}
				});
			}
			else {
				headers['CsrfToken'] = segments[0];
				sendRequest();
			}
		}
		else
			sendRequest();
	}
	Cognito.serviceRequest = serviceRequest;

	function loadContent(content, target, activate) {
		var shouldActivate = typeof (activate) === "undefined" ? true : activate;

		var targetElement = $(target);

		if (targetElement.length == 0) {
			Cognito.ready("cognito-load-content", "ExoWeb.dom", function ($) {
				$(target).append(content);
			});
		} else {
			targetElement.append(content);
		}
	}
	Cognito.loadContent = loadContent;

	function load(module, args, options) {
		options = options || {};
		options.mode = options.mode || "public";
		options.target = options.target || "";
		options.view = options.view || "";
		options.success = options.success || function () { };
		options.args = options.args || {};

		var url = module + "/" + options.mode;

		if (options.view !== "") {
			url += "?view=" + options.view;
		}

		var currentLocation = location.href;
		if (location.hash) {
			currentLocation = location.href.replace(location.hash, "");
			currentLocation += decodeURIComponent(location.hash);
		}

		args["embedUrl"] = args["embedUrl"] || currentLocation;

		var newArgs = "";
		for (var property in args) {
			var arg = args[property];
			if (typeof arg == "object")
				arg = JSON.stringify(arg);

			newArgs += property + "=" + encodeURIComponent(arg) + "&";
		}

		// Add query string parameters from containing page
		newArgs += document.location.search ? ("$qs=" + encodeURIComponent(document.location.search.substring(1))) : "";

		// Trim trailing &
		if (newArgs.length > 0 && newArgs[newArgs.length] === "&") {
			newArgs = newArgs.substring(0, newArgs.length - 1);
		}

		if (options.target === "") {
			options.target = ".cognito:first";
		}

		var requestOptions = {
			method: "GET",
			dataType: "text",
			async: options.async || false,
			endpoint: url,
			success: function (data) {
				Cognito.loadContent(data, options.target);

				options.success();
			},
			error: options.error
		};

		// If the argument length exceeds 1000 characters, POST instead of GET
		if (newArgs && newArgs.length > 1000) {
			requestOptions.method = "POST";
			requestOptions.contentType = "application/x-www-form-urlencoded";
			requestOptions.data = newArgs;
		} else {
			requestOptions.endpoint += (url.indexOf("?") > -1 ? "&" : "?") + newArgs;
		}

		Cognito.serviceRequest(requestOptions);

		return;
	}
	Cognito.load = load;

	function loadConfig(module, options) {
		options = options || {};
		options.target = options.target || "";
		options.view = options.view || "";
		options.args = options.args || "";

		var url = module + "/admin/loadconfig";

		if (options.view !== "") {
			url += "?view=" + options.view;
		}

		if (options.args !== "") {
			url += (url.indexOf("?") > -1 ? "&" : "?") + "args=" + options.args;
		}

		if (options.target === "") {
			if ($("#cognito-interface").length == 0) {
				document.write("<div id=\"cognito-interface\"></div>");
			}
			options.target = "#cognito-interface";
		}

		Cognito.serviceRequest({
			method: "GET",
			dataType: "text",
			async: false,
			endpoint: url,
			success: function (data) {
				Cognito.loadContent(data, options.target);
			}
		});
	}
	Cognito.loadConfig = loadConfig;

	function deserializeDate(value, prop) {
		// get the date format in use for the property to determine how to deserialize
		var dateFormat = prop.get_format().toString();

		// ensure date only data does not have a time component
		if (dateFormat === "d")
			return new Date(value.substr(0, 4), value.substr(5, 2) - 1, value.substr(8, 2));

		// deserialize time data with common date 1/1/1970
		else if (dateFormat === "t") {
			var fullDate = new Date(value);

			// if a date could not be created from the time data provided, then assume the value is only the time component and
			// deserialize to a common date
			if (isNaN(fullDate.getDate())) {
				return new Date(1970, 0, 1, value.substr(0, 2), value.substr(3, 2), value.substr(6, 2));
			} else {
				return fullDate;
			}
		}
		// otherwise, assume the value represents a valid date and time
		else
			return new Date(value);
	}
	Cognito.deserializeDate = deserializeDate;

	// recursively loads json data into entities.
	var instancesPendingInit;
	var instancesPendingLoad;
	function deserialize(type, data, entity) {

		// return null if the input is already null
		if (!data)
			return null;

		var isTopLevelCall = false;

		// ignore changes that occur during deserialization
		var result = null;
		context.server.ignoreChanges(function () {

			// track existing instances pending initialization
			if (!instancesPendingInit) {
				instancesPendingInit = [];
				instancesPendingLoad = [];
				isTopLevelCall = true;
			}

			// does the data contain an array
			if (data instanceof Array) {
				result = [];

				$.each(data, function (index, element) {
					result.push(deserialize(type, element));
				});

				if (isTopLevelCall) {
					instancesPendingInit.forEach(function (obj) {
						for (var t = obj.meta.type; t; t = t.baseType) {
							var handler = t._getEventHandler("initExisting");
							if (handler)
								handler(obj, {});
						}
					});
					instancesPendingInit = null;
				}

				return;
			}

			// change the target type if a type marker was included
			if (data.$type) {
				type = context.model.meta.type(data.$type).get_jstype();
			}
			// determine dynamic type
			else if (Cognito.dynamicTypes) {
				type = Cognito.getDynamicType(type, data) || type;
			}

			var initProperties = {};
			var deserializeIntoEntity = false;

			// Create the entity if not deserializing into an existing instance
			if (!entity) {

				// if the object has an id, try and get it from the object pool
				// check explicity null & undefined, b/c enums will have an id of 0 which
				// evaluates to false
				if (data.Id != null && data.Id != undefined) {
					// Don't use DynamicEntity's "Id" property as a client-side identifier
					// NOTE: If in the future we want to begin using this as the client-side Id,
					// then we could also leverage this to detect whether the item has been saved
					var idProperty = type.meta.property("Id");
					if (idProperty && idProperty.get_containingType().get_fullName() === "Cognito.DynamicEntity") {
						entity = new type(type.meta.newId());
					} else {
						// look to see if the current object is in the object pool
						entity = type.meta.get(data.Id.toString());

						// if the object was in the pool, return it
						// else construct a new type passing in the Id, which will add the object to pool
						// and then continue to deserialize the new entity
						if (entity) {
							result = entity;

							if (isTopLevelCall)
								instancesPendingInit = null;

							return;
						}
						else {
							entity = new type(data.Id.toString());
						}
					}
				}
				else
					entity = new type(type.meta.newId());

				// add the entity to the set that is pending initialization
				instancesPendingInit.push(entity);
			}
			else {
				deserializeIntoEntity = true;
			}

			// set the entity version (if present)
			if (data.$version) {
				entity.$version = data.$version;
			}

			// set the etag (if present)
			if (data.$etag) {
				entity.$etag = data.$etag;
			}

			// process each data property
			for (var propName in data) {

				// get the property
				var prop = type.meta.property(propName);

				if (prop !== null) {
					// get the value
					var value = data[propName];
					var jstype = prop.get_jstype();

					// initialize the property if it is a value type
					if (prop.get_isValueType()) {
						if (jstype === Date && value && value.constructor === String) {
							value = deserializeDate(value, prop);
						}

						if (deserializeIntoEntity)
							entity.set(propName, value);
						else if (prop.get_isList()) {
							initProperties[propName] = value.slice();
						} else {
							initProperties[propName] = value;
						}
					}

					// recursively load entity properties
					else {

						// List
						if (prop.get_isList() && value instanceof Array) {
							var isLookupListProperty = Cognito.Forms && Cognito.Forms.FormEntry && prop.get_jstype().meta.baseType === Cognito.Forms.FormEntry.meta && value.length > 0 && typeof (value[0]) === "string";
							// Existing Entity List
							if (deserializeIntoEntity && !isLookupListProperty) {
								var targetList;
								if (deserializeIntoEntity && entity.meta.type.property(propName))
									targetList = entity.get(propName);
								var i = 0;
								for (i; i < value.length; i++) {
									var targetChild = targetList[i];
									// Update
									if (targetChild)
										Cognito.deserialize(jstype, value[i], targetChild);
										// Insert
									else
										targetList.add(Cognito.deserialize(jstype, value[i]));
								}

								// Delete remaining items
								targetList.removeRange(i, targetList.length);
							}

							// Lookup Entity List
							else if (isLookupListProperty) {
								value = value.slice();

								// Clear existing list
								if (deserializeIntoEntity && entity.meta.type.property(propName))
									entity.get(propName).clear()

								initProperties[propName] = value;
								for (var j = 0; j < value.length; j++)
									instancesPendingLoad.push({ instance: entity, property: prop, id: value[j] });
							}

							// New Entity List
							else {
								initProperties[propName] = value.map(function (child) {
									return Cognito.deserialize(jstype, child);
								});
							}

						}

						// Enum
						else if (value && prop.get_jstype().meta._isEnum) {
							if (deserializeIntoEntity)
								entity.set(propName, jstype.meta.get(value));
							else
								initProperties[propName] = jstype.meta.get(value);
						}

						// Entity
						else {
							var isLookupProperty = prop.get_jstype().meta.baseType === Cognito.Forms.FormEntry.meta && typeof (value) === "string";

							// Existing Entity
							if (deserializeIntoEntity && !isLookupProperty) {
								if (value) {
									var targetEntity = entity.get(propName);
									if (!targetEntity)
										entity.set(propName, Cognito.deserialize(jstype, value, new (jstype)()));
									else
										Cognito.deserialize(jstype, value, targetEntity);
								}
								else
									entity.set(propName, null);
							}

							// Lookup Entity
							else if (isLookupProperty) {
								initProperties[propName] = value;
								instancesPendingLoad.push({ instance: entity, property: prop, id: value });
							}

							// New Entity
							else {
                                initProperties[propName] = Cognito.deserialize(jstype, value);
                            }
						}
					}
				}
			}

			if (!deserializeIntoEntity)
				entity.init(initProperties);

			if (entity._lazyLoader) {
				// unregister the lazyloaders, which are apart of the ServerSync object brought over by $exoweb.
				// Cognito doesn't use the ServerSync, so the lazy loader is unnecessary.
				entity._lazyLoader.allProps.constructor.unregister(entity, entity._lazyLoader.allProps);
			}

			// raise initExisting new existing instances if this is the top level call to deserialize
			if (isTopLevelCall) {

				// if the graph includes unloaded lookups, defer raising init and store the information on the returned entity
				if (instancesPendingLoad.length > 0) {
					entity.meta._instancesPendingLoad = instancesPendingLoad;
					entity.meta._instancesPendingInit = instancesPendingInit;
				}

				// otherwise, raise init existing
				else {
					instancesPendingInit.forEach(function (obj) {
						for (var t = obj.meta.type; t; t = t.baseType) {
							var handler = t._getEventHandler("initExisting");
							if (handler)
								handler(obj, {});
						}
					});
				}

				instancesPendingInit = null;
			}

			// return the new entity
			result = entity;
		})();

		return result;
	}
	Cognito.deserialize = deserialize;

	function normalizeDateValue(value) {
	    return value.getFullYear() + (value.getMonth() < 9 ? "-0" : "-") + (value.getMonth() + 1) + (value.getDate() < 10 ? "-0" : "-") + value.getDate();
	}
	Cognito.normalizeDateValue = normalizeDateValue;

	function normalizeTimeValue(value) {
	    return (value.getHours() < 10 ? "0" : "") + value.getHours() + (value.getMinutes() < 10 ? ":0" : ":") + value.getMinutes() + (value.getSeconds() < 10 ? ":0" : ":") + value.getSeconds();
	}
	Cognito.normalizeTimeValue = normalizeTimeValue;

	function serialize(entity) {
		if (entity == null) {
			return null;
		}

		var result = null;

		if (entity instanceof Array) {
			result = [];

			for (var i = 0; i < entity.length; i++) {
				var element = entity[i];

				// Serialize form entry references as ids
				if (element instanceof Cognito.Forms.FormEntry)
					result.push(element.get_Id());
				else
					result.push(serialize(element));
			}
		}
		else {
			result = {};
			var type = entity.meta.type;

			// Always include the type name if the instance is a derived type
			if (type.baseType)
				result["$type"] = type.get_fullName();

			// Include version (if known)
			if (entity.$version) {
				result["$version"] = entity.$version;
			}

			// Include etag (if known)
			if (entity.$etag) {
				result["$etag"] = entity.$etag;
			}

			var properties = type.get_allproperties();
			for (var p = 0; p < properties.length; p++) {
				var property = properties[p];
				if (property.get_origin() == "server" && property.get_isPersisted()) {
					if (property.get_isValueType()) {
						var value = property.value(entity);

						// serialize date only and time only in special ways
						if (value && property.get_jstype() === Date) {

							// get the date format in use for the property to determine how to serialize
							var dateFormat = property.get_format().toString();

							// ensure date only data does not have a time component
							if (dateFormat === "d")
							    value = normalizeDateValue(value);

							    // ensure time only data does not have a date component or timezone
							else if (dateFormat === "t")
							    value = normalizeTimeValue(value);
						}
						if (property.get_isList()) {
							result[property.get_name()] = value.slice();
						} else {
							result[property.get_name()] = value;
						}
                    }
                    else if (!property.get_isStatic()) {
						var value = property.value(entity);
						var baseType = property.get_jstype().meta.type.baseType;

						if (value && property.get_jstype().meta._isEnum && !property._isList) {
							result[property.get_name()] = value.get_Id();
                        }
                        else if (value && !property._isList && baseType && baseType.get_fullName() === "Cognito.Lookup") {
							result[property.get_name()] = value.get_Code();
						}
                        else if (value && value instanceof Cognito.Forms.FormEntry) {
                            // for lookup fields, we only need to store the id of the child entry
							result[property.get_name()] = value.get_Id();
                        }
						else {
							result[property.get_name()] = serialize(value);
						}
					}
				}
			}
		}

		return result;
	}
	Cognito.serialize = serialize;

	Cognito.isPropertyLookup = function isPropertyLookup(propInfo) {
		return Cognito.Forms.FormEntry && propInfo.get_jstype().meta && propInfo.get_jstype().meta.type.baseType === Cognito.Forms.FormEntry.meta;
	}

	// Forces validation rules to run for every existing entity in the graph
	function validate(entity) {

		// Ignore null or new entities
		if (entity == null || (entity.meta && entity.meta.isNew)) {
			return;
		}

		// Process lists recursively
		if (entity instanceof Array) {
			$.each(entity, function () {
				validate(this);
			});
		}

		// Run rules for existing entities and recurse over child entities
		else {

			// Run all validation rules not set to run on existing entities
			$.each(entity.meta.type.rules, function () {
				if (this.isRegistered && (this instanceof ExoWeb.Model.ConditionRule || (ExoWeb.Model.Rule.requiredRatingScale && this instanceof ExoWeb.Model.Rule.requiredRatingScale)) && (this.invocationTypes & 2) == 0)
					this.execute.call(this, entity);
			});

			// Recurse over child entities
			$.each(entity.meta.type.get_allproperties(), function () {
				// No need to validate lookup entries
				if (this.get_origin() == "server" && this.get_isPersisted() && !this.get_isValueType() && !this.get_isStatic() && !Cognito.isPropertyLookup(this))
					validate(this.value(entity));
			});
		}

		return entity;
	}
	Cognito.validate = validate;

	// Removes all conditions for which the specified object is the root instance
	function deleteEntity(entity) {

		// Ignore null entities
		if (entity == null)
			return;

		// Process lists recursively
		if (entity instanceof Array) {
			$.each(entity, function () {
				deleteEntity(this);
			});
		}

		// Run rules for existing entities and recurse over child entities
		else {

			// Clear conditions on the entity if it is the root instance
			$.each(entity.meta.conditions(), function () {
				if (this.targets && this.targets.length > 0 && this.targets[0].target == entity)
					this.destroy();
			});

            // Destroy the entity to ensure rules are not executed for deleted entities
            entity.meta.destroy();

			// Recurse over child entities
			$.each(entity.meta.type.get_allproperties(), function () {
				if (this.get_origin() == "server" && this.get_isPersisted() && !this.get_isValueType() && !this.get_isStatic() && !Cognito.isPropertyLookup(this))
					deleteEntity(this.value(entity));
			});
		}

		return entity;
	}
	Cognito.deleteEntity = deleteEntity;

	function getNormalizedName(name) {
		if (name) {
			// Capitalize the first letter of every word
			var normalizedName = name.replace(/([^\s])([^\s]*)/g, function (g0, g1, g2) { return g1.toUpperCase() + g2; });

			// Remove all characters that is not alphanumeric
			// Regex pattern matches all characters that are valid for javascript identifiers, exclude "_" as Cognito does not allow underscore to be used in a field's internal name
			normalizedName = normalizedName.replace(/[^0-9a-zA-Z\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]/g, ""); //normalizedName = normalizedName.replace(/\W+|_+|\u00E9+/g, "");

			// Prefix with '_' if the name starts with a digit. Note: The regex expression \d in Javascript is equal to [0-9]. The expression has been updated to include digits from all languages and is equivalent to the expression \d in C#
			if (/^[\u0030-\u003A\u0660-\u066A\u06F0-\u06FA\u07C0-\u07CA\u0966-\u0970\u09E6-\u09F0\u0A66-\u0A70\u0AE6-\u0AF0\u0B66-\u0B70\u0BE6-\u0BF0\u0C66-\u0C70\u0CE6-\u0CF0\u0D66-\u0D70\u0DE6-\u0DF0\u0E50-\u0E5A\u0ED0-\u0EDA\u0F20-\u0F2A\u1040-\u104A\u1090-\u109A\u17E0-\u17EA\u1810-\u181A\u1946-\u1950\u19D0-\u19DA\u1A80-\u1A8A\u1A90-\u1A9A\u1B50-\u1B5A\u1BB0-\u1BBA\u1C40-\u1C4A\u1C50-\u1C5A\uA620-\uA62A\uA8D0-\uA8DA\uA900-\uA90A\uA9D0-\uA9DA\uA9F0-\uA9FA\uAA50-\uAA5A\uABF0-\uABFA\uFF10-\uFF1A]/.test(normalizedName)) {
				normalizedName = "_" + normalizedName;
			}

			return normalizedName;
		}

		return null;
	}

	Cognito.getNormalizedName = getNormalizedName;

	function toBase62(number) {
		if (typeof number === "undefined" || number === null) {
			return "";
		}

		if (typeof number !== "number") {
			throw new Error("Function `toBase62` recieved invalid 'number' parameter of type '" + (typeof number) + "'.");
		} else if (number === 0) {
			return "";
		}

		var digits = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

		var text = "";

		var value = number;

		while (value > 0) {
			var remainder = value % 62;
			value = Math.floor(value / 62);
			text = digits.charAt(remainder) + text;
		}

		return text;
	}

	function fromBase62(text) {
		if (typeof text === "undefined" || text === null) {
			return 0;
		}

		if (typeof text !== "string") {
			throw new Error("Function `fromBase62` recieved invalid 'text' parameter of type '" + (typeof text) + "'.");
		} else if (text.length === 0) {
			return 0;
		}

		var digits = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

		var number = 0;

		for (var i = text.length - 1; i >= 0; i--) {
			var c = text[i];
			var idx = digits.indexOf(c);
			var b = text.length - 1 - i;
			var pow = Math.pow(62, b);
			number += pow * idx;
		}

		return number;
	}
	//Cognito.fromBase62 = fromBase62;

	function combineUInt16sWithPadding(n1, n2, randomByte1, randomByte2) {

		if (n1 > 0xffff) {
			throw new Error("Value " + n1 + " exceeds maximum unsigned short value of " + 0xffff + ".");
		}

		var n1Bytes = n1 > 0xff ? 2 : 1;

		if (n2 > 0xffff) {
			throw new Error("Value " + n2 + " exceeds maximum unsigned short value of " + 0xffff + ".");
		}

		var n2Bytes = n2 > 0xff ? 2 : 1;

		if (n1Bytes > 1 && n2Bytes > 1) {
			throw new Error("Both values " + n1 + " and " + n2 + " exceeds maximum byte value of " + 0xff + ".");
		}

		var result = 0;

		var randomByte;

		if (arguments.length > 2 && typeof randomByte1 === "number") {
			randomByte = randomByte1;
		} else {
			randomByte = Math.floor(Math.random() * 255);
		}

		randomByte = randomByte & 0xff;

		// Bytes for n2
		result += n2;

		// Bytes for n1
		result += ((n1 << (n2Bytes === 2 ? 16 : 8))) >>> 0;

		if (n1Bytes === 1 && n2Bytes === 1) {
			// Random byte
			result += randomByte << 16;

			// Generate another random byte for the header
			if (arguments.length > 3 && typeof randomByte2 === "number") {
				randomByte = randomByte2;
			} else {
				randomByte = Math.floor(Math.random() * 255);
			}

			randomByte = randomByte & 0xff;
		}

		// Header byte: n1 and n2 byte size, and random bits
		var headerByte = 0;
		headerByte += n2Bytes;
		headerByte += n1Bytes << 2;
		headerByte += (randomByte << 4) & 0x000000f0;
		result += (headerByte << 24) >>> 0;

		return result;
	}

	function splitUInt32WithPadding(i) {
		var headerByte = (i & 0xff000000) >>> 24;

		var n2;
		var n2Bytes = (headerByte & 0x07) & 0x3;
		if (n2Bytes === 2) {
			n2 = i & 0x0000ffff;
		} else {
			n2 = i & 0x000000ff;
		}

		var n1;
		var n1Bytes = ((headerByte & 0x0f) >> 2) & 0x3;
		if (n2Bytes === 2) {
			n1 = (i >>> 16) & 0xff;
		} else if (n1Bytes === 2) {
			n1 = (i >>> 8) & 0xffff;
		} else {
			n1 = (i >>> 8) & 0xff;
		}

		return [n1, n2];
	}
	//Cognito.splitUInt32WithPadding = splitUInt32WithPadding;

	// Initializes the Form and ParentSection properties on a child section
	function initializeParents(parent, child) {

		// Skip initialization of lookups
		if (child instanceof Cognito.Forms.FormEntry)
			return;

		// Set the parent section if possible
		if (parent && child.set_ParentSection)
			child._ParentSection = parent;

		// Set the containing form if possible
		if (parent && child.set_Form) {
			if (parent instanceof Cognito.Forms.FormEntry)
				child._Form = parent;
			else
				child._Form = parent.get_Form();
		}
	}
	Cognito.initializeParents = initializeParents;

	/**
	 * Generate an id based on the given entry version and list item index
	 * @param {number} version The form entry version to be saved
	 * @param {number} listItemIndex The item's index in the list
	 * @returns {string} The generated list item Id
	 */
	function generateListItemId(version, listItemIndex) {
		try {
			if (version > 0xffff)
				throw new Error("Value " + version + " exceeds maximum unsigned short value of " + 0xffff + ".");

			if (listItemIndex > 0xffff)
				throw new Error("Value " + listItemIndex + " exceeds maximum unsigned short value of " + 0xffff + ".");

			var num = combineUInt16sWithPadding(version, listItemIndex, Math.floor(Math.random() * 255), Math.floor(Math.random() * 255));
			var id = toBase62(num);
			return id;
		} catch (e) {
			// If an error occurs, fall back to a pseudo-random string
			// TODO: Log error to app insights?
			return "R-" + ExoWeb.randomText(10, true);
		}
	}
	Cognito.generateListItemId = generateListItemId;

	// Initializes the Form and ParentSection properties on a child section
	function getParentInitializer(parent) {
		return parent instanceof Cognito.Forms.FormEntry ? { Form: parent } : { Form: parent.get_Form(), ParentSection: parent };
	}
	Cognito.getParentInitializer = getParentInitializer;

	function addListItem(parent, list, item) {
		var formEntry = parent instanceof Cognito.Forms.FormEntry ? parent : parent.get_Form();
		var currentEntryVersion = formEntry.get_Entry() ? (formEntry.get_Entry().get_Version() || 0) : 0;
		var id = generateListItemId(currentEntryVersion + 1, list.length);
		id = ensureUniqueListItemId(list, item, id);
		item.set_Id(id);
		list.add(item);
	}
	Cognito.addListItem = addListItem;

	function removeListItem(parent, list, item) {
		// Delete/destory the item
		item = Cognito.deleteEntity(item);

		var idx = list.indexOf(item);
		list.remove(item);

		var formEntry = parent instanceof Cognito.Forms.FormEntry ? parent : parent.get_Form();
		var currentEntryVersion = formEntry.get_Entry() ? (formEntry.get_Entry().get_Version() || 0) : 0;

		var itemsToEnsureUniqueIds = [];

		// Regenerate Ids for items not yet persisted
		for (var i = (idx >= 0 ? idx : 0); i < list.length; i++) {
			var item = list[i];
			if (item.get_Id()) {
				try {
					// Attempt to decode the item's generated Id
					var num = fromBase62(item.get_Id());
					var numComps = splitUInt32WithPadding(num);
					var itemEntryVersion = numComps[0];
					var itemAtIndex = numComps[1];

					// Potentially reassign the Id if it was generated for the next/pending version of the entry
					if (itemEntryVersion === currentEntryVersion + 1) {
						itemsToEnsureUniqueIds.push(item);

						// Re-generate the Id if it doesn't match its current index (ex: moved due to deletion of another item)
						if (itemAtIndex !== i) {
							item.set_Id(generateListItemId(currentEntryVersion + 1, i));
						}
					}
				} catch (e) {
					// Ignore error if unable to decode Id or create new Id
					// TODO: Send error to app insights?
				}
			}
		}

		// Ensure unique Ids after processing all items since multiple items could have Ids reassigned due to the removal
		var idMap = getListItemIdMap(list);
		itemsToEnsureUniqueIds.forEach(function (item) {
			var id = ensureUniqueListItemId(list, item, item.get_Id(), idMap);
			if (id !== item.get_Id()) {
				item.set_Id(id);
				idMap[id] = item;
			}
		});
	}
	Cognito.removeListItem = removeListItem;

	/**
	 * Get a map of list item ids to their index in the list
	 * @param {Array} list
	 * @returns {{ [key: string]: Object }}
	 */
	function getListItemIdMap(list) {
		var idMap = {};
		for (var i = 0; i < list.length; i++) {
			if (list[i]) {
				var id = list[i].get_Id();
				if (id && !idMap.hasOwnProperty(id)) {
					idMap[id] = list[i];
				}
			}
		}
		return idMap;
	}

	/**
	 * Ensures that the given id is unique to the list,
	 * and returns a unique pseudo-random id if it is not
	 * @param {Array} list The list of items
	 * @param {Object} item The item in the list who's Id is being validated
	 * @param {string} id The id to check for uniqueness
	 * @param {{ [key: string]: Object }} idMap An optional pre-built map of ids to items
	 * @returns {string} The unique list item Id to use
	 */
	function ensureUniqueListItemId(list, item, id, idMap) {
		// Generate the id map on-demand if needed
		if (!idMap) {
			idMap = getListItemIdMap(list);
		}

		var itemForId = idMap[id];

		// If the Id isn't used or is used by the item being checked, then return it
		if (!itemForId || itemForId === item) {
			return id;
		}

		// Otherwise, fall back to a pseudo-random string
		for (var attempts = 0; attempts < 10; attempts++) {
			id = "R-" + ExoWeb.randomText(10 + attempts, true);
			itemForId = idMap[id];
			if (!itemForId) {
				return id;
			}
		}

		// Don't assign an id rather than knowingly use a duplicate
		return null;
	}

	function populateLookup(prop, values, isEnum) {
		var propMeta = prop.value(null);

		if (propMeta._lazyLoader) {
			propMeta._lazyLoader.allProps.constructor.unregister(propMeta, propMeta._lazyLoader.allProps);
		}

		if (isEnum) {
			prop.get_containingType()._isEnum = true;
		}

		propMeta.push.apply(propMeta, values);
	}
	Cognito.populateLookup = populateLookup;

	function addModule(module) {

		if (Cognito.hasOwnProperty(module))
			return Cognito[module];

		return new Cognito.Module(module);
	}
	Cognito.addModule = addModule;

	function loadFileData(module, api, fileDataId, successCallback, errorCallback) {
		Cognito.serviceRequest({
			endpoint: module + "/" + api + "/File",
			method: "GET",
			data: { id: fileDataId },
			success: function (data) {
				if (data) {
					if (successCallback) {
						successCallback.apply(this, [data]);
					}
				}
			},
			error: function (data) {
				if (errorCallback) {
					errorCallback.apply();
				}
			}
		});
	}
	Cognito.loadFileData = loadFileData;

	function getDynamicType(baseType, discriminator) {

		// allow base type to be either the actual JS type or the name of the base type
		if (!(baseType instanceof String) && baseType.meta)
			baseType = baseType.meta.get_fullName();

		var typeInfo = Cognito.dynamicTypes[baseType];

		if (typeInfo) {

			// get type discriminator
			if (discriminator instanceof Object)
				discriminator = discriminator[typeInfo.Discriminator].Id;
			var dynamicType = typeInfo.Types[discriminator];

			// return the discriminated dynamic type if found
			if (dynamicType)
				return dynamicType;

			// create base org type
			dynamicType = context.model.meta.type(baseType + "." + Cognito.config.organizationCode);
			if (dynamicType) {
				return dynamicType.get_jstype();
			}
		}
	}

	Cognito.getDynamicType = getDynamicType;

	// Returns an OData query string based on the specified JavaScript object. If the property type is an Array then an expression checking whether
	// the property value matches any values specifed is created, i.e., Where value in (,..n).
	// Example: { Identifier: "123", Type: ["Tree", "Residential"] } returns substringof(Identifier, "123") eq true and (Type eq "Tree" or Type eq "Residential")
	Cognito.getOdataFilter = function (searchCondition) {
		var filter = "";
		for (var key in searchCondition) {
			var value = searchCondition[key];
			if (value) {
				if (!(value instanceof Array)) {
					//var exp = "substringof(" + key + ", '" + value + "') eq true";
					var exp = "startswith(" + key + ", '" + value + "')";
					filter = filter == "" ? exp : filter + " and " + exp;
				}
				else {
					var choiceExp = "";
					value.forEach(function (v) {
						var exp = key + " eq '" + v + "'";
						choiceExp = choiceExp == "" ? "(" + exp : choiceExp + " or " + exp;
					});
					choiceExp = choiceExp + ")"
					filter = filter == "" ? choiceExp : filter + " and " + choiceExp;
				}
			}
		}

		return filter;
	}

	function getChoiceOptions(adapter) {
		var options = [];
		$.grep(adapter.get_options(), function (option) { options.push(option.get_rawValue()); });
		var otherValue = null;
		var isCheckboxList = $.isArray(adapter.get_rawValue());

		// Checkbox
		if (isCheckboxList)
			otherValue = $(adapter.get_rawValue()).not(options).get()[0] ? $(adapter.get_rawValue()).not(options).get()[0] : "";

			// Radio
		else
			otherValue = !options.contains(adapter.get_rawValue()) ? adapter.get_rawValue() : "";

		var otherOptionAdapter = new ExoWeb.View.OptionAdapter(adapter, otherValue);
		otherOptionAdapter.isFillInOption = true;

		// Ensure that blank values are not considered selected when binding radio buttons
			otherOptionAdapter.get_otherSelected = function () {
			return otherOptionAdapter.get_selected() && !!otherOptionAdapter.get_displayValue();
		};
		otherOptionAdapter.set_otherSelected = function (value) {
			otherOptionAdapter.set_selected(value);
			if (!value)
				otherOptionAdapter.set_displayValue(null);

			Sys.Observer.raisePropertyChanged(this, "otherSelected");
			};

		return adapter.get_options().concat([otherOptionAdapter]);
	}
	Cognito.getChoiceOptions = getChoiceOptions;

	// Gets a value indicating whether the model is valid by traversing the object model searching for
	// conditions. You can also search for a specific condition by specifying the condition code.
	function isModelValid(obj, conditionCode) {
		if (obj.meta.conditions().length > 0) {
			if (!conditionCode)
			return false;
			// Search for specific condition code
			else if (obj.meta.conditions().filter(function (c) { return c.type.code === conditionCode; }).length > 0)
				return false;
		}

			var propertyInfos = obj.meta.type.get_properties();
			for (var i = 0; i < propertyInfos.length; i++) {
				var propInfo = propertyInfos[i];

				// Do not validate static or calculated properties
				if (propInfo.get_isStatic() || !propInfo.get_isPersisted() || Cognito.isPropertyLookup(propInfo))
					continue;

				var fieldName = propInfo.get_fieldName();
				if (obj[fieldName] && obj[fieldName].meta && obj[fieldName].meta instanceof ExoWeb.Model.ObjectMeta) {
				if (!isModelValid(obj[fieldName], conditionCode)) {
						return false;
					}

				} else if (propInfo.get_isList()) {
					var children = obj[fieldName];
					if (children) {
						for (var j = 0; j < children.length; j++) {
							var child = children[j];
							if (child.meta && child.meta instanceof ExoWeb.Model.ObjectMeta)
							if (!isModelValid(child, conditionCode)) {
									return false;
								}
						}
					}
				}
			}

		return true;
	}

	Cognito.isModelValid = isModelValid;

	// Get enumeration with type and name
	function getEnumWithName(enumType, name) {
		return enumType.get_All().filter(function (e) { return e.get_Name() === name; })[0];
	}
	Cognito.getEnumWithName = getEnumWithName;

	Cognito.getJsType = function (typeName) {
		if (typeName === null)
			return null;
		var types = context.model.meta.types().filter(function (t) { return t.get_fullName().toLowerCase() === typeName.toLowerCase(); });
		return types.length > 0 ? types[0].get_jstype() : null;
	};

	function formatUrl(url, entity) {
		var urlParts = url.split("?");

		if (url.indexOf("?") >= 0) {

			var domainPart = url.substr(0, url.indexOf("?") + 1);
			var qsPart = url.substr(domainPart.length);

			var redirectUrl = ExoWeb.Model.Format.fromTemplate(entity.meta.type, domainPart, function (entity) { return entity; }).convert(entity);
			var queryString = ExoWeb.Model.Format.fromTemplate(entity.meta.type, qsPart, function (entity) { return encodeURIComponent(entity); }).convert(entity);

			return redirectUrl + queryString;
		} else {
			return ExoWeb.Model.Format.fromTemplate(entity.meta.type, url, function (entity) { return entity; }).convert(entity);
		}
	}

	Cognito.formatUrl = formatUrl;
    function formatText(value) {
        return value ? value.replace(/\n/g, '<br/>') : value;
    }
    Cognito.formatText = formatText;

    Cognito.escapeHtml = function (value) {
        return value ? value
            .replace(/&/g, '&amp;')
            .replace(/""/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
        : value;
    };

    Cognito.escapeAndFormat = function (value) {
        return Cognito.formatText(Cognito.escapeHtml(value));
    };

    Cognito.maskText = function (value) {
        return value ? value.replace(/./g, '*') : value;
    };

	function getDeviceType(useragent) {
		// Modified version of:
		// http://www.competa.com/blog/how-to-detect-mobile-devices-with-vanilla-javascript/

		if (useragent.match(/Windows NT/i)) {
			return 'windows-desktop';
		} else if (useragent.match(/Android/i)) {
			return 'android';
		} else if (useragent.match(/webOS/i)) {
			return 'webos';
		} else if (useragent.match(/iPhone/i)) {
			return 'iphone';
		} else if (useragent.match(/iPod/i)) {
			return 'ipod';
		} else if (useragent.match(/iPad/i)) {
			return 'ipad';
		} else if (useragent.match(/Windows Phone/i)) {
			return 'windows-phone';
		} else if (useragent.match(/SymbianOS/i)) {
			return 'symbian';
		} else if (useragent.match(/RIM/i) || useragent.match(/BB/i)) {
			return 'blackberry';
		} else {
			return 'unknown';
		}
	}

	Cognito.isDeviceType = function (query) {
		var deviceType = getDeviceType(navigator.userAgent);
		var deviceTypesToCheck = query.split('|');
		return deviceTypesToCheck.some(function (d) { return d.toLowerCase() === deviceType; });
	};

	Cognito.resize = function Cognito$resize(width, form) {
		requestAnimationFrame(function () {
			if (width && form) {
				var width = width;
				var element = $(form);

			} else if (Cognito.viewport) {
				var width = Cognito.viewport.width();
				var element = Cognito.viewport;
			} else
				return;

			if (width <= 414)
				element.addClass("c-sml").removeClass("c-med").removeClass("c-lrg");
			else if (width < 800)
				element.removeClass("c-sml").addClass("c-med").removeClass("c-lrg");
			else
				element.removeClass("c-sml").removeClass("c-med").addClass("c-lrg");

			if (width > 414 && width <= 525)
				element.addClass("c-smed");
			else
				element.removeClass("c-smed");
		});
	};

	Cognito.afterDomReady(function ($) {
		$(window).resize(Cognito.resize);
		Cognito.resize();
	});

	/// Module
	function Module(name) {
		Object.defineProperty(this, "name", { value: name });
		Object.defineProperty(this, "model", { value: {} });
		Cognito.config.modules.push(this);
	}

	Module.mixin({
		serviceRequest: function Module$serviceRequest(options) {
			options.module = this.name;

			Cognito.serviceRequest(options);
		}
	});

	Cognito.Module = Module;


	// polyfill for the Array.some function
	if (!Array.prototype.some) {
		Array.prototype.some = function (fun /*, thisArg */) {
			'use strict';

			if (this === void 0 || this === null)
				throw new TypeError();

			var t = Object(this);
			var len = t.length >>> 0;
			if (typeof fun !== 'function')
				throw new TypeError();

			var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
			for (var i = 0; i < len; i++) {
				if (i in t && fun.call(thisArg, t[i], i, t))
					return true;
			}

			return false;
		};
	}
})(window.ExoJQuery || jQuery);
})(typeof exports === 'undefined');


/***/ }),

/***/ "../../../Cognito.Services/Scripts/required/Cognito-validation.js":
/*!*********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/required/Cognito-validation.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

﻿(( true ? exports : undefined).exec = function (isInIframe) {
(function ($) {
	//#region Email Regex
	Cognito.emailRegex = /([a-zA-Z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^_\`\{\|\}\~]+(\.[a-zA-Z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^_\`\{\|\}\~]+)*@([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,64}|([0-9]{1,3}(\.[0-9]{1,3}){3})))/g;
	Cognito.emailAndTokenRegex = /(\[(([a-z0-9_.\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u02bb-\u02c1\u02d0-\u02d1\u02e0-\u02e4\u02ee\u0370-\u0373\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua680-\ua697\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]+)(?:\:(.+?))?)\])|([a-zA-Z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^_\`\{\|\}\~]+(\.[a-zA-Z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^_\`\{\|\}\~]+)*@([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,64}|([0-9]{1,3}(\.[0-9]{1,3}){3})))/gi;

	//#region Required Name Rule

	// validates that the first and last fields of a name are specified
	function RequiredNameRule(rootType, options) {

		// ensure the rule name is specified
		options.name = options.name || "RequiredName";

		// ensure the error message is specified
		options.message = options.message || "Name is required.";
		
		// configure the properties to validate
		var prop = options.property instanceof ExoWeb.Model.Property ? options.property : rootType.property(options.property);
		if (options.onChangeOf)
			options.onChangeOf = options.onChangeOf.concat([prop.get_name() + ".First", prop.get_name() + ".Last"]);
		else
			options.onChangeOf = [prop.get_name() + ".First", prop.get_name() + ".Last"];
		
		// define properties for the rule, defaulting isRequired to true if not specified
		if (options.fn) {
			Object.defineProperty(this, "isRequired", { value: options.fn, writable: true });
			options.fn = null;
		}
		else
			Object.defineProperty(this, "isRequired", { value: options.isRequired != false });

		// call the base type constructor
		ExoWeb.Model.ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RequiredNameRule.prototype = new ExoWeb.Model.ValidatedPropertyRule();
	RequiredNameRule.prototype.constructor = RequiredNameRule;

	RequiredNameRule.mixin({

		// asserts the condition and adds or removes it from the model if necessary
		execute: function RequiredNameRule$execute(obj) {

			// convert string functions into compiled functions on first execution
			if (this.isRequired.constructor === String) {
				this.isRequired = this.rootType.compileExpression(this.isRequired);
			}

			var name = this.property.value(obj);
			var message = this.message;
			var properties = this.properties;

			var assert = name;

			if (this.isRequired.constructor === Boolean)
				assert = assert && this.isRequired;
			else {
				var isReq;
				try
				{
					isReq = this.isRequired.call(obj);
				}
				catch (e)
				{
					isReq = false;
				}

				assert = assert && isReq;
			}

			// Determine if the condition should be asserted
			if (assert) {
				var firstIsMissing = !ExoWeb.Model.RequiredRule.hasValue(name.get_First());
				var lastIsMissing = !ExoWeb.Model.RequiredRule.hasValue(name.get_Last());
				if (firstIsMissing && lastIsMissing) {
					message = Cognito.resources.get("required-name-first-and-last");
					properties = [this.property.get_name(), this.property.get_name() + "{First,Last}"];
				}
				else if (firstIsMissing) {
					message = Cognito.resources.get("required-name-first");
					properties = [this.property.get_name(), this.property.get_name() + "{First}"];
				}
				else if (lastIsMissing) {
					message = Cognito.resources.get("required-name-last");
					properties = [this.property.get_name(), this.property.get_name() + "{Last}"];
				}
				else
					assert = false;
			}

			// Assert the condition
			this.conditionType.when(assert, obj, properties, message);
		}
	});

	// Expose the rule publicly
	ExoWeb.Model.Rule.requiredName = RequiredNameRule;

	//#endregion

	//#region Signature Rule

	// validates that the signature is specified
	function RequiredSignatureRule(rootType, options) {

		// ensure the rule name is specified
		options.name = options.name || "RequiredSignature";

		// ensure the error message is specified
		options.message = options.message || Cognito.resources.get("required");

		// configure the properties to validate
		var prop = options.property instanceof ExoWeb.Model.Property ? options.property : rootType.property(options.property);
		options.onChangeOf = options.onChangeOf
			? options.onChangeOf.concat(prop.get_name() + ".Svg")
			: prop.get_name() + ".Svg";

		// define properties for the rule, defaulting isRequired to true if not specified
		if (options.fn) {
			Object.defineProperty(this, "isRequired", { value: options.fn, writable: true });
			options.fn = null;
		} else {
			Object.defineProperty(this, "isRequired", { value: options.isRequired != false });
		}

		// call the base type constructor
		ExoWeb.Model.ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RequiredSignatureRule.prototype = new ExoWeb.Model.ValidatedPropertyRule();
	RequiredSignatureRule.prototype.constructor = RequiredSignatureRule;

	RequiredSignatureRule.mixin({

		// asserts the condition and adds or removes it from the model if necessary
		assert: function RequiredSignatureRule$assert(obj) {

			// convert string functions into compiled functions on first execution
			if (this.isRequired.constructor === String) {
				this.isRequired = this.rootType.compileExpression(this.isRequired);
			}

			var signature = this.property.value(obj);
			var message = this.message;
			var properties = this.properties;

			var assert = signature;

			if (this.isRequired.constructor === Boolean) {
				assert = assert && this.isRequired;
			} else {
				var isReq;
				try {
					isReq = this.isRequired.call(obj);
				} catch (e) {
					isReq = false;
				}

				assert = assert && isReq;
			}

			// Asser the condition
			return assert && !ExoWeb.Model.RequiredRule.hasValue(signature.get_Svg());
		}
	});

	// Expose the rule publicly
	ExoWeb.Model.Rule.requiredSignature = RequiredSignatureRule;

	//#endregion

	//#region Required Address Rule

	// Validates required address fields
	function RequiredAddressRule(rootType, options) {

		// ensure the rule name is specified
		options.name = options.name || "Address";

		// ensure the error message is specified
		options.message = options.message || "Address is required.";

		// configure the properties to validate
		var prop = options.property instanceof ExoWeb.Model.Property ? options.property : rootType.property(options.property);

		if (options.onChangeOf)
			options.onChangeOf = options.onChangeOf.concat([prop.get_name() + ".Line1", prop.get_name() + ".City", prop.get_name() + ".State", prop.get_name() + ".PostalCode", prop.get_name() + ".Country"]);
		else
			options.onChangeOf = [prop.get_name() + ".Line1", prop.get_name() + ".City", prop.get_name() + ".State", prop.get_name() + ".PostalCode", prop.get_name() + ".Country"];

		// define properties for the rule, defaulting isRequired to true if not specified
		if (options.fn) {
			Object.defineProperty(this, "isRequired", { value: options.fn, writable: true });
			options.fn = null;
		}
		else
			Object.defineProperty(this, "isRequired", { value: options.isRequired === true });

		if (options.enforceableFields)
			Object.defineProperty(this, "enforceableFields", { value: options.enforceableFields });

		// call the base type constructor
		ExoWeb.Model.ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RequiredAddressRule.prototype = new ExoWeb.Model.ValidatedPropertyRule();
	RequiredAddressRule.prototype.constructor = RequiredAddressRule;

	RequiredAddressRule.mixin({

		// asserts the condition and adds or removes it from the model if necessary
		execute: function RequiredAddressRule$execute(obj) {

			var message;
			var properties = [];
			var validateRequired = function RequiredAddressRule$validateRequired(property, address, fields) {
			    var count = 0;
				message = "";

				// add the address property as a predicate
				properties.push(property);

			    for (var f = fields.length - 1; f >= 0; f--) {
			        var field = fields[f];
			        var value = address.get(field);
			        if (ExoWeb.Model.RequiredRule.hasValue(address.get(field)))
			            continue;
			        properties.push(property + "." + field);
			        // Rename Postal Code to Zip Code if US Address
			        var label = Cognito.resources["address-" + field.toLowerCase()];
			        if (field === "PostalCode" && address.get_Country() === Cognito.resources.get("united-states"))
			            label = Cognito.resources["address-zip-code"];

			        if (count == 0)
			            message = label;
			        else if (count == 1)
			            message = String.format(Cognito.resources.get("this-and-that"), label, message);
			        else
			            message = String.format(Cognito.resources.get("this-comma-that"), label, message);
			        count++;
			    }
			    if (count > 0)
			        message = String.format(count == 1 ? Cognito.resources.get("required-one") : Cognito.resources.get("required-many"), message);
			};

			// Get the address being validated
			var address = this.property.value(obj);

			// Validate the address
			if (address)
			{
				// convert string functions into compiled functions on first execution
				if (this.isRequired.constructor === String) {
					this.isRequired = this.rootType.compileExpression(this.isRequired);
				}

				var isRequired;
				if (this.isRequired.constructor === Boolean)
					isRequired = this.isRequired;
				else{
					try {
						isRequired = this.isRequired.call(obj, obj);
					}
					catch (e) {
						isRequired = false;
					}
				}

				if (isRequired)
                    validateRequired(this.property.get_name(), address, this.enforceableFields || []);

				if (address.get_Country() === Cognito.resources.get("united-states"))
				{
					if (!message && ExoWeb.Model.RequiredRule.hasValue(address.get_PostalCode()) && !/^\s*(\d{5})(-\d{4})?\s*$/.test(address.get_PostalCode()))
					{
						message = Cognito.resources.get("address-zip-code-invalid");
						properties.push(this.property.get_name());
						properties.push(this.property.get_name() + ".PostalCode");
					}
				}
			}

			// Assert or remove the condition based on the validation result
			this.conditionType.when(!!message, obj, properties, message);
		}
	});

	// Expose the rule publicly
	ExoWeb.Model.Rule.requiredAddress = RequiredAddressRule;

	//#endregion

	//#region Zip Code Rule

	// Validates required address fields
	function ZipCodeRule(rootType, options) {

		// ensure the rule name is specified
		options.name = options.name || "ZipCode";

		// ensure the error message is specified
		options.message = options.message || "Zip Code must be formatted as #####-####.";

		// configure the properties to validate
		var prop = options.property instanceof ExoWeb.Model.Property ? options.property : rootType.property(options.property);

		if (options.onChangeOf)
			options.onChangeOf = options.onChangeOf.concat([prop.get_name() + ".PostalCode", prop.get_name() + ".Country"]);
		else
			options.onChangeOf = [prop.get_name() + ".PostalCode", prop.get_name() + ".Country"];

		// call the base type constructor
		ExoWeb.Model.ValidatedPropertyRule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	ZipCodeRule.prototype = new ExoWeb.Model.ValidatedPropertyRule();
	ZipCodeRule.prototype.constructor = ZipCodeRule;

	ZipCodeRule.mixin({

		// asserts the condition and adds or removes it from the model if necessary
		execute: function ZipCodeRule$execute(obj) {

			var message;
			var properties = [];

			// Get the address being validated
			var address = this.property.value(obj);

			// Validate the address
			if (address) {
				if (address.get_Country() === Cognito.resources.get("united-states")) {
					if (ExoWeb.Model.RequiredRule.hasValue(address.get_PostalCode()) && !/^\s*(\d{5})(-\d{4})?\s*$/.test(address.get_PostalCode())) {
						message = Cognito.resources.get("address-zip-code-invalid");
						properties.push(this.property.get_name());
						properties.push(this.property.get_name() + ".PostalCode");
					}
				}
			}

			// Assert or remove the condition based on the validation result
			this.conditionType.when(!!message, obj, properties, message);
		}
	});

	// Expose the rule publicly
	ExoWeb.Model.Rule.zipCode = ZipCodeRule;

	//#endregion

	//#region Unique Name Rule

	// create new validation rule to ensure property value is unique
	function UniqueRule(rootType, options) {
		// ensure the rule name is specified
		options.name = options.name || "UniqueValue";

		// ensure the error message is specified
		options.message = options.message || "Value must be unique";

		// define properties for the rule
		Object.defineProperty(this, "sourceObject", { value: options.sourceObject });
		Object.defineProperty(this, "sourcePath", { value: options.sourcePath });

		// call the base type constructor
		ExoWeb.Model.ValidatedPropertyRule.apply(this, [rootType, options]);

		// never run unique bill type rules during initialization of existing instances
		options.onInitExisting = false;
	}

	// setup the inheritance chain
	UniqueRule.prototype = new ExoWeb.Model.ValidatedPropertyRule();
	UniqueRule.prototype.constructor = UniqueRule;

	UniqueRule.mixin({
		onRegister: function UniqueRule$onRegister() {
			// call the base method
			ExoWeb.Model.ValidatedPropertyRule.prototype.onRegister.call(this);
		},
		isValid: function UniqueRule$isValid(obj, prop, value) {
			if (!this.sourceObject || !this.sourcePath) {
				ExoWeb.logWarning("Unique rule on type \"" + prop.get_containingType().get_fullName() + "\" has not been initialized.");
				return;
			}

			// return true if no value is currently selected
			if (value === undefined || value === null) {
				return true;
			}

			// get the list of allowed values of the property for the given object
			var valuesToSearch = this.values(obj);
			var existingType = null;

			Array.forEach(valuesToSearch, function (val) {
				if (prop.value(val).toLowerCase() == value.toLowerCase() && val.get_Id() != obj.get_Id()) {
					existingType = val;
				}
			});

			return existingType == null || existingType == undefined;
		},
		values: function UniqueRule$values(obj, exitEarly) {
			if (!this.sourceObject || !this.sourcePath) {
				ExoWeb.logWarning("Unique rule on type \"" + this.prop.get_containingType().get_fullName() + "\" has not been initialized.");
				return;
			}

			// Return the value of the source for the given object
			return this.sourceObject["get_" + this.sourcePath]();
		}
	});

	// Expose the rule publicly
	ExoWeb.Model.Rule.unique = UniqueRule;

	// Associate the rule to the exo model property object so it can be assigned to a property
	ExoWeb.Model.Property.prototype.unique = function (sourceObject, sourcePath, message) {
		new ExoWeb.Model.Rule.unique(this.get_containingType(), { property: this, message: message, sourcePath: sourcePath, sourceObject: sourceObject });
		return this;
	};

	//#endregion

	//#region Required RatingScale Rule

	// validates that the first and last fields of a name are specified
	function RequiredRatingScaleRule(rootType, options) {

		// ensure the rule name is specified
		options.name = options.name || "RequiredRatingScale";

		// configure the properties to validate
		var prop = options.property instanceof ExoWeb.Model.Property ? options.property : rootType.property(options.property);
		Object.defineProperty(this, "property", { value: prop });

		// define properties for the rule, defaulting isRequired to true if not specified
		if (options.fn) {
			Object.defineProperty(this, "isRequired", { value: options.fn, writable: true });
			options.fn = null;
		}
		else
			Object.defineProperty(this, "isRequired", { value: options.isRequired != false });

		// automatically run the condition rule during initialization of new instances
		options.onInitNew = true;

		var conditionTypes = [];
		var ratingScalePath = prop.get_name() + ".";
		options.onChangeOf.forEach(function (path) {
			// startsWith "<RatingScale InternalName>."
			if (path.indexOf(ratingScalePath) === 0)
				conditionTypes.push(ExoWeb.Model.Rule.ensureConditionType(options.name + "." + path, rootType, ExoWeb.Model.ConditionType.Error));
		})

		Object.defineProperty(this, "conditionTypes", { value: conditionTypes });

		// call the base type constructor
		ExoWeb.Model.Rule.apply(this, [rootType, options]);
	}

	// setup the inheritance chain
	RequiredRatingScaleRule.prototype = new ExoWeb.Model.Rule();
	RequiredRatingScaleRule.prototype.constructor = RequiredRatingScaleRule;

	RequiredRatingScaleRule.mixin({

		// asserts the condition and adds or removes it from the model if necessary
		execute: function RequiredRatingScaleRule$execute(obj) {

			// convert string functions into compiled functions on first execution
			if (this.isRequired.constructor === String) {
				this.isRequired = this.rootType.compileExpression(this.isRequired);
			}

			var ratingScale = this.property.value(obj);
			var validationMessage = Cognito.resources.get("required");
			var properties = this.properties;

			if (ratingScale) {
				var validate;

				if (this.isRequired.constructor === Boolean)
					validate = this.isRequired;
				else {
					var isReq;
					try {
						isReq = this.isRequired.call(obj);
					}
					catch (e) {
						isReq = false;
					}

					validate = isReq;
				}

				var properties = ratingScale.meta.type.get_properties();
				// Iterate over the rating scale questions asserting or removing the condition based on the validation result 
				for (var i = 0; i < properties.length; i++) {
					var prop = properties[i];
					var fieldName = prop.get_fieldName();
					var assert = validate && !ExoWeb.Model.RequiredRule.hasValue(ratingScale[fieldName]);
					var message = validationMessage.replace('{property}', prop.get_label());

					// lookup the condition type 
					var conditionType = this.conditionTypes.filter(function (c) { return endsWith(c.code, prop.get_name()); })[0];
					if (conditionType)
						conditionType.when(assert, ratingScale, [prop.get_name()], message);
				}
			}
		}
	});
	
	// Expose the rule publicly
	ExoWeb.Model.Rule.requiredRatingScale = RequiredRatingScaleRule;

	function endsWith(str, suffix) {
		return str.indexOf(suffix, str.length - suffix.length) !== -1;
	}

	//#endregion

})();
})(typeof exports === 'undefined');


/***/ }),

/***/ "./src/views/admin/required-scripts.ts":
/*!*********************************************!*\
  !*** ./src/views/admin/required-scripts.ts ***!
  \*********************************************/
/*! exports provided: executeScripts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executeScripts", function() { return executeScripts; });
/* harmony import */ var _legacy_Scripts_required_Cognito_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @legacy/Scripts/required/Cognito-core.js */ "../../../Cognito.Services/Scripts/required/Cognito-core.js");
/* harmony import */ var _legacy_Scripts_required_Cognito_core_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_legacy_Scripts_required_Cognito_core_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _legacy_Scripts_component_cognito_messaging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @legacy/Scripts/component/cognito-messaging.js */ "../../../Cognito.Services/Scripts/component/cognito-messaging.js");
/* harmony import */ var _legacy_Scripts_component_cognito_messaging_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_legacy_Scripts_component_cognito_messaging_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _legacy_Scripts_Cognito_core_admin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @legacy/Scripts/Cognito-core-admin.js */ "../../../Cognito.Services/Scripts/Cognito-core-admin.js");
/* harmony import */ var _legacy_Scripts_Cognito_core_admin_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_legacy_Scripts_Cognito_core_admin_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _legacy_Views_Admin_admin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @legacy/Views/Admin/admin.js */ "../../../Cognito.Services/Views/Admin/admin.js");
/* harmony import */ var _legacy_Views_Admin_admin_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_legacy_Views_Admin_admin_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _legacy_Scripts_required_Cognito_validation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @legacy/Scripts/required/Cognito-validation.js */ "../../../Cognito.Services/Scripts/required/Cognito-validation.js");
/* harmony import */ var _legacy_Scripts_required_Cognito_validation_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_legacy_Scripts_required_Cognito_validation_js__WEBPACK_IMPORTED_MODULE_4__);





// since the imports above automatically execute their functions, avoid duplicate execution on the first call to executeScripts
var isInitialImport = true;
function executeScripts() {
  if (!isInitialImport) {
    _legacy_Scripts_required_Cognito_core_js__WEBPACK_IMPORTED_MODULE_0___default.a.exec();
    _legacy_Scripts_component_cognito_messaging_js__WEBPACK_IMPORTED_MODULE_1___default.a.exec();
    _legacy_Scripts_Cognito_core_admin_js__WEBPACK_IMPORTED_MODULE_2___default.a.exec();
    _legacy_Views_Admin_admin_js__WEBPACK_IMPORTED_MODULE_3___default.a.exec();
    _legacy_Scripts_required_Cognito_validation_js__WEBPACK_IMPORTED_MODULE_4___default.a.exec();
  }
  isInitialImport = false;
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,