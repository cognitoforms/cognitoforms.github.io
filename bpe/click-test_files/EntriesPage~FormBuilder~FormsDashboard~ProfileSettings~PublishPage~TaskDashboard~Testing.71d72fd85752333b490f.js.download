(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["EntriesPage~FormBuilder~FormsDashboard~ProfileSettings~PublishPage~TaskDashboard~Testing"],{

/***/ "../../libs/utils/utils.ts":
/*!****************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/utils/utils.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.injectScript = injectScript;
/**
* Injects a script tag into the page.
* @returns A promise that resolves when the script tag has finished loading.
*/
function injectScript(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var scriptId = options ? options.scriptId : null;
  var dataProperties = options ? options.dataProperties : null;
  var targetElement = (options ? options.targetElement : null) || document.head;
  var script = document.createElement('script');
  if (scriptId) script.id = scriptId;
  if (dataProperties) {
    for (var _i = 0, _Object$keys = Object.keys(dataProperties); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      script.dataset[key] = dataProperties[key];
    }
  }
  script.src = url;
  script.async = true;
  var scriptReady = new Promise(function (resolve, reject) {
    script.onload = function () {
      return resolve(script);
    };
    script.onerror = function (error) {
      return reject(error);
    };
  });
  targetElement.appendChild(script);
  return scriptReady;
}

/***/ }),

/***/ "./src/views/admin/utils/cognito-ready.ts":
/*!************************************************!*\
  !*** ./src/views/admin/utils/cognito-ready.ts ***!
  \************************************************/
/*! exports provided: setReadyDependencies, ready */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setReadyDependencies", function() { return setReadyDependencies; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ready", function() { return ready; });
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);

var readyDependencies = null;

/**
 * Sets the ready dependencies dictionary
 * @param value The ready dependencies dictionary to use
 */
function setReadyDependencies(value) {
  readyDependencies = value;
}

/**
 * Ready - handles tracking of one time dependencies to synchronize code execution
 */

function ready(name, arg2, arg3) {
  var dependencies = arguments.length === 3 ? typeof arg2 === 'string' ? [arg2] : arg2 : [];
  var action = arguments.length === 3 ? arg3 : arg2;

  // Invoke the dependent action if dependencies are all available
  var invokeDependent = function invokeDependent(dependent) {
    if (!dependent.action) return false;
    for (var d = 0; d < dependent.dependencies.length; d++) {
      var _dependency = readyDependencies[dependent.dependencies[d]];
      // eslint-disable-next-line eqeqeq
      if (!(_dependency == true)) return false;
    }
    try {
      dependent.action(window.ExoJQuery);
      dependent.action = null;
      ready(dependent.name);
      return true;
    } catch (e) {
      console.error(e);
      if (window.appInsights) {
        window.appInsights.trackException(e, 'Cognito.ready', {
          readyActionName: dependent.name
        });
      }
      readyDependencies[dependent.name] = false;
      return false;
    }
  };
  function isDependentsArray(dependency) {
    if (typeof dependencies === 'undefined') return false;
    if (typeof dependency === 'boolean') return false;
    if (Array.isArray(dependency)) return true;
    return false;
  }

  // Dependency
  if (arguments.length === 1) {
    var dependencyValue = readyDependencies[name];
    readyDependencies[name] = true;
    if (isDependentsArray(dependencyValue)) {
      var dependents = dependencyValue;
      for (var d = 0; d < dependents.length; d++) {
        if (readyDependencies[dependents[d].name] !== false) {
          invokeDependent(dependents[d]);
        }
      }
    }
  }
  // Dependent
  else {
    // Create the dependent tracking object
    var dependent = {
      name: name,
      dependencies: dependencies,
      action: action
    };

    // Register the dependent if it cannot be invoked
    if (!invokeDependent(dependent)) {
      for (var _d = 0; _d < dependent.dependencies.length; _d++) {
        var _dependency2 = readyDependencies[dependent.dependencies[_d]];
        if (!_dependency2) readyDependencies[dependent.dependencies[_d]] = [dependent];else if (_dependency2 instanceof Array) _dependency2.push(dependent);
      }
    }
  }
}

/***/ }),

/***/ "./src/views/admin/utils/globals-management.ts":
/*!*****************************************************!*\
  !*** ./src/views/admin/utils/globals-management.ts ***!
  \*****************************************************/
/*! exports provided: ensureCognitoGlobal, disposeLegacyPageState, resetEntityPools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureCognitoGlobal", function() { return ensureCognitoGlobal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disposeLegacyPageState", function() { return disposeLegacyPageState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetEntityPools", function() { return resetEntityPools; });
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.values.js */ "../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.object.values.js");
/* harmony import */ var core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_values_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _cognito_ready__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cognito-ready */ "./src/views/admin/utils/cognito-ready.ts");






/**
 * Ensure that the Cognito global is present on the given window object
 */
function ensureCognitoGlobal() {
  var win = window;
  var Cognito = win.Cognito;
  if (!Cognito) {
    var readyDependencies = {};
    Object(_cognito_ready__WEBPACK_IMPORTED_MODULE_5__["setReadyDependencies"])(readyDependencies);
    var templateComponents = [];
    Cognito = win.Cognito = {
      ready: _cognito_ready__WEBPACK_IMPORTED_MODULE_5__["ready"],
      readyDependencies: readyDependencies,
      templateComponents: templateComponents
    };
  } else {
    // Establish readyDependencies if needed and assign to module storage
    var _readyDependencies = Cognito.readyDependencies || {};
    Cognito.readyDependencies = _readyDependencies;
    Object(_cognito_ready__WEBPACK_IMPORTED_MODULE_5__["setReadyDependencies"])(_readyDependencies);
    // Establish templateComponents array if needed
    Cognito.templateComponents = Cognito.templateComponents || [];
  }
  Cognito.ready = _cognito_ready__WEBPACK_IMPORTED_MODULE_5__["ready"];
  return Cognito;
}

/**
 * Cleans up event handlers
 */
function removeGlobalJQueryEventHandlers() {
  var $ = window.$;
  $(document.body).off();
  $(document).off();
  $(document.documentElement).off();
  $(window).off();
}
var modelPropertyNativeTypes = [String, Date, Number, Boolean];

/**
 * Gets rid of global state created by legacy page scripts, ex: MS Ajax, ExoWeb, window.Cognito, etc.
 */
function disposeLegacyPageState(pageElement) {
  var _win$VueComponents, _win$Cognito, _win$Cognito2, _win$Cognito3, _win$Cognito4, _win$context, _win$context2;
  var Cognito = ensureCognitoGlobal();
  var win = window;
  removeGlobalJQueryEventHandlers();
  (_win$VueComponents = win.VueComponents) === null || _win$VueComponents === void 0 ? void 0 : _win$VueComponents.closeAllDialogs();
  win.$.fn.dialog.constructor.activeDialogs.forEach(function (dlg) {
    return dlg.close(true);
  });
  // explicitly clean up dialogs since they get moved out of the msajax element
  document.body.querySelectorAll('.c-modal').forEach(function (dlg) {
    return !dlg.__vue__ && !dlg.parentElement.__vue__ && dlg.remove();
  });
  win.Sys.Application.disposeElement(document.documentElement);
  // Reset any ms-ajax-template components so that they will re-initialize if needed
  Cognito.templateComponents.forEach(function (vm) {
    vm.reset();
  });
  if ((_win$Cognito = win.Cognito) !== null && _win$Cognito !== void 0 && _win$Cognito.timers) {
    for (var _i = 0, _Object$values = Object.values(win.Cognito.timers); _i < _Object$values.length; _i++) {
      var _id = _Object$values[_i];
      clearTimeout(_id);
      clearInterval(_id);
    }
  }
  // should abort all requests
  if ((_win$Cognito2 = win.Cognito) !== null && _win$Cognito2 !== void 0 && _win$Cognito2.abortRequests) {
    win.Cognito.abortRequests();
  }

  // Removed cached ExoWeb formats on native types
  modelPropertyNativeTypes.forEach(function (t) {
    return delete t._formats;
  });
  (_win$Cognito3 = win.Cognito) === null || _win$Cognito3 === void 0 || (_win$Cognito3 = _win$Cognito3.Forms) === null || _win$Cognito3 === void 0 || (_win$Cognito3 = _win$Cognito3.db) === null || _win$Cognito3 === void 0 ? void 0 : _win$Cognito3.close();
  (_win$Cognito4 = win.Cognito) === null || _win$Cognito4 === void 0 || (_win$Cognito4 = _win$Cognito4.Messaging) === null || _win$Cognito4 === void 0 ? void 0 : _win$Cognito4.dispose();
  delete win.Cognito;
  (_win$context = win.context) === null || _win$context === void 0 || delete _win$context.server;
  (_win$context2 = win.context) === null || _win$context2 === void 0 || delete _win$context2.model;
  delete win.context;
  for (var _i2 = 0, _Object$keys = Object.keys(win.ExoWeb.Model.ConditionType.allConditionTypes); _i2 < _Object$keys.length; _i2++) {
    var k = _Object$keys[_i2];
    delete win.ExoWeb.Model.ConditionType.allConditionTypes[k];
  }
  for (var _i3 = 0, _Object$keys2 = Object.keys(win.ExoWeb.Model.ConditionTypeSet.allConditionTypeSets); _i3 < _Object$keys2.length; _i3++) {
    var _k = _Object$keys2[_i3];
    delete win.ExoWeb.Model.ConditionTypeSet.allConditionTypeSets[_k];
  }
  for (var _i4 = 0, _Object$keys3 = Object.keys(win.ExoWeb.Model.Model.types); _i4 < _Object$keys3.length; _i4++) {
    var _k2 = _Object$keys3[_i4];
    delete win.ExoWeb.Model.Model.types[_k2];
  }
  // unregister msajax "templates"
  for (var _i5 = 0, _Object$keys4 = Object.keys(win.Sys.Application._components); _i5 < _Object$keys4.length; _i5++) {
    var componentId = _Object$keys4[_i5];
    win.Sys.Application.removeComponent(win.Sys.Application._components[componentId]);
  }
}
/**
 * Resets the entity pool for all known types.
 */
function resetEntityPools() {
  if (window.context) {
    var context = window.context;
    var model = context.model.meta;
    Object.keys(model._types).forEach(function (typeName) {
      var type = model._types[typeName];
      type._pool = {};
      type._legacyPool = {};
      type.get_properties().filter(function (p) {
        return p.get_isStatic();
      }).forEach(function (p) {
        if (p.get_isEntityType()) {
          // Null out entity reference
          p.value(null, null);
        } else if (p.get_isEntityListType()) {
          // Clear out entity list
          var list = p.value(null);
          list.length = 0;
        }
      });
    });
  }
}
;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,