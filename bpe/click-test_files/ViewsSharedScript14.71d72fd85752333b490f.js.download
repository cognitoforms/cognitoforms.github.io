(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ViewsSharedScript14"],{

/***/ "../../../Cognito.Services/Views/Shared/forms-payment.js":
/*!************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Views/Shared/forms-payment.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function (isInIframe) {
Cognito.ready("forms-payment-iframe", ["ExoWeb.dom"], function ($) {
	// get the iframe
	var $iframe = $('.c-forms-checkout');
	var parentOrigin = window.location.origin ? window.location.origin : window.location.protocol + "\\" + window.location.host;

	if ($iframe.length) {
		// set iframe source
		var url = $iframe.attr('data-src') + (($iframe.attr('data-src').indexOf('?') > -1 ? '&' : '?') + 'sessionToken=' + encodeURIComponent(Cognito.config.sessionToken));
		$iframe.attr('src', url);

		if (Cognito.config.multiFeeSupport) {
			// append a listener for the billing info request to handle passing billing info to the payment iframe
			Cognito.Messaging.addHandler("billingInfoRequest", function () {
				Cognito.Forms.rebuildOrder(Cognito.Forms.model.entry, Cognito.Forms.model.order);
				$(".c-processing-fee-placeholder").html(Cognito.resources["processing-fee-calculating-message"]);
				Cognito.Messaging.trigger("createToken", {
					target: $iframe[0].contentWindow,
					origin: Cognito.config.baseUrl,
					data: {
						processor: 'Stripe',
						parentOrigin: parentOrigin,
						orderInfo: JSON.stringify(Cognito.Forms.getPaymentInformation())
					}
				});
			});
		}

		/**
		  * Handle a request for order information by sending the order information
		  */
		Cognito.Messaging.addHandler("requestOrderInfo", function () {
			Cognito.Messaging.trigger("orderInfo", {
				target: $iframe[0].contentWindow,
				origin: Cognito.config.baseUrl,
				data: {
					orderInfo: JSON.stringify(Cognito.Forms.getPaymentInformation())
				}
			})
		});
	}
});

Cognito.ready("forms-payment-registration", ["Cognito.Forms"], function ($) {

	// listen for messages from the iframe to clear out the payment validation
	Cognito.Messaging.addHandler("paymentUpdate", function () {
		Cognito.Forms.clearPaymentValidation();
	});

	// listen for messages from iframe to set the payment method
	Cognito.Messaging.addHandler("cardType", function (data) {
		if (data.cardType) {
			Cognito.Forms.model.order.set_PaymentMethod(Cognito.getEnumWithName(Cognito.Payment.PaymentMethod, data.cardType));
		} else {
			Cognito.Forms.model.order.set_PaymentMethod(Cognito.getEnumWithName(Cognito.Payment.PaymentMethod, 'None'));
		}
	});

	// listen for messages from iframe to rebuild the order based on the new payment token
	Cognito.Messaging.addHandler("payTokenCreated", function (data) {
		if (data) {
			Cognito.Forms.rebuildOrder(Cognito.Forms.model.entry, Cognito.Forms.model.order, data);
			$(".c-processing-fee-placeholder").html("---");
		}
	});

	// listen for messages from iframe to rebuild the order, after it was invalidated within the payment frame
	Cognito.Messaging.addHandler("orderInvalidated", function () {
		Cognito.Forms.rebuildOrder(Cognito.Forms.model.entry, Cognito.Forms.model.order);
	});

	// listen for messages from iframe to resize the iframe
	Cognito.Messaging.addHandler("resizeResponse", function (data) {
		resizePaymentFrame(data);
	});

	// Stripe Elements has an issue with tabbing out of the payment container, so we have to have a manual event/passthrough
	Cognito.Messaging.addHandler("cardNumberTab", function (data) {
		// Set focus on the next input element
		$(".c-forms-form-main .c-forms-form input:checkbox, .c-forms-form input:radio, .c-forms-form input:text, .c-forms-form select, .c-forms-form textarea, .c-forms-form input:password").last().focus();
	});
	Cognito.Messaging.addHandler("cvvTab", function (data) {
		// Set focus on the next input element
		$("#c-card-on-file-agreement:visible, #c-submit-button:visible").first().focus();
	});

	Cognito.Messaging.addHandler("requestStyles", function () {
		// Fetch styles from style marker
		var foundStyles = {};
		var styleEl = document.querySelector(".c-forms-form-style");
		if (styleEl) {
			var styles = window.getComputedStyle(styleEl);
			for (var i = 0; i < styles.length; i++) {
				foundStyles[styles[i]] = styles.getPropertyValue(styles[i]);
			}
		}

		// Pull placeholder text color from theme element
		if ($("#theme").length) {
			var sheet = $("#theme")[0].sheet;
			var themeRules = sheet.rules || sheet.cssRules;
			for (var i = 0; i < themeRules.length; i++) {
				var rule = themeRules.item(i);
				if (rule.selectorText.indexOf("placeholder") !== -1) {
					foundStyles.inputPlaceholderColor = rule.style["color"];
				}
			}
		}

		// If text font uses a Google font, get it from the theme and pass to event listener
		if (Cognito.Forms.model.theme)
			foundStyles.textFontUrl = Cognito.Forms.model.theme.get_Text().get_FontFamily().split('|')[1];
		else if (Cognito.Forms.model.themeTextFontFamily && Cognito.Forms.model.themeTextFontFamily.indexOf("|") !== -1)
			foundStyles.textFontUrl = Cognito.Forms.model.themeTextFontFamily.split("|")[1];


		var iframe = ExoJQuery('.c-forms-checkout');
		Cognito.Messaging.trigger("setStyle", { data: foundStyles, target: iframe[0].contentWindow });
	});

	Cognito.Messaging.addHandler("paymentReady", function (data) {
		Cognito.Messaging.trigger("entryPaymentReady");

		resizePaymentFrame(data, function () {

			if (Cognito.config.mode === "admin")
				Cognito.Forms.rebuildOrder(Cognito.Forms.model.entry, Cognito.Forms.model.order);

			Cognito.Forms.toggleCheckout(Cognito.Forms.model.entry, Cognito.Forms.model.order);
		});
	});

	Cognito.Messaging.addHandler("resizeVenmoFrame", function (data) {
		Cognito.Messaging.trigger("venmoActive", { data: data.venmoActive});
	});

	function resizePaymentFrame(data, callback) {
		if (data && data.frameHeight) {
			// get the iframe
			var $iframe = $('.c-forms-checkout');

			if ($iframe.length) {
				$iframe.height(data.frameHeight);
			}
		}

		if (callback && callback instanceof Function) {
			callback();
		}
	}

	function paymentAccountWarning(errorMessage) {

		Cognito.serviceRequest({
			dataType: "json",
			module: "payment",
			endpoint: "PaymentAccountWarning",
			method: "POST",
			data: { paymentAccountId: Cognito.config.paymentAccountId, message: errorMessage },
			success: function (data) { },
			error: function (data, msg) { }
		});
	}
	Cognito.Forms.paymentAccountWarning = paymentAccountWarning;

	function formsPaymentError(errorMessage) {
		var validationDiv = ExoJQuery(".c-form-payment-error");

		if (errorMessage) {
			validationDiv.html(errorMessage).show();
		} else {
			validationDiv.html("").hide();
		}
	}
	Cognito.Forms.formsPaymentError = formsPaymentError;

	function clearPaymentValidation() {
		ExoJQuery(".c-form-payment-error").html('').hide();
	}
	Cognito.Forms.clearPaymentValidation = clearPaymentValidation;

	function toggleCheckout(entry, order) {
		if ((entry.get_Require_Payment() && order.get_OrderAmount() > 0) || entry.get_Save_Customer_Card()) {

			var iframe = ExoJQuery('.c-forms-checkout');

			if(iframe.length)
				Cognito.Messaging.trigger("resizeRequest", { target: iframe[0].contentWindow });

			ExoJQuery("#c-forms-checkout-container").css("display", "block");
			ExoJQuery("#c-submit-button").show();
			ExoJQuery("#c-web-paypal-checkout").hide();
			ExoJQuery(".c-web-paypal-processing").hide();
		} else {
			ExoJQuery("#c-forms-checkout-container").css("display", "none");
			ExoJQuery("#c-submit-button").show();
			ExoJQuery("#c-web-paypal-checkout").hide();
			ExoJQuery(".c-web-paypal-processing").hide();
		}
	}
	Cognito.Forms.toggleCheckout = toggleCheckout;

	function roundToEven(num, d) {
		d = d || 0;
		var m = Math.pow(10, d);
		var n = +(d ? num * m : num).toFixed(8);
		var i = Math.floor(n), f = n - i;
		var e = 1e-8;
		var r = (f > 0.5 - e && f < 0.5 + e) ?
			((i % 2 == 0) ? i : i + 1) : Math.round(n);
		return d ? r / m : r
	}
	Cognito.Forms.roundToEven = roundToEven;
});
})(typeof exports === 'undefined');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,