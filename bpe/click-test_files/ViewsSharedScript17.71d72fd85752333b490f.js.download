(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ViewsSharedScript17"],{

/***/ "../../../Cognito.Services/Views/Shared/gridview.js":
/*!*******************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Views/Shared/gridview.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/// <reference path="../../../Cognito.Web.Client/apps/spa/src/views/admin/utils/exoweb.d.ts" />
/* harmony default export */ __webpack_exports__["default"] = (function ({ canManageEntries }) {
	Cognito.ready("gridview", ["entrylist", "ExoWeb.dom"], function ($) {

		Cognito.Messaging.addHandler("entriesUpdated", function (updatedFormIds) {
			if (updatedFormIds.includes(Cognito.Forms.model.formId) && !refreshing)
				Cognito.Forms.gridController.refreshEntries(null, false, true);
		});

		//#region Global Variables
		var grid;
		var currentEntryKey;
		var selectedEntries = [];
		var loading;
		var refreshing;
		var entrySet;
		var currentView;
		var currentFilterInvalid;
		var shortUserId;
		var initialized;
		var readStates = {};
		var refreshInterval;
		var progressBarWidth = 0;
		var previousProgressNum = 0;
		var failedSignatureUrls = [];
		var winHeight = window.innerHeight;
		var rowHeight = winHeight < 700 ? 32 : winHeight < 900 ? 34 : 36;
		var indexesBuilt = false;
		document.documentElement.style.setProperty("--row-height", rowHeight + "px");

		//#endregion

		/**
		 * Returns a function that will call the underlying callback as long as the form has not changed.
		 * @param {Function} callback The underlying callback to invoke
		 * @returns A function that conditionally calls the given callback.
		 */
		function checkForm(callback) {
			if (!Cognito.Forms.model.formId) {
				console.warn('Cannot bind a callback prior to the form id being established.');
				return callback;
			}

			let capturedFormId = Cognito.Forms.model.formId;

			return function checkFormCallback() {
				if (!window.Cognito || !Cognito.Forms || !Cognito.Forms.model || Cognito.Forms.model.formId !== capturedFormId) {
					console.log('Discarding callback due to form change from ' + capturedFormId + ' to ' + (window.Cognito && Cognito.Forms.model && Cognito.Forms.model.formId) + '.');
					return;
				}

				// Call the original callback
				return callback.apply(this, arguments);
			};
		}

		/**
		 * Returns a function that will call the underlying callback as long as the `grid` variable has not changed.
		 * @param {Function} callback The underlying callback to invoke
		 * @see grid
		 * @returns A function that conditionally calls the given callback.
		 */
		function checkGrid(callback) {
			if (!grid) {
				console.warn('Cannot bind a callback prior to creation of the grid.');
				return callback;
			}

			let capturedGrid = grid;

			return function checkGridCallback() {
				if (grid !== capturedGrid) {
					console.log('Discarding callback due to grid change.');
					return;
				}

				// Call the original callback
				callback.apply(this, arguments);
			};
		}

		$extend("Cognito.Forms.EntryView", function (type) {
			var isUserSpecificProp = type.meta.addProperty({ name: "isUserSpecific", type: Boolean, origin: "server" }).defaultValue(false);
			isUserSpecificProp._origin = "server";
			isUserSpecificProp._isPersisted = true;
		});

		//#region Controller

		function updateProgressBar(num, interval) {
			// If the previous num was greater than the new num it will show the progress going backwards
			if (Math.round(num) < Math.round(previousProgressNum))
				$("#progress-bar-value").css({ transitionDuration: 0 + "ms" });
			else
				$("#progress-bar-value").css({ transitionDuration: (interval + 1000) + "ms" });

			if (num >= progressBarWidth) {
				$("#progress-bar-value").css({ width: num + "%" });
				progressBarWidth = num;
			}

			if (num == 100) {
				$("#progress-bar-value").on('transitionend', function () {
					if (!Cognito.Forms.model.entries)
						updateProgressMessage("Loading...");
					$("#progress").removeClass("c-entries-loading");
				});
				progressBarWidth = 0;
			} else {
				indexesBuilt = true;
				updateProgressMessage("Preparing...");
			}

			if (num < 100)
				$("#progress").addClass("c-entries-loading");

			if (!isNaN(num))
				previousProgressNum = num;
		}

		// Top Controller
		var controller;
		if (ExoWeb.evalPath(window.parent, 'Cognito.Forms.controller')) {
			Cognito.ready("Cognito.Forms.controller");
		}
		else {
			Cognito.Messaging.addHandler("controllerReady", function () {
				Cognito.ready("Cognito.Forms.controller");
			});
		}

		// Master Controller
		Cognito.Forms.gridController = {

			reset: function() {
				if (grid) {
					grid.destroy();
					grid = null;
				}
				recordPageReady = true;
				initialized = false;
				Cognito.Forms.model.entries = entrySet = null;
			},

			changeView: function changeView(view, mode, role, changingForm) {
				// Destroy grid if changing forms
				if (changingForm || (currentView && currentView.get_Form().get_Id() !== view.get_Form().get_Id()))
					this.reset();

				// Track the current view
				currentView = view;

				if (currentView.get_Type().get_Name() === "Form")
					return;

				// Show Loading Message
				updateProgressMessage("Loading...");

				currentFilterInvalid = view.get_Filter().get_Invalid();
				function initEntrySet() {
					return AdminForm.getEntrySet(
						view.get_Id(),
						view.get_Token(),
						role,
						Cognito.config.userInfo,
						view.get_isUserSpecific() ? shortUserId : null
					).then(checkForm(function (newEntrySet) {
						Cognito.Forms.model.entries = entrySet = newEntrySet;

						// Ensure the grid has been initiaized
						if (!grid)
							initializeGrid(mode == "phone");

						return newEntrySet;
					}));
				}

				// Show an error message if the filter is not valid
				if (currentFilterInvalid) {
					updateProgressMessage("Invalid Filter");
					if (!initialized) {
						initEntrySet();
						initialized = true;
					}
				}

				// Treat dynamic filters as adhoc client filters
				else if (!Cognito.config.flags.UseCosmosIndexes && view.get_Filter().get_IsDynamic()) {
					initEntrySet().then(function () {
						// Update column and sort settings
						Cognito.Forms.gridController.changeColumns(view.get_Columns());
						updateSortIndicators(view.get_SortBy());
						Cognito.Forms.gridController.changeFilter(view.get_Filter());
					});
				}

				// Asynchronously load the set of entries to show in the grid
				else {
					initEntrySet().then(checkForm(function (entrySet) {
						entrySet.refresh(updateProgressBar).then(checkForm(function () {
							// Update column and sort settings
							Cognito.Forms.gridController.changeColumns(view.get_Columns());
							updateSortIndicators(view.get_SortBy());

							// Bind entry set to the grid
							bindGrid(entrySet);

							if (Cognito.config.flags.CosmosIndexes && entrySet.timestamp) {
								var setTimestamp = new Date(entrySet.timestamp);
								var millisecondsSinceUpdate = new Date() - setTimestamp;

								// If this set hasn't been updated in 5 minutes, assert that the index and statistics match
								if (millisecondsSinceUpdate > 5 * 60 * 1000)
									Cognito.Forms.compareEntryCounts(entrySet.view, entrySet.indexes.size, view.get_isUserSpecific());
							}
						}));
						return entrySet;
					}));
				}
			},

			// Change Layout
			changeLayout: function changeLayout(mode) {
				initializeGrid(mode == "phone");
			},

			// Change Sort
			changeSort: function changeSort(columns) {

				// Update the view sort columns
				currentView.set_SortBy(columns);

				// Show Sorting Message
				updateProgressMessage("Sorting...", function () {

					// Update sort indicators to reflect the sorting specified for the current view
					updateSortIndicators(columns);

					// Sort the entries
					entrySet.sort(getSortCriteria(columns)).then(checkGrid(function () {
						refreshGrid();
						if (!currentEntryKey) grid.scrollRowToTop(0);
					}));
				});
			},

			// Change Filter
			changeFilter: function changeFilter(filter) {
				currentFilterInvalid = filter.get_Invalid();
				// Show Filtering Message
				updateProgressMessage("Filtering...");
				filter = Cognito.serialize(filter);

				// Get the current sort criteria to apply to the filtered entry set
				var sortCriteria = entrySet.getSortCriteria() || getSortCriteria(currentView.get_SortBy());

				// Load the full set of entries and apply filter
				AdminForm.getEntrySet(Cognito.Forms.model.formId + "-0",
					Cognito.Forms.model.allEntriesToken,
					entrySet.role,
					Cognito.config.userInfo,
					currentView.get_isUserSpecific() ? shortUserId : null
				).then(checkForm(function (allEntriesSet) {
					return allEntriesSet.filter(filter, sortCriteria);
				})).then(checkForm(function (filteredSet) {
					bindGrid(filteredSet);
				}));
			},

			// Change Columns
			changeColumns: function changeColumns(columns) {
				grid.setColumns(grid.getColumns().slice(0, 2).concat(getGridColumns(columns)));
			},

			// Poll Entry Changes
			pollEntryChanges: function (entryKey, callback) {
				if (Cognito.config.flags.AppNav)
					return;

				refreshing = true;
				entrySet.pollEntry(entryKey.EntryId).then(checkGrid(function () {
					let row = entrySet.indexOfEntryId(entryKey.EntryId);
					if (row)
						grid.invalidateRow(row);
					refreshGrid(true);
					if (typeof callback === 'function') callback();
				}));
			},

			// Refresh Entries
			refreshEntries: function refreshEntries(callback, pollingRefresh = false, backgroundRefresh = false) {
				refreshing = true;
				if (entrySet) {
					entrySet.refresh(updateProgressBar).then(checkGrid(function (newEntrySet) {
						if (newEntrySet)
							bindGrid(newEntrySet);
						else
							refreshGrid(pollingRefresh, backgroundRefresh);

						if (typeof callback === 'function') callback();
					}));
				}
			},

			// Update entry read states
			changeReadStates: function changeEntryStates(indexes, read) {
				let updates = [];
				for (let i = 0; i < indexes.length; i++) {
					let index = entrySet.indexOfEntryId(indexes[i].EntryId);
					var entry = entrySet.entryAt(index);
					let status = "";
					if (entry)
						status = entry.Entry.Status;

					// Only allow completed entries to be marked as unread
					if (read || status !== "Incomplete") {
						updates.push(indexes[i]);

						readStates[indexes[i].EntryId] = read;
						grid.invalidateRow(index);
					}
				}
				if (updates.length)
					controller.updateEntryReadState(updates, read);
				grid.render();
			},

			// Clear Selection
			clearSelection: function clearSelection() {
				updateSelectedEntries([], currentEntryKey);
			},

			// View Entry
			viewEntry: function viewEntry(entryKey) {
				updateSelectedEntries([entryKey], entryKey);
			},

			// Hide Entry
			hideEntry: function hideEntry() {
				updateSelectedEntries(currentEntryKey && selectedEntries.length == 1 && selectedEntries[0].EntryId == currentEntryKey.EntryId ? [] : selectedEntries, null);
			},

			// Hide Menus
			hideMenus: function hideMenus() {
				$(".c-menu-open").removeClass("c-menu-open").css("transition", "").css("max-height", "").css("overflow-y", "");
			},

			reportSignatureLoadError: function reportSignatureLoadError(url) {
				if (url && window.appInsights && failedSignatureUrls.indexOf(url) < 0) {
					window.appInsights.trackException(new Error("Offloaded signature image failed to load: " + url));
					failedSignatureUrls.push(url);
				}
			},

			// Update Progress Message
			updateProgressMessage: function (message) {
				updateProgressMessage(message);
			},

			startRefreshInterval: function startRefreshInterval() {
				if (Cognito.config.hasPaidPlan && !Cognito.config.isUnitTesting) {
					function refreshView() {
						if (!refreshing && !$("#progress span").text())
							Cognito.Forms.gridController.refreshEntries(null, true);
					};
					refreshView();

					refreshInterval = Cognito.timers.gridRefreshInterval = window.setInterval(refreshView, 60000);
				}
			},

			stopRefreshInterval: function stopRefreshInterval() {
				clearInterval(refreshInterval);
			}

		};

		//#endregion

		//#region Grid

		function initializeGrid() {

			if (!grid) {

				// Determine the propery paths and scopes for each field
				var fieldInfos = Cognito.Forms.model.fieldInfos;
				Cognito.Forms.model.fieldInfos = fieldInfos = entrySet.getPropertyChains(fieldInfos);

				// Intialize Column List
				var checkboxSelector = new Slick.CheckboxSelectColumn({});
				var checkboxColumn = checkboxSelector.getColumnDefinition();
				checkboxColumn.cssClass = "c-checkbox-fancy c-selector-col";
				checkboxColumn.headerCssClass = "c-checkbox-fancy c-selector-col";
				checkboxColumn.reorderable = false;
				checkboxColumn.width = 40;
				checkboxColumn.depth = 0;
				var columns = [
					checkboxColumn,
					{ id: "Entry.Number", name: "#", field: fieldInfos[0].property, width: 50, depth: 0, cssClass: "c-id", sortable: true, reorderable: false, autoSizePadding: 0 }
				];

				// Add View Columns
				columns = columns.concat(getGridColumns(currentView.get_Columns()));

				// Configure Grid Options
				var options = {
					enableCellNavigation: true,
					multiSelect: true,
					multiColumnSort: true,
					rowHeight: rowHeight,
					syncColumnCellResize: true,
					dataItemColumnValueExtractor: function (entry, column) {
						if (!entry) {
							return null;
						}
						if (column.field instanceof Object) {
							return column.field.value(entry);
						}
						return null;
					},
					getItemMetadata: function (row) {
						if (this.getItem(row).compareThis > 1) {
							return {
								'cssClasses': 'row-class'
							};
						}
					}
				};

				// Create Grid
				grid = new Slick.Grid("#grid", [], columns, options);

				// Enable Row Selection
				grid.setSelectionModel(new Slick.RowSelectionModel({ selectActiveRow: true }));

				// Enable Checkbox Selector
				grid.registerPlugin(checkboxSelector);

				// Enable Tooltips
				grid.registerPlugin(new Slick.AutoTooltips({ enableForHeaderCells: true }));

				// Handle person field tooltips
				grid.onMouseEnter.subscribe(handlePersonFieldMouseEnter)

				// Enable Auto Column Size
				grid.registerPlugin(new Slick.AutoColumnSize(500));

				grid.onContextMenu.subscribe(function (e, args) {
					e.preventDefault();

					var selectedRows = grid.getSelectedRows();
					var rightClickedCell = grid.getCellFromEvent(e);
					var activeRow = grid.getActiveCell() ? grid.getActiveCell().row : undefined;
					var shouldCloseDetailsPane = activeRow != rightClickedCell.row;

					// If the user clicks on a row that isn't in the set of checked entries, select the one that was clicked instead
					if (!selectedRows.includes(rightClickedCell.row) || selectedRows.length <= 1) {
						selectedRows = [rightClickedCell.row];
						grid.setSelectedRows([selectedRows])
					}

					controller.openActionsMenu(shouldCloseDetailsPane, e.clientX, e.clientY);
				});

				// Notify the controller when the set of selected entries changes
				grid.onSelectedRowsChanged.subscribe(function (e, args) {
					var currentRow = getCurrentEntryPosition();
					var activeRow = grid.getActiveCell() ? grid.getActiveCell().row : undefined;
					if (activeRow != undefined && activeRow != currentRow) {
						var entryKey = entrySet.entryKeyAt(activeRow);
						entryKey.Read = readStates[entryKey.EntryId];
						controller.viewEntry(entryKey);
						Cognito.Forms.gridController.viewEntry(entryKey);
					}
					else
						updateSelectedEntries(
							grid.getSelectedRows().map(function (row) { return entrySet.entryKeyAt(row); }),
							grid.getActiveCell() ? entrySet.entryKeyAt(grid.getActiveCell().row) : null);
				});

				// Notify the controller when sort changes occur
				grid.onSort.subscribe(function (e, args) {
					controller.changeSort(args.sortCols.map(function (c) { return new Cognito.Forms.EntryViewSort({ FieldId: c.sortCol.id, Ascending: c.sortAsc }); }));
				});

				// Update sort indicators to reflect the sorting specified for the current view
				updateSortIndicators(currentView.get_SortBy());

				// Update the view columns to reflect changes made to the grid
				var onColumnsChanged = function onColumnsChanged(e, args) {
					controller.changeColumns(grid.getColumns().slice(2).map(function (c) { return new Cognito.Forms.EntryViewColumn({ FieldId: c.id, Width: c.width }); }));
				}
				grid.onColumnsReordered.subscribe(onColumnsChanged);
				grid.onColumnsResized.subscribe(onColumnsChanged);

				if (!Cognito.config.flags.AppNav) {
					// Refresh the grid once a minute to reflect changes if the org is on a paid plan and we are not unit testing
					Cognito.Forms.gridController.startRefreshInterval();
				}
			}

			Cognito.Forms.grid = grid;
		}

		// Get Grid Columns
		function getGridColumns(viewColumns) {

			var gridColumns = [];

			// Propogate the column widths for the selected view columns to fields shown in the grid
			var fieldInfos = Cognito.Forms.model.fieldInfos;
			var fields = [];
			for (var c = 0; c < viewColumns.length; c++) {
				for (var f = 0; f < fieldInfos.length; f++) {
					if (fieldInfos[f].Id == viewColumns[c].get_FieldId()) {
						fields.push(fieldInfos[f]);
						fields[fields.length - 1].Width = viewColumns[c].get_Width();
					}
				}
			}

			// Add columns for each field in the view
			fields.forEach(function (f) {
				// Field Format
				var cssClass = "";
				var fieldType = f.FieldType;
				var fieldSubType = f.FieldSubType;
				var format = f.property ? f.property.format : null;
				var formatter;
				var defaultSortAsc = true;
				var isPersonField = false;

				if (Cognito.config.flags.PersonFields) {
					var mappings = Cognito.config.personFields[f.Id];
					isPersonField = !!mappings;
				}

				if (f.Id === 'Entry.Status')
					cssClass = f.Width < 50 ? "c-status-cell is-compact" : "c-status-cell";

				// Yes/No
				if (fieldType == "YesNo" || fieldSubType == "YesNo") {
					formatter = function (row, cell, value) { return value ? "&#xf00c;" : ""; };
					cssClass = "c-checkbox";
					defaultSortAsc = false;
				}

				// Email
				else if (fieldType == "Email") {
					formatter = function (row, cell, value) { return value ? "<a href='mailto:" + htmlEscape(value) + "'>" + value + "</a>" : ""; };
					cssClass = "c-link";
				}

				// Website
				else if (fieldType == "Website") {
					formatter = function (row, cell, value) { return value ? "<a href='" + htmlEscape(value) + "' target='_blank' rel='noopener noreferrer'>" + value + "</a>" : ""; };
					cssClass = "c-link";
				}

				// Percentage
				else if (fieldSubType == "Percent") {
					formatter = function (row, cell, value) {
						var a = Math.max(Math.min(1 - value * 2, 1), 0);
						var b = (0.5 - Math.min(Math.abs(value - 0.5), 0.5)) * 2;
						var c = Math.max(Math.min(value * 2 - 1, 1), 0);
						var r = Math.round(a * 216 + b * 204 + c * 174);
						var g = Math.round(a * 84 + b * 204 + c * 209);
						var b = Math.round(a * 39 + b * 204 + c * 54);
						return format.convert(value) + "<div style='background-color: rgb(" + r + "," + g + "," + b + "); width: calc(" + (Math.max(Math.min(value, 1), 0) * 100) + "% + 4px);'></div>";
					};
					cssClass = "c-percentage";
				}

				// Number
				else if (fieldType == "Number" || fieldType == "Currency" || fieldSubType == "Currency" || fieldSubType == "Decimal") {
					formatter = function (row, cell, value) { return format.convert(value); };
					cssClass = "c-number";
				}

				// File
				else if (fieldType == "File") {
					formatter = function (row, cell, value) {
						var thumbnails = "";
						if (value) {
							for (var f = 0; f < value.length; f++) {
								var file = value[f];
								thumbnails += "<img src='" + Cognito.getThumbnailUrl(file.Id, file.Name) + "' title='" + htmlEscape(file.Name) + "'  />";
							}
						}
						return thumbnails;
					};
					cssClass = "c-file";
					defaultSortAsc = false;
				}

				// Signature
				else if (fieldType == "Signature") {
					formatter = function (row, cell, value) {
						var imgUrl = "";
						var imgIsOffloaded = false;
						if (value && value.PngFile && value.PngFile.Size > 0) {
							imgUrl = Cognito.getThumbnailUrl(value.PngFile.Id, value.PngFile.Name);
							imgIsOffloaded = true;
						}
						else if (value && value.Png)
							imgUrl = value.Png;
						return imgUrl ? "<img src='" + imgUrl + "' " + (imgIsOffloaded ? "onerror='Cognito.Forms.gridController.reportSignatureLoadError(this.src);' " : "") + "/>" : "";
					};
					cssClass = "c-signature";
					defaultSortAsc = false;
				}

				// Password
				else if (fieldSubType == "Password") {
					formatter = function (row, cell, value) { return value ? Array(value.length + 1).join("*") : ""; };
					cssClass = "c-password";
					defaultSortAsc = false;
				}

				// Order.OrderSummary
				else if (f.Id === "Order.OrderSummary") {
					formatter = function (row, cell, value) {
						if (value) {
							var parts = value.split(' ');
							return "<span>" + parts[0] + "</span>&nbsp;<span>" + parts[1] + "</span>";
						}

						return "";
					};
					cssClass = "c-ordersummary";
				}

				// If the field is a person field, render avatars, else render as a normal lookup
				else if (isPersonField && format) {
					cssClass = "c-person";

					var mappings = Cognito.config.personFields[f.Id];

					if (fieldSubType == "Checkboxes") {
						// Will display an avatar for each respective person
						formatter = function (row, cell, value) {
							if (!(value instanceof Array))
								return "";

							if (value.length === 0)
								return;

							var avatarAndNameElements = [];

							for (var i = 0; i < value.length; i++) {
								var name = htmlEscape(format.convert(value[i]));
								var avatarElement = buildAvatarElement(value[i], name, mappings)
								var isEmptyElement = !avatarElement.trim();
								if (isEmptyElement)
									continue;

								avatarAndNameElements.push(avatarElement);
							}

							// Wrap entire cell in a <div>, and wrap each avatar-name pair in its own <div> to aid styling
							var prefix = "<div class=\"cog-person-field-cell\"><div class=\"cog-person-field-cell__checkbox-selection\">";

							// Close the last checkbox-selection <div> and the person-field-cell <div>
							var suffix = "</div></div>"

							// Close the previous pair's checkbox-selection <div> and open a new one
							var avatarLabelPairs = avatarAndNameElements.join("</div><div class=\"cog-person-field-cell__checkbox-selection\">");

							return prefix + avatarLabelPairs + suffix;
						};
					} else {
						formatter = function (row, cell, value, m) {
							if (!value)
								return;

							// This is the value of the name field
							var name = htmlEscape(format.convert(value));
							var avatarElement = buildAvatarElement(value, name, mappings);

							return "<div class=\"cog-person-field-cell\">" + avatarElement + "</div>";
						};
					}
				}

				// Lookup List
				else if (fieldType == "Lookup" && fieldSubType == "Checkboxes" && format) {
					formatter = function (row, cell, value) {
						if (value instanceof Array) {
							var result = "";
							for (var i = 0; i < value.length; i++)
								result += ", " + htmlEscape(format.convert(value[i]));
							return result.substring(2);
						}
						return "";
					};
				}

				else if (format)
					formatter = function (row, cell, value) {
						return htmlEscape(format.convert(value));
					};

				// Add Column
				gridColumns.push({
					id: f.Id, name: f.Name, toolTip: f.Scope ? f.Scope + " " + f.Name : f.Name, field: f.property, depth: f.depth, formatter: formatter, headerCssClass: cssClass + " c-view-column", cssClass: cssClass, width: f.Width, sortable: true, defaultSortAsc: defaultSortAsc,
					autoSizePadding: f.Id === 'Entry.Status' && Cognito.Forms.model.statusMap ? 20 : 0
				});
			});
			return gridColumns;
		}

		var entryIds = [];
		var loaded = {};
		var loadingEntryStates = false;

		function buildAvatarElement(value, label, mappings) {
			var mappedImageFieldPath = mappings.MappedImageFieldPath;
			var avatarFileId = null;
			var avatar;
			var className;

			// Try to get the uploaded image if there's a mapped file upload field
			if (mappedImageFieldPath) {
				var uploadedFiles = getEntryFieldValue(mappedImageFieldPath, value);
				avatarFileId = getFirstValidAvatarFile(uploadedFiles)
			}

			var hasUploadedAvatar = !!avatarFileId;
			var nameFieldPath = mappings.MappedNameFieldPath;
			var nameField = getEntryFieldValue(nameFieldPath, value);
			var firstName = nameField.First;
			var lastName = nameField.Last;
			var fullName = (firstName || "") + " " + (lastName || "");
			var hasName = !!fullName.trim();

			if (hasUploadedAvatar) {
				className = "cog-lookup-image__entries cog-avatar";
				avatar = avatarFileId;
			} else {
				className = "cog-generated-avatar";
				avatar = hasName ? AdminForm.getAvatarSVG(label, firstName, lastName) : "";
			}

			// Build out either a <div> element if using a generated avatar, or an <img> element if using an uploaded avatar
			var avatarHtml = buildAvatarHtml(avatar, avatarFileId, className, fullName);
			var nameHtml = hasName ? "<span class=\"c-person-name\">" + fullName + "</span>" : "";
			return avatarHtml + nameHtml;
		}

		function buildAvatarHtml(avatar, avatarFileId, className, fullName) {
			if (!avatar && !avatarFileId)
				return "";

			if (avatarFileId)
				return "<img class=\"" + className + "\" src=\"" + avatar + "\" title=\"" + fullName + "\"" + " height=\"50\" width=\"50\">";
			else
				return "<div class=\"" + className + "\" title=\"" + fullName + "\">" + avatar + "</div>";
		}

		function getFirstValidAvatarFile(uploadedFiles) {
			if (!uploadedFiles || uploadedFiles.length === 0)
				return null;

			var validTypes = ["image/png", "image/jpg", "image/jpeg", "image/bmp", "image/svg+xml"]

			// Users can upload non-image files to the mapped image field, so grab the first
			// valid image uploaded to the field
			var firstValidFileId = null;
			for (var i = 0; i < uploadedFiles.length; i++) {
				var currentFile = uploadedFiles[i];
				if (!validTypes.includes(currentFile.ContentType))
					continue;
				firstValidFileId = currentFile.Id;
				break;
			}

			if (firstValidFileId) {
				return CognitoConfiguration.SiteUrl + "forms/public/thumbnail?id=" + firstValidFileId;
			}

			return null;
		}

		function createPersonCheckboxTooltip(tooltipNames) {
			// Display first ten names, then append string denoting remaining amount to avoid tooltip getting too long
			var firstTenNames = tooltipNames.slice(0, 10);
			var remainingNames = tooltipNames.length - 10;
			var remainingNamesMessage = remainingNames > 0 ? "\n\n...and " + remainingNames + " more " + (remainingNames === 1 ? "person" : "people") : "";
			var tooltip = firstTenNames.join("\n") + remainingNamesMessage;

			return tooltip;
		}

		function getEntryFieldValue(fieldPath, entryValue) {
			// We are at the end of the path, so we can index entryValue directly without continuing to recurse
			if (!fieldPath.includes('.'))
				return entryValue[fieldPath];

			var firstPeriodIndex = fieldPath.indexOf('.');
			var nextField = fieldPath.substring(0, firstPeriodIndex);
			var remainingPath = fieldPath.substring(firstPeriodIndex + 1);

			return getEntryFieldValue(remainingPath, entryValue[nextField]);
		}

		// Dynamically generate tooltips for person field cells when they are hovered
		function handlePersonFieldMouseEnter(event) {
			var cell = grid.getCellFromEvent(event);
			var node = grid.getCellNode(cell.row, cell.cell);

			var isPersonFieldCell = node.classList.contains('c-person');

			if (!isPersonFieldCell)
				return;

			var checkboxNameNodes = node.querySelectorAll('.c-person-name');

			// Add tooltip to all truncated name spans for all person field cells
			checkboxNameNodes.forEach(function (span) {
				if (span.scrollWidth > span.clientWidth)
					span.title = span.innerText
				else
					span.title = "";
			});

			// Add tooltip to entire checkbox cell if it has truncated children
			var isCheckboxCell = !!node.querySelector('.cog-person-field-cell__checkbox-selection');
			if (isCheckboxCell) {
				var checkboxNameNodes = node.querySelectorAll('.c-person-name');
				var checkboxNames = Array.prototype.slice.call(checkboxNameNodes);
				var names = checkboxNames.map(function (nameNode) {
					return nameNode.innerText;
				});

				var tooltip = createPersonCheckboxTooltip(names);

				var hasOverflowingChild = checkboxNames.some(function (child) {
					return child.scrollWidth > child.clientWidth;
				});

				if (hasOverflowingChild)
					node.title = tooltip;
				else node.title = "";
			}
		}

		Cognito.Messaging.addHandler("readStateUpdated", function (checkEntryIds) {
			var entriesInView = Cognito.Forms.model.entries.indexList.map(x => x.EntityId);
			entryIds.concat(checkEntryIds.filter(id => entriesInView.includes(id)));

			if (!loadingEntryStates) {
				loadingEntryStates = true;
				setTimeout(getEntryReadStates)
			}
		});

		function addEntryToBatch(entryId) {
			if (loaded[entryId])
				return;

			loaded[entryId] = true;
			if (!loadingEntryStates) {
				loadingEntryStates = true;
				setTimeout(getEntryReadStates);
			}

			entryIds.push(entryId);
		}

		function getEntryReadStates() {
			if (!canManageEntries.value)
				entryIds.forEach(function (e) { return readStates[e] = true });
			else if (!Cognito.config.disableUnreadEntryTracking) {
				while (entryIds.length > 0) {
					var thisBatch = entryIds.splice(0, 100);
					Cognito.Forms.serviceRequest({
						endpoint: "UnreadEntries",
						method: "POST",
						data: { Entries: thisBatch },
						success: checkGrid(function (data) {
							var activeRow = grid.getActiveCell() ? grid.getActiveCell().row : undefined;
							for (var i = 0; i < thisBatch.length; i++) {
								var entryId = thisBatch[i];

								readStates[entryId] = !data.includes(entryId);

								// If the entry is currently on the grid, invalidate the row
								var index = entrySet.indexOfEntryId(entryId);
								if (index !== undefined)
									grid.invalidateRow(index);

								if (activeRow && index == activeRow) {
									var entryKey = entrySet.entryKeyAt(activeRow);
									entryKey.Read = readStates[entryId];
									controller.viewEntry(entryKey);
								}
							}
							grid.render();
						}),
						error: function () { }
					});
				}
			}
			else {
				grid.render();
			}

			loadingEntryStates = false;
		}

		var recordPageReady = true;
		var isFirstRender = true;
		// Binds the grid to the specified set of entries
		function bindGrid(newEntrySet) {
			Cognito.Forms.model.entries = entrySet = newEntrySet;

			entrySet.getLength = function getLength() { return entrySet.size(); };
			entrySet.getItem = function getItem(index) {
				addEntryToBatch(entrySet.entryKeyAt(index).EntryId)
				const entry = entrySet.entryAt(index, checkGrid(function (entry) {
					grid.invalidateRow(index);
					if (!loading) {
						loading = true;
						requestAnimationFrame(checkGrid(function () {
							loading = false;
							grid.render();
						}), 0);
					}
				}));

				// Don't allow the grid to bind to an entry that is still initializing
				if (entry && entrySet.isEntryInitialized(entry))
					return entry;
				else
					return undefined;
			};
			entrySet.getItemMetadata = function getItemMetadata(index) {
				var entry = entrySet.entryAt(index);
				if (entry) {
					var state = readStates[entry.Id] === false ? 'c-state-unread' : 'c-state-read';
					var statusName = entry.Entry.Status;
					var statusColorClass = Cognito.Forms.model.statusMap ? ' c-status-id--' + Cognito.Forms.model.statusMap[statusName] : '';
					statusName = htmlEscape(statusName);
					var statusClass = statusName.toLowerCase() === 'incomplete' ? ' c-status-incomplete' : '';
					return { cssClasses: state + statusClass + statusColorClass };
				}
				else
					return { cssClasses: "c-loading" };
			};

			// Bind the grid
			grid.setData(entrySet);
			Cognito.ready('init-grid');

			// Refresh the grid
			refreshGrid();

			// Render the grid
			grid.render();

			document.getElementById('grid').classList.remove('c-hide-entries-grid');

			if (recordPageReady) {
				performance.mark('cog-page-ready', { detail: { gridVersion: 2, isFirstRender } });
				isFirstRender = false;
				recordPageReady = false;
			}
		}

		function refreshGrid(pollingRefresh = false, backgroundRefresh = false) {
			// refresh the current key to ensure it has the latest etag
			currentEntryKey = getCurrentEntryKey();

			// Update the entry count
			controller.updateEntryCount(entrySet.size());

			if (currentFilterInvalid) {
				// Display Invalid Filter Message
				updateProgressMessage("Invalid Filter");
			} else {
				// Hide Progress Messages
				updateProgressMessage();
			}
			// Update selected entries and the current entry
			updateSelectedEntries(selectedEntries, currentEntryKey);

			// Update the grid
			grid.invalidate();
			grid.render();

			document.querySelector('.c-entries-grid').setAttribute('data-test-refreshed', Date.now().toString());

			if (!pollingRefresh && !backgroundRefresh) {
				var numberOfViewColumns = grid.getColumns().length;
				var entryViewId = currentView.get_Id();
				var numberOfViewEntries = entrySet.size();
				var numberOfFormFields = Cognito.Forms.model.currentForm.get_Fields().length;
				var appNav = Cognito.config.flags.AppNav ? true : false;
				var hasLookups = Cognito.Forms.model.currentForm.get_HasLookups();
				performance.mark('cog-grid-ready', { detail: { numberOfViewColumns, entryViewId, numberOfViewEntries, numberOfFormFields, indexesBuilt, appNav, hasLookups, origin } });
				indexesBuilt = false;
			}

			// Track the completion of the refresh request
			refreshing = false;

			// if entry details page is open, attempt to refresh the entry details page as well
			if (currentEntryKey)
				controller.updateEntryDetails(currentEntryKey);

		}

		function getCurrentEntryPosition() {
			return currentEntryKey ? entrySet.indexOfEntryId(currentEntryKey.EntryId) : -1;
		}

		function getCurrentEntryKey() {
			var position = getCurrentEntryPosition();
			return position >= 0 ? entrySet.entryKeyAt(position) : null;
		}

		// Update the set of entries that are selected in the grid
		function updateSelectedEntries(selected, current) {
			Cognito.ready(null, ['init-grid'], checkGrid(function () {
				// "Queue" another update to ensure the entry is selected when its loaded and exit immediately if the selection is already being updated
				if (selectedEntries.updating) {
					setTimeout(() =>
						updateSelectedEntries(
							grid.getSelectedRows().map((row) => entrySet.entryKeyAt(row)),
							grid.getActiveCell() ? entrySet.entryKeyAt(grid.getActiveCell().row) : null
						)
					);
					return;
				}

				var rowKeyPairs = [];
				// Determine the current, active and new row numbers
				var currentRow = currentEntryKey ? getCurrentEntryPosition() : undefined;
				var activeRow = grid.getActiveCell() ? grid.getActiveCell().row : undefined;
				var newRow = current ? entrySet.indexOfEntryId(current.EntryId) : undefined;

				// Update the set of selected entries in the grid
				var currentRows = grid.getSelectedRows();
				var newRows = [];
				var initialCount = selected.length;
				for (var i = selected.length - 1; i >= 0; i--) {
					var key = selected[i];
					var row = entrySet.indexOfEntryId(key.EntryId);
					if (row != undefined) {
						newRows.splice(0, 0, row);
						rowKeyPairs.push([row, key]);
					}
					else
						selected.splice(i, 1);
				}

				// After getting currentRows from slickgrid and building out newRows
				// We need to ensure currentRows doesn't have the last index selected as
				// the lowest index (used for shift+clicking more entries) before we compare
				if (currentRows.length > 1 && currentRows.at(-1) < currentRows.at(-2))
					currentRows.unshift(currentRows.pop());

				// Determine if any selection changes have been made
				var selectionChanged = newRows.length != currentRows.length || selected.length != selectedEntries.length || selected.length != initialCount;
				if (!selectionChanged) {
					for (var i = newRows.length - 1; i >= 0; i--) {
						if (newRows[i] != currentRows[i]) {
							selectionChanged = true;
							break;
						}
					}
				}
				if (!selectionChanged) {
					for (var i = selected.length - 1; i >= 0; i--) {
						if (selected[i].EntryId != selectedEntries[i].EntryId || selected[i].Scope != selectedEntries[i].Scope) {
							selectionChanged = true;
							break;
						}
					}
				}

				// Determine if the current row has changed
				var rowChanged = currentRow != newRow || activeRow != newRow;

				// Exit immediately if no changes occurred
				if (!selectionChanged && !rowChanged)
					return;

				// keep selected entries list ordered by their grid position
				selectedEntries = rowKeyPairs.slice()
					.sort(function (a, b) { return a[0] - b[0]; })
					.map(function (pair) { return pair[1]; });
				selectedEntries.updating = true;

				// Update the grid unless grid updates are suppressed
				currentEntryKey = current;
				if (newRow !== undefined) {
					if (rowChanged) {
						grid.scrollRowIntoView(newRow);
						grid.setActiveRow(newRow);
						if (!newRows.length)
							newRows.push(newRow);
					}

					grid.setSelectedRows(newRows);
				}
				else {
					grid.resetActiveCell();
					grid.setSelectedRows(newRows);
				}

				// Notify the controller which entries are selected
				if (selectionChanged)
					controller.selectEntries(selectedEntries);

				// Mark the update as complete
				selectedEntries.updating = false;
			}));
		}

		// Update the grid sort indicators
		function updateSortIndicators(columns) {
			// Sort by entry number descending if no sort is specified
			if (columns.length == 0)
				columns = [new Cognito.Forms.EntryViewSort({ FieldId: "Entry.Number", Ascending: false })];

			var gridCols = grid.getColumns();
			var sortCols = columns
				.filter(function (c) { return !!gridCols[grid.getColumnIndex(c.get_FieldId())]; })
				.map(function (c) { return { columnId: c.get_FieldId(), sortCol: gridCols[grid.getColumnIndex(c.get_FieldId())], sortAsc: c.get_Ascending() }; });
			grid.setSortColumns(sortCols);
		}

		// Creates a sort function based on
		function getSortCriteria(columns) {
			// Lookup fields for each column
			var sortByEntryNumber;
			var fieldInfos = Cognito.Forms.model.fieldInfos;
			for (var c = 0; c < columns.length; c++) {
				var column = columns[c];
				sortByEntryNumber = sortByEntryNumber || (column.get_FieldId() == "Entry.Number");
				for (var f = 0; f < fieldInfos.length; f++) {
					var fieldInfo = fieldInfos[f];
					if (fieldInfo.Id == column.get_FieldId()) {
						column.field = fieldInfo;
						break;
					}
				}
			}

			// Ensure entries are always sorted by entry number in some way
			if (!sortByEntryNumber) {
				var entryNumberColumn = new Cognito.Forms.EntryViewSort({ FieldId: "Entry.Number", Ascending: false });
				entryNumberColumn.field = Cognito.Forms.model.fieldInfos.filter(function (f) { return f.Id == "Entry.Number"; })[0];
				columns.push(entryNumberColumn);
			}

			// Define sort key functions
			var culture = Sys.CultureInfo.CurrentCulture.name;
			for (let i = 0, l = columns.length; i < l; i++) {
				var property = columns[i].field.property;
				if (property.isList) {
					if (property.propertyType.name === 'FileDataRef')
						columns[i].sortCompare = function (field, value1, value2) {
							return value1.length === value2.length ? 0 : value1.length > value2.length ? 1 : -1;
						};
					else
						columns[i].sortCompare = function (field, value1, value2) {
							return value1.toString().localeCompare(value2.toString(), culture, { sensitivity: 'base' });
						};
				}
				else if (entrySet.isEntityType(property.propertyType))
					columns[i].sortCompare = function (field, value1, value2) {
						return field.property.format.convert(value1).localeCompare(field.property.format.convert(value2), culture, { sensitivity: 'base' });
					};
				else if (property.propertyType === String)
					columns[i].sortCompare = function (field, value1, value2) {
						return (value1 || '').localeCompare(value2 || '', culture, { sensitivity: 'base' });
					};
				else if (property.propertyType === Number)
					columns[i].sortCompare = function (field, value1, value2) {
						if (value1 == null)
							value1 = -Number.MAX_VALUE;
						if (value2 == null)
							value2 = -Number.MAX_VALUE;
						return value1 === value2 ? 0 : value1 > value2 ? 1 : -1;
					};
				else if (property.propertyType === Date)
					columns[i].sortCompare = function (field, value1, value2) {
						value1 = value1 == null ? -Number.MAX_VALUE : value1.getTime();
						value2 = value2 == null ? -Number.MAX_VALUE : value2.getTime();
						return value1 === value2 ? 0 : value1 > value2 ? 1 : -1;
					};
				else
					columns[i].sortCompare = function (field, value1, value2) {
						return value1 === value2 ? 0 : value1 > value2 ? 1 : -1;
					};
			}

			// Sort Criteria
			return function (entry1, entry2) {
				for (var i = 0, l = columns.length; i < l; i++) {
					var column = columns[i];
					var sign = column.get_Ascending() ? 1 : -1;
					var field = column.field;
					var result = column.sortCompare(field, field.property.value(entry1), field.property.value(entry2)) * sign;
					if (result != 0) {
						return result;
					}
				}
				return 0;
			}
		}

		// Shows/hides/updates wait progress messages for long-running grid operations
		function updateProgressMessage(message, callback) {
			const isEmpty = entrySet ? entrySet.size() === 0 : true;
			const isTaskView = entrySet
				? Cognito.Forms.model.views.some(view => (view.Id === entrySet.view) && view.IsTaskView)
				: false;
			
			const showNoResults = !message && isEmpty;
		
			$("#progress")
				.toggleClass("c-progress-message", !!message)
				.toggleClass("c-progress-no-entries-found", showNoResults)
				.toggleClass("c-progress-no-entries-found--task-view", showNoResults && isTaskView)
				.removeClass("c-entries-loading", !message);
		
			$("#progress span").text(message || "");
			if (message === "Invalid Filter") {
				$("#progress").addClass('filter--invalid');
			} else {
				$("#progress").removeClass('filter--invalid');
			}
			if (callback)
				window.setTimeout(callback);
		}

		// Escape HTML tags to prevent issues when building HTML to display in the grid
		function htmlEscape(str) {
			return String(str)
				.replace(/&/g, '&amp;')
				.replace(/"/g, '&quot;')
				.replace(/'/g, '&#39;')
				.replace(/</g, '&lt;')
				.replace(/>/g, '&gt;');
		}

		shortUserId = Cognito.Forms.model.shortUserId;
		// #endregion

		Cognito.ready("Cognito.Forms.gridController", ["Cognito.Forms.controller"], function () {

			// Define controller variable if needed
			if (!controller)
				controller = Cognito.Forms.controller;

			// Tell the top controller the grid is ready
			controller.initMaster(Cognito.Forms.gridController);
		});
	})
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,