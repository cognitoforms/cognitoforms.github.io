(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["EntriesPage~FormBuilder"],{

/***/ "../../../Cognito.Services/Scripts/component/Cognito-timepicker.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/component/Cognito-timepicker.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Timepicker Component for Twitter Bootstrap
 *
 * Copyright 2013 Joris de Wit
 *
 * Contributors https://github.com/jdewit/bootstrap-timepicker/graphs/contributors
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
(function ($, window, document, undefined) {
	'use strict';

	// TIMEPICKER PUBLIC CLASS DEFINITION
	var Timepicker = function (element, options) {
		this.widget = '';
		this.$element = $(element);
		this.defaultTime = options.defaultTime;
		this.disableFocus = options.disableFocus;
		this.isOpen = options.isOpen;
		this.minuteStep = options.minuteStep;
		this.modalBackdrop = options.modalBackdrop;
		this.secondStep = options.secondStep;
		this.showInputs = options.showInputs;
		this.showMeridian = options.showMeridian;
		this.timeSeparator = options.timeSeparator;
		if (this.showMeridian)
		{
			this.AMDesignator = options.AMDesignator;
			this.PMDesignator = options.PMDesignator;
		}
		this.showSeconds = options.showSeconds;
		this.template = options.template;
		this.appendWidgetTo = options.appendWidgetTo;
		this.twoDigitHourFormat = options.twoDigitHourFormat;

		this._init();
	};

	Timepicker.prototype = {

		constructor: Timepicker,

		_init: function () {
			var self = this;

			if (this.$element.parent().hasClass('c-editor-time')) {
				this.$element.parent('.c-editor-time').parent().find('.c-editor-time-icon').on({
					'click.timepicker': $.proxy(this.toggleWidget, this)
				});
				this.$element.on({
					'focus.timepicker': $.proxy(function (e) {
						if (!this.$element.is(".icon-picker-only, .suppress-picker"))
							this.showOrHighlight(e);
					}, this),
					'click.timepicker': $.proxy(function (e) {
						if (!this.$element.is(".icon-picker-only"))
							this.showOrHighlight(e);
					}, this),
					'keydown.timepicker': $.proxy(this.elementKeydown, this),
					'blur.timepicker': $.proxy(this.blurElement, this)
				});
			} else {
				if (this.template) {
					this.$element.on({
						'focus.timepicker': $.proxy(this.toggleWidget, this),
						'click.timepicker': $.proxy(this.toggleWidget, this),
						'blur.timepicker': $.proxy(this.blurElement, this)
					});
				} else {
					this.$element.on({
						'focus.timepicker': $.proxy(this.showOrHighlight, this),
						'click.timepicker': $.proxy(this.showOrHighlight, this),
						'keydown.timepicker': $.proxy(this.elementKeydown, this),
						'blur.timepicker': $.proxy(this.blurElement, this)
					});
				}
			}

			if (this.template !== false) {
				//this.$widget = $(this.getTemplate()).prependTo(this.$element.parents(this.appendWidgetTo)).on('click', $.proxy(this.widgetClick, this));
				this.$widget = $(this.getTemplate()).appendTo('body').on('click', $.proxy(this.widgetClick, this));
			} else {
				this.$widget = false;
			}

			if (this.showInputs && this.$widget !== false) {
				this.$widget.find('input').each(function () {
					$(this).on({
						'click.timepicker': function () { $(this).select(); },
						'keydown.timepicker': $.proxy(self.widgetKeydown, self)
					});
				});
			}

			this.setDefaultTime(this.defaultTime);
		},

		blurElement: function () {
			this.highlightedUnit = undefined;
			this.updateFromElementVal();
		},

		decrementHour: function () {
			if (this.showMeridian) {
				if (this.hour === 1) {
					this.hour = 12;
				} else if (this.hour === 12) {
					this.hour--;

					return this.toggleMeridian();
				} else if (this.hour === 0) {
					this.hour = 11;

					return this.toggleMeridian();
				} else {
					this.hour--;
				}
			} else {
				if (this.hour === 0) {
					this.hour = 23;
				} else {
					this.hour--;
				}
			}
			this.update();
		},

		decrementMinute: function (step) {
			var newVal;

			if (step) {
				newVal = this.minute - step;
			} else {
				newVal = this.minute - this.minuteStep;
			}

			if (newVal < 0) {
				this.decrementHour();
				this.minute = newVal + 60;
			} else {
				this.minute = newVal;
			}
			this.update();
		},

		decrementSecond: function () {
			var newVal = this.second - this.secondStep;

			if (newVal < 0) {
				this.decrementMinute(true);
				this.second = newVal + 60;
			} else {
				this.second = newVal;
			}
			this.update();
		},

		elementKeydown: function (e) {
			switch (e.keyCode) {
				case 9: //tab
					this.updateFromElementVal();

					if (!this.$element.val()) {
						this.hideWidget();
					}
					else if (e.shiftKey) {
						if (this.highlightedUnit === "hour")
							this.hideWidget();
						else {
							e.preventDefault();
							this.highlightPrevUnit();
						}
					}
					else {
						switch (this.highlightedUnit) {
							case 'hour':
								e.preventDefault();
								this.highlightNextUnit();
								break;
							case 'minute':
								if (this.showMeridian || this.showSeconds) {
									e.preventDefault();
									this.highlightNextUnit();
								}
								else
									this.hideWidget();
								break;
							case 'second':
								if (this.showMeridian) {
									e.preventDefault();
									this.highlightNextUnit();
								}
								else
									this.hideWidget();
								break;
							default:
								//By default, hide the widget if it is tabbed out of
								this.hideWidget();
						}
					}
					break;
				case 13: // enter key
					e.preventDefault();
					this.updateFromElementVal();
					if (this.isOpen) {
						e.stopPropagation();
						this.hideWidget();
					}
					break;
				case 27: // escape
					this.updateFromElementVal();
					this.hideWidget();
					break;
				case 37: // left arrow
					e.preventDefault();
					if (this.isOpen)
						e.stopPropagation();
					if (!this.$element.val())
						break;
					if (this.highlightedUnit) {
						this.highlightPrevUnit();
						this.updateFromElementVal();
					} else {
						// highlight the unit so the parts can be modified
						this.highlightUnit();
					}
					break;
				case 38: // up arrow
					e.preventDefault();
					if (this.isOpen) {
						e.stopPropagation();
						if (e.altKey)
							return this.hideWidget();
					}
					else
						break;
					switch (this.highlightedUnit) {
						case 'hour':
							this.incrementHour();
							this.highlightHour();
							break;
						case 'minute':
							this.incrementMinute();
							this.highlightMinute();
							break;
						case 'second':
							this.incrementSecond();
							this.highlightSecond();
							break;
						case 'meridian':
							this.toggleMeridian();
							this.highlightMeridian();
							break;
					}
					break;
				case 39: // right arrow
					e.preventDefault();
					if (this.isOpen)
						e.stopPropagation();
					if (!this.$element.val())
						break;
					if (this.highlightedUnit) {
						this.updateFromElementVal();
						this.highlightNextUnit();
					} else {
						// highlight the unit so the parts can be modified
						this.highlightUnit();
					}
					break;
				case 40: // down arrow
					e.preventDefault();
					if (!this.isOpen && e.altKey) {
						this.showWidget();
						e.stopPropagation();
						break;
					}
					if (this.isOpen)
						e.stopPropagation();
					else
						break;
					switch (this.highlightedUnit) {
						case 'hour':
							this.decrementHour();
							this.highlightHour();
							break;
						case 'minute':
							this.decrementMinute();
							this.highlightMinute();
							break;
						case 'second':
							this.decrementSecond();
							this.highlightSecond();
							break;
						case 'meridian':
							this.toggleMeridian();
							this.highlightMeridian();
							break;
					}
					break;
			}
		},

		formatTime: function (hour, minute, second, meridian) {
			hour = this.twoDigitHourFormat & hour < 10 ? '0' + hour: hour;
			minute = minute < 10 ? '0' + minute : minute;
			second = second < 10 ? '0' + second : second;

			return hour + this.timeSeparator + minute + (this.showSeconds ? this.timeSeparator + second : '') + (this.showMeridian ? ' ' + meridian : '');
		},

		getCursorPosition: function () {
			var input = this.$element.get(0);

			if ('selectionStart' in input) {// Standard-compliant browsers

				return input.selectionStart;
			} else if (document.selection) {// IE fix
				input.focus();
				var sel = document.selection.createRange(),
				selLen = document.selection.createRange().text.length;

				sel.moveStart('character', -input.value.length);

				return sel.text.length - selLen;
			}
		},

		getTemplate: function () {
			var template,
				hourTemplate,
				minuteTemplate,
				secondTemplate,
				meridianTemplate,
				templateContent;

			if (this.showInputs) {
				hourTemplate = '<input type="text" name="hour" class="cognito-timepicker-hour" maxlength="2"/>';
				minuteTemplate = '<input type="text" name="minute" class="cognito-timepicker-minute" maxlength="2"/>';
				secondTemplate = '<input type="text" name="second" class="cognito-timepicker-second" maxlength="2"/>';
				meridianTemplate = '<input type="text" name="meridian" class="cognito-timepicker-meridian" maxlength="2"/>';
			} else {
				hourTemplate = '<span class="cognito-timepicker-hour"></span>';
				minuteTemplate = '<span class="cognito-timepicker-minute"></span>';
				secondTemplate = '<span class="cognito-timepicker-second"></span>';
				meridianTemplate = '<span class="cognito-timepicker-meridian"></span>';
			}

			templateContent = '<table>' +
				'<tr>' +
				'<td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td>' +
				'<td class="separator">&nbsp;</td>' +
				'<td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' +
				(this.showSeconds ?
					'<td class="separator">&nbsp;</td>' +
					'<td><a href="#" data-action="incrementSecond"><i class="icon-chevron-up"></i></a></td>'
					: '') +
				(this.showMeridian ?
					'<td class="separator">&nbsp;</td>' +
					'<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>'
					: '') +
				'</tr>' +
				'<tr>' +
				'<td>' + hourTemplate + '</td> ' +
				'<td class="separator">' + this.timeSeparator + '</td>' +
				'<td>' + minuteTemplate + '</td> ' +
				(this.showSeconds ?
					'<td class="separator">' + this.timeSeparator + '</td>' +
					'<td>' + secondTemplate + '</td>'
					: '') +
				(this.showMeridian ?
					'<td class="separator">&nbsp;</td>' +
					'<td>' + meridianTemplate + '</td>'
					: '') +
				'</tr>' +
				'<tr>' +
				'<td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td>' +
				'<td class="separator"></td>' +
				'<td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' +
				(this.showSeconds ?
					'<td class="separator">&nbsp;</td>' +
					'<td><a href="#" data-action="decrementSecond"><i class="icon-chevron-down"></i></a></td>'
					: '') +
				(this.showMeridian ?
					'<td class="separator">&nbsp;</td>' +
					'<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>'
					: '') +
				'</tr>' +
				'</table>';

			switch (this.template) {
				case 'modal':
					template = '<div class="cognito-timepicker-widget modal hide fade in" data-backdrop="' + (this.modalBackdrop ? 'true' : 'false') + '">' +
						'<div class="modal-header">' +
						'<a href="#" class="close" data-dismiss="modal">×</a>' +
						'<h3>Pick a Time</h3>' +
						'</div>' +
						'<div class="modal-content">' +
						templateContent +
						'</div>' +
						'<div class="modal-footer">' +
						'<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>' +
						'</div>' +
						'</div>';
					break;
				case 'dropdown':
					template = '<div class="cognito-timepicker-widget cognito-dropdown-menu">' + templateContent + '</div>';
					break;
			}

			return template;
		},

		getTime: function () {
			return this.formatTime(this.hour, this.minute, this.second, this.meridian);
		},

		hideWidget: function () {
			if (this.isOpen === false) {
				return;
			}

			if (this.showInputs) {
				this.updateFromElementVal();
			}

			this.$element.trigger({
				'type': 'hide.timepicker',
				'time': {
					'value': this.getTime(),
					'hours': this.hour,
					'minutes': this.minute,
					'seconds': this.second,
					'meridian': this.meridian
				}
			});

			if (this.template === 'modal' && this.$widget.modal) {
				this.$widget.modal('hide');
			} else {
				this.$widget.removeClass('open');
			}

			$(document).off('mousedown.timepicker');
			$(document).off('resize.timepicker');

			this.isOpen = false;
		},

		showOrHighlight: function () {
			if (!this.isOpen) {
				this.showWidget();
			}
			this.highlightUnit();
		},

		highlightUnit: function () {
			this.position = this.getCursorPosition();
			if (this.position >= 0 && this.position <= 2) {
				this.highlightHour();
			} else if (this.position >= 3 && this.position <= 5) {
				this.highlightMinute();
			} else if (this.position >= 6 && this.position <= 8) {
				if (this.showSeconds) {
					this.highlightSecond();
				} else {
					this.highlightMeridian();
				}
			} else if (this.position >= 9 && this.position <= 11) {
				this.highlightMeridian();
			}
		},

		highlightNextUnit: function () {
			switch (this.highlightedUnit) {
				case 'hour':
					this.highlightMinute();
					break;
				case 'minute':
					if (this.showSeconds) {
						this.highlightSecond();
					} else if (this.showMeridian) {
						this.highlightMeridian();
					}
					break;
				case 'second':
					if (this.showMeridian) {
						this.highlightMeridian();
					} 
					break;
				//case 'meridian':
				//	this.highlightHour();
				//	break;
			}
		},

		highlightPrevUnit: function () {
			switch (this.highlightedUnit) {
				//case 'hour':
				//	this.highlightMeridian();
				//	break;
				case 'minute':
					this.highlightHour();
					break;
				case 'second':
					this.highlightMinute();
					break;
				case 'meridian':
					if (this.showSeconds) {
						this.highlightSecond();
					} else {
						this.highlightMinute();
					}
					break;
			}
		},

		//Universal function for executing the highlighting on select units
		highlightElement: function (startIndex, endIndex) {

			var $element = this.$element.get(0);

			var mod = !this.twoDigitHourFormat && this.hour < 10 ? -1 : 0;
			startIndex = startIndex + mod < 0 ? 0 : startIndex + mod;
			endIndex = endIndex + mod > $($element).val().length ? $($element).val().length : endIndex + mod;
			
			if ($element.setSelectionRange) {
				setTimeout(function () {
					$element.setSelectionRange(startIndex, endIndex);
				}, 0);
			}
		},

		highlightHour: function () {
			this.highlightedUnit = "hour";
			this.highlightElement(0, 2);
		},

		highlightMinute: function () {			
			this.highlightedUnit = 'minute';
			this.highlightElement(3, 5);
		},

		highlightSecond: function () {
			this.highlightedUnit = 'second';
			this.highlightElement(6, 8);
		},

		highlightMeridian: function () {
			this.highlightedUnit = 'meridian';

			if (this.showSeconds) {
				this.highlightElement(9, 11);
			} else {
				this.highlightElement(6, 8);
			}
		},

		incrementHour: function () {
			if (this.showMeridian) {
				if (this.hour === 11) {
					this.hour++;
					return this.toggleMeridian();
				} else if (this.hour === 12) {
					this.hour = 0;
				}
			}
			if (this.hour === 23) {
				this.hour = 0;
			} else {
				this.hour++;
			}
			this.update();
		},

		incrementMinute: function (step) {
			var newVal;

			if (step) {
				newVal = this.minute + step;
			} else {
				newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
			}

			if (newVal > 59) {
				this.incrementHour();
				this.minute = newVal - 60;
			} else {
				this.minute = newVal;
			}
			this.update();
		},

		incrementSecond: function () {
			var newVal = this.second + this.secondStep - (this.second % this.secondStep);

			if (newVal > 59) {
				this.incrementMinute(true);
				this.second = newVal - 60;
			} else {
				this.second = newVal;
			}
			this.update();
		},

		remove: function () {
			$('document').off('.timepicker');
			if (this.$widget) {
				this.$widget.remove();
			}
			delete this.$element.data().timepicker;
		},

		setDefaultTime: function (defaultTime) {
			if (!this.$element.val()) {
				if (defaultTime === 'current') {
					var dTime = new Date(),
					hours = dTime.getHours(),
					minutes = Math.floor(dTime.getMinutes() / this.minuteStep) * this.minuteStep,
					seconds = Math.floor(dTime.getSeconds() / this.secondStep) * this.secondStep,
					meridian = this.AMDesignator;

					if (this.showMeridian) {
						if (hours === 0) {
							hours = 12;
						} else if (hours >= 12) {
							if (hours > 12) {
								hours = hours - 12;
							}
							meridian = this.PMDesignator;
						} else {
							meridian = this.AMDesignator;
						}
					}

					this.hour = hours;
					this.minute = minutes;
					this.second = seconds;
					this.meridian = meridian;

				} else if (defaultTime === false) {
					this.hour = 0;
					this.minute = 0;
					this.second = 0;
					this.meridian = this.AMDesignator;
				} else {
					this.setTime(defaultTime);
				}
			} else {
				this.updateFromElementVal();
			}
		},

		setTime: function (time) {
			var arr,
			timeArray;

            if (this.showMeridian) {                
                arr = time.split(' ');                
                timeArray = arr[0].split(this.timeSeparator);
				this.meridian = time.substr(time.indexOf(' ') + 1);
			} else {
				timeArray = time.split(this.timeSeparator);
			}

			this.hour = parseInt(timeArray[0], 10);
			this.minute = parseInt(timeArray[1], 10);
			this.second = parseInt(timeArray[2], 10);

			if (isNaN(this.hour)) {
				this.hour = 0;
			}
			if (isNaN(this.minute)) {
				this.minute = 0;
			}

			if (this.showMeridian) {
				if (this.hour > 12) {
					this.hour = 12;
				} else if (this.hour < 1) {
					this.hour = 12;
				}

				if (this.meridian.toUpperCase() !== this.AMDesignator.toUpperCase() && this.meridian.toUpperCase() !== this.PMDesignator.toUpperCase()) {
					this.meridian = this.AMDesignator;
				}
			} else {
				if (this.hour >= 24) {
					this.hour = 23;
				} else if (this.hour < 0) {
					this.hour = 0;
				}
			}

			if (this.minute < 0) {
				this.minute = 0;
			} else if (this.minute >= 60) {
				this.minute = 59;
			}

			if (this.showSeconds) {
				if (isNaN(this.second)) {
					this.second = 0;
				} else if (this.second < 0) {
					this.second = 0;
				} else if (this.second >= 60) {
					this.second = 59;
				}
			}

			this.update();
		},

		place: function () {
			var scrollTop = $(window).scrollTop();
			var widgetWidth = this.$widget.width();
			var widgetHeight = this.$widget.height();
			var windowWidth = $(window).width();
			var windowHeight = $(window).height();

			var offset = this.$element.offset();
			var height = this.$element.outerHeight(false);
			var width = this.$element.outerWidth(false);
			var top = offset.top;
			var left = offset.left;

			this.$widget.removeClass('cognito-timepicker-orient-top cognito-timepicker-orient-bottom');

			var yorient;
			var topOverflow = -scrollTop + offset.top - widgetHeight;
			var bottomOverflow = scrollTop + windowHeight - (offset.top + height + widgetHeight);
			if (Math.max(topOverflow, bottomOverflow) === bottomOverflow)
				yorient = 'top';
			else
				yorient = 'bottom';

			this.$widget.addClass('cognito-timepicker-orient-' + yorient);
			if (yorient === 'top')
				top += height + 6;
			else
				top -= widgetHeight + parseInt(this.$widget.css('padding-top')) + 8;

			this.$widget.css({
				top: top,
				left: left
			});
		},

		//Toggles the widget open and close
		toggleWidget: function () {
			if (this.isOpen === true) {
				this.hideWidget();
			}
			else {
				this.showWidget();
			}
		},
		
		showWidget: function () {
			if (this.isOpen) {
				return;
			}

			if (this.$element.is(':disabled')) {
				return;
			}

			//If the time has not been set when the widget is opened, set it to it's default time
			if (this.getTime() == '0' + this.timeSeparator + '00 ' + this.AMDesignator)
				this.setDefaultTime(this.defaultTime);
			this.updateWidget();

			this.place();

			var self = this;
			$(document).on('mousedown.timepicker', function (e) {
				
				//If there is an open time picker widget and the target is not the time picker, it's icon, or it's field, then close the widget
				if (
					$(e.target).closest('.cognito-timepicker-widget').length === 0 
					&& (
						//the user is not clicking the editor or icon that belongs to this field
                        !(self.$element.is(e.target) ||
                            e.target.className.indexOf("c-editor-time") > -1 ||
                            e.target.className.indexOf("icon-time") > -1 ||
                            e.target.className.indexOf("time-icon") > -1)
						|| $(e.target).parents(".c-date-time")[0] !== $(self.$element).parents(".c-date-time")[0]
					)
				) {
					self.hideWidget();
				}
			});

			//Replace on document resize
			$(document).on('resize.timepicker', function (e) {
				self.place();
			});

			this.$element.trigger({
				'type': 'show.timepicker',
				'time': {
					'value': this.getTime(),
					'hours': this.hour,
					'minutes': this.minute,
					'seconds': this.second,
					'meridian': this.meridian
				}
			});

			if (this.disableFocus) {
				this.$element.blur();
			}

			this.updateFromElementVal();

			if (this.template === 'modal' && this.$widget.modal) {
				this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
			} else {
				if (this.isOpen === false) {
					this.$widget.addClass('open');
				}
			}

			this.isOpen = true;
		},

		toggleMeridian: function () {
			this.meridian = this.meridian === this.AMDesignator ? this.PMDesignator : this.AMDesignator;
			this.update();
		},

		update: function () {
			this.updateElement();

			this.$element.trigger({
				'type': 'changeTime.timepicker',
				'time': {
					'value': this.getTime(),
					'hours': this.hour,
					'minutes': this.minute,
					'seconds': this.second,
					'meridian': this.meridian
				}
			});

			this.updateWidget();
		},

		updateElement: function () {
			this.$element.val(this.getTime()).change();
		},

		updateFromElementVal: function () {
			var val = this.$element.val();

			if (val) {
				this.setTime(val);
			}
		},

		updateWidget: function () {
			if (this.$widget === false) {
				return;
			}

			var hour = this.hour < 10 ? '0' + this.hour : this.hour,
				minute = this.minute < 10 ? '0' + this.minute : this.minute,
				second = this.second < 10 ? '0' + this.second : this.second;

			if (this.showInputs) {
				this.$widget.find('input.cognito-timepicker-hour').val(hour);
				this.$widget.find('input.cognito-timepicker-minute').val(minute);

				if (this.showSeconds) {
					this.$widget.find('input.cognito-timepicker-second').val(second);
				}
				if (this.showMeridian) {
					this.$widget.find('input.cognito-timepicker-meridian').val(this.meridian);
				}
			} else {
				this.$widget.find('span.cognito-timepicker-hour').text(hour);
				this.$widget.find('span.cognito-timepicker-minute').text(minute);

				if (this.showSeconds) {
					this.$widget.find('span.cognito-timepicker-second').text(second);
				}
				if (this.showMeridian) {
					this.$widget.find('span.cognito-timepicker-meridian').text(this.meridian);
				}
			}
		},

		updateFromWidgetInputs: function () {
			if (this.$widget === false || this.$element.val() === "") {
				return;
			}

			var time = $('input.cognito-timepicker-hour', this.$widget).val() + this.timeSeparator +
				$('input.cognito-timepicker-minute', this.$widget).val() +
				(this.showSeconds ? this.timeSeparator + $('input.cognito-timepicker-second', this.$widget).val() : '') +
				(this.showMeridian ? ' ' + $('input.cognito-timepicker-meridian', this.$widget).val() : '');

			this.setTime(time);
		},

		widgetClick: function (e) {
			e.stopPropagation();
			e.preventDefault();

			var action = $(e.target).closest('a').data('action');
			if (action) {
				this[action]();
			}
		},

		widgetKeydown: function (e) {
			var $input = $(e.target).closest('input'),
				name = $input.attr('name');

			switch (e.keyCode) {
				case 9: //tab
					if (this.showMeridian) {
						if (name === 'meridian') {
							return this.hideWidget();
						}
					} else {
						if (this.showSeconds) {
							if (name === 'second') {
								return this.hideWidget();
							}
						} else {
							if (name === 'minute') {
								return this.hideWidget();
							}
						}
					}

					this.updateFromWidgetInputs();
					break;
				case 27: // escape
					this.hideWidget();
					break;
				case 38: // up arrow
					e.preventDefault();
					switch (name) {
						case 'hour':
							this.incrementHour();
							break;
						case 'minute':
							this.incrementMinute();
							break;
						case 'second':
							this.incrementSecond();
							break;
						case 'meridian':
							this.toggleMeridian();
							break;
					}
					break;
				case 40: // down arrow
					e.preventDefault();
					switch (name) {
						case 'hour':
							this.decrementHour();
							break;
						case 'minute':
							this.decrementMinute();
							break;
						case 'second':
							this.decrementSecond();
							break;
						case 'meridian':
							this.toggleMeridian();
							break;
					}
					break;
			}
		}
	};


	//TIMEPICKER PLUGIN DEFINITION
	$.fn.timepicker = function (option) {
		var args = Array.apply(null, arguments);
		args.shift();
		return this.each(function () {
			var $this = $(this),
			data = $this.data('timepicker'),
			options = typeof option === 'object' && option;

			if (!data) {
				$this.data('timepicker', (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data()))));
			}

			if (typeof option === 'string') {
				data[option].apply(data, args);
			}
		});
	};

	$.fn.timepicker.defaults = {
		defaultTime: 'current',
		disableFocus: false,
		isOpen: false,
		minuteStep: 15,
		modalBackdrop: false,
		secondStep: 15,
		showSeconds: false,
		showInputs: true,
		showMeridian: true,
		template: 'dropdown',
		appendWidgetTo: '.cognito-timepicker',
		timeSeparator: ':',
		AMDesignator: "AM",
		PMDesignator: "PM",
		twoDigitHourFormat: false
	};

	$.fn.timepicker.Constructor = Timepicker;

})(jQuery, window, document);

/***/ }),

/***/ "../../../Cognito.Services/Scripts/component/Cognito-typeahead.js":
/*!*********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/component/Cognito-typeahead.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
* bootstrap-typeahead.js
* Copyright 2013 Twitter, Inc.
* http://www.apache.org/licenses/LICENSE-2.0.txt
*/
/* =============================================================
 * bootstrap-typeahead.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#typeahead
 * =============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

	"use strict"; // jshint ;_;


	/* TYPEAHEAD PUBLIC CLASS DEFINITION
	 * ================================= */

	var Typeahead = function (element, options) {
		this.$element = $(element)
		this.options = $.extend({}, $.fn.typeahead.defaults, options)
		this.matcher = this.options.matcher || this.matcher
		this.sorter = this.options.sorter || this.sorter
		this.highlighter = this.options.highlighter || this.highlighter
		this.updater = this.options.updater || this.updater
		this.source = this.options.source || $.map(this.$element[0].__msajaxbindings[0]._source.get_options(), function (val, i) { return val.get_displayValue(); }),
		this.$menu = $(this.options.menu)
		this.shown = false
		this.listen()
	}

	Typeahead.prototype = {

		constructor: Typeahead

	, select: function () {
		var val = this.$menu.find('.active').attr('data-value')
		this.$element
		  .val(this.updater(val))
		  .change()

		$simulateMutationEvent(this.$element.get(0), "change", false, true)

		return this.hide()
	}

	, updater: function (item) {
		return item
	}

	, show: function () {
		var pos = $.extend({}, this.$element.position(), {
			height: this.$element[0].offsetHeight
		})

		this.$menu
		  .insertAfter(this.$element)
		  .css({
			top: pos.top + pos.height
		  , left: pos.left
		  })
		  .show()

		var $pageContainer = this.$element.closest('.c-forms-pages')
		if ($pageContainer.length) {
			var currentHeight = this.$menu.get(0).offsetHeight
			var maxHeight = $pageContainer.get(0).offsetHeight - (pos.top + pos.height);
			if (currentHeight > maxHeight) {
				this.$menu.css({
					height: maxHeight
					, overflow: 'auto'
				})
			}
		}
		
		var $modal = this.$menu.closest('.c-modal.c-expression-builder-dialog--is-advanced');
		if($modal.length) {
			var menuInitialHeight = this.$menu.height();
			var menuNewHeight = ($modal.height() + $modal.offset().top) - this.$menu.offset().top;
			if(menuNewHeight < menuInitialHeight) {
				this.$menu.css({
					height: menuNewHeight
				});
			}
		}
		
		this.shown = true
		return this
	}

	, hide: function () {
		this.$menu.hide()
		this.shown = false
		return this
	}

	, lookup: function (event) {
		var items

		this.query = this.$element.val()

		if (!this.query || this.query.length < this.options.minLength) {
			return this.shown ? this.hide() : this
		}

		items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source

		return items ? this.process(items) : this
	}

	, process: function (items) {
		var that = this

		items = $.grep(items, function (item) {
			return that.matcher(item)
		})

		items = this.sorter(items)

		if (!items.length) {
			return this.shown ? this.hide() : this
		}

		return this.render(items.slice(0, this.options.items)).show()
	}

	, matcher: function (item) {
		return ~item.toLowerCase().indexOf(this.query.toLowerCase())
	}

	, sorter: function (items) {
		var beginswith = []
		  , caseSensitive = []
		  , caseInsensitive = []
		  , item

		while (item = items.shift()) {
			if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item)
			else if (~item.indexOf(this.query)) caseSensitive.push(item)
			else caseInsensitive.push(item)
		}

		return beginswith.concat(caseSensitive, caseInsensitive)
	}

	, highlighter: function (item) {
		var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
		return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
			return '<strong>' + match + '</strong>'
		})
	}

	, render: function (items) {
		var that = this

		items = $(items).map(function (i, item) {
			i = $(that.options.item).attr('data-value', item)
			i.find('a').html(that.highlighter(item))
			return i[0]
		})
		items.first().addClass('active')
		this.$menu.html(items)
		return this
	}

	, next: function (event) {
		var active = this.$menu.find('.active').removeClass('active')
		  , next = active.next()

		if (!next.length) {
			next = $(this.$menu.find('li')[0])
		}

		next.addClass('active')
		
		var index = parseInt(next.attr('data-index'));
		var liPos = (index + 1) * 26;
		if (index == 0)
			this.$menu.scrollTop(0);
		else if (liPos > this.$menu.height()+this.$menu.scrollTop())
			this.$menu.scrollTop(liPos - this.$menu.height());
	}

	, prev: function (event) {
		var active = this.$menu.find('.active').removeClass('active')
		  , prev = active.prev()
		var isLast = false;

		if (!prev.length) {
			prev = this.$menu.find('li').last()
			isLast = true;
		}

		prev.addClass('active')

		var index = parseInt(prev.attr('data-index'));
		var liPos = index * 26;
		if (isLast)
			this.$menu.scrollTop(liPos);
		else if (liPos < this.$menu.scrollTop())
			this.$menu.scrollTop(liPos);
	}

	, listen: function () {
		this.$element
		  .on('focus', $.proxy(this.focus, this))
		  .on('blur', $.proxy(this.blur, this))
		  .on('keyup', $.proxy(this.keyup, this))

		if (this.eventSupported('keydown')) {
			this.$element.on('keydown', $.proxy(this.keydown, this))
		}

		this.$menu
		  .on('click', $.proxy(this.click, this))
		  .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
		  .on('mouseleave', 'li', $.proxy(this.mouseleave, this))
		  .on('mouseenter', $.proxy(this.mouseentermenu, this))
		  .on('mouseleave', $.proxy(this.mouseleavemenu, this))
		  .on('mouseup', $.proxy(this.mouseup, this))
	}

	, eventSupported: function (eventName) {
		var isSupported = eventName in this.$element
		if (!isSupported) {
			this.$element.setAttribute(eventName, 'return;')
			isSupported = typeof this.$element[eventName] === 'function'
		}
		return isSupported
	}

	, move: function (e) {
		if (!this.shown) return

		switch (e.keyCode) {
			case 9: // tab
			case 13: // enter
			case 27: // escape
				e.preventDefault()
				break

			case 38: // up arrow
				e.preventDefault()
				this.prev()
				break

			case 40: // down arrow
				e.preventDefault()
				this.next()
				break
		}

		e.stopPropagation()
	}

	, keydown: function (e) {
		this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27])
		this.move(e)
	}

	, keyup: function (e) {
		switch (e.keyCode) {
			case 40: // down arrow
			case 38: // up arrow
			case 16: // shift
			case 17: // ctrl
			case 18: // alt
				break

			case 9: // tab
			case 13: // enter
				if (!this.shown) return
				this.select()
				break

			case 27: // escape
				if (!this.shown) return
				this.hide()
				break

			default:
				this.lookup()
		}

		e.stopPropagation()
		e.preventDefault()
	}

	, focus: function (e) {
		this.focused = true
	}

	, blur: function (e) {
		this.focused = false
		if (!this.mousedovermenu && this.shown) this.hide()
	}

	, click: function (e) {
		e.stopPropagation()
		e.preventDefault()
		this.select()
		this.$element.focus()
	}

	, mouseenter: function (e) {
		this.mousedover = true
		this.$menu.find('.active').removeClass('active')
		$(e.currentTarget).addClass('active')
	}

	, mouseleave: function (e) {
		this.mousedover = false
	}

	, mouseentermenu: function (e) {
		this.mousedovermenu = true
	}

	, mouseleavemenu: function (e) {
		this.mousedovermenu = false
	}

	, mouseup: function (e) {
		var selectedElement = this.$menu.find('.active')
		if (this.mousedovermenu && !this.mousedover) {
			this.focusItem = selectedElement
			this.$element.focus()
		}
	}

	}


	/* TYPEAHEAD PLUGIN DEFINITION
	 * =========================== */

	var old = $.fn.typeahead

	$.fn.typeahead = function (option) {
		return this.each(function () {
			var $this = $(this)
			  , data = $this.data('typeahead')
			  , options = typeof option == 'object' && option
			if (!data) $this.data('typeahead', (data = new Typeahead(this, options)))
			if (typeof option == 'string') data[option]()
		})
	}

	$.fn.typeahead.defaults = {
		source: []
	, items: 8
	, menu: '<ul class="typeahead dropdown-menu scrollbar"></ul>'
	, item: '<li><a href="#"></a></li>'
	, minLength: 1
	}

	$.fn.typeahead.Constructor = Typeahead


	/* TYPEAHEAD NO CONFLICT
	 * =================== */

	$.fn.typeahead.noConflict = function () {
		$.fn.typeahead = old
		return this
	}


	/* TYPEAHEAD DATA-API
	 * ================== */

	$(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
		var $this = $(this)
		if ($this.data('typeahead')) return
		$this.typeahead($this.data())
	})

}(jQuery);

/* =============================================================
 * bootstrap-better-typeahead.js v1.0.0 by Philipp Nolte
 * https://github.com/ptnplanet/Bootstrap-Better-Typeahead
 * =============================================================
 * This plugin makes use of twitter bootstrap typeahead
 * http://twitter.github.com/bootstrap/javascript.html#typeahead
 *
 * Bootstrap is licensed under the Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 * ============================================================ */

!function($) {

	"use strict";

	/**
	 * The better typeahead plugin will extend the bootstrap typeahead plugin and provide the ability to set the
	 * minLength option to zero. The tab keyup event handler had to be moved to the keydown event handler, so that
	 * the full list of available items is shown on tab-focus and the original behaviour is preserved as best as
	 * possible.
	 *
	 * @type {object}
	 */
	var BetterTypeahead = {

		lookup: function(event) {
			var items;

			// Now supports empty queries (eg. with a length of 0).
			this.query = this.$element.val() || '';

			if (this.query.length < this.options.minLength) {
				return this.shown ? this.hide() : this;
			}

			items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;

			return items ? this.process(items) : this;
		}

		, process: function (items) {
			var that = this;

			items = $.grep(items, function (item) {
				return that.matcher(item);
			});

			items = this.sorter(items);

			if (!items.length) {
				return this.shown ? this.hide() : this;
			}

			if (this.query.length) {
				items = items.slice(0, this.options.items);
			}
			if (this.focusItem) {
				this.focusItem = null;
				return;
			}
			return this.render(items).show();
		}

		, render: function (items) {
			var that = this

			items = $(items).map(function (i, item) {
				var li = $(that.options.item).attr('data-value', item);
				li.attr('data-index', i);
				li.find('a').html(that.highlighter(item));
				return li[0];
			});

			if (this.query.length > 0) {
				if (this.focusItem)
					return;
				else
					items.first().addClass('active');
			}

			this.$menu.html(items);
			return this;
		}

		, move: function (e) {
			if (!this.shown) return;

			switch (e.keyCode) {
				case 9: // tab
				case 13: // enter
					if (this.options.useTabToSelect === true)
						e.preventDefault();
					else if (this.shown) {
                        this.select()
						this.hide();
					}
					break;
				case 27: // escape
					e.preventDefault();
					break;

				case 38: // up arrow
					e.preventDefault();
					this.prev();
					e.stopPropagation();
					break;

				case 40: // down arrow
					e.preventDefault();
					this.next();
					e.stopPropagation();
					break;
			}
		}

		, keydown: function (e) {
			this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40,38,9,13,27]);
			this.move(e);
		}

		, keyup: function (e) {
			switch(e.keyCode) {
			    case 37: // left
			    case 39: // right
			        return;
				case 40: // down arrow
				case 38: // up arrow
				case 16: // shift
				case 17: // ctrl
				case 18: // alt
					break;

				case 13: // enter
				case 9: // tab
					if (!this.shown) return;
					this.select();
					this.show();
					break;

				case 27: // escape;
					if (!this.shown) return;
					this.hide();
					break;

				default:
					this.lookup();
			}

			//if (!this.options.useTabToSelect)
            e.stopPropagation();
			e.preventDefault();
		}

		, focus: function(e) {
			this.focused = true;

			if (!this.mousedover) {
				this.lookup(e);
			}
		}
	};

	$.extend($.fn.typeahead.Constructor.prototype, BetterTypeahead);

}(jQuery);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,