(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.microsoft+applicationinsights-web@2.5.4"],{

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/*! exports provided: ApplicationInsightsContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInsightsContainer", function() { return ApplicationInsightsContainer; });
/* harmony import */ var _ApplicationInsightsDeprecated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApplicationInsightsDeprecated */ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsDeprecated.js");
/* harmony import */ var _Initialization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Initialization */ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js");
/*!
 * Application Insights JavaScript SDK - Web, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


var ApplicationInsightsContainer = /** @class */ (function () {
    function ApplicationInsightsContainer() {
    }
    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {
        var initialization = new _Initialization__WEBPACK_IMPORTED_MODULE_1__["Initialization"](snippet);
        var legacyMode = version !== 2.0 ? true : false;
        // Two target scenarios:
        // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work
        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding
        // and all api signatures are expected to map to new SDK. Note new snippet specifies version
        if (version === 2.0) {
            initialization.updateSnippetDefinitions(snippet);
            initialization.loadAppInsights(legacyMode);
            return initialization; // default behavior with new snippet
        }
        else {
            var legacy = new _ApplicationInsightsDeprecated__WEBPACK_IMPORTED_MODULE_0__["AppInsightsDeprecated"](snippet, initialization); // target scenario old snippet + updated endpoint
            legacy.updateSnippetDefinitions(snippet);
            initialization.loadAppInsights(legacyMode);
            return legacy;
        }
    };
    return ApplicationInsightsContainer;
}());

//# sourceMappingURL=ApplicationInsightsContainer.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsDeprecated.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsDeprecated.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/*! exports provided: AppInsightsDeprecated */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppInsightsDeprecated", function() { return AppInsightsDeprecated; });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/*!
 * Application Insights JavaScript SDK - Web, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */

// ToDo: fix properties and measurements once updates are done to common
var AppInsightsDeprecated = /** @class */ (function () {
    function AppInsightsDeprecated(snippet, appInsightsNew) {
        this._hasLegacyInitializers = false;
        this._queue = [];
        this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config);
        this.appInsightsNew = appInsightsNew;
        this.context = { addTelemetryInitializer: this.addTelemetryInitializers.bind(this) };
    }
    AppInsightsDeprecated.getDefaultConfig = function (config) {
        if (!config) {
            config = {};
        }
        // set default values
        config.endpointUrl = config.endpointUrl || "https://dc.services.visualstudio.com/v2/track";
        config.sessionRenewalMs = 30 * 60 * 1000;
        config.sessionExpirationMs = 24 * 60 * 60 * 1000;
        config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb
        config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;
        config.enableDebug = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.enableDebug);
        config.disableExceptionTracking = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.disableExceptionTracking);
        config.disableTelemetry = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.disableTelemetry);
        config.verboseLogging = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.verboseLogging);
        config.emitLineDelimitedJson = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.emitLineDelimitedJson);
        config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;
        config.autoTrackPageVisitTime = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.autoTrackPageVisitTime);
        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {
            config.samplingPercentage = 100;
        }
        config.disableAjaxTracking = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.disableAjaxTracking);
        config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;
        config.isBeaconApiDisabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.isBeaconApiDisabled, true);
        config.disableCorrelationHeaders = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.disableCorrelationHeaders);
        config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [
            "*.blob.core.windows.net",
            "*.blob.core.chinacloudapi.cn",
            "*.blob.core.cloudapi.de",
            "*.blob.core.usgovcloudapi.net"
        ];
        config.disableFlushOnBeforeUnload = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.disableFlushOnBeforeUnload);
        config.disableFlushOnUnload = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload);
        config.enableSessionStorageBuffer = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.enableSessionStorageBuffer, true);
        config.isRetryDisabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.isRetryDisabled);
        config.isCookieUseDisabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.isCookieUseDisabled);
        config.isStorageUseDisabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.isStorageUseDisabled);
        config.isBrowserLinkTrackingEnabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);
        config.enableCorsCorrelation = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].stringToBoolOrDefault(config.enableCorsCorrelation);
        return config;
    };
    /**
     * The array of telemetry initializers to call before sending each telemetry item.
     */
    AppInsightsDeprecated.prototype.addTelemetryInitializers = function (callBack) {
        var _this = this;
        // Add initializer to current processing only if there is any old telemetry initializer
        if (!this._hasLegacyInitializers) {
            this.appInsightsNew.addTelemetryInitializer(function (item) {
                _this._processLegacyInitializers(item); // setup call back for each legacy processor
            });
            this._hasLegacyInitializers = true;
        }
        this._queue.push(callBack);
    };
    AppInsightsDeprecated.prototype.startTrackPage = function (name) {
        this.appInsightsNew.startTrackPage(name);
    };
    AppInsightsDeprecated.prototype.stopTrackPage = function (name, url, properties, measurements) {
        this.appInsightsNew.stopTrackPage(name, url, properties); // update
    };
    AppInsightsDeprecated.prototype.trackPageView = function (name, url, properties, measurements, duration) {
        var telemetry = {
            name: name,
            uri: url,
            properties: properties,
            measurements: measurements
        };
        // fix for props, measurements, duration
        this.appInsightsNew.trackPageView(telemetry);
    };
    AppInsightsDeprecated.prototype.trackEvent = function (name, properties, measurements) {
        this.appInsightsNew.trackEvent({ name: name });
    };
    AppInsightsDeprecated.prototype.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {
        this.appInsightsNew.trackDependencyData({
            id: id,
            target: absoluteUrl,
            type: pathName,
            duration: totalTime,
            properties: { HttpMethod: method },
            success: success,
            responseCode: resultCode
        });
    };
    AppInsightsDeprecated.prototype.trackException = function (exception, handledAt, properties, measurements, severityLevel) {
        this.appInsightsNew.trackException({
            exception: exception
        });
    };
    AppInsightsDeprecated.prototype.trackMetric = function (name, average, sampleCount, min, max, properties) {
        this.appInsightsNew.trackMetric({ name: name, average: average, sampleCount: sampleCount, min: min, max: max });
    };
    AppInsightsDeprecated.prototype.trackTrace = function (message, properties, severityLevel) {
        this.appInsightsNew.trackTrace({ message: message, severityLevel: severityLevel });
    };
    AppInsightsDeprecated.prototype.flush = function (async) {
        this.appInsightsNew.flush(async);
    };
    AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {
        this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);
    };
    AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function () {
        this.appInsightsNew.context.user.clearAuthenticatedUserContext();
    };
    AppInsightsDeprecated.prototype._onerror = function (message, url, lineNumber, columnNumber, error) {
        this.appInsightsNew._onerror({ message: message, url: url, lineNumber: lineNumber, columnNumber: columnNumber, error: error });
    };
    AppInsightsDeprecated.prototype.startTrackEvent = function (name) {
        this.appInsightsNew.startTrackEvent(name);
    };
    AppInsightsDeprecated.prototype.stopTrackEvent = function (name, properties, measurements) {
        this.appInsightsNew.stopTrackEvent(name, properties, measurements);
    };
    AppInsightsDeprecated.prototype.downloadAndSetup = function (config) {
        throw new Error("downloadAndSetup not implemented in web SKU");
    };
    AppInsightsDeprecated.prototype.updateSnippetDefinitions = function (snippet) {
        // apply full appInsights to the global instance
        // Note: This must be called before loadAppInsights is called
        for (var field in this) {
            if (typeof field === 'string') {
                snippet[field] = this[field];
            }
        }
    };
    // note: these are split into methods to enable unit tests
    AppInsightsDeprecated.prototype.loadAppInsights = function () {
        // initialize global instance of appInsights
        // var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);
        var _this = this;
        // implement legacy version of trackPageView for 0.10<
        if (this.config["iKey"]) {
            var originalTrackPageView_1 = this.trackPageView;
            this.trackPageView = function (pagePath, properties, measurements) {
                originalTrackPageView_1.apply(_this, [null, pagePath, properties, measurements]);
            };
        }
        // implement legacy pageView interface if it is present in the snippet
        var legacyPageView = "logPageView";
        if (typeof this.snippet[legacyPageView] === "function") {
            this[legacyPageView] = function (pagePath, properties, measurements) {
                _this.trackPageView(null, pagePath, properties, measurements);
            };
        }
        // implement legacy event interface if it is present in the snippet
        var legacyEvent = "logEvent";
        if (typeof this.snippet[legacyEvent] === "function") {
            this[legacyEvent] = function (name, props, measurements) {
                _this.trackEvent(name, props, measurements);
            };
        }
        return this;
    };
    AppInsightsDeprecated.prototype._processLegacyInitializers = function (item) {
        // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call
        item.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["ProcessLegacy"]] = this._queue;
        return item;
    };
    return AppInsightsDeprecated;
}());

//# sourceMappingURL=ApplicationInsightsDeprecated.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js ***!
  \***********************************************************************************************************************************************************************************************************/
/*! exports provided: Telemetry, Initialization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Telemetry", function() { return Telemetry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Initialization", function() { return Initialization; });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/* harmony import */ var _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-analytics-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/applicationinsights-analytics-js.js");
/* harmony import */ var _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-channel-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/applicationinsights-channel-js.js");
/* harmony import */ var _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-properties-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-properties-js@2.5.4/node_modules/@microsoft/applicationinsights-properties-js/dist-esm/applicationinsights-properties-js.js");
/* harmony import */ var _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-dependencies-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-dependencies-js@2.5.4/node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/applicationinsights-dependencies-js.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/*!
 * Application Insights JavaScript SDK - Web, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */








"use strict";
;
/**
 * Telemetry type classes, e.g. PageView, Exception, etc
 */
var Telemetry = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__;
/**
 * Application Insights API
 * @class Initialization
 * @implements {IApplicationInsights}
 */
var Initialization = /** @class */ (function () {
    function Initialization(snippet) {
        var _this = this;
        // initialize the queue and config in case they are undefined
        snippet.queue = snippet.queue || [];
        snippet.version = snippet.version || 2.0; // Default to new version
        var config = snippet.config || {};
        if (config.connectionString) {
            var cs = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__["ConnectionStringParser"].parse(config.connectionString);
            var ingest = cs.ingestionendpoint;
            config.endpointUrl = ingest ? ingest + "/v2/track" : config.endpointUrl; // only add /v2/track when from connectionstring
            config.instrumentationKey = cs.instrumentationkey || config.instrumentationKey;
        }
        _this.appInsights = new _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_1__["ApplicationInsights"]();
        _this.properties = new _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_3__["PropertiesPlugin"]();
        _this.dependencies = new _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_4__["AjaxPlugin"]();
        _this.core = new _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["AppInsightsCore"]();
        _this.snippet = snippet;
        _this.config = config;
        _this.getSKUDefaults();
    }
    // Analytics Plugin
    /**
     * Log a user action or other occurrence.
     * @param {IEventTelemetry} event
     * @param {ICustomProperties} [customProperties]
     * @memberof Initialization
     */
    Initialization.prototype.trackEvent = function (event, customProperties) {
        this.appInsights.trackEvent(event, customProperties);
    };
    /**
     * Logs that a page, or similar container was displayed to the user.
     * @param {IPageViewTelemetry} pageView
     * @memberof Initialization
     */
    Initialization.prototype.trackPageView = function (pageView) {
        var inPv = pageView || {};
        this.appInsights.trackPageView(inPv);
    };
    /**
     * Log a bag of performance information via the customProperties field.
     * @param {IPageViewPerformanceTelemetry} pageViewPerformance
     * @memberof Initialization
     */
    Initialization.prototype.trackPageViewPerformance = function (pageViewPerformance) {
        var inPvp = pageViewPerformance || {};
        this.appInsights.trackPageViewPerformance(inPvp);
    };
    /**
     * Log an exception that you have caught.
     * @param {IExceptionTelemetry} exception
     * @memberof Initialization
     */
    Initialization.prototype.trackException = function (exception) {
        if (!exception.exception && exception.error) {
            exception.exception = exception.error;
        }
        this.appInsights.trackException(exception);
    };
    /**
     * Manually send uncaught exception telemetry. This method is automatically triggered
     * on a window.onerror event.
     * @param {IAutoExceptionTelemetry} exception
     * @memberof Initialization
     */
    Initialization.prototype._onerror = function (exception) {
        this.appInsights._onerror(exception);
    };
    /**
     * Log a diagnostic scenario such entering or leaving a function.
     * @param {ITraceTelemetry} trace
     * @param {ICustomProperties} [customProperties]
     * @memberof Initialization
     */
    Initialization.prototype.trackTrace = function (trace, customProperties) {
        this.appInsights.trackTrace(trace, customProperties);
    };
    /**
     * Log a numeric value that is not associated with a specific event. Typically used
     * to send regular reports of performance indicators.
     *
     * To send a single measurement, just use the `name` and `average` fields
     * of {@link IMetricTelemetry}.
     *
     * If you take measurements frequently, you can reduce the telemetry bandwidth by
     * aggregating multiple measurements and sending the resulting average and modifying
     * the `sampleCount` field of {@link IMetricTelemetry}.
     * @param {IMetricTelemetry} metric input object argument. Only `name` and `average` are mandatory.
     * @param {ICustomProperties} [customProperties]
     * @memberof Initialization
     */
    Initialization.prototype.trackMetric = function (metric, customProperties) {
        this.appInsights.trackMetric(metric, customProperties);
    };
    /**
     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,
     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view
     * and send the event.
     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.
     */
    Initialization.prototype.startTrackPage = function (name) {
        this.appInsights.startTrackPage(name);
    };
    /**
     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.
     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.
     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.
     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    Initialization.prototype.stopTrackPage = function (name, url, customProperties, measurements) {
        this.appInsights.stopTrackPage(name, url, customProperties, measurements);
    };
    Initialization.prototype.startTrackEvent = function (name) {
        this.appInsights.startTrackEvent(name);
    };
    /**
     * Log an extended event that you started timing with `startTrackEvent`.
     * @param   name    The string you used to identify this event in `startTrackEvent`.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    Initialization.prototype.stopTrackEvent = function (name, properties, measurements) {
        this.appInsights.stopTrackEvent(name, properties, measurements); // Todo: Fix to pass measurements once type is updated
    };
    Initialization.prototype.addTelemetryInitializer = function (telemetryInitializer) {
        return this.appInsights.addTelemetryInitializer(telemetryInitializer);
    };
    // Properties Plugin
    /**
     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|
     *
     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`
     * @param {string} authenticatedUserId
     * @param {string} [accountId]
     * @param {boolean} [storeInCookie=false]
     * @memberof Initialization
     */
    Initialization.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {
        if (storeInCookie === void 0) { storeInCookie = false; }
        this.properties.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);
    };
    /**
     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.
     * @memberof Initialization
     */
    Initialization.prototype.clearAuthenticatedUserContext = function () {
        this.properties.context.user.clearAuthenticatedUserContext();
    };
    // Dependencies Plugin
    /**
     * Log a dependency call (e.g. ajax)
     * @param {IDependencyTelemetry} dependency
     * @memberof Initialization
     */
    Initialization.prototype.trackDependencyData = function (dependency) {
        this.dependencies.trackDependencyData(dependency);
    };
    // Misc
    /**
     * Manually trigger an immediate send of all telemetry still in the buffer.
     * @param {boolean} [async=true]
     * @memberof Initialization
     */
    Initialization.prototype.flush = function (async) {
        if (async === void 0) { async = true; }
        _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].arrForEach(this.core.getTransmissionControls(), function (channels) {
            _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].arrForEach(channels, function (channel) {
                channel.flush(async);
            });
        });
    };
    /**
     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.
     * Fall back to xhr sender if beacon is not supported.
     * @param {boolean} [async=true]
     * @memberof Initialization
     */
    Initialization.prototype.onunloadFlush = function (async) {
        if (async === void 0) { async = true; }
        _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].arrForEach(this.core.getTransmissionControls(), function (channels) {
            _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].arrForEach(channels, function (channel) {
                if (channel.onunloadFlush) {
                    channel.onunloadFlush();
                }
                else {
                    channel.flush(async);
                }
            });
        });
    };
    /**
     * Initialize this instance of ApplicationInsights
     * @returns {IApplicationInsights}
     * @memberof Initialization
     */
    Initialization.prototype.loadAppInsights = function (legacyMode) {
        if (legacyMode === void 0) { legacyMode = false; }
        var _this = this;
        function _updateSnippetProperties(snippet) {
            if (snippet) {
                // apply updated properties to the global instance (snippet)
                for (var field in _this) {
                    if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].isString(field) &&
                        !_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].isFunction(_this[field]) &&
                        field.substring(0, 1) !== "_") {
                        snippet[field] = _this[field];
                    }
                }
            }
        }
        // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!
        if (legacyMode && _this.config.extensions && _this.config.extensions.length > 0) {
            throw new Error("Extensions not allowed in legacy mode");
        }
        var extensions = [];
        var appInsightsChannel = new _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_2__["Sender"]();
        extensions.push(appInsightsChannel);
        extensions.push(_this.properties);
        extensions.push(_this.dependencies);
        extensions.push(_this.appInsights);
        // initialize core
        _this.core.initialize(_this.config, extensions);
        _this.context = _this.properties.context;
        _updateSnippetProperties(_this.snippet);
        // Empty queue of all api calls logged prior to sdk download
        _this.emptyQueue();
        _this.pollInternalLogs();
        _this.addHousekeepingBeforeUnload(this);
        return _this;
    };
    /**
     * Overwrite the lazy loaded fields of global window snippet to contain the
     * actual initialized API methods
     * @param {Snippet} snippet
     * @memberof Initialization
     */
    Initialization.prototype.updateSnippetDefinitions = function (snippet) {
        // apply full appInsights to the global instance
        // Note: This must be called before loadAppInsights is called
        for (var field in this) {
            if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].isString(field)) {
                snippet[field] = this[field];
            }
        }
    };
    /**
     * Call any functions that were queued before the main script was loaded
     * @memberof Initialization
     */
    Initialization.prototype.emptyQueue = function () {
        var _this = this;
        // call functions that were queued before the main script was loaded
        try {
            if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__["Util"].isArray(_this.snippet.queue)) {
                // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.
                var length_1 = _this.snippet.queue.length;
                for (var i = 0; i < length_1; i++) {
                    var call = _this.snippet.queue[i];
                    call();
                }
                _this.snippet.queue = undefined;
                delete _this.snippet.queue;
            }
        }
        catch (exception) {
            var properties = {};
            if (exception && _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].isFunction(exception.toString)) {
                properties.exception = exception.toString();
            }
            // need from core
            // Microsoft.ApplicationInsights._InternalLogging.throwInternal(
            //     LoggingSeverity.WARNING,
            //     _InternalMessageId.FailedToSendQueuedTelemetry,
            //     "Failed to send queued telemetry",
            //     properties);
        }
    };
    Initialization.prototype.pollInternalLogs = function () {
        this.core.pollInternalLogs();
    };
    Initialization.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {
        // Add callback to push events when the user navigates away
        if (Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["hasWindow"])() || Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["hasDocument"])()) {
            var performHousekeeping = function () {
                // Adds the ability to flush all data before the page unloads.
                // Note: This approach tries to push a sync request with all the pending events onbeforeunload.
                // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.
                // Telemetry here will help us analyze how effective this approach is.
                // Another approach would be to make this call sync with a acceptable timeout to reduce the
                // impact on user experience.
                // appInsightsInstance.context._sender.triggerSend();
                appInsightsInstance.onunloadFlush(false);
                // Back up the current session to local storage
                // This lets us close expired sessions after the cookies themselves expire
                var ext = appInsightsInstance.appInsights.core['_extensions'][_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_5__["PropertiesPluginIdentifier"]];
                if (ext && ext.context && ext.context._sessionManager) {
                    ext.context._sessionManager.backup();
                }
            };
            if (!appInsightsInstance.appInsights.config.disableFlushOnBeforeUnload) {
                // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server
                // As just hooking the window does not always fire (on chrome) for page navigations.
                var added = _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].addEventHandler('beforeunload', performHousekeeping);
                added = _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].addEventHandler('pagehide', performHousekeeping) || added;
                if (!added) {
                    appInsightsInstance.appInsights.core.logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["_InternalMessageId"].FailedToAddHandlerForOnBeforeUnload, 'Could not add handler for beforeunload and pagehide');
                }
            }
            // We also need to hook the pagehide event as not all versions of Safari support load/unload events.
            if (!appInsightsInstance.appInsights.config.disableFlushOnUnload) {
                // Not adding any telemetry as pagehide as it's not supported on all browsers
                _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].addEventHandler('pagehide', performHousekeeping);
            }
        }
    };
    Initialization.prototype.getSKUDefaults = function () {
        var _this = this;
        _this.config.diagnosticLogInterval =
            _this.config.diagnosticLogInterval && _this.config.diagnosticLogInterval > 0 ? _this.config.diagnosticLogInterval : 10000;
    };
    return Initialization;
}());

//# sourceMappingURL=Initialization.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/applicationinsights-web.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/applicationinsights-web.js ***!
  \********************************************************************************************************************************************************************************************************************/
/*! exports provided: ApplicationInsights, Telemetry, ApplicationInsightsContainer, AppInsightsCore, LoggingSeverity, _InternalMessageId, Util, SeverityLevel, Event, Exception, Metric, PageView, PageViewPerformance, RemoteDependencyData, Trace, DistributedTracingModes, Sender, ApplicationAnalytics, PropertiesPlugin, DependenciesPlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Initialization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Initialization */ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/Initialization.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationInsights", function() { return _Initialization__WEBPACK_IMPORTED_MODULE_0__["Initialization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Telemetry", function() { return _Initialization__WEBPACK_IMPORTED_MODULE_0__["Telemetry"]; });

/* harmony import */ var _ApplicationInsightsContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ApplicationInsightsContainer */ "../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/ApplicationInsightsContainer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationInsightsContainer", function() { return _ApplicationInsightsContainer__WEBPACK_IMPORTED_MODULE_1__["ApplicationInsightsContainer"]; });

/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppInsightsCore", function() { return _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["AppInsightsCore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LoggingSeverity", function() { return _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_InternalMessageId", function() { return _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"]; });

/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Util", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["Util"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SeverityLevel", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["SeverityLevel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["Event"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Exception", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["Exception"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Metric", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["Metric"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageView", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["PageView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageViewPerformance", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["PageViewPerformance"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RemoteDependencyData", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["RemoteDependencyData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trace", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["Trace"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DistributedTracingModes", function() { return _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_3__["DistributedTracingModes"]; });

/* harmony import */ var _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-channel-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/applicationinsights-channel-js.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sender", function() { return _microsoft_applicationinsights_channel_js__WEBPACK_IMPORTED_MODULE_4__["Sender"]; });

/* harmony import */ var _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-analytics-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/applicationinsights-analytics-js.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationAnalytics", function() { return _microsoft_applicationinsights_analytics_js__WEBPACK_IMPORTED_MODULE_5__["ApplicationInsights"]; });

/* harmony import */ var _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @microsoft/applicationinsights-properties-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-properties-js@2.5.4/node_modules/@microsoft/applicationinsights-properties-js/dist-esm/applicationinsights-properties-js.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertiesPlugin", function() { return _microsoft_applicationinsights_properties_js__WEBPACK_IMPORTED_MODULE_6__["PropertiesPlugin"]; });

/* harmony import */ var _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @microsoft/applicationinsights-dependencies-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-dependencies-js@2.5.4/node_modules/@microsoft/applicationinsights-dependencies-js/dist-esm/applicationinsights-dependencies-js.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DependenciesPlugin", function() { return _microsoft_applicationinsights_dependencies_js__WEBPACK_IMPORTED_MODULE_7__["AjaxPlugin"]; });

/*!
 * Application Insights JavaScript SDK - Web, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */


// Re-exports






//# sourceMappingURL=applicationinsights-web.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,