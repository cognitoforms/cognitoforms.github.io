(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["CheckboxDiff~CheckboxGroup~RadioGroup"],{

/***/ "./src/mixins/columnized-options.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  data() {
    return {
      optionOrder: [],
      calculatedColumns: this.columns,
      minimumColWidth: 130,
      useCssColumns: false,
      elementWidth: 0
    };
  },
  props: {
    columns: {
      type: Number,
      default: 0
    },
    options: {
      type: Array,
      default: null
    }
  },
  mounted() {
    if (this.columns > 0) {
      this.sortIntoColumns();
      window.addEventListener('resize', this.sortIntoColumns);
      this.addResetDataCallback(this.sortIntoColumns);
    }
  },
  beforeDestroy() {
    window.removeEventListener('resize', this.sortIntoColumns);
  },
  computed: {
    hasColumns() {
      return this.calculatedColumns >= 1 && this.calculatedColumns <= 4;
    },
    columnClasses() {
      return 'cog-inner-col cog-inner-col--' + (this.useCssColumns ? 'css-columns' : 'no-css-columns') + ' cog-inner-col--' + this.calculatedColumns;
    }
  },
  watch: {
    options() {
      if (this.columns > 0) this.sortIntoColumns();
    }
  },
  methods: {
    sortIntoColumns() {
      this.calculatedColumns = Math.max(1, Math.min(Math.floor(this.$el.clientWidth / this.minimumColWidth), this.columns));
      const numberOfColumns = this.calculatedColumns;
      const numberOfItems = this.allowOther ? this.options.length + 1 : this.options.length;
      const itemsPerColumn = numberOfItems / numberOfColumns;
      // Use CSS columns whenever possible.
      // By default CSS columns fill columns on an as-needed basis. When there are very few items it will favor visual balance
      // over column number specified. So if it doesn't feel like it needs all the columns allocated, it won't use them.absolute
      // The column-fill property can be used to override this behavior but it has very poor browser support.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/column-fill
      // If (numberOfItems / numberOfColumns) is 3 or more, CSS columns is always safe to use, but if there are fewer items the
      // number of items on the last "row" need to be checked.
      this.useCssColumns = itemsPerColumn > 2.5 || itemsPerColumn > 1.5 && itemsPerColumn < 2;
      if (this.useCssColumns) return false;
      let itemsPerColumnRounded = Math.ceil(itemsPerColumn);
      const partialColumns = numberOfColumns - numberOfItems % numberOfColumns;
      let hasPartialColumns = partialColumns !== numberOfColumns;
      const columns = [];
      let col = 0;
      let row = -1;
      for (let i = 0; i < numberOfItems; i++) {
        row++;
        if (row >= itemsPerColumnRounded) {
          row = 0;
          col++;
        }
        columns[row * numberOfColumns + col] = i;
        if (hasPartialColumns && i + 1 === numberOfItems - partialColumns * (itemsPerColumnRounded - 1)) {
          itemsPerColumnRounded--;
          hasPartialColumns = false;
        }
      }
      const options = [];
      for (let j = 0; j < numberOfItems; j++) {
        options[columns[j]] = j;
      }
      this.optionOrder = options;
    }
  }
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,