(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ViewsSharedScript9"],{

/***/ "../../../Cognito.Services/Views/Shared/entry-view.js":
/*!*********************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Views/Shared/entry-view.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function (isInIframe) {
Cognito.ready("entryview-script", ["Cognito.Forms"], function ($) {

	/*
	 * Usage:
	 *
	 * 1. Start by obtaining an entry set by calling db.getEntrySet(view, token, callback).
	 * 2. The returned entry set is an array of entry indexes, suitable for binding to grids.
	 * 3. Call entrySet.getEntry(index, callback) to obtain the entry for the specified index, or just entrySet[index] to obtain the index.
	 * 4. Call entrySet.sort(criteria, callback) to perform a client-side sort on the set.
	 * 5. Call entrySet.filter(criteria, callback) to perform a client-side filter on the set, where criteria can be a filter function or an EntryViewFilter instance.
	 * 6. Call entrySet.refresh(callback) to update the entry set with changes that have occurred on the server.
	 */

	//#region Database API

	var atobErrorLogged;

	var batches = {};

	var formTypes;

	var wasClosed = false;

	var db = {

		close: function () {
			if (db.database && db.database.close)
				db.database.close();
			db.database = { isSupported: false };
			wasClosed = true;
		},

		// Initialize
		init: function init(version, encryptionKey, forceDisable) {

			// Initialize Indexed DB
			try {
				if (!forceDisable && !window.webkitIndexedDB) {
					// Creates or updates the client database cache.
					// Increment the version number when adding/ changing table schemas.
					var request = window.dbRequest = window.indexedDB.open("Cognito.Forms." + Cognito.config.organizationCode, version + 1);
					request.onupgradeneeded = function (event) {
						if (wasClosed)
							return;
						db.database = event.target.result;
						if (db.database.objectStoreNames.contains("FormEntry"))
							db.database.deleteObjectStore("FormEntry");
						db.database.createObjectStore("FormEntry", { keyPath: "Id" });
						if (db.database.objectStoreNames.contains("FormEntryIndex"))
							db.database.deleteObjectStore("FormEntryIndex");
						db.database.createObjectStore("FormEntryIndex", { keyPath: "Id" });
						if (db.database.objectStoreNames.contains("FormKey"))
							db.database.deleteObjectStore("FormKey");
						db.database.createObjectStore("FormKey", { keyPath: "Form" });
					};
					request.onsuccess = function (event) {

						db.database = event.target.result;
						db.database.isSupported = true;

						if (wasClosed) {
							// Ensure that the database is closed
							db.close();
							return;
						}

						db.database.onversionchange = function (event) {
							db.close();
						};

						// Hash and store the encryption key
						if (encryptionKey) {
							db.database.isSupported = false;
							try {
								window.crypto = window.crypto || window.msCrypto; //for IE11
								if (window.crypto.webkitSubtle) {
									window.crypto.subtle = window.crypto.webkitSubtle; //for Safari
								}
								crypto.subtle.digest('SHA-256', encode(encryptionKey)).then(function (key) {
									if (wasClosed)
										return;
									db.database.encryptionKey = key;
									var test = { Id: "0-0", Validation: "1234$%^&ABCD" };
									encrypt(test, function (encrypted) {
										if (wasClosed)
											return;
										if (encrypted)
											decrypt(encrypted, function (decrypted) {
												if (wasClosed)
													return;
												db.database.isSupported = decrypted && decrypted.Validation == test.Validation;
												Cognito.ready("entryview");
											});
										else
											Cognito.ready("entryview");
									});
								});
							}
							catch (e) {

								// Disable client caching if cryptography is not supported
								db.database = { isSupported: false };
								Cognito.ready("entryview");
							}
						}
						else
							Cognito.ready("entryview");
					};
					request.onerror = function (event) {
						if (wasClosed)
							return;
						db.database = { isSupported: false };
						Cognito.ready("entryview");
					};
				}
				else {
					db.database = { isSupported: false };
					Cognito.ready("entryview");
				}
			}
			catch (e) {
				db.database = { isSupported: false };
				Cognito.ready("entryview");
			}

			Cognito.dynamicTypes = Cognito.dynamicTypes || {};
			Cognito.dynamicTypes["Cognito.Forms.FormEntry"] = Cognito.dynamicTypes["Cognito.Forms.FormEntry"] || { Types: {} };
			// Cache dynamic form type definitions
			formTypes = Cognito.dynamicTypes["Cognito.Forms.FormEntry"].Types;
		},

		// Get Entry Set
		getEntrySet: function getEntrySet(view, scope, token, shortUserId, roleId, callback, progressCallback) {

			// Get the cached entry set
			var entrySet = createEntrySet([], view, scope, token, shortUserId, roleId);

			// Refresh the entry set to load changes from the server
			entrySet.refresh(callback, progressCallback);
		},

		isEntry: function isEntry(entry) {
			return entry instanceof Cognito.Forms.FormEntry;
		},

		// Creates an entry key from the specified arguments, which can be FormEntry, FormEntryIndex or four separate string arguments
		getEntryKey: function getEntryKey(entryId, entryETag, orderId, orderETag, scope) {
			if (arguments.length == 1) {

				if (entryId instanceof Cognito.Forms.FormEntryIndex) {
					var index = entryId;
					entryId = entryId.get_Id().split("|")[2];
					var pos = entryId.indexOf('.');
					if (pos > 0) {
						scope = entryId.substr(pos + 1);
						entryId = entryId.substr(0, pos);
					}
					return { EntryId: entryId, EntryETag: index.get_EntryETag(), Scope: scope || "", OrderId: index.get_OrderId(), OrderETag: index.get_OrderETag() };
				}

				if (this.isEntry(entryId)) {
					var orderId = null;
					var orderETag = null;
					var entry = entryId;

					entryId = entry.get_Id();
					order = typeof entry.get_Order === "function" ? entry.get_Order() : null;
					if (order) {
						orderId = order.get_Id();
						orderETag = order.$etag;
					}

					return { EntryId: entryId, EntryETag: entry.$etag, OrderId: orderId, OrderETag: orderETag };
				}
			}
			else if (arguments.length >= 4)
				return { EntryId: entryId, EntryETag: entryETag, Scope: scope || "", OrderId: orderId, OrderETag: orderETag };

			throw new Error("Invalid entry key arguments");
		},

		// Get Entry
		getEntry: function getEntry(entryKey, token, callback, alwaysExecuteCallback, bypassCache) {
			// Phase 1: Memory Cache

			// Check the memory cache
			var entry = formTypes[entryKey.EntryId.substring(0, entryKey.EntryId.indexOf("-"))].meta.get(entryKey.EntryId);

			// Immediately return if no callback was provided
			if (!callback)
				return entry;

			// Entry found in memory cache
			if (!bypassCache && entry) {

				// Return the entry if the etag matches
				if (entry.$etag == entryKey.EntryETag) {

					// Always execute the callback, even when the entry is cached, unless overriden in the call to getEntry
					if (alwaysExecuteCallback == undefined || alwaysExecuteCallback)
						callback(entry);

					return entry;
				}

				// Otherwise, reset the cache and load the correct version
				else
					db.resetEntry(entryKey.EntryId);
			}
			else if (entry)
				db.resetEntry(entryKey.EntryId);

			// Phase 2: Batch Loading

			// Get or create a new batch for the current token
			var batch = batches[token];
			if (!batch) {
				batches[token] = batch = {};
				batch.form = entryKey.EntryId.substring(0, entryKey.EntryId.indexOf("-"));
				batch.token = token;

				if (!token)
					throw new Error("Invalid View Token");

				// Load the batch once all synchronous calls to getEntry have finished
				window.setTimeout(function loadBatch() {

					// Remove the batch from the cache of pending batches
					delete batches[token];

					// Load the batch from Indexed DB, if supported
					if (db.database.isSupported)
						loadEntryBatchFromIndexedDB(batch, loadEntryBatchFromServer);

					// Otherwise, directly load the batch from the server
					else
						loadEntryBatchFromServer(batch);

					if (db.loadBatchHandler && typeof db.loadBatchHandler === 'function')
						db.loadBatchHandler(batch);
				});
			}

			// Add the entry to the batch, while consolidating duplicate requests
			var key = batch[entryKey.EntryId];
			if (key)
				key.callbacks.push(callback);
			else {
				batch[entryKey.EntryId] = entryKey;
				entryKey.callbacks = [callback];
			}
		},

		flushMemoryCache: function flushMemoryCache(id) {
			// Unregister the entry from the client memory cache
			var form = id.substring(0, id.indexOf("-"));
			var type = Cognito.dynamicTypes["Cognito.Forms.FormEntry"].Types[form].meta;
			var entry = type.get(id);
			if (entry) {
				for (var t = type; t; t = t.baseType) {
					delete t._pool[id];
					if (t._known)
						t._known.remove(entry);
				}

				if (entry.get_Order) {
					var order = entry.get_Order();
					if (order) {
						var orderType = Cognito.Payment.Order.meta;
						delete orderType._pool[order.meta.id.toLowerCase()];
						if (orderType._known)
							orderType._known.remove(order);
					}
				}
			}
		},

		// Clears the entry cache for the specified entry
		resetEntry: function resetEntry(id, callback) {

			this.flushMemoryCache(id);

			// Then remove the entry from the client database cache
			deleteEntity("FormEntry", id, callback);
		},

		// Loads lookups for the specified entry
		loadLookups: function loadEntryLookups(entry, callback) {
			loadLookups([{ entry: entry }], callback);
		},

		// Removes the client database cache
		cleanup: function cleanup(error) {
			window.setTimeout(function () {
				try {
					db.database.isSupported = false;
					ExoWeb.logError(error);
					console.log("Disabled client caching due to error: " + error);
					window.indexedDB.deleteDatabase("Cognito.Forms." + Cognito.config.organizationCode);
				}
				catch (e) {
					ExoWeb.logError(e);
				}
			});
		}
	};

	Cognito.Forms.db = db;

	//#endregion

	//#region Entry Set

	function createEntrySet(set, view, scope, token, shortUserId, roleId) {

		// Store the entry set form, view and token
		set.form = view.split("-")[0];
		set.view = view;
		set.scope = scope;
		set.token = token;
		set.shortUserId = shortUserId;
		set.roleId = roleId;

		// Add instance functions
		set.sortArray = set.sort;
		set.sortCriteria = defaultSort;
		set.sort = sortEntrySet;
		set.filter = filterEntrySet;
		set.refresh = refreshEntrySet;
		set.poll = pollEntry;
		set.load = loadEntrySet;
		set.rebuildIndex = rebuildEntryIndex;
		set.getEntry = getEntry;
		set.getEntryKey = getEntryKey;

		return set;
	}

	function consolidateIndex(indexes, entrySet, callback, preventTimestampUpdate) {
		// Deserialize the entry set changes
		var changes = indexes;
		var deleted;
		var timestamp = entrySet.timestamp || "";

		// Get or create the index for the current entry set
		var index = entrySet.index;
		if (!index) {
			if (changes.length && (changes[0].get_Type() == "Checkpoint" || changes[0].get_Type() == "Flush"))
				entrySet.index = index = {};
			else
				index = entrySet.rebuildIndex();
		}

		// Apply changes to the entry set
		for (var i = 0; i < changes.length; i++) {

			var change = changes[i];
			var entryIndex;

			// Track the most recent timestamp unless we explicitly specify not to
			if (change.get_timestamp() > timestamp && !preventTimestampUpdate)
				timestamp = change.get_timestamp();

			// Clear the entry set and start over when a checkpoint is encountered
			if (change.get_Type() == "Checkpoint" || change.get_Type() == "Flush") {
				entrySet.splice(0, entrySet.length);
				entrySet.index = index = {};
			}

			// Add entries to the index that are being added or updated
			else if (change.get_Type() == "Add" || change.get_Type() == "Update") {

				// Decode the sort key
				if (!change.get_sortDecoded()) {
					try {
						change.set_SortKey(atob(change.get_SortKey()));
					} catch (e) {
						if (!atobErrorLogged) {
							var message = "Client-side atob error - error: " + e + ", sortKey: " + change.get_SortKey();
							console.log(message);
							ExoWeb.logError(message);
							atobErrorLogged = true;
						}
					}

					change.set_sortDecoded(true);
				}

				// Update the entry in the set if it already exists
				entryIndex = index[change.get_entryId()];
				if (entryIndex != undefined) {

					// Avoid reloading entries if the correct version is already loaded
					var oldIndex = entrySet[entryIndex];
					if (oldIndex.get_EntryETag() == change.get_EntryETag())
						change.entry = oldIndex.entry;

					// Store the updated entry index
					entrySet[entryIndex] = change;
				}

				// Add the entry to the set at the bottom
				else {
					entrySet.push(change);
					index[change.get_entryId()] = entrySet.length - 1;
				}

				// Update the scope index for scoped sets
				if (entrySet.scope) {
					var entryId = change.get_entryId().split(".")[0];
					var items = index[entryId];
					if (!items)
						index[entryId] = items = [];
					if (items.indexOf(entryId) < 0)
						items.push(change.get_entryId());
				}
			}

			// Remove the entry from the index if deleted
			else if (change.get_Type() == "Delete" && (entryIndex = index[change.get_entryId()]) != undefined) {
				entrySet[entryIndex] = null;
				delete index[change.get_entryId()];
				deleted = true;

				// Remove from the scope index for scoped sets
				if (entrySet.scope) {
					var entryId = change.get_entryId().split(".")[0];
					var items = index[entryId];
					if (items) {
						var i = items.indexOf(5);
						if (i > -1)
							items.splice(i, 1);
					}
				}
			}
		}

		// Remove deleted entry indexes, if any
		if (deleted) {
			entrySet.index = index = {};
			for (var i = 0; i < entrySet.length; i++) {
				var entryIndex = entrySet[i];
				if (entryIndex == null) {
					entrySet.splice(i, 1);
					i--;
				}
				else
					index[entryIndex.get_entryId()] = i;
			}
		}

		// Store the latest entry set timestamp
		entrySet.timestamp = timestamp;

		// Cache the entry set
		storeEntity("FormEntryIndex", { Id: entrySet.view, timestamp: timestamp, entries: Cognito.serialize(entrySet) }, entrySet.shortUserId, entrySet.roleId);

		// Sort the entry set, if currently sorted
		if (entrySet.sortCriteria) {
			entrySet.sort(function () {

				// Rebuild the index
				entrySet.rebuildIndex();

				// Finalize the refresh
				refreshComplete(entrySet, callback);
			});
		}

		// Otherwise, finalize the refresh
		else
			refreshComplete(entrySet, callback);
	}

	// Finalize the refresh

	function refreshComplete(entrySet, callback) {

		// Mark the entry set as refreshed
		entrySet.refreshing = false;

		// Invoke the refresh callback
		callback(entrySet);

		// Perform additional refreshes initiated during the current refresh
		if (entrySet.refreshCallbacks) {
			var refreshCallbacks = entrySet.refreshCallbacks;
			entrySet.refreshCallbacks = null;
			entrySet.refresh(function (set) {
				for (var c = 0; c < refreshCallbacks.length; c++)
					refreshCallbacks[c](set);
			});
		}
	}

	// Get Entry Set Index(es) from the server
	function getEntrySetIndex(onSuccess, entrySet, callback, progressCallback) {
		let endpoint = "forms/" + Cognito.config.mode + "/" + entrySet.form + "/entries/index/" + entrySet.token + "?";

		if (entrySet.shortUserId && entrySet.roleId >= 0)
			endpoint += "roleId=" + entrySet.roleId + "&";

		Cognito.serviceRequest({
			endpoint: endpoint + (entrySet.timestamp ? "timestamp=" + encodeURIComponent(entrySet.timestamp) : ""),
			method: "GET",
			passive: true,
			success: function (data) { return onSuccess(data, entrySet, callback, progressCallback) }
		});
	}

	function getSpecificEntryIndex(onSuccess, entrySet, entryId, callback) {
		let endpoint = "forms/" + Cognito.config.mode + "/" + entrySet.form + "/entries/index/" + entryId + "/" + entrySet.token + "?";

		if (entrySet.shortUserId && entrySet.roleId >= 0)
			endpoint += "roleId=" + entrySet.roleId + "&";

		Cognito.serviceRequest({
			endpoint: endpoint + (entrySet.timestamp ? "timestamp=" + encodeURIComponent(entrySet.timestamp) : ""),
			method: "GET",
			passive: true,
			success: function (data) { return onSuccess(data, entrySet, callback) }
		});
	}

	// Poll for Entry Changes
	function pollEntry(entryId, callback, progressCallback) {
		let entrySet = this;

		// Load from the client cache if the entry set has not been loaded
		if (!entrySet.timestamp) {
			getEntity("FormEntryIndex", entrySet.view, entrySet.shortUserId, entrySet.roleId, function (index) {

				// Deserialize the cached entry set
				if (index) {
					entrySet.clear();
					entrySet.timestamp = index.timestamp;
					entrySet.push.apply(entrySet, Cognito.deserialize(Cognito.Forms.FormEntryIndex, index.entries));
				}

				// Entry set not cached, so set the timestamp to min value and allow normal loading to proceed
				else {
					entrySet.timestamp = "0000-01-01T00:00:00.0000000+00:00";
				}

				// Call refresh again to initiate a server refresh
				entrySet.poll(entryId, callback, progressCallback);
			});
			return;
		}

		// Avoid refreshing an entry set that is already refreshing
		if (entrySet.refreshing) {
			if (!entrySet.refreshCallbacks)
				entrySet.refreshCallbacks = [];
			entrySet.refreshCallbacks.push(callback);
			return;
		}
		else
			entrySet.refreshing = true;

		// Refresh filtered entry sets by reapplying the filter to the original entry set
		if (entrySet.originalEntrySet) {
			entrySet.originalEntrySet.sortCriteria = entrySet.sortCriteria;
			// we know there's changes, so we'll want to callback here instead of refreshEntrySet
			getFilteredEntrySet(entrySet.originalEntrySet, entrySet, entrySet.filterCriteria, function () { return refreshComplete(entrySet, callback) }, entryId);
			return;
		}

		let pollCount = 0;
		const delay = 1000;
		function pollEntryIndex() {
			getSpecificEntryIndex(function (data, entrySet, callback) {
				if (data) {
					let index = Cognito.deserialize(Cognito.Forms.FormEntryIndex, data);
					consolidateIndex([index], entrySet, callback, true);
				}
				else {
					pollCount++;
					if (pollCount > 4) {
						entrySet.refreshing = false;
						callback(entrySet);
						return;
					}
					setTimeout(pollEntryIndex, delay);
				}
			}, entrySet, entryId, callback);
		}

		pollEntryIndex();
	}

	// Refresh Entry Set
	function refreshEntrySet(callback, progressCallback) {

		// Convert instance reference to local variable
		var entrySet = this;

		// Load from the client cache if the entry set has not been loaded
		if (!entrySet.timestamp) {
			getEntity("FormEntryIndex", entrySet.view, entrySet.shortUserId, entrySet.roleId, function (index) {

				// Deserialize the cached entry set
				if (index) {
					entrySet.clear();
					entrySet.timestamp = index.timestamp;
					entrySet.push.apply(entrySet, Cognito.deserialize(Cognito.Forms.FormEntryIndex, index.entries));
				}

				// Entry set not cached, so set the timestamp to min value and allow normal loading to proceed
				else {
					entrySet.timestamp = "0000-01-01T00:00:00.0000000+00:00";
				}

				// Call refresh again to initiate a server refresh
				entrySet.refresh(callback, progressCallback);
			});
			return;
		}

		// Avoid refreshing an entry set that is already refreshing
		if (entrySet.refreshing) {
			if (!entrySet.refreshCallbacks)
				entrySet.refreshCallbacks = [];
			entrySet.refreshCallbacks.push(callback);
			return;
		}
		else
			entrySet.refreshing = true;

		// Refresh filtered entry sets by reapplying the filter to the original entry set
		if (entrySet.originalEntrySet) {
			entrySet.originalEntrySet.sortCriteria = entrySet.sortCriteria;
			// it's not certain that there are changes, so we'll callback to here even if cosmos/assigned entry views is on
			getFilteredEntrySet(entrySet.originalEntrySet, entrySet, entrySet.filterCriteria, function () { return refreshComplete(entrySet, callback) });
			return;
		}

		function pollBuilding(delay) {
			getEntrySetIndex(function (data, entrySet, callback, progressCallback) {
				const lck = data.filter(function (idx) { return idx.Type === "Lock" })[0];
				if (lck) {
					if (progressCallback)
						progressCallback(lck.PercentDone * 100, delay);
					let newDelay = delay * 2 > 10000 ? 10000 : delay * 2;

					// If cosmos indexes are enabled and this is a checkpoint lock, poll faster
					if (Cognito.config.flags.UseCosmosIndexes && lck.Id)
						delay = 1000;

					setTimeout(pollBuilding, delay, newDelay);
				} else {
					let indexes = Cognito.deserialize(Cognito.Forms.FormEntryIndex, data);
					if (progressCallback)
						progressCallback(100, -500);
					var requests = [];
					var requestedIndexes = {};

					let batches = [];
					let lastCheckpoint = 0;
					for (var i = 0; i < indexes.length; i++) {
						let index = indexes[i];

						// Only request batches after the most recent checkpoint
						if (index.get_Type() == "Checkpoint") {
							batches = [];
							lastCheckpoint = i;
						}

						if (index.get_Batch())
							batches.push(index);
					}

					if (lastCheckpoint)
						indexes = indexes.slice(lastCheckpoint);

					for (var i = 0; i < batches.length; i++) {
						let index = batches[i];
						requests.push(
							$.ajax({
								url: index.get_Batch().get_StorageUrl(),
								success: function (data) {
									if (typeof (data) === "string")
										data = JSON.parse(data);
									requestedIndexes[this.index] = Cognito.deserialize(Cognito.Forms.FormEntryIndex, data);
								},
								index: i
							}));
					}

					if (requests.length) {
						// When each of the requests to load checkpoints/entry batches complete, place the results after their respective checkpoint/batch index in indexes
						$.when.apply($, requests).then(function () {
							var newIndexes = [];
							let j = requests.length - 1;
							for (let i = indexes.length - 1; i >= 0; i--) {
								if (indexes[i].get_Batch() && indexes[i].get_Batch().get_StorageUrl()) {
									Array.prototype.splice.apply(indexes, [i + 1, 0].concat(requestedIndexes[j]));
									j--;
								}
							}

							// get the entry set
							consolidateIndex(indexes, entrySet, callback);
						});
					}
					else
						consolidateIndex(indexes, entrySet, callback);
				}
			}, entrySet, callback, progressCallback);
		}

		pollBuilding(100);
	}


	// Loads all of the entries in the set before raising the callback
	function loadEntrySet(callback) {

		// Convert instance reference to local variable
		var entrySet = this;

		// Load all entries in the set
		for (var i = 0; i < entrySet.length; i++)
			entrySet.getEntry(i);

		// Defer raising the callback until batch loading is complete
		var batch = batches[entrySet.token];
		if (batch)
			batch.callback = function () { callback(entrySet); };
		else
			callback(entrySet);
	}

	// Rebuild Entry Index
	// Creates an id -> index hash lookup, entrySet.index[entry id] = row #
	// When scopes are involved, entrySet.index[entry scope id] = row # and entrySet.index[entry id] = array of entry scope ids
	function rebuildEntryIndex() {

		// Convert instance reference to local variable
		var entrySet = this;

		var index = {};

		// Build child scope indexes
		if (entrySet.scope) {
			for (var i = 0; i < entrySet.length; i++) {
				var id = entrySet[i].get_entryId();
				var entryId = id.split(".")[0];
				index[id] = i;
				var items = index[entryId];
				if (!items)
					index[entryId] = items = [];
				items.push(id);
			}
		}

		// Just build form level indexes
		else {
			for (var i = 0; i < entrySet.length; i++)
				index[entrySet[i].get_entryId()] = i;
		}

		entrySet.index = index;
		return index;
	}

	// Get Entry
	function getEntry(index, callback, alwaysExecuteCallback) {

		// Convert instance reference to local variable
		var entrySet = this;

		// Get the entry index
		var entryIndex = entrySet[index];
		if (!entryIndex) {
			if (callback && (alwaysExecuteCallback || alwaysExecuteCallback == undefined))
				callback(null);
			return null;
		}

		// Return the entry immediately if already cached
		if (entryIndex.entry) {
			if (callback && (alwaysExecuteCallback || alwaysExecuteCallback == undefined))
				callback(entryIndex.entry);
			return entryIndex.entry;
		}

		// Avoid loading the entry if it is already being loaded
		if (entryIndex.loading)
			return null;

		// Flag the entry as loading
		entryIndex.loading = true;

		// Child scope
		if (entrySet.scope) {

			// Load the entry
			var entry = db.getEntry(db.getEntryKey(entryIndex), entrySet.token, function (entry) {
				var items = getEntryItems(entry, entrySet.scope);
				entryIndex.entry = items[entryIndex.get_entryId()];
				entryIndex.loading = false;
				if (callback)
					callback(entryIndex.entry);
			}, alwaysExecuteCallback);

			if (entry && !entryIndex.entry) {
				var items = getEntryItems(entry, entrySet.scope);
				entryIndex.entry = items[entryIndex.get_entryId()];
			}
		}

		// Form level
		else {
			var entry = db.getEntry(db.getEntryKey(entryIndex), entrySet.token, function (entry) { entryIndex.entry = [entry]; entryIndex.loading = false; if (callback) callback(entryIndex.entry); }, alwaysExecuteCallback);
			if (entry)
				entryIndex.entry = [entry];
		}

		return entryIndex.entry;
	}

	// Get Entry Key
	function getEntryKey(index) {
		return db.getEntryKey(this[index]);
	}

	// Load Entry Batch from Indexed DB
	function loadEntryBatchFromIndexedDB(batch, callback) {

		// Phase 3: Indexed DB

		// Track the number of pending get requests
		var requests = 0;

		// Start a database transaction
		var store;

		try {
			store = db.database.transaction("FormEntry").objectStore("FormEntry");
		}
		catch (e) {
			db.cleanup(e);
			callback(batch);
			return;
		}

		function processEntry(entryData, entryKey) {

			// If found, deserialize, track as loaded, and remove from batch
			if (entryData && entryData.$etag == entryKey.EntryETag) {

				// Set current user before entry is deserialized
				if (entryData.Entry)
					entryData.Entry.User = Cognito.config.userInfo;

				entryKey.entry = Cognito.deserialize(Cognito.Forms.FormEntry, entryData);
				entryKey.entryJson = entryData;
				loaded.push(entryKey);
				delete batch[entryKey.EntryId];
			}

			// Decrement the number of pending get requests
			requests--;

			// When all get requests have completed, raise entry-specific callbacks, and then raise the batch load callback
			if (requests == 0) {

				// Ensure child lookup values are loaded before raising load callbacks
				loadLookups(loaded, function () {

					// Raise entry-specific load callbacks
					for (var i = 0; i < loaded.length; i++) {
						var key = loaded[i];
						var entry = key.entry;
						var entryJson = key.entryJson;
						delete key.entryJson;
						//delete key.entry;

						if (key.callbacks) {
							for (var c = 0; c < key.callbacks.length; c++)
								key.callbacks[c](entry, entryJson);
							delete key.callbacks;
						}
					}

					// Raise the batch callback
					callback(batch);
				});
			}
		}

		function loadEntry(entryKey) {
			try {
				var getEntry = store.get(entryKey.EntryId);
				getEntry.onsuccess = function (event) {
					var entry = event.target.result;
					if (entry && entry.Data && entry.IV) {
						if (db.database.encryptionKey)
							decrypt(entry, function (entry) { processEntry(entry, entryKey); });
						else
							processEntry(null, entryKey);
					}
					else
						processEntry(entry, entryKey);
				};
				getEntry.onerror = function (event) { processEntry(null, entryKey); };
			}
			catch (e) {
				db.cleanup(e);
				processEntry(null, entryKey);
			}
		}

		// Iterate over the set of entries to load
		var loaded = [];
		for (var id in batch) {
			var entryKey = batch[id];
			if (!entryKey.EntryId)
				continue;

			// Increment the number of pending get requests
			requests++;

			// Attempt to get the entry from the client database cache
			loadEntry(entryKey);
		}
	}

	// Load Entry Batch from Server
	function loadEntryBatchFromServer(batch) {

		// Phase 4: Server Batch Loading

		// Track the number of pending batch load requests
		var requests = 0;

		var batchSize = 100;
		var concurrentBatches = 3;

		// Loads a batch of entries from the server
		function loadEntryBatch(keys, resolve, reject) {
			// Copy the keys without entry or callback to avoid circular references
			keys = keys.map(function (k) {
				return {
					EntryEtag: k.EntryETag,
					EntryId: k.EntryId,
					OrderETag: k.OrderETag,
					OrderId: k.OrderId,
					Scope: k.Scope
				};
			});

			// Load the entries as a batch
			Cognito.serviceRequest({
				endpoint: "/forms/" + Cognito.config.mode + "/entrybatch",
				method: "POST",
				data: { Entries: keys, Token: batch.token },
				success: function (data) {
					// Track the entries loaded by the batch
					var loaded = [];

					// Convert orders into a dictionary
					var orders = {};
					if (data.orders) {
						for (var i = 0; i < data.orders.length; i++) {
							var orderData = data.orders[i];
							orders[orderData.Id] = orderData;
						}
					}

					// Deserialize the entry, link to associated order, and notify request callback
					for (var i = 0; i < data.entries.length; i++) {
						var entryData = data.entries[i];
						var entryKey = batch[entryData.Id];

						// Associate the Order and set current user
						if (entryData.Entry) {
							if (entryData.Entry.Order)
								entryData.Order = orders[entryData.Entry.Order.Id];

							entryData.Entry.User = Cognito.config.userInfo;
						}

						// Update the etag
						entryData.$etag = entryKey.EntryETag;

						// Update the client database cache
						storeEntity("FormEntry", entryData, null, null);

						// Deserialize, track as loaded, and remove from batch
						entryKey.entry = Cognito.deserialize(Cognito.Forms.FormEntry, entryData);
						entryKey.entryJson = entryData;
						loaded.push(entryKey);
						delete batch[entryKey.EntryId];
					}

					// Ensure child lookup values are loaded before raising load callbacks
					loadLookups(loaded, function () {
						// Raise entry-specific load callbacks
						for (var i = 0; i < loaded.length; i++) {
							var key = loaded[i];
							var entry = key.entry;
							var entryJson = key.entryJson;
							delete key.entryJson;
							//delete key.entry;

							if (key.callbacks) {
								for (var c = 0; c < key.callbacks.length; c++)
									key.callbacks[c](entry, entryJson);
								delete key.callbacks;
							}
						}
						resolve();
					});
				},
				error: reject
			});
		}

		var ids = Object.keys(batch);
		function loadNextBatch() {
			requests++;

			function continueLoading() {
				requests--;

				// If any more entries need to be loaded, continue. Otherwise, perform callback if this is the last request to finish
				if (ids.length > 0)
					return loadNextBatch();
				else if (batch.callback && !requests) {
					batch.callback(batch);
					delete batch.callback;
				}
			}
			return new Promise(function (resolve, reject) {
				// Get a batch of entry keys to load
				var idBatch = ids.splice(0, batchSize);
				var keys = [];
				for (var i = 0; i < idBatch.length; i++) {
					var entryKey = batch[idBatch[i]];
					if (!entryKey.EntryId)
						continue;

					// Add the entry key to the batch load request
					keys.push(entryKey);
				}

				// If any entries need to be loaded, send the entrybatch request. Otherwise, resolve this promise
				if (keys.length > 0)
					loadEntryBatch(keys, resolve, reject);
				else
					resolve();
			}).then(continueLoading).catch(function (e) {
				console.warn('Entry batch failed to load', e);
				continueLoading();
			});
		}

		// Kick off the concurrent batch requests
		for (var i = 0; i < concurrentBatches; i++)
			loadNextBatch();
	}

	// Ensures lookups are loaded for the specified entries before raising the callback
	function loadLookups(entries, callback) {

		// Immediately raise the callback if there are no entries to load lookups for
		if (!entries || entries.length == 0) {
			callback();
			return;
		}

		// Track the number of pending get requests
		var requests = 0;

		// Start a database transaction, if supported
		var store;
		if (db.database.isSupported) {
			try {
				store = db.database.transaction("FormEntry").objectStore("FormEntry");
			}
			catch (e) {
				db.cleanup(e);
				callback();
				return;
			}
		}

		// Process entries loaded from IndexedDB
		function processEntry(entryData, lookup) {

			// If found, store the entry JSON
			if (entryData)
				lookup.entryData = entryData;

			// Decrement the number of pending get requests
			requests--;

			// When all get requests have completed, raise entry-specific callbacks, and then raise the batch load callback
			if (requests == 0) {

				// Lookup entries from the server
				loadLookupsFromServer(lookups, function () {

					// Initialize the lookups
					initializeLookups(entries, lookups, callback);
				});
			}
		}

		// Attempt to load an entry from IndexedDB
		function loadEntry(lookup) {
			try {
				var getEntry = store.get(lookup.id);
				getEntry.onsuccess = function (event) {
					var entry = event.target.result;
					if (entry && entry.Data && entry.IV) {
						if (db.database.encryptionKey)
							decrypt(entry, function (entry) { processEntry(entry, lookup); });
						else
							processEntry(null, lookup);
					}
					else
						processEntry(entry, lookup);
				};
				getEntry.onerror = function (event) { processEntry(null, lookup); };
			}
			catch (e) {
				db.cleanup(e);
				processEntry(null, lookup);
			}
		}

		// Track lookup requests
		var lookups = [];

		// Find and load all lookup entries
		for (var i = 0; i < entries.length; i++) {
			// Lookup instances to load
			var entryLookups = entries[i].entry.meta._instancesPendingLoad;
			entries[i].entry.meta._instancesPendingLoad = null;

			// Process lookups
			if (entryLookups) {
				for (var j = 0; j < entryLookups.length; j++) {
					var lookup = entryLookups[j];

					var formType = formTypes[lookup.id.substring(0, lookup.id.indexOf("-"))];

					// The value of the lookup is no longer pointing to a valid form, do not try looking it up
					if (!formType) {
						lookup.entry = null;
						continue;
					}

					lookups.push(lookup);

					// First see if the entry is already loaded
					var entry = formType.meta.get(lookup.id);
					if (entry) {
						lookup.entry = entry;
						continue;
					}

					// Increment the number of pending get requests
					requests++;

					// Attempt to get the entry from the client database cache
					if (db.database.isSupported)
						loadEntry(lookup);
				}
			}
		}

		// Immediately invoke the callback if there are no lookup load requests
		if (requests == 0)
			initializeLookups(entries, lookups, callback);

		// Or load entries from the server if the client database cache is not supported
		else if (!db.database.isSupported) {

			// Lookup entries from the server
			loadLookupsFromServer(lookups, function () {

				// Initialize the lookups
				initializeLookups(entries, lookups, callback);
			});
		}
	}

	function loadLookupsFromServer(lookups, callback) {

		// Convert the array of lookups into a set of batches by lookup token
		var entries = {};
		var tokens = {};
		for (var i = 0; i < lookups.length; i++) {
			var lookup = lookups[i];

			// Skip lookups that have already been loaded, or are no longer valid
			if (lookup.entry || !lookup.property._token)
				continue;

			// Track the lookup token
			tokens[lookup.property._token] = 1;

			// Create the entry key
			var entryKey = { EntryId: lookup.id };
			if (lookup.entryData)
				entryKey.EntryETag = lookup.entryData.$etag;

			// Add the entry key to the batch
			entries[entryKey.EntryId] = entryKey;
		}

		// Convert the batches into the lookup request view model
		var request = { Tokens: Object.keys(tokens), Entries: Object.keys(entries).map(function (k) { return entries[k]; }) };

		// Don't send the request if there is nothing to load
		if (request.Tokens.length) {
			// Load the entries as a batch
			Cognito.serviceRequest({
				endpoint: "/forms/" + Cognito.config.mode + "/entrylookup",
				method: "POST",
				data: request,
				success: function (batch) {

					// Track all of the entries loaded by the batch
					var loaded = {};

					// Convert orders into a dictionary
					var orders = {};
					if (batch.orders) {
						for (var i = 0; i < batch.orders.length; i++) {
							var orderData = batch.orders[i];
							orderData.json.$etag = orderData.etag;
							orders[orderData.json.Id] = orderData.json;
						}
					}

					// Deserialize the entry, link to associated order, and notify request callback
					for (var i = 0; i < batch.entries.length; i++) {
						var entryData = batch.entries[i];

						// Track Missing Entries
						if (!entryData.json) {
							loaded[entryData.id] = null;
							continue;
						}

						// Associate the Order and set current user
						if (entryData.json.Entry && entryData.json.Entry.Order)
							entryData.json.Order = orders[entryData.json.Entry.Order.Id];

						// Update the etag in the entry json
						entryData.json.$etag = entryData.etag;

						// Update the client database cache
						storeEntity("FormEntry", entryData.json, null, null);

						// Deserialize and track as loaded
						var entry = Cognito.deserialize(Cognito.Forms.FormEntry, entryData.json);
						loaded[entry.get_Id()] = entry;
					}

					// Update lookups with loaded entries
					for (var i = 0; i < lookups.length; i++) {
						var lookup = lookups[i];

						// Skip lookups that have already been loaded
						if (lookup.entry)
							continue;

						// See if the entry was loaded
						lookup.entry = loaded[lookup.id];

						// Entry was not returned, so cached version must be valid
						if (lookup.entry === undefined && lookup.entryData)
							lookup.entry = Cognito.deserialize(Cognito.Forms.FormEntry, lookup.entryData);

						// Force missing entries to be treated as null
						if (lookup.entry === undefined)
							lookup.entry = null;
					}

					// Raise the callback to indicate that the lookups have been loaded
					callback();
				}
			});
		}
		else {
			callback();
		}
	}

	function initializeLookups(entries, lookups, callback) {

		// Track the entries recursively loaded as lookups
		var lookupEntries = {};

		// Update the model with lookup entries
		for (var i = 0; i < lookups.length; i++) {
			var lookup = lookups[i];

			// Update list properties
			if (lookup.property.get_isList()) {
				var list = lookup.property.value(lookup.instance);
				if (typeof (list[0]) == "string")
					list.length = 0;
				if (lookup.entry)
					list.push(lookup.entry);
			}

			// Update instance properties
			else
				lookup.instance[lookup.property.get_fieldName()] = lookup.entry;

			// Mark property as initialized
			lookup.instance.meta.pendingInit(lookup.property, false);

			// Track the lookup entry
			if (lookup.entry)
				lookupEntries[lookup.entry.get_Id()] = { EntryId: lookup.entry.get_Id(), entry: lookup.entry };
		}

		// Convert the dictionary of entries into an array
		lookupEntries = Object.keys(lookupEntries).map(function (k) { return lookupEntries[k]; });

		// Recursively load lookups
		loadLookups(lookupEntries, function () {

			// Raise init existing for all lookup entries that have not been initialized
			for (var i = 0; i < entries.length; i++) {
				var entry = entries[i].entry;
				var pendingInstances = entry.meta._instancesPendingInit;
				if (entry && pendingInstances) {
					entry.meta._instancesPendingInit = null;
					pendingInstances.forEach(function (obj) {
						for (var t = obj.meta.type; t; t = t.baseType) {
							var handler = t._getEventHandler("initExisting");
							if (handler)
								handler(obj, {});
						}
					});
				}
			}

			// Raise the callback
			callback();
		});
	}

	// Gets the set of all scope items for the specified entry
	function getEntryItems(entry, scope) {

		// Immediately return the entry for root level scopes
		if (!scope)
			return [[entry]];

		// Immediately return the scoped items if cached
		var items = entry[scope];
		if (items)
			return items;

		// Convert the scope to a property or property chain, caching the result
		var scopePath = entry.meta.type[scope];
		if (!scopePath) {
			entry.meta.type[scope] = scopePath = ExoWeb.Model.Model.property(scope.indexOf('.') < 0 ? scope : scope + ".ItemNumber", Cognito.Forms.entryType);

			// Update properties along the path with scope indexes
			if (scopePath instanceof ExoWeb.Model.PropertyChain) {
				var properties = scopePath.all();
				var scopeIndex = 1;
				for (var p = 0; p < properties.length; p++) {
					var prop = properties[p];
					if (prop.get_isList())
						prop.scopeIndex = scopeIndex++;
				}
				scopePath.lastProp = properties[properties.length - 2];
			}
		}

		// Get the items for single property paths
		if (scopePath instanceof ExoWeb.Model.Property) {
			items = (scopePath.value(entry) || []);
			for (var i = 0; i < items.length; i++) {
				var item = [entry, items[i]];
				item.id = entry.get_Id() + "." + (i + 1).toString();
				items[i] = item;
				items[item.id] = item;
			}
		}

		// Get the items for multi-step property chains
		else if (scopePath instanceof ExoWeb.Model.PropertyChain) {

			// Populate the set of items along the path
			items = [];
			var item = [entry];
			var ids = [];
			scopePath.each(entry, function (obj, index, child, prop, p) {
				prop = scopePath.all()[p - 1];
				if (prop && prop.scopeIndex) {
					item[prop.scopeIndex] = obj;
					ids[prop.scopeIndex - 1] = index + 1;
					if (prop == scopePath.lastProp) {
						var scopeId = ids.join('.');
						var currentItem = item.slice();
						currentItem.id = entry.get_Id() + "." + scopeId;
						items.push(currentItem);
						items[currentItem.id] = currentItem;
					}
				}
			});
		}

		// Cache and return the items
		entry[scope] = items;
		return items;
	}

	//#endregion

	//#region Sorting

	// Default sorting by server-side sort key
	function defaultSort(a, b) {
		var ak = a.get_SortKey();
		var bk = b.get_SortKey();
		return ak == bk ? 0 : ak < bk ? -1 : 1;
	}

	// Mark the default sort function to make it easy to determine when default sorting applies
	defaultSort.isDefault = true;

	// Sorts the entry set using the specified (optional) criteria and invokes the callback when complete
	function sortEntrySet(criteria, callback) {

		// Convert instance reference to local variable
		var entrySet = this;

		// Handle optional criteria argument
		if (!callback) {
			callback = criteria;
			criteria = entrySet.sortCriteria;
		}

		// Store the criteria for future use
		entrySet.sortCriteria = criteria;

		// Immediately sort if using the server sort key
		if (criteria.isDefault) {
			entrySet.sortArray(defaultSort);
			entrySet.rebuildIndex();
			callback(entrySet);
		}

		// Otherwise, sort asynchonously if using client-side sort criteria
		else
			entrySet.load(function sortAsync() {
				entrySet.sortArray(function (a, b) { return criteria(a.entry, b.entry); });
				entrySet.rebuildIndex();
				callback(entrySet);
			})
	}

	//#endregion

	//#region Filtering

	// Returns an entry set that represents a filtered subset of the specified entry set
	function filterEntrySet(filter, scope, callback) {

		// Convert instance reference to local variable
		var entrySet = this;

		var filteredEntrySet = createEntrySet([], entrySet.view, scope, entrySet.token, entrySet.shortUserId, entrySet.roleId);
		filteredEntrySet.timestamp = entrySet.timestamp;
		filteredEntrySet.sortCriteria = entrySet.sortCriteria;
		filteredEntrySet.scope = scope;

		// First, see if the filter is an entry view filter
		if (filter.meta && filter.meta.type.get_fullName() == "Cognito.Forms.EntryViewFilter") {

			// If so, convert the filter into a function before getting the filtered set
			getFilterFunction(filter, function (filterFn) {
				getFilteredEntrySet(entrySet, filteredEntrySet, filterFn, callback);
			});
		}

		// Otherwise, assume the filter is a filter function and immediately get the filtered set
		else
			getFilteredEntrySet(entrySet, filteredEntrySet, filter, callback);
	}

	// Returns an entry set that represents a filtered subset of the specified entry set
	function getFilteredEntrySet(originalEntrySet, filteredEntrySet, filter, callback, entryId) {

		// Avoid filtering an entry set that is already filtering
		if (originalEntrySet.filtering) {
			if (!originalEntrySet.filterCallbacks)
				originalEntrySet.filterCallbacks = [];

			originalEntrySet.filterCallbacks.push(function () { getFilteredEntrySet(originalEntrySet, filteredEntrySet, filter, callback); });

			return;
		}
		else
			originalEntrySet.filtering = true;

		// Store and clear the original sort criteria to avoid sorting the original entry set before applying the filter
		var sortCriteria = originalEntrySet.sortCriteria;
		originalEntrySet.sortCriteria = null;

		let filterEntries = function () {
			originalEntrySet.load(function () {

				filteredEntrySet.clear();
				filteredEntrySet.filterCriteria = filter;
				filteredEntrySet.originalEntrySet = originalEntrySet;

				// Form-level scope
				if (!filteredEntrySet.scope) {

					// Add entries that match the filter
					for (var i = 0; i < originalEntrySet.length; i++) {
						var entry = originalEntrySet.getEntry(i);
						if (entry && entry[0] && entry[0].meta && filter.call(entry[0]))
							filteredEntrySet.push(originalEntrySet[i]);
					}
				}

				// Child scope
				else {

					// Add entries that match the filter
					for (var i = 0; i < originalEntrySet.length; i++) {
						var entry = originalEntrySet.getEntry(i);
						if (entry && entry[0] && entry[0].meta) {
							var entryIndex = originalEntrySet[i];
							var items = getEntryItems(entry[0], filteredEntrySet.scope);
							for (var j = 0; j < items.length; j++) {
								var item = items[j];
								if (filter.call(item[item.length - 1])) {
									var itemIndex = new Cognito.Forms.FormEntryIndex({ Id: entryIndex.get_Id().substring(0, entryIndex.get_Id().lastIndexOf("|")) + "." + item.id, EntryETag: entryIndex.get_EntryETag(), OrderId: entryIndex.get_OrderId(), OrderETag: entryIndex.get_OrderETag() });
									itemIndex.entry = item;
									filteredEntrySet.push(itemIndex);
								}
							}
						}
					}
				}

				// Sort the filtered set
				filteredEntrySet.sortArray(function (a, b) { return sortCriteria(a.entry, b.entry); });
				filteredEntrySet.rebuildIndex();

				// Restore the sort criteria for the original entry set
				originalEntrySet.sortCriteria = sortCriteria;

				// Mark the entry set as filtered
				originalEntrySet.filtering = false;

				// Invoke the filter callback
				callback(filteredEntrySet);

				// Perform additional filters initiated during the current filter
				if (originalEntrySet.filterCallbacks) {
					var pendingFilter = originalEntrySet.pendingFilter;
					var filterCallbacks = originalEntrySet.filterCallbacks;
					originalEntrySet.filterCallbacks = null;
					for (var c = 0; c < filterCallbacks.length; c++)
						filterCallbacks[c]();
				}
			});
		};

		if (Cognito.config.flags.UseCosmosIndexes && entryId != undefined) {
			originalEntrySet.poll(entryId, filterEntries);

		}
		else
			originalEntrySet.refresh(filterEntries);
	}

	// Gets a Javascript function that can be used to filter entries on the client
	function getFilterFunction(filter, callback) {

		// Keyword Filter
		var keywordFn;
		if (filter.get_Keyword()) {
			var keywordRegex = /"(.+?)"|(\S+)/g;
			var keywords = [];
			while ((keyword = keywordRegex.exec(filter.get_Keyword())) !== null)
				keywords.push((keyword[1] || keyword[2]).toLowerCase());

			keywordFn = function () {
				for (var k = 0; k < keywords.length; k++)
					if (!matchesKeyword(this, keywords[k]))
						return false;
				return true;
			}
		}

		// Custom Filter
		if (filter.get_Expression()) {
			Cognito.Forms.getEntryViewFilter(Cognito.Forms.model.formId, filter, function (fn) {
				for (var name in fn.Exports)
					Cognito.Forms.entryType.meta.addExport(name, fn.Exports[name]);
				var filterExpresion = Cognito.Forms.entryType.meta.compileExpression(fn.Body);
				var customFilter = function () { try { return filterExpresion.call(this); } catch (e) { } return false; };
				if (keywordFn)
					callback(function () { return customFilter.call(this) && keywordFn.call(this); });
				else
					callback(customFilter);
			});
			return;
		}

		// Entry/Payment Status Filter
		var statusFn;
		if (filter.get_EntryStatus().length > 0 || filter.get_PaymentStatus().length > 0) {

			var entryStatus = filter.get_EntryStatus().length > 0 ? filter.get_EntryStatus() : null;
			var paymentStatus = filter.get_PaymentStatus().length > 0 ? filter.get_PaymentStatus() : null;

			// If an entry status filter is present, map status id filters to status names if necessary
			if (entryStatus && Cognito.Forms.EntryStatuses && Cognito.Forms.EntryStatuses[Cognito.Forms.model.entryTypeName] && Cognito.Forms.EntryStatuses[Cognito.Forms.model.entryTypeName].length) {
				var entryStatuses = Cognito.Forms.EntryStatuses[Cognito.Forms.model.entryTypeName];

				entryStatus = entryStatus.map(function (statusId) {
					if (isNaN(statusId))
						return statusId;

					return Cognito.Forms.getEntryStatusById(entryStatuses, statusId).Name;
				});
			}

			statusFn = function () {
				var form = this.get_ItemNumber ? this.get_Form() : this;
				return (!entryStatus || entryStatus.indexOf(form.get_Entry().get_Status()) > -1) && (!paymentStatus || (form.get_Order() && paymentStatus.indexOf(form.get_Order().get_PaymentStatus().get_Name()) > -1));
			};
		}

		// Combine keyword and status filter functions, as appropriate
		if (keywordFn && statusFn)
			callback(function () { return statusFn.call(this) && keywordFn.call(this); });
		else if (keywordFn)
			callback(keywordFn);
		else if (statusFn)
			callback(statusFn);
		else
			callback(function () { return true; });
	}

	// Determines whether the entity contains the specified keyword
	function matchesKeyword(entity, keyword, visited) {
		if (!visited)
			visited = [];

		if (entity == null || entity instanceof Cognito.Forms.FormRef || entity instanceof Cognito.Forms.EntryMeta || !entity.meta)
			return false;

		// Push the entity onto the stack to prevent recursive visitation of the same entity
		visited.push(entity);

		// Search all instance properties of the entity
		var properties = entity.meta.type.get_instanceProperties();
		for (var p in properties) {
			// exlculdes all pseudo properties: p.indexOf('_') > 0
			if (!properties.hasOwnProperty(p) || p == "Form" || p == "ParentSection" || p == "Id" || p.indexOf('_') > 0)
				continue;

			var property = properties[p];

			if (property._internal)
				continue;

			var value = property.value(entity);
			if (value != null) {

				// Perform a case-insensitive search of value properties
				if (property.get_isValueType()) {

					if (value.toString().toLowerCase().indexOf(keyword) > -1)
						return true;
				}
				// Recursively search child entities and entity lists that we have not already visited
				else {
					if (value instanceof Array) {
						for (var i = 0; i < value.length; i++) {
							if (visited.indexOf(value[i]) === -1 && matchesKeyword(value[i], keyword, visited))
								return true;
						}
					}
					else if (visited.indexOf(value) === -1 && matchesKeyword(value, keyword, visited))
						return true;
				}
			}
		}

		return false;
	}
	//#endregion

	//#region Indexed DB

	// Gets an entity from Indexed DB, if availale
	function getEntity(type, id, shortUserId, roleId, callback) {

		// Just return null if Indexed DB is not supported
		if (!db.database.isSupported) {
			if (callback)
				callback(null);
			return;
		}

		try {
			 if (shortUserId)
				id += "|" + shortUserId + "|" + roleId;

			// Otherwise, attempt to load the entity
			var get = db.database.transaction(type).objectStore(type).get(id);

			get.onsuccess = function (event) {
				var entity = event.target.result;
				if (entity && entity.Data && entity.IV) {
					if (db.database.encryptionKey)
						decrypt(entity, callback);
					else
						callback(null);
				}
				else
					callback(entity);
			};

			get.onerror = function () { callback(null); };
		}
		catch (e) {
			db.cleanup(e);
			callback(null);
		}
	}

	// Stores an entity in Indexed DB, if available
	function storeEntity(type, entity, shortUserId, roleId, callback) {

		// Abort if Indexed DB is not supported
		if (!db.database.isSupported) {
			if (callback)
				callback();
			return;
		}

		try {
			if (shortUserId)
				entity.Id += "|" + shortUserId + "|" + roleId;

			// Attempt to store the entity
			if (db.database.encryptionKey)
				encrypt(entity, function (encrypted) {
					if (!encrypted && callback)
						callback();
					var put = db.database.transaction(type, "readwrite").objectStore(type).put(encrypted);
					put.onsuccess = callback;
					put.onerror = callback;
				});
			else {
				var put = db.database.transaction(type, "readwrite").objectStore(type).put(entity);
				put.onsuccess = callback;
				put.onerror = callback;
			}
		}
		catch (e) {
			db.cleanup(e);
			if (callback)
				callback();
		}
	}

	// Deletes an entity from Indexed DB, if available
	function deleteEntity(type, id, callback) {

		// Abort if Indexed DB is not supported
		if (!db.database.isSupported) {
			if (callback)
				callback();
			return;
		}

		try {

			// Attempt to store the entity
			db.database.transaction(type, "readwrite").objectStore(type).delete(id).onsuccess = callback;
		}
		catch (e) {
			db.database.isSupported = false;
			if (callback)
				callback();
		}
	}

	//#endregion

	//#region Encryption

	// Encrypts the specified entity
	function encrypt(entity, callback) {
		try {
			var iv = crypto.getRandomValues(new Uint8Array(12));
			var alg = { name: 'AES-GCM', iv: iv, additionalData: db.database.encryptionKey, tagLength: 128 };
			getCryptoKey(entity.Id.split("-")[0], function (key) {
				crypto.subtle.encrypt(alg, key, encode(JSON.stringify(entity))).then(function (buffer) {
					callback({ Id: entity.Id, Data: buffer, IV: iv });
				})
					.catch(function (e) {
						callback(null);
					});
			});
		}
		catch (e) {
			callback(null);
		}
	}

	// Decrypts the specified encrypted entity
	function decrypt(encrypted, callback) {
		try {
			var alg = { name: 'AES-GCM', iv: encrypted.IV, additionalData: db.database.encryptionKey, tagLength: 128 };
			getCryptoKey(encrypted.Id.split("-")[0], function (key) {
				crypto.subtle.decrypt(alg, key, encrypted.Data).then(function (buffer) {
					callback(JSON.parse(decode(buffer)));
				})
					.catch(function (e) {
						callback(null);
					});
			});
		}
		catch (e) {
			callback(null);
		}
	}

	// Gets or creates a crypto key for the specified form
	var encryptionKeys = {};
	function getCryptoKey(form, callback) {
		try {

			// See if the key has already been loaded
			var key = encryptionKeys[form];
			if (key)
				callback(key);

			// Otherwise, attempt to load the entity
			else {
				db.database.transaction("FormKey").objectStore("FormKey").get(form).onsuccess = function (event) {
					var entity = event.target.result;

					// Key found in database cache
					if (entity) {
						encryptionKeys[form] = entity.Key;
						callback(entity.Key);
					}

					// Create and cache a new encryption key
					else {
						window.crypto.subtle.generateKey({ name: "AES-GCM", length: 256 }, false, ["encrypt", "decrypt"]).then(function (key) {
							db.database.transaction("FormKey", "readwrite").objectStore("FormKey").put({ Form: form, Key: key }).onsuccess = function () {
								encryptionKeys[form];
								callback(key);
							};
						})
							.catch(function (e) {
								callback(null);
							});
					}
				};
			}
		}
		catch (e) {
			callback(null);
		}
	}

	// Encodes a Unicode string and returns a binary array
	function encode(s) {
		if (window.TextEncoder)
			return new TextEncoder().encode(s);
		var encoded = encodeURIComponent(s);
		var binary = encoded.replace(/%([0-9A-F]{2})/g, function (match, p1) {
			return String.fromCharCode('0x' + p1);
		});
		var data = new Uint8Array(binary.length);
		Array.prototype.forEach.call(binary, function (ch, i) {
			data[i] = ch.charCodeAt(0);
		});
		return data;
	};

	//  Decodes a binary array and returns a Unicode string
	function decode(data) {
		if (window.TextDecoder)
			return new TextDecoder().decode(data);
		if (data instanceof ArrayBuffer)
			data = new Uint8Array(data);
		var binary = Array.prototype.map.call(data, function (ch) {
			return String.fromCharCode(ch);
		}).join('');
		var encoded = binary.replace(/(.)/g, function (m, p) {
			var code = p.charCodeAt(0).toString(16).toUpperCase();
			if (code.length < 2) {
				code = '0' + code;
			}
			return '%' + code;
		});
		return decodeURIComponent(encoded);
	};

	//#endregion

	//#region Type Extensions

	Cognito.Forms.getEntryStatusById = function getEntryStatusById(statuses, statusId) {
		// If a model list is provided, serialize to plain objects
		if (statuses.length && statuses[0].meta)
			statuses = Cognito.serialize(statuses);
		return statuses.filter(function (s) { return s.Id === Number(statusId); })[0];
	}

	$extend("Cognito.Forms.FormEntryIndex", function (type) {

		// Entry Id
		type.meta.addProperty({ name: "entryId", type: String }).calculated({
			calculate: function () {
				return this.get_Id().substr(this.get_Id().lastIndexOf("|") + 1);
			}
		});

		// Timestamp
		type.meta.addProperty({ name: "timestamp", type: String }).calculated({
			calculate: function () {
				return this.get_Id().split("|")[1];
			}
		});

		type.meta.addProperty({ name: "sortDecoded", type: Boolean });
	});

	// This rule is only relevant for the entries page, since status id mapping is handled by form code on the public form
	$extend("Cognito.Forms.FormEntry", function (type) {
		type.meta.addRule({
			onInitExisting: true,
			execute: function (sender) {
				var statuses = Cognito.Forms.EntryStatuses ? Cognito.Forms.EntryStatuses[sender.meta.type.get_fullName()] : null;
				if (Array.isArray(statuses)) {
					var entryMeta = sender.get("Entry");
					var statusName = entryMeta.get("Status");
					var status = null;

					function getActiveEntryStatus(statuses, statusIdOrName) {
						var status = statuses.filter(function (s) { return s.Id === Number(statusIdOrName) || s.Name === statusIdOrName })[0];
						if (status == null || status.ReplacementId == null)
							return status
						else
							return getActiveEntryStatus(statuses, status.ReplacementId);
					}

					if (statusName !== null && statusName !== undefined)
						status = getActiveEntryStatus(statuses, statusName);

					var isEntryIncomplete = !entryMeta.get("DateSubmitted");
					// If the status list is missing the entry's status for some reason, pick either the incomplete status, or the first non-incomplete status
					// based on whether or not the entry is submitted.
					if (!status)
						status = statuses.filter(function (s) { return isEntryIncomplete ? s.IsIncomplete : !s.IsIncomplete && !s.IsArchived; })[0];

					entryMeta.init('Status', status.Name);
				}
			}
		});
	})

	//#endregion

});
})(typeof exports === 'undefined');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,