(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["NumberDropdown~Time"],{

/***/ "../../libs/element-ui/lib/mixins/focus.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = _default;
function _default(ref) {
  return {
    methods: {
      focus() {
        this.$refs[ref].focus();
      }
    }
  };
}
;

/***/ }),

/***/ "../../libs/element-ui/lib/option.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 54);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/util.js");

/***/ }),

/***/ 34:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=template&id=62d35b83
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "li",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.visible,
          expression: "visible"
        }
      ],
      staticClass: "el-select-dropdown__item",
      class: [
        {
          selected: _vm.itemSelected,
          "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
          hover: _vm.hover
        },
        _vm.customClass
      ],
      attrs: {
        role: "option",
        id: _vm.select.id ? `${_vm.select.id}-option-${_vm.value}` : null,
        "aria-selected": _vm.itemSelected ? "true" : "false"
      },
      on: {
        mouseenter: _vm.hoverItem,
        click: function($event) {
          $event.stopPropagation()
          return _vm.selectOptionClick.apply(null, arguments)
        }
      }
    },
    [
      _vm._t("default", function() {
        return [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])]
      })
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=template&id=62d35b83

// EXTERNAL MODULE: external "./mixins/emitter"
var emitter_ = __webpack_require__(4);
var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);

// EXTERNAL MODULE: external "./utils/util"
var util_ = __webpack_require__(3);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=script&lang=js


/* harmony default export */ var optionvue_type_script_lang_js = ({
  mixins: [emitter_default.a],
  name: 'ElOption',
  componentName: 'ElOption',
  inject: ['select'],
  props: {
    value: {
      required: true
    },
    label: [String, Number],
    created: Boolean,
    disabled: {
      type: Boolean,
      default: false
    },
    customClass: {
      type: String,
      default: ''
    }
  },
  data() {
    return {
      index: -1,
      groupDisabled: false,
      visible: true,
      hitState: false,
      hover: false
    };
  },
  computed: {
    isObject() {
      return Object.prototype.toString.call(this.value).toLowerCase() === '[object object]';
    },
    currentLabel() {
      return this.label || (this.isObject ? '' : this.value);
    },
    currentValue() {
      return this.value || this.label || '';
    },
    itemSelected() {
      if (!this.select.multiple) {
        return this.isEqual(this.value, this.select.value);
      } else {
        return this.contains(this.select.value, this.value);
      }
    },
    limitReached() {
      if (this.select.multiple) {
        return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
      } else {
        return false;
      }
    }
  },
  watch: {
    currentLabel() {
      if (!this.created && !this.select.remote) this.dispatch('ElSelect', 'setSelected');
    },
    value(val, oldVal) {
      const {
        remote,
        valueKey
      } = this.select;
      if (!this.created && !remote) {
        if (valueKey && typeof val === 'object' && typeof oldVal === 'object' && val[valueKey] === oldVal[valueKey]) {
          return;
        }
        this.dispatch('ElSelect', 'setSelected');
      }
    }
  },
  methods: {
    isEqual(a, b) {
      if (!this.isObject) {
        return a === b;
      } else {
        const valueKey = this.select.valueKey;
        return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
      }
    },
    contains(arr, target) {
      if (arr === void 0) {
        arr = [];
      }
      if (!this.isObject) {
        return arr && arr.indexOf(target) > -1;
      } else {
        const valueKey = this.select.valueKey;
        return arr && arr.some(item => {
          return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target, valueKey);
        });
      }
    },
    handleGroupDisabled(val) {
      this.groupDisabled = val;
    },
    hoverItem() {
      if (!this.disabled && !this.groupDisabled) {
        this.select.hoverIndex = this.select.options.indexOf(this);
      }
    },
    selectOptionClick() {
      if (this.disabled !== true && this.groupDisabled !== true) {
        this.dispatch('ElSelect', 'handleOptionClick', [this, true]);
      }
    },
    queryChange(query) {
      let queryExpr = Object(util_["escapeRegexpString"])(query);
      if (this.select && this.select.filterMatch === 'beginning') {
        queryExpr = '^' + queryExpr;
      }
      if (this.created) {
        this.visible = this.created;
      } else if (this.select && this.select.alternativeFilter) {
        this.visible = this.select.alternativeFilter(query, this.currentLabel);
      } else {
        this.visible = new RegExp(queryExpr, 'i').test(this.currentLabel);
      }
      if (!this.visible) {
        this.select.filteredOptionsCount--;
      }
    }
  },
  created() {
    this.select.options.push(this);
    this.select.cachedOptions.push(this);
    this.select.optionsCount++;
    this.select.filteredOptionsCount++;
    this.$on('queryChange', this.queryChange);
    this.$on('handleGroupDisabled', this.handleGroupDisabled);
  },
  beforeDestroy() {
    const {
      selected,
      multiple
    } = this.select;
    let selectedOptions = multiple ? selected : [selected];
    let index = this.select.cachedOptions.indexOf(this);
    let selectedIndex = selectedOptions.indexOf(this);

    // if option is not selected, remove it from cache
    if (index > -1 && selectedIndex < 0) {
      this.select.cachedOptions.splice(index, 1);
    }
    this.select.onOptionDestroy(this.select.options.indexOf(this));
  }
});
// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=script&lang=js
 /* harmony default export */ var src_optionvue_type_script_lang_js = (optionvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/select/src/option.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_optionvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src_option = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/emitter.js");

/***/ }),

/***/ 54:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _select_src_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34);


/* istanbul ignore next */
_select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].install = function (Vue) {
  Vue.component(_select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].name, _select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);
};
/* harmony default export */ __webpack_exports__["default"] = (_select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);

/***/ })

/******/ });

/***/ }),

/***/ "../../libs/element-ui/lib/select.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 61);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 1 */,
/* 2 */,
/* 3 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/util.js");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/emitter.js");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/vue-popper.js");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("vue");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/locale.js");

/***/ }),
/* 8 */,
/* 9 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/input.js");

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/clickoutside.js");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/types.js");

/***/ }),
/* 14 */,
/* 15 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/scrollbar.js");

/***/ }),
/* 16 */,
/* 17 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/resize-event.js");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../node_modules/.pnpm/throttle-debounce@1.1.0/node_modules/throttle-debounce/debounce.js");

/***/ }),
/* 19 */,
/* 20 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/locale/index.js");

/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/shared.js");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/focus.js");

/***/ }),
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/scroll-into-view.js");

/***/ }),
/* 32 */,
/* 33 */,
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=template&id=62d35b83
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "li",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.visible,
          expression: "visible"
        }
      ],
      staticClass: "el-select-dropdown__item",
      class: [
        {
          selected: _vm.itemSelected,
          "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
          hover: _vm.hover
        },
        _vm.customClass
      ],
      attrs: {
        role: "option",
        id: _vm.select.id ? `${_vm.select.id}-option-${_vm.value}` : null,
        "aria-selected": _vm.itemSelected ? "true" : "false"
      },
      on: {
        mouseenter: _vm.hoverItem,
        click: function($event) {
          $event.stopPropagation()
          return _vm.selectOptionClick.apply(null, arguments)
        }
      }
    },
    [
      _vm._t("default", function() {
        return [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])]
      })
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=template&id=62d35b83

// EXTERNAL MODULE: external "./mixins/emitter"
var emitter_ = __webpack_require__(4);
var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);

// EXTERNAL MODULE: external "./utils/util"
var util_ = __webpack_require__(3);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=script&lang=js


/* harmony default export */ var optionvue_type_script_lang_js = ({
  mixins: [emitter_default.a],
  name: 'ElOption',
  componentName: 'ElOption',
  inject: ['select'],
  props: {
    value: {
      required: true
    },
    label: [String, Number],
    created: Boolean,
    disabled: {
      type: Boolean,
      default: false
    },
    customClass: {
      type: String,
      default: ''
    }
  },
  data() {
    return {
      index: -1,
      groupDisabled: false,
      visible: true,
      hitState: false,
      hover: false
    };
  },
  computed: {
    isObject() {
      return Object.prototype.toString.call(this.value).toLowerCase() === '[object object]';
    },
    currentLabel() {
      return this.label || (this.isObject ? '' : this.value);
    },
    currentValue() {
      return this.value || this.label || '';
    },
    itemSelected() {
      if (!this.select.multiple) {
        return this.isEqual(this.value, this.select.value);
      } else {
        return this.contains(this.select.value, this.value);
      }
    },
    limitReached() {
      if (this.select.multiple) {
        return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
      } else {
        return false;
      }
    }
  },
  watch: {
    currentLabel() {
      if (!this.created && !this.select.remote) this.dispatch('ElSelect', 'setSelected');
    },
    value(val, oldVal) {
      const {
        remote,
        valueKey
      } = this.select;
      if (!this.created && !remote) {
        if (valueKey && typeof val === 'object' && typeof oldVal === 'object' && val[valueKey] === oldVal[valueKey]) {
          return;
        }
        this.dispatch('ElSelect', 'setSelected');
      }
    }
  },
  methods: {
    isEqual(a, b) {
      if (!this.isObject) {
        return a === b;
      } else {
        const valueKey = this.select.valueKey;
        return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
      }
    },
    contains(arr, target) {
      if (arr === void 0) {
        arr = [];
      }
      if (!this.isObject) {
        return arr && arr.indexOf(target) > -1;
      } else {
        const valueKey = this.select.valueKey;
        return arr && arr.some(item => {
          return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target, valueKey);
        });
      }
    },
    handleGroupDisabled(val) {
      this.groupDisabled = val;
    },
    hoverItem() {
      if (!this.disabled && !this.groupDisabled) {
        this.select.hoverIndex = this.select.options.indexOf(this);
      }
    },
    selectOptionClick() {
      if (this.disabled !== true && this.groupDisabled !== true) {
        this.dispatch('ElSelect', 'handleOptionClick', [this, true]);
      }
    },
    queryChange(query) {
      let queryExpr = Object(util_["escapeRegexpString"])(query);
      if (this.select && this.select.filterMatch === 'beginning') {
        queryExpr = '^' + queryExpr;
      }
      if (this.created) {
        this.visible = this.created;
      } else if (this.select && this.select.alternativeFilter) {
        this.visible = this.select.alternativeFilter(query, this.currentLabel);
      } else {
        this.visible = new RegExp(queryExpr, 'i').test(this.currentLabel);
      }
      if (!this.visible) {
        this.select.filteredOptionsCount--;
      }
    }
  },
  created() {
    this.select.options.push(this);
    this.select.cachedOptions.push(this);
    this.select.optionsCount++;
    this.select.filteredOptionsCount++;
    this.$on('queryChange', this.queryChange);
    this.$on('handleGroupDisabled', this.handleGroupDisabled);
  },
  beforeDestroy() {
    const {
      selected,
      multiple
    } = this.select;
    let selectedOptions = multiple ? selected : [selected];
    let index = this.select.cachedOptions.indexOf(this);
    let selectedIndex = selectedOptions.indexOf(this);

    // if option is not selected, remove it from cache
    if (index > -1 && selectedIndex < 0) {
      this.select.cachedOptions.splice(index, 1);
    }
    this.select.onOptionDestroy(this.select.options.indexOf(this));
  }
});
// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=script&lang=js
 /* harmony default export */ var src_optionvue_type_script_lang_js = (optionvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/select/src/option.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_optionvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src_option = __webpack_exports__["a"] = (component.exports);

/***/ }),
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/tag.js");

/***/ }),
/* 39 */,
/* 40 */,
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export noop */
/* unused harmony export hasOwn */
/* unused harmony export toObject */
/* unused harmony export getValueByPath */
/* unused harmony export getPropByPath */
/* unused harmony export generateId */
/* unused harmony export valueEquals */
/* unused harmony export escapeRegexpString */
/* unused harmony export arrayFindIndex */
/* unused harmony export arrayFind */
/* unused harmony export coerceTruthyValueToArray */
/* unused harmony export isIE */
/* unused harmony export isEdge */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isFirefox; });
/* unused harmony export isIOS */
/* unused harmony export autoprefixer */
/* unused harmony export kebabCase */
/* unused harmony export capitalize */
/* unused harmony export looseEqual */
/* unused harmony export arrayEquals */
/* unused harmony export isEqual */
/* unused harmony export isEmpty */
/* unused harmony export rafThrottle */
/* unused harmony export objToArray */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cognitoforms_element_ui_src_utils_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _cognitoforms_element_ui_src_utils_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_src_utils_types__WEBPACK_IMPORTED_MODULE_1__);


const hasOwnProperty = Object.prototype.hasOwnProperty;
function noop() {}
;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
;
function extend(to, _from) {
  for (let key in _from) {
    to[key] = _from[key];
  }
  return to;
}
;
function toObject(arr) {
  var res = {};
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
;
const getValueByPath = function (object, prop) {
  prop = prop || '';
  const paths = prop.split('.');
  let current = object;
  let result = null;
  for (let i = 0, j = paths.length; i < j; i++) {
    const path = paths[i];
    if (!current) break;
    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};
function getPropByPath(obj, path, strict) {
  let tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');
  let keyArr = path.split('.');
  let i = 0;
  for (let len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    let key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error('please transfer a valid prop path to form item!');
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}
;
const generateId = function () {
  return Math.floor(Math.random() * 10000);
};
const valueEquals = (a, b) => {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (let i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};
const escapeRegexpString = function (value) {
  if (value === void 0) {
    value = '';
  }
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
const arrayFindIndex = function (arr, pred) {
  for (let i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};
const arrayFind = function (arr, pred) {
  const idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};

// coerce truthy value to array
const coerceTruthyValueToArray = function (val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};
const isIE = function () {
  return !vue__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.$isServer && !isNaN(Number(document.documentMode));
};
const isEdge = function () {
  return !vue__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1;
};
const isFirefox = function () {
  return !vue__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
};
const isIOS = function () {
  // https://stackoverflow.com/a/58064481/2836695
  return !vue__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.$isServer && (/iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
};
const autoprefixer = function (style) {
  if (typeof style !== 'object') return style;
  const rules = ['transform', 'transition', 'animation'];
  const prefixes = ['ms-', 'webkit-'];
  rules.forEach(rule => {
    const value = style[rule];
    if (rule && value) {
      prefixes.forEach(prefix => {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};
const kebabCase = function (str) {
  const hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
};
const capitalize = function (str) {
  if (!Object(_cognitoforms_element_ui_src_utils_types__WEBPACK_IMPORTED_MODULE_1__["isString"])(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};
const looseEqual = function (a, b) {
  const isObjectA = Object(_cognitoforms_element_ui_src_utils_types__WEBPACK_IMPORTED_MODULE_1__["isObject"])(a);
  const isObjectB = Object(_cognitoforms_element_ui_src_utils_types__WEBPACK_IMPORTED_MODULE_1__["isObject"])(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};
const arrayEquals = function (arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];
  if (arrayA.length !== arrayB.length) {
    return false;
  }
  for (let i = 0; i < arrayA.length; i++) {
    if (!looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }
  return true;
};
const isEqual = function (value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return looseEqual(value1, value2);
};
const isEmpty = function (val) {
  // null or undefined
  if (val == null) return true;
  if (typeof val === 'boolean') return false;
  if (typeof val === 'number') return !val;
  if (val instanceof Error) return val.message === '';
  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case '[object String]':
    case '[object Array]':
      return !val.length;

    // Map or Set or File
    case '[object File]':
    case '[object Map]':
    case '[object Set]':
      {
        return !val.size;
      }
    // Plain Object
    case '[object Object]':
      {
        return !Object.keys(val).length;
      }
  }
  return false;
};
function rafThrottle(fn) {
  let locked = false;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (locked) return;
    locked = true;
    window.requestAnimationFrame(_ => {
      fn.apply(this, args);
      locked = false;
    });
  };
}
function objToArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return isEmpty(obj) ? [] : [obj];
}

/***/ }),
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=template&id=6a07688e
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "div",
    {
      directives: [
        {
          name: "clickoutside",
          rawName: "v-clickoutside",
          value: _vm.handleClickOutside,
          expression: "handleClickOutside"
        }
      ],
      staticClass: "el-select",
      class: [
        _vm.selectSize ? "el-select--" + _vm.selectSize : "",
        "el-select--dropdown-" + _vm.popperPlacement
      ],
      on: { click: _vm.handleContainerClick }
    },
    [
      _vm.multiple
        ? _c(
            "div",
            {
              ref: "tags",
              staticClass: "el-select__tags",
              style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
            },
            [
              _vm.collapseTags && _vm.selected.length
                ? _c(
                    "span",
                    [
                      _c(
                        "el-tag",
                        {
                          class: _vm.selected[0].customClass,
                          attrs: {
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: _vm.selected[0].hitState,
                            type: "info",
                            "disable-transitions": ""
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, _vm.selected[0])
                            }
                          }
                        },
                        [
                          _c("span", { staticClass: "el-select__tags-text" }, [
                            _vm._v(_vm._s(_vm.selected[0].currentLabel))
                          ])
                        ]
                      ),
                      _vm.selected.length > 1
                        ? _c(
                            "el-tag",
                            {
                              attrs: {
                                closable: false,
                                size: _vm.collapseTagSize,
                                type: "info",
                                "disable-transitions": ""
                              }
                            },
                            [
                              _c(
                                "span",
                                { staticClass: "el-select__tags-text" },
                                [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                              )
                            ]
                          )
                        : _vm._e()
                    ],
                    1
                  )
                : _vm._e(),
              !_vm.collapseTags
                ? _c(
                    "transition-group",
                    { on: { "after-leave": _vm.resetInputHeight } },
                    [
                      _vm._l(_vm.selected, function(item) {
                        return _c(
                          "el-tag",
                          {
                            key: _vm.getValueKey(item),
                            class: item.customClass,
                            attrs: {
                              closable: !_vm.selectDisabled,
                              size: _vm.collapseTagSize,
                              hit: item.hitState,
                              type: "info",
                              "disable-transitions": ""
                            },
                            on: {
                              close: function($event) {
                                return _vm.deleteTag($event, item)
                              }
                            }
                          },
                          [
                            _c(
                              "span",
                              { staticClass: "el-select__tags-text" },
                              [_vm._v(_vm._s(item.currentLabel))]
                            )
                          ]
                        )
                      }),
                      _vm.filterable
                        ? _c("input", {
                            directives: [
                              {
                                name: "model",
                                rawName: "v-model",
                                value: _vm.query,
                                expression: "query"
                              }
                            ],
                            key: "input",
                            ref: "input",
                            staticClass: "el-select__input",
                            class: [
                              _vm.selectSize ? `is-${_vm.selectSize}` : ""
                            ],
                            style: {
                              "flex-grow": "1",
                              width: _vm.multiSelectInputWidth,
                              "max-width": "100%"
                            },
                            attrs: {
                              type: "text",
                              disabled: _vm.selectDisabled,
                              autocomplete:
                                _vm.autoComplete || _vm.autocomplete,
                              "aria-controls": _vm.id
                                ? `${_vm.id}-listbox`
                                : null,
                              role: "combobox",
                              "aria-haspopup": "listbox",
                              "aria-owns": _vm.id ? `${_vm.id}-listbox` : null,
                              "aria-expanded": _vm.visible ? "true" : "false",
                              "aria-label": _vm.label
                            },
                            domProps: { value: _vm.query },
                            on: {
                              focus: _vm.handleFocus,
                              blur: function($event) {
                                _vm.softFocus = false
                              },
                              keyup: _vm.managePlaceholder,
                              keydown: [
                                _vm.resetInputState,
                                function($event) {
                                  if (
                                    !$event.type.indexOf("key") &&
                                    _vm._k(
                                      $event.keyCode,
                                      "down",
                                      40,
                                      $event.key,
                                      ["Down", "ArrowDown"]
                                    )
                                  )
                                    return null
                                  $event.preventDefault()
                                  return _vm.navigateOptions("next")
                                },
                                function($event) {
                                  if (
                                    !$event.type.indexOf("key") &&
                                    _vm._k(
                                      $event.keyCode,
                                      "up",
                                      38,
                                      $event.key,
                                      ["Up", "ArrowUp"]
                                    )
                                  )
                                    return null
                                  $event.preventDefault()
                                  return _vm.navigateOptions("prev")
                                },
                                function($event) {
                                  if (
                                    !$event.type.indexOf("key") &&
                                    _vm._k(
                                      $event.keyCode,
                                      "enter",
                                      13,
                                      $event.key,
                                      "Enter"
                                    )
                                  )
                                    return null
                                  $event.preventDefault()
                                  return _vm.selectOption.apply(null, arguments)
                                },
                                function($event) {
                                  if (
                                    !$event.type.indexOf("key") &&
                                    _vm._k(
                                      $event.keyCode,
                                      "esc",
                                      27,
                                      $event.key,
                                      ["Esc", "Escape"]
                                    )
                                  )
                                    return null
                                  $event.stopPropagation()
                                  $event.preventDefault()
                                  _vm.visible = false
                                },
                                function($event) {
                                  if (
                                    !$event.type.indexOf("key") &&
                                    _vm._k(
                                      $event.keyCode,
                                      "delete",
                                      [8, 46],
                                      $event.key,
                                      ["Backspace", "Delete", "Del"]
                                    )
                                  )
                                    return null
                                  return _vm.deletePrevTag.apply(
                                    null,
                                    arguments
                                  )
                                },
                                function($event) {
                                  if (
                                    !$event.type.indexOf("key") &&
                                    _vm._k(
                                      $event.keyCode,
                                      "tab",
                                      9,
                                      $event.key,
                                      "Tab"
                                    )
                                  )
                                    return null
                                  return _vm.handleTabKey.apply(null, arguments)
                                }
                              ],
                              compositionstart: _vm.handleComposition,
                              compositionupdate: _vm.handleComposition,
                              compositionend: _vm.handleComposition,
                              input: [
                                function($event) {
                                  if ($event.target.composing) return
                                  _vm.query = $event.target.value
                                },
                                _vm.debouncedQueryChange
                              ]
                            }
                          })
                        : _vm._e()
                    ],
                    2
                  )
                : _vm.filterable
                ? _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.query,
                        expression: "query"
                      }
                    ],
                    ref: "input",
                    staticClass: "el-select__input",
                    class: [_vm.selectSize ? `is-${_vm.selectSize}` : ""],
                    style: {
                      "flex-grow": "1",
                      width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                      "max-width": _vm.inputWidth - 42 + "px"
                    },
                    attrs: {
                      type: "text",
                      disabled: _vm.selectDisabled,
                      autocomplete: _vm.autoComplete || _vm.autocomplete,
                      "aria-controls": _vm.id ? `${_vm.id}-listbox` : null,
                      role: "combobox",
                      "aria-haspopup": "listbox",
                      "aria-owns": _vm.id ? `${_vm.id}-listbox` : null,
                      "aria-expanded": _vm.visible ? "true" : "false",
                      "aria-label": _vm.label
                    },
                    domProps: { value: _vm.query },
                    on: {
                      focus: _vm.handleFocus,
                      blur: function($event) {
                        _vm.softFocus = false
                      },
                      keyup: _vm.managePlaceholder,
                      keydown: [
                        _vm.resetInputState,
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "down", 40, $event.key, [
                              "Down",
                              "ArrowDown"
                            ])
                          )
                            return null
                          $event.preventDefault()
                          return _vm.navigateOptions("next")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "up", 38, $event.key, [
                              "Up",
                              "ArrowUp"
                            ])
                          )
                            return null
                          $event.preventDefault()
                          return _vm.navigateOptions("prev")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )
                          )
                            return null
                          $event.preventDefault()
                          return _vm.selectOption.apply(null, arguments)
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "esc", 27, $event.key, [
                              "Esc",
                              "Escape"
                            ])
                          )
                            return null
                          $event.stopPropagation()
                          $event.preventDefault()
                          _vm.visible = false
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "delete",
                              [8, 46],
                              $event.key,
                              ["Backspace", "Delete", "Del"]
                            )
                          )
                            return null
                          return _vm.deletePrevTag.apply(null, arguments)
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
                          )
                            return null
                          return _vm.handleTabKey.apply(null, arguments)
                        }
                      ],
                      compositionstart: _vm.handleComposition,
                      compositionupdate: _vm.handleComposition,
                      compositionend: _vm.handleComposition,
                      input: [
                        function($event) {
                          if ($event.target.composing) return
                          _vm.query = $event.target.value
                        },
                        _vm.debouncedQueryChange
                      ]
                    }
                  })
                : _vm._e()
            ],
            1
          )
        : _vm._e(),
      _c(
        "el-input",
        {
          ref: "reference",
          class: { "is-focus": _vm.visible },
          attrs: {
            type: "text",
            placeholder: _vm.currentPlaceholder,
            title: _vm.title,
            name: _vm.name,
            id: _vm.id,
            autocomplete: _vm.autoComplete || _vm.autocomplete,
            "aria-controls": _vm.id ? `${_vm.id}-listbox` : null,
            role: "combobox",
            "aria-haspopup": "listbox",
            "aria-owns": _vm.id ? `${_vm.id}-listbox` : null,
            "aria-expanded": _vm.visible ? "true" : "false",
            label: _vm.label,
            "aria-activedescendant":
              _vm.id && _vm.hoveredOption
                ? `${_vm.id}-option-${_vm.hoveredOption.value}`
                : null,
            size: _vm.selectSize,
            disabled: _vm.selectDisabled,
            readonly: _vm.readonly,
            "validate-event": false,
            tabindex: _vm.multiple && _vm.filterable ? "-1" : null
          },
          on: { focus: _vm.handleFocus, blur: _vm.handleBlur },
          nativeOn: {
            keyup: function($event) {
              return _vm.debouncedOnInputChange.apply(null, arguments)
            },
            keydown: [
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])
                )
                  return null
                return _vm.handleDownArrowKey.apply(null, arguments)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])
                )
                  return null
                return _vm.handleUpArrowKey.apply(null, arguments)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                )
                  return null
                return _vm.handleEnterKey.apply(null, arguments)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])
                )
                  return null
                return _vm.handleEscapeKey.apply(null, arguments)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
                )
                  return null
                return _vm.handleTabKey.apply(null, arguments)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "space", 32, $event.key, [
                    " ",
                    "Spacebar"
                  ])
                )
                  return null
                return _vm.handleSpaceKey.apply(null, arguments)
              }
            ],
            paste: function($event) {
              return _vm.debouncedOnInputChange.apply(null, arguments)
            },
            mouseenter: function($event) {
              _vm.inputHovering = true
            },
            mouseleave: function($event) {
              _vm.inputHovering = false
            }
          },
          model: {
            value: _vm.selectedLabel,
            callback: function($$v) {
              _vm.selectedLabel = $$v
            },
            expression: "selectedLabel"
          }
        },
        [
          _vm.$slots.prefix
            ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2)
            : _vm._e(),
          _c(
            "template",
            { slot: "suffix" },
            [
              _vm.$slots.suffix ? _vm._t("suffix") : _vm._e(),
              _c("i", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.showClose && !_vm.$slots.suffix,
                    expression: "!showClose && !$slots.suffix"
                  }
                ],
                class: [
                  "el-select__caret",
                  "el-input__icon",
                  "el-icon-" + _vm.iconClass
                ]
              }),
              _vm.showClose && !_vm.$slots.suffix
                ? _c("i", {
                    staticClass:
                      "el-select__caret el-input__icon el-icon-circle-close",
                    on: { click: _vm.handleClearClick }
                  })
                : _vm._e()
            ],
            2
          )
        ],
        2
      ),
      _c(
        "transition",
        {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "before-enter": _vm.handleMenuEnter,
            "after-leave": _vm.doDestroy
          }
        },
        [
          _c(
            "el-select-menu",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible && _vm.emptyText !== false,
                  expression: "visible && emptyText !== false"
                }
              ],
              ref: "popper",
              attrs: { "append-to-body": _vm.popperAppendToBody },
              on: { "placement-change": _vm.handlePlacementChange }
            },
            [
              _vm.renderOptions
                ? _c(
                    "el-scrollbar",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.options.length > 0 && !_vm.loading,
                          expression: "options.length > 0 && !loading"
                        }
                      ],
                      ref: "scrollbar",
                      class: {
                        "is-empty":
                          !_vm.allowCreate &&
                          _vm.query &&
                          _vm.filteredOptionsCount === 0
                      },
                      attrs: {
                        tag: "ul",
                        "wrap-class": "el-select-dropdown__wrap",
                        "view-class": "el-select-dropdown__list",
                        "is-listbox": true,
                        multiple: _vm.multiple,
                        id: _vm.id ? `${_vm.id}-listbox` : null
                      }
                    },
                    [
                      _vm.showNewOption
                        ? _c("el-option", {
                            attrs: { value: _vm.query, created: "" }
                          })
                        : _vm._e(),
                      _vm._t("default")
                    ],
                    2
                  )
                : _vm._e(),
              _vm.emptyText &&
              (!_vm.allowCreate ||
                _vm.loading ||
                (_vm.allowCreate && _vm.options.length === 0))
                ? [
                    _vm.$slots.empty
                      ? _vm._t("empty")
                      : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                          _vm._v(
                            "\n          " +
                              _vm._s(_vm.emptyText) +
                              "\n        "
                          )
                        ])
                  ]
                : _vm._e()
            ],
            2
          )
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=template&id=6a07688e

// EXTERNAL MODULE: external "./mixins/emitter"
var emitter_ = __webpack_require__(4);
var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);

// EXTERNAL MODULE: external "./mixins/focus"
var focus_ = __webpack_require__(23);
var focus_default = /*#__PURE__*/__webpack_require__.n(focus_);

// EXTERNAL MODULE: external "./mixins/locale"
var locale_ = __webpack_require__(7);
var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);

// EXTERNAL MODULE: external "./input"
var external_input_ = __webpack_require__(9);
var external_input_default = /*#__PURE__*/__webpack_require__.n(external_input_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select-dropdown.vue?vue&type=template&id=5de6bb88
var select_dropdownvue_type_template_id_5de6bb88_render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "div",
    {
      staticClass: "el-select-dropdown el-popper",
      class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
      style: { minWidth: _vm.minWidth }
    },
    [_vm._t("default")],
    2
  )
}
var select_dropdownvue_type_template_id_5de6bb88_staticRenderFns = []
select_dropdownvue_type_template_id_5de6bb88_render._withStripped = true


// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue?vue&type=template&id=5de6bb88

// EXTERNAL MODULE: external "./utils/vue-popper"
var vue_popper_ = __webpack_require__(5);
var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);

// EXTERNAL MODULE: ./src/utils/util.js
var util = __webpack_require__(41);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select-dropdown.vue?vue&type=script&lang=js


/* harmony default export */ var select_dropdownvue_type_script_lang_js = ({
  name: 'ElSelectDropdown',
  componentName: 'ElSelectDropdown',
  mixins: [vue_popper_default.a],
  props: {
    placement: {
      default: 'bottom-start'
    },
    boundariesPadding: {
      default: 0
    },
    popperOptions: {
      default() {
        return {
          gpuAcceleration: false
        };
      }
    },
    visibleArrow: {
      default: true
    },
    appendToBody: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    popperClass() {
      return this.$parent.popperClass;
    },
    minWidth() {
      return this.$parent.inputWidth + 'px';
    }
  },
  mounted() {
    this.$parent.popperElm = this.popperElm = this.$el;
    this.$on('updatePopper', () => {
      if (this.$parent.$refs.reference) {
        this.referenceElm = this.$parent.$refs.reference.$el;
      }
      if (this.$parent.visible) this.updatePopper();
    });
    this.$on('destroyPopper', this.destroyPopper);
  }
});
// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue?vue&type=script&lang=js
 /* harmony default export */ var src_select_dropdownvue_type_script_lang_js = (select_dropdownvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_select_dropdownvue_type_script_lang_js,
  select_dropdownvue_type_template_id_5de6bb88_render,
  select_dropdownvue_type_template_id_5de6bb88_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var select_dropdown = (component.exports);
// EXTERNAL MODULE: ./packages/select/src/option.vue + 4 modules
var src_option = __webpack_require__(34);

// EXTERNAL MODULE: external "./tag"
var external_tag_ = __webpack_require__(38);
var external_tag_default = /*#__PURE__*/__webpack_require__.n(external_tag_);

// EXTERNAL MODULE: external "./scrollbar"
var external_scrollbar_ = __webpack_require__(15);
var external_scrollbar_default = /*#__PURE__*/__webpack_require__.n(external_scrollbar_);

// EXTERNAL MODULE: external "throttle-debounce/debounce"
var debounce_ = __webpack_require__(18);
var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);

// EXTERNAL MODULE: external "./utils/clickoutside"
var clickoutside_ = __webpack_require__(12);
var clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);

// EXTERNAL MODULE: external "./utils/resize-event"
var resize_event_ = __webpack_require__(17);

// EXTERNAL MODULE: external "./locale"
var external_locale_ = __webpack_require__(20);

// EXTERNAL MODULE: external "./utils/scroll-into-view"
var scroll_into_view_ = __webpack_require__(31);
var scroll_into_view_default = /*#__PURE__*/__webpack_require__.n(scroll_into_view_);

// EXTERNAL MODULE: external "./utils/util"
var util_ = __webpack_require__(3);

// CONCATENATED MODULE: ./packages/select/src/navigation-mixin.js
/* harmony default export */ var navigation_mixin = ({
  data() {
    return {
      hoverOption: -1
    };
  },
  computed: {
    optionsAllDisabled() {
      return this.options.filter(option => option.visible).every(option => option.disabled);
    }
  },
  watch: {
    hoverIndex(val) {
      if (typeof val === 'number' && val > -1) {
        this.hoverOption = this.options[val] || {};
      }
      this.options.forEach(option => {
        option.hover = this.hoverOption === option;
      });
    }
  },
  methods: {
    navigateOptions(direction) {
      if (!this.visible) {
        this.visible = true;
        return;
      }
      if (this.options.length === 0 || this.filteredOptionsCount === 0) return;
      if (!this.optionsAllDisabled) {
        if (direction === 'next') {
          this.hoverIndex++;
          if (this.hoverIndex === this.options.length) {
            this.hoverIndex = 0;
          }
        } else if (direction === 'prev') {
          this.hoverIndex--;
          if (this.hoverIndex < 0) {
            this.hoverIndex = this.options.length - 1;
          }
        }
        const option = this.options[this.hoverIndex];
        if (!this.$props.multiple) {
          this.selectOption();
        }
        if (option.disabled === true || option.groupDisabled === true || !option.visible) {
          this.navigateOptions(direction);
        }
        this.$nextTick(() => this.scrollToOption(this.hoverOption));
      }
    }
  }
});
// EXTERNAL MODULE: external "./utils/shared"
var shared_ = __webpack_require__(22);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=script&lang=js
















const sizeMap = {
  medium: 36,
  small: 32,
  mini: 28
};
/* harmony default export */ var selectvue_type_script_lang_js = ({
  mixins: [emitter_default.a, locale_default.a, focus_default()('reference'), navigation_mixin],
  name: 'ElSelect',
  componentName: 'ElSelect',
  inject: {
    elForm: {
      default: ''
    },
    elFormItem: {
      default: ''
    }
  },
  provide() {
    return {
      'select': this
    };
  },
  computed: {
    _elFormItemSize() {
      return (this.elFormItem || {}).elFormItemSize;
    },
    readonly() {
      return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !Object(util_["isIOS"])() && !this.visible;
    },
    showClose() {
      let hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== undefined && this.value !== null && this.value !== '';
      let criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
      return criteria;
    },
    iconClass() {
      return this.remote && this.filterable ? '' : this.visible ? 'arrow-up is-reverse' : 'arrow-up';
    },
    debounce() {
      return this.remote ? 300 : 0;
    },
    emptyText() {
      if (this.loading) {
        return this.loadingText || this.t('el.select.loading');
      } else {
        if (this.remote && this.query === '' && this.options.length === 0) return false;
        if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
          return this.noMatchText || this.t('el.select.noMatch');
        }
        if (this.options.length === 0) {
          return this.noDataText || this.t('el.select.noData');
        }
      }
      return null;
    },
    showNewOption() {
      let hasExistingOption = this.options.filter(option => !option.created).some(option => option.currentValue === this.query);
      return this.filterable && this.allowCreate && this.query !== '' && !hasExistingOption;
    },
    selectSize() {
      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
    },
    selectDisabled() {
      return this.disabled || (this.elForm || {}).disabled;
    },
    collapseTagSize() {
      return ['small', 'mini'].indexOf(this.selectSize) > -1 ? 'mini' : 'small';
    },
    hoveredOption() {
      return this.options[this.hoverIndex];
    },
    multiSelectInputWidth() {
      if (this.selected.length > 0) {
        return this.query.length + 2 + 'ch';
      } else {
        return '100%';
      }
    }
  },
  components: {
    ElInput: external_input_default.a,
    ElSelectMenu: select_dropdown,
    ElOption: src_option["a" /* default */],
    ElTag: external_tag_default.a,
    ElScrollbar: external_scrollbar_default.a
  },
  directives: {
    Clickoutside: clickoutside_default.a
  },
  props: {
    name: String,
    id: String,
    title: String,
    label: String,
    value: {
      required: true
    },
    autocomplete: {
      type: String,
      default: 'off'
    },
    /** @Deprecated in next major version */
    autoComplete: {
      type: String,
      validator(val) {
          false && false;
        return true;
      }
    },
    automaticDropdown: Boolean,
    size: String,
    disabled: Boolean,
    clearable: Boolean,
    filterable: Boolean,
    filterMatch: {
      type: String,
      default: 'anywhere'
    },
    editable: Boolean,
    allowCreate: Boolean,
    loading: Boolean,
    popperClass: String,
    remote: Boolean,
    loadingText: String,
    noMatchText: String,
    noDataText: String,
    remoteMethod: Function,
    filterMethod: Function,
    alternativeFilter: Function,
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    placeholder: {
      type: String,
      default() {
        return Object(external_locale_["t"])('el.select.placeholder');
      }
    },
    defaultFirstOption: Boolean,
    reserveKeyword: Boolean,
    valueKey: {
      type: String,
      default: 'value'
    },
    collapseTags: Boolean,
    popperAppendToBody: {
      type: Boolean,
      default: true
    },
    lazyOptions: {
      type: Boolean,
      default: false
    },
    prefillSelectedValue: {
      type: Boolean,
      default: true
    }
  },
  data() {
    return {
      options: [],
      cachedOptions: [],
      createdLabel: null,
      createdSelected: false,
      selected: this.multiple ? [] : {},
      inputLength: 20,
      inputWidth: 0,
      cachedPlaceHolder: '',
      optionsCount: 0,
      filteredOptionsCount: 0,
      visible: false,
      softFocus: false,
      selectedLabel: '',
      hoverIndex: -1,
      query: '',
      previousQuery: null,
      inputHovering: false,
      currentPlaceholder: '',
      menuVisibleOnFocus: false,
      isOnComposition: false,
      isSilentBlur: false,
      valueOnMenuOpen: '',
      popperPlacement: 'bottom',
      renderOptions: !this.lazyOptions
    };
  },
  watch: {
    selectDisabled() {
      this.$nextTick(() => {
        this.resetInputHeight();
      });
    },
    placeholder(val) {
      this.cachedPlaceHolder = this.currentPlaceholder = val;
    },
    value(val, oldVal) {
      if (this.multiple) {
        this.resetInputHeight();
        if (val && val.length > 0 || this.$refs.input && this.query !== '') {
          this.currentPlaceholder = '';
        } else {
          this.currentPlaceholder = this.cachedPlaceHolder;
        }
        if (this.filterable && !this.reserveKeyword) {
          this.query = '';
          this.handleQueryChange(this.query);
        }
      }
      this.setSelected();
      if (this.filterable && !this.multiple) {
        this.inputLength = 20;
      }
      if (!Object(util_["valueEquals"])(val, oldVal)) {
        this.dispatch('ElFormItem', 'el.form.change', val);
      }
    },
    async visible(val) {
      if (!val) {
        this.broadcast('ElSelectDropdown', 'destroyPopper');
        if (this.$refs.input) {
          this.$refs.input.blur();
        }
        this.query = '';
        this.previousQuery = null;
        this.selectedLabel = '';
        this.inputLength = 20;
        this.menuVisibleOnFocus = false;
        this.resetHoverIndex();
        this.$nextTick(() => {
          if (this.$refs.input && this.$refs.input.value === '' && this.selected.length === 0) {
            this.currentPlaceholder = this.cachedPlaceHolder;
          }
        });
        if (!this.multiple) {
          if (this.selected) {
            if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
              this.selectedLabel = this.createdLabel;
            } else if (this.prefillSelectedValue) {
              this.selectedLabel = this.selected.currentLabel;
            }
            if (this.filterable) this.query = this.selectedLabel;
          }
          if (this.filterable) {
            this.currentPlaceholder = this.cachedPlaceHolder;
          }
        }
      } else {
        // avoid rendering the options slot until dropdown is first opened
        if (!this.renderOptions) {
          this.renderOptions = true;
          await this.$nextTick();
          this.setSelected();
        }
        this.broadcast('ElSelectDropdown', 'updatePopper');
        if (this.filterable) {
          this.query = this.remote ? '' : this.selectedLabel;
          this.handleQueryChange(this.query);
          if (this.multiple) {
            this.$refs.input.focus();
          } else {
            if (!this.remote) {
              this.broadcast('ElOption', 'queryChange', '');
              this.broadcast('ElOptionGroup', 'queryChange');
            }

            // Set placeholder to label of option selected when filterable is true, unless editable is true (i.e. keep existing value and allow editing it)
            if (this.selectedLabel && !this.editable) {
              this.currentPlaceholder = this.selectedLabel;
              this.selectedLabel = '';
            }
          }
        }
      }
      this.$emit('visible-change', val);
      if (this.visible) {
        this.valueOnMenuOpen = this.value;
      } else {
        this.emitChange(this.value);
        if (this.multiple) {
          this.resetInputHeight();
        }
      }
    },
    options() {
      if (this.$isServer) return;
      this.$nextTick(() => {
        this.broadcast('ElSelectDropdown', 'updatePopper');
      });
      if (this.multiple) {
        this.resetInputHeight();
      }
      let inputs = this.$el.querySelectorAll('input');
      if ([].indexOf.call(inputs, document.activeElement) === -1) {
        this.setSelected();
      }
      if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
        this.checkDefaultFirstOption();
      }
    },
    multiple: {
      immediate: true,
      handler(val) {
        if (val) {
          this.$off('handleOptionClick', this.handleClose);
          // selectedLabel is really only a concept for single select mode
          this.selectedLabel = '';
        } else {
          this.$on('handleOptionClick', this.handleClose);
          if (this.prefillSelectedValue) {
            const option = this.getOption(this.value);
            this.selectedLabel = option ? option.currentLabel : '';
          }
        }
        this.resetInputHeight();
      }
    }
  },
  methods: {
    handleComposition(event) {
      const text = event.target.value;
      if (event.type === 'compositionend') {
        this.isOnComposition = false;
        this.$nextTick(_ => this.handleQueryChange(text));
      } else {
        const lastCharacter = text[text.length - 1] || '';
        this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
      }
    },
    getOptionFromSlot(value) {
      const optionNode = this.$slots.default.find(vnode => vnode.componentOptions && vnode.componentOptions.propsData.value === value);
      return optionNode ? optionNode.componentOptions.propsData : null;
    },
    handleQueryChange(val) {
      this.query = val;
      if (this.previousQuery === val || this.isOnComposition) return;
      if (this.previousQuery === null && (typeof this.filterMethod === 'function' || typeof this.remoteMethod === 'function')) {
        this.previousQuery = val;
        return;
      }
      this.previousQuery = val;
      this.$nextTick(() => {
        if (this.visible) this.broadcast('ElSelectDropdown', 'updatePopper');
      });
      this.hoverIndex = -1;
      if (this.multiple && this.filterable) {
        this.$nextTick(() => {
          const length = this.$refs.input.value.length * 15 + 20;
          this.inputLength = this.collapseTags ? Math.min(50, length) : length;
          this.managePlaceholder();
          this.resetInputHeight();
        });
      }
      if (this.remote && typeof this.remoteMethod === 'function') {
        this.hoverIndex = -1;
        this.remoteMethod(val);
      } else if (typeof this.filterMethod === 'function') {
        this.filterMethod(val);
        this.broadcast('ElOptionGroup', 'queryChange');
      } else {
        this.filteredOptionsCount = this.optionsCount;
        this.broadcast('ElOption', 'queryChange', val);
        this.broadcast('ElOptionGroup', 'queryChange');
      }
      if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
        this.checkDefaultFirstOption();
      }
      this.$nextTick(() => {
        if (this.visible) this.broadcast('ElSelectDropdown', 'updatePopper');
      });
    },
    handleUpArrowKey(e) {
      e.stopPropagation();
      e.preventDefault();
      this.navigateOptions('prev');
    },
    handleDownArrowKey(e) {
      e.stopPropagation();
      e.preventDefault();
      this.navigateOptions('next');
    },
    handleEnterKey(e) {
      e.preventDefault();
      this.selectOption(e);
      this.visible = !this.visible;
    },
    handleEscapeKey(e) {
      e.stopPropagation();
      e.preventDefault();
      this.visible = false;
    },
    handleTabKey(e) {
      if (this.allowCreate) {
        this.handleOptionSelect(this.getMatchingOption());
      } else if (this.query && this.query.length > 0 && this.query !== this.selected.currentLabel) {
        this.handleOptionSelect(this.getFirstVisibleOption());
      }
      this.visible = false;
    },
    getFirstVisibleOption() {
      for (let i = 0; i < this.options.length; i++) {
        if (this.options[i].visible) {
          return this.options[i];
        }
      }
    },
    getMatchingOption() {
      for (let i = 0; i < this.options.length; i++) {
        if (this.options[i].currentValue === this.query) {
          return this.options[i];
        }
      }
    },
    handleSpaceKey(e) {
      if (!this.visible) {
        e.stopPropagation();
        e.preventDefault();
        this.visible = true;
      }
    },
    scrollToOption(option) {
      const target = Array.isArray(option) && option[0] ? option[0].$el : option.$el;
      if (this.$refs.popper && target) {
        const menu = this.$refs.popper.$el.querySelector('.el-select-dropdown__wrap');
        scroll_into_view_default()(menu, target);
      }
      this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
    },
    handleMenuEnter() {
      this.$nextTick(() => this.scrollToOption(this.selected));
    },
    emitChange(val) {
      if (!Object(util_["valueEquals"])(this.valueOnMenuOpen, val)) {
        this.$emit('change', val);
      }
    },
    getOption(value) {
      let option, label;
      const isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';
      const isNull = Object.prototype.toString.call(value).toLowerCase() === '[object null]';
      const isUndefined = Object.prototype.toString.call(value).toLowerCase() === '[object undefined]';
      if (this.renderOptions) {
        for (let i = this.cachedOptions.length - 1; i >= 0; i--) {
          const cachedOption = this.cachedOptions[i];
          const isEqual = isObject ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value, this.valueKey) : cachedOption.value === value;
          if (isEqual) {
            option = cachedOption;
            break;
          }
        }
        if (option) return option;
      } else if (this.$slots.default) {
        option = this.getOptionFromSlot(value);
        if (option) label = option.label;
      }
      if (!label) label = !isObject && !isNull && !isUndefined ? value : '';
      let newOption = {
        value: value,
        currentLabel: label
      };
      if (this.multiple) {
        newOption.hitState = false;
      }
      return newOption;
    },
    setSelected() {
      if (!this.multiple) {
        let option = this.getOption(this.value);
        if (option.created) {
          this.createdLabel = option.currentLabel;
          this.createdSelected = true;
        } else {
          this.createdSelected = false;
        }
        if (this.prefillSelectedValue) this.selectedLabel = option.currentLabel;
        this.selected = option;
        if (this.filterable) this.query = this.selectedLabel;
        return;
      }
      let result = [];
      if (Array.isArray(this.value)) {
        this.value.forEach(value => {
          result.push(this.getOption(value));
        });
      }
      this.selected = result;
      this.$nextTick(() => {
        this.resetInputHeight();
      });
    },
    handleFocus(event) {
      if (!this.softFocus) {
        if (this.automaticDropdown || this.filterable) {
          this.visible = true;
          if (this.filterable) {
            this.menuVisibleOnFocus = true;
          }
        }
        this.$emit('focus', event);
      } else {
        this.softFocus = false;
      }
    },
    blur() {
      this.visible = false;
      this.$refs.reference.blur();
    },
    handleBlur(event) {
      setTimeout(() => {
        if (this.isSilentBlur) {
          this.isSilentBlur = false;
        } else {
          this.$emit('blur', event);
        }
      }, 50);
      this.softFocus = false;
    },
    handleClearClick(event) {
      this.deleteSelected(event);
    },
    doDestroy() {
      this.$refs.popper && this.$refs.popper.doDestroy();
    },
    handleClickOutside(e) {
      this.handleClose();
    },
    handleClose() {
      this.visible = false;
    },
    toggleLastOptionHitState(hit) {
      if (!Array.isArray(this.selected)) return;
      const option = this.selected[this.selected.length - 1];
      if (!option) return;
      if (hit === true || hit === false) {
        option.hitState = hit;
        return hit;
      }
      option.hitState = !option.hitState;
      return option.hitState;
    },
    deletePrevTag(e) {
      if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
        const value = this.value.slice();
        value.pop();
        this.$emit('input', value);
        this.emitChange(value);
      }
    },
    managePlaceholder() {
      if (this.currentPlaceholder !== '') {
        this.currentPlaceholder = this.$refs.input.value ? '' : this.cachedPlaceHolder;
      }
    },
    resetInputState(e) {
      if (e.keyCode !== 8) this.toggleLastOptionHitState(false);
      this.inputLength = this.$refs.input.value.length * 15 + 20;
      this.resetInputHeight();
    },
    resetInputHeight() {
      if (this.collapseTags && !this.filterable) return;
      this.$nextTick(() => {
        if (!this.$refs.reference) return;
        let inputChildNodes = this.$refs.reference.$el.childNodes;
        let input = [].filter.call(inputChildNodes, item => item.tagName === 'INPUT')[0];
        const tags = this.$refs.tags;
        const sizeInMap = sizeMap[this.selectSize];
        const tagsHeight = tags ? tags.getBoundingClientRect().height : 0;
        input.style.height = this.selected.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + 'px';
        if (this.visible && this.emptyText !== false) {
          this.broadcast('ElSelectDropdown', 'updatePopper');
        }
      });
    },
    resetHoverIndex() {
      setTimeout(() => {
        if (!this.multiple) {
          this.hoverIndex = this.options.indexOf(this.selected);
        } else {
          if (this.selected.length > 0) {
            this.hoverIndex = Math.min.apply(null, this.selected.map(item => this.options.indexOf(item)));
          } else {
            this.hoverIndex = -1;
          }
        }
      }, 300);
    },
    handleOptionSelect(option, byClick) {
      if (!option) return;
      if (this.multiple) {
        const value = (this.value || []).slice();
        const optionIndex = this.getValueIndex(value, option.value);
        if (optionIndex > -1) {
          value.splice(optionIndex, 1);
        } else if (this.multipleLimit <= 0 || value.length < this.multipleLimit) {
          value.push(option.value);
        }
        this.$emit('input', value);
        if (option.created) {
          this.query = '';
          this.handleQueryChange('');
          this.inputLength = 20;
        }
        if (this.filterable) this.$refs.input.focus();
      } else {
        this.$emit('input', option.value);
      }
      this.isSilentBlur = byClick;
      this.setSoftFocus();
      if (this.visible) return;
      this.$nextTick(() => {
        this.scrollToOption(option);
      });
    },
    setSoftFocus() {
      this.softFocus = true;
      const input = this.$refs.input || this.$refs.reference;
      if (input) {
        input.focus();
      }
    },
    getValueIndex(arr, value) {
      if (arr === void 0) {
        arr = [];
      }
      const isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';
      if (!isObject) {
        return arr.indexOf(value);
      } else {
        const valueKey = this.valueKey;
        let index = -1;
        arr.some((item, i) => {
          if (Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(value, valueKey)) {
            index = i;
            return true;
          }
          return false;
        });
        return index;
      }
    },
    handleContainerClick(e) {
      e.stopPropagation();
      this.toggleMenu();
    },
    toggleMenu() {
      if (!this.selectDisabled) {
        if (this.menuVisibleOnFocus) {
          this.menuVisibleOnFocus = false;
        } else {
          this.visible = !this.visible;
        }
        if (this.visible) {
          (this.$refs.input || this.$refs.reference).focus();
        }
      }
    },
    selectOption() {
      if (this.visible && this.options[this.hoverIndex]) {
        this.handleOptionSelect(this.options[this.hoverIndex]);
      }
    },
    deleteSelected(event) {
      event.stopPropagation();
      const value = this.multiple ? [] : '';
      this.$emit('input', value);
      this.emitChange(value);
      this.visible = false;
      this.$emit('clear');
    },
    deleteTag(event, tag) {
      let index = this.selected.indexOf(tag);
      if (index > -1 && !this.selectDisabled) {
        const value = this.value.slice();
        value.splice(index, 1);
        this.$emit('input', value);
        this.emitChange(value);
        this.$emit('remove-tag', tag.value);
      }
      event.stopPropagation();
    },
    onInputChange() {
      if (this.filterable && this.query !== this.selectedLabel) {
        this.query = this.selectedLabel;
        this.handleQueryChange(this.query);
      }
    },
    onOptionDestroy(index) {
      if (index > -1) {
        this.optionsCount--;
        this.filteredOptionsCount--;
        this.options.splice(index, 1);
      }
    },
    resetInputWidth() {
      if (this.$refs.reference) this.inputWidth = this.$refs.reference.$el.clientWidth;
    },
    handleResize() {
      requestAnimationFrame(() => {
        this.resetInputWidth();
        if (this.multiple) this.resetInputHeight();
      });
    },
    checkDefaultFirstOption() {
      this.hoverIndex = -1;
      // highlight the created option
      let hasCreated = false;
      for (let i = this.options.length - 1; i >= 0; i--) {
        if (this.options[i].created) {
          hasCreated = true;
          this.hoverIndex = i;
          break;
        }
      }
      if (hasCreated) return;
      for (let i = 0; i !== this.options.length; ++i) {
        const option = this.options[i];
        if (this.query) {
          // highlight first options that passes the filter
          if (!option.disabled && !option.groupDisabled && option.visible) {
            this.hoverIndex = i;
            break;
          }
        } else {
          // highlight currently selected option
          if (option.itemSelected) {
            this.hoverIndex = i;
            break;
          }
        }
      }
    },
    getValueKey(item) {
      if (Object.prototype.toString.call(item.value).toLowerCase() !== '[object object]') {
        return item.value;
      } else {
        return Object(util_["getValueByPath"])(item.value, this.valueKey);
      }
    },
    handlePlacementChange(placement) {
      this.popperPlacement = placement;
    }
  },
  created() {
    this.cachedPlaceHolder = this.currentPlaceholder = this.placeholder;
    if (this.multiple && !Array.isArray(this.value)) {
      this.$emit('input', []);
    }
    if (!this.multiple && Array.isArray(this.value)) {
      this.$emit('input', '');
    }
    this.debouncedOnInputChange = debounce_default()(this.debounce, () => {
      this.onInputChange();
    });
    this.debouncedQueryChange = debounce_default()(this.debounce, e => {
      this.handleQueryChange(e.target.value);
    });
    this.$on('handleOptionClick', this.handleOptionSelect);
    this.$on('setSelected', this.setSelected);
  },
  mounted() {
    if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
      this.currentPlaceholder = '';
    }
    Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
    const reference = this.$refs.reference;
    this.$nextTick(() => requestAnimationFrame(() => {
      if (reference && reference.$el) {
        if (this.remote && this.multiple) {
          this.resetInputHeight();
        }
      }
    }));
    this.setSelected();
  },
  beforeDestroy() {
    if (this.$el && this.handleResize) Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
  }
});
// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=script&lang=js
 /* harmony default export */ var src_selectvue_type_script_lang_js = (selectvue_type_script_lang_js); 
// CONCATENATED MODULE: ./packages/select/src/select.vue





/* normalize component */

var select_component = Object(componentNormalizer["a" /* default */])(
  src_selectvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src_select = (select_component.exports);
// CONCATENATED MODULE: ./packages/select/index.js


/* istanbul ignore next */
src_select.install = function (Vue) {
  Vue.component(src_select.name, src_select);
};
/* harmony default export */ var packages_select = __webpack_exports__["default"] = (src_select);

/***/ })
/******/ ]);

/***/ }),

/***/ "../../libs/element-ui/lib/tag.js":
/***/ (function(module, exports) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 125);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 125:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/tag/src/tag.vue?vue&type=script&lang=js
/* harmony default export */ var tagvue_type_script_lang_js = ({
  name: 'ElTag',
  props: {
    text: String,
    closable: Boolean,
    type: String,
    hit: Boolean,
    disableTransitions: Boolean,
    color: String,
    size: String,
    effect: {
      type: String,
      default: 'light',
      validator(val) {
        return ['dark', 'light', 'plain'].indexOf(val) !== -1;
      }
    }
  },
  methods: {
    handleClose(event) {
      event.stopPropagation();
      this.$emit('close', event);
    },
    handleClick(event) {
      this.$emit('click', event);
    }
  },
  computed: {
    tagSize() {
      return this.size || (this.$ELEMENT || {}).size;
    }
  },
  render(h) {
    const {
      type,
      tagSize,
      hit,
      effect
    } = this;
    const classes = ['el-tag', type ? `el-tag--${type}` : '', tagSize ? `el-tag--${tagSize}` : '', effect ? `el-tag--${effect}` : '', hit && 'is-hit'];
    const tagEl = h("span", {
      "class": classes,
      "style": {
        backgroundColor: this.color
      },
      "on": {
        "click": this.handleClick
      }
    }, [this.$slots.default, this.closable && h("i", {
      "class": "el-tag__close el-icon-close",
      "on": {
        "click": this.handleClose
      }
    })]);
    return this.disableTransitions ? tagEl : h("transition", {
      "attrs": {
        "name": "el-zoom-in-center"
      }
    }, [tagEl]);
  }
});
// CONCATENATED MODULE: ./packages/tag/src/tag.vue?vue&type=script&lang=js
 /* harmony default export */ var src_tagvue_type_script_lang_js = (tagvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/tag/src/tag.vue
var render, staticRenderFns




/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_tagvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var tag = (component.exports);
// CONCATENATED MODULE: ./packages/tag/index.js


/* istanbul ignore next */
tag.install = function (Vue) {
  Vue.component(tag.name, tag);
};
/* harmony default export */ var packages_tag = __webpack_exports__["default"] = (tag);

/***/ })

/******/ });

/***/ }),

/***/ "../../libs/element-ui/lib/utils/scroll-into-view.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = scrollIntoView;
var _vue = _interopRequireDefault(__webpack_require__("vue"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function scrollIntoView(container, selected) {
  if (_vue.default.prototype.$isServer) return;
  if (!selected) {
    container.scrollTop = 0;
    return;
  }
  const offsetParents = [];
  let pointer = selected.offsetParent;
  while (pointer && container !== pointer && container.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
  const bottom = top + selected.offsetHeight;
  const viewRectTop = container.scrollTop;
  const viewRectBottom = viewRectTop + container.clientHeight;
  if (top < viewRectTop) {
    container.scrollTop = top;
  } else if (bottom > viewRectBottom) {
    container.scrollTop = bottom - container.clientHeight;
  }
}

/***/ }),

/***/ "../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cognitoforms_element_ui_lib_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/element-ui/lib/option.js");
/* harmony import */ var _cognitoforms_element_ui_lib_option__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_option__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_style_popper_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/style/_popper.scss");
/* harmony import */ var src_style_motion_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/style/_motion.scss");
/* harmony import */ var src_style_input_icon_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/style/_input-icon.scss");
/* harmony import */ var src_style_scrollbar_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/style/_scrollbar.scss");
/* harmony import */ var src_style_dropdown_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/style/_dropdown.scss");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var src_components_PickerNative_vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/components/PickerNative.vue");
/* harmony import */ var _assets_chevron_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/assets/chevron.svg");
/* harmony import */ var _mixins_focus_ts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/mixins/focus.ts");
/* harmony import */ var _SelectInput_ts__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/components/SelectInput.ts");
/* harmony import */ var _GeneratedAvatar_vue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/components/GeneratedAvatar.vue");
/* harmony import */ var _form_resizing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/components/form-resizing.ts");
/* harmony import */ var _cognitoforms_utils_user_agent__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../libs/utils/user-agent.ts");
/* harmony import */ var _cognitoforms_utils_user_agent__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_utils_user_agent__WEBPACK_IMPORTED_MODULE_13__);














vue__WEBPACK_IMPORTED_MODULE_6___default.a.use(_cognitoforms_element_ui_lib_option__WEBPACK_IMPORTED_MODULE_0___default.a);
const MIN_REFOCUS_DELAY = 25;
const SELECT_MENU_MAXHEIGHT = 200;
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'CSelect',
  components: {
    IChevron: _assets_chevron_svg__WEBPACK_IMPORTED_MODULE_8__["default"],
    CPickerNative: src_components_PickerNative_vue__WEBPACK_IMPORTED_MODULE_7__["default"],
    'el-select': _SelectInput_ts__WEBPACK_IMPORTED_MODULE_10__["default"],
    CGeneratedAvatar: _GeneratedAvatar_vue__WEBPACK_IMPORTED_MODULE_11__["default"]
  },
  mixins: [_mixins_focus_ts__WEBPACK_IMPORTED_MODULE_9__["default"]],
  inject: {
    $resource: {},
    formEvents: {},
    flags: {
      default: () => ({})
    }
  },
  inheritAttrs: false,
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    // eslint-disable-next-line vue/require-prop-types
    value: {
      default: ''
    },
    readonly: Boolean,
    allowOther: Boolean,
    chameleon: Boolean,
    mobile: Boolean,
    showEmptyOption: {
      type: Boolean,
      default: true
    },
    allowArrowsToChangeValue: {
      type: Boolean,
      default: true
    },
    placeholder: {
      type: String,
      default: null
    },
    options: {
      type: Array,
      default: null
    },
    scope: {
      type: String,
      default: '0'
    },
    additionalPopperClass: {
      type: String,
      default: ''
    },
    filterable: {
      type: Boolean,
      default: true
    },
    filterMatch: {
      type: String,
      default: 'contains'
    },
    id: {
      type: String,
      required: true
    },
    title: {
      type: String,
      default: null
    },
    autocomplete: {
      type: String,
      default: 'prevent'
    },
    alternativeFilter: {
      type: Function,
      default: null
    }
  },
  data() {
    return {
      internalValue: this.value,
      hidePlaceholder: this.allowOther || !!this.value,
      internalAllowOther: this.allowOther,
      dropdownVisible: false
    };
  },
  computed: {
    showSelectIcon() {
      // Non-number/text dropdown field (ie: time field) icons should always be displayed
      if (this.$slots.suffix) return true;
      return !this.internalAllowOther;
    },
    displayValue() {
      if (this.value && Array.isArray(this.options)) {
        const selected = this.options.find(o => o.value === this.value);
        return selected ? selected.displayValue : this.value;
      }
      return '';
    },
    useNative() {
      return !(Object(_cognitoforms_utils_user_agent__WEBPACK_IMPORTED_MODULE_13__["isSafari"])(window.navigator) && this.allowOther) && (this.chameleon || this.mobile) && !this.hasImageOption;
    },
    nbsp() {
      return '\u00A0';
    },
    popperClasses() {
      return ["cog-cognito cog-".concat(this.scope), "cog-cognito--".concat(this.chameleon ? 'chameleon' : 'styled'), 'cog-select-popper', "".concat(this.options && this.options.length > 100 ? 'el-select-dropdown--long' : ''), "".concat(this.flags.protectCss ? 'cog-cognito--protect-css' : ''), "".concat(this.additionalPopperClass)].join(' ');
    },
    selectedImage() {
      if (this.value) {
        for (let i = 0; (_ref = i < ((_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.length)) !== null && _ref !== void 0 ? _ref : 0; i++) {
          var _ref, _this$options;
          if (this.options[i].value === this.internalValue) {
            var _this$options$i$image;
            const selectedImage = (_this$options$i$image = this.options[i].image) !== null && _this$options$i$image !== void 0 ? _this$options$i$image : this.options[i].svg;
            return selectedImage !== null && selectedImage !== void 0 ? selectedImage : '';
          }
        }
      }
      return '';
    },
    hasImageOption() {
      var _this$options2;
      return (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.some(dropdownOption => dropdownOption.image || dropdownOption.svg);
    },
    prefixDefined() {
      return !!this.$slots.prefix;
    }
  },
  watch: {
    value: {
      immediate: true,
      handler: function (valueProp) {
        // Selects can't contain a null value so blank will need to be converted
        this.internalValue = valueProp === '' ? null : valueProp;
        this.hidePlaceholder = this.internalAllowOther || !!this.value;
      }
    }
  },
  methods: {
    // Allows a user to type in a value and then click outside of the select to set a value
    handleUserInputChange(e) {
      if (!this.internalAllowOther) {
        const matchedOption = this.options.filter(o => o.value.toLowerCase() === e.target.value.toLowerCase() || o.displayValue.toLowerCase() === e.target.value.toLowerCase())[0];
        if (matchedOption) this.handleChange(matchedOption.value);
      }
    },
    handleBlur(e) {
      this.removeClassOnBlur();
      this.$emit('blur', e);
      this.hidePlaceholder = this.internalAllowOther || !!this.value;
    },
    handleFocus(e) {
      this.addClassOnFocus();
      this.$emit('focus', e);
    },
    handleChange(value) {
      this.internalValue = value;
      this.$emit('change', value);
    },
    handleNativeMenuOpen() {
      // Native select (on desktop) can overlap with faux placeholder text. See #18599
      this.hidePlaceholder = true;
    },
    handleNativeChange(ev) {
      // IOS needs the select to be refocused after selection if "done" is tapped. Cf. #20786
      // Any number less than 20 results in inconsistent success.
      setTimeout(() => {
        if (document.activeElement === document.body) this.$refs.nativeSelect.focus();
      }, MIN_REFOCUS_DELAY);
      const value = ev.target.value;
      this.internalValue = value;
      this.$emit('change', value, ev);
    },
    handleIconClick(e) {
      // toggle menu
      this.$refs.select.visible = !this.$refs.select.visible;
      e.stopPropagation();

      // keep focus on select regardless
      this.$refs.select.$el.querySelector('input').focus();
    },
    handleIconMousedown(e) {
      // prevent handleBlur from being called as a result of clicking the chevron
      e.preventDefault();
    },
    handleSelectVisibleChange(visible) {
      // Re-emit the "visible-change" event
      this.$emit('visible-change', visible);
      if (this.formEvents) if (!visible) {
        this.dropdownVisible = false;
        Object(_form_resizing__WEBPACK_IMPORTED_MODULE_12__["ensureMinHeight"])(this.formEvents, 0);
      } else {
        this.dropdownVisible = true;
        const formHeight = document.documentElement.clientHeight;
        const {
          top: selectTop,
          bottom: selectBottom
        } = this.$el.getBoundingClientRect();
        const selectBottomBounds = Math.ceil(selectBottom) + SELECT_MENU_MAXHEIGHT;
        // If there's no room on top or bottom of the form for the select menu
        if (Math.ceil(selectTop) < SELECT_MENU_MAXHEIGHT && selectBottomBounds > formHeight)
          // Make the form tall enough to accomodate the select menu on the bottom
          Object(_form_resizing__WEBPACK_IMPORTED_MODULE_12__["ensureMinHeight"])(this.formEvents, selectBottomBounds);
      }
    },
    isSvg(image) {
      return image && image.startsWith('<svg viewBox=');
    }
  }
});

/***/ }),

/***/ "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_dropdown.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "html .cog-cognito .el-select-dropdown__list,\nhtml .cog-cognito .el-autocomplete-suggestion__list, :root:root:root:root:root .cog-cognito .el-select-dropdown__list,\n:root:root:root:root:root .cog-cognito .el-autocomplete-suggestion__list {\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n}\nhtml .cog-cognito .el-select-dropdown__list li,\nhtml .cog-cognito .el-autocomplete-suggestion__list li, :root:root:root:root:root .cog-cognito .el-select-dropdown__list li,\n:root:root:root:root:root .cog-cognito .el-autocomplete-suggestion__list li {\n  position: relative;\n  padding: calc(var(--gutter) / 4) calc(var(--gutter) / 2);\n  cursor: default;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\nhtml .cog-cognito .el-select-dropdown__list li:hover,\nhtml .cog-cognito .el-autocomplete-suggestion__list li:hover, :root:root:root:root:root .cog-cognito .el-select-dropdown__list li:hover,\n:root:root:root:root:root .cog-cognito .el-autocomplete-suggestion__list li:hover {\n  background: hsla(var(--background-hsl), 0.12);\n}\nhtml .cog-cognito .el-select-dropdown__empty,\nhtml .cog-cognito .el-autocomplete-suggestion__empty, :root:root:root:root:root .cog-cognito .el-select-dropdown__empty,\n:root:root:root:root:root .cog-cognito .el-autocomplete-suggestion__empty {\n  margin: 0;\n  padding: calc(var(--gutter) / 4) calc(var(--gutter) / 2);\n  opacity: 0.6;\n  text-align: center;\n}\nhtml .cog-cognito .el-select-dropdown__wrap,\nhtml .cog-cognito .el-autocomplete-suggestion__wrap, :root:root:root:root:root .cog-cognito .el-select-dropdown__wrap,\n:root:root:root:root:root .cog-cognito .el-autocomplete-suggestion__wrap {\n  max-height: calc(50vh - 20px);\n}\nhtml .cog-cognito .el-select-dropdown__item.selected:first-child:not(.cog-select-option--empty), :root:root:root:root:root .cog-cognito .el-select-dropdown__item.selected:first-child:not(.cog-select-option--empty) {\n  display: none;\n}\nhtml .cog-cognito .el-select-dropdown__list li.selected, :root:root:root:root:root .cog-cognito .el-select-dropdown__list li.selected {\n  color: var(--highlight);\n  font-weight: bold;\n}\nhtml .cog-cognito .el-autocomplete-suggestion__list li.highlighted, :root:root:root:root:root .cog-cognito .el-autocomplete-suggestion__list li.highlighted {\n  background: hsla(var(--background-hsl), 0.12);\n}", ""]);


/***/ }),

/***/ "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "html .cog-picker--allow-other .el-input__inner, :root:root:root:root:root .cog-picker--allow-other .el-input__inner {\n  cursor: text;\n}\nhtml.cog-iframe-embed .el-select-dropdown__wrap, :root:root:root:root:root.cog-iframe-embed .el-select-dropdown__wrap {\n  max-height: 200px;\n}\nhtml .cog-cognito--chameleon select, :root:root:root:root:root .cog-cognito--chameleon select {\n  width: 100%;\n}\nhtml .cog-select-image__prefix.cog-generated-avatar,\nhtml .cog-select-image__prefix img, :root:root:root:root:root .cog-select-image__prefix.cog-generated-avatar,\n:root:root:root:root:root .cog-select-image__prefix img {\n  position: relative;\n}\nhtml .cog-image-item__dropdown, :root:root:root:root:root .cog-image-item__dropdown {\n  margin-left: -0.3em;\n}", ""]);


/***/ }),

/***/ "../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/cjs.js?!../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&");
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1__);

            

var options = {"attributes":{"class":"cog-style"}};

options.insert = "head";
options.singleton = false;

var update = _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a, options);


if (true) {
  if (!_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals;

    module.hot.accept(
      "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&",
      function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&");
/* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1__);
(function () {
        if (!isEqualLocals(oldLocals, _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals, undefined)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals;

              update(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this)
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

/* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals || {});

/***/ }),

/***/ "../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=template&id=ed6a05a8&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "div",
    {
      staticClass: "cog-picker cog-select cog-input",
      class: {
        "is-read-only": _vm.readonly,
        "cog-picker--allow-other": _vm.internalAllowOther
      }
    },
    [
      _vm.readonly
        ? [
            _c(
              "span",
              { class: { "cog-image-item": _vm.selectedImage } },
              [
                _vm.selectedImage
                  ? [
                      !_vm.isSvg(_vm.selectedImage)
                        ? _c("img", {
                            staticClass: "cog-lookup-image cog-avatar",
                            attrs: {
                              src: _vm.selectedImage,
                              height: "50",
                              width: "50"
                            }
                          })
                        : _c("c-generated-avatar", {
                            staticClass: "cog-select-image__prefix",
                            attrs: { svg: _vm.selectedImage }
                          })
                    ]
                  : _vm._e(),
                _vm._v(_vm._s(_vm.displayValue || " "))
              ],
              2
            )
          ]
        : [
            _vm.useNative
              ? _c(
                  "c-picker-native",
                  {
                    attrs: {
                      placeholder: _vm.placeholder,
                      "show-placeholder": !_vm.hidePlaceholder
                    },
                    scopedSlots: _vm._u(
                      [
                        _vm.mobile && _vm.showSelectIcon
                          ? {
                              key: "icon",
                              fn: function() {
                                return [_c("i-chevron")]
                              },
                              proxy: true
                            }
                          : null
                      ],
                      null,
                      true
                    )
                  },
                  [
                    _vm.internalAllowOther
                      ? [
                          _c("input", {
                            directives: [
                              {
                                name: "model",
                                rawName: "v-model",
                                value: _vm.internalValue,
                                expression: "internalValue"
                              }
                            ],
                            staticClass: "el-input__inner",
                            attrs: {
                              id: _vm.id ? "cog-" + _vm.id : null,
                              type: "text",
                              list: _vm.id ? `cog-${_vm.id}-list` : null,
                              placeholder: _vm.placeholder
                            },
                            domProps: { value: _vm.internalValue },
                            on: {
                              keydown: _vm.handleNativeMenuOpen,
                              click: _vm.handleNativeMenuOpen,
                              change: _vm.handleNativeChange,
                              focus: _vm.handleFocus,
                              blur: _vm.handleBlur,
                              input: function($event) {
                                if ($event.target.composing) return
                                _vm.internalValue = $event.target.value
                              }
                            }
                          }),
                          _vm._v(" "),
                          _c(
                            "datalist",
                            {
                              attrs: {
                                id: _vm.id ? `cog-${_vm.id}-list` : null
                              }
                            },
                            [
                              _vm.showEmptyOption
                                ? _c("option", { domProps: { value: null } }, [
                                    _vm._v(" ")
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              _vm._l(_vm.options, function(item) {
                                return _c(
                                  "option",
                                  {
                                    key: item.value,
                                    domProps: { value: item.value }
                                  },
                                  [_vm._v(_vm._s(item.displayValue))]
                                )
                              })
                            ],
                            2
                          )
                        ]
                      : _c(
                          "select",
                          _vm._b(
                            {
                              directives: [
                                {
                                  name: "model",
                                  rawName: "v-model",
                                  value: _vm.internalValue,
                                  expression: "internalValue"
                                }
                              ],
                              ref: "nativeSelect",
                              staticClass: "el-input__inner",
                              class: { "is-null": !_vm.value },
                              attrs: {
                                id: _vm.id ? "cog-" + _vm.id : null,
                                title: _vm.title
                              },
                              on: {
                                keydown: _vm.handleNativeMenuOpen,
                                click: _vm.handleNativeMenuOpen,
                                change: [
                                  function($event) {
                                    var $$selectedVal = Array.prototype.filter
                                      .call($event.target.options, function(o) {
                                        return o.selected
                                      })
                                      .map(function(o) {
                                        var val =
                                          "_value" in o ? o._value : o.value
                                        return val
                                      })
                                    _vm.internalValue = $event.target.multiple
                                      ? $$selectedVal
                                      : $$selectedVal[0]
                                  },
                                  _vm.handleNativeChange
                                ],
                                focus: _vm.handleFocus,
                                blur: _vm.handleBlur
                              }
                            },
                            "select",
                            _vm.$attrs,
                            false
                          ),
                          [
                            _vm.showEmptyOption
                              ? _c("option", { domProps: { value: null } }, [
                                  _vm._v(" ")
                                ])
                              : _vm._e(),
                            _vm._v(" "),
                            _vm._l(_vm.options, function(item) {
                              return _c(
                                "option",
                                {
                                  key: item.value,
                                  domProps: { value: item.value }
                                },
                                [_vm._v(_vm._s(item.displayValue))]
                              )
                            })
                          ],
                          2
                        )
                  ],
                  2
                )
              : _c(
                  "el-select",
                  _vm._b(
                    {
                      ref: "select",
                      attrs: {
                        id: _vm.id ? "cog-" + _vm.id : null,
                        placeholder: _vm.placeholder,
                        "allow-create": _vm.internalAllowOther,
                        "no-data-text": " ",
                        "default-first-option": "",
                        filterable: _vm.filterable,
                        "filter-match": _vm.filterMatch,
                        "alternative-filter": _vm.alternativeFilter,
                        editable: _vm.internalAllowOther,
                        "automatic-dropdown": false,
                        "popper-class": _vm.popperClasses,
                        autocomplete: _vm.autocomplete,
                        title: _vm.title,
                        "lazy-options": ""
                      },
                      on: {
                        focus: _vm.handleFocus,
                        blur: _vm.handleBlur,
                        change: _vm.handleChange,
                        "visible-change": _vm.handleSelectVisibleChange
                      },
                      nativeOn: {
                        change: function($event) {
                          return _vm.handleUserInputChange.apply(
                            null,
                            arguments
                          )
                        }
                      },
                      scopedSlots: _vm._u(
                        [
                          !_vm.prefixDefined &&
                          _vm.selectedImage &&
                          !_vm.dropdownVisible
                            ? {
                                key: "prefix",
                                fn: function() {
                                  return [
                                    !_vm.isSvg(_vm.selectedImage)
                                      ? _c("img", {
                                          staticClass:
                                            "cog-lookup-image cog-avatar cog-select-image__prefix",
                                          attrs: {
                                            src: _vm.selectedImage,
                                            height: "50",
                                            width: "50"
                                          }
                                        })
                                      : _c("c-generated-avatar", {
                                          staticClass:
                                            "cog-select-image__prefix",
                                          attrs: { svg: _vm.selectedImage }
                                        })
                                  ]
                                },
                                proxy: true
                              }
                            : null,
                          _vm.showSelectIcon
                            ? {
                                key: "suffix",
                                fn: function() {
                                  return [
                                    _c(
                                      "span",
                                      {
                                        on: {
                                          click: _vm.handleIconClick,
                                          mousedown: _vm.handleIconMousedown
                                        }
                                      },
                                      [
                                        _vm._t("suffix", function() {
                                          return [_c("i-chevron")]
                                        })
                                      ],
                                      2
                                    )
                                  ]
                                },
                                proxy: true
                              }
                            : null
                        ],
                        null,
                        true
                      ),
                      model: {
                        value: _vm.internalValue,
                        callback: function($$v) {
                          _vm.internalValue = $$v
                        },
                        expression: "internalValue"
                      }
                    },
                    "el-select",
                    _vm.$attrs,
                    false
                  ),
                  [
                    _vm.showEmptyOption
                      ? _c(
                          "el-option",
                          {
                            staticClass: "cog-select-option--empty",
                            attrs: { value: null }
                          },
                          [_vm._v(" ")]
                        )
                      : _vm._e(),
                    _vm._v(" "),
                    _vm._l(_vm.options, function(item, index) {
                      return _c(
                        "el-option",
                        {
                          key: item.value + index,
                          style: { order: index },
                          attrs: {
                            value: item.value,
                            label: item.displayValue || _vm.nbsp
                          }
                        },
                        [
                          _c(
                            "div",
                            {
                              class: {
                                "cog-image-item cog-image-item__dropdown":
                                  item.svg || item.image
                              }
                            },
                            [
                              item.image
                                ? _c("div", { staticClass: "cog-flex" }, [
                                    _c("img", {
                                      staticClass:
                                        "cog-lookup-image cog-avatar",
                                      attrs: {
                                        src: item.image,
                                        height: "50",
                                        width: "50"
                                      }
                                    })
                                  ])
                                : _vm._e(),
                              _vm._v(" "),
                              item.svg
                                ? _c("c-generated-avatar", {
                                    attrs: { svg: item.svg }
                                  })
                                : _vm._e(),
                              _vm._v(" "),
                              _c("span", [
                                _vm._v(
                                  _vm._s(
                                    item.displayValue || item.value || _vm.nbsp
                                  )
                                )
                              ])
                            ],
                            1
                          )
                        ]
                      )
                    })
                  ],
                  2
                )
          ]
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./src/assets/chevron.svg":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

      /* harmony default export */ __webpack_exports__["default"] = ({
        functional: true,
        render(_h, _vm) {
          const { _c, _v, data, children = [] } = _vm;

          const {
            class: classNames,
            staticClass,
            style,
            staticStyle,
            attrs = {},
            ...rest
          } = data;

          return _c(
            'svg',
            {
              class: ["cog-icon cog-i-chevron",classNames,staticClass],
              style: [style,staticStyle],
              attrs: Object.assign({"viewBox":"0 0 18 18","focusable":"false","class":"cog-icon cog-i-chevron"}, attrs),
              ...rest,
            },
            children.concat([_c('g',[_c('path',{attrs:{"stroke-linecap":"square","d":"M3 7l6 6 6-6"}})])])
          )
        }
      });
    

/***/ }),

/***/ "./src/components/Select.vue":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/Select.vue?vue&type=template&id=ed6a05a8&");
/* harmony import */ var _Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/components/Select.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&");
/* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (true) {
  var api = __webpack_require__("../../node_modules/.pnpm/vue-hot-reload-api@2.3.4/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(__webpack_require__("vue"))
  if (api.compatible) {
    module.hot.accept()
    if (!api.isRecorded('ed6a05a8')) {
      api.createRecord('ed6a05a8', component.options)
    } else {
      api.reload('ed6a05a8', component.options)
    }
    module.hot.accept("./src/components/Select.vue?vue&type=template&id=ed6a05a8&", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/Select.vue?vue&type=template&id=ed6a05a8&");
(function () {
      api.rerender('ed6a05a8', {
        render: _Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__["render"],
        staticRenderFns: _Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]
      })
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))
  }
}
component.options.__file = "src/components/Select.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Select.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_cjs_js_ref_5_oneOf_1_0_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_style_index_0_id_ed6a05a8_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/cjs.js?!../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=style&index=0&id=ed6a05a8&lang=scss&");
/* empty/unused harmony star reexport */

/***/ }),

/***/ "./src/components/Select.vue?vue&type=template&id=ed6a05a8&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Select.vue?vue&type=template&id=ed6a05a8&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_template_id_ed6a05a8___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/SelectInput.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CSelectInput; });
/* harmony import */ var _cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/element-ui/lib/select.js");
/* harmony import */ var _cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@8.2.1_prettier@1.18.2/node_modules/vue-property-decorator/lib/vue-property-decorator.js");

var _dec, _dec2, _dec3, _dec4, _class, _class2;
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }


const SelectConstructor = vue__WEBPACK_IMPORTED_MODULE_1___default.a.extend(_cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0___default.a);
let CSelectInput = (_dec = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_2__["Component"])({}), _dec2 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_2__["Watch"])('value', {
  immediate: true
}), _dec3 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_2__["Watch"])('visible'), _dec4 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_2__["Watch"])('options'), _dec(_class = (_class2 = class CSelectInput extends SelectConstructor {
  constructor() {
    super(...arguments);
    // -------------- Data --------------
    this.elValue = this.value;
    this.isFocused = void 0;
    this.orderedOptions = void 0;
    this.cachedQuery = void 0;
  }
  // -------------- LifeCycle Hooks --------------
  mounted() {
    this.$refs.reference.$on('input', this.handleReferenceInput);
    this.$el.addEventListener('keydown', this.handleKeyDown);
    // prevent mousedown on picker options from blurring the input and closing the picker
    this.popper.addEventListener('mousedown', e => e.preventDefault());
  }

  // -------------- Watchers --------------
  onValueChanged(valueProp) {
    this.elValue = valueProp;
  }
  onVisibleChanged() {
    if (this.visible) {
      document.addEventListener('mousemove', this.restorePointerEvent);
    } else {
      document.removeEventListener('mousemove', this.restorePointerEvent);
    }
  }
  onOptionsChange() {
    if (this.cachedQuery) this.orderOptions(this.cachedQuery, true);
  }

  // -------------- Computed --------------
  get popper() {
    return this.$refs.popper.$el;
  }
  get displayIndex() {
    const option = this.options[this.hoverIndex];
    return option ? Number(option.$el.style.order) : -1;
  }

  // The created option always appears at the top, but is technically at the last index of the list.
  // Therefore we must check this when determining whether or not arrow keys can navigate.
  get createdOptionIsHovered() {
    return this.options[this.hoverIndex] && this.options[this.hoverIndex].created === true;
  }
  get filteredOrderedOptionsCount() {
    return this.orderedOptions.filter(o => o.visible).length;
  }

  // -------------- Methods --------------
  restorePointerEvent() {
    this.popper.style.pointerEvents = 'auto';
  }
  removePointerEvent(popper) {
    popper.style.pointerEvents = 'none';
  }
  navigateOptions(direction) {
    const visibleOptions = this.orderedOptions.filter(o => o.visible);
    let index = this.displayIndex;
    if (direction === 'next') {
      index = this.displayIndex + 1;
      if (index >= visibleOptions.length) index = visibleOptions.length - 1;
    } else if (direction === 'prev') {
      index = this.displayIndex - 1;
      if (index < 0) index = 0;
    }
    const hoverOption = visibleOptions[index];
    const emptyOption = visibleOptions.find(o => !o.label);
    if (!hoverOption && emptyOption) emptyOption.hoverItem();else hoverOption.hoverItem();
    if (!this.multiple) {
      this.selectOption(hoverOption);
      this.scrollToOption(hoverOption);
      this.$nextTick(() => hoverOption.hoverItem());
    }
  }
  handleUpArrowKey(e) {
    e.preventDefault();
    if (!e.altKey && this.visible) {
      e.stopPropagation();
      e.preventDefault();
      this.removePointerEvent(this.$refs.popper.$el);

      // When you press the up arrow at the top of a select list, you should not go to the bottom.
      if (this.displayIndex === 0 || this.createdOptionIsHovered) {
        e.stopPropagation();
        e.preventDefault();
      } else this.navigateOptions('prev');
    }
    if (!e.altKey && this.$parent.allowArrowsToChangeValue && !this.visible && !this.createdOptionIsHovered) {
      if (this.hoverIndex < this.filteredOrderedOptionsCount) this.hoverIndex--;
      if (this.hoverIndex >= 0) {
        this.selectedLabel = this.options[this.hoverIndex].value;
        this.$emit('change', this.selectedLabel);
      }
    }

    // ALT + UP: close the popover
    if (e.altKey) {
      e.preventDefault();
      this.visible = false;
    }
  }
  handleDownArrowKey(e) {
    e.preventDefault();
    if (!e.altKey && this.visible) {
      e.stopPropagation();
      e.preventDefault();
      this.removePointerEvent(this.$refs.popper.$el);

      // When you press the down arrow at the bottom of a select list, you should not go to the top.
      // Using this.orderedOptions.filter(o => o.visible).length instead of this.filteredOrderedOptionsCount here
      // because the latter was not being updated in time
      if (this.displayIndex < this.orderedOptions.filter(o => o.visible).length - 1 || this.createdOptionIsHovered) {
        this.navigateOptions('next');
      }
    }
    if (!e.altKey && this.$parent.allowArrowsToChangeValue && !this.visible) {
      if (this.hoverIndex < 0) this.hoverIndex = 0;
      if (this.createdOptionIsHovered) this.hoverIndex = 0;else if (this.hoverIndex + 1 < this.filteredOrderedOptionsCount) this.hoverIndex++;
      this.selectedLabel = this.options[this.hoverIndex].value;
      this.$emit('change', this.selectedLabel);
    }

    // ALT + DOWN: open the popover
    if (e.altKey) {
      e.preventDefault();
      this.visible = true;
    }
  }

  // overrides a computed used by element internally
  get showNewOption() {
    const hasExistingOption = this.options.filter(option => !option.created).some(option => option.currentValue === this.query);
    return this.filterable && this.allowCreate && this.query !== '' && this.query !== null && !hasExistingOption;
  }
  handleReferenceInput(val) {
    this.elValue = val;
  }
  handleFocus(event) {
    if (!this.softFocus) this.$emit('focus', event);else this.softFocus = false;
  }
  async handleKeyDown(e) {
    // Exit if the key is any of the arrow keys, space, enter, tab, or shift
    // Or it's any "named" key (escape, home, etc)
    if (!e.key || this.visible || [37, 38, 39, 40, 32, 13, 9, 16].includes(e.keyCode) || e.key.length > 1) return null;
    e.preventDefault();
    this.visible = true;
    const optionsRendered = this.renderOptions;
    // Wait for the select to be 'visible'
    await this.$nextTick();
    // Wait for the select options to render
    if (!optionsRendered) await this.$nextTick();

    // Set the value of the input field to the key pressed
    this.selectedLabel = e.key;
    // Update the query to match the input field value
    this.debouncedQueryChange(e);
  }
  handleContainerClick(e) {
    if (!this.visible) _cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0___default.a.methods.handleContainerClick.call(this, e);
  }
  optionIsMatch(o) {
    if (this.allowCreate) return o.label === this.query;else return o.label.toLowerCase() === this.query.toLowerCase();
  }
  handleQueryChange(query) {
    _cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0___default.a.methods.handleQueryChange.call(this, query);
    this.cachedQuery = query;
    this.$nextTick(function () {
      this.orderOptions(query);
    });
  }
  handleBlur(e) {
    if (this.allowCreate) this.$emit('change', this.elValue);
    _cognitoforms_element_ui_lib_select__WEBPACK_IMPORTED_MODULE_0___default.a.methods.handleBlur.call(this, e);
    this.visible = false;
    this.$emit('blur', e);
  }
  findOption(value) {
    let includeHiddenOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const scrollbar = this.$refs.scrollbar;
    const options = scrollbar.$children;
    const candidateOptions = includeHiddenOptions ? options : options.filter(o => o.visible);
    return candidateOptions.filter(o => o.value === value)[0] || null;
  }

  /**
   * Similiar to Element's 'scrollToOption' method, except that instead of stopping as soon as the option is in view
   * (such that it would be at the bottom of the list), scroll to the point where the option is at the top of the list.
   * @param option The option to scroll to
   */
  scrollToOptionAtTop(option) {
    const scrollbar = this.$refs.scrollbar;
    const scrollbarWrapper = scrollbar.$refs.wrap;
    scrollbarWrapper.scrollTo(0, option.$el.offsetTop);
  }
  orderOptions(query) {
    var _this$orderedOptions$;
    let ignoreSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const shouldReorder = this.filterMatch === 'contains';
    const isEmptyQuery = !query || query === this.selected.label;
    // if empty query, restore original order
    if (!shouldReorder || isEmptyQuery && !ignoreSelected) {
      this.orderedOptions = this.options;
      for (let i = 0; i < this.options.length; i++) {
        this.options[i].$el.style.order = i;
      }
      if (query === this.selected.label) this.selected.hoverItem();
      return;
    }

    // Ordering options by 'contains' and then 'starts with'
    const sortFunction = (a, b) => {
      // created option should be first
      if (a.created) {
        return -1;
      } else if (b.created) {
        return 1;
      } else if (!a.label || !b.label) {
        return 0;
      }
      const exactAMatch = a.label.toLowerCase().startsWith(query.toLowerCase());
      const exactBMatch = b.label.toLowerCase().startsWith(query.toLowerCase());
      const looseAMatch = a.label.toLowerCase().includes(query.toLowerCase());
      const looseBMatch = b.label.toLowerCase().includes(query.toLowerCase());
      if (exactAMatch && exactBMatch) {
        return 0;
      } else if (exactAMatch) {
        return -1;
      } else if (exactBMatch) {
        return 1;
      } else if (looseAMatch && looseBMatch) {
        return 0;
      } else if (looseAMatch) {
        return -1;
      } else if (looseBMatch) {
        return 1;
      }
    };
    this.orderedOptions = this.options.slice(0).sort(sortFunction).filter(o => o.visible);
    for (let i = 0; i < this.orderedOptions.length; i++) {
      this.orderedOptions[i].$el.style.order = i;
    }
    if (!this.allowCreate) (_this$orderedOptions$ = this.orderedOptions[0]) === null || _this$orderedOptions$ === void 0 ? void 0 : _this$orderedOptions$.hoverItem();
  }
}, (_applyDecoratedDescriptor(_class2.prototype, "onValueChanged", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onValueChanged"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onVisibleChanged", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onVisibleChanged"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onOptionsChange", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onOptionsChange"), _class2.prototype)), _class2)) || _class);


/***/ }),

/***/ "./src/style/_dropdown.scss":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_dropdown.scss");
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1__);

            

var options = {"attributes":{"class":"cog-style"}};

options.insert = "head";
options.singleton = false;

var update = _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a, options);


if (true) {
  if (!_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals;

    module.hot.accept(
      "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_dropdown.scss",
      function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_dropdown.scss");
/* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1__);
(function () {
        if (!isEqualLocals(oldLocals, _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals, undefined)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals;

              update(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this)
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

/* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_dropdown_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals || {});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,