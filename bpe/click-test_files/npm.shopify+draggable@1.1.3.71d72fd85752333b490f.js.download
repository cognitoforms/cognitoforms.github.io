(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.shopify+draggable@1.1.3"],{

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs":
/*!********************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs ***!
  \********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragStoppedEvent = exports.DragStopEvent = exports.DragStartEvent = exports.DragPressureEvent = exports.DragOverEvent = exports.DragOverContainerEvent = exports.DragOutEvent = exports.DragOutContainerEvent = exports.DragMoveEvent = exports.DragEvent = void 0;
exports.isDragOverEvent = isDragOverEvent;
var _AbstractEvent2 = __webpack_require__(/*! ../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var DragEvent = exports.DragEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(DragEvent, _AbstractEvent);
  var _super = _createSuper(DragEvent);
  function DragEvent(data) {
    var _this;
    _classCallCheck(this, DragEvent);
    _this = _super.call(this, data);
    _this.data = data;
    return _this;
  }
  _createClass(DragEvent, [{
    key: "source",
    get: function get() {
      return this.data.source;
    }
  }, {
    key: "originalSource",
    get: function get() {
      return this.data.originalSource;
    }
  }, {
    key: "mirror",
    get: function get() {
      return this.data.mirror;
    }
  }, {
    key: "sourceContainer",
    get: function get() {
      return this.data.sourceContainer;
    }
  }, {
    key: "sensorEvent",
    get: function get() {
      return this.data.sensorEvent;
    }
  }, {
    key: "originalEvent",
    get: function get() {
      if (this.sensorEvent) {
        return this.sensorEvent.originalEvent;
      }
      return null;
    }
  }]);
  return DragEvent;
}(_AbstractEvent2.AbstractEvent);
DragEvent.type = 'drag';
var DragStartEvent = exports.DragStartEvent = /*#__PURE__*/function (_DragEvent) {
  _inherits(DragStartEvent, _DragEvent);
  var _super2 = _createSuper(DragStartEvent);
  function DragStartEvent() {
    _classCallCheck(this, DragStartEvent);
    return _super2.apply(this, arguments);
  }
  return _createClass(DragStartEvent);
}(DragEvent);
DragStartEvent.type = 'drag:start';
DragStartEvent.cancelable = true;
var DragMoveEvent = exports.DragMoveEvent = /*#__PURE__*/function (_DragEvent2) {
  _inherits(DragMoveEvent, _DragEvent2);
  var _super3 = _createSuper(DragMoveEvent);
  function DragMoveEvent() {
    _classCallCheck(this, DragMoveEvent);
    return _super3.apply(this, arguments);
  }
  return _createClass(DragMoveEvent);
}(DragEvent);
DragMoveEvent.type = 'drag:move';
var DragOverEvent = exports.DragOverEvent = /*#__PURE__*/function (_DragEvent3) {
  _inherits(DragOverEvent, _DragEvent3);
  var _super4 = _createSuper(DragOverEvent);
  function DragOverEvent() {
    _classCallCheck(this, DragOverEvent);
    return _super4.apply(this, arguments);
  }
  _createClass(DragOverEvent, [{
    key: "overContainer",
    get: function get() {
      return this.data.overContainer;
    }
  }, {
    key: "over",
    get: function get() {
      return this.data.over;
    }
  }]);
  return DragOverEvent;
}(DragEvent);
DragOverEvent.type = 'drag:over';
DragOverEvent.cancelable = true;
function isDragOverEvent(event) {
  return event.type === DragOverEvent.type;
}
var DragOutEvent = exports.DragOutEvent = /*#__PURE__*/function (_DragEvent4) {
  _inherits(DragOutEvent, _DragEvent4);
  var _super5 = _createSuper(DragOutEvent);
  function DragOutEvent() {
    _classCallCheck(this, DragOutEvent);
    return _super5.apply(this, arguments);
  }
  _createClass(DragOutEvent, [{
    key: "overContainer",
    get: function get() {
      return this.data.overContainer;
    }
  }, {
    key: "over",
    get: function get() {
      return this.data.over;
    }
  }]);
  return DragOutEvent;
}(DragEvent);
DragOutEvent.type = 'drag:out';
var DragOverContainerEvent = exports.DragOverContainerEvent = /*#__PURE__*/function (_DragEvent5) {
  _inherits(DragOverContainerEvent, _DragEvent5);
  var _super6 = _createSuper(DragOverContainerEvent);
  function DragOverContainerEvent() {
    _classCallCheck(this, DragOverContainerEvent);
    return _super6.apply(this, arguments);
  }
  _createClass(DragOverContainerEvent, [{
    key: "overContainer",
    get: function get() {
      return this.data.overContainer;
    }
  }]);
  return DragOverContainerEvent;
}(DragEvent);
DragOverContainerEvent.type = 'drag:over:container';
var DragOutContainerEvent = exports.DragOutContainerEvent = /*#__PURE__*/function (_DragEvent6) {
  _inherits(DragOutContainerEvent, _DragEvent6);
  var _super7 = _createSuper(DragOutContainerEvent);
  function DragOutContainerEvent() {
    _classCallCheck(this, DragOutContainerEvent);
    return _super7.apply(this, arguments);
  }
  _createClass(DragOutContainerEvent, [{
    key: "overContainer",
    get: function get() {
      return this.data.overContainer;
    }
  }]);
  return DragOutContainerEvent;
}(DragEvent);
DragOutContainerEvent.type = 'drag:out:container';
var DragPressureEvent = exports.DragPressureEvent = /*#__PURE__*/function (_DragEvent7) {
  _inherits(DragPressureEvent, _DragEvent7);
  var _super8 = _createSuper(DragPressureEvent);
  function DragPressureEvent() {
    _classCallCheck(this, DragPressureEvent);
    return _super8.apply(this, arguments);
  }
  _createClass(DragPressureEvent, [{
    key: "pressure",
    get: function get() {
      return this.data.pressure;
    }
  }]);
  return DragPressureEvent;
}(DragEvent);
DragPressureEvent.type = 'drag:pressure';
var DragStopEvent = exports.DragStopEvent = /*#__PURE__*/function (_DragEvent8) {
  _inherits(DragStopEvent, _DragEvent8);
  var _super9 = _createSuper(DragStopEvent);
  function DragStopEvent() {
    _classCallCheck(this, DragStopEvent);
    return _super9.apply(this, arguments);
  }
  return _createClass(DragStopEvent);
}(DragEvent);
DragStopEvent.type = 'drag:stop';
DragStopEvent.cancelable = true;
var DragStoppedEvent = exports.DragStoppedEvent = /*#__PURE__*/function (_DragEvent9) {
  _inherits(DragStoppedEvent, _DragEvent9);
  var _super10 = _createSuper(DragStoppedEvent);
  function DragStoppedEvent() {
    _classCallCheck(this, DragStoppedEvent);
    return _super10.apply(this, arguments);
  }
  return _createClass(DragStoppedEvent);
}(DragEvent);
DragStoppedEvent.type = 'drag:stopped';

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Draggable.mjs":
/*!**********************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Draggable.mjs ***!
  \**********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultOptions = exports.default = void 0;
var _closest = _interopRequireDefault(__webpack_require__(/*! ../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _Announcement = _interopRequireDefault(__webpack_require__(/*! ./Plugins/Announcement/Announcement.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs"));
var _Focusable = _interopRequireDefault(__webpack_require__(/*! ./Plugins/Focusable/Focusable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Focusable/Focusable.mjs"));
var _Mirror = _interopRequireDefault(__webpack_require__(/*! ./Plugins/Mirror/Mirror.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/Mirror.mjs"));
var _Scrollable = _interopRequireDefault(__webpack_require__(/*! ./Plugins/Scrollable/Scrollable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Scrollable/Scrollable.mjs"));
var _Emitter = _interopRequireDefault(__webpack_require__(/*! ./Emitter/Emitter.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Emitter/Emitter.mjs"));
var _MouseSensor = _interopRequireDefault(__webpack_require__(/*! ./Sensors/MouseSensor/MouseSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/MouseSensor/MouseSensor.mjs"));
var _TouchSensor = _interopRequireDefault(__webpack_require__(/*! ./Sensors/TouchSensor/TouchSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs"));
__webpack_require__(/*! ./Sensors/SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
var _DraggableEvent = __webpack_require__(/*! ./DraggableEvent/DraggableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs");
var _DragEvent = __webpack_require__(/*! ./DragEvent/DragEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var onDragStart = Symbol('onDragStart');
var onDragMove = Symbol('onDragMove');
var onDragStop = Symbol('onDragStop');
var onDragPressure = Symbol('onDragPressure');
var dragStop = Symbol('dragStop');
var defaultAnnouncements = {
  'drag:start': function dragStart(event) {
    return "Picked up ".concat(event.source.textContent.trim() || event.source.id || 'draggable element');
  },
  'drag:stop': function dragStop(event) {
    return "Released ".concat(event.source.textContent.trim() || event.source.id || 'draggable element');
  }
};
var defaultClasses = {
  'container:dragging': 'draggable-container--is-dragging',
  'source:dragging': 'draggable-source--is-dragging',
  'source:placed': 'draggable-source--placed',
  'container:placed': 'draggable-container--placed',
  'body:dragging': 'draggable--is-dragging',
  'draggable:over': 'draggable--over',
  'container:over': 'draggable-container--over',
  'source:original': 'draggable--original',
  mirror: 'draggable-mirror'
};
var defaultOptions = exports.defaultOptions = {
  draggable: '.draggable-source',
  handle: null,
  delay: {},
  distance: 0,
  placedTimeout: 800,
  plugins: [],
  sensors: [],
  exclude: {
    plugins: [],
    sensors: []
  }
};
var Draggable = exports.default = /*#__PURE__*/function () {
  function Draggable() {
    var _this = this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [document.body];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Draggable);
    if (containers instanceof NodeList || containers instanceof Array) {
      this.containers = _toConsumableArray(containers);
    } else if (containers instanceof HTMLElement) {
      this.containers = [containers];
    } else {
      throw new Error('Draggable containers are expected to be of type `NodeList`, `HTMLElement[]` or `HTMLElement`');
    }
    this.options = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), options), {}, {
      classes: _objectSpread(_objectSpread({}, defaultClasses), options.classes || {}),
      announcements: _objectSpread(_objectSpread({}, defaultAnnouncements), options.announcements || {}),
      exclude: {
        plugins: options.exclude && options.exclude.plugins || [],
        sensors: options.exclude && options.exclude.sensors || []
      }
    });
    this.emitter = new _Emitter.default();
    this.dragging = false;
    this.plugins = [];
    this.sensors = [];
    this[onDragStart] = this[onDragStart].bind(this);
    this[onDragMove] = this[onDragMove].bind(this);
    this[onDragStop] = this[onDragStop].bind(this);
    this[onDragPressure] = this[onDragPressure].bind(this);
    this[dragStop] = this[dragStop].bind(this);
    document.addEventListener('drag:start', this[onDragStart], true);
    document.addEventListener('drag:move', this[onDragMove], true);
    document.addEventListener('drag:stop', this[onDragStop], true);
    document.addEventListener('drag:pressure', this[onDragPressure], true);
    var defaultPlugins = Object.values(Draggable.Plugins).filter(function (Plugin) {
      return !_this.options.exclude.plugins.includes(Plugin);
    });
    var defaultSensors = Object.values(Draggable.Sensors).filter(function (sensor) {
      return !_this.options.exclude.sensors.includes(sensor);
    });
    this.addPlugin.apply(this, [].concat(_toConsumableArray(defaultPlugins), _toConsumableArray(this.options.plugins)));
    this.addSensor.apply(this, [].concat(_toConsumableArray(defaultSensors), _toConsumableArray(this.options.sensors)));
    var draggableInitializedEvent = new _DraggableEvent.DraggableInitializedEvent({
      draggable: this
    });
    this.on('mirror:created', function (_ref) {
      var mirror = _ref.mirror;
      return _this.mirror = mirror;
    });
    this.on('mirror:destroy', function () {
      return _this.mirror = null;
    });
    this.trigger(draggableInitializedEvent);
  }
  _createClass(Draggable, [{
    key: "destroy",
    value: function destroy() {
      document.removeEventListener('drag:start', this[onDragStart], true);
      document.removeEventListener('drag:move', this[onDragMove], true);
      document.removeEventListener('drag:stop', this[onDragStop], true);
      document.removeEventListener('drag:pressure', this[onDragPressure], true);
      var draggableDestroyEvent = new _DraggableEvent.DraggableDestroyEvent({
        draggable: this
      });
      this.trigger(draggableDestroyEvent);
      this.removePlugin.apply(this, _toConsumableArray(this.plugins.map(function (plugin) {
        return plugin.constructor;
      })));
      this.removeSensor.apply(this, _toConsumableArray(this.sensors.map(function (sensor) {
        return sensor.constructor;
      })));
    }
  }, {
    key: "addPlugin",
    value: function addPlugin() {
      var _this2 = this;
      for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
        plugins[_key] = arguments[_key];
      }
      var activePlugins = plugins.map(function (Plugin) {
        return new Plugin(_this2);
      });
      activePlugins.forEach(function (plugin) {
        return plugin.attach();
      });
      this.plugins = [].concat(_toConsumableArray(this.plugins), _toConsumableArray(activePlugins));
      return this;
    }
  }, {
    key: "removePlugin",
    value: function removePlugin() {
      for (var _len2 = arguments.length, plugins = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        plugins[_key2] = arguments[_key2];
      }
      var removedPlugins = this.plugins.filter(function (plugin) {
        return plugins.includes(plugin.constructor);
      });
      removedPlugins.forEach(function (plugin) {
        return plugin.detach();
      });
      this.plugins = this.plugins.filter(function (plugin) {
        return !plugins.includes(plugin.constructor);
      });
      return this;
    }
  }, {
    key: "addSensor",
    value: function addSensor() {
      var _this3 = this;
      for (var _len3 = arguments.length, sensors = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        sensors[_key3] = arguments[_key3];
      }
      var activeSensors = sensors.map(function (Sensor) {
        return new Sensor(_this3.containers, _this3.options);
      });
      activeSensors.forEach(function (sensor) {
        return sensor.attach();
      });
      this.sensors = [].concat(_toConsumableArray(this.sensors), _toConsumableArray(activeSensors));
      return this;
    }
  }, {
    key: "removeSensor",
    value: function removeSensor() {
      for (var _len4 = arguments.length, sensors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        sensors[_key4] = arguments[_key4];
      }
      var removedSensors = this.sensors.filter(function (sensor) {
        return sensors.includes(sensor.constructor);
      });
      removedSensors.forEach(function (sensor) {
        return sensor.detach();
      });
      this.sensors = this.sensors.filter(function (sensor) {
        return !sensors.includes(sensor.constructor);
      });
      return this;
    }
  }, {
    key: "addContainer",
    value: function addContainer() {
      for (var _len5 = arguments.length, containers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        containers[_key5] = arguments[_key5];
      }
      this.containers = [].concat(_toConsumableArray(this.containers), containers);
      this.sensors.forEach(function (sensor) {
        return sensor.addContainer.apply(sensor, containers);
      });
      return this;
    }
  }, {
    key: "removeContainer",
    value: function removeContainer() {
      for (var _len6 = arguments.length, containers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        containers[_key6] = arguments[_key6];
      }
      this.containers = this.containers.filter(function (container) {
        return !containers.includes(container);
      });
      this.sensors.forEach(function (sensor) {
        return sensor.removeContainer.apply(sensor, containers);
      });
      return this;
    }
  }, {
    key: "on",
    value: function on(type) {
      var _this$emitter;
      for (var _len7 = arguments.length, callbacks = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        callbacks[_key7 - 1] = arguments[_key7];
      }
      (_this$emitter = this.emitter).on.apply(_this$emitter, [type].concat(callbacks));
      return this;
    }
  }, {
    key: "off",
    value: function off(type, callback) {
      this.emitter.off(type, callback);
      return this;
    }
  }, {
    key: "trigger",
    value: function trigger(event) {
      this.emitter.trigger(event);
      return this;
    }
  }, {
    key: "getClassNameFor",
    value: function getClassNameFor(name) {
      return this.getClassNamesFor(name)[0];
    }
  }, {
    key: "getClassNamesFor",
    value: function getClassNamesFor(name) {
      var classNames = this.options.classes[name];
      if (classNames instanceof Array) {
        return classNames;
      } else if (typeof classNames === 'string' || classNames instanceof String) {
        return [classNames];
      } else {
        return [];
      }
    }
  }, {
    key: "isDragging",
    value: function isDragging() {
      return Boolean(this.dragging);
    }
  }, {
    key: "getDraggableElements",
    value: function getDraggableElements() {
      var _this4 = this;
      return this.containers.reduce(function (current, container) {
        return [].concat(_toConsumableArray(current), _toConsumableArray(_this4.getDraggableElementsForContainer(container)));
      }, []);
    }
  }, {
    key: "getDraggableElementsForContainer",
    value: function getDraggableElementsForContainer(container) {
      var _this5 = this;
      var allDraggableElements = container.querySelectorAll(this.options.draggable);
      return _toConsumableArray(allDraggableElements).filter(function (childElement) {
        return childElement !== _this5.originalSource && childElement !== _this5.mirror;
      });
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this[dragStop]();
    }
  }, {
    key: onDragStart,
    value: function value(event) {
      var _this$originalSource$,
        _this$source$classLis,
        _this$sourceContainer,
        _document$body$classL,
        _this6 = this;
      var sensorEvent = getSensorEvent(event);
      var target = sensorEvent.target,
        container = sensorEvent.container,
        originalSource = sensorEvent.originalSource;
      if (!this.containers.includes(container)) {
        return;
      }
      if (this.options.handle && target && !(0, _closest.default)(target, this.options.handle)) {
        sensorEvent.cancel();
        return;
      }
      this.originalSource = originalSource;
      this.sourceContainer = container;
      if (this.lastPlacedSource && this.lastPlacedContainer) {
        var _this$lastPlacedSourc, _this$lastPlacedConta;
        clearTimeout(this.placedTimeoutID);
        (_this$lastPlacedSourc = this.lastPlacedSource.classList).remove.apply(_this$lastPlacedSourc, _toConsumableArray(this.getClassNamesFor('source:placed')));
        (_this$lastPlacedConta = this.lastPlacedContainer.classList).remove.apply(_this$lastPlacedConta, _toConsumableArray(this.getClassNamesFor('container:placed')));
      }
      this.source = this.originalSource.cloneNode(true);
      this.originalSource.parentNode.insertBefore(this.source, this.originalSource);
      this.originalSource.style.display = 'none';
      var dragStartEvent = new _DragEvent.DragStartEvent({
        source: this.source,
        originalSource: this.originalSource,
        sourceContainer: container,
        sensorEvent: sensorEvent
      });
      this.trigger(dragStartEvent);
      this.dragging = !dragStartEvent.canceled();
      if (dragStartEvent.canceled()) {
        this.source.remove();
        this.originalSource.style.display = null;
        return;
      }
      (_this$originalSource$ = this.originalSource.classList).add.apply(_this$originalSource$, _toConsumableArray(this.getClassNamesFor('source:original')));
      (_this$source$classLis = this.source.classList).add.apply(_this$source$classLis, _toConsumableArray(this.getClassNamesFor('source:dragging')));
      (_this$sourceContainer = this.sourceContainer.classList).add.apply(_this$sourceContainer, _toConsumableArray(this.getClassNamesFor('container:dragging')));
      (_document$body$classL = document.body.classList).add.apply(_document$body$classL, _toConsumableArray(this.getClassNamesFor('body:dragging')));
      applyUserSelect(document.body, 'none');
      requestAnimationFrame(function () {
        var oldSensorEvent = getSensorEvent(event);
        var newSensorEvent = oldSensorEvent.clone({
          target: _this6.source
        });
        _this6[onDragMove](_objectSpread(_objectSpread({}, event), {}, {
          detail: newSensorEvent
        }));
      });
    }
  }, {
    key: onDragMove,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var sensorEvent = getSensorEvent(event);
      var container = sensorEvent.container;
      var target = sensorEvent.target;
      var dragMoveEvent = new _DragEvent.DragMoveEvent({
        source: this.source,
        originalSource: this.originalSource,
        sourceContainer: container,
        sensorEvent: sensorEvent
      });
      this.trigger(dragMoveEvent);
      if (dragMoveEvent.canceled()) {
        sensorEvent.cancel();
      }
      target = (0, _closest.default)(target, this.options.draggable);
      var withinCorrectContainer = (0, _closest.default)(sensorEvent.target, this.containers);
      var overContainer = sensorEvent.overContainer || withinCorrectContainer;
      var isLeavingContainer = this.currentOverContainer && overContainer !== this.currentOverContainer;
      var isLeavingDraggable = this.currentOver && target !== this.currentOver;
      var isOverContainer = overContainer && this.currentOverContainer !== overContainer;
      var isOverDraggable = withinCorrectContainer && target && this.currentOver !== target;
      if (isLeavingDraggable) {
        var _this$currentOver$cla;
        var dragOutEvent = new _DragEvent.DragOutEvent({
          source: this.source,
          originalSource: this.originalSource,
          sourceContainer: container,
          sensorEvent: sensorEvent,
          over: this.currentOver,
          overContainer: this.currentOverContainer
        });
        (_this$currentOver$cla = this.currentOver.classList).remove.apply(_this$currentOver$cla, _toConsumableArray(this.getClassNamesFor('draggable:over')));
        this.currentOver = null;
        this.trigger(dragOutEvent);
      }
      if (isLeavingContainer) {
        var _this$currentOverCont;
        var dragOutContainerEvent = new _DragEvent.DragOutContainerEvent({
          source: this.source,
          originalSource: this.originalSource,
          sourceContainer: container,
          sensorEvent: sensorEvent,
          overContainer: this.currentOverContainer
        });
        (_this$currentOverCont = this.currentOverContainer.classList).remove.apply(_this$currentOverCont, _toConsumableArray(this.getClassNamesFor('container:over')));
        this.currentOverContainer = null;
        this.trigger(dragOutContainerEvent);
      }
      if (isOverContainer) {
        var _overContainer$classL;
        (_overContainer$classL = overContainer.classList).add.apply(_overContainer$classL, _toConsumableArray(this.getClassNamesFor('container:over')));
        var dragOverContainerEvent = new _DragEvent.DragOverContainerEvent({
          source: this.source,
          originalSource: this.originalSource,
          sourceContainer: container,
          sensorEvent: sensorEvent,
          overContainer: overContainer
        });
        this.currentOverContainer = overContainer;
        this.trigger(dragOverContainerEvent);
      }
      if (isOverDraggable) {
        var _target$classList;
        (_target$classList = target.classList).add.apply(_target$classList, _toConsumableArray(this.getClassNamesFor('draggable:over')));
        var dragOverEvent = new _DragEvent.DragOverEvent({
          source: this.source,
          originalSource: this.originalSource,
          sourceContainer: container,
          sensorEvent: sensorEvent,
          overContainer: overContainer,
          over: target
        });
        this.currentOver = target;
        this.trigger(dragOverEvent);
      }
    }
  }, {
    key: dragStop,
    value: function value(event) {
      var _this$source$classLis2,
        _this$originalSource$2,
        _this$originalSource$3,
        _this$sourceContainer2,
        _this$sourceContainer3,
        _document$body$classL2,
        _this7 = this;
      if (!this.dragging) {
        return;
      }
      this.dragging = false;
      var dragStopEvent = new _DragEvent.DragStopEvent({
        source: this.source,
        originalSource: this.originalSource,
        sensorEvent: event ? event.sensorEvent : null,
        sourceContainer: this.sourceContainer
      });
      this.trigger(dragStopEvent);
      if (!dragStopEvent.canceled()) this.source.parentNode.insertBefore(this.originalSource, this.source);
      this.source.remove();
      this.originalSource.style.display = '';
      (_this$source$classLis2 = this.source.classList).remove.apply(_this$source$classLis2, _toConsumableArray(this.getClassNamesFor('source:dragging')));
      (_this$originalSource$2 = this.originalSource.classList).remove.apply(_this$originalSource$2, _toConsumableArray(this.getClassNamesFor('source:original')));
      (_this$originalSource$3 = this.originalSource.classList).add.apply(_this$originalSource$3, _toConsumableArray(this.getClassNamesFor('source:placed')));
      (_this$sourceContainer2 = this.sourceContainer.classList).add.apply(_this$sourceContainer2, _toConsumableArray(this.getClassNamesFor('container:placed')));
      (_this$sourceContainer3 = this.sourceContainer.classList).remove.apply(_this$sourceContainer3, _toConsumableArray(this.getClassNamesFor('container:dragging')));
      (_document$body$classL2 = document.body.classList).remove.apply(_document$body$classL2, _toConsumableArray(this.getClassNamesFor('body:dragging')));
      applyUserSelect(document.body, '');
      if (this.currentOver) {
        var _this$currentOver$cla2;
        (_this$currentOver$cla2 = this.currentOver.classList).remove.apply(_this$currentOver$cla2, _toConsumableArray(this.getClassNamesFor('draggable:over')));
      }
      if (this.currentOverContainer) {
        var _this$currentOverCont2;
        (_this$currentOverCont2 = this.currentOverContainer.classList).remove.apply(_this$currentOverCont2, _toConsumableArray(this.getClassNamesFor('container:over')));
      }
      this.lastPlacedSource = this.originalSource;
      this.lastPlacedContainer = this.sourceContainer;
      this.placedTimeoutID = setTimeout(function () {
        if (_this7.lastPlacedSource) {
          var _this7$lastPlacedSour;
          (_this7$lastPlacedSour = _this7.lastPlacedSource.classList).remove.apply(_this7$lastPlacedSour, _toConsumableArray(_this7.getClassNamesFor('source:placed')));
        }
        if (_this7.lastPlacedContainer) {
          var _this7$lastPlacedCont;
          (_this7$lastPlacedCont = _this7.lastPlacedContainer.classList).remove.apply(_this7$lastPlacedCont, _toConsumableArray(_this7.getClassNamesFor('container:placed')));
        }
        _this7.lastPlacedSource = null;
        _this7.lastPlacedContainer = null;
      }, this.options.placedTimeout);
      var dragStoppedEvent = new _DragEvent.DragStoppedEvent({
        source: this.source,
        originalSource: this.originalSource,
        sensorEvent: event ? event.sensorEvent : null,
        sourceContainer: this.sourceContainer
      });
      this.trigger(dragStoppedEvent);
      this.source = null;
      this.originalSource = null;
      this.currentOverContainer = null;
      this.currentOver = null;
      this.sourceContainer = null;
    }
  }, {
    key: onDragStop,
    value: function value(event) {
      this[dragStop](event);
    }
  }, {
    key: onDragPressure,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var sensorEvent = getSensorEvent(event);
      var source = this.source || (0, _closest.default)(sensorEvent.originalEvent.target, this.options.draggable);
      var dragPressureEvent = new _DragEvent.DragPressureEvent({
        sensorEvent: sensorEvent,
        source: source,
        pressure: sensorEvent.pressure
      });
      this.trigger(dragPressureEvent);
    }
  }]);
  return Draggable;
}();
Draggable.Plugins = {
  Announcement: _Announcement.default,
  Focusable: _Focusable.default,
  Mirror: _Mirror.default,
  Scrollable: _Scrollable.default
};
Draggable.Sensors = {
  MouseSensor: _MouseSensor.default,
  TouchSensor: _TouchSensor.default
};
function getSensorEvent(event) {
  return event.detail;
}
function applyUserSelect(element, value) {
  element.style.webkitUserSelect = value;
  element.style.mozUserSelect = value;
  element.style.msUserSelect = value;
  element.style.oUserSelect = value;
  element.style.userSelect = value;
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs ***!
  \******************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DraggableInitializedEvent = exports.DraggableEvent = exports.DraggableDestroyEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var DraggableEvent = exports.DraggableEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(DraggableEvent, _AbstractEvent);
  var _super = _createSuper(DraggableEvent);
  function DraggableEvent() {
    _classCallCheck(this, DraggableEvent);
    return _super.apply(this, arguments);
  }
  _createClass(DraggableEvent, [{
    key: "draggable",
    get: function get() {
      return this.data.draggable;
    }
  }]);
  return DraggableEvent;
}(_AbstractEvent2.AbstractEvent);
DraggableEvent.type = 'draggable';
var DraggableInitializedEvent = exports.DraggableInitializedEvent = /*#__PURE__*/function (_DraggableEvent) {
  _inherits(DraggableInitializedEvent, _DraggableEvent);
  var _super2 = _createSuper(DraggableInitializedEvent);
  function DraggableInitializedEvent() {
    _classCallCheck(this, DraggableInitializedEvent);
    return _super2.apply(this, arguments);
  }
  return _createClass(DraggableInitializedEvent);
}(DraggableEvent);
DraggableInitializedEvent.type = 'draggable:initialize';
var DraggableDestroyEvent = exports.DraggableDestroyEvent = /*#__PURE__*/function (_DraggableEvent2) {
  _inherits(DraggableDestroyEvent, _DraggableEvent2);
  var _super3 = _createSuper(DraggableDestroyEvent);
  function DraggableDestroyEvent() {
    _classCallCheck(this, DraggableDestroyEvent);
    return _super3.apply(this, arguments);
  }
  return _createClass(DraggableDestroyEvent);
}(DraggableEvent);
DraggableDestroyEvent.type = 'draggable:destroy';

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Emitter/Emitter.mjs":
/*!****************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Emitter/Emitter.mjs ***!
  \****************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Emitter = exports.default = /*#__PURE__*/function () {
  function Emitter() {
    _classCallCheck(this, Emitter);
    this.callbacks = {};
  }
  _createClass(Emitter, [{
    key: "on",
    value: function on(type) {
      var _this$callbacks$type;
      if (!this.callbacks[type]) {
        this.callbacks[type] = [];
      }
      for (var _len = arguments.length, callbacks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        callbacks[_key - 1] = arguments[_key];
      }
      (_this$callbacks$type = this.callbacks[type]).push.apply(_this$callbacks$type, callbacks);
      return this;
    }
  }, {
    key: "off",
    value: function off(type, callback) {
      if (!this.callbacks[type]) {
        return null;
      }
      var copy = this.callbacks[type].slice(0);
      for (var i = 0; i < copy.length; i++) {
        if (callback === copy[i]) {
          this.callbacks[type].splice(i, 1);
        }
      }
      return this;
    }
  }, {
    key: "trigger",
    value: function trigger(event) {
      if (!this.callbacks[event.type]) {
        return null;
      }
      var callbacks = _toConsumableArray(this.callbacks[event.type]);
      var caughtErrors = [];
      for (var i = callbacks.length - 1; i >= 0; i--) {
        var callback = callbacks[i];
        try {
          callback(event);
        } catch (error) {
          caughtErrors.push(error);
        }
      }
      if (caughtErrors.length) {
        console.error("Draggable caught errors while triggering '".concat(event.type, "'"), caughtErrors);
      }
      return this;
    }
  }]);
  return Emitter;
}();

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs ***!
  \**********************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultOptions = exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onInitialize = Symbol('onInitialize');
var onDestroy = Symbol('onDestroy');
var announceEvent = Symbol('announceEvent');
var announceMessage = Symbol('announceMessage');
var ARIA_RELEVANT = 'aria-relevant';
var ARIA_ATOMIC = 'aria-atomic';
var ARIA_LIVE = 'aria-live';
var ROLE = 'role';
var defaultOptions = exports.defaultOptions = {
  expire: 7000
};
var Announcement = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(Announcement, _AbstractPlugin);
  var _super = _createSuper(Announcement);
  function Announcement(draggable) {
    var _this;
    _classCallCheck(this, Announcement);
    _this = _super.call(this, draggable);
    _this.options = _objectSpread(_objectSpread({}, defaultOptions), _this.getOptions());
    _this.originalTriggerMethod = _this.draggable.trigger;
    _this[onInitialize] = _this[onInitialize].bind(_assertThisInitialized(_this));
    _this[onDestroy] = _this[onDestroy].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Announcement, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('draggable:initialize', this[onInitialize]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('draggable:destroy', this[onDestroy]);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.announcements || {};
    }
  }, {
    key: announceEvent,
    value: function value(event) {
      var message = this.options[event.type];
      if (message && typeof message === 'string') {
        this[announceMessage](message);
      }
      if (message && typeof message === 'function') {
        this[announceMessage](message(event));
      }
    }
  }, {
    key: announceMessage,
    value: function value(message) {
      announce(message, {
        expire: this.options.expire
      });
    }
  }, {
    key: onInitialize,
    value: function value() {
      var _this2 = this;
      this.draggable.trigger = function (event) {
        try {
          _this2[announceEvent](event);
        } finally {
          _this2.originalTriggerMethod.call(_this2.draggable, event);
        }
      };
    }
  }, {
    key: onDestroy,
    value: function value() {
      this.draggable.trigger = this.originalTriggerMethod;
    }
  }]);
  return Announcement;
}(_AbstractPlugin2.AbstractPlugin);
var liveRegion = createRegion();
function announce(message, _ref) {
  var expire = _ref.expire;
  var element = document.createElement('div');
  element.textContent = message;
  liveRegion.appendChild(element);
  return setTimeout(function () {
    liveRegion.removeChild(element);
  }, expire);
}
function createRegion() {
  var element = document.createElement('div');
  element.setAttribute('id', 'draggable-live-region');
  element.setAttribute(ARIA_RELEVANT, 'additions');
  element.setAttribute(ARIA_ATOMIC, 'true');
  element.setAttribute(ARIA_LIVE, 'assertive');
  element.setAttribute(ROLE, 'log');
  element.style.position = 'fixed';
  element.style.width = '1px';
  element.style.height = '1px';
  element.style.top = '-1px';
  element.style.overflow = 'hidden';
  return element;
}
document.addEventListener('DOMContentLoaded', function () {
  document.body.appendChild(liveRegion);
});

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Focusable/Focusable.mjs":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Focusable/Focusable.mjs ***!
  \****************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onInitialize = Symbol('onInitialize');
var onDestroy = Symbol('onDestroy');
var defaultOptions = {};
var Focusable = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(Focusable, _AbstractPlugin);
  var _super = _createSuper(Focusable);
  function Focusable(draggable) {
    var _this;
    _classCallCheck(this, Focusable);
    _this = _super.call(this, draggable);
    _this.options = _objectSpread(_objectSpread({}, defaultOptions), _this.getOptions());
    _this[onInitialize] = _this[onInitialize].bind(_assertThisInitialized(_this));
    _this[onDestroy] = _this[onDestroy].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Focusable, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('draggable:initialize', this[onInitialize]).on('draggable:destroy', this[onDestroy]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('draggable:initialize', this[onInitialize]).off('draggable:destroy', this[onDestroy]);
      this[onDestroy]();
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.focusable || {};
    }
  }, {
    key: "getElements",
    value: function getElements() {
      return [].concat(_toConsumableArray(this.draggable.containers), _toConsumableArray(this.draggable.getDraggableElements()));
    }
  }, {
    key: onInitialize,
    value: function value() {
      var _this2 = this;
      requestAnimationFrame(function () {
        _this2.getElements().forEach(function (element) {
          return decorateElement(element);
        });
      });
    }
  }, {
    key: onDestroy,
    value: function value() {
      var _this3 = this;
      requestAnimationFrame(function () {
        _this3.getElements().forEach(function (element) {
          return stripElement(element);
        });
      });
    }
  }]);
  return Focusable;
}(_AbstractPlugin2.AbstractPlugin);
var elementsWithMissingTabIndex = [];
function decorateElement(element) {
  var hasMissingTabIndex = Boolean(!element.getAttribute('tabindex') && element.tabIndex === -1);
  if (hasMissingTabIndex) {
    elementsWithMissingTabIndex.push(element);
    element.tabIndex = 0;
  }
}
function stripElement(element) {
  var tabIndexElementPosition = elementsWithMissingTabIndex.indexOf(element);
  if (tabIndexElementPosition !== -1) {
    element.tabIndex = -1;
    elementsWithMissingTabIndex.splice(tabIndexElementPosition, 1);
  }
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/Mirror.mjs":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/Mirror.mjs ***!
  \**********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onScroll = exports.onMirrorMove = exports.onMirrorCreated = exports.onDragStop = exports.onDragStart = exports.onDragMove = exports.getAppendableContainer = exports.defaultOptions = exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var _MirrorEvent = __webpack_require__(/*! ./MirrorEvent/MirrorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs");
var _excluded = ["mirrorOffset", "initialX", "initialY"],
  _excluded2 = ["lastMovedX", "lastMovedY"],
  _excluded3 = ["source"],
  _excluded4 = ["sensorEvent", "sourceRect", "options"],
  _excluded5 = ["mirror", "source", "options"],
  _excluded6 = ["mirror", "mirrorClasses"],
  _excluded7 = ["mirror"],
  _excluded8 = ["mirror", "sensorEvent", "mirrorOffset", "initialY", "initialX", "scrollOffset", "options", "passedThreshX", "passedThreshY", "lastMovedX", "lastMovedY"];
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragStart = exports.onDragStart = Symbol('onDragStart');
var onDragMove = exports.onDragMove = Symbol('onDragMove');
var onDragStop = exports.onDragStop = Symbol('onDragStop');
var onMirrorCreated = exports.onMirrorCreated = Symbol('onMirrorCreated');
var onMirrorMove = exports.onMirrorMove = Symbol('onMirrorMove');
var onScroll = exports.onScroll = Symbol('onScroll');
var getAppendableContainer = exports.getAppendableContainer = Symbol('getAppendableContainer');
var defaultOptions = exports.defaultOptions = {
  constrainDimensions: false,
  xAxis: true,
  yAxis: true,
  cursorOffsetX: null,
  cursorOffsetY: null,
  thresholdX: null,
  thresholdY: null
};
var Mirror = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(Mirror, _AbstractPlugin);
  var _super = _createSuper(Mirror);
  function Mirror(draggable) {
    var _this;
    _classCallCheck(this, Mirror);
    _this = _super.call(this, draggable);
    _this.options = _objectSpread(_objectSpread({}, defaultOptions), _this.getOptions());
    _this.scrollOffset = {
      x: 0,
      y: 0
    };
    _this.initialScrollOffset = {
      x: window.scrollX,
      y: window.scrollY
    };
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragMove] = _this[onDragMove].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this[onMirrorCreated] = _this[onMirrorCreated].bind(_assertThisInitialized(_this));
    _this[onMirrorMove] = _this[onMirrorMove].bind(_assertThisInitialized(_this));
    _this[onScroll] = _this[onScroll].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Mirror, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]).on('mirror:created', this[onMirrorCreated]).on('mirror:move', this[onMirrorMove]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]).off('mirror:created', this[onMirrorCreated]).off('mirror:move', this[onMirrorMove]);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.mirror || {};
    }
  }, {
    key: onDragStart,
    value: function value(dragEvent) {
      if (dragEvent.canceled()) {
        return;
      }
      if ('ontouchstart' in window) {
        document.addEventListener('scroll', this[onScroll], true);
      }
      this.initialScrollOffset = {
        x: window.scrollX,
        y: window.scrollY
      };
      var source = dragEvent.source,
        originalSource = dragEvent.originalSource,
        sourceContainer = dragEvent.sourceContainer,
        sensorEvent = dragEvent.sensorEvent;
      this.lastMirrorMovedClient = {
        x: sensorEvent.clientX,
        y: sensorEvent.clientY
      };
      var mirrorCreateEvent = new _MirrorEvent.MirrorCreateEvent({
        source: source,
        originalSource: originalSource,
        sourceContainer: sourceContainer,
        sensorEvent: sensorEvent,
        dragEvent: dragEvent
      });
      this.draggable.trigger(mirrorCreateEvent);
      if (isNativeDragEvent(sensorEvent) || mirrorCreateEvent.canceled()) {
        return;
      }
      var appendableContainer = this[getAppendableContainer](source) || sourceContainer;
      this.mirror = source.cloneNode(true);
      var mirrorCreatedEvent = new _MirrorEvent.MirrorCreatedEvent({
        source: source,
        originalSource: originalSource,
        sourceContainer: sourceContainer,
        sensorEvent: sensorEvent,
        dragEvent: dragEvent,
        mirror: this.mirror
      });
      var mirrorAttachedEvent = new _MirrorEvent.MirrorAttachedEvent({
        source: source,
        originalSource: originalSource,
        sourceContainer: sourceContainer,
        sensorEvent: sensorEvent,
        dragEvent: dragEvent,
        mirror: this.mirror
      });
      this.draggable.trigger(mirrorCreatedEvent);
      appendableContainer.appendChild(this.mirror);
      this.draggable.trigger(mirrorAttachedEvent);
    }
  }, {
    key: onDragMove,
    value: function value(dragEvent) {
      if (!this.mirror || dragEvent.canceled()) {
        return;
      }
      var source = dragEvent.source,
        originalSource = dragEvent.originalSource,
        sourceContainer = dragEvent.sourceContainer,
        sensorEvent = dragEvent.sensorEvent;
      var passedThreshX = true;
      var passedThreshY = true;
      if (this.options.thresholdX || this.options.thresholdY) {
        var _this$lastMirrorMoved = this.lastMirrorMovedClient,
          lastX = _this$lastMirrorMoved.x,
          lastY = _this$lastMirrorMoved.y;
        if (Math.abs(lastX - sensorEvent.clientX) < this.options.thresholdX) {
          passedThreshX = false;
        } else {
          this.lastMirrorMovedClient.x = sensorEvent.clientX;
        }
        if (Math.abs(lastY - sensorEvent.clientY) < this.options.thresholdY) {
          passedThreshY = false;
        } else {
          this.lastMirrorMovedClient.y = sensorEvent.clientY;
        }
        if (!passedThreshX && !passedThreshY) {
          return;
        }
      }
      var mirrorMoveEvent = new _MirrorEvent.MirrorMoveEvent({
        source: source,
        originalSource: originalSource,
        sourceContainer: sourceContainer,
        sensorEvent: sensorEvent,
        dragEvent: dragEvent,
        mirror: this.mirror,
        passedThreshX: passedThreshX,
        passedThreshY: passedThreshY
      });
      this.draggable.trigger(mirrorMoveEvent);
    }
  }, {
    key: onDragStop,
    value: function value(dragEvent) {
      if ('ontouchstart' in window) {
        document.removeEventListener('scroll', this[onScroll], true);
      }
      this.initialScrollOffset = {
        x: 0,
        y: 0
      };
      this.scrollOffset = {
        x: 0,
        y: 0
      };
      if (!this.mirror) {
        return;
      }
      var source = dragEvent.source,
        sourceContainer = dragEvent.sourceContainer,
        sensorEvent = dragEvent.sensorEvent;
      var mirrorDestroyEvent = new _MirrorEvent.MirrorDestroyEvent({
        source: source,
        mirror: this.mirror,
        sourceContainer: sourceContainer,
        sensorEvent: sensorEvent,
        dragEvent: dragEvent
      });
      this.draggable.trigger(mirrorDestroyEvent);
      if (!mirrorDestroyEvent.canceled()) {
        this.mirror.remove();
      }
    }
  }, {
    key: onScroll,
    value: function value() {
      this.scrollOffset = {
        x: window.scrollX - this.initialScrollOffset.x,
        y: window.scrollY - this.initialScrollOffset.y
      };
    }
  }, {
    key: onMirrorCreated,
    value: function value(_ref) {
      var _this2 = this;
      var mirror = _ref.mirror,
        source = _ref.source,
        sensorEvent = _ref.sensorEvent;
      var mirrorClasses = this.draggable.getClassNamesFor('mirror');
      var setState = function setState(_ref2) {
        var mirrorOffset = _ref2.mirrorOffset,
          initialX = _ref2.initialX,
          initialY = _ref2.initialY,
          args = _objectWithoutProperties(_ref2, _excluded);
        _this2.mirrorOffset = mirrorOffset;
        _this2.initialX = initialX;
        _this2.initialY = initialY;
        _this2.lastMovedX = initialX;
        _this2.lastMovedY = initialY;
        return _objectSpread({
          mirrorOffset: mirrorOffset,
          initialX: initialX,
          initialY: initialY
        }, args);
      };
      mirror.style.display = 'none';
      var initialState = {
        mirror: mirror,
        source: source,
        sensorEvent: sensorEvent,
        mirrorClasses: mirrorClasses,
        scrollOffset: this.scrollOffset,
        options: this.options,
        passedThreshX: true,
        passedThreshY: true
      };
      return Promise.resolve(initialState).then(computeMirrorDimensions).then(calculateMirrorOffset).then(resetMirror).then(addMirrorClasses).then(positionMirror({
        initial: true
      })).then(removeMirrorID).then(setState);
    }
  }, {
    key: onMirrorMove,
    value: function value(mirrorEvent) {
      var _this3 = this;
      if (mirrorEvent.canceled()) {
        return null;
      }
      var setState = function setState(_ref3) {
        var lastMovedX = _ref3.lastMovedX,
          lastMovedY = _ref3.lastMovedY,
          args = _objectWithoutProperties(_ref3, _excluded2);
        _this3.lastMovedX = lastMovedX;
        _this3.lastMovedY = lastMovedY;
        return _objectSpread({
          lastMovedX: lastMovedX,
          lastMovedY: lastMovedY
        }, args);
      };
      var triggerMoved = function triggerMoved(args) {
        var mirrorMovedEvent = new _MirrorEvent.MirrorMovedEvent({
          source: mirrorEvent.source,
          originalSource: mirrorEvent.originalSource,
          sourceContainer: mirrorEvent.sourceContainer,
          sensorEvent: mirrorEvent.sensorEvent,
          dragEvent: mirrorEvent.dragEvent,
          mirror: _this3.mirror,
          passedThreshX: mirrorEvent.passedThreshX,
          passedThreshY: mirrorEvent.passedThreshY
        });
        _this3.draggable.trigger(mirrorMovedEvent);
        return args;
      };
      var initialState = {
        mirror: mirrorEvent.mirror,
        sensorEvent: mirrorEvent.sensorEvent,
        mirrorOffset: this.mirrorOffset,
        options: this.options,
        initialX: this.initialX,
        initialY: this.initialY,
        scrollOffset: this.scrollOffset,
        passedThreshX: mirrorEvent.passedThreshX,
        passedThreshY: mirrorEvent.passedThreshY,
        lastMovedX: this.lastMovedX,
        lastMovedY: this.lastMovedY
      };
      return Promise.resolve(initialState).then(positionMirror({
        raf: true
      })).then(setState).then(triggerMoved);
    }
  }, {
    key: getAppendableContainer,
    value: function value(source) {
      var appendTo = this.options.appendTo;
      if (typeof appendTo === 'string') {
        return document.querySelector(appendTo);
      } else if (appendTo instanceof HTMLElement) {
        return appendTo;
      } else if (typeof appendTo === 'function') {
        return appendTo(source);
      } else {
        return source.parentNode;
      }
    }
  }]);
  return Mirror;
}(_AbstractPlugin2.AbstractPlugin);
function computeMirrorDimensions(_ref4) {
  var source = _ref4.source,
    args = _objectWithoutProperties(_ref4, _excluded3);
  return withPromise(function (resolve) {
    var sourceRect = source.getBoundingClientRect();
    resolve(_objectSpread({
      source: source,
      sourceRect: sourceRect
    }, args));
  });
}
function calculateMirrorOffset(_ref5) {
  var sensorEvent = _ref5.sensorEvent,
    sourceRect = _ref5.sourceRect,
    options = _ref5.options,
    args = _objectWithoutProperties(_ref5, _excluded4);
  return withPromise(function (resolve) {
    var top = options.cursorOffsetY === null ? sensorEvent.clientY - sourceRect.top : options.cursorOffsetY;
    var left = options.cursorOffsetX === null ? sensorEvent.clientX - sourceRect.left : options.cursorOffsetX;
    var mirrorOffset = {
      top: top,
      left: left
    };
    resolve(_objectSpread({
      sensorEvent: sensorEvent,
      sourceRect: sourceRect,
      mirrorOffset: mirrorOffset,
      options: options
    }, args));
  });
}
function resetMirror(_ref6) {
  var mirror = _ref6.mirror,
    source = _ref6.source,
    options = _ref6.options,
    args = _objectWithoutProperties(_ref6, _excluded5);
  return withPromise(function (resolve) {
    var offsetHeight;
    var offsetWidth;
    if (options.constrainDimensions) {
      var computedSourceStyles = getComputedStyle(source);
      offsetHeight = computedSourceStyles.getPropertyValue('height');
      offsetWidth = computedSourceStyles.getPropertyValue('width');
    }
    mirror.style.display = null;
    mirror.style.position = 'fixed';
    mirror.style.pointerEvents = 'none';
    mirror.style.top = 0;
    mirror.style.left = 0;
    mirror.style.margin = 0;
    if (options.constrainDimensions) {
      mirror.style.height = offsetHeight;
      mirror.style.width = offsetWidth;
    }
    resolve(_objectSpread({
      mirror: mirror,
      source: source,
      options: options
    }, args));
  });
}
function addMirrorClasses(_ref7) {
  var mirror = _ref7.mirror,
    mirrorClasses = _ref7.mirrorClasses,
    args = _objectWithoutProperties(_ref7, _excluded6);
  return withPromise(function (resolve) {
    var _mirror$classList;
    (_mirror$classList = mirror.classList).add.apply(_mirror$classList, _toConsumableArray(mirrorClasses));
    resolve(_objectSpread({
      mirror: mirror,
      mirrorClasses: mirrorClasses
    }, args));
  });
}
function removeMirrorID(_ref8) {
  var mirror = _ref8.mirror,
    args = _objectWithoutProperties(_ref8, _excluded7);
  return withPromise(function (resolve) {
    mirror.removeAttribute('id');
    delete mirror.id;
    resolve(_objectSpread({
      mirror: mirror
    }, args));
  });
}
function positionMirror() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref9$withFrame = _ref9.withFrame,
    withFrame = _ref9$withFrame === void 0 ? false : _ref9$withFrame,
    _ref9$initial = _ref9.initial,
    initial = _ref9$initial === void 0 ? false : _ref9$initial;
  return function (_ref10) {
    var mirror = _ref10.mirror,
      sensorEvent = _ref10.sensorEvent,
      mirrorOffset = _ref10.mirrorOffset,
      initialY = _ref10.initialY,
      initialX = _ref10.initialX,
      scrollOffset = _ref10.scrollOffset,
      options = _ref10.options,
      passedThreshX = _ref10.passedThreshX,
      passedThreshY = _ref10.passedThreshY,
      lastMovedX = _ref10.lastMovedX,
      lastMovedY = _ref10.lastMovedY,
      args = _objectWithoutProperties(_ref10, _excluded8);
    return withPromise(function (resolve) {
      var result = _objectSpread({
        mirror: mirror,
        sensorEvent: sensorEvent,
        mirrorOffset: mirrorOffset,
        options: options
      }, args);
      if (mirrorOffset) {
        var x = passedThreshX ? Math.round((sensorEvent.clientX - mirrorOffset.left - scrollOffset.x) / (options.thresholdX || 1)) * (options.thresholdX || 1) : Math.round(lastMovedX);
        var y = passedThreshY ? Math.round((sensorEvent.clientY - mirrorOffset.top - scrollOffset.y) / (options.thresholdY || 1)) * (options.thresholdY || 1) : Math.round(lastMovedY);
        if (options.xAxis && options.yAxis || initial) {
          mirror.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
        } else if (options.xAxis && !options.yAxis) {
          mirror.style.transform = "translate3d(".concat(x, "px, ").concat(initialY, "px, 0)");
        } else if (options.yAxis && !options.xAxis) {
          mirror.style.transform = "translate3d(".concat(initialX, "px, ").concat(y, "px, 0)");
        }
        if (initial) {
          result.initialX = x;
          result.initialY = y;
        }
        result.lastMovedX = x;
        result.lastMovedY = y;
      }
      resolve(result);
    }, {
      frame: withFrame
    });
  };
}
function withPromise(callback) {
  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref11$raf = _ref11.raf,
    raf = _ref11$raf === void 0 ? false : _ref11$raf;
  return new Promise(function (resolve, reject) {
    if (raf) {
      requestAnimationFrame(function () {
        callback(resolve, reject);
      });
    } else {
      callback(resolve, reject);
    }
  });
}
function isNativeDragEvent(sensorEvent) {
  return /^drag/.test(sensorEvent.originalEvent.type);
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs ***!
  \***************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MirrorMovedEvent = exports.MirrorMoveEvent = exports.MirrorEvent = exports.MirrorDestroyEvent = exports.MirrorCreatedEvent = exports.MirrorCreateEvent = exports.MirrorAttachedEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var MirrorEvent = exports.MirrorEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(MirrorEvent, _AbstractEvent);
  var _super = _createSuper(MirrorEvent);
  function MirrorEvent(data) {
    var _this;
    _classCallCheck(this, MirrorEvent);
    _this = _super.call(this, data);
    _this.data = data;
    return _this;
  }
  _createClass(MirrorEvent, [{
    key: "source",
    get: function get() {
      return this.data.source;
    }
  }, {
    key: "originalSource",
    get: function get() {
      return this.data.originalSource;
    }
  }, {
    key: "sourceContainer",
    get: function get() {
      return this.data.sourceContainer;
    }
  }, {
    key: "sensorEvent",
    get: function get() {
      return this.data.sensorEvent;
    }
  }, {
    key: "dragEvent",
    get: function get() {
      return this.data.dragEvent;
    }
  }, {
    key: "originalEvent",
    get: function get() {
      if (this.sensorEvent) {
        return this.sensorEvent.originalEvent;
      }
      return null;
    }
  }]);
  return MirrorEvent;
}(_AbstractEvent2.AbstractEvent);
var MirrorCreateEvent = exports.MirrorCreateEvent = /*#__PURE__*/function (_MirrorEvent) {
  _inherits(MirrorCreateEvent, _MirrorEvent);
  var _super2 = _createSuper(MirrorCreateEvent);
  function MirrorCreateEvent() {
    _classCallCheck(this, MirrorCreateEvent);
    return _super2.apply(this, arguments);
  }
  return _createClass(MirrorCreateEvent);
}(MirrorEvent);
MirrorCreateEvent.type = 'mirror:create';
var MirrorCreatedEvent = exports.MirrorCreatedEvent = /*#__PURE__*/function (_MirrorEvent2) {
  _inherits(MirrorCreatedEvent, _MirrorEvent2);
  var _super3 = _createSuper(MirrorCreatedEvent);
  function MirrorCreatedEvent() {
    _classCallCheck(this, MirrorCreatedEvent);
    return _super3.apply(this, arguments);
  }
  _createClass(MirrorCreatedEvent, [{
    key: "mirror",
    get: function get() {
      return this.data.mirror;
    }
  }]);
  return MirrorCreatedEvent;
}(MirrorEvent);
MirrorCreatedEvent.type = 'mirror:created';
var MirrorAttachedEvent = exports.MirrorAttachedEvent = /*#__PURE__*/function (_MirrorEvent3) {
  _inherits(MirrorAttachedEvent, _MirrorEvent3);
  var _super4 = _createSuper(MirrorAttachedEvent);
  function MirrorAttachedEvent() {
    _classCallCheck(this, MirrorAttachedEvent);
    return _super4.apply(this, arguments);
  }
  _createClass(MirrorAttachedEvent, [{
    key: "mirror",
    get: function get() {
      return this.data.mirror;
    }
  }]);
  return MirrorAttachedEvent;
}(MirrorEvent);
MirrorAttachedEvent.type = 'mirror:attached';
var MirrorMoveEvent = exports.MirrorMoveEvent = /*#__PURE__*/function (_MirrorEvent4) {
  _inherits(MirrorMoveEvent, _MirrorEvent4);
  var _super5 = _createSuper(MirrorMoveEvent);
  function MirrorMoveEvent() {
    _classCallCheck(this, MirrorMoveEvent);
    return _super5.apply(this, arguments);
  }
  _createClass(MirrorMoveEvent, [{
    key: "mirror",
    get: function get() {
      return this.data.mirror;
    }
  }, {
    key: "passedThreshX",
    get: function get() {
      return this.data.passedThreshX;
    }
  }, {
    key: "passedThreshY",
    get: function get() {
      return this.data.passedThreshY;
    }
  }]);
  return MirrorMoveEvent;
}(MirrorEvent);
MirrorMoveEvent.type = 'mirror:move';
MirrorMoveEvent.cancelable = true;
var MirrorMovedEvent = exports.MirrorMovedEvent = /*#__PURE__*/function (_MirrorEvent5) {
  _inherits(MirrorMovedEvent, _MirrorEvent5);
  var _super6 = _createSuper(MirrorMovedEvent);
  function MirrorMovedEvent() {
    _classCallCheck(this, MirrorMovedEvent);
    return _super6.apply(this, arguments);
  }
  _createClass(MirrorMovedEvent, [{
    key: "mirror",
    get: function get() {
      return this.data.mirror;
    }
  }, {
    key: "passedThreshX",
    get: function get() {
      return this.data.passedThreshX;
    }
  }, {
    key: "passedThreshY",
    get: function get() {
      return this.data.passedThreshY;
    }
  }]);
  return MirrorMovedEvent;
}(MirrorEvent);
MirrorMovedEvent.type = 'mirror:moved';
var MirrorDestroyEvent = exports.MirrorDestroyEvent = /*#__PURE__*/function (_MirrorEvent6) {
  _inherits(MirrorDestroyEvent, _MirrorEvent6);
  var _super7 = _createSuper(MirrorDestroyEvent);
  function MirrorDestroyEvent() {
    _classCallCheck(this, MirrorDestroyEvent);
    return _super7.apply(this, arguments);
  }
  _createClass(MirrorDestroyEvent, [{
    key: "mirror",
    get: function get() {
      return this.data.mirror;
    }
  }]);
  return MirrorDestroyEvent;
}(MirrorEvent);
MirrorDestroyEvent.type = 'mirror:destroy';
MirrorDestroyEvent.cancelable = true;

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Scrollable/Scrollable.mjs":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Scrollable/Scrollable.mjs ***!
  \******************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scroll = exports.onDragStop = exports.onDragStart = exports.onDragMove = exports.defaultOptions = exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var _closest = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragStart = exports.onDragStart = Symbol('onDragStart');
var onDragMove = exports.onDragMove = Symbol('onDragMove');
var onDragStop = exports.onDragStop = Symbol('onDragStop');
var scroll = exports.scroll = Symbol('scroll');
var defaultOptions = exports.defaultOptions = {
  speed: 6,
  sensitivity: 50,
  scrollableElements: []
};
var Scrollable = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(Scrollable, _AbstractPlugin);
  var _super = _createSuper(Scrollable);
  function Scrollable(draggable) {
    var _this;
    _classCallCheck(this, Scrollable);
    _this = _super.call(this, draggable);
    _this.options = _objectSpread(_objectSpread({}, defaultOptions), _this.getOptions());
    _this.currentMousePosition = null;
    _this.scrollAnimationFrame = null;
    _this.scrollableElement = null;
    _this.findScrollableElementFrame = null;
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragMove] = _this[onDragMove].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this[scroll] = _this[scroll].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Scrollable, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('drag:start', this[onDragStart]).on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.scrollable || {};
    }
  }, {
    key: "getScrollableElement",
    value: function getScrollableElement(target) {
      if (this.hasDefinedScrollableElements()) {
        return (0, _closest.default)(target, this.options.scrollableElements) || document.documentElement;
      } else {
        return closestScrollableElement(target);
      }
    }
  }, {
    key: "hasDefinedScrollableElements",
    value: function hasDefinedScrollableElements() {
      return Boolean(this.options.scrollableElements.length !== 0);
    }
  }, {
    key: onDragStart,
    value: function value(dragEvent) {
      var _this2 = this;
      this.findScrollableElementFrame = requestAnimationFrame(function () {
        _this2.scrollableElement = _this2.getScrollableElement(dragEvent.source);
      });
    }
  }, {
    key: onDragMove,
    value: function value(dragEvent) {
      var _this3 = this;
      this.findScrollableElementFrame = requestAnimationFrame(function () {
        _this3.scrollableElement = _this3.getScrollableElement(dragEvent.sensorEvent.target);
      });
      if (!this.scrollableElement) {
        return;
      }
      var sensorEvent = dragEvent.sensorEvent;
      var scrollOffset = {
        x: 0,
        y: 0
      };
      if ('ontouchstart' in window) {
        scrollOffset.y = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        scrollOffset.x = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
      }
      this.currentMousePosition = {
        clientX: sensorEvent.clientX - scrollOffset.x,
        clientY: sensorEvent.clientY - scrollOffset.y
      };
      this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);
    }
  }, {
    key: onDragStop,
    value: function value() {
      cancelAnimationFrame(this.scrollAnimationFrame);
      cancelAnimationFrame(this.findScrollableElementFrame);
      this.scrollableElement = null;
      this.scrollAnimationFrame = null;
      this.findScrollableElementFrame = null;
      this.currentMousePosition = null;
    }
  }, {
    key: scroll,
    value: function value() {
      if (!this.scrollableElement || !this.currentMousePosition) {
        return;
      }
      cancelAnimationFrame(this.scrollAnimationFrame);
      var _this$options = this.options,
        speed = _this$options.speed,
        sensitivity = _this$options.sensitivity;
      var rect = this.scrollableElement.getBoundingClientRect();
      var bottomCutOff = rect.bottom > window.innerHeight;
      var topCutOff = rect.top < 0;
      var cutOff = topCutOff || bottomCutOff;
      var documentScrollingElement = getDocumentScrollingElement();
      var scrollableElement = this.scrollableElement;
      var clientX = this.currentMousePosition.clientX;
      var clientY = this.currentMousePosition.clientY;
      if (scrollableElement !== document.body && scrollableElement !== document.documentElement && !cutOff) {
        var offsetHeight = scrollableElement.offsetHeight,
          offsetWidth = scrollableElement.offsetWidth;
        if (rect.top + offsetHeight - clientY < sensitivity) {
          scrollableElement.scrollTop += speed;
        } else if (clientY - rect.top < sensitivity) {
          scrollableElement.scrollTop -= speed;
        }
        if (rect.left + offsetWidth - clientX < sensitivity) {
          scrollableElement.scrollLeft += speed;
        } else if (clientX - rect.left < sensitivity) {
          scrollableElement.scrollLeft -= speed;
        }
      } else {
        var _window = window,
          innerHeight = _window.innerHeight,
          innerWidth = _window.innerWidth;
        if (clientY < sensitivity) {
          documentScrollingElement.scrollTop -= speed;
        } else if (innerHeight - clientY < sensitivity) {
          documentScrollingElement.scrollTop += speed;
        }
        if (clientX < sensitivity) {
          documentScrollingElement.scrollLeft -= speed;
        } else if (innerWidth - clientX < sensitivity) {
          documentScrollingElement.scrollLeft += speed;
        }
      }
      this.scrollAnimationFrame = requestAnimationFrame(this[scroll]);
    }
  }]);
  return Scrollable;
}(_AbstractPlugin2.AbstractPlugin);
function hasOverflow(element) {
  var overflowRegex = /(auto|scroll)/;
  var computedStyles = getComputedStyle(element, null);
  var overflow = computedStyles.getPropertyValue('overflow') + computedStyles.getPropertyValue('overflow-y') + computedStyles.getPropertyValue('overflow-x');
  return overflowRegex.test(overflow);
}
function isStaticallyPositioned(element) {
  var position = getComputedStyle(element).getPropertyValue('position');
  return position === 'static';
}
function closestScrollableElement(element) {
  if (!element) {
    return getDocumentScrollingElement();
  }
  var position = getComputedStyle(element).getPropertyValue('position');
  var excludeStaticParents = position === 'absolute';
  var scrollableElement = (0, _closest.default)(element, function (parent) {
    if (excludeStaticParents && isStaticallyPositioned(parent)) {
      return false;
    }
    return hasOverflow(parent);
  });
  if (position === 'fixed' || !scrollableElement) {
    return getDocumentScrollingElement();
  } else {
    return scrollableElement;
  }
}
function getDocumentScrollingElement() {
  return document.scrollingElement || document.documentElement;
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/DragSensor/DragSensor.mjs":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/DragSensor/DragSensor.mjs ***!
  \******************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _closest = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _Sensor2 = _interopRequireDefault(__webpack_require__(/*! ../Sensor/Sensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs"));
var _SensorEvent = __webpack_require__(/*! ../SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onMouseDown = Symbol('onMouseDown');
var onMouseUp = Symbol('onMouseUp');
var onDragStart = Symbol('onDragStart');
var onDragOver = Symbol('onDragOver');
var onDragEnd = Symbol('onDragEnd');
var onDrop = Symbol('onDrop');
var reset = Symbol('reset');
var DragSensor = exports.default = /*#__PURE__*/function (_Sensor) {
  _inherits(DragSensor, _Sensor);
  var _super = _createSuper(DragSensor);
  function DragSensor() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, DragSensor);
    _this = _super.call(this, containers, options);
    _this.mouseDownTimeout = null;
    _this.draggableElement = null;
    _this.nativeDraggableElement = null;
    _this[onMouseDown] = _this[onMouseDown].bind(_assertThisInitialized(_this));
    _this[onMouseUp] = _this[onMouseUp].bind(_assertThisInitialized(_this));
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragOver] = _this[onDragOver].bind(_assertThisInitialized(_this));
    _this[onDragEnd] = _this[onDragEnd].bind(_assertThisInitialized(_this));
    _this[onDrop] = _this[onDrop].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(DragSensor, [{
    key: "attach",
    value: function attach() {
      document.addEventListener('mousedown', this[onMouseDown], true);
    }
  }, {
    key: "detach",
    value: function detach() {
      document.removeEventListener('mousedown', this[onMouseDown], true);
    }
  }, {
    key: onDragStart,
    value: function value(event) {
      var _this2 = this;
      event.dataTransfer.setData('text', '');
      event.dataTransfer.effectAllowed = this.options.type;
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var originalSource = this.draggableElement;
      if (!originalSource) {
        return;
      }
      var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        originalSource: originalSource,
        container: this.currentContainer,
        originalEvent: event
      });
      setTimeout(function () {
        _this2.trigger(_this2.currentContainer, dragStartEvent);
        if (dragStartEvent.canceled()) {
          _this2.dragging = false;
        } else {
          _this2.dragging = true;
        }
      }, 0);
    }
  }, {
    key: onDragOver,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var container = this.currentContainer;
      var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: container,
        originalEvent: event
      });
      this.trigger(container, dragMoveEvent);
      if (!dragMoveEvent.canceled()) {
        event.preventDefault();
        event.dataTransfer.dropEffect = this.options.type;
      }
    }
  }, {
    key: onDragEnd,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      document.removeEventListener('mouseup', this[onMouseUp], true);
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var container = this.currentContainer;
      var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: container,
        originalEvent: event
      });
      this.trigger(container, dragStopEvent);
      this.dragging = false;
      this.startEvent = null;
      this[reset]();
    }
  }, {
    key: onDrop,
    value: function value(event) {
      event.preventDefault();
    }
  }, {
    key: onMouseDown,
    value: function value(event) {
      var _this3 = this;
      if (event.target && (event.target.form || event.target.contenteditable)) {
        return;
      }
      var target = event.target;
      this.currentContainer = (0, _closest.default)(target, this.containers);
      if (!this.currentContainer) {
        return;
      }
      if (this.options.handle && target && !(0, _closest.default)(target, this.options.handle)) {
        return;
      }
      var originalSource = (0, _closest.default)(target, this.options.draggable);
      if (!originalSource) {
        return;
      }
      var nativeDraggableElement = (0, _closest.default)(event.target, function (element) {
        return element.draggable;
      });
      if (nativeDraggableElement) {
        nativeDraggableElement.draggable = false;
        this.nativeDraggableElement = nativeDraggableElement;
      }
      document.addEventListener('mouseup', this[onMouseUp], true);
      document.addEventListener('dragstart', this[onDragStart], false);
      document.addEventListener('dragover', this[onDragOver], false);
      document.addEventListener('dragend', this[onDragEnd], false);
      document.addEventListener('drop', this[onDrop], false);
      this.startEvent = event;
      this.mouseDownTimeout = setTimeout(function () {
        originalSource.draggable = true;
        _this3.draggableElement = originalSource;
      }, this.delay.drag);
    }
  }, {
    key: onMouseUp,
    value: function value() {
      this[reset]();
    }
  }, {
    key: reset,
    value: function value() {
      clearTimeout(this.mouseDownTimeout);
      document.removeEventListener('mouseup', this[onMouseUp], true);
      document.removeEventListener('dragstart', this[onDragStart], false);
      document.removeEventListener('dragover', this[onDragOver], false);
      document.removeEventListener('dragend', this[onDragEnd], false);
      document.removeEventListener('drop', this[onDrop], false);
      if (this.nativeDraggableElement) {
        this.nativeDraggableElement.draggable = true;
        this.nativeDraggableElement = null;
      }
      if (this.draggableElement) {
        this.draggableElement.draggable = false;
        this.draggableElement = null;
      }
    }
  }]);
  return DragSensor;
}(_Sensor2.default);

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/ForceTouchSensor/ForceTouchSensor.mjs":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/ForceTouchSensor/ForceTouchSensor.mjs ***!
  \******************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _closest = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _Sensor2 = _interopRequireDefault(__webpack_require__(/*! ../Sensor/Sensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs"));
var _SensorEvent = __webpack_require__(/*! ../SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onMouseForceWillBegin = Symbol('onMouseForceWillBegin');
var onMouseForceDown = Symbol('onMouseForceDown');
var onMouseDown = Symbol('onMouseDown');
var onMouseForceChange = Symbol('onMouseForceChange');
var onMouseMove = Symbol('onMouseMove');
var onMouseUp = Symbol('onMouseUp');
var onMouseForceGlobalChange = Symbol('onMouseForceGlobalChange');
var ForceTouchSensor = exports.default = /*#__PURE__*/function (_Sensor) {
  _inherits(ForceTouchSensor, _Sensor);
  var _super = _createSuper(ForceTouchSensor);
  function ForceTouchSensor() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, ForceTouchSensor);
    _this = _super.call(this, containers, options);
    _this.mightDrag = false;
    _this[onMouseForceWillBegin] = _this[onMouseForceWillBegin].bind(_assertThisInitialized(_this));
    _this[onMouseForceDown] = _this[onMouseForceDown].bind(_assertThisInitialized(_this));
    _this[onMouseDown] = _this[onMouseDown].bind(_assertThisInitialized(_this));
    _this[onMouseForceChange] = _this[onMouseForceChange].bind(_assertThisInitialized(_this));
    _this[onMouseMove] = _this[onMouseMove].bind(_assertThisInitialized(_this));
    _this[onMouseUp] = _this[onMouseUp].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(ForceTouchSensor, [{
    key: "attach",
    value: function attach() {
      var _iterator = _createForOfIteratorHelper(this.containers),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var container = _step.value;
          container.addEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);
          container.addEventListener('webkitmouseforcedown', this[onMouseForceDown], false);
          container.addEventListener('mousedown', this[onMouseDown], true);
          container.addEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      document.addEventListener('mousemove', this[onMouseMove]);
      document.addEventListener('mouseup', this[onMouseUp]);
    }
  }, {
    key: "detach",
    value: function detach() {
      var _iterator2 = _createForOfIteratorHelper(this.containers),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var container = _step2.value;
          container.removeEventListener('webkitmouseforcewillbegin', this[onMouseForceWillBegin], false);
          container.removeEventListener('webkitmouseforcedown', this[onMouseForceDown], false);
          container.removeEventListener('mousedown', this[onMouseDown], true);
          container.removeEventListener('webkitmouseforcechanged', this[onMouseForceChange], false);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      document.removeEventListener('mousemove', this[onMouseMove]);
      document.removeEventListener('mouseup', this[onMouseUp]);
    }
  }, {
    key: onMouseForceWillBegin,
    value: function value(event) {
      event.preventDefault();
      this.mightDrag = true;
    }
  }, {
    key: onMouseForceDown,
    value: function value(event) {
      if (this.dragging) {
        return;
      }
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var container = event.currentTarget;
      if (this.options.handle && target && !(0, _closest.default)(target, this.options.handle)) {
        return;
      }
      var originalSource = (0, _closest.default)(target, this.options.draggable);
      if (!originalSource) {
        return;
      }
      var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: container,
        originalSource: originalSource,
        originalEvent: event
      });
      this.trigger(container, dragStartEvent);
      this.currentContainer = container;
      this.dragging = !dragStartEvent.canceled();
      this.mightDrag = false;
    }
  }, {
    key: onMouseUp,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: null,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragStopEvent);
      this.currentContainer = null;
      this.dragging = false;
      this.mightDrag = false;
    }
  }, {
    key: onMouseDown,
    value: function value(event) {
      if (!this.mightDrag) {
        return;
      }
      event.stopPropagation();
      event.stopImmediatePropagation();
      event.preventDefault();
    }
  }, {
    key: onMouseMove,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragMoveEvent);
    }
  }, {
    key: onMouseForceChange,
    value: function value(event) {
      if (this.dragging) {
        return;
      }
      var target = event.target;
      var container = event.currentTarget;
      var dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({
        pressure: event.webkitForce,
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: container,
        originalEvent: event
      });
      this.trigger(container, dragPressureEvent);
    }
  }, {
    key: onMouseForceGlobalChange,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var target = event.target;
      var dragPressureEvent = new _SensorEvent.DragPressureSensorEvent({
        pressure: event.webkitForce,
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragPressureEvent);
    }
  }]);
  return ForceTouchSensor;
}(_Sensor2.default);

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/MouseSensor/MouseSensor.mjs":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/MouseSensor/MouseSensor.mjs ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _closest = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _distance = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/distance/distance.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/distance/distance.mjs"));
var _Sensor2 = _interopRequireDefault(__webpack_require__(/*! ../Sensor/Sensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs"));
var _SensorEvent = __webpack_require__(/*! ../SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onContextMenuWhileDragging = Symbol('onContextMenuWhileDragging');
var onMouseDown = Symbol('onMouseDown');
var onMouseMove = Symbol('onMouseMove');
var onMouseUp = Symbol('onMouseUp');
var startDrag = Symbol('startDrag');
var onDistanceChange = Symbol('onDistanceChange');
var MouseSensor = exports.default = /*#__PURE__*/function (_Sensor) {
  _inherits(MouseSensor, _Sensor);
  var _super = _createSuper(MouseSensor);
  function MouseSensor() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, MouseSensor);
    _this = _super.call(this, containers, options);
    _this.mouseDownTimeout = null;
    _this.pageX = null;
    _this.pageY = null;
    _this[onContextMenuWhileDragging] = _this[onContextMenuWhileDragging].bind(_assertThisInitialized(_this));
    _this[onMouseDown] = _this[onMouseDown].bind(_assertThisInitialized(_this));
    _this[onMouseMove] = _this[onMouseMove].bind(_assertThisInitialized(_this));
    _this[onMouseUp] = _this[onMouseUp].bind(_assertThisInitialized(_this));
    _this[startDrag] = _this[startDrag].bind(_assertThisInitialized(_this));
    _this[onDistanceChange] = _this[onDistanceChange].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(MouseSensor, [{
    key: "attach",
    value: function attach() {
      document.addEventListener('mousedown', this[onMouseDown], true);
    }
  }, {
    key: "detach",
    value: function detach() {
      document.removeEventListener('mousedown', this[onMouseDown], true);
    }
  }, {
    key: onMouseDown,
    value: function value(event) {
      var _this2 = this;
      if (event.button !== 0 || event.ctrlKey || event.metaKey) {
        return;
      }
      var container = (0, _closest.default)(event.target, this.containers);
      if (!container) {
        return;
      }
      if (this.options.handle && event.target && !(0, _closest.default)(event.target, this.options.handle)) {
        return;
      }
      var originalSource = (0, _closest.default)(event.target, this.options.draggable);
      if (!originalSource) {
        return;
      }
      var delay = this.delay;
      var pageX = event.pageX,
        pageY = event.pageY;
      Object.assign(this, {
        pageX: pageX,
        pageY: pageY
      });
      this.onMouseDownAt = Date.now();
      this.startEvent = event;
      this.currentContainer = container;
      this.originalSource = originalSource;
      document.addEventListener('mouseup', this[onMouseUp]);
      document.addEventListener('dragstart', preventNativeDragStart);
      document.addEventListener('mousemove', this[onDistanceChange]);
      this.mouseDownTimeout = window.setTimeout(function () {
        _this2[onDistanceChange]({
          pageX: _this2.pageX,
          pageY: _this2.pageY
        });
      }, delay.mouse);
    }
  }, {
    key: startDrag,
    value: function value() {
      var startEvent = this.startEvent;
      var container = this.currentContainer;
      var originalSource = this.originalSource;
      var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
        clientX: startEvent.clientX,
        clientY: startEvent.clientY,
        target: startEvent.target,
        container: container,
        originalSource: originalSource,
        originalEvent: startEvent
      });
      this.trigger(this.currentContainer, dragStartEvent);
      this.dragging = !dragStartEvent.canceled();
      if (this.dragging) {
        document.addEventListener('contextmenu', this[onContextMenuWhileDragging], true);
        document.addEventListener('mousemove', this[onMouseMove]);
      }
    }
  }, {
    key: onDistanceChange,
    value: function value(event) {
      var pageX = event.pageX,
        pageY = event.pageY;
      var distance$1 = this.options.distance;
      var startEvent = this.startEvent,
        delay = this.delay;
      Object.assign(this, {
        pageX: pageX,
        pageY: pageY
      });
      if (!this.currentContainer) {
        return;
      }
      var timeElapsed = Date.now() - this.onMouseDownAt;
      var distanceTravelled = (0, _distance.default)(startEvent.pageX, startEvent.pageY, pageX, pageY) || 0;
      clearTimeout(this.mouseDownTimeout);
      if (timeElapsed < delay.mouse) {
        document.removeEventListener('mousemove', this[onDistanceChange]);
      } else if (distanceTravelled >= distance$1) {
        document.removeEventListener('mousemove', this[onDistanceChange]);
        this[startDrag]();
      }
    }
  }, {
    key: onMouseMove,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragMoveEvent);
    }
  }, {
    key: onMouseUp,
    value: function value(event) {
      clearTimeout(this.mouseDownTimeout);
      if (event.button !== 0) {
        return;
      }
      document.removeEventListener('mouseup', this[onMouseUp]);
      document.removeEventListener('dragstart', preventNativeDragStart);
      document.removeEventListener('mousemove', this[onDistanceChange]);
      if (!this.dragging) {
        return;
      }
      var target = document.elementFromPoint(event.clientX, event.clientY);
      var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
        clientX: event.clientX,
        clientY: event.clientY,
        target: target,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragStopEvent);
      document.removeEventListener('contextmenu', this[onContextMenuWhileDragging], true);
      document.removeEventListener('mousemove', this[onMouseMove]);
      this.currentContainer = null;
      this.dragging = false;
      this.startEvent = null;
    }
  }, {
    key: onContextMenuWhileDragging,
    value: function value(event) {
      event.preventDefault();
    }
  }]);
  return MouseSensor;
}(_Sensor2.default);
function preventNativeDragStart(event) {
  event.preventDefault();
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs ***!
  \**********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var defaultDelay = {
  mouse: 0,
  drag: 0,
  touch: 100
};
var Sensor = exports.default = /*#__PURE__*/function () {
  function Sensor() {
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Sensor);
    this.containers = _toConsumableArray(containers);
    this.options = _objectSpread({}, options);
    this.dragging = false;
    this.currentContainer = null;
    this.originalSource = null;
    this.startEvent = null;
    this.delay = calcDelay(options.delay);
  }
  _createClass(Sensor, [{
    key: "attach",
    value: function attach() {
      return this;
    }
  }, {
    key: "detach",
    value: function detach() {
      return this;
    }
  }, {
    key: "addContainer",
    value: function addContainer() {
      for (var _len = arguments.length, containers = new Array(_len), _key = 0; _key < _len; _key++) {
        containers[_key] = arguments[_key];
      }
      this.containers = [].concat(_toConsumableArray(this.containers), containers);
    }
  }, {
    key: "removeContainer",
    value: function removeContainer() {
      for (var _len2 = arguments.length, containers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        containers[_key2] = arguments[_key2];
      }
      this.containers = this.containers.filter(function (container) {
        return !containers.includes(container);
      });
    }
  }, {
    key: "trigger",
    value: function trigger(element, sensorEvent) {
      var event = document.createEvent('Event');
      event.detail = sensorEvent;
      event.initEvent(sensorEvent.type, true, true);
      element.dispatchEvent(event);
      this.lastEvent = sensorEvent;
      return sensorEvent;
    }
  }]);
  return Sensor;
}();
function calcDelay(optionsDelay) {
  var delay = {};
  if (optionsDelay === undefined) {
    return _objectSpread({}, defaultDelay);
  }
  if (typeof optionsDelay === 'number') {
    for (var key in defaultDelay) {
      if (Object.prototype.hasOwnProperty.call(defaultDelay, key)) {
        delay[key] = optionsDelay;
      }
    }
    return delay;
  }
  for (var _key3 in defaultDelay) {
    if (Object.prototype.hasOwnProperty.call(defaultDelay, _key3)) {
      if (optionsDelay[_key3] === undefined) {
        delay[_key3] = defaultDelay[_key3];
      } else {
        delay[_key3] = optionsDelay[_key3];
      }
    }
  }
  return delay;
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SensorEvent = exports.DragStopSensorEvent = exports.DragStartSensorEvent = exports.DragPressureSensorEvent = exports.DragMoveSensorEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SensorEvent = exports.SensorEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(SensorEvent, _AbstractEvent);
  var _super = _createSuper(SensorEvent);
  function SensorEvent() {
    _classCallCheck(this, SensorEvent);
    return _super.apply(this, arguments);
  }
  _createClass(SensorEvent, [{
    key: "originalEvent",
    get: function get() {
      return this.data.originalEvent;
    }
  }, {
    key: "clientX",
    get: function get() {
      return this.data.clientX;
    }
  }, {
    key: "clientY",
    get: function get() {
      return this.data.clientY;
    }
  }, {
    key: "target",
    get: function get() {
      return this.data.target;
    }
  }, {
    key: "container",
    get: function get() {
      return this.data.container;
    }
  }, {
    key: "originalSource",
    get: function get() {
      return this.data.originalSource;
    }
  }, {
    key: "pressure",
    get: function get() {
      return this.data.pressure;
    }
  }]);
  return SensorEvent;
}(_AbstractEvent2.AbstractEvent);
var DragStartSensorEvent = exports.DragStartSensorEvent = /*#__PURE__*/function (_SensorEvent) {
  _inherits(DragStartSensorEvent, _SensorEvent);
  var _super2 = _createSuper(DragStartSensorEvent);
  function DragStartSensorEvent() {
    _classCallCheck(this, DragStartSensorEvent);
    return _super2.apply(this, arguments);
  }
  return _createClass(DragStartSensorEvent);
}(SensorEvent);
DragStartSensorEvent.type = 'drag:start';
var DragMoveSensorEvent = exports.DragMoveSensorEvent = /*#__PURE__*/function (_SensorEvent2) {
  _inherits(DragMoveSensorEvent, _SensorEvent2);
  var _super3 = _createSuper(DragMoveSensorEvent);
  function DragMoveSensorEvent() {
    _classCallCheck(this, DragMoveSensorEvent);
    return _super3.apply(this, arguments);
  }
  return _createClass(DragMoveSensorEvent);
}(SensorEvent);
DragMoveSensorEvent.type = 'drag:move';
var DragStopSensorEvent = exports.DragStopSensorEvent = /*#__PURE__*/function (_SensorEvent3) {
  _inherits(DragStopSensorEvent, _SensorEvent3);
  var _super4 = _createSuper(DragStopSensorEvent);
  function DragStopSensorEvent() {
    _classCallCheck(this, DragStopSensorEvent);
    return _super4.apply(this, arguments);
  }
  return _createClass(DragStopSensorEvent);
}(SensorEvent);
DragStopSensorEvent.type = 'drag:stop';
var DragPressureSensorEvent = exports.DragPressureSensorEvent = /*#__PURE__*/function (_SensorEvent4) {
  _inherits(DragPressureSensorEvent, _SensorEvent4);
  var _super5 = _createSuper(DragPressureSensorEvent);
  function DragPressureSensorEvent() {
    _classCallCheck(this, DragPressureSensorEvent);
    return _super5.apply(this, arguments);
  }
  return _createClass(DragPressureSensorEvent);
}(SensorEvent);
DragPressureSensorEvent.type = 'drag:pressure';

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs ***!
  \********************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _closest = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _distance = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/distance/distance.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/distance/distance.mjs"));
var _touchCoords4 = _interopRequireDefault(__webpack_require__(/*! ../../../shared/utils/touchCoords/touchCoords.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/touchCoords/touchCoords.mjs"));
var _Sensor2 = _interopRequireDefault(__webpack_require__(/*! ../Sensor/Sensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs"));
var _SensorEvent = __webpack_require__(/*! ../SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onTouchStart = Symbol('onTouchStart');
var onTouchEnd = Symbol('onTouchEnd');
var onTouchMove = Symbol('onTouchMove');
var startDrag = Symbol('startDrag');
var onDistanceChange = Symbol('onDistanceChange');
var preventScrolling = false;
window.addEventListener('touchmove', function (event) {
  if (!preventScrolling) {
    return;
  }
  event.preventDefault();
}, {
  passive: false
});
var TouchSensor = exports.default = /*#__PURE__*/function (_Sensor) {
  _inherits(TouchSensor, _Sensor);
  var _super = _createSuper(TouchSensor);
  function TouchSensor() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, TouchSensor);
    _this = _super.call(this, containers, options);
    _this.currentScrollableParent = null;
    _this.tapTimeout = null;
    _this.touchMoved = false;
    _this.pageX = null;
    _this.pageY = null;
    _this[onTouchStart] = _this[onTouchStart].bind(_assertThisInitialized(_this));
    _this[onTouchEnd] = _this[onTouchEnd].bind(_assertThisInitialized(_this));
    _this[onTouchMove] = _this[onTouchMove].bind(_assertThisInitialized(_this));
    _this[startDrag] = _this[startDrag].bind(_assertThisInitialized(_this));
    _this[onDistanceChange] = _this[onDistanceChange].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(TouchSensor, [{
    key: "attach",
    value: function attach() {
      document.addEventListener('touchstart', this[onTouchStart]);
    }
  }, {
    key: "detach",
    value: function detach() {
      document.removeEventListener('touchstart', this[onTouchStart]);
    }
  }, {
    key: onTouchStart,
    value: function value(event) {
      var _this2 = this;
      var container = (0, _closest.default)(event.target, this.containers);
      if (!container) {
        return;
      }
      if (this.options.handle && event.target && !(0, _closest.default)(event.target, this.options.handle)) {
        return;
      }
      var originalSource = (0, _closest.default)(event.target, this.options.draggable);
      if (!originalSource) {
        return;
      }
      var _this$options$distanc = this.options.distance,
        distance = _this$options$distanc === void 0 ? 0 : _this$options$distanc;
      var delay = this.delay;
      var _touchCoords = (0, _touchCoords4.default)(event),
        pageX = _touchCoords.pageX,
        pageY = _touchCoords.pageY;
      Object.assign(this, {
        pageX: pageX,
        pageY: pageY
      });
      this.onTouchStartAt = Date.now();
      this.startEvent = event;
      this.currentContainer = container;
      this.originalSource = originalSource;
      document.addEventListener('touchend', this[onTouchEnd]);
      document.addEventListener('touchcancel', this[onTouchEnd]);
      document.addEventListener('touchmove', this[onDistanceChange]);
      container.addEventListener('contextmenu', onContextMenu);
      if (distance) {
        preventScrolling = true;
      }
      this.tapTimeout = window.setTimeout(function () {
        _this2[onDistanceChange]({
          touches: [{
            pageX: _this2.pageX,
            pageY: _this2.pageY
          }]
        });
      }, delay.touch);
    }
  }, {
    key: startDrag,
    value: function value() {
      var startEvent = this.startEvent;
      var container = this.currentContainer;
      var touch = (0, _touchCoords4.default)(startEvent);
      var originalSource = this.originalSource;
      var dragStartEvent = new _SensorEvent.DragStartSensorEvent({
        clientX: touch.pageX,
        clientY: touch.pageY,
        target: startEvent.target,
        container: container,
        originalSource: originalSource,
        originalEvent: startEvent
      });
      this.trigger(this.currentContainer, dragStartEvent);
      this.dragging = !dragStartEvent.canceled();
      if (this.dragging) {
        document.addEventListener('touchmove', this[onTouchMove]);
      }
      preventScrolling = this.dragging;
    }
  }, {
    key: onDistanceChange,
    value: function value(event) {
      var distance$1 = this.options.distance;
      var startEvent = this.startEvent,
        delay = this.delay;
      var start = (0, _touchCoords4.default)(startEvent);
      var current = (0, _touchCoords4.default)(event);
      var timeElapsed = Date.now() - this.onTouchStartAt;
      var distanceTravelled = (0, _distance.default)(start.pageX, start.pageY, current.pageX, current.pageY);
      Object.assign(this, current);
      clearTimeout(this.tapTimeout);
      if (timeElapsed < delay.touch) {
        document.removeEventListener('touchmove', this[onDistanceChange]);
      } else if (distanceTravelled >= distance$1) {
        document.removeEventListener('touchmove', this[onDistanceChange]);
        this[startDrag]();
      }
    }
  }, {
    key: onTouchMove,
    value: function value(event) {
      if (!this.dragging) {
        return;
      }
      var _touchCoords2 = (0, _touchCoords4.default)(event),
        pageX = _touchCoords2.pageX,
        pageY = _touchCoords2.pageY;
      var target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);
      var dragMoveEvent = new _SensorEvent.DragMoveSensorEvent({
        clientX: pageX,
        clientY: pageY,
        target: target,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragMoveEvent);
    }
  }, {
    key: onTouchEnd,
    value: function value(event) {
      clearTimeout(this.tapTimeout);
      preventScrolling = false;
      document.removeEventListener('touchend', this[onTouchEnd]);
      document.removeEventListener('touchcancel', this[onTouchEnd]);
      document.removeEventListener('touchmove', this[onDistanceChange]);
      if (this.currentContainer) {
        this.currentContainer.removeEventListener('contextmenu', onContextMenu);
      }
      if (!this.dragging) {
        return;
      }
      document.removeEventListener('touchmove', this[onTouchMove]);
      var _touchCoords3 = (0, _touchCoords4.default)(event),
        pageX = _touchCoords3.pageX,
        pageY = _touchCoords3.pageY;
      var target = document.elementFromPoint(pageX - window.scrollX, pageY - window.scrollY);
      event.preventDefault();
      var dragStopEvent = new _SensorEvent.DragStopSensorEvent({
        clientX: pageX,
        clientY: pageY,
        target: target,
        container: this.currentContainer,
        originalEvent: event
      });
      this.trigger(this.currentContainer, dragStopEvent);
      this.currentContainer = null;
      this.dragging = false;
      this.startEvent = null;
    }
  }]);
  return TouchSensor;
}(_Sensor2.default);
function onContextMenu(event) {
  event.preventDefault();
  event.stopPropagation();
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/index.mjs":
/*!**************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/index.mjs ***!
  \**************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DragMoveSensorEvent", {
  enumerable: true,
  get: function get() {
    return _SensorEvent.DragMoveSensorEvent;
  }
});
Object.defineProperty(exports, "DragPressureSensorEvent", {
  enumerable: true,
  get: function get() {
    return _SensorEvent.DragPressureSensorEvent;
  }
});
Object.defineProperty(exports, "DragSensor", {
  enumerable: true,
  get: function get() {
    return _DragSensor.default;
  }
});
Object.defineProperty(exports, "DragStartSensorEvent", {
  enumerable: true,
  get: function get() {
    return _SensorEvent.DragStartSensorEvent;
  }
});
Object.defineProperty(exports, "DragStopSensorEvent", {
  enumerable: true,
  get: function get() {
    return _SensorEvent.DragStopSensorEvent;
  }
});
Object.defineProperty(exports, "ForceTouchSensor", {
  enumerable: true,
  get: function get() {
    return _ForceTouchSensor.default;
  }
});
Object.defineProperty(exports, "MouseSensor", {
  enumerable: true,
  get: function get() {
    return _MouseSensor.default;
  }
});
Object.defineProperty(exports, "Sensor", {
  enumerable: true,
  get: function get() {
    return _Sensor.default;
  }
});
Object.defineProperty(exports, "SensorEvent", {
  enumerable: true,
  get: function get() {
    return _SensorEvent.SensorEvent;
  }
});
Object.defineProperty(exports, "TouchSensor", {
  enumerable: true,
  get: function get() {
    return _TouchSensor.default;
  }
});
var _Sensor = _interopRequireDefault(__webpack_require__(/*! ./Sensor/Sensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/Sensor/Sensor.mjs"));
var _MouseSensor = _interopRequireDefault(__webpack_require__(/*! ./MouseSensor/MouseSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/MouseSensor/MouseSensor.mjs"));
var _TouchSensor = _interopRequireDefault(__webpack_require__(/*! ./TouchSensor/TouchSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs"));
var _DragSensor = _interopRequireDefault(__webpack_require__(/*! ./DragSensor/DragSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/DragSensor/DragSensor.mjs"));
var _ForceTouchSensor = _interopRequireDefault(__webpack_require__(/*! ./ForceTouchSensor/ForceTouchSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/ForceTouchSensor/ForceTouchSensor.mjs"));
var _SensorEvent = __webpack_require__(/*! ./SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/Droppable.mjs":
/*!**********************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/Droppable.mjs ***!
  \**********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _closest = _interopRequireDefault(__webpack_require__(/*! ../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _Draggable2 = _interopRequireDefault(__webpack_require__(/*! ../Draggable/Draggable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Draggable.mjs"));
__webpack_require__(/*! ../Draggable/DragEvent/DragEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs");
__webpack_require__(/*! ../Draggable/DraggableEvent/DraggableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs");
__webpack_require__(/*! ../Draggable/Plugins/Announcement/Announcement.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs");
__webpack_require__(/*! ../Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs");
__webpack_require__(/*! ../Draggable/Sensors/SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
__webpack_require__(/*! ../Draggable/Sensors/TouchSensor/TouchSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs");
var _DroppableEvent = __webpack_require__(/*! ./DroppableEvent/DroppableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/DroppableEvent/DroppableEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragStart = Symbol('onDragStart');
var onDragMove = Symbol('onDragMove');
var onDragStop = Symbol('onDragStop');
var dropInDropzone = Symbol('dropInDropZone');
var returnToOriginalDropzone = Symbol('returnToOriginalDropzone');
var closestDropzone = Symbol('closestDropzone');
var getDropzones = Symbol('getDropzones');
function onDroppableDroppedDefaultAnnouncement(_ref) {
  var dragEvent = _ref.dragEvent,
    dropzone = _ref.dropzone;
  var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';
  var dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';
  return "Dropped ".concat(sourceText, " into ").concat(dropzoneText);
}
function onDroppableReturnedDefaultAnnouncement(_ref2) {
  var dragEvent = _ref2.dragEvent,
    dropzone = _ref2.dropzone;
  var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'draggable element';
  var dropzoneText = dropzone.textContent.trim() || dropzone.id || 'droppable element';
  return "Returned ".concat(sourceText, " from ").concat(dropzoneText);
}
var defaultAnnouncements = {
  'droppable:dropped': onDroppableDroppedDefaultAnnouncement,
  'droppable:returned': onDroppableReturnedDefaultAnnouncement
};
var defaultClasses = {
  'droppable:active': 'draggable-dropzone--active',
  'droppable:occupied': 'draggable-dropzone--occupied'
};
var defaultOptions = {
  dropzone: '.draggable-droppable'
};
var Droppable = exports.default = /*#__PURE__*/function (_Draggable) {
  _inherits(Droppable, _Draggable);
  var _super = _createSuper(Droppable);
  function Droppable() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Droppable);
    _this = _super.call(this, containers, _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), options), {}, {
      classes: _objectSpread(_objectSpread({}, defaultClasses), options.classes || {}),
      announcements: _objectSpread(_objectSpread({}, defaultAnnouncements), options.announcements || {})
    }));
    _this.dropzones = null;
    _this.lastDropzone = null;
    _this.initialDropzone = null;
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragMove] = _this[onDragMove].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this.on('drag:start', _this[onDragStart]).on('drag:move', _this[onDragMove]).on('drag:stop', _this[onDragStop]);
    return _this;
  }
  _createClass(Droppable, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(Droppable.prototype), "destroy", this).call(this);
      this.off('drag:start', this[onDragStart]).off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);
    }
  }, {
    key: onDragStart,
    value: function value(event) {
      if (event.canceled()) {
        return;
      }
      this.dropzones = _toConsumableArray(this[getDropzones]());
      var dropzone = (0, _closest.default)(event.sensorEvent.target, this.options.dropzone);
      if (!dropzone) {
        event.cancel();
        return;
      }
      var droppableStartEvent = new _DroppableEvent.DroppableStartEvent({
        dragEvent: event,
        dropzone: dropzone
      });
      this.trigger(droppableStartEvent);
      if (droppableStartEvent.canceled()) {
        event.cancel();
        return;
      }
      this.initialDropzone = dropzone;
      var _iterator = _createForOfIteratorHelper(this.dropzones),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _dropzoneElement$clas;
          var dropzoneElement = _step.value;
          if (dropzoneElement.classList.contains(this.getClassNameFor('droppable:occupied'))) {
            continue;
          }
          (_dropzoneElement$clas = dropzoneElement.classList).add.apply(_dropzoneElement$clas, _toConsumableArray(this.getClassNamesFor('droppable:active')));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: onDragMove,
    value: function value(event) {
      if (event.canceled()) {
        return;
      }
      var dropzone = this[closestDropzone](event.sensorEvent.target);
      var overEmptyDropzone = dropzone && !dropzone.classList.contains(this.getClassNameFor('droppable:occupied'));
      if (overEmptyDropzone && this[dropInDropzone](event, dropzone)) {
        this.lastDropzone = dropzone;
      } else if ((!dropzone || dropzone === this.initialDropzone) && this.lastDropzone) {
        this[returnToOriginalDropzone](event);
        this.lastDropzone = null;
      }
    }
  }, {
    key: onDragStop,
    value: function value(event) {
      var droppableStopEvent = new _DroppableEvent.DroppableStopEvent({
        dragEvent: event,
        dropzone: this.lastDropzone || this.initialDropzone
      });
      this.trigger(droppableStopEvent);
      var occupiedClasses = this.getClassNamesFor('droppable:occupied');
      var _iterator2 = _createForOfIteratorHelper(this.dropzones),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _dropzone$classList;
          var dropzone = _step2.value;
          (_dropzone$classList = dropzone.classList).remove.apply(_dropzone$classList, _toConsumableArray(this.getClassNamesFor('droppable:active')));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (this.lastDropzone && this.lastDropzone !== this.initialDropzone) {
        var _this$initialDropzone;
        (_this$initialDropzone = this.initialDropzone.classList).remove.apply(_this$initialDropzone, _toConsumableArray(occupiedClasses));
      }
      this.dropzones = null;
      this.lastDropzone = null;
      this.initialDropzone = null;
    }
  }, {
    key: dropInDropzone,
    value: function value(event, dropzone) {
      var _dropzone$classList2;
      var droppableDroppedEvent = new _DroppableEvent.DroppableDroppedEvent({
        dragEvent: event,
        dropzone: dropzone
      });
      this.trigger(droppableDroppedEvent);
      if (droppableDroppedEvent.canceled()) {
        return false;
      }
      var occupiedClasses = this.getClassNamesFor('droppable:occupied');
      if (this.lastDropzone) {
        var _this$lastDropzone$cl;
        (_this$lastDropzone$cl = this.lastDropzone.classList).remove.apply(_this$lastDropzone$cl, _toConsumableArray(occupiedClasses));
      }
      dropzone.appendChild(event.source);
      (_dropzone$classList2 = dropzone.classList).add.apply(_dropzone$classList2, _toConsumableArray(occupiedClasses));
      return true;
    }
  }, {
    key: returnToOriginalDropzone,
    value: function value(event) {
      var _this$lastDropzone$cl2;
      var droppableReturnedEvent = new _DroppableEvent.DroppableReturnedEvent({
        dragEvent: event,
        dropzone: this.lastDropzone
      });
      this.trigger(droppableReturnedEvent);
      if (droppableReturnedEvent.canceled()) {
        return;
      }
      this.initialDropzone.appendChild(event.source);
      (_this$lastDropzone$cl2 = this.lastDropzone.classList).remove.apply(_this$lastDropzone$cl2, _toConsumableArray(this.getClassNamesFor('droppable:occupied')));
    }
  }, {
    key: closestDropzone,
    value: function value(target) {
      if (!this.dropzones) {
        return null;
      }
      return (0, _closest.default)(target, this.dropzones);
    }
  }, {
    key: getDropzones,
    value: function value() {
      var dropzone = this.options.dropzone;
      if (typeof dropzone === 'string') {
        return document.querySelectorAll(dropzone);
      } else if (dropzone instanceof NodeList || dropzone instanceof Array) {
        return dropzone;
      } else if (typeof dropzone === 'function') {
        return dropzone();
      } else {
        return [];
      }
    }
  }]);
  return Droppable;
}(_Draggable2.default);

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/DroppableEvent/DroppableEvent.mjs":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/DroppableEvent/DroppableEvent.mjs ***!
  \******************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DroppableStopEvent = exports.DroppableStartEvent = exports.DroppableReturnedEvent = exports.DroppableEvent = exports.DroppableDroppedEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var DroppableEvent = exports.DroppableEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(DroppableEvent, _AbstractEvent);
  var _super = _createSuper(DroppableEvent);
  function DroppableEvent(data) {
    var _this;
    _classCallCheck(this, DroppableEvent);
    _this = _super.call(this, data);
    _this.data = data;
    return _this;
  }
  _createClass(DroppableEvent, [{
    key: "dragEvent",
    get: function get() {
      return this.data.dragEvent;
    }
  }]);
  return DroppableEvent;
}(_AbstractEvent2.AbstractEvent);
DroppableEvent.type = 'droppable';
var DroppableStartEvent = exports.DroppableStartEvent = /*#__PURE__*/function (_DroppableEvent) {
  _inherits(DroppableStartEvent, _DroppableEvent);
  var _super2 = _createSuper(DroppableStartEvent);
  function DroppableStartEvent() {
    _classCallCheck(this, DroppableStartEvent);
    return _super2.apply(this, arguments);
  }
  _createClass(DroppableStartEvent, [{
    key: "dropzone",
    get: function get() {
      return this.data.dropzone;
    }
  }]);
  return DroppableStartEvent;
}(DroppableEvent);
DroppableStartEvent.type = 'droppable:start';
DroppableStartEvent.cancelable = true;
var DroppableDroppedEvent = exports.DroppableDroppedEvent = /*#__PURE__*/function (_DroppableEvent2) {
  _inherits(DroppableDroppedEvent, _DroppableEvent2);
  var _super3 = _createSuper(DroppableDroppedEvent);
  function DroppableDroppedEvent() {
    _classCallCheck(this, DroppableDroppedEvent);
    return _super3.apply(this, arguments);
  }
  _createClass(DroppableDroppedEvent, [{
    key: "dropzone",
    get: function get() {
      return this.data.dropzone;
    }
  }]);
  return DroppableDroppedEvent;
}(DroppableEvent);
DroppableDroppedEvent.type = 'droppable:dropped';
DroppableDroppedEvent.cancelable = true;
var DroppableReturnedEvent = exports.DroppableReturnedEvent = /*#__PURE__*/function (_DroppableEvent3) {
  _inherits(DroppableReturnedEvent, _DroppableEvent3);
  var _super4 = _createSuper(DroppableReturnedEvent);
  function DroppableReturnedEvent() {
    _classCallCheck(this, DroppableReturnedEvent);
    return _super4.apply(this, arguments);
  }
  _createClass(DroppableReturnedEvent, [{
    key: "dropzone",
    get: function get() {
      return this.data.dropzone;
    }
  }]);
  return DroppableReturnedEvent;
}(DroppableEvent);
DroppableReturnedEvent.type = 'droppable:returned';
DroppableReturnedEvent.cancelable = true;
var DroppableStopEvent = exports.DroppableStopEvent = /*#__PURE__*/function (_DroppableEvent4) {
  _inherits(DroppableStopEvent, _DroppableEvent4);
  var _super5 = _createSuper(DroppableStopEvent);
  function DroppableStopEvent() {
    _classCallCheck(this, DroppableStopEvent);
    return _super5.apply(this, arguments);
  }
  _createClass(DroppableStopEvent, [{
    key: "dropzone",
    get: function get() {
      return this.data.dropzone;
    }
  }]);
  return DroppableStopEvent;
}(DroppableEvent);
DroppableStopEvent.type = 'droppable:stop';
DroppableStopEvent.cancelable = true;

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/Collidable.mjs":
/*!********************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/Collidable.mjs ***!
  \********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var _closest = _interopRequireDefault(__webpack_require__(/*! ../../shared/utils/closest/closest.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs"));
var _CollidableEvent = __webpack_require__(/*! ./CollidableEvent/CollidableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/CollidableEvent/CollidableEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragMove = Symbol('onDragMove');
var onDragStop = Symbol('onDragStop');
var onRequestAnimationFrame = Symbol('onRequestAnimationFrame');
var Collidable = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(Collidable, _AbstractPlugin);
  var _super = _createSuper(Collidable);
  function Collidable(draggable) {
    var _this;
    _classCallCheck(this, Collidable);
    _this = _super.call(this, draggable);
    _this.currentlyCollidingElement = null;
    _this.lastCollidingElement = null;
    _this.currentAnimationFrame = null;
    _this[onDragMove] = _this[onDragMove].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this[onRequestAnimationFrame] = _this[onRequestAnimationFrame].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Collidable, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('drag:move', this[onDragMove]).on('drag:stop', this[onDragStop]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('drag:move', this[onDragMove]).off('drag:stop', this[onDragStop]);
    }
  }, {
    key: "getCollidables",
    value: function getCollidables() {
      var collidables = this.draggable.options.collidables;
      if (typeof collidables === 'string') {
        return Array.prototype.slice.call(document.querySelectorAll(collidables));
      } else if (collidables instanceof NodeList || collidables instanceof Array) {
        return Array.prototype.slice.call(collidables);
      } else if (collidables instanceof HTMLElement) {
        return [collidables];
      } else if (typeof collidables === 'function') {
        return collidables();
      } else {
        return [];
      }
    }
  }, {
    key: onDragMove,
    value: function value(event) {
      var target = event.sensorEvent.target;
      this.currentAnimationFrame = requestAnimationFrame(this[onRequestAnimationFrame](target));
      if (this.currentlyCollidingElement) {
        event.cancel();
      }
      var collidableInEvent = new _CollidableEvent.CollidableInEvent({
        dragEvent: event,
        collidingElement: this.currentlyCollidingElement
      });
      var collidableOutEvent = new _CollidableEvent.CollidableOutEvent({
        dragEvent: event,
        collidingElement: this.lastCollidingElement
      });
      var enteringCollidable = Boolean(this.currentlyCollidingElement && this.lastCollidingElement !== this.currentlyCollidingElement);
      var leavingCollidable = Boolean(!this.currentlyCollidingElement && this.lastCollidingElement);
      if (enteringCollidable) {
        if (this.lastCollidingElement) {
          this.draggable.trigger(collidableOutEvent);
        }
        this.draggable.trigger(collidableInEvent);
      } else if (leavingCollidable) {
        this.draggable.trigger(collidableOutEvent);
      }
      this.lastCollidingElement = this.currentlyCollidingElement;
    }
  }, {
    key: onDragStop,
    value: function value(event) {
      var lastCollidingElement = this.currentlyCollidingElement || this.lastCollidingElement;
      var collidableOutEvent = new _CollidableEvent.CollidableOutEvent({
        dragEvent: event,
        collidingElement: lastCollidingElement
      });
      if (lastCollidingElement) {
        this.draggable.trigger(collidableOutEvent);
      }
      this.lastCollidingElement = null;
      this.currentlyCollidingElement = null;
    }
  }, {
    key: onRequestAnimationFrame,
    value: function value(target) {
      var _this2 = this;
      return function () {
        var collidables = _this2.getCollidables();
        _this2.currentlyCollidingElement = (0, _closest.default)(target, function (element) {
          return collidables.includes(element);
        });
      };
    }
  }]);
  return Collidable;
}(_AbstractPlugin2.AbstractPlugin);

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/CollidableEvent/CollidableEvent.mjs":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/CollidableEvent/CollidableEvent.mjs ***!
  \*****************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollidableOutEvent = exports.CollidableInEvent = exports.CollidableEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var CollidableEvent = exports.CollidableEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(CollidableEvent, _AbstractEvent);
  var _super = _createSuper(CollidableEvent);
  function CollidableEvent(data) {
    var _this;
    _classCallCheck(this, CollidableEvent);
    _this = _super.call(this, data);
    _this.data = data;
    return _this;
  }
  _createClass(CollidableEvent, [{
    key: "dragEvent",
    get: function get() {
      return this.data.dragEvent;
    }
  }]);
  return CollidableEvent;
}(_AbstractEvent2.AbstractEvent);
CollidableEvent.type = 'collidable';
var CollidableInEvent = exports.CollidableInEvent = /*#__PURE__*/function (_CollidableEvent) {
  _inherits(CollidableInEvent, _CollidableEvent);
  var _super2 = _createSuper(CollidableInEvent);
  function CollidableInEvent() {
    _classCallCheck(this, CollidableInEvent);
    return _super2.apply(this, arguments);
  }
  _createClass(CollidableInEvent, [{
    key: "collidingElement",
    get: function get() {
      return this.data.collidingElement;
    }
  }]);
  return CollidableInEvent;
}(CollidableEvent);
CollidableInEvent.type = 'collidable:in';
var CollidableOutEvent = exports.CollidableOutEvent = /*#__PURE__*/function (_CollidableEvent2) {
  _inherits(CollidableOutEvent, _CollidableEvent2);
  var _super3 = _createSuper(CollidableOutEvent);
  function CollidableOutEvent() {
    _classCallCheck(this, CollidableOutEvent);
    return _super3.apply(this, arguments);
  }
  _createClass(CollidableOutEvent, [{
    key: "collidingElement",
    get: function get() {
      return this.data.collidingElement;
    }
  }]);
  return CollidableOutEvent;
}(CollidableEvent);
CollidableOutEvent.type = 'collidable:out';

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/ResizeMirror/ResizeMirror.mjs":
/*!************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/ResizeMirror/ResizeMirror.mjs ***!
  \************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultOptions = exports.default = void 0;
var _rollupPluginBabelHelpers = __webpack_require__(/*! ../../_virtual/_rollupPluginBabelHelpers.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/_virtual/_rollupPluginBabelHelpers.mjs");
var _AbstractPlugin2 = __webpack_require__(/*! ../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var _AutoBind = __webpack_require__(/*! ../../shared/utils/decorators/AutoBind.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/decorators/AutoBind.mjs");
var _requestNextAnimationFrame = _interopRequireDefault(__webpack_require__(/*! ../../shared/utils/requestNextAnimationFrame/requestNextAnimationFrame.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/requestNextAnimationFrame/requestNextAnimationFrame.mjs"));
var _DragEvent = __webpack_require__(/*! ../../Draggable/DragEvent/DragEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var _initProto, _class;
var defaultOptions = exports.defaultOptions = {};
var ResizeMirror = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(ResizeMirror, _AbstractPlugin);
  var _super = _createSuper(ResizeMirror);
  function ResizeMirror(draggable) {
    var _this;
    _classCallCheck(this, ResizeMirror);
    _initProto(_this = _super.call(this, draggable));
    _this.lastWidth = 0;
    _this.lastHeight = 0;
    _this.mirror = null;
    return _this;
  }
  _createClass(ResizeMirror, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('mirror:created', this.onMirrorCreated).on('drag:over', this.onDragOver).on('drag:over:container', this.onDragOver);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('mirror:created', this.onMirrorCreated).off('mirror:destroy', this.onMirrorDestroy).off('drag:over', this.onDragOver).off('drag:over:container', this.onDragOver);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.resizeMirror || {};
    }
  }, {
    key: "onMirrorCreated",
    value: function onMirrorCreated(_ref) {
      var mirror = _ref.mirror;
      this.mirror = mirror;
    }
  }, {
    key: "onMirrorDestroy",
    value: function onMirrorDestroy() {
      this.mirror = null;
    }
  }, {
    key: "onDragOver",
    value: function onDragOver(dragEvent) {
      this.resize(dragEvent);
    }
  }, {
    key: "resize",
    value: function resize(dragEvent) {
      var _this2 = this;
      requestAnimationFrame(function () {
        var over = null;
        var overContainer = dragEvent.overContainer;
        if (_this2.mirror == null || _this2.mirror.parentNode == null) {
          return;
        }
        if (_this2.mirror.parentNode !== overContainer) {
          overContainer.appendChild(_this2.mirror);
        }
        if ((0, _DragEvent.isDragOverEvent)(dragEvent)) {
          over = dragEvent.over;
        }
        var overElement = over || _this2.draggable.getDraggableElementsForContainer(overContainer)[0];
        if (!overElement) {
          return;
        }
        (0, _requestNextAnimationFrame.default)(function () {
          var overRect = overElement.getBoundingClientRect();
          if (_this2.mirror == null || _this2.lastHeight === overRect.height && _this2.lastWidth === overRect.width) {
            return;
          }
          _this2.mirror.style.width = "".concat(overRect.width, "px");
          _this2.mirror.style.height = "".concat(overRect.height, "px");
          _this2.lastWidth = overRect.width;
          _this2.lastHeight = overRect.height;
        });
      });
    }
  }]);
  return ResizeMirror;
}(_AbstractPlugin2.AbstractPlugin);
_class = ResizeMirror;
var _applyDecs2305$e = _slicedToArray((0, _rollupPluginBabelHelpers.applyDecs2305)(_class, [[_AutoBind.AutoBind, 2, "onMirrorCreated"], [_AutoBind.AutoBind, 2, "onMirrorDestroy"], [_AutoBind.AutoBind, 2, "onDragOver"]], [], 0, void 0, _AbstractPlugin2.AbstractPlugin).e, 1);
_initProto = _applyDecs2305$e[0];

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/Snappable.mjs":
/*!******************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/Snappable.mjs ***!
  \******************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var _SnappableEvent = __webpack_require__(/*! ./SnappableEvent/SnappableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/SnappableEvent/SnappableEvent.mjs");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragStart = Symbol('onDragStart');
var onDragStop = Symbol('onDragStop');
var onDragOver = Symbol('onDragOver');
var onDragOut = Symbol('onDragOut');
var onMirrorCreated = Symbol('onMirrorCreated');
var onMirrorDestroy = Symbol('onMirrorDestroy');
var Snappable = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(Snappable, _AbstractPlugin);
  var _super = _createSuper(Snappable);
  function Snappable(draggable) {
    var _this;
    _classCallCheck(this, Snappable);
    _this = _super.call(this, draggable);
    _this.firstSource = null;
    _this.mirror = null;
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this[onDragOver] = _this[onDragOver].bind(_assertThisInitialized(_this));
    _this[onDragOut] = _this[onDragOut].bind(_assertThisInitialized(_this));
    _this[onMirrorCreated] = _this[onMirrorCreated].bind(_assertThisInitialized(_this));
    _this[onMirrorDestroy] = _this[onMirrorDestroy].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(Snappable, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('drag:start', this[onDragStart]).on('drag:stop', this[onDragStop]).on('drag:over', this[onDragOver]).on('drag:out', this[onDragOut]).on('droppable:over', this[onDragOver]).on('droppable:out', this[onDragOut]).on('mirror:created', this[onMirrorCreated]).on('mirror:destroy', this[onMirrorDestroy]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('drag:start', this[onDragStart]).off('drag:stop', this[onDragStop]).off('drag:over', this[onDragOver]).off('drag:out', this[onDragOut]).off('droppable:over', this[onDragOver]).off('droppable:out', this[onDragOut]).off('mirror:created', this[onMirrorCreated]).off('mirror:destroy', this[onMirrorDestroy]);
    }
  }, {
    key: onDragStart,
    value: function value(event) {
      if (event.canceled()) {
        return;
      }
      this.firstSource = event.source;
    }
  }, {
    key: onDragStop,
    value: function value() {
      this.firstSource = null;
    }
  }, {
    key: onDragOver,
    value: function value(event) {
      var _source$classList,
        _source$classList2,
        _this2 = this;
      if (event.canceled()) {
        return;
      }
      var source = event.source || event.dragEvent.source;
      if (source === this.firstSource) {
        this.firstSource = null;
        return;
      }
      var snapInEvent = new _SnappableEvent.SnapInEvent({
        dragEvent: event,
        snappable: event.over || event.droppable
      });
      this.draggable.trigger(snapInEvent);
      if (snapInEvent.canceled()) {
        return;
      }
      if (this.mirror) {
        this.mirror.style.display = 'none';
      }
      (_source$classList = source.classList).remove.apply(_source$classList, _toConsumableArray(this.draggable.getClassNamesFor('source:dragging')));
      (_source$classList2 = source.classList).add.apply(_source$classList2, _toConsumableArray(this.draggable.getClassNamesFor('source:placed')));
      setTimeout(function () {
        var _source$classList3;
        (_source$classList3 = source.classList).remove.apply(_source$classList3, _toConsumableArray(_this2.draggable.getClassNamesFor('source:placed')));
      }, this.draggable.options.placedTimeout);
    }
  }, {
    key: onDragOut,
    value: function value(event) {
      var _source$classList4;
      if (event.canceled()) {
        return;
      }
      var source = event.source || event.dragEvent.source;
      var snapOutEvent = new _SnappableEvent.SnapOutEvent({
        dragEvent: event,
        snappable: event.over || event.droppable
      });
      this.draggable.trigger(snapOutEvent);
      if (snapOutEvent.canceled()) {
        return;
      }
      if (this.mirror) {
        this.mirror.style.display = '';
      }
      (_source$classList4 = source.classList).add.apply(_source$classList4, _toConsumableArray(this.draggable.getClassNamesFor('source:dragging')));
    }
  }, {
    key: onMirrorCreated,
    value: function value(_ref) {
      var mirror = _ref.mirror;
      this.mirror = mirror;
    }
  }, {
    key: onMirrorDestroy,
    value: function value() {
      this.mirror = null;
    }
  }]);
  return Snappable;
}(_AbstractPlugin2.AbstractPlugin);

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/SnappableEvent/SnappableEvent.mjs":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/SnappableEvent/SnappableEvent.mjs ***!
  \**************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnapOutEvent = exports.SnapInEvent = exports.SnapEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SnapEvent = exports.SnapEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(SnapEvent, _AbstractEvent);
  var _super = _createSuper(SnapEvent);
  function SnapEvent() {
    _classCallCheck(this, SnapEvent);
    return _super.apply(this, arguments);
  }
  _createClass(SnapEvent, [{
    key: "dragEvent",
    get: function get() {
      return this.data.dragEvent;
    }
  }, {
    key: "snappable",
    get: function get() {
      return this.data.snappable;
    }
  }]);
  return SnapEvent;
}(_AbstractEvent2.AbstractEvent);
SnapEvent.type = 'snap';
var SnapInEvent = exports.SnapInEvent = /*#__PURE__*/function (_SnapEvent) {
  _inherits(SnapInEvent, _SnapEvent);
  var _super2 = _createSuper(SnapInEvent);
  function SnapInEvent() {
    _classCallCheck(this, SnapInEvent);
    return _super2.apply(this, arguments);
  }
  return _createClass(SnapInEvent);
}(SnapEvent);
SnapInEvent.type = 'snap:in';
SnapInEvent.cancelable = true;
var SnapOutEvent = exports.SnapOutEvent = /*#__PURE__*/function (_SnapEvent2) {
  _inherits(SnapOutEvent, _SnapEvent2);
  var _super3 = _createSuper(SnapOutEvent);
  function SnapOutEvent() {
    _classCallCheck(this, SnapOutEvent);
    return _super3.apply(this, arguments);
  }
  return _createClass(SnapOutEvent);
}(SnapEvent);
SnapOutEvent.type = 'snap:out';
SnapOutEvent.cancelable = true;

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/SortAnimation/SortAnimation.mjs":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/SortAnimation/SortAnimation.mjs ***!
  \**************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultOptions = exports.default = void 0;
var _AbstractPlugin2 = __webpack_require__(/*! ../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onSortableSorted = Symbol('onSortableSorted');
var onSortableSort = Symbol('onSortableSort');
var defaultOptions = exports.defaultOptions = {
  duration: 150,
  easingFunction: 'ease-in-out'
};
var SortAnimation = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(SortAnimation, _AbstractPlugin);
  var _super = _createSuper(SortAnimation);
  function SortAnimation(draggable) {
    var _this;
    _classCallCheck(this, SortAnimation);
    _this = _super.call(this, draggable);
    _this.options = _objectSpread(_objectSpread({}, defaultOptions), _this.getOptions());
    _this.lastAnimationFrame = null;
    _this.lastElements = [];
    _this[onSortableSorted] = _this[onSortableSorted].bind(_assertThisInitialized(_this));
    _this[onSortableSort] = _this[onSortableSort].bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(SortAnimation, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('sortable:sort', this[onSortableSort]);
      this.draggable.on('sortable:sorted', this[onSortableSorted]);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('sortable:sort', this[onSortableSort]);
      this.draggable.off('sortable:sorted', this[onSortableSorted]);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.sortAnimation || {};
    }
  }, {
    key: onSortableSort,
    value: function value(_ref) {
      var dragEvent = _ref.dragEvent;
      var sourceContainer = dragEvent.sourceContainer;
      var elements = this.draggable.getDraggableElementsForContainer(sourceContainer);
      this.lastElements = Array.from(elements).map(function (el) {
        return {
          domEl: el,
          offsetTop: el.offsetTop,
          offsetLeft: el.offsetLeft
        };
      });
    }
  }, {
    key: onSortableSorted,
    value: function value(_ref2) {
      var _this2 = this;
      var oldIndex = _ref2.oldIndex,
        newIndex = _ref2.newIndex;
      if (oldIndex === newIndex) {
        return;
      }
      var effectedElements = [];
      var start;
      var end;
      var num;
      if (oldIndex > newIndex) {
        start = newIndex;
        end = oldIndex - 1;
        num = 1;
      } else {
        start = oldIndex + 1;
        end = newIndex;
        num = -1;
      }
      for (var i = start; i <= end; i++) {
        var from = this.lastElements[i];
        var to = this.lastElements[i + num];
        effectedElements.push({
          from: from,
          to: to
        });
      }
      cancelAnimationFrame(this.lastAnimationFrame);
      this.lastAnimationFrame = requestAnimationFrame(function () {
        effectedElements.forEach(function (element) {
          return animate(element, _this2.options);
        });
      });
    }
  }]);
  return SortAnimation;
}(_AbstractPlugin2.AbstractPlugin);
function animate(_ref3, _ref4) {
  var from = _ref3.from,
    to = _ref3.to;
  var duration = _ref4.duration,
    easingFunction = _ref4.easingFunction;
  var domEl = from.domEl;
  var x = from.offsetLeft - to.offsetLeft;
  var y = from.offsetTop - to.offsetTop;
  domEl.style.pointerEvents = 'none';
  domEl.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
  requestAnimationFrame(function () {
    domEl.addEventListener('transitionend', resetElementOnTransitionEnd);
    domEl.style.transition = "transform ".concat(duration, "ms ").concat(easingFunction);
    domEl.style.transform = '';
  });
}
function resetElementOnTransitionEnd(event) {
  event.target.style.transition = '';
  event.target.style.pointerEvents = '';
  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/SwapAnimation/SwapAnimation.mjs":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/SwapAnimation/SwapAnimation.mjs ***!
  \**************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultOptions = exports.default = void 0;
var _rollupPluginBabelHelpers = __webpack_require__(/*! ../../_virtual/_rollupPluginBabelHelpers.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/_virtual/_rollupPluginBabelHelpers.mjs");
var _AbstractPlugin2 = __webpack_require__(/*! ../../shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var _AutoBind = __webpack_require__(/*! ../../shared/utils/decorators/AutoBind.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/decorators/AutoBind.mjs");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var _initProto, _class;
var defaultOptions = exports.defaultOptions = {
  duration: 150,
  easingFunction: 'ease-in-out',
  horizontal: false
};
var SwapAnimation = exports.default = /*#__PURE__*/function (_AbstractPlugin) {
  _inherits(SwapAnimation, _AbstractPlugin);
  var _super = _createSuper(SwapAnimation);
  function SwapAnimation(draggable) {
    var _this;
    _classCallCheck(this, SwapAnimation);
    _initProto(_this = _super.call(this, draggable));
    _this.options = _objectSpread(_objectSpread({}, defaultOptions), _this.getOptions());
    _this.lastAnimationFrame = null;
    return _this;
  }
  _createClass(SwapAnimation, [{
    key: "attach",
    value: function attach() {
      this.draggable.on('sortable:sorted', this.onSortableSorted);
    }
  }, {
    key: "detach",
    value: function detach() {
      this.draggable.off('sortable:sorted', this.onSortableSorted);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.draggable.options.swapAnimation || {};
    }
  }, {
    key: "onSortableSorted",
    value: function onSortableSorted(_ref) {
      var _this2 = this;
      var oldIndex = _ref.oldIndex,
        newIndex = _ref.newIndex,
        dragEvent = _ref.dragEvent;
      var source = dragEvent.source,
        over = dragEvent.over;
      if (this.lastAnimationFrame) {
        cancelAnimationFrame(this.lastAnimationFrame);
      }
      this.lastAnimationFrame = requestAnimationFrame(function () {
        if (oldIndex >= newIndex) {
          animate(source, over, _this2.options);
        } else {
          animate(over, source, _this2.options);
        }
      });
    }
  }]);
  return SwapAnimation;
}(_AbstractPlugin2.AbstractPlugin);
_class = SwapAnimation;
var _applyDecs2305$e = _slicedToArray((0, _rollupPluginBabelHelpers.applyDecs2305)(_class, [[_AutoBind.AutoBind, 2, "onSortableSorted"]], [], 0, void 0, _AbstractPlugin2.AbstractPlugin).e, 1);
_initProto = _applyDecs2305$e[0];
function animate(from, to, _ref2) {
  var duration = _ref2.duration,
    easingFunction = _ref2.easingFunction,
    horizontal = _ref2.horizontal;
  for (var _i2 = 0, _arr2 = [from, to]; _i2 < _arr2.length; _i2++) {
    var element = _arr2[_i2];
    element.style.pointerEvents = 'none';
  }
  if (horizontal) {
    var width = from.offsetWidth;
    from.style.transform = "translate3d(".concat(width, "px, 0, 0)");
    to.style.transform = "translate3d(-".concat(width, "px, 0, 0)");
  } else {
    var height = from.offsetHeight;
    from.style.transform = "translate3d(0, ".concat(height, "px, 0)");
    to.style.transform = "translate3d(0, -".concat(height, "px, 0)");
  }
  requestAnimationFrame(function () {
    for (var _i3 = 0, _arr3 = [from, to]; _i3 < _arr3.length; _i3++) {
      var _element = _arr3[_i3];
      _element.addEventListener('transitionend', resetElementOnTransitionEnd);
      _element.style.transition = "transform ".concat(duration, "ms ").concat(easingFunction);
      _element.style.transform = '';
    }
  });
}
function resetElementOnTransitionEnd(event) {
  if (event.target == null || !isHTMLElement(event.target)) {
    return;
  }
  event.target.style.transition = '';
  event.target.style.pointerEvents = '';
  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);
}
function isHTMLElement(eventTarget) {
  return Boolean('style' in eventTarget);
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/index.mjs":
/*!****************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/index.mjs ***!
  \****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Collidable", {
  enumerable: true,
  get: function get() {
    return _Collidable.default;
  }
});
Object.defineProperty(exports, "ResizeMirror", {
  enumerable: true,
  get: function get() {
    return _ResizeMirror.default;
  }
});
Object.defineProperty(exports, "Snappable", {
  enumerable: true,
  get: function get() {
    return _Snappable.default;
  }
});
Object.defineProperty(exports, "SortAnimation", {
  enumerable: true,
  get: function get() {
    return _SortAnimation.default;
  }
});
Object.defineProperty(exports, "SwapAnimation", {
  enumerable: true,
  get: function get() {
    return _SwapAnimation.default;
  }
});
Object.defineProperty(exports, "defaultResizeMirrorOptions", {
  enumerable: true,
  get: function get() {
    return _ResizeMirror.defaultOptions;
  }
});
Object.defineProperty(exports, "defaultSortAnimationOptions", {
  enumerable: true,
  get: function get() {
    return _SortAnimation.defaultOptions;
  }
});
Object.defineProperty(exports, "defaultSwapAnimationOptions", {
  enumerable: true,
  get: function get() {
    return _SwapAnimation.defaultOptions;
  }
});
var _Collidable = _interopRequireDefault(__webpack_require__(/*! ./Collidable/Collidable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/Collidable.mjs"));
__webpack_require__(/*! ./Collidable/CollidableEvent/CollidableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Collidable/CollidableEvent/CollidableEvent.mjs");
var _ResizeMirror = _interopRequireWildcard(__webpack_require__(/*! ./ResizeMirror/ResizeMirror.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/ResizeMirror/ResizeMirror.mjs"));
var _Snappable = _interopRequireDefault(__webpack_require__(/*! ./Snappable/Snappable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/Snappable.mjs"));
__webpack_require__(/*! ./Snappable/SnappableEvent/SnappableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/Snappable/SnappableEvent/SnappableEvent.mjs");
var _SwapAnimation = _interopRequireWildcard(__webpack_require__(/*! ./SwapAnimation/SwapAnimation.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/SwapAnimation/SwapAnimation.mjs"));
var _SortAnimation = _interopRequireWildcard(__webpack_require__(/*! ./SortAnimation/SortAnimation.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/SortAnimation/SortAnimation.mjs"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/Sortable.mjs":
/*!********************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/Sortable.mjs ***!
  \********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Draggable2 = _interopRequireDefault(__webpack_require__(/*! ../Draggable/Draggable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Draggable.mjs"));
__webpack_require__(/*! ../Draggable/DragEvent/DragEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs");
__webpack_require__(/*! ../Draggable/DraggableEvent/DraggableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs");
__webpack_require__(/*! ../Draggable/Plugins/Announcement/Announcement.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs");
__webpack_require__(/*! ../Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs");
__webpack_require__(/*! ../Draggable/Sensors/SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
__webpack_require__(/*! ../Draggable/Sensors/TouchSensor/TouchSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs");
var _SortableEvent = __webpack_require__(/*! ./SortableEvent/SortableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/SortableEvent/SortableEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragStart = Symbol('onDragStart');
var onDragOverContainer = Symbol('onDragOverContainer');
var onDragOver = Symbol('onDragOver');
var onDragStop = Symbol('onDragStop');
function onSortableSortedDefaultAnnouncement(_ref) {
  var dragEvent = _ref.dragEvent;
  var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'sortable element';
  if (dragEvent.over) {
    var overText = dragEvent.over.textContent.trim() || dragEvent.over.id || 'sortable element';
    var isFollowing = dragEvent.source.compareDocumentPosition(dragEvent.over) & Node.DOCUMENT_POSITION_FOLLOWING;
    if (isFollowing) {
      return "Placed ".concat(sourceText, " after ").concat(overText);
    } else {
      return "Placed ".concat(sourceText, " before ").concat(overText);
    }
  } else {
    return "Placed ".concat(sourceText, " into a different container");
  }
}
var defaultAnnouncements = {
  'sortable:sorted': onSortableSortedDefaultAnnouncement
};
var Sortable = exports.default = /*#__PURE__*/function (_Draggable) {
  _inherits(Sortable, _Draggable);
  var _super = _createSuper(Sortable);
  function Sortable() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Sortable);
    _this = _super.call(this, containers, _objectSpread(_objectSpread({}, options), {}, {
      announcements: _objectSpread(_objectSpread({}, defaultAnnouncements), options.announcements || {})
    }));
    _this.startIndex = null;
    _this.startContainer = null;
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragOverContainer] = _this[onDragOverContainer].bind(_assertThisInitialized(_this));
    _this[onDragOver] = _this[onDragOver].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this.on('drag:start', _this[onDragStart]).on('drag:over:container', _this[onDragOverContainer]).on('drag:over', _this[onDragOver]).on('drag:stop', _this[onDragStop]);
    return _this;
  }
  _createClass(Sortable, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(Sortable.prototype), "destroy", this).call(this);
      this.off('drag:start', this[onDragStart]).off('drag:over:container', this[onDragOverContainer]).off('drag:over', this[onDragOver]).off('drag:stop', this[onDragStop]);
    }
  }, {
    key: "index",
    value: function index(element) {
      return this.getSortableElementsForContainer(element.parentNode).indexOf(element);
    }
  }, {
    key: "getSortableElementsForContainer",
    value: function getSortableElementsForContainer(container) {
      var _this2 = this;
      var allSortableElements = container.querySelectorAll(this.options.draggable);
      return _toConsumableArray(allSortableElements).filter(function (childElement) {
        return childElement !== _this2.originalSource && childElement !== _this2.mirror && childElement.parentNode === container;
      });
    }
  }, {
    key: onDragStart,
    value: function value(event) {
      this.startContainer = event.source.parentNode;
      this.startIndex = this.index(event.source);
      var sortableStartEvent = new _SortableEvent.SortableStartEvent({
        dragEvent: event,
        startIndex: this.startIndex,
        startContainer: this.startContainer
      });
      this.trigger(sortableStartEvent);
      if (sortableStartEvent.canceled()) {
        event.cancel();
      }
    }
  }, {
    key: onDragOverContainer,
    value: function value(event) {
      if (event.canceled()) {
        return;
      }
      var source = event.source,
        over = event.over,
        overContainer = event.overContainer;
      var oldIndex = this.index(source);
      var sortableSortEvent = new _SortableEvent.SortableSortEvent({
        dragEvent: event,
        currentIndex: oldIndex,
        source: source,
        over: over
      });
      this.trigger(sortableSortEvent);
      if (sortableSortEvent.canceled()) {
        return;
      }
      var children = this.getSortableElementsForContainer(overContainer);
      var moves = move({
        source: source,
        over: over,
        overContainer: overContainer,
        children: children
      });
      if (!moves) {
        return;
      }
      var oldContainer = moves.oldContainer,
        newContainer = moves.newContainer;
      var newIndex = this.index(event.source);
      var sortableSortedEvent = new _SortableEvent.SortableSortedEvent({
        dragEvent: event,
        oldIndex: oldIndex,
        newIndex: newIndex,
        oldContainer: oldContainer,
        newContainer: newContainer
      });
      this.trigger(sortableSortedEvent);
    }
  }, {
    key: onDragOver,
    value: function value(event) {
      if (event.over === event.originalSource || event.over === event.source) {
        return;
      }
      var source = event.source,
        over = event.over,
        overContainer = event.overContainer;
      var oldIndex = this.index(source);
      var sortableSortEvent = new _SortableEvent.SortableSortEvent({
        dragEvent: event,
        currentIndex: oldIndex,
        source: source,
        over: over
      });
      this.trigger(sortableSortEvent);
      if (sortableSortEvent.canceled()) {
        return;
      }
      var children = this.getDraggableElementsForContainer(overContainer);
      var moves = move({
        source: source,
        over: over,
        overContainer: overContainer,
        children: children
      });
      if (!moves) {
        return;
      }
      var oldContainer = moves.oldContainer,
        newContainer = moves.newContainer;
      var newIndex = this.index(source);
      var sortableSortedEvent = new _SortableEvent.SortableSortedEvent({
        dragEvent: event,
        oldIndex: oldIndex,
        newIndex: newIndex,
        oldContainer: oldContainer,
        newContainer: newContainer
      });
      this.trigger(sortableSortedEvent);
    }
  }, {
    key: onDragStop,
    value: function value(event) {
      var sortableStopEvent = new _SortableEvent.SortableStopEvent({
        dragEvent: event,
        oldIndex: this.startIndex,
        newIndex: this.index(event.source),
        oldContainer: this.startContainer,
        newContainer: event.source.parentNode
      });
      this.trigger(sortableStopEvent);
      this.startIndex = null;
      this.startContainer = null;
    }
  }]);
  return Sortable;
}(_Draggable2.default);
function index(element) {
  return Array.prototype.indexOf.call(element.parentNode.children, element);
}
function move(_ref2) {
  var source = _ref2.source,
    over = _ref2.over,
    overContainer = _ref2.overContainer,
    children = _ref2.children;
  var emptyOverContainer = !children.length;
  var differentContainer = source.parentNode !== overContainer;
  var sameContainer = over && source.parentNode === over.parentNode;
  if (emptyOverContainer) {
    return moveInsideEmptyContainer(source, overContainer);
  } else if (sameContainer) {
    return moveWithinContainer(source, over);
  } else if (differentContainer) {
    return moveOutsideContainer(source, over, overContainer);
  } else {
    return null;
  }
}
function moveInsideEmptyContainer(source, overContainer) {
  var oldContainer = source.parentNode;
  overContainer.appendChild(source);
  return {
    oldContainer: oldContainer,
    newContainer: overContainer
  };
}
function moveWithinContainer(source, over) {
  var oldIndex = index(source);
  var newIndex = index(over);
  if (oldIndex < newIndex) {
    source.parentNode.insertBefore(source, over.nextElementSibling);
  } else {
    source.parentNode.insertBefore(source, over);
  }
  return {
    oldContainer: source.parentNode,
    newContainer: source.parentNode
  };
}
function moveOutsideContainer(source, over, overContainer) {
  var oldContainer = source.parentNode;
  if (over) {
    over.parentNode.insertBefore(source, over);
  } else {
    overContainer.appendChild(source);
  }
  return {
    oldContainer: oldContainer,
    newContainer: source.parentNode
  };
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/SortableEvent/SortableEvent.mjs":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/SortableEvent/SortableEvent.mjs ***!
  \***************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SortableStopEvent = exports.SortableStartEvent = exports.SortableSortedEvent = exports.SortableSortEvent = exports.SortableEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SortableEvent = exports.SortableEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(SortableEvent, _AbstractEvent);
  var _super = _createSuper(SortableEvent);
  function SortableEvent(data) {
    var _this;
    _classCallCheck(this, SortableEvent);
    _this = _super.call(this, data);
    _this.data = data;
    return _this;
  }
  _createClass(SortableEvent, [{
    key: "dragEvent",
    get: function get() {
      return this.data.dragEvent;
    }
  }]);
  return SortableEvent;
}(_AbstractEvent2.AbstractEvent);
SortableEvent.type = 'sortable';
var SortableStartEvent = exports.SortableStartEvent = /*#__PURE__*/function (_SortableEvent) {
  _inherits(SortableStartEvent, _SortableEvent);
  var _super2 = _createSuper(SortableStartEvent);
  function SortableStartEvent() {
    _classCallCheck(this, SortableStartEvent);
    return _super2.apply(this, arguments);
  }
  _createClass(SortableStartEvent, [{
    key: "startIndex",
    get: function get() {
      return this.data.startIndex;
    }
  }, {
    key: "startContainer",
    get: function get() {
      return this.data.startContainer;
    }
  }]);
  return SortableStartEvent;
}(SortableEvent);
SortableStartEvent.type = 'sortable:start';
SortableStartEvent.cancelable = true;
var SortableSortEvent = exports.SortableSortEvent = /*#__PURE__*/function (_SortableEvent2) {
  _inherits(SortableSortEvent, _SortableEvent2);
  var _super3 = _createSuper(SortableSortEvent);
  function SortableSortEvent() {
    _classCallCheck(this, SortableSortEvent);
    return _super3.apply(this, arguments);
  }
  _createClass(SortableSortEvent, [{
    key: "currentIndex",
    get: function get() {
      return this.data.currentIndex;
    }
  }, {
    key: "over",
    get: function get() {
      return this.data.over;
    }
  }, {
    key: "overContainer",
    get: function get() {
      return this.data.dragEvent.overContainer;
    }
  }]);
  return SortableSortEvent;
}(SortableEvent);
SortableSortEvent.type = 'sortable:sort';
SortableSortEvent.cancelable = true;
var SortableSortedEvent = exports.SortableSortedEvent = /*#__PURE__*/function (_SortableEvent3) {
  _inherits(SortableSortedEvent, _SortableEvent3);
  var _super4 = _createSuper(SortableSortedEvent);
  function SortableSortedEvent() {
    _classCallCheck(this, SortableSortedEvent);
    return _super4.apply(this, arguments);
  }
  _createClass(SortableSortedEvent, [{
    key: "oldIndex",
    get: function get() {
      return this.data.oldIndex;
    }
  }, {
    key: "newIndex",
    get: function get() {
      return this.data.newIndex;
    }
  }, {
    key: "oldContainer",
    get: function get() {
      return this.data.oldContainer;
    }
  }, {
    key: "newContainer",
    get: function get() {
      return this.data.newContainer;
    }
  }]);
  return SortableSortedEvent;
}(SortableEvent);
SortableSortedEvent.type = 'sortable:sorted';
var SortableStopEvent = exports.SortableStopEvent = /*#__PURE__*/function (_SortableEvent4) {
  _inherits(SortableStopEvent, _SortableEvent4);
  var _super5 = _createSuper(SortableStopEvent);
  function SortableStopEvent() {
    _classCallCheck(this, SortableStopEvent);
    return _super5.apply(this, arguments);
  }
  _createClass(SortableStopEvent, [{
    key: "oldIndex",
    get: function get() {
      return this.data.oldIndex;
    }
  }, {
    key: "newIndex",
    get: function get() {
      return this.data.newIndex;
    }
  }, {
    key: "oldContainer",
    get: function get() {
      return this.data.oldContainer;
    }
  }, {
    key: "newContainer",
    get: function get() {
      return this.data.newContainer;
    }
  }]);
  return SortableStopEvent;
}(SortableEvent);
SortableStopEvent.type = 'sortable:stop';

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/Swappable.mjs":
/*!**********************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/Swappable.mjs ***!
  \**********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Draggable2 = _interopRequireDefault(__webpack_require__(/*! ../Draggable/Draggable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Draggable.mjs"));
__webpack_require__(/*! ../Draggable/DragEvent/DragEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs");
__webpack_require__(/*! ../Draggable/DraggableEvent/DraggableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs");
__webpack_require__(/*! ../Draggable/Plugins/Announcement/Announcement.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs");
__webpack_require__(/*! ../Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs");
__webpack_require__(/*! ../Draggable/Sensors/SensorEvent/SensorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/SensorEvent/SensorEvent.mjs");
__webpack_require__(/*! ../Draggable/Sensors/TouchSensor/TouchSensor.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/TouchSensor/TouchSensor.mjs");
var _SwappableEvent = __webpack_require__(/*! ./SwappableEvent/SwappableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/SwappableEvent/SwappableEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var onDragStart = Symbol('onDragStart');
var onDragOver = Symbol('onDragOver');
var onDragStop = Symbol('onDragStop');
function onSwappableSwappedDefaultAnnouncement(_ref) {
  var dragEvent = _ref.dragEvent,
    swappedElement = _ref.swappedElement;
  var sourceText = dragEvent.source.textContent.trim() || dragEvent.source.id || 'swappable element';
  var overText = swappedElement.textContent.trim() || swappedElement.id || 'swappable element';
  return "Swapped ".concat(sourceText, " with ").concat(overText);
}
var defaultAnnouncements = {
  'swappabled:swapped': onSwappableSwappedDefaultAnnouncement
};
var Swappable = exports.default = /*#__PURE__*/function (_Draggable) {
  _inherits(Swappable, _Draggable);
  var _super = _createSuper(Swappable);
  function Swappable() {
    var _this;
    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Swappable);
    _this = _super.call(this, containers, _objectSpread(_objectSpread({}, options), {}, {
      announcements: _objectSpread(_objectSpread({}, defaultAnnouncements), options.announcements || {})
    }));
    _this.lastOver = null;
    _this[onDragStart] = _this[onDragStart].bind(_assertThisInitialized(_this));
    _this[onDragOver] = _this[onDragOver].bind(_assertThisInitialized(_this));
    _this[onDragStop] = _this[onDragStop].bind(_assertThisInitialized(_this));
    _this.on('drag:start', _this[onDragStart]).on('drag:over', _this[onDragOver]).on('drag:stop', _this[onDragStop]);
    return _this;
  }
  _createClass(Swappable, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(Swappable.prototype), "destroy", this).call(this);
      this.off('drag:start', this._onDragStart).off('drag:over', this._onDragOver).off('drag:stop', this._onDragStop);
    }
  }, {
    key: onDragStart,
    value: function value(event) {
      var swappableStartEvent = new _SwappableEvent.SwappableStartEvent({
        dragEvent: event
      });
      this.trigger(swappableStartEvent);
      if (swappableStartEvent.canceled()) {
        event.cancel();
      }
    }
  }, {
    key: onDragOver,
    value: function value(event) {
      if (event.over === event.originalSource || event.over === event.source || event.canceled()) {
        return;
      }
      var swappableSwapEvent = new _SwappableEvent.SwappableSwapEvent({
        dragEvent: event,
        over: event.over,
        overContainer: event.overContainer
      });
      this.trigger(swappableSwapEvent);
      if (swappableSwapEvent.canceled()) {
        return;
      }
      if (this.lastOver && this.lastOver !== event.over) {
        swap(this.lastOver, event.source);
      }
      if (this.lastOver === event.over) {
        this.lastOver = null;
      } else {
        this.lastOver = event.over;
      }
      swap(event.source, event.over);
      var swappableSwappedEvent = new _SwappableEvent.SwappableSwappedEvent({
        dragEvent: event,
        swappedElement: event.over
      });
      this.trigger(swappableSwappedEvent);
    }
  }, {
    key: onDragStop,
    value: function value(event) {
      var swappableStopEvent = new _SwappableEvent.SwappableStopEvent({
        dragEvent: event
      });
      this.trigger(swappableStopEvent);
      this.lastOver = null;
    }
  }]);
  return Swappable;
}(_Draggable2.default);
function withTempElement(callback) {
  var tmpElement = document.createElement('div');
  callback(tmpElement);
  tmpElement.remove();
}
function swap(source, over) {
  var overParent = over.parentNode;
  var sourceParent = source.parentNode;
  withTempElement(function (tmpElement) {
    sourceParent.insertBefore(tmpElement, source);
    overParent.insertBefore(source, over);
    sourceParent.insertBefore(over, tmpElement);
  });
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/SwappableEvent/SwappableEvent.mjs":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/SwappableEvent/SwappableEvent.mjs ***!
  \******************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SwappableSwappedEvent = exports.SwappableSwapEvent = exports.SwappableStopEvent = exports.SwappableStartEvent = exports.SwappableEvent = void 0;
var _AbstractEvent2 = __webpack_require__(/*! ../../shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SwappableEvent = exports.SwappableEvent = /*#__PURE__*/function (_AbstractEvent) {
  _inherits(SwappableEvent, _AbstractEvent);
  var _super = _createSuper(SwappableEvent);
  function SwappableEvent(data) {
    var _this;
    _classCallCheck(this, SwappableEvent);
    _this = _super.call(this, data);
    _this.data = data;
    return _this;
  }
  _createClass(SwappableEvent, [{
    key: "dragEvent",
    get: function get() {
      return this.data.dragEvent;
    }
  }]);
  return SwappableEvent;
}(_AbstractEvent2.AbstractEvent);
SwappableEvent.type = 'swappable';
var SwappableStartEvent = exports.SwappableStartEvent = /*#__PURE__*/function (_SwappableEvent) {
  _inherits(SwappableStartEvent, _SwappableEvent);
  var _super2 = _createSuper(SwappableStartEvent);
  function SwappableStartEvent() {
    _classCallCheck(this, SwappableStartEvent);
    return _super2.apply(this, arguments);
  }
  return _createClass(SwappableStartEvent);
}(SwappableEvent);
SwappableStartEvent.type = 'swappable:start';
SwappableStartEvent.cancelable = true;
var SwappableSwapEvent = exports.SwappableSwapEvent = /*#__PURE__*/function (_SwappableEvent2) {
  _inherits(SwappableSwapEvent, _SwappableEvent2);
  var _super3 = _createSuper(SwappableSwapEvent);
  function SwappableSwapEvent() {
    _classCallCheck(this, SwappableSwapEvent);
    return _super3.apply(this, arguments);
  }
  _createClass(SwappableSwapEvent, [{
    key: "over",
    get: function get() {
      return this.data.over;
    }
  }, {
    key: "overContainer",
    get: function get() {
      return this.data.overContainer;
    }
  }]);
  return SwappableSwapEvent;
}(SwappableEvent);
SwappableSwapEvent.type = 'swappable:swap';
SwappableSwapEvent.cancelable = true;
var SwappableSwappedEvent = exports.SwappableSwappedEvent = /*#__PURE__*/function (_SwappableEvent3) {
  _inherits(SwappableSwappedEvent, _SwappableEvent3);
  var _super4 = _createSuper(SwappableSwappedEvent);
  function SwappableSwappedEvent() {
    _classCallCheck(this, SwappableSwappedEvent);
    return _super4.apply(this, arguments);
  }
  _createClass(SwappableSwappedEvent, [{
    key: "swappedElement",
    get: function get() {
      return this.data.swappedElement;
    }
  }]);
  return SwappableSwappedEvent;
}(SwappableEvent);
SwappableSwappedEvent.type = 'swappable:swapped';
var SwappableStopEvent = exports.SwappableStopEvent = /*#__PURE__*/function (_SwappableEvent4) {
  _inherits(SwappableStopEvent, _SwappableEvent4);
  var _super5 = _createSuper(SwappableStopEvent);
  function SwappableStopEvent() {
    _classCallCheck(this, SwappableStopEvent);
    return _super5.apply(this, arguments);
  }
  return _createClass(SwappableStopEvent);
}(SwappableEvent);
SwappableStopEvent.type = 'swappable:stop';

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/_virtual/_rollupPluginBabelHelpers.mjs":
/*!*************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/_virtual/_rollupPluginBabelHelpers.mjs ***!
  \*************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyDecs2305 = _applyDecs2305;
exports.checkInRHS = _checkInRHS;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function createAddInitializerMethod(e, t) {
  return function (r) {
    assertNotFinished(t, "addInitializer"), assertCallable(r, "An initializer"), e.push(r);
  };
}
function assertInstanceIfPrivate(e, t) {
  if (!e(t)) throw new TypeError("Attempted to access private element on non-instance");
}
function memberDec(e, t, r, a, n, i, s, o, c, l, u) {
  var f;
  switch (i) {
    case 1:
      f = "accessor";
      break;
    case 2:
      f = "method";
      break;
    case 3:
      f = "getter";
      break;
    case 4:
      f = "setter";
      break;
    default:
      f = "field";
  }
  var d,
    p,
    h = {
      kind: f,
      name: o ? "#" + r : r,
      static: s,
      private: o,
      metadata: u
    },
    v = {
      v: !1
    };
  if (0 !== i && (h.addInitializer = createAddInitializerMethod(n, v)), o || 0 !== i && 2 !== i) {
    if (2 === i) d = function d(e) {
      return assertInstanceIfPrivate(l, e), a.value;
    };else {
      var y = 0 === i || 1 === i;
      (y || 3 === i) && (d = o ? function (e) {
        return assertInstanceIfPrivate(l, e), a.get.call(e);
      } : function (e) {
        return a.get.call(e);
      }), (y || 4 === i) && (p = o ? function (e, t) {
        assertInstanceIfPrivate(l, e), a.set.call(e, t);
      } : function (e, t) {
        a.set.call(e, t);
      });
    }
  } else d = function d(e) {
    return e[r];
  }, 0 === i && (p = function p(e, t) {
    e[r] = t;
  });
  var m = o ? l.bind() : function (e) {
    return r in e;
  };
  h.access = d && p ? {
    get: d,
    set: p,
    has: m
  } : d ? {
    get: d,
    has: m
  } : {
    set: p,
    has: m
  };
  try {
    return e.call(t, c, h);
  } finally {
    v.v = !0;
  }
}
function assertNotFinished(e, t) {
  if (e.v) throw new Error("attempted to call " + t + " after decoration was finished");
}
function assertCallable(e, t) {
  if ("function" != typeof e) throw new TypeError(t + " must be a function");
}
function assertValidReturnValue(e, t) {
  var r = _typeof(t);
  if (1 === e) {
    if ("object" !== r || null === t) throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");
    void 0 !== t.get && assertCallable(t.get, "accessor.get"), void 0 !== t.set && assertCallable(t.set, "accessor.set"), void 0 !== t.init && assertCallable(t.init, "accessor.init");
  } else if ("function" !== r) {
    var a;
    throw a = 0 === e ? "field" : 5 === e ? "class" : "method", new TypeError(a + " decorators must return a function or void 0");
  }
}
function curryThis1(e) {
  return function () {
    return e(this);
  };
}
function curryThis2(e) {
  return function (t) {
    e(this, t);
  };
}
function applyMemberDec(e, t, r, a, n, i, s, o, c, l, u) {
  var f,
    d,
    p,
    h,
    v,
    y,
    m = r[0];
  a || Array.isArray(m) || (m = [m]), o ? f = 0 === i || 1 === i ? {
    get: curryThis1(r[3]),
    set: curryThis2(r[4])
  } : 3 === i ? {
    get: r[3]
  } : 4 === i ? {
    set: r[3]
  } : {
    value: r[3]
  } : 0 !== i && (f = Object.getOwnPropertyDescriptor(t, n)), 1 === i ? p = {
    get: f.get,
    set: f.set
  } : 2 === i ? p = f.value : 3 === i ? p = f.get : 4 === i && (p = f.set);
  for (var g = a ? 2 : 1, b = m.length - 1; b >= 0; b -= g) {
    var I;
    if (void 0 !== (h = memberDec(m[b], a ? m[b - 1] : void 0, n, f, c, i, s, o, p, l, u))) assertValidReturnValue(i, h), 0 === i ? I = h : 1 === i ? (I = h.init, v = h.get || p.get, y = h.set || p.set, p = {
      get: v,
      set: y
    }) : p = h, void 0 !== I && (void 0 === d ? d = I : "function" == typeof d ? d = [d, I] : d.push(I));
  }
  if (0 === i || 1 === i) {
    if (void 0 === d) d = function d(e, t) {
      return t;
    };else if ("function" != typeof d) {
      var w = d;
      d = function d(e, t) {
        for (var r = t, a = w.length - 1; a >= 0; a--) r = w[a].call(e, r);
        return r;
      };
    } else {
      var M = d;
      d = function d(e, t) {
        return M.call(e, t);
      };
    }
    e.push(d);
  }
  0 !== i && (1 === i ? (f.get = p.get, f.set = p.set) : 2 === i ? f.value = p : 3 === i ? f.get = p : 4 === i && (f.set = p), o ? 1 === i ? (e.push(function (e, t) {
    return p.get.call(e, t);
  }), e.push(function (e, t) {
    return p.set.call(e, t);
  })) : 2 === i ? e.push(p) : e.push(function (e, t) {
    return p.call(e, t);
  }) : Object.defineProperty(t, n, f));
}
function applyMemberDecs(e, t, r, a) {
  for (var n, i, s, o = [], c = new Map(), l = new Map(), u = 0; u < t.length; u++) {
    var f = t[u];
    if (Array.isArray(f)) {
      var d,
        p,
        h = f[1],
        v = f[2],
        y = f.length > 3,
        m = 16 & h,
        g = !!(8 & h),
        b = r;
      if (h &= 7, g ? (d = e, 0 !== h && (p = i = i || []), y && !s && (s = function s(t) {
        return _checkInRHS(t) === e;
      }), b = s) : (d = e.prototype, 0 !== h && (p = n = n || [])), 0 !== h && !y) {
        var I = g ? l : c,
          w = I.get(v) || 0;
        if (!0 === w || 3 === w && 4 !== h || 4 === w && 3 !== h) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + v);
        I.set(v, !(!w && h > 2) || h);
      }
      applyMemberDec(o, d, f, m, v, h, g, y, p, b, a);
    }
  }
  return pushInitializers(o, n), pushInitializers(o, i), o;
}
function pushInitializers(e, t) {
  t && e.push(function (e) {
    for (var r = 0; r < t.length; r++) t[r].call(e);
    return e;
  });
}
function applyClassDecs(e, t, r, a) {
  if (t.length) {
    for (var n = [], i = e, s = e.name, o = r ? 2 : 1, c = t.length - 1; c >= 0; c -= o) {
      var l = {
        v: !1
      };
      try {
        var u = t[c].call(r ? t[c - 1] : void 0, i, {
          kind: "class",
          name: s,
          addInitializer: createAddInitializerMethod(n, l),
          metadata: a
        });
      } finally {
        l.v = !0;
      }
      void 0 !== u && (assertValidReturnValue(5, u), i = u);
    }
    return [defineMetadata(i, a), function () {
      for (var e = 0; e < n.length; e++) n[e].call(i);
    }];
  }
}
function defineMetadata(e, t) {
  return Object.defineProperty(e, Symbol.metadata || Symbol.for("Symbol.metadata"), {
    configurable: !0,
    enumerable: !0,
    value: t
  });
}
function _applyDecs2305(e, t, r, a, n, i) {
  if (arguments.length >= 6) var s = i[Symbol.metadata || Symbol.for("Symbol.metadata")];
  var o = Object.create(void 0 === s ? null : s),
    c = applyMemberDecs(e, t, n, o);
  return r.length || defineMetadata(e, o), {
    e: c,
    get c() {
      return applyClassDecs(e, r, a, o);
    }
  };
}
function _checkInRHS(e) {
  if (Object(e) !== e) throw TypeError("right-hand side of 'in' should be an object, got " + (null !== e ? _typeof(e) : "null"));
  return e;
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/index.mjs":
/*!********************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/index.mjs ***!
  \********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BaseEvent", {
  enumerable: true,
  get: function get() {
    return _AbstractEvent.AbstractEvent;
  }
});
Object.defineProperty(exports, "BasePlugin", {
  enumerable: true,
  get: function get() {
    return _AbstractPlugin.AbstractPlugin;
  }
});
Object.defineProperty(exports, "Draggable", {
  enumerable: true,
  get: function get() {
    return _Draggable.default;
  }
});
Object.defineProperty(exports, "Droppable", {
  enumerable: true,
  get: function get() {
    return _Droppable.default;
  }
});
exports.Sensors = exports.Plugins = void 0;
Object.defineProperty(exports, "Sortable", {
  enumerable: true,
  get: function get() {
    return _Sortable.default;
  }
});
Object.defineProperty(exports, "Swappable", {
  enumerable: true,
  get: function get() {
    return _Swappable.default;
  }
});
var _AbstractEvent = __webpack_require__(/*! ./shared/AbstractEvent/AbstractEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs");
var _AbstractPlugin = __webpack_require__(/*! ./shared/AbstractPlugin/AbstractPlugin.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs");
var index = _interopRequireWildcard(__webpack_require__(/*! ./Draggable/Sensors/index.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Sensors/index.mjs"));
exports.Sensors = index;
var index$1 = _interopRequireWildcard(__webpack_require__(/*! ./Plugins/index.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Plugins/index.mjs"));
exports.Plugins = index$1;
var _Draggable = _interopRequireDefault(__webpack_require__(/*! ./Draggable/Draggable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Draggable.mjs"));
__webpack_require__(/*! ./Draggable/DragEvent/DragEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DragEvent/DragEvent.mjs");
__webpack_require__(/*! ./Draggable/DraggableEvent/DraggableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/DraggableEvent/DraggableEvent.mjs");
__webpack_require__(/*! ./Draggable/Plugins/Announcement/Announcement.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Announcement/Announcement.mjs");
__webpack_require__(/*! ./Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Draggable/Plugins/Mirror/MirrorEvent/MirrorEvent.mjs");
var _Droppable = _interopRequireDefault(__webpack_require__(/*! ./Droppable/Droppable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/Droppable.mjs"));
__webpack_require__(/*! ./Droppable/DroppableEvent/DroppableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Droppable/DroppableEvent/DroppableEvent.mjs");
var _Swappable = _interopRequireDefault(__webpack_require__(/*! ./Swappable/Swappable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/Swappable.mjs"));
__webpack_require__(/*! ./Swappable/SwappableEvent/SwappableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Swappable/SwappableEvent/SwappableEvent.mjs");
var _Sortable = _interopRequireDefault(__webpack_require__(/*! ./Sortable/Sortable.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/Sortable.mjs"));
__webpack_require__(/*! ./Sortable/SortableEvent/SortableEvent.mjs */ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/Sortable/SortableEvent/SortableEvent.mjs");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs":
/*!*************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractEvent/AbstractEvent.mjs ***!
  \*************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractEvent = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var AbstractEvent = exports.AbstractEvent = /*#__PURE__*/function () {
  function AbstractEvent(data) {
    _classCallCheck(this, AbstractEvent);
    this._canceled = false;
    this.data = data;
  }
  _createClass(AbstractEvent, [{
    key: "type",
    get: function get() {
      return this.constructor.type;
    }
  }, {
    key: "cancelable",
    get: function get() {
      return this.constructor.cancelable;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this._canceled = true;
    }
  }, {
    key: "canceled",
    value: function canceled() {
      return this._canceled;
    }
  }, {
    key: "clone",
    value: function clone(data) {
      return new this.constructor(_objectSpread(_objectSpread({}, this.data), data));
    }
  }]);
  return AbstractEvent;
}();
AbstractEvent.type = 'event';
AbstractEvent.cancelable = false;

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/AbstractPlugin/AbstractPlugin.mjs ***!
  \***************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractPlugin = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var AbstractPlugin = exports.AbstractPlugin = /*#__PURE__*/function () {
  function AbstractPlugin(draggable) {
    _classCallCheck(this, AbstractPlugin);
    this.draggable = draggable;
  }
  _createClass(AbstractPlugin, [{
    key: "attach",
    value: function attach() {
      throw new Error('Not Implemented');
    }
  }, {
    key: "detach",
    value: function detach() {
      throw new Error('Not Implemented');
    }
  }]);
  return AbstractPlugin;
}();

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/closest/closest.mjs ***!
  \*******************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = closest;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function closest(node, value) {
  if (node == null) {
    return null;
  }
  function conditionFn(currentNode) {
    if (currentNode == null || value == null) {
      return false;
    } else if (isSelector(value)) {
      return Element.prototype.matches.call(currentNode, value);
    } else if (isNodeList(value)) {
      return _toConsumableArray(value).includes(currentNode);
    } else if (isElement(value)) {
      return value === currentNode;
    } else if (isFunction(value)) {
      return value(currentNode);
    } else {
      return false;
    }
  }
  var current = node;
  do {
    var _current;
    current = current.correspondingUseElement || current.correspondingElement || current;
    if (conditionFn(current)) {
      return current;
    }
    current = ((_current = current) === null || _current === void 0 ? void 0 : _current.parentNode) || null;
  } while (current != null && current !== document.body && current !== document);
  return null;
}
function isSelector(value) {
  return Boolean(typeof value === 'string');
}
function isNodeList(value) {
  return Boolean(value instanceof NodeList || value instanceof Array);
}
function isElement(value) {
  return Boolean(value instanceof Node);
}
function isFunction(value) {
  return Boolean(typeof value === 'function');
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/decorators/AutoBind.mjs":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/decorators/AutoBind.mjs ***!
  \***********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoBind = AutoBind;
function AutoBind(originalMethod, _ref) {
  var name = _ref.name,
    addInitializer = _ref.addInitializer;
  addInitializer(function () {
    this[name] = originalMethod.bind(this);
  });
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/distance/distance.mjs":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/distance/distance.mjs ***!
  \*********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = distance;
function distance(x1, y1, x2, y2) {
  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/requestNextAnimationFrame/requestNextAnimationFrame.mjs":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/requestNextAnimationFrame/requestNextAnimationFrame.mjs ***!
  \*******************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = requestNextAnimationFrame;
function requestNextAnimationFrame(callback) {
  return requestAnimationFrame(function () {
    requestAnimationFrame(callback);
  });
}

/***/ }),

/***/ "../../node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/touchCoords/touchCoords.mjs":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@shopify+draggable@1.1.3/node_modules/@shopify/draggable/build/esm/shared/utils/touchCoords/touchCoords.mjs ***!
  \***************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = touchCoords;
function touchCoords(event) {
  var touches = event.touches,
    changedTouches = event.changedTouches;
  return touches && touches[0] || changedTouches && changedTouches[0];
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,