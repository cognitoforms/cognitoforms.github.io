(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["RadioGroup"],{

/***/ "../../libs/element-ui/lib/radio-group.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 84);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/emitter.js");

/***/ }),

/***/ 84:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-group.vue?vue&type=template&id=512aa43c
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    _vm._elTag,
    {
      tag: "component",
      staticClass: "el-radio-group",
      attrs: { role: "radiogroup" },
      on: { keydown: _vm.handleKeydown }
    },
    [_vm._t("default")],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/radio/src/radio-group.vue?vue&type=template&id=512aa43c

// EXTERNAL MODULE: external "./mixins/emitter"
var emitter_ = __webpack_require__(4);
var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-group.vue?vue&type=script&lang=js

const keyCode = Object.freeze({
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
});
/* harmony default export */ var radio_groupvue_type_script_lang_js = ({
  name: 'ElRadioGroup',
  componentName: 'ElRadioGroup',
  inject: {
    elFormItem: {
      default: ''
    }
  },
  mixins: [emitter_default.a],
  props: {
    value: {},
    size: String,
    fill: String,
    textColor: String,
    disabled: Boolean,
    native: Boolean
  },
  computed: {
    _elFormItemSize() {
      return (this.elFormItem || {}).elFormItemSize;
    },
    _elTag() {
      return (this.$vnode.data || {}).tag || 'div';
    },
    radioGroupSize() {
      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
    }
  },
  created() {
    this.$on('handleChange', value => {
      this.$emit('change', value);
    });
  },
  mounted() {
    // 当radioGroup没有默认选项时，第一个可以选中Tab导航
    const radios = this.$el.querySelectorAll('[type=radio]');
    const firstLabel = this.$el.querySelectorAll('[role=radio]')[0];
    if (![].some.call(radios, radio => radio.checked) && firstLabel) {
      firstLabel.tabIndex = 0;
    }
  },
  methods: {
    handleKeydown(e) {
      // 左右上下按键 可以在radio组内切换不同选项
      const target = e.target;
      const className = target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]';
      const radios = this.$el.querySelectorAll(className);
      const length = radios.length;
      const index = [].indexOf.call(radios, target);
      const roleRadios = this.$el.querySelectorAll('[role=radio]');
      switch (e.keyCode) {
        case keyCode.LEFT:
        case keyCode.UP:
          e.stopPropagation();
          e.preventDefault();
          if (index === 0) {
            roleRadios[length - 1].click();
            roleRadios[length - 1].focus();
          } else {
            roleRadios[index - 1].click();
            roleRadios[index - 1].focus();
          }
          break;
        case keyCode.RIGHT:
        case keyCode.DOWN:
          if (index === length - 1) {
            e.stopPropagation();
            e.preventDefault();
            roleRadios[0].click();
            roleRadios[0].focus();
          } else {
            roleRadios[index + 1].click();
            roleRadios[index + 1].focus();
          }
          break;
        default:
          break;
      }
    }
  },
  watch: {
    value(value) {
      this.dispatch('ElFormItem', 'el.form.change', [this.value]);
    }
  }
});
// CONCATENATED MODULE: ./packages/radio/src/radio-group.vue?vue&type=script&lang=js
 /* harmony default export */ var src_radio_groupvue_type_script_lang_js = (radio_groupvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/radio/src/radio-group.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_radio_groupvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var radio_group = (component.exports);
// CONCATENATED MODULE: ./packages/radio-group/index.js


/* istanbul ignore next */
radio_group.install = function (Vue) {
  Vue.component(radio_group.name, radio_group);
};
/* harmony default export */ var packages_radio_group = __webpack_exports__["default"] = (radio_group);

/***/ })

/******/ });

/***/ }),

/***/ "../../libs/element-ui/lib/radio.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 83);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/emitter.js");

/***/ }),

/***/ 83:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio.vue?vue&type=template&id=52d19fe9
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "label",
    {
      staticClass: "el-radio",
      class: [
        _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
        { "is-disabled": _vm.isDisabled },
        { "is-focus": _vm.focus },
        { "is-bordered": _vm.border },
        { "is-checked": _vm.model === _vm.label }
      ],
      attrs: {
        role: "radio",
        "aria-checked": _vm.model === _vm.label ? "true" : "false",
        "aria-disabled": _vm.isDisabled,
        tabindex: _vm.tabIndex
      },
      on: {
        keydown: function($event) {
          if (
            !$event.type.indexOf("key") &&
            _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])
          )
            return null
          $event.stopPropagation()
          $event.preventDefault()
          _vm.model = _vm.isDisabled ? _vm.model : _vm.label
        }
      }
    },
    [
      _c(
        "span",
        {
          staticClass: "el-radio__input",
          class: {
            "is-disabled": _vm.isDisabled,
            "is-checked": _vm.model === _vm.label
          }
        },
        [
          _c("span", { staticClass: "el-radio__inner" }),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.model,
                expression: "model"
              }
            ],
            ref: "radio",
            staticClass: "el-radio__original",
            attrs: {
              type: "radio",
              "aria-hidden": !_vm.native,
              name: _vm.name,
              disabled: _vm.isDisabled,
              tabindex: "-1"
            },
            domProps: {
              value: _vm.label,
              checked: _vm._q(_vm.model, _vm.label)
            },
            on: {
              focus: function($event) {
                _vm.focus = true
              },
              blur: function($event) {
                _vm.focus = false
              },
              change: [
                function($event) {
                  _vm.model = _vm.label
                },
                _vm.handleChange
              ]
            }
          })
        ]
      ),
      _c(
        "span",
        {
          staticClass: "el-radio__label",
          on: {
            keydown: function($event) {
              $event.stopPropagation()
            }
          }
        },
        [
          _vm._t("default"),
          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
        ],
        2
      )
    ]
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/radio/src/radio.vue?vue&type=template&id=52d19fe9

// EXTERNAL MODULE: external "./mixins/emitter"
var emitter_ = __webpack_require__(4);
var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio.vue?vue&type=script&lang=js

/* harmony default export */ var radiovue_type_script_lang_js = ({
  name: 'ElRadio',
  mixins: [emitter_default.a],
  inject: {
    elForm: {
      default: ''
    },
    elFormItem: {
      default: ''
    }
  },
  componentName: 'ElRadio',
  props: {
    value: {},
    label: {},
    disabled: Boolean,
    name: String,
    border: Boolean,
    size: String,
    native: Boolean
  },
  data() {
    return {
      focus: false
    };
  },
  computed: {
    isGroup() {
      let parent = this.$parent;
      while (parent) {
        if (parent.$options.componentName !== 'ElRadioGroup') {
          parent = parent.$parent;
        } else {
          this._radioGroup = parent;
          return true;
        }
      }
      return false;
    },
    model: {
      get() {
        return this.isGroup ? this._radioGroup.value : this.value;
      },
      set(val) {
        if (this.isGroup) {
          this.dispatch('ElRadioGroup', 'input', [val]);
        } else {
          this.$emit('input', val);
        }
        this.$refs.radio && (this.$refs.radio.checked = this.model === this.label);
      }
    },
    _elFormItemSize() {
      return (this.elFormItem || {}).elFormItemSize;
    },
    radioSize() {
      const temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
      return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;
    },
    isDisabled() {
      return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;
    },
    tabIndex() {
      return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;
    }
  },
  methods: {
    handleChange() {
      this.$nextTick(() => {
        this.$emit('change', this.model);
        this.isGroup && this.dispatch('ElRadioGroup', 'handleChange', this.model);
      });
    }
  }
});
// CONCATENATED MODULE: ./packages/radio/src/radio.vue?vue&type=script&lang=js
 /* harmony default export */ var src_radiovue_type_script_lang_js = (radiovue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/radio/src/radio.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_radiovue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src_radio = (component.exports);
// CONCATENATED MODULE: ./packages/radio/index.js


/* istanbul ignore next */
src_radio.install = function (Vue) {
  Vue.component(src_radio.name, src_radio);
};
/* harmony default export */ var packages_radio = __webpack_exports__["default"] = (src_radio);

/***/ })

/******/ });

/***/ }),

/***/ "../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/RadioGroup.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cognitoforms_element_ui_lib_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/element-ui/lib/input.js");
/* harmony import */ var _cognitoforms_element_ui_lib_input__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_input__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cognitoforms_element_ui_lib_radio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../libs/element-ui/lib/radio.js");
/* harmony import */ var _cognitoforms_element_ui_lib_radio__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_radio__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _cognitoforms_element_ui_lib_radio_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../libs/element-ui/lib/radio-group.js");
/* harmony import */ var _cognitoforms_element_ui_lib_radio_group__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_radio_group__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_fancy_checkables_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/style/_fancy-checkables.scss");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var src_mixins_columnized_options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/mixins/columnized-options.ts");
/* harmony import */ var src_mixins_resetComponentData__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/mixins/resetComponentData.ts");
/* harmony import */ var _GeneratedAvatar_vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/components/GeneratedAvatar.vue");








vue__WEBPACK_IMPORTED_MODULE_4___default.a.use(_cognitoforms_element_ui_lib_radio_group__WEBPACK_IMPORTED_MODULE_2___default.a);
vue__WEBPACK_IMPORTED_MODULE_4___default.a.use(_cognitoforms_element_ui_lib_radio__WEBPACK_IMPORTED_MODULE_1___default.a);
vue__WEBPACK_IMPORTED_MODULE_4___default.a.use(_cognitoforms_element_ui_lib_input__WEBPACK_IMPORTED_MODULE_0___default.a);
/* harmony default export */ __webpack_exports__["default"] = (vue__WEBPACK_IMPORTED_MODULE_4___default.a.extend({
  name: 'CRadioGroup',
  components: {
    CGeneratedAvatar: _GeneratedAvatar_vue__WEBPACK_IMPORTED_MODULE_7__["default"]
  },
  filters: {
    spaceIfEmpty(value) {
      // https://stackoverflow.com/a/19810263/2836695
      return value || '\xa0';
    }
  },
  mixins: [src_mixins_columnized_options__WEBPACK_IMPORTED_MODULE_5__["default"], src_mixins_resetComponentData__WEBPACK_IMPORTED_MODULE_6__["default"]],
  inject: ['$resource'],
  inheritAttrs: false,
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    value: {
      type: String,
      default: null
    },
    readonly: Boolean,
    allowOther: Boolean
  },
  data() {
    return {
      internalValue: this.value,
      // The other value being undefined keeps it from being selected
      // (the radio is selected if its label is the same as the group's value, `internalValue`, which is blank string)
      otherValue: this.isOtherValue(this.value) ? this.value : undefined
    };
  },
  computed: {
    selectedValue() {
      return this.options.find(o => o.value === this.value);
    },
    displayValue() {
      if (this.value) {
        if (this.selectedValue) return this.selectedValue.displayValue;else if (this.allowOther) return this.value;
      }
      return '';
    },
    otherIsSelected() {
      return this.internalValue === this.otherValue;
    },
    selectedImage() {
      if (this.value) {
        var _this$selectedValue$s, _this$selectedValue, _this$selectedValue2;
        const selectedImage = (_this$selectedValue$s = (_this$selectedValue = this.selectedValue) === null || _this$selectedValue === void 0 ? void 0 : _this$selectedValue.svg) !== null && _this$selectedValue$s !== void 0 ? _this$selectedValue$s : (_this$selectedValue2 = this.selectedValue) === null || _this$selectedValue2 === void 0 ? void 0 : _this$selectedValue2.image;
        return selectedImage !== null && selectedImage !== void 0 ? selectedImage : '';
      }
      return '';
    }
  },
  watch: {
    value: {
      immediate: true,
      handler(value) {
        this.internalValue = value;
        if (this.isOtherValue(value)) this.otherValue = value;
      }
    },
    internalValue: {
      immediate: false,
      async handler(value) {
        await this.$nextTick();
        this.setTabIndex();
      }
    }
  },
  created() {
    this.changeHandlerName = ['handleChange', 'handleOtherBlur'];
  },
  methods: {
    isOtherValue(value) {
      return !!value && this.allowOther && !this.options.map(o => o.value).includes(value);
    },
    handleOtherFocus() {
      this.updating = true;

      // If the other option is undefined when focussed, then set it to blank string to cause it to be selected
      if (!this.otherValue) this.otherValue = '';

      // Treat focus on the "Other" textbox as its first input event (which will seed the internal value with blank string)
      this.handleOtherInput();
      if (this.internalValue !== this.value) {
        // Emit change when "Other" is focused if there is a value, since the blank other value is now selected
        this.$emit('change', this.internalValue);
      }
    },
    handleOtherInput() {
      // Change the internal value to match the other value when it is selected or changed
      this.internalValue = this.otherValue;
      this.$emit('input', this.internalValue);
    },
    handleOtherBlur(ev) {
      // If the other value is blank when blurred, then set the value to `undefined` to cause it to be de-selected
      if (!this.otherValue) this.otherValue = undefined;

      // Raise the change event if the value has actually changed (i.e. the user didn't simply focus into the input then leave)
      if (this.internalValue !== this.value) {
        this.$emit('change', this.internalValue);
      }
      this.setTabIndex();
    },
    async handleOtherRadioChange(e) {
      await this.$nextTick();
      this.$refs.otherInput.focus();
    },
    async handleOtherRadioClick(e) {
      await this.$nextTick();
      this.$refs.otherInput.focus();
    },
    handleChange(value) {
      this.internalValue = value;
      this.$emit('change', this.internalValue);
      this.setTabIndex();
    },
    handleRadioSpace() {
      this.$emit('change', this.internalValue);
    },
    setTabIndex() {
      const firstRadio = this.$el.querySelector('.el-radio');
      if (!firstRadio) return;

      // If the first radio is checked, tabbing order will be correct.
      if (firstRadio.getAttribute('aria-checked')) {
        firstRadio.setAttribute('tabindex', '0');
        return;
      }
      setTimeout(() => {
        const checked = this.$el.querySelector('[aria-checked]');

        // If nothing is checked, put tabindex=0 on the first radio. Element does not account for deselecting radio groups.
        // Otherwise, if a radio other than the first is checked, take the first radio out of tabbing order. This fixes a bug in Element.
        if (!checked) firstRadio.setAttribute('tabindex', '0');else firstRadio.setAttribute('tabindex', '-1');
      });
    },
    isSvg(image) {
      return image && image.startsWith('<svg viewBox=');
    }
  }
}));

/***/ }),

/***/ "../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/RadioGroup.vue?vue&type=template&id=70a7e118&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function render() {
  var _vm = this,
    _c = _vm._self._c,
    _setup = _vm._self._setupProxy
  return _c(
    "div",
    {
      staticClass: "cog-checkable cog-input",
      class: [
        { "cog-checkable--allow-other": _vm.allowOther },
        _vm.hasColumns ? _vm.columnClasses : "cog-checkable--inline",
        _vm.readonly ? "is-read-only" : ""
      ]
    },
    [
      _vm.readonly
        ? _c(
            "div",
            { class: { "cog-image-item": _vm.selectedImage } },
            [
              _vm.selectedImage
                ? [
                    _vm.isSvg(_vm.selectedImage)
                      ? _c("c-generated-avatar", {
                          attrs: { svg: _vm.selectedImage }
                        })
                      : _c("img", {
                          staticClass: "cog-lookup-image cog-avatar",
                          attrs: {
                            src: _vm.selectedImage,
                            height: "50",
                            width: "50"
                          }
                        })
                  ]
                : _vm._e(),
              _vm._v(
                _vm._s(
                  _vm._f("spaceIfEmpty")(_vm._f("breakWords")(_vm.displayValue))
                )
              )
            ],
            2
          )
        : _c(
            "el-radio-group",
            {
              attrs: { role: null, label: null },
              on: { change: _vm.handleChange },
              model: {
                value: _vm.internalValue,
                callback: function($$v) {
                  _vm.internalValue = $$v
                },
                expression: "internalValue"
              }
            },
            [
              _vm._l(_vm.options, function(item, i) {
                return _c(
                  "el-radio",
                  {
                    key: item.value,
                    staticClass: "cog-checkable__item",
                    class: _vm.hasColumns ? "cog-inner-col__item" : null,
                    style: `order: ${_vm.optionOrder[i]}`,
                    attrs: { label: item.value, value: item.value },
                    nativeOn: {
                      keydown: function($event) {
                        if (
                          !$event.type.indexOf("key") &&
                          _vm._k($event.keyCode, "space", 32, $event.key, [
                            " ",
                            "Spacebar"
                          ])
                        )
                          return null
                        return _vm.handleRadioSpace.apply(null, arguments)
                      },
                      click: function($event) {
                        return _vm.$emit("focus-lost")
                      }
                    }
                  },
                  [
                    _c(
                      "div",
                      { class: { "cog-image-item": item.image || item.svg } },
                      [
                        item.svg
                          ? _c("c-generated-avatar", {
                              attrs: { svg: item.svg }
                            })
                          : item.image
                          ? _c("img", {
                              staticClass: "cog-lookup-image cog-avatar",
                              attrs: {
                                src: item.image,
                                height: "50",
                                width: "50"
                              }
                            })
                          : _vm._e(),
                        _vm._v(
                          "\n\t\t\t\t" +
                            _vm._s(_vm._f("breakWords")(item.displayValue)) +
                            "\n\t\t\t"
                        )
                      ],
                      1
                    )
                  ]
                )
              }),
              _vm._v(" "),
              _vm.allowOther
                ? _c(
                    "el-radio",
                    {
                      ref: "otherRadio",
                      staticClass:
                        "cog-checkable__item cog-checkable__allow-other",
                      class: _vm.hasColumns ? "cog-inner-col__item" : null,
                      style: `order: ${_vm.optionOrder[_vm.options.length]}`,
                      attrs: { label: _vm.otherValue },
                      on: { change: _vm.handleOtherRadioChange },
                      nativeOn: {
                        click: function($event) {
                          return _vm.handleOtherRadioClick.apply(
                            null,
                            arguments
                          )
                        }
                      }
                    },
                    [
                      _c("el-input", {
                        ref: "otherInput",
                        attrs: {
                          tabindex: _vm.otherIsSelected ? "0" : "-1",
                          placeholder: _vm.$resource(
                            "field-choice-other-fill-in"
                          )
                        },
                        on: {
                          focus: _vm.handleOtherFocus,
                          blur: _vm.handleOtherBlur,
                          input: _vm.handleOtherInput
                        },
                        model: {
                          value: _vm.otherValue,
                          callback: function($$v) {
                            _vm.otherValue = $$v
                          },
                          expression: "otherValue"
                        }
                      })
                    ],
                    1
                  )
                : _vm._e()
            ],
            2
          )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./src/components/RadioGroup.vue":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/RadioGroup.vue?vue&type=template&id=70a7e118&");
/* harmony import */ var _RadioGroup_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/components/RadioGroup.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _RadioGroup_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__["render"],
  _RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (true) {
  var api = __webpack_require__("../../node_modules/.pnpm/vue-hot-reload-api@2.3.4/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(__webpack_require__("vue"))
  if (api.compatible) {
    module.hot.accept()
    if (!api.isRecorded('70a7e118')) {
      api.createRecord('70a7e118', component.options)
    } else {
      api.reload('70a7e118', component.options)
    }
    module.hot.accept("./src/components/RadioGroup.vue?vue&type=template&id=70a7e118&", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/RadioGroup.vue?vue&type=template&id=70a7e118&");
(function () {
      api.rerender('70a7e118', {
        render: _RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__["render"],
        staticRenderFns: _RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]
      })
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))
  }
}
component.options.__file = "src/components/RadioGroup.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/RadioGroup.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RadioGroup_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/RadioGroup.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RadioGroup_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/RadioGroup.vue?vue&type=template&id=70a7e118&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/RadioGroup.vue?vue&type=template&id=70a7e118&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_RadioGroup_vue_vue_type_template_id_70a7e118___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L2xpYnMvZWxlbWVudC11aS9saWIvcmFkaW8tZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9saWJzL2VsZW1lbnQtdWkvbGliL3JhZGlvLmpzIiwid2VicGFjazovLy9zcmMvY29tcG9uZW50cy9SYWRpb0dyb3VwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9SYWRpb0dyb3VwLnZ1ZT8zMTIwIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhZGlvR3JvdXAudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1JhZGlvR3JvdXAudnVlPzA2NDIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmFkaW9Hcm91cC52dWU/ZGViNSJdLCJuYW1lcyI6WyJWdWUiLCJ1c2UiLCJfUmFkaW9Hcm91cCIsIl9SYWRpbyIsIl9JbnB1dCIsImV4dGVuZCIsIm5hbWUiLCJjb21wb25lbnRzIiwiQ0dlbmVyYXRlZEF2YXRhciIsImZpbHRlcnMiLCJzcGFjZUlmRW1wdHkiLCJ2YWx1ZSIsIm1peGlucyIsImNvbHVtbml6ZWRPcHRpb25zIiwicmVzZXRDb21wb25lbnREYXRhIiwiaW5qZWN0IiwiaW5oZXJpdEF0dHJzIiwibW9kZWwiLCJwcm9wIiwiZXZlbnQiLCJwcm9wcyIsInR5cGUiLCJTdHJpbmciLCJkZWZhdWx0IiwicmVhZG9ubHkiLCJCb29sZWFuIiwiYWxsb3dPdGhlciIsImRhdGEiLCJpbnRlcm5hbFZhbHVlIiwib3RoZXJWYWx1ZSIsImlzT3RoZXJWYWx1ZSIsInVuZGVmaW5lZCIsImNvbXB1dGVkIiwic2VsZWN0ZWRWYWx1ZSIsIm9wdGlvbnMiLCJmaW5kIiwibyIsImRpc3BsYXlWYWx1ZSIsIm90aGVySXNTZWxlY3RlZCIsInNlbGVjdGVkSW1hZ2UiLCJfdGhpcyRzZWxlY3RlZFZhbHVlJHMiLCJfdGhpcyRzZWxlY3RlZFZhbHVlIiwiX3RoaXMkc2VsZWN0ZWRWYWx1ZTIiLCJzdmciLCJpbWFnZSIsIndhdGNoIiwiaW1tZWRpYXRlIiwiaGFuZGxlciIsIiRuZXh0VGljayIsInNldFRhYkluZGV4IiwiY3JlYXRlZCIsImNoYW5nZUhhbmRsZXJOYW1lIiwibWV0aG9kcyIsIm1hcCIsImluY2x1ZGVzIiwiaGFuZGxlT3RoZXJGb2N1cyIsInVwZGF0aW5nIiwiaGFuZGxlT3RoZXJJbnB1dCIsIiRlbWl0IiwiaGFuZGxlT3RoZXJCbHVyIiwiZXYiLCJoYW5kbGVPdGhlclJhZGlvQ2hhbmdlIiwiZSIsIiRyZWZzIiwib3RoZXJJbnB1dCIsImZvY3VzIiwiaGFuZGxlT3RoZXJSYWRpb0NsaWNrIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlUmFkaW9TcGFjZSIsImZpcnN0UmFkaW8iLCIkZWwiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0VGltZW91dCIsImNoZWNrZWQiLCJpc1N2ZyIsInN0YXJ0c1dpdGgiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0NBQWdDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxrQkFBa0I7QUFDbEY7QUFDQSx5REFBeUQsY0FBYztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxpQ0FBaUM7QUFDbEYsd0hBQXdILG1CQUFtQixFQUFFO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEIsRUFBRTtBQUMvRCx5Q0FBeUMsZUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELCtEQUErRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwyRkFBMkYsMkJBQTJCLEVBQUU7QUFDeEg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTs7QUFFQSxpQkFBaUIsbUJBQU8sQ0FBQyw2Q0FBa0I7O0FBRTNDLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkMsV0FBVztBQUNYLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DLEtBQUs7QUFDTDtBQUNBLG9DQUFvQztBQUNwQyxLQUFLO0FBQ0w7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsZ0g7QUFDQTtBQUNBOztBQUVBOzs7Ozs7QUFNQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUCxVQUFVLEU7Ozs7Ozs7QUM1V1Y7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0NBQWdDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxrQkFBa0I7QUFDbEY7QUFDQSx5REFBeUQsY0FBYztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxpQ0FBaUM7QUFDbEYsd0hBQXdILG1CQUFtQixFQUFFO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEIsRUFBRTtBQUMvRCx5Q0FBeUMsZUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELCtEQUErRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwyRkFBMkYsMkJBQTJCLEVBQUU7QUFDeEg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTs7QUFFQSxpQkFBaUIsbUJBQU8sQ0FBQyw2Q0FBa0I7O0FBRTNDLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdDQUFnQztBQUN6QyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLDRCQUE0QjtBQUNyQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxzQkFBc0IsaUNBQWlDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsYUFBYTtBQUNiLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMO0FBQ0Esb0ZBQW9GO0FBQ3BGO0FBQ0EsS0FBSztBQUNMO0FBQ0EsNEZBQTRGLGdEQUFnRDtBQUM1SSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9HO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7O0FBTUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVAsVUFBVSxFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1WFY7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBQSwwQ0FBQSxDQUFBQyxHQUFBLENBQUFDLCtFQUFBO0FBQ0FGLDBDQUFBLENBQUFDLEdBQUEsQ0FBQUUseUVBQUE7QUFDQUgsMENBQUEsQ0FBQUMsR0FBQSxDQUFBRyx5RUFBQTtBQUVBSix5R0FBQSxDQUFBSyxNQUFBO0VBQ0FDLElBQUE7RUFDQUMsVUFBQTtJQUFBQztFQUFBO0VBQ0FDLE9BQUE7SUFDQUMsYUFBQUMsS0FBQTtNQUNBO01BQ0EsT0FBQUEsS0FBQTtJQUNBO0VBQ0E7RUFDQUMsTUFBQSxHQUFBQyxxRUFBQSxFQUFBQyxxRUFBQTtFQUNBQyxNQUFBO0VBQ0FDLFlBQUE7RUFDQUMsS0FBQTtJQUNBQyxJQUFBO0lBQ0FDLEtBQUE7RUFDQTtFQUNBQyxLQUFBO0lBQ0FULEtBQUE7TUFBQVUsSUFBQSxFQUFBQyxNQUFBO01BQUFDLE9BQUE7SUFBQTtJQUNBQyxRQUFBLEVBQUFDLE9BQUE7SUFDQUMsVUFBQSxFQUFBRDtFQUNBO0VBQ0FFLEtBQUE7SUFDQTtNQUNBQyxhQUFBLE9BQUFqQixLQUFBO01BQ0E7TUFDQTtNQUNBa0IsVUFBQSxPQUFBQyxZQUFBLE1BQUFuQixLQUFBLFNBQUFBLEtBQUEsR0FBQW9CO0lBQ0E7RUFDQTtFQUNBQyxRQUFBO0lBQ0FDLGNBQUE7TUFDQSxZQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUF6QixLQUFBLFVBQUFBLEtBQUE7SUFDQTtJQUNBMEIsYUFBQTtNQUNBLFNBQUExQixLQUFBO1FBQ0EsU0FBQXNCLGFBQUEsRUFDQSxZQUFBQSxhQUFBLENBQUFJLFlBQUEsTUFDQSxTQUFBWCxVQUFBLEVBQ0EsWUFBQWYsS0FBQTtNQUNBO01BQ0E7SUFDQTtJQUNBMkIsZ0JBQUE7TUFDQSxZQUFBVixhQUFBLFVBQUFDLFVBQUE7SUFDQTtJQUNBVSxjQUFBO01BQ0EsU0FBQTVCLEtBQUE7UUFBQSxJQUFBNkIscUJBQUEsRUFBQUMsbUJBQUEsRUFBQUMsb0JBQUE7UUFDQSxNQUFBSCxhQUFBLElBQUFDLHFCQUFBLElBQUFDLG1CQUFBLFFBQUFSLGFBQUEsY0FBQVEsbUJBQUEsdUJBQUFBLG1CQUFBLENBQUFFLEdBQUEsY0FBQUgscUJBQUEsY0FBQUEscUJBQUEsSUFBQUUsb0JBQUEsUUFBQVQsYUFBQSxjQUFBUyxvQkFBQSx1QkFBQUEsb0JBQUEsQ0FBQUUsS0FBQTtRQUNBLE9BQUFMLGFBQUEsYUFBQUEsYUFBQSxjQUFBQSxhQUFBO01BQ0E7TUFDQTtJQUNBO0VBQ0E7RUFDQU0sS0FBQTtJQUNBbEMsS0FBQTtNQUNBbUMsU0FBQTtNQUNBQyxRQUFBcEMsS0FBQTtRQUNBLEtBQUFpQixhQUFBLEdBQUFqQixLQUFBO1FBQ0EsU0FBQW1CLFlBQUEsQ0FBQW5CLEtBQUEsR0FDQSxLQUFBa0IsVUFBQSxHQUFBbEIsS0FBQTtNQUNBO0lBQ0E7SUFDQWlCLGFBQUE7TUFDQWtCLFNBQUE7TUFDQSxNQUFBQyxRQUFBcEMsS0FBQTtRQUNBLFdBQUFxQyxTQUFBO1FBQ0EsS0FBQUMsV0FBQTtNQUNBO0lBQ0E7RUFDQTtFQUNBQyxRQUFBO0lBQ0EsS0FBQUMsaUJBQUE7RUFDQTtFQUNBQyxPQUFBO0lBQ0F0QixhQUFBbkIsS0FBQTtNQUNBLFNBQUFBLEtBQUEsU0FBQWUsVUFBQSxVQUFBUSxPQUFBLENBQUFtQixHQUFBLENBQUFqQixDQUFBLElBQUFBLENBQUEsQ0FBQXpCLEtBQUEsRUFBQTJDLFFBQUEsQ0FBQTNDLEtBQUE7SUFDQTtJQUNBNEMsaUJBQUE7TUFDQSxLQUFBQyxRQUFBOztNQUVBO01BQ0EsVUFBQTNCLFVBQUEsRUFDQSxLQUFBQSxVQUFBOztNQUVBO01BQ0EsS0FBQTRCLGdCQUFBO01BRUEsU0FBQTdCLGFBQUEsVUFBQWpCLEtBQUE7UUFDQTtRQUNBLEtBQUErQyxLQUFBLGdCQUFBOUIsYUFBQTtNQUNBO0lBQ0E7SUFDQTZCLGlCQUFBO01BQ0E7TUFDQSxLQUFBN0IsYUFBQSxRQUFBQyxVQUFBO01BRUEsS0FBQTZCLEtBQUEsZUFBQTlCLGFBQUE7SUFDQTtJQUNBK0IsZ0JBQUFDLEVBQUE7TUFDQTtNQUNBLFVBQUEvQixVQUFBLEVBQ0EsS0FBQUEsVUFBQSxHQUFBRSxTQUFBOztNQUVBO01BQ0EsU0FBQUgsYUFBQSxVQUFBakIsS0FBQTtRQUNBLEtBQUErQyxLQUFBLGdCQUFBOUIsYUFBQTtNQUNBO01BQ0EsS0FBQXFCLFdBQUE7SUFDQTtJQUNBLE1BQUFZLHVCQUFBQyxDQUFBO01BQ0EsV0FBQWQsU0FBQTtNQUNBLEtBQUFlLEtBQUEsQ0FBQUMsVUFBQSxDQUFBQyxLQUFBO0lBQ0E7SUFDQSxNQUFBQyxzQkFBQUosQ0FBQTtNQUNBLFdBQUFkLFNBQUE7TUFDQSxLQUFBZSxLQUFBLENBQUFDLFVBQUEsQ0FBQUMsS0FBQTtJQUNBO0lBQ0FFLGFBQUF4RCxLQUFBO01BQ0EsS0FBQWlCLGFBQUEsR0FBQWpCLEtBQUE7TUFDQSxLQUFBK0MsS0FBQSxnQkFBQTlCLGFBQUE7TUFDQSxLQUFBcUIsV0FBQTtJQUNBO0lBQ0FtQixpQkFBQTtNQUNBLEtBQUFWLEtBQUEsZ0JBQUE5QixhQUFBO0lBQ0E7SUFDQXFCLFlBQUE7TUFDQSxNQUFBb0IsVUFBQSxRQUFBQyxHQUFBLENBQUFDLGFBQUE7TUFFQSxLQUFBRixVQUFBLEVBQ0E7O01BRUE7TUFDQSxJQUFBQSxVQUFBLENBQUFHLFlBQUE7UUFDQUgsVUFBQSxDQUFBSSxZQUFBO1FBQ0E7TUFDQTtNQUVBQyxVQUFBO1FBQ0EsTUFBQUMsT0FBQSxRQUFBTCxHQUFBLENBQUFDLGFBQUE7O1FBRUE7UUFDQTtRQUNBLEtBQUFJLE9BQUEsRUFDQU4sVUFBQSxDQUFBSSxZQUFBLHVCQUVBSixVQUFBLENBQUFJLFlBQUE7TUFDQTtJQUNBO0lBQ0FHLE1BQUFoQyxLQUFBO01BQ0EsT0FBQUEsS0FBQSxJQUFBQSxLQUFBLENBQUFpQyxVQUFBO0lBQ0E7RUFDQTtBQUNBLEk7Ozs7Ozs7O0FDM05BO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsK0NBQStDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUyxzQ0FBc0MsRUFBRTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQkFBMEI7QUFDaEQsbUJBQW1CLDJCQUEyQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsbUJBQW1CO0FBQ3hELDRCQUE0Qix1Q0FBdUM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUywyQ0FBMkMsRUFBRTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsb0NBQW9DO0FBQzNFLDhCQUE4Qix3QkFBd0I7QUFDdEQsMkJBQTJCLHFDQUFxQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ3pLQTtBQUFBO0FBQUE7QUFBQTtBQUF5RjtBQUMzQjtBQUNMOzs7QUFHekQ7QUFDa047QUFDbE4sZ0JBQWdCLDROQUFVO0FBQzFCLEVBQUUsZ0ZBQU07QUFDUixFQUFFLHFGQUFNO0FBQ1IsRUFBRSw4RkFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLElBQUksSUFBVTtBQUNkLFlBQVksbUJBQU8sQ0FBQyxpR0FBb0s7QUFDeEwsY0FBYyxtQkFBTyxDQUFDLEtBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNCQUFzQixnRUFBaUQsRUFBRTtBQUFBO0FBQ3pFO0FBQ0EsZ0JBQWdCLHFGQUFNO0FBQ3RCLHlCQUF5Qiw4RkFBZTtBQUN4QyxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNlLGdGOzs7Ozs7OztBQ3RDZjtBQUFBO0FBQUEsd0NBQXdYLENBQWdCLDJhQUFHLEVBQUMsQzs7Ozs7Ozs7QUNBNVk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6IlJhZGlvR3JvdXAuODQ4ZDU5ZDFiMWUzNTI1OGVhNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2Rpc3QvXCI7XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDg0KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIG5vcm1hbGl6ZUNvbXBvbmVudDsgfSk7XG4vKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyIC8qIHNlcnZlciBvbmx5ICovLFxuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPVxuICAgIHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7XG4gICAgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24oaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaykgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbWl4aW5zL2VtaXR0ZXJcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFU00gQ09NUEFUIEZMQUdcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS01IUM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMS4xX2Nzcy1sb2FkZXJANS4yLjdfcHJldHRpZXJAMS4xOC4yX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9wYWNrYWdlcy9yYWRpby9zcmMvcmFkaW8tZ3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUxMmFhNDNjXG52YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX2MoXG4gICAgX3ZtLl9lbFRhZyxcbiAgICB7XG4gICAgICB0YWc6IFwiY29tcG9uZW50XCIsXG4gICAgICBzdGF0aWNDbGFzczogXCJlbC1yYWRpby1ncm91cFwiLFxuICAgICAgYXR0cnM6IHsgcm9sZTogXCJyYWRpb2dyb3VwXCIgfSxcbiAgICAgIG9uOiB7IGtleWRvd246IF92bS5oYW5kbGVLZXlkb3duIH1cbiAgICB9LFxuICAgIFtfdm0uX3QoXCJkZWZhdWx0XCIpXSxcbiAgICAyXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy9yYWRpby9zcmMvcmFkaW8tZ3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTUxMmFhNDNjXG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCIuL21peGlucy9lbWl0dGVyXCJcbnZhciBlbWl0dGVyXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgZW1pdHRlcl9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihlbWl0dGVyXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IEM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vYmFiZWwtbG9hZGVyQDguMy4wX0BiYWJlbCtjb3JlQDcuMjUuMl93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYiFDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYj8/dnVlLWxvYWRlci1vcHRpb25zIS4vcGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1xuXG5jb25zdCBrZXlDb2RlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIFJJR0hUOiAzOSxcbiAgRE9XTjogNDBcbn0pO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcmFkaW9fZ3JvdXB2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyA9ICh7XG4gIG5hbWU6ICdFbFJhZGlvR3JvdXAnLFxuICBjb21wb25lbnROYW1lOiAnRWxSYWRpb0dyb3VwJyxcbiAgaW5qZWN0OiB7XG4gICAgZWxGb3JtSXRlbToge1xuICAgICAgZGVmYXVsdDogJydcbiAgICB9XG4gIH0sXG4gIG1peGluczogW2VtaXR0ZXJfZGVmYXVsdC5hXSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge30sXG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIGZpbGw6IFN0cmluZyxcbiAgICB0ZXh0Q29sb3I6IFN0cmluZyxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBuYXRpdmU6IEJvb2xlYW5cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBfZWxGb3JtSXRlbVNpemUoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuZWxGb3JtSXRlbSB8fCB7fSkuZWxGb3JtSXRlbVNpemU7XG4gICAgfSxcbiAgICBfZWxUYWcoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuJHZub2RlLmRhdGEgfHwge30pLnRhZyB8fCAnZGl2JztcbiAgICB9LFxuICAgIHJhZGlvR3JvdXBTaXplKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZSB8fCB0aGlzLl9lbEZvcm1JdGVtU2l6ZSB8fCAodGhpcy4kRUxFTUVOVCB8fCB7fSkuc2l6ZTtcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy4kb24oJ2hhbmRsZUNoYW5nZScsIHZhbHVlID0+IHtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHZhbHVlKTtcbiAgICB9KTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICAvLyDlvZNyYWRpb0dyb3Vw5rKh5pyJ6buY6K6k6YCJ6aG55pe277yM56ys5LiA5Liq5Y+v5Lul6YCJ5LitVGFi5a+86IiqXG4gICAgY29uc3QgcmFkaW9zID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgnW3R5cGU9cmFkaW9dJyk7XG4gICAgY29uc3QgZmlyc3RMYWJlbCA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyb2xlPXJhZGlvXScpWzBdO1xuICAgIGlmICghW10uc29tZS5jYWxsKHJhZGlvcywgcmFkaW8gPT4gcmFkaW8uY2hlY2tlZCkgJiYgZmlyc3RMYWJlbCkge1xuICAgICAgZmlyc3RMYWJlbC50YWJJbmRleCA9IDA7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICAvLyDlt6blj7PkuIrkuIvmjInplK4g5Y+v5Lul5ZyocmFkaW/nu4TlhoXliIfmjaLkuI3lkIzpgInpoblcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgY29uc3QgY2xhc3NOYW1lID0gdGFyZ2V0Lm5vZGVOYW1lID09PSAnSU5QVVQnID8gJ1t0eXBlPXJhZGlvXScgOiAnW3JvbGU9cmFkaW9dJztcbiAgICAgIGNvbnN0IHJhZGlvcyA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3NOYW1lKTtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IHJhZGlvcy5sZW5ndGg7XG4gICAgICBjb25zdCBpbmRleCA9IFtdLmluZGV4T2YuY2FsbChyYWRpb3MsIHRhcmdldCk7XG4gICAgICBjb25zdCByb2xlUmFkaW9zID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9cmFkaW9dJyk7XG4gICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIGtleUNvZGUuTEVGVDpcbiAgICAgICAgY2FzZSBrZXlDb2RlLlVQOlxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcm9sZVJhZGlvc1tsZW5ndGggLSAxXS5jbGljaygpO1xuICAgICAgICAgICAgcm9sZVJhZGlvc1tsZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb2xlUmFkaW9zW2luZGV4IC0gMV0uY2xpY2soKTtcbiAgICAgICAgICAgIHJvbGVSYWRpb3NbaW5kZXggLSAxXS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBrZXlDb2RlLlJJR0hUOlxuICAgICAgICBjYXNlIGtleUNvZGUuRE9XTjpcbiAgICAgICAgICBpZiAoaW5kZXggPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByb2xlUmFkaW9zWzBdLmNsaWNrKCk7XG4gICAgICAgICAgICByb2xlUmFkaW9zWzBdLmZvY3VzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvbGVSYWRpb3NbaW5kZXggKyAxXS5jbGljaygpO1xuICAgICAgICAgICAgcm9sZVJhZGlvc1tpbmRleCArIDFdLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB2YWx1ZSh2YWx1ZSkge1xuICAgICAgdGhpcy5kaXNwYXRjaCgnRWxGb3JtSXRlbScsICdlbC5mb3JtLmNoYW5nZScsIFt0aGlzLnZhbHVlXSk7XG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1xuIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19yYWRpb19ncm91cHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzID0gKHJhZGlvX2dyb3VwdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMpOyBcbi8vIEVYVEVSTkFMIE1PRFVMRTogQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXG52YXIgY29tcG9uZW50Tm9ybWFsaXplciA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLWdyb3VwLnZ1ZVxuXG5cblxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cblxudmFyIGNvbXBvbmVudCA9IE9iamVjdChjb21wb25lbnROb3JtYWxpemVyW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShcbiAgc3JjX3JhZGlvX2dyb3VwdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcmFkaW9fZ3JvdXAgPSAoY29tcG9uZW50LmV4cG9ydHMpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy9yYWRpby1ncm91cC9pbmRleC5qc1xuXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5yYWRpb19ncm91cC5pbnN0YWxsID0gZnVuY3Rpb24gKFZ1ZSkge1xuICBWdWUuY29tcG9uZW50KHJhZGlvX2dyb3VwLm5hbWUsIHJhZGlvX2dyb3VwKTtcbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBwYWNrYWdlc19yYWRpb19ncm91cCA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKHJhZGlvX2dyb3VwKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0L1wiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4Myk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBub3JtYWxpemVDb21wb25lbnQ7IH0pO1xuLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5mdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciAvKiBzZXJ2ZXIgb25seSAqLyxcbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID1cbiAgICB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJyA/IHNjcmlwdEV4cG9ydHMub3B0aW9ucyA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikge1xuICAgIC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgKG9wdGlvbnMuZnVuY3Rpb25hbCA/IHRoaXMucGFyZW50IDogdGhpcykuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL21peGlucy9lbWl0dGVyXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gODM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gRVNNIENPTVBBVCBGTEFHXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IEM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMS4xX2Nzcy1sb2FkZXJANS4yLjdfcHJldHRpZXJAMS4xOC4yX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3JlZi0tNSFDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYj8/dnVlLWxvYWRlci1vcHRpb25zIS4vcGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MmQxOWZlOVxudmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIF92bSA9IHRoaXMsXG4gICAgX2MgPSBfdm0uX3NlbGYuX2NcbiAgcmV0dXJuIF9jKFxuICAgIFwibGFiZWxcIixcbiAgICB7XG4gICAgICBzdGF0aWNDbGFzczogXCJlbC1yYWRpb1wiLFxuICAgICAgY2xhc3M6IFtcbiAgICAgICAgX3ZtLmJvcmRlciAmJiBfdm0ucmFkaW9TaXplID8gXCJlbC1yYWRpby0tXCIgKyBfdm0ucmFkaW9TaXplIDogXCJcIixcbiAgICAgICAgeyBcImlzLWRpc2FibGVkXCI6IF92bS5pc0Rpc2FibGVkIH0sXG4gICAgICAgIHsgXCJpcy1mb2N1c1wiOiBfdm0uZm9jdXMgfSxcbiAgICAgICAgeyBcImlzLWJvcmRlcmVkXCI6IF92bS5ib3JkZXIgfSxcbiAgICAgICAgeyBcImlzLWNoZWNrZWRcIjogX3ZtLm1vZGVsID09PSBfdm0ubGFiZWwgfVxuICAgICAgXSxcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIHJvbGU6IFwicmFkaW9cIixcbiAgICAgICAgXCJhcmlhLWNoZWNrZWRcIjogX3ZtLm1vZGVsID09PSBfdm0ubGFiZWwgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcbiAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IF92bS5pc0Rpc2FibGVkLFxuICAgICAgICB0YWJpbmRleDogX3ZtLnRhYkluZGV4XG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAga2V5ZG93bjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikgJiZcbiAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgXCJzcGFjZVwiLCAzMiwgJGV2ZW50LmtleSwgW1wiIFwiLCBcIlNwYWNlYmFyXCJdKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBfdm0ubW9kZWwgPSBfdm0uaXNEaXNhYmxlZCA/IF92bS5tb2RlbCA6IF92bS5sYWJlbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcbiAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJlbC1yYWRpb19faW5wdXRcIixcbiAgICAgICAgICBjbGFzczoge1xuICAgICAgICAgICAgXCJpcy1kaXNhYmxlZFwiOiBfdm0uaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIFwiaXMtY2hlY2tlZFwiOiBfdm0ubW9kZWwgPT09IF92bS5sYWJlbFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImVsLXJhZGlvX19pbm5lclwiIH0pLFxuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubW9kZWwsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJtb2RlbFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZWY6IFwicmFkaW9cIixcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImVsLXJhZGlvX19vcmlnaW5hbFwiLFxuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJyYWRpb1wiLFxuICAgICAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6ICFfdm0ubmF0aXZlLFxuICAgICAgICAgICAgICBuYW1lOiBfdm0ubmFtZSxcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IF92bS5pc0Rpc2FibGVkLFxuICAgICAgICAgICAgICB0YWJpbmRleDogXCItMVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IF92bS5sYWJlbCxcbiAgICAgICAgICAgICAgY2hlY2tlZDogX3ZtLl9xKF92bS5tb2RlbCwgX3ZtLmxhYmVsKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdm0uZm9jdXMgPSB0cnVlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgIF92bS5mb2N1cyA9IGZhbHNlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNoYW5nZTogW1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgX3ZtLm1vZGVsID0gX3ZtLmxhYmVsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfdm0uaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX2MoXG4gICAgICAgIFwic3BhblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZWwtcmFkaW9fX2xhYmVsXCIsXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3QoXCJkZWZhdWx0XCIpLFxuICAgICAgICAgICFfdm0uJHNsb3RzLmRlZmF1bHQgPyBbX3ZtLl92KF92bS5fcyhfdm0ubGFiZWwpKV0gOiBfdm0uX2UoKVxuICAgICAgICBdLFxuICAgICAgICAyXG4gICAgICApXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MmQxOWZlOVxuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiLi9taXhpbnMvZW1pdHRlclwiXG52YXIgZW1pdHRlcl8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIGVtaXR0ZXJfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZW1pdHRlcl8pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiBDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2JhYmVsLWxvYWRlckA4LjMuMF9AYmFiZWwrY29yZUA3LjI1LjJfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWI/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3BhY2thZ2VzL3JhZGlvL3NyYy9yYWRpby52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcmFkaW92dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyA9ICh7XG4gIG5hbWU6ICdFbFJhZGlvJyxcbiAgbWl4aW5zOiBbZW1pdHRlcl9kZWZhdWx0LmFdLFxuICBpbmplY3Q6IHtcbiAgICBlbEZvcm06IHtcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBlbEZvcm1JdGVtOiB7XG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50TmFtZTogJ0VsUmFkaW8nLFxuICBwcm9wczoge1xuICAgIHZhbHVlOiB7fSxcbiAgICBsYWJlbDoge30sXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGJvcmRlcjogQm9vbGVhbixcbiAgICBzaXplOiBTdHJpbmcsXG4gICAgbmF0aXZlOiBCb29sZWFuXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaXNHcm91cCgpIHtcbiAgICAgIGxldCBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQuJG9wdGlvbnMuY29tcG9uZW50TmFtZSAhPT0gJ0VsUmFkaW9Hcm91cCcpIHtcbiAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9yYWRpb0dyb3VwID0gcGFyZW50O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBtb2RlbDoge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0dyb3VwID8gdGhpcy5fcmFkaW9Hcm91cC52YWx1ZSA6IHRoaXMudmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbCkge1xuICAgICAgICBpZiAodGhpcy5pc0dyb3VwKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaCgnRWxSYWRpb0dyb3VwJywgJ2lucHV0JywgW3ZhbF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRyZWZzLnJhZGlvICYmICh0aGlzLiRyZWZzLnJhZGlvLmNoZWNrZWQgPSB0aGlzLm1vZGVsID09PSB0aGlzLmxhYmVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9lbEZvcm1JdGVtU2l6ZSgpIHtcbiAgICAgIHJldHVybiAodGhpcy5lbEZvcm1JdGVtIHx8IHt9KS5lbEZvcm1JdGVtU2l6ZTtcbiAgICB9LFxuICAgIHJhZGlvU2l6ZSgpIHtcbiAgICAgIGNvbnN0IHRlbVJhZGlvU2l6ZSA9IHRoaXMuc2l6ZSB8fCB0aGlzLl9lbEZvcm1JdGVtU2l6ZSB8fCAodGhpcy4kRUxFTUVOVCB8fCB7fSkuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzLmlzR3JvdXAgPyB0aGlzLl9yYWRpb0dyb3VwLnJhZGlvR3JvdXBTaXplIHx8IHRlbVJhZGlvU2l6ZSA6IHRlbVJhZGlvU2l6ZTtcbiAgICB9LFxuICAgIGlzRGlzYWJsZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0dyb3VwID8gdGhpcy5fcmFkaW9Hcm91cC5kaXNhYmxlZCB8fCB0aGlzLmRpc2FibGVkIHx8ICh0aGlzLmVsRm9ybSB8fCB7fSkuZGlzYWJsZWQgOiB0aGlzLmRpc2FibGVkIHx8ICh0aGlzLmVsRm9ybSB8fCB7fSkuZGlzYWJsZWQ7XG4gICAgfSxcbiAgICB0YWJJbmRleCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzRGlzYWJsZWQgfHwgdGhpcy5pc0dyb3VwICYmIHRoaXMubW9kZWwgIT09IHRoaXMubGFiZWwgPyAtMSA6IDA7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaGFuZGxlQ2hhbmdlKCkge1xuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLm1vZGVsKTtcbiAgICAgICAgdGhpcy5pc0dyb3VwICYmIHRoaXMuZGlzcGF0Y2goJ0VsUmFkaW9Hcm91cCcsICdoYW5kbGVDaGFuZ2UnLCB0aGlzLm1vZGVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3JhZGlvL3NyYy9yYWRpby52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcbiAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfcmFkaW92dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyA9IChyYWRpb3Z1ZV90eXBlX3NjcmlwdF9sYW5nX2pzKTsgXG4vLyBFWFRFUk5BTCBNT0RVTEU6IEM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMS4xX2Nzcy1sb2FkZXJANS4yLjdfcHJldHRpZXJAMS4xOC4yX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1xudmFyIGNvbXBvbmVudE5vcm1hbGl6ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3JhZGlvL3NyYy9yYWRpby52dWVcblxuXG5cblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5cbnZhciBjb21wb25lbnQgPSBPYmplY3QoY29tcG9uZW50Tm9ybWFsaXplcltcImFcIiAvKiBkZWZhdWx0ICovXSkoXG4gIHNyY19yYWRpb3Z1ZV90eXBlX3NjcmlwdF9sYW5nX2pzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19yYWRpbyA9IChjb21wb25lbnQuZXhwb3J0cyk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3JhZGlvL2luZGV4LmpzXG5cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnNyY19yYWRpby5pbnN0YWxsID0gZnVuY3Rpb24gKFZ1ZSkge1xuICBWdWUuY29tcG9uZW50KHNyY19yYWRpby5uYW1lLCBzcmNfcmFkaW8pO1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHBhY2thZ2VzX3JhZGlvID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoc3JjX3JhZGlvKTtcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7IiwiPHRlbXBsYXRlPlxyXG5cdDxkaXZcclxuXHRcdGNsYXNzPVwiY29nLWNoZWNrYWJsZSBjb2ctaW5wdXRcIlxyXG5cdFx0OmNsYXNzPVwiW3snY29nLWNoZWNrYWJsZS0tYWxsb3ctb3RoZXInOiBhbGxvd090aGVyfSwgaGFzQ29sdW1ucyA/IGNvbHVtbkNsYXNzZXMgOiAnY29nLWNoZWNrYWJsZS0taW5saW5lJywgcmVhZG9ubHkgPyAnaXMtcmVhZC1vbmx5JyA6ICcnXVwiXHJcblx0PlxyXG5cdFx0PGRpdiB2LWlmPVwicmVhZG9ubHlcIiA6Y2xhc3M9XCJ7J2NvZy1pbWFnZS1pdGVtJzogc2VsZWN0ZWRJbWFnZX1cIj48dGVtcGxhdGUgdi1pZj1cInNlbGVjdGVkSW1hZ2VcIj48Yy1nZW5lcmF0ZWQtYXZhdGFyIHYtaWY9XCJpc1N2ZyhzZWxlY3RlZEltYWdlKVwiIDpzdmc9XCJzZWxlY3RlZEltYWdlXCIgLz48aW1nIHYtZWxzZSA6c3JjPVwic2VsZWN0ZWRJbWFnZVwiIGhlaWdodD1cIjUwXCIgd2lkdGg9XCI1MFwiIGNsYXNzPVwiY29nLWxvb2t1cC1pbWFnZSBjb2ctYXZhdGFyXCJcdC8+PC90ZW1wbGF0ZT57eyBkaXNwbGF5VmFsdWUgfCBicmVha1dvcmRzIHwgc3BhY2VJZkVtcHR5IH19PC9kaXY+XHJcblx0XHQ8ZWwtcmFkaW8tZ3JvdXBcclxuXHRcdFx0di1lbHNlXHJcblx0XHRcdHYtbW9kZWw9XCJpbnRlcm5hbFZhbHVlXCJcclxuXHRcdFx0OnJvbGU9XCJudWxsXCJcclxuXHRcdFx0OmxhYmVsPVwibnVsbFwiXHJcblx0XHRcdEBjaGFuZ2U9XCJoYW5kbGVDaGFuZ2VcIlxyXG5cdFx0PlxyXG5cdFx0XHQ8ZWwtcmFkaW9cclxuXHRcdFx0XHR2LWZvcj1cIihpdGVtLCBpKSBpbiBvcHRpb25zXCJcclxuXHRcdFx0XHQ6a2V5PVwiaXRlbS52YWx1ZVwiXHJcblx0XHRcdFx0OmxhYmVsPVwiaXRlbS52YWx1ZVwiXHJcblx0XHRcdFx0OnZhbHVlPVwiaXRlbS52YWx1ZVwiXHJcblx0XHRcdFx0Y2xhc3M9XCJjb2ctY2hlY2thYmxlX19pdGVtXCJcclxuXHRcdFx0XHQ6Y2xhc3M9XCJoYXNDb2x1bW5zID8gJ2NvZy1pbm5lci1jb2xfX2l0ZW0nIDogbnVsbFwiXHJcblx0XHRcdFx0OnN0eWxlPVwiYG9yZGVyOiAke29wdGlvbk9yZGVyW2ldfWBcIlxyXG5cdFx0XHRcdEBrZXlkb3duLnNwYWNlLm5hdGl2ZT1cImhhbmRsZVJhZGlvU3BhY2VcIlxyXG5cdFx0XHRcdEBjbGljay5uYXRpdmU9XCIkZW1pdCgnZm9jdXMtbG9zdCcpXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxkaXYgOmNsYXNzPVwieydjb2ctaW1hZ2UtaXRlbSc6IGl0ZW0uaW1hZ2UgfHwgaXRlbS5zdmd9XCI+XHJcblx0XHRcdFx0XHQ8Yy1nZW5lcmF0ZWQtYXZhdGFyIHYtaWY9XCJpdGVtLnN2Z1wiIDpzdmc9XCJpdGVtLnN2Z1wiIC8+XHJcblx0XHRcdFx0XHQ8aW1nIHYtZWxzZS1pZj1cIml0ZW0uaW1hZ2VcIiA6c3JjPVwiaXRlbS5pbWFnZVwiIGhlaWdodD1cIjUwXCIgd2lkdGg9XCI1MFwiIGNsYXNzPVwiY29nLWxvb2t1cC1pbWFnZSBjb2ctYXZhdGFyXCIgLz5cclxuXHRcdFx0XHRcdHt7IGl0ZW0uZGlzcGxheVZhbHVlIHwgYnJlYWtXb3JkcyB9fVxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2VsLXJhZGlvPlxyXG5cdFx0XHQ8ZWwtcmFkaW9cclxuXHRcdFx0XHR2LWlmPVwiYWxsb3dPdGhlclwiXHJcblx0XHRcdFx0cmVmPVwib3RoZXJSYWRpb1wiXHJcblx0XHRcdFx0OnN0eWxlPVwiYG9yZGVyOiAke29wdGlvbk9yZGVyW29wdGlvbnMubGVuZ3RoXX1gXCJcclxuXHRcdFx0XHQ6Y2xhc3M9XCJoYXNDb2x1bW5zID8gJ2NvZy1pbm5lci1jb2xfX2l0ZW0nIDogbnVsbFwiXHJcblx0XHRcdFx0Y2xhc3M9XCJjb2ctY2hlY2thYmxlX19pdGVtIGNvZy1jaGVja2FibGVfX2FsbG93LW90aGVyXCJcclxuXHRcdFx0XHQ6bGFiZWw9XCJvdGhlclZhbHVlXCJcclxuXHRcdFx0XHRAY2hhbmdlPVwiaGFuZGxlT3RoZXJSYWRpb0NoYW5nZVwiXHJcblx0XHRcdFx0QGNsaWNrLm5hdGl2ZT1cImhhbmRsZU90aGVyUmFkaW9DbGlja1wiXHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8ZWwtaW5wdXRcclxuXHRcdFx0XHRcdHJlZj1cIm90aGVySW5wdXRcIlxyXG5cdFx0XHRcdFx0di1tb2RlbD1cIm90aGVyVmFsdWVcIlxyXG5cdFx0XHRcdFx0OnRhYmluZGV4PVwib3RoZXJJc1NlbGVjdGVkID8gJzAnIDogJy0xJ1wiXHJcblx0XHRcdFx0XHQ6cGxhY2Vob2xkZXI9XCIkcmVzb3VyY2UoJ2ZpZWxkLWNob2ljZS1vdGhlci1maWxsLWluJylcIlxyXG5cdFx0XHRcdFx0QGZvY3VzPVwiaGFuZGxlT3RoZXJGb2N1c1wiXHJcblx0XHRcdFx0XHRAYmx1cj1cImhhbmRsZU90aGVyQmx1clwiXHJcblx0XHRcdFx0XHRAaW5wdXQ9XCJoYW5kbGVPdGhlcklucHV0XCJcclxuXHRcdFx0XHQvPlxyXG5cdFx0XHQ8L2VsLXJhZGlvPlxyXG5cdFx0PC9lbC1yYWRpby1ncm91cD5cclxuXHQ8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcblx0aW1wb3J0ICcuLi9zdHlsZS9fZmFuY3ktY2hlY2thYmxlcy5zY3NzJztcclxuXHJcblx0aW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5cdGltcG9ydCB7IFJhZGlvR3JvdXAsIFJhZGlvLCBJbnB1dCB9IGZyb20gJ0Bjb2duaXRvZm9ybXMvZWxlbWVudC11aSc7XHJcblx0aW1wb3J0IGNvbHVtbml6ZWRPcHRpb25zIGZyb20gJ3NyYy9taXhpbnMvY29sdW1uaXplZC1vcHRpb25zJztcclxuXHRpbXBvcnQgcmVzZXRDb21wb25lbnREYXRhIGZyb20gJ3NyYy9taXhpbnMvcmVzZXRDb21wb25lbnREYXRhJztcclxuXHRpbXBvcnQgQ0dlbmVyYXRlZEF2YXRhciBmcm9tICcuL0dlbmVyYXRlZEF2YXRhci52dWUnO1xyXG5cclxuXHRWdWUudXNlKFJhZGlvR3JvdXApO1xyXG5cdFZ1ZS51c2UoUmFkaW8pO1xyXG5cdFZ1ZS51c2UoSW5wdXQpO1xyXG5cclxuXHRleHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHtcclxuXHRcdG5hbWU6ICdDUmFkaW9Hcm91cCcsXHJcblx0XHRjb21wb25lbnRzOiB7IENHZW5lcmF0ZWRBdmF0YXIgfSxcclxuXHRcdGZpbHRlcnM6IHtcclxuXHRcdFx0c3BhY2VJZkVtcHR5KHZhbHVlKSB7XHJcblx0XHRcdFx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5ODEwMjYzLzI4MzY2OTVcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgfHwgJ1xceGEwJztcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdG1peGluczogW2NvbHVtbml6ZWRPcHRpb25zLCByZXNldENvbXBvbmVudERhdGFdLFxyXG5cdFx0aW5qZWN0OiBbJyRyZXNvdXJjZSddLFxyXG5cdFx0aW5oZXJpdEF0dHJzOiBmYWxzZSxcclxuXHRcdG1vZGVsOiB7XHJcblx0XHRcdHByb3A6ICd2YWx1ZScsXHJcblx0XHRcdGV2ZW50OiAnY2hhbmdlJ1xyXG5cdFx0fSxcclxuXHRcdHByb3BzOiB7XHJcblx0XHRcdHZhbHVlOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogbnVsbCB9LFxyXG5cdFx0XHRyZWFkb25seTogQm9vbGVhbixcclxuXHRcdFx0YWxsb3dPdGhlcjogQm9vbGVhblxyXG5cdFx0fSxcclxuXHRcdGRhdGEoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0aW50ZXJuYWxWYWx1ZTogdGhpcy52YWx1ZSxcclxuXHRcdFx0XHQvLyBUaGUgb3RoZXIgdmFsdWUgYmVpbmcgdW5kZWZpbmVkIGtlZXBzIGl0IGZyb20gYmVpbmcgc2VsZWN0ZWRcclxuXHRcdFx0XHQvLyAodGhlIHJhZGlvIGlzIHNlbGVjdGVkIGlmIGl0cyBsYWJlbCBpcyB0aGUgc2FtZSBhcyB0aGUgZ3JvdXAncyB2YWx1ZSwgYGludGVybmFsVmFsdWVgLCB3aGljaCBpcyBibGFuayBzdHJpbmcpXHJcblx0XHRcdFx0b3RoZXJWYWx1ZTogdGhpcy5pc090aGVyVmFsdWUodGhpcy52YWx1ZSkgPyB0aGlzLnZhbHVlIDogdW5kZWZpbmVkXHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cdFx0Y29tcHV0ZWQ6IHtcclxuXHRcdFx0c2VsZWN0ZWRWYWx1ZSgpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmZpbmQobyA9PiBvLnZhbHVlID09PSB0aGlzLnZhbHVlKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZGlzcGxheVZhbHVlKCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLnZhbHVlKSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZWxlY3RlZFZhbHVlKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZWxlY3RlZFZhbHVlLmRpc3BsYXlWYWx1ZTtcclxuXHRcdFx0XHRcdGVsc2UgaWYgKHRoaXMuYWxsb3dPdGhlcilcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0fSxcclxuXHRcdFx0b3RoZXJJc1NlbGVjdGVkKCkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmludGVybmFsVmFsdWUgPT09IHRoaXMub3RoZXJWYWx1ZTtcclxuXHRcdFx0fSxcclxuXHRcdFx0c2VsZWN0ZWRJbWFnZSgpIHtcclxuXHRcdFx0XHRpZiAodGhpcy52YWx1ZSkge1xyXG5cdFx0XHRcdFx0Y29uc3Qgc2VsZWN0ZWRJbWFnZSA9IHRoaXMuc2VsZWN0ZWRWYWx1ZT8uc3ZnID8/IHRoaXMuc2VsZWN0ZWRWYWx1ZT8uaW1hZ2U7XHJcblx0XHRcdFx0XHRyZXR1cm4gc2VsZWN0ZWRJbWFnZSA/PyAnJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuICcnO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0d2F0Y2g6IHtcclxuXHRcdFx0dmFsdWU6IHtcclxuXHRcdFx0XHRpbW1lZGlhdGU6IHRydWUsXHJcblx0XHRcdFx0aGFuZGxlcih2YWx1ZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5pc090aGVyVmFsdWUodmFsdWUpKVxyXG5cdFx0XHRcdFx0XHR0aGlzLm90aGVyVmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGludGVybmFsVmFsdWU6IHtcclxuXHRcdFx0XHRpbW1lZGlhdGU6IGZhbHNlLFxyXG5cdFx0XHRcdGFzeW5jIGhhbmRsZXIodmFsdWUpIHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuJG5leHRUaWNrKCk7XHJcblx0XHRcdFx0XHR0aGlzLnNldFRhYkluZGV4KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0Y3JlYXRlZCAoKSB7XHJcblx0XHRcdHRoaXMuY2hhbmdlSGFuZGxlck5hbWUgPSBbJ2hhbmRsZUNoYW5nZScsICdoYW5kbGVPdGhlckJsdXInXTtcclxuXHRcdH0sXHJcblx0XHRtZXRob2RzOiB7XHJcblx0XHRcdGlzT3RoZXJWYWx1ZSh2YWx1ZSkge1xyXG5cdFx0XHRcdHJldHVybiAhIXZhbHVlICYmIHRoaXMuYWxsb3dPdGhlciAmJiAhdGhpcy5vcHRpb25zLm1hcChvID0+IG8udmFsdWUpLmluY2x1ZGVzKHZhbHVlKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0aGFuZGxlT3RoZXJGb2N1cygpIHtcclxuXHRcdFx0XHR0aGlzLnVwZGF0aW5nID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlIG90aGVyIG9wdGlvbiBpcyB1bmRlZmluZWQgd2hlbiBmb2N1c3NlZCwgdGhlbiBzZXQgaXQgdG8gYmxhbmsgc3RyaW5nIHRvIGNhdXNlIGl0IHRvIGJlIHNlbGVjdGVkXHJcblx0XHRcdFx0aWYgKCF0aGlzLm90aGVyVmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLm90aGVyVmFsdWUgPSAnJztcclxuXHJcblx0XHRcdFx0Ly8gVHJlYXQgZm9jdXMgb24gdGhlIFwiT3RoZXJcIiB0ZXh0Ym94IGFzIGl0cyBmaXJzdCBpbnB1dCBldmVudCAod2hpY2ggd2lsbCBzZWVkIHRoZSBpbnRlcm5hbCB2YWx1ZSB3aXRoIGJsYW5rIHN0cmluZylcclxuXHRcdFx0XHR0aGlzLmhhbmRsZU90aGVySW5wdXQoKTtcclxuXHJcblx0XHRcdFx0aWYgKHRoaXMuaW50ZXJuYWxWYWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xyXG5cdFx0XHRcdFx0Ly8gRW1pdCBjaGFuZ2Ugd2hlbiBcIk90aGVyXCIgaXMgZm9jdXNlZCBpZiB0aGVyZSBpcyBhIHZhbHVlLCBzaW5jZSB0aGUgYmxhbmsgb3RoZXIgdmFsdWUgaXMgbm93IHNlbGVjdGVkXHJcblx0XHRcdFx0XHR0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmludGVybmFsVmFsdWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0aGFuZGxlT3RoZXJJbnB1dCgpIHtcclxuXHRcdFx0XHQvLyBDaGFuZ2UgdGhlIGludGVybmFsIHZhbHVlIHRvIG1hdGNoIHRoZSBvdGhlciB2YWx1ZSB3aGVuIGl0IGlzIHNlbGVjdGVkIG9yIGNoYW5nZWRcclxuXHRcdFx0XHR0aGlzLmludGVybmFsVmFsdWUgPSB0aGlzLm90aGVyVmFsdWU7XHJcblxyXG5cdFx0XHRcdHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5pbnRlcm5hbFZhbHVlKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0aGFuZGxlT3RoZXJCbHVyKGV2KSB7XHJcblx0XHRcdFx0Ly8gSWYgdGhlIG90aGVyIHZhbHVlIGlzIGJsYW5rIHdoZW4gYmx1cnJlZCwgdGhlbiBzZXQgdGhlIHZhbHVlIHRvIGB1bmRlZmluZWRgIHRvIGNhdXNlIGl0IHRvIGJlIGRlLXNlbGVjdGVkXHJcblx0XHRcdFx0aWYgKCF0aGlzLm90aGVyVmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLm90aGVyVmFsdWUgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHRcdC8vIFJhaXNlIHRoZSBjaGFuZ2UgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBhY3R1YWxseSBjaGFuZ2VkIChpLmUuIHRoZSB1c2VyIGRpZG4ndCBzaW1wbHkgZm9jdXMgaW50byB0aGUgaW5wdXQgdGhlbiBsZWF2ZSlcclxuXHRcdFx0XHRpZiAodGhpcy5pbnRlcm5hbFZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XHJcblx0XHRcdFx0XHR0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmludGVybmFsVmFsdWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLnNldFRhYkluZGV4KCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGFzeW5jIGhhbmRsZU90aGVyUmFkaW9DaGFuZ2UoZSkge1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuJG5leHRUaWNrKCk7XHJcblx0XHRcdFx0dGhpcy4kcmVmcy5vdGhlcklucHV0LmZvY3VzKCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGFzeW5jIGhhbmRsZU90aGVyUmFkaW9DbGljayhlKSB7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy4kbmV4dFRpY2soKTtcclxuXHRcdFx0XHR0aGlzLiRyZWZzLm90aGVySW5wdXQuZm9jdXMoKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0aGFuZGxlQ2hhbmdlKHZhbHVlKSB7XHJcblx0XHRcdFx0dGhpcy5pbnRlcm5hbFZhbHVlID0gdmFsdWU7XHJcblx0XHRcdFx0dGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5pbnRlcm5hbFZhbHVlKTtcclxuXHRcdFx0XHR0aGlzLnNldFRhYkluZGV4KCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGhhbmRsZVJhZGlvU3BhY2UoKSB7XHJcblx0XHRcdFx0dGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5pbnRlcm5hbFZhbHVlKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0c2V0VGFiSW5kZXgoKSB7XHJcblx0XHRcdFx0Y29uc3QgZmlyc3RSYWRpbyA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJy5lbC1yYWRpbycpO1xyXG5cclxuXHRcdFx0XHRpZiAoIWZpcnN0UmFkaW8pXHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdC8vIElmIHRoZSBmaXJzdCByYWRpbyBpcyBjaGVja2VkLCB0YWJiaW5nIG9yZGVyIHdpbGwgYmUgY29ycmVjdC5cclxuXHRcdFx0XHRpZiAoZmlyc3RSYWRpby5nZXRBdHRyaWJ1dGUoJ2FyaWEtY2hlY2tlZCcpKSB7XHJcblx0XHRcdFx0XHRmaXJzdFJhZGlvLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2V0VGltZW91dCgoKT0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IGNoZWNrZWQgPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCdbYXJpYS1jaGVja2VkXScpO1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIG5vdGhpbmcgaXMgY2hlY2tlZCwgcHV0IHRhYmluZGV4PTAgb24gdGhlIGZpcnN0IHJhZGlvLiBFbGVtZW50IGRvZXMgbm90IGFjY291bnQgZm9yIGRlc2VsZWN0aW5nIHJhZGlvIGdyb3Vwcy5cclxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaWYgYSByYWRpbyBvdGhlciB0aGFuIHRoZSBmaXJzdCBpcyBjaGVja2VkLCB0YWtlIHRoZSBmaXJzdCByYWRpbyBvdXQgb2YgdGFiYmluZyBvcmRlci4gVGhpcyBmaXhlcyBhIGJ1ZyBpbiBFbGVtZW50LlxyXG5cdFx0XHRcdFx0aWYgKCFjaGVja2VkKVxyXG5cdFx0XHRcdFx0XHRmaXJzdFJhZGlvLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRmaXJzdFJhZGlvLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHRcdFx0aXNTdmcoaW1hZ2UpIHtcclxuXHRcdFx0XHRyZXR1cm4gaW1hZ2UgJiYgaW1hZ2Uuc3RhcnRzV2l0aCgnPHN2ZyB2aWV3Qm94PScpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbjwvc2NyaXB0PiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gIHZhciBfdm0gPSB0aGlzLFxuICAgIF9jID0gX3ZtLl9zZWxmLl9jLFxuICAgIF9zZXR1cCA9IF92bS5fc2VsZi5fc2V0dXBQcm94eVxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7XG4gICAgICBzdGF0aWNDbGFzczogXCJjb2ctY2hlY2thYmxlIGNvZy1pbnB1dFwiLFxuICAgICAgY2xhc3M6IFtcbiAgICAgICAgeyBcImNvZy1jaGVja2FibGUtLWFsbG93LW90aGVyXCI6IF92bS5hbGxvd090aGVyIH0sXG4gICAgICAgIF92bS5oYXNDb2x1bW5zID8gX3ZtLmNvbHVtbkNsYXNzZXMgOiBcImNvZy1jaGVja2FibGUtLWlubGluZVwiLFxuICAgICAgICBfdm0ucmVhZG9ubHkgPyBcImlzLXJlYWQtb25seVwiIDogXCJcIlxuICAgICAgXVxuICAgIH0sXG4gICAgW1xuICAgICAgX3ZtLnJlYWRvbmx5XG4gICAgICAgID8gX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzczogeyBcImNvZy1pbWFnZS1pdGVtXCI6IF92bS5zZWxlY3RlZEltYWdlIH0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX3ZtLnNlbGVjdGVkSW1hZ2VcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLmlzU3ZnKF92bS5zZWxlY3RlZEltYWdlKVxuICAgICAgICAgICAgICAgICAgICAgID8gX2MoXCJjLWdlbmVyYXRlZC1hdmF0YXJcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdmc6IF92bS5zZWxlY3RlZEltYWdlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNvZy1sb29rdXAtaW1hZ2UgY29nLWF2YXRhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogX3ZtLnNlbGVjdGVkSW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjUwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiNTBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICBfdm0uX2YoXCJzcGFjZUlmRW1wdHlcIikoX3ZtLl9mKFwiYnJlYWtXb3Jkc1wiKShfdm0uZGlzcGxheVZhbHVlKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAyXG4gICAgICAgICAgKVxuICAgICAgICA6IF9jKFxuICAgICAgICAgICAgXCJlbC1yYWRpby1ncm91cFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiBudWxsLCBsYWJlbDogbnVsbCB9LFxuICAgICAgICAgICAgICBvbjogeyBjaGFuZ2U6IF92bS5oYW5kbGVDaGFuZ2UgfSxcbiAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmludGVybmFsVmFsdWUsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikge1xuICAgICAgICAgICAgICAgICAgX3ZtLmludGVybmFsVmFsdWUgPSAkJHZcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaW50ZXJuYWxWYWx1ZVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF92bS5fbChfdm0ub3B0aW9ucywgZnVuY3Rpb24oaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICAgICAgIFwiZWwtcmFkaW9cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctY2hlY2thYmxlX19pdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uaGFzQ29sdW1ucyA/IFwiY29nLWlubmVyLWNvbF9faXRlbVwiIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGBvcmRlcjogJHtfdm0ub3B0aW9uT3JkZXJbaV19YCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6IGl0ZW0udmFsdWUsIHZhbHVlOiBpdGVtLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5ZG93bjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICEkZXZlbnQudHlwZS5pbmRleE9mKFwia2V5XCIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5faygkZXZlbnQua2V5Q29kZSwgXCJzcGFjZVwiLCAzMiwgJGV2ZW50LmtleSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU3BhY2ViYXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5oYW5kbGVSYWRpb1NwYWNlLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJGVtaXQoXCJmb2N1cy1sb3N0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3M6IHsgXCJjb2ctaW1hZ2UtaXRlbVwiOiBpdGVtLmltYWdlIHx8IGl0ZW0uc3ZnIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFwiYy1nZW5lcmF0ZWQtYXZhdGFyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHN2ZzogaXRlbS5zdmcgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbS5pbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNvZy1sb29rdXAtaW1hZ2UgY29nLWF2YXRhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBpdGVtLmltYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiNTBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiNTBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uX2YoXCJicmVha1dvcmRzXCIpKGl0ZW0uZGlzcGxheVZhbHVlKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF92bS5hbGxvd090aGVyXG4gICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJlbC1yYWRpb1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVmOiBcIm90aGVyUmFkaW9cIixcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29nLWNoZWNrYWJsZV9faXRlbSBjb2ctY2hlY2thYmxlX19hbGxvdy1vdGhlclwiLFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uaGFzQ29sdW1ucyA/IFwiY29nLWlubmVyLWNvbF9faXRlbVwiIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogYG9yZGVyOiAke192bS5vcHRpb25PcmRlcltfdm0ub3B0aW9ucy5sZW5ndGhdfWAsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6IF92bS5vdGhlclZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uaGFuZGxlT3RoZXJSYWRpb0NoYW5nZSB9LFxuICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uaGFuZGxlT3RoZXJSYWRpb0NsaWNrLmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImVsLWlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogXCJvdGhlcklucHV0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleDogX3ZtLm90aGVySXNTZWxlY3RlZCA/IFwiMFwiIDogXCItMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogX3ZtLiRyZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZpZWxkLWNob2ljZS1vdGhlci1maWxsLWluXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBfdm0uaGFuZGxlT3RoZXJGb2N1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmx1cjogX3ZtLmhhbmRsZU90aGVyQmx1cixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IF92bS5oYW5kbGVPdGhlcklucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5vdGhlclZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLm90aGVyVmFsdWUgPSAkJHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJvdGhlclZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgICApXG4gICAgXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1JhZGlvR3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTcwYTdlMTE4JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1JhZGlvR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9SYWRpb0dyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxcVHlsZXJUcm90dGVyXFxcXHJlcG9zXFxcXENvZ25pdG8gRm9ybXNcXFxcQ29nbml0by5XZWIuQ2xpZW50XFxcXG5vZGVfbW9kdWxlc1xcXFwucG5wbVxcXFx2dWUtaG90LXJlbG9hZC1hcGlAMi4zLjRcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNzBhN2UxMTgnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNzBhN2UxMTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNzBhN2UxMTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1JhZGlvR3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTcwYTdlMTE4JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzcwYTdlMTE4Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9SYWRpb0dyb3VwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2JhYmVsLWxvYWRlckA4LjAuNV9AYmFiZWwrY29yZUA3LjIyLjZfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMC4wX2Nzcy1sb2FkZXJAMy4yLjBfbG9kYXNoQDQuMTcuMjFfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JhZGlvR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iYWJlbC1sb2FkZXJAOC4wLjVfQGJhYmVsK2NvcmVANy4yMi42X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYWRpb0dyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjEwLjBfY3NzLWxvYWRlckAzLjIuMF9sb2Rhc2hANC4xNy4yMV92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTUhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYWRpb0dyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MGE3ZTExOCZcIiJdLCJzb3VyY2VSb290IjoiIn0=