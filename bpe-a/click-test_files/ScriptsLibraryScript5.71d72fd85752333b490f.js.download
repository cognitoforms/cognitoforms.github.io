(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ScriptsLibraryScript5"],{

/***/ "../../../Cognito.Services/Scripts/library/intellisense.js":
/*!**************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/library/intellisense.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function (isInIframe) {
; (function ($) {

	// Global variables	
	var module;

	// Get current module
	Cognito.modelReady(function() {
		module = Cognito.config.modules[0];
	});

	/// <summary>Initializes typeahead component.</summary>
	/// <param name="containerOrCollection" type="HTMLElement or jQuery collection">Either the element which holds all inputs/textareas would like to add intellisense to, or a jQuery collection containing the target inputs/textareas</param>
	/// <param name="containingType" type="TypeMeta">Containing typeMeta for the expressions. May be null if only want to display static expressions</param>
	Cognito.initializeIntellisense = function Cognito$initializeIntellisense(containerOrCollection, rootType, scope, localization) {
		var intellisense = null;
		var intellisenseId = 0;
		var intellisenseTimeout = null;
		var _scope = scope;
		var _typeMeta = rootType;

		// Filters and populates typeahead component for IntelliSense
		function populateIntellisense(query, process) {
			var typeAhead = this;
			var element = $(this.$element);

			// Hide IntelliSense if expression does not begin with '='
			if (!$(element).val().startsWith('=') && typeAhead.shown === true)
				typeAhead.hide();

			// Don't continue if expression does not begin with '='
			if (!$(element).val().startsWith('='))
				return;

			// Restart timeout
			if (intellisenseTimeout != null)
				clearTimeout(intellisenseTimeout);

			// Prevent requests on every keystroke. Only send if stop typing for 300ms
			intellisenseTimeout = setTimeout(function() {
				(intellisenseId++) % 25;
				var id = intellisenseId;

				if ($(element).parents(".c-expression").first().hasClass("c-expression-static"))
					_typeMeta = null;

				intellisenseRequest($(element).val(), function(result) {
					// Only use the most recent IntelliSense request
					if (id == intellisenseId && result != null) {
						intellisense = result;

						var labels = new Array();
						for (var label in intellisense.identifiers) {
							labels.push(label);
						}
						process(labels);
					}
				});
			}, 300);
		}

		// Intellisense service request
		function intellisenseRequest(expression, callback) {
			var rootTypeId = (typeof (_typeMeta) === "string" ? _typeMeta : undefined);
			var endpoint = "intelliSense" + (rootTypeId ? "IdOnly" : "");

			Cognito.abortRequests(endpoint);
			module.serviceRequest({
				dataType: "json",
				endpoint: endpoint,
				contentType: "application/json+cognito; charset=utf-8",
				method: "POST",
				data:
				{
					RootTypeId: rootTypeId,
					RootType: (rootTypeId ? undefined : Cognito.serialize(_typeMeta)),
					Scope: _scope,
					Expression: expression,
					Localization: Cognito.serialize(localization)
				},
				success: callback
			});
		}

		// Get position of cursor
		function getSelectionStart(o) {
			// IE8 support
			if (o.selectionStart === undefined) {
				var r = document.selection.createRange().duplicate();
				r.moveEnd('character', o.value.length);
				if (r.text == '')
					return o.value.length;
				return o.value.lastIndexOf(r.text);
			}
			else
				return o.selectionStart;
		}

		var collection = containerOrCollection;
		if (!(containerOrCollection instanceof jQuery))
			collection = $(containerOrCollection).find('.c-expression input, .c-expression textarea');

		collection.typeahead({
			minLength: 0,
			items: 50,
            useTabToSelect: true,
			source: populateIntellisense,
			matcher: function(item) {
				if (this.query.startsWith('=')) {
					var currentProperty = this.query.substring(intellisense.position + 1, getSelectionStart(this.$element[0]));
					if (currentProperty == ')')
						return 0;
					return ~(item.toLowerCase()).indexOf(currentProperty.toLowerCase());
				}
			},
			highlighter: function(item) {
				var currentProperty = this.query.substring(intellisense.position + 1, getSelectionStart(this.$element[0]));
				var query = currentProperty.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
				return item.replace(new RegExp('(' + query + ')', 'ig'), function($1, match) {
					return '<strong>' + match + '</strong>';
				});
			},
			updater: function(item) {
				return this.query.substring(0, intellisense.position + 1) + intellisense.identifiers[item] + this.query.substring(getSelectionStart(this.$element[0]));
			}
		});
	}

})(ExoJQuery);
})(typeof exports === 'undefined');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,