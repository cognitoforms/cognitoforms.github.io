(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["vuemodel"],{

/***/ "../../libs/vuemodel/lib/array-observer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayObserver = void 0;
var custom_observer_1 = __webpack_require__("../../libs/vuemodel/lib/custom-observer.js");
/**
 * A subclass of Vue's internal `Observer` class for arrays, which uses observable
 * array events rather than property walking and rewriting
 */
var ArrayObserver = /** @class */ (function (_super) {
    __extends(ArrayObserver, _super);
    function ArrayObserver(value, shallow, mock) {
        if (shallow === void 0) { shallow = false; }
        if (mock === void 0) { mock = false; }
        return _super.call(this, value, shallow, mock) || this;
    }
    ArrayObserver.prototype.ensureObservable = function () {
        if (this._observable === true) {
            return;
        }
        this.value.changed.subscribe(this._onChange.bind(this));
        this._observable = true;
    };
    ArrayObserver.prototype._onChange = function () {
        this.dep.notify();
    };
    return ArrayObserver;
}(custom_observer_1.CustomObserver));
exports.ArrayObserver = ArrayObserver;


/***/ }),

/***/ "../../libs/vuemodel/lib/custom-observer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomObserver = void 0;
var vue_model_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model.js");
var helpers_1 = __webpack_require__("../../libs/vuemodel/lib/helpers.js");
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js");
var VueInternals = vue_model_1.VueModel._VueInternals;
if (!VueInternals.Observer) {
    throw new Error("Vue's Observer constructor has not yet been obtained, be sure to call Vue.use(VueModel).");
}
var Observer = VueInternals.Observer;
/**
 * A subclass of Vue's internal Observer class that is responsible
 * for managing its own access/change events for properties rather than
 * walking the object's own properties
 */
var CustomObserver = /** @class */ (function (_super) {
    __extends(CustomObserver, _super);
    function CustomObserver(value, shallow, mock) {
        if (shallow === void 0) { shallow = false; }
        if (mock === void 0) { mock = false; }
        var _this = _super.call(this, value, shallow, mock) || this;
        _this.propertyDeps = {};
        return _this;
    }
    /**
     * Gets (or creates) a `Dep` object for a property of the given name
     * The `Dep` object will be stored internally by the observer, using
     * the given target property name as a key
     * @param propertyName The target property name
     * @param create If true, create the `Dep` object if it doesn't already exist
     */
    CustomObserver.prototype.getPropertyDep = function (propertyName, create) {
        if (create === void 0) { create = false; }
        var propertyDep;
        var Dep = VueInternals.Dep;
        var propertyDeps = this.propertyDeps;
        if ((0, helpers_1.hasOwnProperty)(propertyDeps, propertyName) && propertyDeps[propertyName] instanceof Dep) {
            propertyDep = propertyDeps[propertyName];
        }
        else if (create) {
            propertyDep = new Dep();
            Object.defineProperty(propertyDeps, propertyName, {
                configurable: true,
                enumerable: true,
                value: propertyDep,
                writable: true
            });
        }
        return propertyDep;
    };
    /**
     * Emulate's Vue's getter logic in `defineReactive()`
     * @param propertyName The property being accessed
     * @param value The current property value
     */
    CustomObserver.prototype.onPropertyAccess = function (propertyName, value) {
        var Dep = VueInternals.Dep;
        // Attach dependencies if something is watching
        if (Dep.target) {
            // Get or initialize the `Dep` object
            var propertyDep = this.getPropertyDep(propertyName, true);
            // Let an active observer target know that the property was accessed and is a dependency
            propertyDep.depend();
            var childOb = (0, vue_model_observability_1.observeEntity)(value);
            if (childOb) {
                childOb.dep.depend();
            }
            if (Array.isArray(value)) {
                // Track dependency on children as well (creating entity observer as needed)
                (0, vue_model_observability_1.dependChildArray)(value);
            }
        }
    };
    /**
     * Emulate's Vue's setter logic in `defineReactive()`
     * @param propertyName The property being accessed
     * @param newValue The new property value
     */
    CustomObserver.prototype.onPropertyChange = function (propertyName, newValue) {
        // Get or initialize the `Dep` object
        var propertyDep = this.getPropertyDep(propertyName, true);
        // Make sure a new value that is an entity is observable
        if (newValue && newValue instanceof model_js_1.Entity) {
            (0, vue_model_observability_1.observeEntity)(newValue).ensureObservable();
        }
        // Notify of property change
        propertyDep.notify();
    };
    return CustomObserver;
}(Observer));
exports.CustomObserver = CustomObserver;


/***/ }),

/***/ "../../libs/vuemodel/lib/entity-observer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityObserver = void 0;
var custom_observer_1 = __webpack_require__("../../libs/vuemodel/lib/custom-observer.js");
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
/**
 * A subclass of Vue's internal `Observer` class for entities, which uses model
 * metadata to manage property access/change rather than property walking and rewriting
 */
var EntityObserver = /** @class */ (function (_super) {
    __extends(EntityObserver, _super);
    function EntityObserver(value, shallow, mock) {
        if (shallow === void 0) { shallow = false; }
        if (mock === void 0) { mock = false; }
        return _super.call(this, value, shallow, mock) || this;
    }
    EntityObserver.prototype.ensureObservable = function () {
        if (this._observable === true) {
            return;
        }
        this.value.accessed.subscribe(this._onAccess.bind(this));
        this.value.changed.subscribe(this._onChange.bind(this));
        if (this.value.meta) {
            (0, vue_model_observability_1.getObjectMetaObserver)(this.value.meta).ensureObservable();
        }
        this._observable = true;
    };
    EntityObserver.prototype._onAccess = function (args) {
        // Get the current property value
        var value = args.entity.__fields__[args.property.name];
        // Notify interested observers of the property access in order to track dependencies
        this.onPropertyAccess(args.property.name, value);
    };
    EntityObserver.prototype._onChange = function (args) {
        // Get the current property value
        var newValue = args.entity.__fields__[args.property.name];
        // Notify interested observers of the property change
        this.onPropertyChange(args.property.name, newValue);
    };
    return EntityObserver;
}(custom_observer_1.CustomObserver));
exports.EntityObserver = EntityObserver;


/***/ }),

/***/ "../../libs/vuemodel/lib/helpers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = exports.hasOwnProperty = exports.setProp = exports.getProp = exports.isEntity = void 0;
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js");
function isEntity(obj) {
    return obj && obj.meta && obj.meta.type && obj.meta.type.jstype && (0, model_js_1.isEntityType)(obj.meta.type.jstype);
}
exports.isEntity = isEntity;
function getProp(obj, prop) {
    return obj[prop];
}
exports.getProp = getProp;
function setProp(target, key, value) {
    target[key] = value;
}
exports.setProp = setProp;
var hasOwnPropertyFn = Object.prototype.hasOwnProperty;
function hasOwnProperty(obj, prop) {
    return hasOwnPropertyFn.call(obj, prop);
}
exports.hasOwnProperty = hasOwnProperty;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function debug(message) {
    // console.log("%c[DEBUG] " + message, "background-color: #efefef; color: #999;");
}
exports.debug = debug;


/***/ }),

/***/ "../../libs/vuemodel/lib/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.preventVueObservability = exports.isSourceAdapter = void 0;
var vue_model_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model.js");
// Include English resources by default
__webpack_require__("../../libs/model.js/lib/resource-en.js");
exports.default = vue_model_1.VueModel;
var source_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-adapter.js");
Object.defineProperty(exports, "isSourceAdapter", { enumerable: true, get: function () { return source_adapter_1.isSourceAdapter; } });
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
Object.defineProperty(exports, "preventVueObservability", { enumerable: true, get: function () { return vue_model_observability_1.preventVueObservability; } });


/***/ }),

/***/ "../../libs/vuemodel/lib/object-meta-observer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectMetaObserver = void 0;
var custom_observer_1 = __webpack_require__("../../libs/vuemodel/lib/custom-observer.js");
/**
 * A subclass of Vue's internal `Observer` class for entity meta objects, which uses model
 * metadata to manage condition change rather than property walking and rewriting
 */
var ObjectMetaObserver = /** @class */ (function (_super) {
    __extends(ObjectMetaObserver, _super);
    function ObjectMetaObserver(value, shallow, mock) {
        if (shallow === void 0) { shallow = false; }
        if (mock === void 0) { mock = false; }
        return _super.call(this, value, shallow, mock) || this;
    }
    ObjectMetaObserver.prototype.ensureObservable = function () {
        if (this._observable === true) {
            return;
        }
        this.value.conditions.changed.subscribe(this._onConditionsChanged.bind(this));
        this._observable = true;
    };
    ObjectMetaObserver.prototype._onConditionsChanged = function () {
        // Notify interested observers of the condition change in order to update dependants
        this.onPropertyChange("conditions", null);
    };
    return ObjectMetaObserver;
}(custom_observer_1.CustomObserver));
exports.ObjectMetaObserver = ObjectMetaObserver;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-adapter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.hasOverrideValue = exports.isSourcePropertyAdapter = exports.isSourceAdapter = exports.isSourceItemAdapter = exports.isSourcePathAdapter = exports.isSourceRootAdapter = void 0;
var source_root_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-root-adapter.js");
var source_path_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-path-adapter.js");
var source_item_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-item-adapter.js");
function isSourceRootAdapter(obj) {
    return obj instanceof source_root_adapter_1.SourceRootAdapter;
}
exports.isSourceRootAdapter = isSourceRootAdapter;
function isSourcePathAdapter(obj) {
    return obj instanceof source_path_adapter_1.SourcePathAdapter;
}
exports.isSourcePathAdapter = isSourcePathAdapter;
function isSourceItemAdapter(obj) {
    return obj instanceof source_item_adapter_1.SourceItemAdapter;
}
exports.isSourceItemAdapter = isSourceItemAdapter;
function isSourceAdapter(obj, allowAnyObject) {
    if (allowAnyObject === void 0) { allowAnyObject = true; }
    if (isSourceRootAdapter(obj))
        return true;
    if (isSourcePathAdapter(obj))
        return true;
    if (isSourceItemAdapter(obj))
        return true;
    if (allowAnyObject && typeof obj === "object")
        return true;
    return false;
}
exports.isSourceAdapter = isSourceAdapter;
function isSourcePropertyAdapter(obj) {
    if (isSourcePathAdapter(obj))
        return true;
    return false;
}
exports.isSourcePropertyAdapter = isSourcePropertyAdapter;
function hasOverrideValue(value, type) {
    if (type === String) {
        return typeof value === "string" && value.length > 0;
    }
    else if (type === Boolean) {
        return typeof value === "boolean";
    }
}
exports.hasOverrideValue = hasOverrideValue;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-item-adapter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceItemAdapter = void 0;
var vue_1 = __importDefault(__webpack_require__("vue"));
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var source_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-adapter.js");
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var helpers_1 = __webpack_require__("../../libs/vuemodel/lib/helpers.js");
// @ts-ignore
var SourceItemAdapter = /** @class */ (function (_super) {
    __extends(SourceItemAdapter, _super);
    function SourceItemAdapter() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.isOrphaned = false;
        _this_1.internalIndex = -1;
        _this_1.isSubscribedToSourceChanges = false;
        return _this_1;
    }
    SourceItemAdapter.prototype.created = function () {
        // Track the intial index internally
        this.internalIndex = this.index;
        // Track changes to the list and update the component's state appropriately
        if (!this.suppressChangeTracking) {
            this.subscribeToSourceChanges();
        }
    };
    SourceItemAdapter.prototype.onIndexChanged = function (index) {
        this.internalIndex = index;
    };
    Object.defineProperty(SourceItemAdapter.prototype, "parent", {
        get: function () {
            if ((0, source_adapter_1.isSourceAdapter)(this.parentSource)) {
                return this.parentSource;
            }
            for (var parentVm = this.$parent.$parent, parentLevel = 1; parentVm != null; parentVm = parentVm.$parent, parentLevel += 1) {
                if ((0, source_adapter_1.isSourceAdapter)(parentVm.$source)) {
                    return parentVm.$source;
                }
            }
            throw new Error("Parent source not found!");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceItemAdapter.prototype, "readonly", {
        /**
         *  Indicants whether the source property is readonly.
         *
         *  @returns True if either the parent source or the source override is read only, otherwise false
         */
        get: function () {
            return this.parent.readonly || (this.overrides ? this.overrides.readonly : false);
        },
        enumerable: false,
        configurable: true
    });
    SourceItemAdapter.prototype.subscribeToSourceChanges = function () {
        if (this.isSubscribedToSourceChanges) {
            return;
        }
        var _this = this;
        var array = model_js_1.ObservableArray.ensureObservable(this.parent.value);
        array.changed.subscribe(function (args) {
            var index = _this.internalIndex;
            var isOrphaned = _this.isOrphaned;
            args.changes.forEach(function (c) {
                if (c.type === model_js_1.ArrayChangeType.remove) {
                    if (c.startIndex === index) {
                        index = -1;
                        isOrphaned = true;
                    }
                    else if (c.startIndex < index) {
                        if (c.items.length > index - c.startIndex) {
                            index = -1;
                            isOrphaned = true;
                        }
                        else {
                            index -= c.items.length;
                        }
                    }
                }
                else if (c.type === model_js_1.ArrayChangeType.add) {
                    if (c.startIndex >= 0) {
                        if (c.startIndex <= index) {
                            index += c.items.length;
                        }
                    }
                }
            });
            if (isOrphaned !== _this.isOrphaned) {
                vue_1.default.set(_this, "isOrphaned", isOrphaned);
            }
            if (index !== _this.internalIndex) {
                vue_1.default.set(_this, "internalIndex", index);
            }
        });
        this.isSubscribedToSourceChanges = true;
    };
    Object.defineProperty(SourceItemAdapter.prototype, "value", {
        get: function () {
            var list = this.parent.value;
            var value = list[this.internalIndex];
            return value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceItemAdapter.prototype, "type", {
        get: function () {
            // If possible, determine the type based on the actual entity instance
            if (this.value && (0, helpers_1.isEntity)(this.value))
                return this.value.meta.type.jstype;
            return this.parent.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceItemAdapter.prototype, "isList", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceItemAdapter.prototype, "displayValue", {
        get: function () {
            var list = this.parent.value;
            var value = list[this.internalIndex];
            var displayValue;
            if ((0, source_adapter_1.isSourcePropertyAdapter)(this.parent) && this.parent.property.format != null) {
                // Use a markup or property format if available
                displayValue = this.parent.property.format.convert(value);
            }
            else {
                displayValue = value.toString();
            }
            return displayValue;
        },
        enumerable: false,
        configurable: true
    });
    SourceItemAdapter.prototype.toString = function () {
        return "Source[" + this.internalIndex + "]";
    };
    __decorate([
        (0, vue_property_decorator_1.Prop)(Number),
        __metadata("design:type", Number)
    ], SourceItemAdapter.prototype, "index", void 0);
    __decorate([
        (0, vue_property_decorator_1.Prop)(Object),
        __metadata("design:type", Object)
    ], SourceItemAdapter.prototype, "parentSource", void 0);
    __decorate([
        (0, vue_property_decorator_1.Prop)(Object),
        __metadata("design:type", Object)
    ], SourceItemAdapter.prototype, "overrides", void 0);
    __decorate([
        (0, vue_property_decorator_1.Prop)({ type: Boolean, default: false }),
        __metadata("design:type", Boolean)
    ], SourceItemAdapter.prototype, "suppressChangeTracking", void 0);
    __decorate([
        (0, vue_property_decorator_1.Watch)("index"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", void 0)
    ], SourceItemAdapter.prototype, "onIndexChanged", null);
    SourceItemAdapter = __decorate([
        vue_property_decorator_1.Component
    ], SourceItemAdapter);
    return SourceItemAdapter;
}(vue_1.default));
exports.SourceItemAdapter = SourceItemAdapter;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-option-adapter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceOptionAdapter = void 0;
var vue_1 = __importDefault(__webpack_require__("vue"));
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var source_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-adapter.js");
var source_path_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-path-adapter.js");
// @ts-ignore
var SourceOptionAdapter = /** @class */ (function (_super) {
    __extends(SourceOptionAdapter, _super);
    function SourceOptionAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SourceOptionAdapter.prototype, "parent", {
        get: function () {
            for (var parentVm = this.$parent.$parent, parentLevel = 1; parentVm != null; parentVm = parentVm.$parent, parentLevel += 1) {
                if ((0, source_adapter_1.isSourcePropertyAdapter)(parentVm.$source)) {
                    return parentVm.$source;
                }
            }
            throw new Error("Parent source not found!");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceOptionAdapter.prototype, "label", {
        get: function () {
            return this.parent.label;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceOptionAdapter.prototype, "displayValue", {
        get: function () {
            return (0, source_path_adapter_1.formatDisplayValue)(this.parent, this.value);
        },
        enumerable: false,
        configurable: true
    });
    SourceOptionAdapter.prototype.toString = function () {
        return "Option for Source['" + this.parent.property.path + "']";
    };
    __decorate([
        (0, vue_property_decorator_1.Prop)(),
        __metadata("design:type", Object)
    ], SourceOptionAdapter.prototype, "value", void 0);
    SourceOptionAdapter = __decorate([
        vue_property_decorator_1.Component
    ], SourceOptionAdapter);
    return SourceOptionAdapter;
}(vue_1.default));
exports.SourceOptionAdapter = SourceOptionAdapter;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-path-adapter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDisplayValue = exports.SourcePathAdapter = void 0;
var vue_1 = __importDefault(__webpack_require__("vue"));
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var model_js_2 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var source_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-adapter.js");
var source_option_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-option-adapter.js");
var model_js_3 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
var model_js_4 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var model_js_5 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var source_item_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-item-adapter.js");
var model_js_6 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var model_js_7 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var helpers_1 = __webpack_require__("../../libs/vuemodel/lib/helpers.js");
var _id = 0;
// @ts-ignore
var SourcePathAdapter = /** @class */ (function (_super) {
    __extends(SourcePathAdapter, _super);
    function SourcePathAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // viewState: { formatError: ConditionTarget } = { formatError: null };
        // formatError: FormatError = null;
        _this.formatErrorCondition = null;
        _this.id = "".concat(_id++);
        return _this;
    }
    Object.defineProperty(SourcePathAdapter.prototype, "parent", {
        get: function () {
            for (var parentVm = this.$parent.$parent, parentLevel = 1; parentVm != null; parentVm = parentVm.$parent, parentLevel += 1) {
                if ((0, source_adapter_1.isSourceAdapter)(parentVm.$source)) {
                    return parentVm.$source;
                }
            }
            throw new Error("Parent source not found!");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "property", {
        get: function () {
            var property = this.parent.type.meta.getPath(this.source);
            (0, vue_model_observability_1.preventVueObservability)(property);
            return property;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "type", {
        get: function () {
            // If possible, determine the type based on the actual entity instance
            if (this.value && (0, helpers_1.isEntity)(this.value))
                return this.value.meta.type.jstype;
            return this.property.propertyType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "isList", {
        get: function () {
            return this.property.isList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "lastTarget", {
        get: function () {
            var property = this.property;
            return property.getLastTarget(this.parent.value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "label", {
        /**
         *  Gets the label for the source property.
         *
         *  @returns The source override label if specified, or the model property label if not
         */
        get: function () {
            var label = this.overrides ? this.overrides.label : null;
            if (label === undefined || label === null) {
                if (this.property.labelIsFormat) {
                    label = (0, model_js_2.evaluateLabel)(this.property, this.parent.value);
                }
                else {
                    label = this.property.label;
                }
            }
            return label;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "helptext", {
        /**
         *  Gets the helptext for the source property.
         *
         *  @returns The source override helptext if specified, or the model property helptext if not
         */
        get: function () {
            var helptext = this.overrides ? this.overrides.helptext : null;
            if (helptext === undefined || helptext === null) {
                if (this.property.helptextIsFormat) {
                    helptext = this.parent.value.toString(this.property.helptext);
                }
                else {
                    helptext = this.property.helptext;
                }
            }
            return helptext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "readonly", {
        /**
         *  Indicants whether the source property is readonly.
         *
         *  @returns True if either the parent source or the source override is read only, otherwise false
         */
        get: function () {
            return this.parent.readonly || (this.overrides ? !!this.overrides.readonly : false);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "required", {
        /**
        *  Indicants whether the source property is required.
        *
        *  @returns True if the property is required, otherwise false
        */
        get: function () {
            if (this.overrides && this.overrides.required != null)
                return this.overrides.required;
            if ((0, model_js_2.isPropertyBooleanFunctionAndOptions)(this.property.required)) {
                if ((0, model_js_2.isPropertyBooleanFunction)(this.property.required.function)) {
                    return this.property.required.function.call(this.parent.value);
                }
                else {
                    return true;
                }
            }
            if ((0, model_js_2.isPropertyBooleanFunction)(this.property.required))
                return this.property.required.call(this.parent.value);
            return this.property.required === true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "value", {
        /**
         *  Gets the value of the source property on the entity.
         *
         *  @returns The observable raw value of the property
         */
        get: function () {
            // This adapter has no value if its parent has no value
            if (!this.parent.value)
                return;
            return this.ensureObservable(this.property.value(this.parent.value));
        },
        /**
         *  Sets the value of the source property on the entity.
         *
         *  @param value - The new value to assign to the property
         */
        set: function (value) {
            if (this.property.isList) {
                var valueArray_1 = value;
                var observableArray_1 = this.property.value(this.parent.value);
                observableArray_1.batchUpdate(function () { return (0, model_js_5.updateArray)(observableArray_1, valueArray_1); });
            }
            else {
                this.property.value(this.parent.value, this.ensureObservable(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "conditions", {
        get: function () {
            var _this = this;
            var meta = this.parent.value.meta;
            var metaOb = (0, vue_model_observability_1.getObjectMetaObserver)(meta);
            // Make sure that the meta object is observable, ex: subscribes to conditions array changed
            metaOb.ensureObservable();
            var conditionTargets = meta.conditions;
            conditionTargets.forEach(function (condition) { (0, vue_model_observability_1.preventVueObservability)(condition); });
            // Raise property access to let Vue know that array was accessed
            // Changes to conditions will result in a Vue change notification for the 'conditions' property
            metaOb.onPropertyAccess("conditions", conditionTargets);
            var formatErrorConditions = this.formatErrorCondition ? [this.formatErrorCondition] : [];
            var property = this.property instanceof model_js_2.Property ? this.property : this.property instanceof model_js_4.PropertyChain ? this.property.lastProperty : null;
            if (!property)
                return formatErrorConditions;
            var conditions = conditionTargets.filter(function (c) { return c.properties.indexOf(property) >= 0; }).map(function (conditionTarget) {
                return conditionTarget.condition;
            });
            conditions = conditions.concat(formatErrorConditions);
            conditions = conditions.sort(function (conditionA, conditionB) {
                return _this.compare(conditionA, conditionB);
            });
            return conditions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "formatError", {
        get: function () {
            return this.formatErrorCondition ? this.formatErrorCondition["formatError"] : null;
        },
        set: function (err) {
            if (err) {
                (0, vue_model_observability_1.preventVueObservability)(err);
                var formatErrorCondition = err.createCondition(this.property.getLastTarget(this.parent.value), this.property.lastProperty);
                (0, vue_model_observability_1.preventVueObservability)(formatErrorCondition);
                formatErrorCondition["formatError"] = err;
                this.formatErrorCondition = formatErrorCondition;
            }
            else {
                this.formatErrorCondition = null;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "invalidValue", {
        get: function () {
            if (this.formatError) {
                return this.formatError.invalidValue;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "firstError", {
        get: function () {
            return this.conditions.length ? this.conditions[0] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "displayValue", {
        get: function () {
            if (this.formatError) {
                return this.formatError.invalidValue;
            }
            var value = this.ensureObservable(this.property.value(this.parent.value));
            return formatDisplayValue(this, value);
        },
        set: function (text) {
            if ((0, model_js_6.isEntityType)(this.property.propertyType)) {
                throw new Error("Cannot set displayValue property of Adapters for entity types.");
            }
            /// / TODO: Implement auto-reformat?
            // var initialValue = text;
            var newValue;
            var formatter;
            if (this.property.format != null) {
                formatter = this.property.format;
            }
            else if ((0, model_js_6.isValueType)(this.property.propertyType) && this.property.propertyType !== String) {
                // Try to use the general format by default
                formatter = this.property.containingType.model.getFormat(this.property.propertyType, "G");
            }
            if (this.formatError) {
                this.parent.value.meta.clearCondition(model_js_7.FormatError.ConditionType); // TODO: This shouldn't do anything...
                this.formatError = null;
            }
            if (formatter) {
                newValue = formatter.convertBack(text);
                if (newValue instanceof model_js_7.FormatError) {
                    (0, vue_model_observability_1.preventVueObservability)(newValue);
                    this.formatError = newValue;
                    return;
                }
            }
            else if (this.property.propertyType === String && typeof text === "string" && text.length === 0) {
                // Convert blank string to null
                newValue = null;
            }
            else {
                newValue = text;
            }
            this.value = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "allowedValuesRule", {
        get: function () {
            var property;
            if (this.property instanceof model_js_4.PropertyChain) {
                property = this.property.lastProperty;
            }
            else if (this.property instanceof model_js_2.Property) {
                property = this.property;
            }
            var allowedValuesRules = property.rules.filter(function (r) { return r instanceof model_js_3.AllowedValuesRule; });
            if (allowedValuesRules.length) {
                var allowedValuesRule = allowedValuesRules[0];
                (0, vue_model_observability_1.preventVueObservability)(allowedValuesRule);
                return allowedValuesRule;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "allowedValues", {
        get: function () {
            var allowedValuesRule = this.allowedValuesRule;
            if (!allowedValuesRule) {
                // If there is no rule, return an empty list
                return;
            }
            var targetObj;
            if (this.property instanceof model_js_4.PropertyChain) {
                targetObj = this.property.getLastTarget(this.parent.value);
            }
            else {
                targetObj = this.parent.value;
            }
            // Retrieve the value of allowed values property
            var allowedValuesFromRule = allowedValuesRule.values(targetObj);
            if (allowedValuesFromRule) {
                // Clear our values that are no longer valid
                if (!allowedValuesRule.ignoreValidation) {
                    this.clearInvalidOptions(allowedValuesFromRule);
                }
            }
            else if (!allowedValuesRule.ignoreValidation) {
                // Clear out values since the property doesn't currently have any allowed values
                this.clearInvalidOptions(null);
            }
            allowedValuesFromRule.forEach(function (value) {
                if (value instanceof model_js_1.Entity) {
                    (0, vue_model_observability_1.observeEntity)(value).ensureObservable();
                }
                else if (typeof value === "object") {
                    (0, vue_model_observability_1.preventVueObservability)(value);
                }
            });
            return allowedValuesFromRule;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "options", {
        get: function () {
            var _this = this;
            // Destroy existing option components
            var optionsToDestroy = this.$children.filter(function (c) { return c instanceof source_option_adapter_1.SourceOptionAdapter; });
            optionsToDestroy.forEach(function (c) { return c.$destroy(); });
            // TODO: preserve option adapters if possible?
            var allowedValues = this.allowedValues;
            if (!allowedValues && this.property.propertyType === Boolean) {
                // Provide true and false as special allowed values for booleans
                allowedValues = [true, false];
            }
            if (!allowedValues) {
                return [];
            }
            // Map the allowed values to option adapters
            return allowedValues.map(function (v) { return new source_option_adapter_1.SourceOptionAdapter({ parent: _this, propsData: { value: v } }); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourcePathAdapter.prototype, "items", {
        get: function () {
            var items = [];
            // Collect existing option components to potentially be destroyed
            var existingItemsToDestroy = this.$children.filter(function (c) { return c instanceof source_item_adapter_1.SourceItemAdapter; });
            var value = this.value;
            if (Array.isArray(value)) {
                if ((0, model_js_6.isEntityType)(this.property.propertyType)) {
                    var existingItemsMap_1 = {};
                    existingItemsToDestroy.forEach(function (c) {
                        var adapter = c;
                        if (!adapter.isOrphaned) {
                            var key = adapter.value ? adapter.value.meta.id : null;
                            if (key) {
                                existingItemsMap_1[key] = adapter;
                            }
                        }
                    });
                    for (var i = 0; i < value.length; i++) {
                        var key = value[i].meta.id;
                        var existingItem = existingItemsMap_1[key];
                        if (existingItem) {
                            // Delete the existing item from the map so that it can't be fetched more than once
                            delete existingItemsMap_1[key];
                            // Remove the component from the list of items to destroy since we're going to reuse it
                            var existingItemIndex = existingItemsToDestroy.indexOf(existingItem);
                            if (existingItemIndex >= 0) {
                                existingItemsToDestroy.splice(existingItemIndex, 1);
                            }
                            // Set the backing storage for the 'index' prop, the internal data should
                            // already have this value, this just makes the component's state consistent,
                            // since the inconsistency is just a side-effect of reusing item adapters
                            var propsData = existingItem.$options.propsData;
                            propsData.index = i;
                            // Include the existing item in the return value
                            items.push(existingItem);
                        }
                        else {
                            // Create a new item adapter
                            var newItem = new source_item_adapter_1.SourceItemAdapter({ parent: this, propsData: { index: i, parentSource: this } });
                            // Subscribes to changes to its underlying list source in order to update its index and detect when it becomes orphaned
                            newItem.subscribeToSourceChanges();
                            // Include the new item in the return value
                            items.push(newItem);
                        }
                    }
                }
            }
            existingItemsToDestroy.forEach(function (c) { return c.$destroy(); });
            return items;
        },
        enumerable: false,
        configurable: true
    });
    SourcePathAdapter.prototype.compare = function (conditionTargetA, conditionTargetB) {
        if (conditionTargetA["formatError"] instanceof model_js_7.FormatError || conditionTargetB["formatError"] instanceof model_js_7.FormatError) {
            return conditionTargetA["formatError"] instanceof model_js_7.FormatError && conditionTargetB["formatError"] instanceof model_js_7.FormatError ? 0 :
                conditionTargetA["formatError"] instanceof model_js_7.FormatError ? -1 : 1;
        }
        else if (conditionTargetA["source"] instanceof model_js_1.RequiredRule || conditionTargetB["source"] instanceof model_js_1.RequiredRule)
            return conditionTargetA["source"] instanceof model_js_1.RequiredRule && conditionTargetB["source"] instanceof model_js_1.RequiredRule ? 0 :
                conditionTargetA["source"] instanceof model_js_1.RequiredRule ? -1 : 1;
        else if (conditionTargetA.type.category === "Error" || conditionTargetB.type.category === "Error")
            return conditionTargetA.type.category === "Error" && conditionTargetB.type.category === "Error" ? 0 :
                conditionTargetA.type.category === "Error" ? -1 : 1;
        else
            return 0;
    };
    SourcePathAdapter.prototype.clearInvalidOptions = function (allowedValues) {
        var property = this.property;
        var value = this.value;
        if (allowedValues) {
            // Remove option values that are no longer valid
            if (value instanceof Array) {
                var array = value;
                array.batchUpdate(function (array) {
                    // From the `purge()` function in ExoWeb...
                    for (var i = 0; i < array.length; i++) {
                        var item = array[i];
                        if (allowedValues.indexOf(item) < 0) {
                            array.splice(i--, 1);
                        }
                    }
                });
            }
            else if (value !== null && allowedValues.indexOf(value) < 0) {
                property.value(this.parent.value, null);
            }
        }
        else if (value instanceof Array) {
            value.splice(0, value.length);
        }
        else if (value !== null) {
            property.value(this.parent.value, null);
        }
    };
    SourcePathAdapter.prototype.ensureObservable = function (value) {
        if (Array.isArray(value)) {
            if (model_js_5.ObservableArray.isObservableArray(value)) {
                (0, vue_model_observability_1.observeArray)(value).ensureObservable();
            }
            for (var i = 0; i < value.length; i++) {
                var item = value[i];
                if (item instanceof model_js_1.Entity) {
                    (0, vue_model_observability_1.observeEntity)(item).ensureObservable();
                }
            }
        }
        else if (value instanceof model_js_1.Entity) {
            (0, vue_model_observability_1.observeEntity)(value).ensureObservable();
        }
        return value;
    };
    SourcePathAdapter.prototype.toString = function () {
        return "Source['" + this.source + "']";
    };
    __decorate([
        (0, vue_property_decorator_1.Prop)(String),
        __metadata("design:type", String)
    ], SourcePathAdapter.prototype, "source", void 0);
    __decorate([
        (0, vue_property_decorator_1.Prop)(Object),
        __metadata("design:type", Object)
    ], SourcePathAdapter.prototype, "overrides", void 0);
    SourcePathAdapter = __decorate([
        vue_property_decorator_1.Component
    ], SourcePathAdapter);
    return SourcePathAdapter;
}(vue_1.default));
exports.SourcePathAdapter = SourcePathAdapter;
function formatDisplayValue(adapter, value) {
    var displayValue;
    var property = adapter.property;
    if (value === null || value === undefined) {
        displayValue = "";
    }
    else if (property.format != null) {
        // Use a markup or property format if available
        if (Array.isArray(value)) {
            var array = value;
            displayValue = array.map(function (item) { return property.format.convert(item); });
        }
        else {
            displayValue = property.format.convert(value);
        }
    }
    else if (Array.isArray(value)) {
        // If no format exists, then fall back to toString
        var array = value;
        displayValue = array.map(function (item) {
            if (value === null || value === undefined) {
                return "";
            }
            else {
                return item.toString();
            }
        });
    }
    else {
        displayValue = value.toString();
    }
    displayValue = Array.isArray(displayValue) ? displayValue.join(", ") : displayValue;
    return displayValue;
}
exports.formatDisplayValue = formatDisplayValue;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-path-mixin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourcePathMixin = void 0;
var vue_1 = __importDefault(__webpack_require__("vue"));
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var source_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-adapter.js");
var source_path_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-path-adapter.js");
// @ts-ignore
var SourcePathMixin = /** @class */ (function (_super) {
    __extends(SourcePathMixin, _super);
    function SourcePathMixin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SourcePathMixin.prototype.onLabelChanged = function (label) {
        this.onOverrideValueChanged(label, String);
    };
    SourcePathMixin.prototype.onHelptextChanged = function (helptext) {
        this.onOverrideValueChanged(helptext, String);
    };
    SourcePathMixin.prototype.onReadonlyChanged = function (readonly) {
        this.onOverrideValueChanged(readonly, Boolean);
    };
    SourcePathMixin.prototype.onRequiredChanged = function (required) {
        this.onOverrideValueChanged(required, Boolean);
    };
    Object.defineProperty(SourcePathMixin.prototype, "$source", {
        get: function () {
            // If the source is an adapter, then potentially apply overrides, and return it
            if ((0, source_adapter_1.isSourceAdapter)(this.source)) {
                this.ensureOverridesAppliedToSourceAdapter(this.source);
                return this.source;
            }
            return new source_path_adapter_1.SourcePathAdapter({ parent: this, propsData: { source: this.source, overrides: this } });
        },
        enumerable: false,
        configurable: true
    });
    SourcePathMixin.prototype.ensureOverridesAppliedToSourceAdapter = function (source) {
        var hasOverrides = (0, source_adapter_1.hasOverrideValue)(this.label, String) || (0, source_adapter_1.hasOverrideValue)(this.helptext, String) || (0, source_adapter_1.hasOverrideValue)(this.readonly, Boolean) || (0, source_adapter_1.hasOverrideValue)(this.required, Boolean);
        if ((0, source_adapter_1.isSourcePathAdapter)(source)) {
            if (hasOverrides) {
                if (source.overrides && source.overrides !== this) {
                    throw new Error("Overrides have already been applied to source of type '" + source.constructor.name + "'.");
                }
                // Apply the given overrides as the overrides for the source
                source.overrides = this;
            }
        }
        else {
            if (hasOverrides) {
                throw new Error("Cannot apply overrides to source of type '" + source.constructor.name + "'.");
            }
        }
    };
    SourcePathMixin.prototype.onOverrideValueChanged = function (value, type) {
        // If the source is an adapter, and an override value is set, then ensure that the
        if ((0, source_adapter_1.isSourceAdapter)(this.source) && (0, source_adapter_1.hasOverrideValue)(value, type)) {
            this.ensureOverridesAppliedToSourceAdapter(this.source);
        }
    };
    __decorate([
        (0, vue_property_decorator_1.Prop)({ type: [String, Object] }),
        __metadata("design:type", Object)
    ], SourcePathMixin.prototype, "source", void 0);
    __decorate([
        (0, vue_property_decorator_1.Prop)(String),
        __metadata("design:type", String)
    ], SourcePathMixin.prototype, "label", void 0);
    __decorate([
        (0, vue_property_decorator_1.Watch)("label"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], SourcePathMixin.prototype, "onLabelChanged", null);
    __decorate([
        (0, vue_property_decorator_1.Prop)(String),
        __metadata("design:type", String)
    ], SourcePathMixin.prototype, "helptext", void 0);
    __decorate([
        (0, vue_property_decorator_1.Watch)("helptext"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], SourcePathMixin.prototype, "onHelptextChanged", null);
    __decorate([
        (0, vue_property_decorator_1.Prop)({ type: Boolean, default: null }),
        __metadata("design:type", Boolean)
    ], SourcePathMixin.prototype, "readonly", void 0);
    __decorate([
        (0, vue_property_decorator_1.Watch)("readonly"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], SourcePathMixin.prototype, "onReadonlyChanged", null);
    __decorate([
        (0, vue_property_decorator_1.Prop)({ type: Boolean, default: null }),
        __metadata("design:type", Boolean)
    ], SourcePathMixin.prototype, "required", void 0);
    __decorate([
        (0, vue_property_decorator_1.Watch)("required"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], SourcePathMixin.prototype, "onRequiredChanged", null);
    SourcePathMixin = __decorate([
        vue_property_decorator_1.Component
    ], SourcePathMixin);
    return SourcePathMixin;
}(vue_1.default));
exports.SourcePathMixin = SourcePathMixin;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-root-adapter.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceRootAdapter = void 0;
var vue_1 = __importDefault(__webpack_require__("vue"));
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
// @ts-ignore
var SourceRootAdapter = /** @class */ (function (_super) {
    __extends(SourceRootAdapter, _super);
    function SourceRootAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.readonly = false;
        return _this;
    }
    Object.defineProperty(SourceRootAdapter.prototype, "value", {
        get: function () {
            return this.entity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceRootAdapter.prototype, "type", {
        get: function () {
            return this.entity.meta.type.jstype;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceRootAdapter.prototype, "isList", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceRootAdapter.prototype, "displayValue", {
        get: function () {
            return this.entity.toString();
        },
        enumerable: false,
        configurable: true
    });
    SourceRootAdapter.prototype.toString = function () {
        return this.entity.meta.type.fullName + "|" + this.entity.meta.id;
    };
    __decorate([
        (0, vue_property_decorator_1.Prop)(Object),
        __metadata("design:type", Object)
    ], SourceRootAdapter.prototype, "entity", void 0);
    SourceRootAdapter = __decorate([
        vue_property_decorator_1.Component
    ], SourceRootAdapter);
    return SourceRootAdapter;
}(vue_1.default));
exports.SourceRootAdapter = SourceRootAdapter;


/***/ }),

/***/ "../../libs/vuemodel/lib/source-root-mixin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceRootMixin = void 0;
var vue_1 = __importDefault(__webpack_require__("vue"));
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js");
var source_root_adapter_1 = __webpack_require__("../../libs/vuemodel/lib/source-root-adapter.js");
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
// @ts-ignore
var SourceRootMixin = /** @class */ (function (_super) {
    __extends(SourceRootMixin, _super);
    function SourceRootMixin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SourceRootMixin.prototype.onReadonlyChanged = function (readonly) {
        this.$source.readonly = readonly;
    };
    Object.defineProperty(SourceRootMixin.prototype, "$source", {
        get: function () {
            var entity;
            if (this.source instanceof model_js_1.Entity) {
                entity = this.source;
            }
            else {
                entity = this[this.source || "entity"];
                if (!entity || !(entity instanceof model_js_1.Entity)) {
                    throw new Error("No entity data!");
                }
            }
            (0, vue_model_observability_1.observeEntity)(entity).ensureObservable();
            return new source_root_adapter_1.SourceRootAdapter({ parent: this, propsData: { entity: entity } });
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        (0, vue_property_decorator_1.Prop)({ type: [Object, String] }),
        __metadata("design:type", Object)
    ], SourceRootMixin.prototype, "source", void 0);
    __decorate([
        (0, vue_property_decorator_1.Prop)({ type: Boolean, default: null }),
        __metadata("design:type", Boolean)
    ], SourceRootMixin.prototype, "readonly", void 0);
    __decorate([
        (0, vue_property_decorator_1.Watch)("readonly"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", void 0)
    ], SourceRootMixin.prototype, "onReadonlyChanged", null);
    SourceRootMixin = __decorate([
        vue_property_decorator_1.Component
    ], SourceRootMixin);
    return SourceRootMixin;
}(vue_1.default));
exports.SourceRootMixin = SourceRootMixin;


/***/ }),

/***/ "../../libs/vuemodel/lib/vm-root-component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VMRoot = void 0;
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var vue_class_component_1 = __webpack_require__("../../node_modules/.pnpm/vue-class-component@7.2.6_vue@2.7.15/node_modules/vue-class-component/dist/vue-class-component.esm.js");
var source_root_mixin_1 = __webpack_require__("../../libs/vuemodel/lib/source-root-mixin.js");
// @ts-ignore
var VMRoot = /** @class */ (function (_super) {
    __extends(VMRoot, _super);
    function VMRoot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VMRoot.prototype.render = function () {
        var slotNodes = this.$scopedSlots.default({
            $source: this.$source
        });
        if (slotNodes.length !== 1) {
            throw new Error("Found " + slotNodes.length + " nodes in default slot for component 'vm-root'.");
        }
        return slotNodes[0];
    };
    VMRoot = __decorate([
        vue_property_decorator_1.Component
    ], VMRoot);
    return VMRoot;
}((0, vue_class_component_1.mixins)(source_root_mixin_1.SourceRootMixin)));
exports.VMRoot = VMRoot;


/***/ }),

/***/ "../../libs/vuemodel/lib/vm-source-component.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VMSource = void 0;
var vue_property_decorator_1 = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@7.3.0/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var vue_class_component_1 = __webpack_require__("../../node_modules/.pnpm/vue-class-component@7.2.6_vue@2.7.15/node_modules/vue-class-component/dist/vue-class-component.esm.js");
var source_path_mixin_1 = __webpack_require__("../../libs/vuemodel/lib/source-path-mixin.js");
// @ts-ignore
var VMSource = /** @class */ (function (_super) {
    __extends(VMSource, _super);
    function VMSource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VMSource.prototype.render = function () {
        var slotNodes = this.$scopedSlots.default({
            $source: this.$source
        });
        if (slotNodes.length !== 1) {
            throw new Error("Found " + slotNodes.length + " nodes in default slot for component 'vm-source'.");
        }
        return slotNodes[0];
    };
    VMSource = __decorate([
        vue_property_decorator_1.Component
    ], VMSource);
    return VMSource;
}((0, vue_class_component_1.mixins)(source_path_mixin_1.SourcePathMixin)));
exports.VMSource = VMSource;


/***/ }),

/***/ "../../libs/vuemodel/lib/vue-global-mixin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.VueModel$installGlobalMixin = void 0;
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js");
var helpers_1 = __webpack_require__("../../libs/vuemodel/lib/helpers.js");
var vue_helpers_1 = __webpack_require__("../../libs/vuemodel/lib/vue-helpers.js");
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
/**
 * Installs a global Vue mixin that hooks into component events to intercept model entities as component data and make necesary adjustments
 * @param Vue The Vue constructor/module object
 */
function VueModel$installGlobalMixin(Vue) {
    Vue.mixin({
        beforeCreate: function VueModel$Plugin$beforeCreate() {
            var vm = this;
            if (vm.$options.data) {
                // Intercept data that is an entity or data function that returns an entity
                // so that this plugin can make the entity observable and create proxy properties
                preprocessDataToInterceptEntities(vm);
            }
        },
        created: function VueModel$Plugin$created() {
            var vm = this;
            var vm$private = vm;
            if (vm$private._entity) {
                var entity = vm$private._entity;
                if (!entity.meta.type.model._entitiesAreVueObservable) {
                    // Ensure that Model entities are observable objects compatible with Vue's observer
                    (0, vue_model_observability_1.makeEntitiesVueObservable)(vm$private._entity.meta.type.model);
                }
                (0, vue_model_observability_1.getEntityObserver)(vm$private._entity, true).ensureObservable();
                // Restore the data by attempting to emulate what would have happened to
                // the `data` object had it gone through normal component intialization
                restoreComponentEntityData(vm);
            }
        }
    });
}
exports.VueModel$installGlobalMixin = VueModel$installGlobalMixin;
function replaceEntityData(vm, data) {
    var vm$private = vm;
    if (data != null && data instanceof model_js_1.Entity) {
        (0, helpers_1.debug)("Data is an entity, returning empty object...");
        vm$private._entity = data;
        return {};
    }
    return data;
}
function preprocessDataToInterceptEntities(vm) {
    if (!vm.$options.data) {
        return;
    }
    if (vm.$options.data instanceof Function) {
        // The `.data` options is a function that will be invoked by Vue, so wrap it
        // to prevent Vue from getting an Entity prior to setting up Entity observability
        (0, helpers_1.debug)("Data is a function...wrapping to intercept the return value...");
        var dataFn = vm.$options.data;
        vm.$options.data = function () {
            return replaceEntityData(vm, dataFn.apply(this, arguments));
        };
    }
    else {
        // Don't let Vue from getting an Entity prior to setting up Entity observability
        vm.$options.data = replaceEntityData(vm, vm.$options.data);
    }
}
function restoreComponentEntityData(vm) {
    var vm$private = vm;
    // Since the entity is now observable, go ahead and let the component see it
    // TODO: Is it necessary to somehow "merge" the object? Or, just not set the data
    //      field since we're going to do custom proxying of properties anyway?
    vm$private._data = vm$private._entity;
    // Vue proxies the data objects `Object.keys()` onto the component itself,
    // so that the data objects properties can be used directly in templates
    proxyEntityPropertiesOntoComponentInstance(vm, vm$private._entity);
    // The internal `observe()` method basically makes the given object observable,
    // (entities should already be at this point) but it also updates a `vmCount` counter
    (0, vue_model_observability_1.observeEntity)(vm$private._entity, true).ensureObservable();
    // Null out the field now that we've finished preparing the entity
    vm$private._entity = null;
}
function proxyEntityPropertiesOntoComponentInstance(vm, entity) {
    // TODO: add proxies onto the component instance
    // proxy data on instance
    var properties = entity.meta.type.properties;
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (methods && (0, helpers_1.hasOwnProperty)(methods, property.name)) {
            (0, helpers_1.debug)("Property '" + property.name + "' is hidden by a component method with the same name.");
        }
        else if (props && (0, helpers_1.hasOwnProperty)(props, property.name)) {
            (0, helpers_1.debug)("Property '" + property.name + "' is hidden by a component prop with the same name.");
        }
        else if (!(0, vue_helpers_1.Vue$isReserved)(property.name)) {
            (0, vue_helpers_1.Vue$proxy)(vm, "_data", property.name);
        }
    }
}


/***/ }),

/***/ "../../libs/vuemodel/lib/vue-helpers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Vue$proxy = exports.Vue$dependArray = exports.Vue$isReserved = void 0;
function Vue$isReserved(str) {
    var c = (str + "").charCodeAt(0);
    return c === 0x24 || c === 0x5F;
}
exports.Vue$isReserved = Vue$isReserved;
function Vue$dependArray(value) {
    for (var e, i = 0, l = value.length; i < l; i++) {
        e = value[i];
        e && e.__ob__ && e.__ob__.dep.depend();
        if (Array.isArray(e)) {
            Vue$dependArray(e);
        }
    }
}
exports.Vue$dependArray = Vue$dependArray;
function Vue$proxy(target, sourceKey, key) {
    Object.defineProperty(target, key, {
        configurable: true,
        enumerable: true,
        get: function VueModel$proxyPropertyGet() {
            return this[sourceKey][key];
        },
        set: function VueModel$proxyPropertySet(value) {
            this[sourceKey][key] = value;
        }
    });
}
exports.Vue$proxy = Vue$proxy;


/***/ }),

/***/ "../../libs/vuemodel/lib/vue-internals.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureVueInternalTypes = exports.VueModel$Vue = void 0;
exports.VueModel$Vue = null;
function ensureVueInternalTypes(target, Vue) {
    // Exit early if Observer or Dep are already defined
    if (target.Observer || target.Dep) {
        return;
    }
    var observableData;
    if (Vue.observable) {
        observableData = Vue.observable({});
    }
    else {
        var component = new Vue({
            data: function () {
                return {};
            }
        });
        observableData = component.$data;
    }
    var observer = observableData.__ob__;
    var observerCtor = observer.constructor;
    var depCtor = observer.dep.constructor;
    target.Observer = observerCtor;
    target.Dep = depCtor;
}
exports.ensureVueInternalTypes = ensureVueInternalTypes;


/***/ }),

/***/ "../../libs/vuemodel/lib/vue-model-observability.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEntitiesVueObservable = exports.dependChildArray = exports.getArrayObserverConstructor = exports.getArrayObserver = exports.observeArray = exports.getObjectMetaObserverConstructor = exports.getObjectMetaObserver = exports.getEntityObserverConstructor = exports.getEntityObserver = exports.observeEntity = exports.preventVueObservability = exports.getCustomObserverConstructor = void 0;
var vue_1 = __webpack_require__("vue");
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var model_js_2 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var model_js_3 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var helpers_1 = __webpack_require__("../../libs/vuemodel/lib/helpers.js");
// eslint-disable-next-line no-redeclare
var CustomObserverConstructor = null;
function getCustomObserverConstructor() {
    return CustomObserverConstructor || (CustomObserverConstructor = __webpack_require__("../../libs/vuemodel/lib/custom-observer.js").CustomObserver);
}
exports.getCustomObserverConstructor = getCustomObserverConstructor;
function preventVueObservability(obj) {
    if (obj) {
        if (!(0, helpers_1.hasOwnProperty)(obj, "__ob__")) {
            // Mark the object as "raw" so that Vue won't try to make it observable
            (0, vue_1.markRaw)(obj);
            return true;
        }
        else {
            // Vue's default observability is also bypassed if the object's observer is a subclass of `CustomObserver`
            var CustomObserver = getCustomObserverConstructor();
            return obj.__ob__ instanceof CustomObserver;
        }
    }
}
exports.preventVueObservability = preventVueObservability;
/**
 * Based on Vue's internal `observe()` function. Ensures that the given entity
 * is observable and optionally notes that it is referenced by a component
 * @param entity The entity to observe
 * @param asRootData The entity is referenced as a component's data
 */
function observeEntity(entity, asRootData) {
    if (asRootData === void 0) { asRootData = false; }
    if (entity instanceof model_js_2.Entity) {
        var ob = getEntityObserver(entity, true);
        if (entity.meta) {
            getObjectMetaObserver(entity.meta, true);
        }
        if (asRootData && ob) {
            ob.vmCount++;
        }
        return ob;
    }
    else {
        // TODO: Warn about attempting to observe non-entity?
    }
}
exports.observeEntity = observeEntity;
/**
 * Gets or creates an `EntityObserver` for the given entity
 * @param entity The entity begin observed
 * @param create If true, create the observer if it doesn't already exist
 */
function getEntityObserver(entity, create) {
    if (create === void 0) { create = false; }
    var EntityObserver = getEntityObserverConstructor();
    if ((0, helpers_1.hasOwnProperty)(entity, "__ob__") && (0, helpers_1.getProp)(entity, "__ob__") instanceof EntityObserver) {
        return (0, helpers_1.getProp)(entity, "__ob__");
    }
    else if (create) {
        // Mark the entity as "raw" so that Vue won't try to make it observable
        (0, vue_1.markRaw)(entity);
        return new EntityObserver(entity, true);
    }
    else {
        return null;
    }
}
exports.getEntityObserver = getEntityObserver;
// eslint-disable-next-line no-redeclare
var EntityObserverConstructor = null;
function getEntityObserverConstructor() {
    return EntityObserverConstructor || (EntityObserverConstructor = __webpack_require__("../../libs/vuemodel/lib/entity-observer.js").EntityObserver);
}
exports.getEntityObserverConstructor = getEntityObserverConstructor;
/**
 * Gets or creates an `ObjectMetaObserver` for the given meta object
 * @param meta The object meta begin observed
 * @param create If true, create the observer if it doesn't already exist
 */
function getObjectMetaObserver(meta, create) {
    if (create === void 0) { create = false; }
    var ObjectMetaObserver = getObjectMetaObserverConstructor();
    if ((0, helpers_1.hasOwnProperty)(meta, "__ob__") && (0, helpers_1.getProp)(meta, "__ob__") instanceof ObjectMetaObserver) {
        return (0, helpers_1.getProp)(meta, "__ob__");
    }
    else if (create) {
        // Mark the object meta as "raw" so that Vue won't try to make it observable
        (0, vue_1.markRaw)(meta);
        return new ObjectMetaObserver(meta, true);
    }
    else {
        return null;
    }
}
exports.getObjectMetaObserver = getObjectMetaObserver;
// eslint-disable-next-line no-redeclare
var ObjectMetaObserverConstructor = null;
function getObjectMetaObserverConstructor() {
    return ObjectMetaObserverConstructor || (ObjectMetaObserverConstructor = __webpack_require__("../../libs/vuemodel/lib/object-meta-observer.js").ObjectMetaObserver);
}
exports.getObjectMetaObserverConstructor = getObjectMetaObserverConstructor;
/**
 * Based on Vue's internal `observe()` function. Ensures that the given array
 * is observable and optionally notes that it is referenced by a component
 * @param array The array to observe
 * @param asRootData The array is referenced as a component's data
 */
function observeArray(array, asRootData) {
    if (asRootData === void 0) { asRootData = false; }
    if (Array.isArray(array)) {
        if (model_js_3.ObservableArray.isObservableArray(array)) {
            var ob = getArrayObserver(array, true);
            if (asRootData && ob) {
                ob.vmCount++;
            }
            return ob;
        }
        else {
            // TODO: Warn about attempting to observe non-observable array?
        }
    }
    else {
        // TODO: Warn about attempting to observe non-array?
    }
}
exports.observeArray = observeArray;
/**
 * Gets or creates an `ArrayObserver` for the given observable array
 * @param entity The entity begin observed
 * @param create If true, create the observer if it doesn't already exist
 */
function getArrayObserver(array, create) {
    if (create === void 0) { create = false; }
    var ArrayObserver = getArrayObserverConstructor();
    if ((0, helpers_1.hasOwnProperty)(array, "__ob__") && (0, helpers_1.getProp)(array, "__ob__") instanceof ArrayObserver) {
        return (0, helpers_1.getProp)(array, "__ob__");
    }
    else if (create) {
        // Mark the array as "raw" so that Vue won't try to make it observable
        (0, vue_1.markRaw)(array);
        return new ArrayObserver(array, true);
    }
    else {
        return null;
    }
}
exports.getArrayObserver = getArrayObserver;
// eslint-disable-next-line no-redeclare
var ArrayObserverConstructor = null;
function getArrayObserverConstructor() {
    return ArrayObserverConstructor || (ArrayObserverConstructor = __webpack_require__("../../libs/vuemodel/lib/array-observer.js").ArrayObserver);
}
exports.getArrayObserverConstructor = getArrayObserverConstructor;
/**
 * Based on Vue's internals `dependArray()` function
 * @param array The child array to track as a dependency
 */
function dependChildArray(array) {
    var arrayObserver = observeArray(array);
    if (arrayObserver)
        arrayObserver.ensureObservable();
    for (var e, i = 0, l = array.length; i < l; i++) {
        e = array[i];
        if (e != null) {
            if (e instanceof model_js_2.Entity) {
                var observer = getEntityObserver(e, true);
                observer.ensureObservable();
                observer.dep.depend();
            }
            else if ((0, helpers_1.hasOwnProperty)(e, "__ob__")) {
                e.__ob__.dep.depend();
            }
            if (Array.isArray(e)) {
                dependChildArray(e);
            }
        }
    }
}
exports.dependChildArray = dependChildArray;
var vueCompatibleModels = [];
/**
 * Make sure that entities in the given model are observable by Vue
 * By default, entities would not be observable, since model properties
 * are added to the prototype, Vue will not detect them. So, we use a custom
 * observer that leverages model metadata to manage property access/change.
 * @param model The model to augment
 */
function makeEntitiesVueObservable(model) {
    if (!model || !(model instanceof model_js_1.Model)) {
        // TODO: Warn about missing or non-Model argument?
        return;
    }
    if (vueCompatibleModels.indexOf(model) >= 0 || model._entitiesAreVueObservable === true) {
        return;
    }
    model.entityRegistered.subscribe(function (args) {
        observeEntity(args.entity).ensureObservable();
    });
    // Make existing entities observable
    for (var _i = 0, _a = Object.keys(model.types); _i < _a.length; _i++) {
        var typeName = _a[_i];
        var type = model.types[typeName];
        type.known().forEach(function (entity) {
            observeEntity(entity).ensureObservable();
        });
    }
    vueCompatibleModels.push(model);
    model._entitiesAreVueObservable = true;
}
exports.makeEntitiesVueObservable = makeEntitiesVueObservable;


/***/ }),

/***/ "../../libs/vuemodel/lib/vue-model.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVueModel = exports.VueModel = void 0;
var model_js_1 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var model_js_2 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
var vue_internals_1 = __webpack_require__("../../libs/vuemodel/lib/vue-internals.js");
var vue_global_mixin_1 = __webpack_require__("../../libs/vuemodel/lib/vue-global-mixin.js");
var source_path_mixin_1 = __webpack_require__("../../libs/vuemodel/lib/source-path-mixin.js");
var source_root_mixin_1 = __webpack_require__("../../libs/vuemodel/lib/source-root-mixin.js");
var vue_model_observability_1 = __webpack_require__("../../libs/vuemodel/lib/vue-model-observability.js");
var vm_root_component_1 = __webpack_require__("../../libs/vuemodel/lib/vm-root-component.js");
var vm_source_component_1 = __webpack_require__("../../libs/vuemodel/lib/vm-source-component.js");
var model_js_3 = __webpack_require__("../../libs/model.js/lib/index.js"); // eslint-disable-line import/no-duplicates
// TODO: Do we need to take `toggleObserving()` into account?
var VueModel = /** @class */ (function (_super) {
    __extends(VueModel, _super);
    /**
     * Creates a new model with the specified type information.
     * @param options The set of model types to add.
     */
    function VueModel(options, config) {
        var _this = _super.call(this, options, config) || this;
        if (!VueModel._Vue) {
            // TODO: auto-install if needed?
            throw new Error("Vue.use(VueModel) must be called before constructing a VueModel instance.");
        }
        // Make sure that the model itself is not made observable by Vue, since anything that we want to be made observable should be made observable explicitly
        (0, vue_model_observability_1.preventVueObservability)(_this);
        // Make sure that entities are observable by Vue
        (0, vue_model_observability_1.makeEntitiesVueObservable)(_this);
        return _this;
    }
    /**
     * Implement the Vue plugin interface:
     * https://vuejs.org/v2/guide/plugins.html#Writing-a-Plugin
     */
    VueModel.install = function (vue) {
        // Detect if the plugin install has already been called
        if (VueModel._Vue)
            return;
        // Register components globally for use in templates
        vue.component("vm-root", vm_root_component_1.VMRoot);
        vue.component("vm-source", vm_source_component_1.VMSource);
        // Store a reference to the Vue constructor/module
        VueModel._Vue = vue;
        // Get access to Vue's internal types that we need
        (0, vue_internals_1.ensureVueInternalTypes)(VueModel._VueInternals, VueModel._Vue);
        // Install the Vue global mixin
        return (0, vue_global_mixin_1.VueModel$installGlobalMixin)(vue);
    };
    VueModel._Vue = null;
    VueModel._VueInternals = { Observer: null, Dep: null };
    /**
     * Provide access to Vue mixins for source provider/consumer
     */
    VueModel.mixins = {
        SourcePath: source_path_mixin_1.SourcePathMixin,
        SourceRoot: source_root_mixin_1.SourceRootMixin
    };
    VueModel.Entity = model_js_2.Entity;
    VueModel.CultureInfo = model_js_3.CultureInfo;
    return VueModel;
}(model_js_1.Model));
exports.VueModel = VueModel;
// eslint-disable-next-line no-redeclare
function createVueModel(options, config) {
    return new Promise(function (resolve) {
        var model = new VueModel(options, config);
        model.ready(function () {
            resolve(model);
        });
    });
}
exports.createVueModel = createVueModel;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,