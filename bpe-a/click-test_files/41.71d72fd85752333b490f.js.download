(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[41],{

/***/ "../../libs/api/services/plan-service.ts":
/*!******************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/api/services/plan-service.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPlanInfo = getPlanInfo;
exports.getPricing = getPricing;
exports.getPublicPricing = getPublicPricing;
var _util = __webpack_require__(/*! ./util */ "../../libs/api/services/util.ts");
var _serviceRequest = __webpack_require__(/*! ./service-request */ "../../libs/api/services/service-request.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var cachedPublicPricing = null;
function getPublicPricing() {
  if (cachedPublicPricing) {
    return Promise.resolve(cachedPublicPricing);
  } else {
    return (0, _serviceRequest.serviceRequest)('svc/plan/public-pricing', null, _objectSpread({
      method: 'GET',
      authorize: false
    }, (0, _util.isPrerender)() ? {
      siteUrl: 'https://www.cognitoforms.com/'
    } : {})).then(function (result) {
      cachedPublicPricing = result;
      return result;
    });
  }
}
function getPricing(query) {
  return (0, _serviceRequest.serviceRequest)('svc/plan/pricing', null, {
    method: 'GET',
    query: query
  }).then(function (res) {
    if (res.currentPricingExpiration && typeof res.currentPricingExpiration === 'string') {
      res.currentPricingExpiration = (0, _serviceRequest.convertToDate)(res.currentPricingExpiration);
    }
    if (res.trialEndDate && typeof res.trialEndDate === 'string') {
      res.trialEndDate = (0, _serviceRequest.convertToDate)(res.trialEndDate);
    }
    return res;
  });
}
function getPlanInfo() {
  return (0, _serviceRequest.serviceRequest)('svc/plan/info', null, {
    method: 'GET'
  });
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,