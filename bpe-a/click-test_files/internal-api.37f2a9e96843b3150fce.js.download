(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["internal-api"],{

/***/ "../../libs/element-ui/lib/message.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 76);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 16:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/popup/index.js");

/***/ }),

/***/ 24:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/utils/vdom.js");

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

module.exports = __webpack_require__("vue");

/***/ }),

/***/ 76:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(6);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/message/src/main.vue?vue&type=template&id=50aa567c
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "transition",
    {
      attrs: { name: "el-message-fade" },
      on: { "after-leave": _vm.handleAfterLeave }
    },
    [
      _c(
        "div",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          class: [
            "el-message",
            _vm.type && !_vm.iconClass ? `el-message--${_vm.type}` : "",
            _vm.center ? "is-center" : "",
            _vm.showClose ? "is-closable" : "",
            _vm.customClass
          ],
          style: _vm.positionStyle,
          attrs: { role: "alert" },
          on: { mouseenter: _vm.clearTimer, mouseleave: _vm.startTimer }
        },
        [
          _vm.iconClass
            ? _c("i", { class: _vm.iconClass })
            : _c("i", { class: _vm.typeClass }),
          _vm._t("default", function() {
            return [
              !_vm.dangerouslyUseHTMLString
                ? _c("p", { staticClass: "el-message__content" }, [
                    _vm._v(_vm._s(_vm.message))
                  ])
                : _c("p", {
                    staticClass: "el-message__content",
                    domProps: { innerHTML: _vm._s(_vm.message) }
                  })
            ]
          }),
          _vm.showClose
            ? _c("i", {
                staticClass: "el-message__closeBtn el-icon-close",
                on: { click: _vm.close }
              })
            : _vm._e()
        ],
        2
      )
    ]
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/message/src/main.vue?vue&type=template&id=50aa567c

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/message/src/main.vue?vue&type=script&lang=js
const typeMap = {
  success: 'success',
  info: 'info',
  warning: 'warning',
  error: 'error'
};
/* harmony default export */ var mainvue_type_script_lang_js = ({
  data() {
    return {
      visible: false,
      message: '',
      duration: 3000,
      type: 'info',
      iconClass: '',
      customClass: '',
      onClose: null,
      showClose: false,
      closed: false,
      verticalOffset: 20,
      timer: null,
      dangerouslyUseHTMLString: false,
      center: false
    };
  },
  computed: {
    typeClass() {
      return this.type && !this.iconClass ? `el-message__icon el-icon-${typeMap[this.type]}` : '';
    },
    positionStyle() {
      return {
        'top': `${this.verticalOffset}px`
      };
    }
  },
  watch: {
    closed(newVal) {
      if (newVal) {
        this.visible = false;
      }
    }
  },
  methods: {
    handleAfterLeave() {
      this.$destroy(true);
      this.$el.parentNode.removeChild(this.$el);
    },
    close() {
      this.closed = true;
      if (typeof this.onClose === 'function') {
        this.onClose(this);
      }
    },
    clearTimer() {
      clearTimeout(this.timer);
    },
    startTimer() {
      if (this.duration > 0) {
        this.timer = setTimeout(() => {
          if (!this.closed) {
            this.close();
          }
        }, this.duration);
      }
    },
    keydown(e) {
      if (e.keyCode === 27) {
        // esc关闭消息
        if (!this.closed) {
          this.close();
        }
      }
    }
  },
  mounted() {
    this.startTimer();
    document.addEventListener('keydown', this.keydown);
  },
  beforeDestroy() {
    document.removeEventListener('keydown', this.keydown);
  }
});
// CONCATENATED MODULE: ./packages/message/src/main.vue?vue&type=script&lang=js
 /* harmony default export */ var src_mainvue_type_script_lang_js = (mainvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/message/src/main.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var main = (component.exports);
// EXTERNAL MODULE: external "./utils/popup"
var popup_ = __webpack_require__(16);

// EXTERNAL MODULE: external "./utils/vdom"
var vdom_ = __webpack_require__(24);

// CONCATENATED MODULE: ./packages/message/src/main.js




let MessageConstructor = external_vue_default.a.extend(main);
let instance;
let instances = [];
let seed = 1;
const Message = function (options) {
  if (external_vue_default.a.prototype.$isServer) return;
  options = options || {};
  if (typeof options === 'string') {
    options = {
      message: options
    };
  }
  let userOnClose = options.onClose;
  let id = 'message_' + seed++;
  options.onClose = function () {
    Message.close(id, userOnClose);
  };
  instance = new MessageConstructor({
    data: options
  });
  instance.id = id;
  if (Object(vdom_["isVNode"])(instance.message)) {
    instance.$slots.default = [instance.message];
    instance.message = null;
  }
  instance.$mount();
  document.body.appendChild(instance.$el);
  let verticalOffset = options.offset || 20;
  instances.forEach(item => {
    verticalOffset += item.$el.offsetHeight + 16;
  });
  instance.verticalOffset = verticalOffset;
  instance.visible = true;
  instance.$el.style.zIndex = popup_["PopupManager"].nextZIndex();
  instances.push(instance);
  return instance;
};
['success', 'warning', 'info', 'error'].forEach(type => {
  Message[type] = options => {
    if (typeof options === 'string') {
      options = {
        message: options
      };
    }
    options.type = type;
    return Message(options);
  };
});
Message.close = function (id, userOnClose) {
  let len = instances.length;
  let index = -1;
  let removedHeight;
  for (let i = 0; i < len; i++) {
    if (id === instances[i].id) {
      removedHeight = instances[i].$el.offsetHeight;
      index = i;
      if (typeof userOnClose === 'function') {
        userOnClose(instances[i]);
      }
      instances.splice(i, 1);
      break;
    }
  }
  if (len <= 1 || index === -1 || index > instances.length - 1) return;
  for (let i = index; i < len - 1; i++) {
    let dom = instances[i].$el;
    dom.style['top'] = parseInt(dom.style['top'], 10) - removedHeight - 16 + 'px';
  }
};
Message.closeAll = function () {
  for (let i = instances.length - 1; i >= 0; i--) {
    instances[i].close();
  }
};
/* harmony default export */ var src_main = (Message);
// CONCATENATED MODULE: ./packages/message/index.js

/* harmony default export */ var message = __webpack_exports__["default"] = (src_main);

/***/ })

/******/ });

/***/ }),

/***/ "../../libs/element-ui/lib/utils/dom.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.addClass = addClass;
exports.getStyle = exports.getScrollContainer = void 0;
exports.hasClass = hasClass;
exports.once = exports.on = exports.off = exports.isScroll = exports.isInContainer = void 0;
exports.removeClass = removeClass;
exports.setStyle = setStyle;
var _vue = _interopRequireDefault(__webpack_require__("vue"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* istanbul ignore next */

const isServer = _vue.default.prototype.$isServer;
const SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
const MOZ_HACK_REGEXP = /^moz([A-Z])/;
const ieVersion = isServer ? 0 : Number(document.documentMode);

/* istanbul ignore next */
const trim = function (string) {
  return (string || '').replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, '');
};
/* istanbul ignore next */
const camelCase = function (name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, 'Moz$1');
};

/* istanbul ignore next */
const on = exports.on = function () {
  if (!isServer && document.addEventListener) {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.addEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent('on' + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
const off = exports.off = function () {
  if (!isServer && document.removeEventListener) {
    return function (element, event, handler) {
      if (element && event) {
        element.removeEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent('on' + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
const once = function (el, event, fn) {
  var listener = function () {
    if (fn) {
      fn.apply(this, arguments);
    }
    off(el, event, listener);
  };
  on(el, event, listener);
};

/* istanbul ignore next */
exports.once = once;
function hasClass(el, cls) {
  if (!el || !cls) return false;
  if (cls.indexOf(' ') !== -1) throw new Error('className should not contain space.');
  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;
  }
}
;

/* istanbul ignore next */
function addClass(el, cls) {
  if (!el) return;
  var curClass = el.className;
  var classes = (cls || '').split(' ');
  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;
    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += ' ' + clsName;
    }
  }
  if (!el.classList) {
    el.className = curClass;
  }
}
;

/* istanbul ignore next */
function removeClass(el, cls) {
  if (!el || !cls) return;
  var classes = cls.split(' ');
  var curClass = ' ' + el.className + ' ';
  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;
    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(' ' + clsName + ' ', ' ');
    }
  }
  if (!el.classList) {
    el.className = trim(curClass);
  }
}
;

/* istanbul ignore next */
const getStyle = exports.getStyle = ieVersion < 9 ? function (element, styleName) {
  if (isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === 'float') {
    styleName = 'styleFloat';
  }
  try {
    switch (styleName) {
      case 'opacity':
        try {
          return element.filters.item('alpha').opacity / 100;
        } catch (e) {
          return 1.0;
        }
      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function (element, styleName) {
  if (isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === 'float') {
    styleName = 'cssFloat';
  }
  try {
    var computed = document.defaultView.getComputedStyle(element, '');
    return element.style[styleName] || computed ? computed[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
};

/* istanbul ignore next */
function setStyle(element, styleName, value) {
  if (!element || !styleName) return;
  if (typeof styleName === 'object') {
    for (var prop in styleName) {
      if (styleName.hasOwnProperty(prop)) {
        setStyle(element, prop, styleName[prop]);
      }
    }
  } else {
    styleName = camelCase(styleName);
    if (styleName === 'opacity' && ieVersion < 9) {
      element.style.filter = isNaN(value) ? '' : 'alpha(opacity=' + value * 100 + ')';
    } else {
      element.style[styleName] = value;
    }
  }
}
;
const isScroll = (el, vertical) => {
  if (isServer) return;
  const determinedDirection = vertical !== null || vertical !== undefined;
  const overflow = determinedDirection ? vertical ? getStyle(el, 'overflow-y') : getStyle(el, 'overflow-x') : getStyle(el, 'overflow');
  return overflow.match(/(scroll|auto)/);
};
exports.isScroll = isScroll;
const getScrollContainer = (el, vertical) => {
  if (isServer) return;
  let parent = el;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent)) {
      return window;
    }
    if (isScroll(parent, vertical)) {
      return parent;
    }
    parent = parent.parentNode;
  }
  return parent;
};
exports.getScrollContainer = getScrollContainer;
const isInContainer = (el, container) => {
  if (isServer || !el || !container) return false;
  const elRect = el.getBoundingClientRect();
  let containerRect;
  if ([window, document, document.documentElement, null, undefined].includes(container)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container.getBoundingClientRect();
  }
  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
exports.isInContainer = isInContainer;

/***/ }),

/***/ "../../libs/element-ui/lib/utils/merge.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = _default;
function _default(target) {
  for (let i = 1, j = arguments.length; i < j; i++) {
    let source = arguments[i] || {};
    for (let prop in source) {
      if (source.hasOwnProperty(prop)) {
        let value = source[prop];
        if (value !== undefined) {
          target[prop] = value;
        }
      }
    }
  }
  return target;
}
;

/***/ }),

/***/ "../../libs/element-ui/lib/utils/popup/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var _vue = _interopRequireDefault(__webpack_require__("vue"));
var _merge = _interopRequireDefault(__webpack_require__("../../libs/element-ui/lib/utils/merge.js"));
var _popupManager = _interopRequireDefault(__webpack_require__("../../libs/element-ui/lib/utils/popup/popup-manager.js"));
exports.PopupManager = _popupManager.default;
var _scrollbarWidth = _interopRequireDefault(__webpack_require__("../../libs/element-ui/lib/utils/scrollbar-width.js"));
var _dom = __webpack_require__("../../libs/element-ui/lib/utils/dom.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
let idSeed = 1;
let scrollBarWidth;
var _default = exports.default = {
  props: {
    visible: {
      type: Boolean,
      default: false
    },
    openDelay: {},
    closeDelay: {},
    zIndex: {},
    modal: {
      type: Boolean,
      default: false
    },
    modalFade: {
      type: Boolean,
      default: true
    },
    modalClass: {},
    modalAppendToBody: {
      type: Boolean,
      default: false
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: false
    },
    closeOnClickModal: {
      type: Boolean,
      default: false
    }
  },
  beforeMount() {
    this._popupId = 'popup-' + idSeed++;
    _popupManager.default.register(this._popupId, this);
  },
  beforeDestroy() {
    _popupManager.default.deregister(this._popupId);
    _popupManager.default.closeModal(this._popupId);
    this.restoreBodyStyle();
  },
  data() {
    return {
      opened: false,
      bodyPaddingRight: null,
      computedBodyPaddingRight: 0,
      withoutHiddenClass: true,
      rendered: false
    };
  },
  watch: {
    visible(val) {
      if (val) {
        if (this._opening) return;
        if (!this.rendered) {
          this.rendered = true;
          _vue.default.nextTick(() => {
            this.open();
          });
        } else {
          this.open();
        }
      } else {
        this.close();
      }
    }
  },
  methods: {
    open(options) {
      if (!this.rendered) {
        this.rendered = true;
      }
      const props = (0, _merge.default)({}, this.$props || this, options);
      if (this._closeTimer) {
        clearTimeout(this._closeTimer);
        this._closeTimer = null;
      }
      clearTimeout(this._openTimer);
      const openDelay = Number(props.openDelay);
      if (openDelay > 0) {
        this._openTimer = setTimeout(() => {
          this._openTimer = null;
          this.doOpen(props);
        }, openDelay);
      } else {
        this.doOpen(props);
      }
    },
    doOpen(props) {
      if (this.$isServer) return;
      if (this.willOpen && !this.willOpen()) return;
      if (this.opened) return;
      this._opening = true;
      const dom = this.$el;
      const modal = props.modal;
      const zIndex = props.zIndex;
      if (zIndex) {
        _popupManager.default.zIndex = zIndex;
      }
      if (modal) {
        if (this._closing) {
          _popupManager.default.closeModal(this._popupId);
          this._closing = false;
        }
        _popupManager.default.openModal(this._popupId, _popupManager.default.nextZIndex(), this.modalAppendToBody ? undefined : dom, props.modalClass, props.modalFade);
        if (props.lockScroll) {
          this.withoutHiddenClass = !document.body.hasAttribute('data-el-popup-parent--hidden');
          if (this.withoutHiddenClass) {
            this.bodyPaddingRight = document.body.style.paddingRight;
            this.computedBodyPaddingRight = parseInt((0, _dom.getStyle)(document.body, 'paddingRight'), 10);
          }
          scrollBarWidth = (0, _scrollbarWidth.default)();
          let bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
          let bodyOverflowY = (0, _dom.getStyle)(document.body, 'overflowY');
          if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === 'scroll') && this.withoutHiddenClass) {
            document.body.style.paddingRight = this.computedBodyPaddingRight + scrollBarWidth + 'px';
          }
          document.body.setAttribute('data-el-popup-parent--hidden', '');
        }
      }
      requestAnimationFrame(() => {
        if (getComputedStyle(dom).position === 'static') {
          dom.style.position = 'absolute';
        }
        dom.style.zIndex = _popupManager.default.nextZIndex();
        this.opened = true;
        this.onOpen && this.onOpen();
        this.doAfterOpen();
      });
    },
    doAfterOpen() {
      this._opening = false;
    },
    close() {
      if (this.willClose && !this.willClose()) return;
      if (this._openTimer !== null) {
        clearTimeout(this._openTimer);
        this._openTimer = null;
      }
      clearTimeout(this._closeTimer);
      const closeDelay = Number(this.closeDelay);
      if (closeDelay > 0) {
        this._closeTimer = setTimeout(() => {
          this._closeTimer = null;
          this.doClose();
        }, closeDelay);
      } else {
        this.doClose();
      }
    },
    doClose() {
      this._closing = true;
      this.onClose && this.onClose();
      if (this.lockScroll) {
        setTimeout(this.restoreBodyStyle, 200);
      }
      this.opened = false;
      this.doAfterClose();
    },
    doAfterClose() {
      _popupManager.default.closeModal(this._popupId);
      this._closing = false;
    },
    restoreBodyStyle() {
      if (this.modal && this.withoutHiddenClass) {
        document.body.style.paddingRight = this.bodyPaddingRight;
        document.body.removeAttribute('data-el-popup-parent--hidden');
      }
      this.withoutHiddenClass = true;
    }
  }
};

/***/ }),

/***/ "../../libs/element-ui/lib/utils/popup/popup-manager.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var _vue = _interopRequireDefault(__webpack_require__("vue"));
var _dom = __webpack_require__("../../libs/element-ui/lib/utils/dom.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
let hasModal = false;
let hasInitZIndex = false;
let zIndex;
const getModal = function () {
  if (_vue.default.prototype.$isServer) return;
  let modalDom = PopupManager.modalDom;
  if (modalDom) {
    hasModal = true;
  } else {
    hasModal = false;
    modalDom = document.createElement('div');
    PopupManager.modalDom = modalDom;
    modalDom.addEventListener('touchmove', function (event) {
      event.preventDefault();
      event.stopPropagation();
    });
    modalDom.addEventListener('click', function () {
      PopupManager.doOnModalClick && PopupManager.doOnModalClick();
    });
  }
  return modalDom;
};
const instances = {};
const PopupManager = {
  modalFade: true,
  getInstance: function (id) {
    return instances[id];
  },
  register: function (id, instance) {
    if (id && instance) {
      instances[id] = instance;
    }
  },
  deregister: function (id) {
    if (id) {
      instances[id] = null;
      delete instances[id];
    }
  },
  nextZIndex: function () {
    return PopupManager.zIndex++;
  },
  modalStack: [],
  doOnModalClick: function () {
    const topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];
    if (!topItem) return;
    const instance = PopupManager.getInstance(topItem.id);
    if (instance && instance.closeOnClickModal) {
      instance.close();
    }
  },
  openModal: function (id, zIndex, dom, modalClass, modalFade) {
    if (_vue.default.prototype.$isServer) return;
    if (!id || zIndex === undefined) return;
    this.modalFade = modalFade;
    const modalStack = this.modalStack;
    for (let i = 0, j = modalStack.length; i < j; i++) {
      const item = modalStack[i];
      if (item.id === id) {
        return;
      }
    }
    const modalDom = getModal();
    (0, _dom.addClass)(modalDom, 'v-modal');
    if (this.modalFade && !hasModal) {
      (0, _dom.addClass)(modalDom, 'v-modal-enter');
    }
    if (modalClass) {
      let classArr = modalClass.trim().split(/\s+/);
      classArr.forEach(item => (0, _dom.addClass)(modalDom, item));
    }
    setTimeout(() => {
      (0, _dom.removeClass)(modalDom, 'v-modal-enter');
    }, 200);
    if (dom && dom.parentNode && dom.parentNode.nodeType !== 11) {
      dom.parentNode.appendChild(modalDom);
    } else {
      document.body.appendChild(modalDom);
    }
    if (zIndex) {
      modalDom.style.zIndex = zIndex;
    }
    modalDom.tabIndex = 0;
    modalDom.style.display = '';
    this.modalStack.push({
      id: id,
      zIndex: zIndex,
      modalClass: modalClass
    });
  },
  closeModal: function (id) {
    const modalStack = this.modalStack;
    const modalDom = getModal();
    if (modalStack.length > 0) {
      const topItem = modalStack[modalStack.length - 1];
      if (topItem.id === id) {
        if (topItem.modalClass) {
          let classArr = topItem.modalClass.trim().split(/\s+/);
          classArr.forEach(item => (0, _dom.removeClass)(modalDom, item));
        }
        modalStack.pop();
        if (modalStack.length > 0) {
          modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;
        }
      } else {
        for (let i = modalStack.length - 1; i >= 0; i--) {
          if (modalStack[i].id === id) {
            modalStack.splice(i, 1);
            break;
          }
        }
      }
    }
    if (modalStack.length === 0) {
      if (this.modalFade) {
        (0, _dom.addClass)(modalDom, 'v-modal-leave');
      }
      setTimeout(() => {
        if (modalStack.length === 0) {
          if (modalDom.parentNode) modalDom.parentNode.removeChild(modalDom);
          modalDom.style.display = 'none';
          PopupManager.modalDom = undefined;
        }
        (0, _dom.removeClass)(modalDom, 'v-modal-leave');
      }, 200);
    }
  }
};
Object.defineProperty(PopupManager, 'zIndex', {
  configurable: true,
  get() {
    if (!hasInitZIndex) {
      zIndex = zIndex || (_vue.default.prototype.$ELEMENT || {}).zIndex || 2000;
      hasInitZIndex = true;
    }
    return zIndex;
  },
  set(value) {
    zIndex = value;
  }
});
const getTopPopup = function () {
  if (_vue.default.prototype.$isServer) return;
  if (PopupManager.modalStack.length > 0) {
    const topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];
    if (!topPopup) return;
    const instance = PopupManager.getInstance(topPopup.id);
    return instance;
  }
};
if (!_vue.default.prototype.$isServer) {
  // handle `esc` key when the popup is shown
  window.addEventListener('keydown', function (event) {
    if (event.keyCode === 27) {
      const topPopup = getTopPopup();
      if (topPopup && topPopup.closeOnPressEscape) {
        topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction('cancel') : topPopup.close();
      }
    }
  });
}
var _default = exports.default = PopupManager;

/***/ }),

/***/ "../../libs/element-ui/lib/utils/scrollbar-width.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = _default;
var _vue = _interopRequireDefault(__webpack_require__("vue"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
let scrollBarWidth;
function _default() {
  if (_vue.default.prototype.$isServer) return 0;
  if (scrollBarWidth !== undefined) return scrollBarWidth;
  const outer = document.createElement('div');
  outer.className = 'el-scrollbar__wrap';
  outer.style.visibility = 'hidden';
  outer.style.width = '100px';
  outer.style.position = 'absolute';
  outer.style.top = '-9999px';
  document.body.appendChild(outer);
  const widthNoScroll = outer.offsetWidth;
  outer.style.overflow = 'scroll';
  const inner = document.createElement('div');
  inner.style.width = '100%';
  outer.appendChild(inner);
  const widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  scrollBarWidth = widthNoScroll - widthWithScroll;
  return scrollBarWidth;
}
;

/***/ }),

/***/ "../../libs/element-ui/lib/utils/types.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isFunction = exports.isDefined = void 0;
exports.isHtmlElement = isHtmlElement;
exports.isObject = isObject;
exports.isString = isString;
exports.isUndefined = void 0;
function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
}
function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}
function isHtmlElement(node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
}
const isFunction = functionToCheck => {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
};
exports.isFunction = isFunction;
const isUndefined = val => {
  return val === void 0;
};
exports.isUndefined = isUndefined;
const isDefined = val => {
  return val !== undefined && val !== null;
};
exports.isDefined = isDefined;

/***/ }),

/***/ "../../libs/element-ui/lib/utils/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.generateId = exports.escapeRegexpString = exports.coerceTruthyValueToArray = exports.capitalize = exports.autoprefixer = exports.arrayFindIndex = exports.arrayFind = exports.arrayEquals = void 0;
exports.getPropByPath = getPropByPath;
exports.getValueByPath = void 0;
exports.hasOwn = hasOwn;
exports.looseEqual = exports.kebabCase = exports.isIOS = exports.isIE = exports.isFirefox = exports.isEqual = exports.isEmpty = exports.isEdge = void 0;
exports.noop = noop;
exports.objToArray = objToArray;
exports.rafThrottle = rafThrottle;
exports.toObject = toObject;
exports.valueEquals = void 0;
var _vue = _interopRequireDefault(__webpack_require__("vue"));
var _types = __webpack_require__("../../libs/element-ui/lib/utils/types.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const hasOwnProperty = Object.prototype.hasOwnProperty;
function noop() {}
;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
;
function extend(to, _from) {
  for (let key in _from) {
    to[key] = _from[key];
  }
  return to;
}
;
function toObject(arr) {
  var res = {};
  for (let i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
;
const getValueByPath = function (object, prop) {
  prop = prop || '';
  const paths = prop.split('.');
  let current = object;
  let result = null;
  for (let i = 0, j = paths.length; i < j; i++) {
    const path = paths[i];
    if (!current) break;
    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};
exports.getValueByPath = getValueByPath;
function getPropByPath(obj, path, strict) {
  let tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');
  let keyArr = path.split('.');
  let i = 0;
  for (let len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    let key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error('please transfer a valid prop path to form item!');
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}
;
const generateId = function () {
  return Math.floor(Math.random() * 10000);
};
exports.generateId = generateId;
const valueEquals = (a, b) => {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (let i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};
exports.valueEquals = valueEquals;
const escapeRegexpString = function (value) {
  if (value === void 0) {
    value = '';
  }
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
exports.escapeRegexpString = escapeRegexpString;
const arrayFindIndex = function (arr, pred) {
  for (let i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};
exports.arrayFindIndex = arrayFindIndex;
const arrayFind = function (arr, pred) {
  const idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};

// coerce truthy value to array
exports.arrayFind = arrayFind;
const coerceTruthyValueToArray = function (val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};
exports.coerceTruthyValueToArray = coerceTruthyValueToArray;
const isIE = function () {
  return !_vue.default.prototype.$isServer && !isNaN(Number(document.documentMode));
};
exports.isIE = isIE;
const isEdge = function () {
  return !_vue.default.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1;
};
exports.isEdge = isEdge;
const isFirefox = function () {
  return !_vue.default.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
};
exports.isFirefox = isFirefox;
const isIOS = function () {
  // https://stackoverflow.com/a/58064481/2836695
  return !_vue.default.prototype.$isServer && (/iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
};
exports.isIOS = isIOS;
const autoprefixer = function (style) {
  if (typeof style !== 'object') return style;
  const rules = ['transform', 'transition', 'animation'];
  const prefixes = ['ms-', 'webkit-'];
  rules.forEach(rule => {
    const value = style[rule];
    if (rule && value) {
      prefixes.forEach(prefix => {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};
exports.autoprefixer = autoprefixer;
const kebabCase = function (str) {
  const hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
};
exports.kebabCase = kebabCase;
const capitalize = function (str) {
  if (!(0, _types.isString)(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};
exports.capitalize = capitalize;
const looseEqual = function (a, b) {
  const isObjectA = (0, _types.isObject)(a);
  const isObjectB = (0, _types.isObject)(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};
exports.looseEqual = looseEqual;
const arrayEquals = function (arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];
  if (arrayA.length !== arrayB.length) {
    return false;
  }
  for (let i = 0; i < arrayA.length; i++) {
    if (!looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }
  return true;
};
exports.arrayEquals = arrayEquals;
const isEqual = function (value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return looseEqual(value1, value2);
};
exports.isEqual = isEqual;
const isEmpty = function (val) {
  // null or undefined
  if (val == null) return true;
  if (typeof val === 'boolean') return false;
  if (typeof val === 'number') return !val;
  if (val instanceof Error) return val.message === '';
  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case '[object String]':
    case '[object Array]':
      return !val.length;

    // Map or Set or File
    case '[object File]':
    case '[object Map]':
    case '[object Set]':
      {
        return !val.size;
      }
    // Plain Object
    case '[object Object]':
      {
        return !Object.keys(val).length;
      }
  }
  return false;
};
exports.isEmpty = isEmpty;
function rafThrottle(fn) {
  let locked = false;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (locked) return;
    locked = true;
    window.requestAnimationFrame(_ => {
      fn.apply(this, args);
      locked = false;
    });
  };
}
function objToArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return isEmpty(obj) ? [] : [obj];
}

/***/ }),

/***/ "../../libs/element-ui/lib/utils/vdom.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isVNode = isVNode;
var _util = __webpack_require__("../../libs/element-ui/lib/utils/util.js");
function isVNode(node) {
  return node !== null && typeof node === 'object' && (0, _util.hasOwn)(node, 'componentOptions');
}
;

/***/ }),

/***/ "../../libs/types/server-types/forms/model/index-type.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexType = void 0;
/**
 * This is a TypeGen auto-generated file.
 * Any changes made to this file can be lost when this file is regenerated.
 */
var IndexType = exports.IndexType = /*#__PURE__*/function (IndexType) {
  IndexType["Add"] = "Add";
  IndexType["Update"] = "Update";
  IndexType["Delete"] = "Delete";
  IndexType["Batch"] = "Batch";
  IndexType["Checkpoint"] = "Checkpoint";
  IndexType["Lock"] = "Lock";
  IndexType["Flush"] = "Flush";
  return IndexType;
}({});

/***/ }),

/***/ "../../libs/types/server-types/forms/model/view-type.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewType = void 0;
/**
 * This is a TypeGen auto-generated file.
 * Any changes made to this file can be lost when this file is regenerated.
 */
var ViewType = exports.ViewType = /*#__PURE__*/function (ViewType) {
  ViewType["Table"] = "Table";
  ViewType["Form"] = "Form";
  return ViewType;
}({});

/***/ }),

/***/ "../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/ToastMessageEx.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var src_assets_ex_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/assets/ex.svg");

/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'ToastMessageEx',
  components: {
    IEx: src_assets_ex_svg__WEBPACK_IMPORTED_MODULE_0__["default"]
  }
});

/***/ }),

/***/ "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_toast-message.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "html .cog-cognito.el-message, :root:root:root:root:root .cog-cognito.el-message {\n  display: flex;\n  position: fixed;\n  left: 50%;\n  top: 20px;\n  align-items: center;\n  justify-content: space-between;\n  width: 95%;\n  min-width: 280px;\n  max-width: 500px;\n  border-width: var(--input__border-width);\n  border-style: solid;\n  border-color: white;\n  border-radius: var(--border-radius);\n  box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.1), 1px 1px 6px 0 rgba(0, 0, 0, 0.15);\n  box-sizing: border-box;\n  overflow: hidden;\n  padding-right: calc(var(--gutter) / 2);\n  padding-left: calc(var(--gutter) / 2);\n  transform: translateX(-50%);\n  transition: opacity calc(var(--speed) / 4), transform calc(var(--speed) / 2);\n}\nhtml .cog-cognito.el-message--info, :root:root:root:root:root .cog-cognito.el-message--info {\n  background-image: linear-gradient(to top, hsla(var(--background-hsl), 0.12), hsla(var(--background-hsl), 0.12) 100%), linear-gradient(to top, var(--form__background-color), var(--form__background-color) 100%), linear-gradient(to top, white, white 100%);\n}\nhtml .cog-cognito.el-message--success, :root:root:root:root:root .cog-cognito.el-message--success {\n  background-color: var(--success, #e7f9d2);\n  color: var(--success-reverse, #314d00);\n}\nhtml .cog-cognito.el-message--warning, :root:root:root:root:root .cog-cognito.el-message--warning {\n  background-color: var(--warning, yellow);\n  color: var(--warning-reverse, black);\n}\nhtml .cog-cognito.el-message--error, :root:root:root:root:root .cog-cognito.el-message--error {\n  background-color: var(--negative);\n  border-color: var(--negative-reverse);\n  color: var(--negative-reverse);\n}\nhtml .cog-cognito.el-message-fade-enter, html .cog-cognito.el-message-fade-leave-to, :root:root:root:root:root .cog-cognito.el-message-fade-enter, :root:root:root:root:root .cog-cognito.el-message-fade-leave-to {\n  opacity: 0;\n  transform: translate(-50%, -100%);\n}\nhtml .cog-cognito .el-message__icon, :root:root:root:root:root .cog-cognito .el-message__icon {\n  display: none;\n}\nhtml .cog-cognito .el-message__closeBtn, :root:root:root:root:root .cog-cognito .el-message__closeBtn {\n  flex-shrink: 0;\n  margin-right: -0.8em;\n  padding: 0.8em;\n  cursor: pointer;\n}\nhtml .cog-cognito .el-message__content, :root:root:root:root:root .cog-cognito .el-message__content {\n  margin: 1em 0;\n}", ""]);


/***/ }),

/***/ "../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/ToastMessageEx.vue?vue&type=template&id=602ba563&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c("i-ex")
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./src/assets/ex.svg":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

      /* harmony default export */ __webpack_exports__["default"] = ({
        functional: true,
        render(_h, _vm) {
          const { _c, _v, data, children = [] } = _vm;

          const {
            class: classNames,
            staticClass,
            style,
            staticStyle,
            attrs = {},
            ...rest
          } = data;

          return _c(
            'svg',
            {
              class: ["cog-icon cog-i-ex",classNames,staticClass],
              style: [style,staticStyle],
              attrs: Object.assign({"viewBox":"0 0 18 18","focusable":"false","class":"cog-icon cog-i-ex"}, attrs),
              ...rest,
            },
            children.concat([_c('defs'),_c('g',[_c('path',{attrs:{"d":"M4.2 4.2l9.6 9.6M13.8 4.2l-9.6 9.6"}})])])
          )
        }
      });
    

/***/ }),

/***/ "./src/components/EntryStatus.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntryStatus", function() { return EntryStatus; });
let EntryStatus = /*#__PURE__*/function (EntryStatus) {
  EntryStatus["Default"] = "default";
  EntryStatus["Ready"] = "ready";
  EntryStatus["Pending"] = "pending";
  return EntryStatus;
}({});

/***/ }),

/***/ "./src/components/ToastMessage.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onToastMessageRequested", function() { return onToastMessageRequested; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeAllToastMessages", function() { return closeAllToastMessages; });
/* harmony import */ var _cognitoforms_element_ui_lib_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/element-ui/lib/message.js");
/* harmony import */ var _cognitoforms_element_ui_lib_message__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_message__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_style_toast_message_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/style/_toast-message.scss");
/* harmony import */ var _ToastMessageEx_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/components/ToastMessageEx.vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_3__);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



const ExClass = vue__WEBPACK_IMPORTED_MODULE_3___default.a.extend(_ToastMessageEx_vue__WEBPACK_IMPORTED_MODULE_2__["default"]);
const toastListeners = [];
const messagesDisplayed = new Set();
/* harmony default export */ __webpack_exports__["default"] = (function (formId, options) {
  for (const callback of toastListeners) callback(formId, options.message);
  if (typeof options.message === 'string') {
    for (const messageInstance of messagesDisplayed) {
      if (messageInstance.message === options.message) return;
    }
    options.onClose = messageInstance => {
      messagesDisplayed.delete(messageInstance);
    };
  }
  options.customClass = "cog-cognito cog-".concat(formId, " ") + (options.customClass || '');
  const messageInstance = _cognitoforms_element_ui_lib_message__WEBPACK_IMPORTED_MODULE_0___default()(_objectSpread({
    duration: options.type === 'success' ? 3000 : 0,
    showClose: true
  }, options));
  if (messageInstance.showClose) {
    const exInstance = new ExClass();
    exInstance.$mount();
    document.querySelector('.el-message:last-child .el-message__closeBtn').appendChild(exInstance.$el);
  }
  if (typeof options.message === 'string') messagesDisplayed.add(messageInstance);
  return messageInstance;
});
;
function onToastMessageRequested(callback) {
  const unsubscribe = () => {
    const index = toastListeners.indexOf(callback);
    if (index >= 0) toastListeners.splice(index, 1);
  };
  toastListeners.push(callback);
  return unsubscribe;
}
function closeAllToastMessages() {
  messagesDisplayed.forEach(message => {
    if (message.showClose) message.close();
  });
}

/***/ }),

/***/ "./src/components/ToastMessageEx.vue":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/ToastMessageEx.vue?vue&type=template&id=602ba563&");
/* harmony import */ var _ToastMessageEx_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/components/ToastMessageEx.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _ToastMessageEx_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__["render"],
  _ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (true) {
  var api = __webpack_require__("../../node_modules/.pnpm/vue-hot-reload-api@2.3.4/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(__webpack_require__("vue"))
  if (api.compatible) {
    module.hot.accept()
    if (!api.isRecorded('602ba563')) {
      api.createRecord('602ba563', component.options)
    } else {
      api.reload('602ba563', component.options)
    }
    module.hot.accept("./src/components/ToastMessageEx.vue?vue&type=template&id=602ba563&", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/ToastMessageEx.vue?vue&type=template&id=602ba563&");
(function () {
      api.rerender('602ba563', {
        render: _ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__["render"],
        staticRenderFns: _ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]
      })
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))
  }
}
component.options.__file = "src/components/ToastMessageEx.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/ToastMessageEx.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ToastMessageEx_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/ToastMessageEx.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ToastMessageEx_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/ToastMessageEx.vue?vue&type=template&id=602ba563&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/ToastMessageEx.vue?vue&type=template&id=602ba563&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ToastMessageEx_vue_vue_type_template_id_602ba563___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/framework/admin/admin-form-handle.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdminFormHandle", function() { return AdminFormHandle; });
/* harmony import */ var _public_form_handle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/framework/public/form-handle.ts");
/* harmony import */ var src_util_deferred__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/util/deferred.ts");



/**
 * Admin API for interacting with a form in the admin experience
 */
class AdminFormHandle extends _public_form_handle__WEBPACK_IMPORTED_MODULE_0__["FormHandle"] {
  constructor(formId, owner, ready) {
    super(formId, owner, ready);
    this.form = null;
    this.formDef = null;
    this._formAvailable = new src_util_deferred__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
  }
  attach(form) {
    this.form = form;
    this._formAvailable.resolve();
  }
  get formAvailable() {
    return this._formAvailable.promise;
  }
  destroy() {
    super.destroy();
    this.formDef = null;
    if (this.form) {
      try {
        // Destroy the component
        this.form.$destroy();
      } catch (e) {
        // Ignore errors when destroying the form
      }

      // Remove the element from the DOM
      if (this.form.$el) this.form.$el.remove();
    }
  }
  getConfirmationMessage(actionName) {
    var _this$form;
    if (!((_this$form = this.form) !== null && _this$form !== void 0 && _this$form.actions)) return null;
    const action = this.form.actions.find(a => a.ActionName === actionName);
    const confirmationMessage = action.Confirmation.Message;
    const formEntry = this.form.entry;
    const convertedMessage = formEntry.toString(confirmationMessage);
    return convertedMessage;
  }
}

/***/ }),

/***/ "./src/framework/admin/form-view-form-handle.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormViewFormHandle", function() { return FormViewFormHandle; });
/* harmony import */ var _admin_form_handle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/framework/admin/admin-form-handle.ts");
/* harmony import */ var src_web_api_concurrent_entry_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/web-api/concurrent-entry-service.ts");
/* harmony import */ var src_components_ToastMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/components/ToastMessage.ts");
/* harmony import */ var _eventing_form_event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/framework/eventing/form-event.ts");
/* harmony import */ var _public_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/framework/public/events.ts");
/* harmony import */ var src_components_EntryStatus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/components/EntryStatus.ts");
/* harmony import */ var src_mixins_form_status__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/mixins/form-status.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../libs/types/server-types/forms/model/view-type.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_7__);








class FormViewFormHandle extends _admin_form_handle__WEBPACK_IMPORTED_MODULE_0__["AdminFormHandle"] {
  get formViewComponent() {
    const componentEl = document.querySelector('.entries-form-view');
    if (componentEl) return componentEl.__vue__;
  }
  constructor(formId, owner, ready) {
    super(formId, owner, ready);
    this.changeHandler = void 0;
    this.publicRoleUnavailable = void 0;
    this.afterSubmitEventData = void 0;
    this.isPublic = void 0;
    this.showPageBreaks = void 0;
    this.roleName = void 0;
    this.formAvailable.then(() => {
      this.on(_public_events__WEBPACK_IMPORTED_MODULE_4__["FormEvents"].AfterSubmit, event => this.afterSubmit(event));
      this.on(_public_events__WEBPACK_IMPORTED_MODULE_4__["FormEvents"].BeforeSubmit, () => this.beforeSubmit());
      this.on(_public_events__WEBPACK_IMPORTED_MODULE_4__["FormEvents"].AfterSave, () => this.setNoChanges());
      this.once(_public_events__WEBPACK_IMPORTED_MODULE_4__["FormEvents"].Ready, () => this.setNoChanges());
    });
  }
  destroy() {
    this.disableChangeDetection();
    super.destroy();
  }
  async isFormAvailable() {
    await this.formAvailable;
    return this.form.available;
  }
  hasChangeHandler() {
    return this.changeHandler !== null && this.changeHandler !== undefined;
  }
  async changeView(viewId, token) {
    await this.formAvailable;
    if (!this.form || !this.form.entryViewService) {
      return;
    }
    await this.disableChangeDetection();
    this.form.entryViewService.registerViewToken(viewId, token);
    if (this.form.entryService instanceof src_web_api_concurrent_entry_service__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      this.form.entryService.registerView(viewId, _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_7__["ViewType"].Form);
    }
    this.setNoChanges();
  }
  beforeSubmit() {
    // The event handler calls setRedirectingToView based on the view potentially being redirected to
    this.formViewComponent.$emit('before-submit');
  }
  setIsPublic(isPublic) {
    this.isPublic = isPublic;
  }
  getIsPublic() {
    return this.isPublic;
  }
  setRoleName(roleName) {
    this.roleName = roleName;
  }
  getRoleName() {
    return this.roleName;
  }
  setShowPageBreaks(showPageBreaks) {
    this.showPageBreaks = showPageBreaks;
  }
  getShowPageBreaks() {
    return this.showPageBreaks;
  }
  setRedirectingToView(redirecting) {
    this.form.redirectingToEntryView = redirecting;
  }
  async afterSubmit(event) {
    // We don't want to show save changes dialog if the entry is submitted
    await this.disableChangeDetection();
    this.setNoChanges();
    this.afterSubmitEventData = event.data;
    this.formViewComponent.$emit('form-view-submitted');
  }
  showConfirmationMessage() {
    const actionName = this.afterSubmitEventData.entry.Entry.Action;
    const action = this.form.actions.find(a => a.ActionName === actionName);
    const confirmationMessage = action.Confirmation.Message;
    const redirectUrl = action.Confirmation.RedirectUrl;
    const formEntry = this.form.entry;
    const convertedMessage = formEntry.toString(confirmationMessage);
    if (confirmationMessage && !redirectUrl) this.formViewComponent.showConfirmationMessage(convertedMessage);
  }
  showConfirmationPage() {
    this.form.showConfirmationPage(this.afterSubmitEventData.documents);
  }
  setNoChanges() {
    if (this.formViewComponent) {
      this.formViewComponent.$emit('set-no-changes');
    }
  }
  async addChangesDetected(handler) {
    await this.disableChangeDetection();
    this.changeHandler = handler;
    await this.enableChangeDetection();
  }
  async enableChangeDetection() {
    await this.formAvailable;
    if (this.changeHandler) {
      this.form.formsModel.model.afterPropertySet.subscribe(this.changeHandler);
      this.form.formsModel.model.listChanged.subscribe(this.changeHandler);
    }
  }
  async disableChangeDetection() {
    await this.formAvailable;

    // Clear the list of subscriptions
    this.form.formsModel.model.afterPropertySet.clear();
    this.form.formsModel.model.listChanged.clear();
    this.setNoChanges();
  }
  activityPerformed() {
    this.emit(new _eventing_form_event__WEBPACK_IMPORTED_MODULE_3__["FormEvent"](_public_events__WEBPACK_IMPORTED_MODULE_4__["FormEvents"].ActivityPerformed));
  }
  async setCorrectFormAvailability(isPublic) {
    await this.formAvailable;
    if (!isPublic && !this.form.available) {
      this.publicRoleUnavailable = true;
      this.form.available = true;
    }
    // If we were previously in a non-public form view and switch to the
    // public role, respect availability settings
    else if (isPublic && this.form.available && this.publicRoleUnavailable) {
      this.form.available = false;
    }
  }
  async setNewEntry(roleName, isPublic) {
    // Wait for the form to be available and disable change detection
    await this.disableChangeDetection();
    const entryJson = {
      Entry: {
        Role: roleName,
        User: this.form.session.userInfo,
        Status: 'Incomplete'
      }
    };
    this.form.entryStatus = src_components_EntryStatus__WEBPACK_IMPORTED_MODULE_5__["EntryStatus"].Pending;
    this.form.startingPage = 1;
    const entryInstance = await this.form.formsModel.constructEntry(entryJson, true);
    this.form.entry.Entry.LastPageViewed = null;
    this.form.entry.Entry.Role = roleName;
    await this.setCorrectFormAvailability(isPublic);
    await this.reset(entryInstance, entryJson);

    // Re-enable change detection
    await this.enableChangeDetection();
    await this.form.$nextTick();
    this.form.entryStatus = src_components_EntryStatus__WEBPACK_IMPORTED_MODULE_5__["EntryStatus"].Ready;
    this.activityPerformed();
  }
  reset(entry, initialEntryJson) {
    if (this.form.quantityService) {
      const hasInitialState = !entry.meta.isNew && entry.Entry.Status !== 'Incomplete';
      this.form.quantityService.reset({
        hasInitialState: hasInitialState,
        root: entry
      });
    }
    if (this.form.entryService instanceof src_web_api_concurrent_entry_service__WEBPACK_IMPORTED_MODULE_1__["default"]) this.form.entryService.updateInitialEntryJson(initialEntryJson);

    // Set the current action to the first allowed action, if any
    if (this.form.allowedActions.length) this.form.entry.Entry.Action = this.form.allowedActions[0].ActionName;else this.form.entry.Entry.Action = null;
    Object(src_components_ToastMessage__WEBPACK_IMPORTED_MODULE_2__["closeAllToastMessages"])();
    return new Promise(resolve => {
      this.form.withTransitionsDisabled(async form => {
        form.log.registerEntry(entry);
        form.showConfirmation = false;
        form.showReceipt = false;
        form.submitStatus = src_mixins_form_status__WEBPACK_IMPORTED_MODULE_6__["FormStatus"].Default;
        form.pageNumber = this.form.startingPage;
        form.readonly = form.$source.readonly = form.entry.Form_ReadOnly;
        if (form.quantityService) await form.quantityService.refresh();
        form.entry = entry;
        await this.emit(new _eventing_form_event__WEBPACK_IMPORTED_MODULE_3__["FormEvent"](_public_events__WEBPACK_IMPORTED_MODULE_4__["FormEvents"].ResetEntry));
        resolve(entry);
      });
    });
  }
}

/***/ }),

/***/ "./src/framework/admin/task-dashboard-form-handle.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TaskDashboardFormHandle", function() { return TaskDashboardFormHandle; });
/* harmony import */ var _admin_form_handle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/framework/admin/admin-form-handle.ts");
/* harmony import */ var src_framework_model_extensions_form_entry_extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/model/extensions/form-entry-extensions.ts");
/* harmony import */ var _eventing_form_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/framework/eventing/form-event.ts");
/* harmony import */ var _public_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/framework/public/events.ts");
/* harmony import */ var src_components_ToastMessage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/components/ToastMessage.ts");
/* harmony import */ var src_framework_payment_order_builder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/framework/payment/order-builder.ts");
/* harmony import */ var src_web_api_concurrent_entry_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/web-api/concurrent-entry-service.ts");
/* harmony import */ var src_web_api_entry_views_entry_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/web-api/entry-views/entry-set.ts");
/* harmony import */ var src_util_deferred__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/util/deferred.ts");
/* harmony import */ var src_components_EntryStatus__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/components/EntryStatus.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../libs/types/server-types/forms/model/view-type.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var src_web_api_entry_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/web-api/entry-service.ts");













/**
 * Admin API for interacting with a form on the task dashboard
 */
class TaskDashboardFormHandle extends _admin_form_handle__WEBPACK_IMPORTED_MODULE_0__["AdminFormHandle"] {
  constructor(formId, owner, ready) {
    super(formId, owner, ready);
    this.entrySet = void 0;
    this._entrySetAvailable = new src_util_deferred__WEBPACK_IMPORTED_MODULE_8__["Deferred"]();
    this.changeHandler = void 0;
    this.on(_public_events__WEBPACK_IMPORTED_MODULE_3__["FormEvents"].AfterSubmit, event => this.augmentSubmitEvent(event));
  }
  get entrySetAvailable() {
    return this._entrySetAvailable.promise;
  }
  get entry() {
    return this.form ? this.form.entry : null;
  }
  set entry(value) {
    this.form.entry = value;
  }
  async addChangesDetected(handler) {
    this.changeHandler = handler;
    await this.enableChangeDetection();
  }
  async enableChangeDetection() {
    await this.formAvailable;
    if (this.changeHandler) {
      this.form.formsModel.model.afterPropertySet.subscribe(this.changeHandler);
      this.form.formsModel.model.listChanged.subscribe(this.changeHandler);
    }
  }
  async disableChangeDetection() {
    await this.formAvailable;

    // Clear the list of subscriptions
    this.form.formsModel.model.afterPropertySet.clear();
    this.form.formsModel.model.listChanged.clear();
  }
  async getEntryJson(entryKey) {
    await this.formAvailable;
    await this.entrySetAvailable;
    return this.entrySet.getEntryJson(entryKey, true);
  }
  async setExistingEntry(entryKey, roleId) {
    const entryJson = await this.getEntryJson(entryKey);
    entryJson.Entry.User = this.form.session.userInfo;
    const roleName = this.form.session.workflowRoles.find(workflowRole => workflowRole.Id === roleId).Name;
    entryJson.Entry.Role = roleName;
    return this.setEntry(entryJson);
  }
  async setEntry(entryJson) {
    // Wait for the form to be available and disable change detection
    await this.disableChangeDetection();
    this.form.entryStatus = src_components_EntryStatus__WEBPACK_IMPORTED_MODULE_9__["EntryStatus"].Pending;
    const entryInstance = await this.form.formsModel.constructEntry(entryJson, true);
    if (!entryInstance.meta.isNew && Object(src_framework_model_extensions_form_entry_extensions__WEBPACK_IMPORTED_MODULE_1__["isEntryWithOrder"])(entryInstance)) {
      // Rebuild existing orders to ensure the order is up-to-date
      Object(src_framework_payment_order_builder__WEBPACK_IMPORTED_MODULE_5__["rebuildOrder"])(entryInstance, entryInstance.Order);
    }
    await this.reset(entryInstance, entryJson);

    // Wait for lookups to load before detecting changes
    await this.form.entryViewService.loadingComplete;

    // Re-enable change detection
    await this.enableChangeDetection();
    await this.form.$nextTick();
    this.form.entryStatus = src_components_EntryStatus__WEBPACK_IMPORTED_MODULE_9__["EntryStatus"].Ready;
  }
  async changeView(viewId, token) {
    let refresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    await this.formAvailable;
    if (!this.form || !this.form.entryViewService) {
      return;
    }
    this.form.entryViewService.registerViewToken(viewId, token);
    if (this.form.entryService instanceof src_web_api_concurrent_entry_service__WEBPACK_IMPORTED_MODULE_6__["default"]) this.form.entryService.registerView(viewId, _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_10__["ViewType"].Form);
    this.entrySet = await src_web_api_entry_views_entry_set__WEBPACK_IMPORTED_MODULE_7__["default"].get(this.form.entryViewService, this.form.formsModel.entryTypeName, viewId);
    this._entrySetAvailable.resolve(this.entrySet);
    if (refresh) this.entrySet.refresh();
  }
  reset(entry, initialEntryJson) {
    if (this.form.quantityService) {
      const hasInitialState = !entry.meta.isNew && entry.Entry.Status !== 'Incomplete';
      this.form.quantityService.reset({
        hasInitialState: hasInitialState,
        root: entry
      });
    }
    if (this.form.entryService instanceof src_web_api_concurrent_entry_service__WEBPACK_IMPORTED_MODULE_6__["default"]) this.form.entryService.updateInitialEntryJson(initialEntryJson);

    // Set the current action to the first allowed action, if any
    if (this.form.allowedActions.length) this.form.entry.Entry.Action = this.form.allowedActions[0].ActionName;else this.form.entry.Entry.Action = null;
    Object(src_components_ToastMessage__WEBPACK_IMPORTED_MODULE_4__["closeAllToastMessages"])();
    return new Promise(resolve => {
      this.form.withTransitionsDisabled(async () => {
        this.entry = entry;
        this.form.log.registerEntry(entry);
        await this.emit(new _eventing_form_event__WEBPACK_IMPORTED_MODULE_2__["FormEvent"](_public_events__WEBPACK_IMPORTED_MODULE_3__["FormEvents"].ResetEntry));
        if (this.form.quantityService) await this.form.quantityService.refresh();
        resolve(entry);
      });
    });
  }
  async performAction(action) {
    await this.formAvailable;
    const submission = this.form.submit({
      action
    });
    submission.then(res => {
      if (res && res.status === src_web_api_entry_service__WEBPACK_IMPORTED_MODULE_11__["SubmissionResultStatus"].Success) this.reset(this.entry, res.entry);
    });
    return submission;
  }
  getLocalizedError(resourceMessage) {
    return this.form.$resource(resourceMessage);
  }
  augmentSubmitEvent(event) {
    const actionName = event.data.entry.Entry.Action;
    event.data.convertedMessage = this.getConfirmationMessage(actionName);
  }
}

/***/ }),

/***/ "./src/framework/forms-model.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FORM_ENTRY_TYPE_NAME", function() { return FORM_ENTRY_TYPE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_TYPE_NAME", function() { return ORDER_TYPE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormsModel", function() { return FormsModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "importOptionalModule", function() { return importOptionalModule; });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../libs/vuemodel/lib/index.js");
/* harmony import */ var _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _model_serialization_converters_date_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/framework/model/serialization/converters/date-converter.ts");
/* harmony import */ var _model_serialization_converters_time_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/framework/model/serialization/converters/time-converter.ts");
/* harmony import */ var _model_serialization_converters_order_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/framework/model/serialization/converters/order-converter.ts");
/* harmony import */ var _model_serialization_converters_enum_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/framework/model/serialization/converters/enum-converter.ts");
/* harmony import */ var _model_serialization_converters_ignore_circular_reference_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/framework/model/serialization/converters/ignore-circular-reference-converter.ts");
/* harmony import */ var _model_serialization_converters_initialize_back_references_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/framework/model/serialization/converters/initialize-back-references-converter.ts");
/* harmony import */ var _model_serialization_injectors_storage_property_injector__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/framework/model/serialization/injectors/storage-property-injector.ts");
/* harmony import */ var _model_extensions_address_extensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/framework/model/extensions/address-extensions.ts");
/* harmony import */ var _model_extensions_name_extensions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/framework/model/extensions/name-extensions.ts");
/* harmony import */ var _model_extensions_signature_extensions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/framework/model/extensions/signature-extensions.ts");
/* harmony import */ var _model_serialization_converters_calculation_converter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/framework/model/serialization/converters/calculation-converter.ts");
/* harmony import */ var _model_serialization_converters_date_time_converter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/framework/model/serialization/converters/date-time-converter.ts");
/* harmony import */ var _model_serialization_converters_lookup_converter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./src/framework/model/serialization/converters/lookup-converter.ts");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _model_serialization_converters_yesno_converter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("./src/framework/model/serialization/converters/yesno-converter.ts");
/* harmony import */ var _model_serialization_converters_entry_extension_converter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("./src/framework/model/serialization/converters/entry-extension-converter.ts");
/* harmony import */ var _model_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("./src/framework/model/core.ts");
/* harmony import */ var _model_extensions_payment_extensions__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("./src/framework/model/extensions/payment-extensions.ts");
/* harmony import */ var _model_extensions_entity_init_extensions__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("./src/framework/model/extensions/entity-init-extensions.ts");
/* harmony import */ var _model_extensions_lookup_field_lookup_model_extension__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("./src/framework/model/extensions/lookup-field/lookup-model-extension.ts");
/* harmony import */ var _model_serialization_converters_ignore_fileupload_converter__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("./src/framework/model/serialization/converters/ignore-fileupload-converter.ts");
/* harmony import */ var _model_serialization_converters_ignore_signature_properties_converter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("./src/framework/model/serialization/converters/ignore-signature-properties-converter.ts");
/* harmony import */ var _model_extensions_workflow_action_extensions__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("./src/framework/model/extensions/workflow-action-extensions.ts");
/* harmony import */ var _model_serialization_converters_entry_meta_converter__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__("./src/framework/model/serialization/converters/entry-meta-converter.ts");
/* harmony import */ var i18n_iso_countries__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__("../../node_modules/.pnpm/i18n-iso-countries@7.5.0/node_modules/i18n-iso-countries/index.js");
/* harmony import */ var i18n_iso_countries__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(i18n_iso_countries__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var src_util_model__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__("./src/util/model.ts");




























const FORM_ENTRY_TYPE_NAME = 'Forms.FormEntry';
const ORDER_TYPE_NAME = 'Payment.Order';
class FormsModel {
  constructor(entryTypeName, modelOptions, locale, localeResources, cultureInfo) {
    this.entryTypeName = void 0;
    this.modelOptions = void 0;
    this.lookupValueResolver = void 0;
    this.model = void 0;
    // Prevent Vue from making the model options observable, since it will have a cascading effect
    if (modelOptions) Object(_cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1__["preventVueObservability"])(modelOptions);
    this.entryTypeName = entryTypeName;
    this.modelOptions = modelOptions;
    const enumValues = FormsModel.captureEnumValues(modelOptions);
    const model = this.model = new _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default.a(FormsModel.preprocessOptions(modelOptions, locale, localeResources, cultureInfo), {
      autogeneratePropertyLabels: false,
      maxEventScopeDepth: 100,
      maxExitingEventScopeTransferCount: 500
    });
    this.configureSerialization(modelOptions);
    FormsModel.applyCustomTypeExtensions(model, {
      Address: _model_extensions_address_extensions__WEBPACK_IMPORTED_MODULE_9__["AddressExtensions"],
      Name: _model_extensions_name_extensions__WEBPACK_IMPORTED_MODULE_10__["NameExtensions"],
      Signature: _model_extensions_signature_extensions__WEBPACK_IMPORTED_MODULE_11__["SignatureExtensions"]
    });
    if (!modelOptions.$disableWorkflowActions) Object(_model_extensions_workflow_action_extensions__WEBPACK_IMPORTED_MODULE_24__["applyWorkflowActionExtensions"])(this, this.resolveType(this.entryTypeName), FormsModel.captureActionData(this.modelOptions));
    Object(_model_extensions_payment_extensions__WEBPACK_IMPORTED_MODULE_19__["applyPaymentExtensions"])(this, this.resolveType(this.entryTypeName));
    Object(_model_extensions_entity_init_extensions__WEBPACK_IMPORTED_MODULE_20__["applyEntityInitExtensions"])(this);
    this.model.ready(() => FormsModel.postprocessModel(model, enumValues));
  }

  /**
   * The global config object shared by form models
   * NOTE: This is currently only needed to provide the `serverTimeOffset` required by the `Cognito_now` export used in model extensions
   */

  /**
   * Detect model options that are types that appear to be enums and capture their enum values
   */
  static captureEnumValues(modelOptions) {
    return Object.keys(modelOptions).reduce((lookup, key) => {
      const value = modelOptions[key];
      if (typeof value === 'object' && value.$enum) lookup[key] = value.$enum;
      return lookup;
    }, {});
  }

  /**
   * Capture the workflow actions configuration for the form from the '$data' field on each WorkflowAction sub-type
   */
  static captureActionData(modelOptions) {
    return Object.keys(modelOptions).reduce((lookup, key) => {
      const value = modelOptions[key];
      if (typeof value === 'object' && value.$extends && value.$extends === 'Forms.WorkflowAction') {
        lookup[key] = value.$data;
      }
      return lookup;
    }, {});
  }

  /**
   * Preprocess model options before passing them to the model constructor
   */
  static preprocessOptions(options, locale, localeResources, cultureInfo) {
    const modelOptions = options;
    // Set the 'Cognito.config' reference to a shared config object
    modelOptions.$namespace['config'] = FormsModel.config;
    modelOptions.$namespace['session'] = {
      utcOffset: options.$utcOffset
    };

    // Copy the resources object for internal use by the model
    modelOptions.$resources = {
      [locale]: Object.assign({}, localeResources)
    };

    // Parse the culture object
    if (cultureInfo) modelOptions.$culture = _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default.a.CultureInfo.parse(cultureInfo);
    return modelOptions;
  }

  /**
   * Configures the given model's serializer
   * @param model The model to configure
   */
  configureSerialization(modelOptions) {
    const model = this.model;
    const lookupMappings = [];
    for (const [typeName, typeDef] of Object.entries(modelOptions)) {
      if (!typeName.startsWith('$')) {
        if (typeDef.$storageProperties) {
          for (const alias in typeDef.$storageProperties) model.serializer.registerPropertyAlias(typeName, alias, typeDef.$storageProperties[alias]);
        }
        for (const [propName, propDef] of Object.entries(modelOptions)) {
          if (typeof propDef === 'object' && propDef.$lookupFieldInfo) lookupMappings.push({
            typeName,
            propName,
            viewId: propDef.$lookupFieldInfo.viewId
          });
        }
      }
    }
    model.serializer.registerValueResolver(this.initialValueResolver.bind(this));

    // Order matters
    model.serializer.registerPropertyConverter(new _model_serialization_converters_entry_meta_converter__WEBPACK_IMPORTED_MODULE_25__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_ignore_signature_properties_converter__WEBPACK_IMPORTED_MODULE_23__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_ignore_fileupload_converter__WEBPACK_IMPORTED_MODULE_22__["default"](this.entryTypeName));
    model.serializer.registerPropertyConverter(new _model_serialization_converters_date_converter__WEBPACK_IMPORTED_MODULE_2__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_yesno_converter__WEBPACK_IMPORTED_MODULE_16__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_time_converter__WEBPACK_IMPORTED_MODULE_3__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_date_time_converter__WEBPACK_IMPORTED_MODULE_13__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_calculation_converter__WEBPACK_IMPORTED_MODULE_12__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_ignore_circular_reference_converter__WEBPACK_IMPORTED_MODULE_6__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_initialize_back_references_converter__WEBPACK_IMPORTED_MODULE_7__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_lookup_converter__WEBPACK_IMPORTED_MODULE_14__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_order_converter__WEBPACK_IMPORTED_MODULE_4__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_entry_extension_converter__WEBPACK_IMPORTED_MODULE_17__["default"]());
    model.serializer.registerPropertyConverter(new _model_serialization_converters_enum_converter__WEBPACK_IMPORTED_MODULE_5__["default"]());
    model.serializer.registerPropertyInjector(FORM_ENTRY_TYPE_NAME, new _model_serialization_injectors_storage_property_injector__WEBPACK_IMPORTED_MODULE_8__["default"]());
  }

  /**
   * Applies custom type extensions for any of the given types that are in the given model
   * @param model The model to extend
   * @param typeExtensions The custom type extensions to apply
   */
  static applyCustomTypeExtensions(model, typeExtensions) {
    // Apply custom type extensions for types that are included in the model
    Object.keys(typeExtensions).forEach(typeName => {
      const type = model.types[typeName];
      if (type) {
        const typeExtension = typeExtensions[typeName];
        type.extend(typeExtension);
      }
    });
  }

  /**
   * Perform post-processing logic on the model after it has been created and is ready
   */
  static postprocessModel(model, enumValues) {
    // Preprocess enum types
    Object.keys(enumValues).forEach(enumTypeName => {
      const enumJsType = model.getJsType(enumTypeName);
      if (enumJsType && enumJsType['meta']) {
        const enumType = enumJsType['meta'];
        // Store the enum lookup on the type
        enumType.enum = enumValues[enumTypeName];
        // Override the enum's get function to ensure that enums are created
        const originalGet = enumType.get;
        enumType.get = _model_core__WEBPACK_IMPORTED_MODULE_18__["getEnumInstance"].bind(null, enumType, originalGet);
      }
    });
  }

  /**
   * Creates a new forms model using the given entry type and model options
   * @param entryTypeName The full type name of the root entry type
   * @param options The model options object
   */
  static async createModel(entryTypeName, options) {
    // Ensure VueModel is installed
    vue__WEBPACK_IMPORTED_MODULE_0___default.a.use(_cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default.a);
    options.$locale = options.$locale || 'en';
    const locale = options.$locale;
    const cultureInfo = options.$culture;
    let localeResources = options.$locale;

    // Load resources
    if (typeof options.$locale !== 'object') localeResources = (await __webpack_require__("./src/localization/resources lazy recursive ^\\.\\/.*$")("./".concat(locale))).default;
    if (Object.keys(options).includes('Address')) {
      const countriesModule = (await __webpack_require__("./src/localization/countries lazy recursive ^\\.\\/.*\\.json$")("./".concat(locale, ".json"))).default;
      i18n_iso_countries__WEBPACK_IMPORTED_MODULE_26___default.a.registerLocale(countriesModule);
    }

    // Globally define resources for the model's locale
    if (locale && localeResources && !FormsModel.definedLocales.has(locale)) {
      _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default.a.defineResources(locale, localeResources);
      FormsModel.definedLocales.add(locale);
    }
    return new FormsModel(entryTypeName, options, locale, localeResources, cultureInfo);
  }

  /**
   * Creates an instance of the model's root form entry type
   * @param state The property values to initialize the object with
   */
  async constructEntry() {
    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (reset) {
      const id = Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_15__["getIdFromState"])(this.resolveType(this.entryTypeName), state);
      this.resetEntry(this.entryTypeName, id);
    }
    const entry = await this.constructAsync(this.entryTypeName, state, reset);
    if (!this.modelOptions.$disableWorkflowActions) entry.initDefaultAction();
    return entry;
  }
  constructEntryMeta() {
    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const entryType = this.resolveType(this.entryTypeName);
    const entryMetaType = entryType.getProperty('Entry').propertyType;
    return entryMetaType.meta.create(state);
  }
  resetEntry(type, id) {
    // Get the model type with the given name
    const modelType = this.resolveType(type);
    if (!modelType) throw new Error("Could not construct instance of type '".concat(type, "'. Type not found."));
    if (id) {
      const instance = modelType.get(id);
      if (instance) {
        Object(src_util_model__WEBPACK_IMPORTED_MODULE_27__["unregisterEntity"])(instance);
        if (instance.Order) Object(src_util_model__WEBPACK_IMPORTED_MODULE_27__["unregisterEntity"])(instance.Order);
      }
    }
  }

  /**
   * Constructs a new entity of the given type asynchronously
   * Can be used to create entities with lookup references.
   * @param type The type of entity to construct
   * @param state The optional state to assign to the entity
   */
  async constructAsync(type) {
    let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // Get the model type with the given name
    const modelType = this.resolveType(type);
    if (!modelType) throw new Error("Could not construct instance of type '".concat(type, "'. Type not found."));
    const id = Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_15__["getIdFromState"])(modelType, state);
    if (id) {
      const instance = modelType.get(id);
      if (instance) {
        if (reset) {
          Object(src_util_model__WEBPACK_IMPORTED_MODULE_27__["unregisterEntity"])(instance);
        } else {
          await instance.update(state);
          return Promise.resolve(instance);
        }
      }
    }
    return modelType.create(state);
  }
  resolveType(type) {
    return this.model.types[type];
  }

  /**
   * Constructs a new entity of the given type
   * Should only be used if you know the entity in question has no lookup references.
   * @param type The type of entity to construct
   * @param state The optional state to assign to the entity
   * @deprecated This method should only be used if it is not possible to use `constructAsync`
   */
  construct(type) {
    let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let reset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // Get the model type with the given name
    const modelType = this.resolveType(type);
    if (!modelType) throw new Error("Could not construct instance of type '".concat(type, "'. Type not found."));
    const id = Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_15__["getIdFromState"])(modelType, state);
    if (id) {
      const instance = modelType.get(id);
      if (instance) {
        if (reset) {
          Object(src_util_model__WEBPACK_IMPORTED_MODULE_27__["unregisterEntity"])(instance);
        } else {
          instance.update(state);
          return instance;
        }
      }
    }

    // Call the type's `createSync()` factory method
    return modelType.createSync(state);
  }
  initialValueResolver(instance, property, value) {
    // Resolve lookup data
    if (this.lookupValueResolver) return this.lookupValueResolver(instance, property, value);
  }
  format(value, format) {
    return typeof value === 'number' ? this.model.formatNumber(value, format) : this.model.formatDate(value, format);
  }
  parse(type, value, format) {
    if (type === Number) {
      return this.model.parseNumber(value, format);
    } else {
      return this.model.parseDate(value, format ? [format] : null);
    }
  }
  expandDateFormat(format) {
    return this.model.expandDateFormat(format);
  }
  get version() {
    return this.modelOptions.$version;
  }
  enableLookups(entryViewService, getLookupManager, getCascadeFilterManager, log) {
    let pseudoLoadDeleted = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    let suppressLookupLoadingErrors = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
    if (!this.lookupValueResolver) this.lookupValueResolver = Object(_model_extensions_lookup_field_lookup_model_extension__WEBPACK_IMPORTED_MODULE_21__["extendModelWithLookups"])(this, this.modelOptions, entryViewService, getLookupManager, getCascadeFilterManager, log, pseudoLoadDeleted, suppressLookupLoadingErrors);
  }
  overrideResource(resourceName, value) {
    this.model.$resources[this.model.$locale][resourceName] = value;
  }
}

/**
 * Provide optional modules available to the form's model definition
 * @param name The name of the module to import
 * @param pendingModules The list of modules that are currently pending
 */
FormsModel.definedLocales = new Set();
FormsModel.config = {};
async function importOptionalModule(name) {
  let pendingModules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  // Async load the module
  let modulePromise;
  switch (name) {
    case 'time-span':
      modulePromise = __webpack_require__.e(/* import() | time-span */ "time-span").then(__webpack_require__.bind(null, "./src/framework/model/time-span.ts"));
      break;
    case 'order-builder':
      modulePromise = Promise.resolve(/* import() */).then(__webpack_require__.bind(null, "./src/framework/payment/order-builder.ts"));
      break;
    default:
      throw new Error('Cannot dynamically load module \'' + name + '\'.');
  }
  if (pendingModules) {
    // Store the requested module promise so that we can detect when it has loaded
    pendingModules.push(modulePromise);
  }

  // Return the module promise to the caller
  return modulePromise;
}

/***/ }),

/***/ "./src/framework/logging/error.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrappedError", function() { return WrappedError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasInnerError", function() { return hasInnerError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureError", function() { return ensureError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CError", function() { return CError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FriendlyError", function() { return FriendlyError; });
/**
 * An Error subclass which wraps an underlying error object of unknown type.
 */
class WrappedError extends Error {
  constructor(message, underlyingError) {
    super(message);
    this.underlyingError = void 0;
    this.underlyingError = underlyingError;
  }
}
function hasInnerError(e) {
  return e instanceof Error && e['innerError'] && e['innerError'] instanceof Error;
}

/**
 * Takes in an "error-like" object and returns an Error object
 * - If the input is an Error object, it is returned
 * - If the input is a non-zero length string, a new Error is constructed with the input as the message
 * - Otherwise, a new Error object is contructed with a default message
 * @param err The input object, which may or may not be an Error object
 * @param defaultErrorMessage The default message to use when constructing an Error
 * @returns An Error object
 */
function ensureError(err) {
  let defaultErrorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Unknown error';
  if (err instanceof Error) return err;else if (typeof err === 'string' && err.length > 0) return new Error(err);else return new WrappedError(defaultErrorMessage || 'Unknown error', err);
}

/**
	 * An extension of Error, allows for adding additional properties
	 * to the error object and a flag denoting whether or not to track
	 * the error
	 */
class CError extends Error {
  constructor(message) {
    let log = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let name = arguments.length > 2 ? arguments[2] : undefined;
    let stack = arguments.length > 3 ? arguments[3] : undefined;
    let additionalProperties = arguments.length > 4 ? arguments[4] : undefined;
    super(message);
    this.name = void 0;
    this.message = void 0;
    // An error is not logged when `log` is exactly false
    this.log = void 0;
    this.stack = void 0;
    this.additionalProperties = void 0;
    this.message = message;
    this.log = log;
    this.name = name || this.name;
    this.stack = stack || this.stack;
    this.additionalProperties = additionalProperties;
  }
}

/**
	 * A version of CError that by default, doesn't log the error
	 * to the server. Used for errors consumed by the end-user.
	 */
class FriendlyError extends CError {
  constructor(message, name) {
    super(message, false, name);
  }
}

/***/ }),

/***/ "./src/framework/logging/log.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Log; });
/* harmony import */ var core_js_modules_esnext_string_replace_all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/esnext.string.replace-all.js");
/* harmony import */ var core_js_modules_esnext_string_replace_all_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_string_replace_all_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/framework/logging/error.ts");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


const ignoredExceptions = new Set(['ResizeObserver loop limit exceeded', 'ResizeObserver loop completed with undelivered notifications.', 'Script error.']);
const FAUX_KEY = 'faux-key';
class Log {
  constructor(session) {
    // -------------- Properties --------------
    this.entry = void 0;
    this.session = void 0;
    this.session = session;
    if (!this.isEnabled) return;
    if (!Log.appInsights) {
      Log.appInsights = Promise.all(/* import() | app-insights */[__webpack_require__.e("vendors~app-insights"), __webpack_require__.e("app-insights")]).then(__webpack_require__.bind(null, "./src/framework/logging/app-insights.ts")).then(mod => {
        const AppInsightsCtor = mod.default;
        const appInsights = new AppInsightsCtor(FAUX_KEY, '/svc/log');
        appInsights.addTelemetryInitializer(Log.ignoreUselessErrors.bind(this));
        appInsights.addTelemetryInitializer(function ignoreItemsWithRealKey(item) {
          // when the admin site's global app insights instance is available, sometimes we
          // get telemetry items with the real instrumentation key
          return item.iKey === FAUX_KEY;
        });

        // append metadata to telemetry
        appInsights.addTelemetryInitializer(item => {
          if (item.baseData) {
            item.baseData.properties = item.baseData.properties || {};
            Object.assign(item.baseData.properties, this.metadata);
          }
        });

        // This logic is repeated in CleanseTelemetryProcessor.cs and ai.js (and ai.min.js)
        appInsights.addTelemetryInitializer(function cleanseUrls(item) {
          if (item.baseType === 'PageviewData') {
            item.baseData.uri = Log.cleanseUrl(item.baseData.uri);
          }
          if (item.baseType === 'RemoteDependencyData') {
            item.baseData.name = Log.cleanseUrl(item.baseData.name);
            item.baseData.target = Log.cleanseUrl(item.baseData.target);
          }
        });
        appInsights.addTelemetryInitializer(function filterSuccessful(item) {
          if (item.baseType === 'RemoteDependencyData') {
            const data = item.baseData;
            if (data) {
              if (data.responseCode.toString().startsWith('2') && data.duration < 10000) return false;
              // ignore GA requests (likely caused by blocker extensions)
              else if (data.name.includes('google-analytics.com/g/collect') || data.name.includes('analytics.google.com/g/collect')) return false;
            }
          }
          return true;
        });
        return appInsights;
      });
    }

    // eslint-disable-line no-use-before-define
    vue__WEBPACK_IMPORTED_MODULE_1___default.a.config.errorHandler = Log.onError;
    vue__WEBPACK_IMPORTED_MODULE_1___default.a.config.warnHandler = Log.onWarning;
  }
  // -------------- Computed --------------
  get isEnabled() {
    return this.session.flags.log;
  }
  get organizationId() {
    return this.session.organizationId;
  }
  get formName() {
    return this.entry && this.entry.Form ? this.entry.Form.InternalName : null;
  }
  get formId() {
    return this.session.formId;
  }
  get entryId() {
    return this.entry ? this.entry.Id : null;
  }

  // -------------- Methods --------------

  error(error, additionalProperties) {
    const cError = error;
    if (additionalProperties) {
      cError.additionalProperties = _objectSpread(_objectSpread({}, cError.additionalProperties), additionalProperties);
    }
    Log.error(error, this);
  }
  warn(message, trace, additionalProperties) {
    Log.warn(message, this, trace, additionalProperties);
  }
  async pageLoad() {
    if (!this.isEnabled) return;
    (await Log.appInsights).pageView();
  }
  registerEntry(entry) {
    this.entry = entry;
  }
  customEvent(eventName, additionalProperties) {
    Log.customEvent(eventName, this, additionalProperties);
  }
  metric(metricName, amount, additionalProperties) {
    Log.metric(metricName, amount, this, additionalProperties);
  }
  trace(message, additionalProperties) {
    Log.trace(message, this, additionalProperties);
  }
  async startTrackEvent(name) {
    var _await$Log$appInsight;
    (_await$Log$appInsight = await Log.appInsights) === null || _await$Log$appInsight === void 0 ? void 0 : _await$Log$appInsight.startTrackEvent(name);
  }
  async stopTrackEvent(name, properties, measurements) {
    var _await$Log$appInsight2;
    (_await$Log$appInsight2 = await Log.appInsights) === null || _await$Log$appInsight2 === void 0 ? void 0 : _await$Log$appInsight2.stopTrackEvent(name, properties, measurements);
  }
  static async error(error, log) {
    console.error(error.message, error);

    // Some errors are only for the end-user. A more detailed error was probably already logged
    if (!log || !log.isEnabled || error.log === false) return;
    (await Log.appInsights).log(error, error.additionalProperties);

    // Prevent the error from being logged again by additional throws or subsequent calls to `logError`
    error.log = false;
  }
  static async warn(message, log, trace, additionalProperties) {
    if (!log || !log.isEnabled) return;
    const error = new _error__WEBPACK_IMPORTED_MODULE_2__["CError"](message);
    error.stack = trace;
    (await Log.appInsights).log(error, _objectSpread({
      isWarning: 'true'
    }, additionalProperties));
    console.warn(error);
  }
  static async customEvent(eventName, log, additionalProperties) {
    if (!log || !log.isEnabled) return;
    (await Log.appInsights).logCustomEvent(eventName, additionalProperties);
  }
  static async metric(metricName, amount, log, additionalProperties) {
    if (!log || !log.isEnabled) return;
    (await Log.appInsights).logMetric(metricName, amount, additionalProperties);
  }
  static async trace(message, log, additionalProperties) {
    if (!log || !log.isEnabled) return;
    (await Log.appInsights).logTrace(message, additionalProperties);
  }
  get metadata() {
    return {
      'OrganizationId': this.organizationId,
      'FormName': this.formName,
      'FormId': this.formId,
      'EntryId': this.entryId,
      'FormClient': true
    };
  }
  static cleanseUrl(url) {
    if (!url.toLowerCase().includes('http') || url === '') {
      return url;
    }

    // Replace all sensitive information before reporting to AI
    for (let i = 0; i < this.patterns.length; i++) {
      url = url.replaceAll(this.patterns[i], this.blankOut);
    }
    return url;
  }
  static ignoreUselessErrors(item) {
    if (item.baseType === 'ExceptionData' && ignoredExceptions.has(item.data.message)) {
      return false;
    } else {
      return true;
    }
  }
  static getInstance(obj) {
    return obj ? obj.$root.log : null;
  }
  static onError(error, $vm) {
    if (ignoredExceptions.has(error.message)) return;
    Log.error(error, Log.getInstance($vm));
  }
  static onWarning(message, $vm, trace) {
    Log.warn(message, Log.getInstance($vm), trace);
  }
}
Log.appInsights = void 0;
Log.patterns = [/(\?|&)token(=[^&]*)?|^token(=[^&]*)?&?/ig,
// Remove session tokens
/[=#:](.{44})[*!]/ig,
// Remove save & resume tokens
/F-[!$0-9a-zA-Z]{22}/ig // Remove file ID references
];
Log.blankOut = '*****';

/***/ }),

/***/ "./src/framework/model/core.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSignature", function() { return isSignature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureListLength", function() { return ensureListLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFormEntry", function() { return getFormEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureChildProperties", function() { return ensureChildProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getInitialSectionItems", function() { return getInitialSectionItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnumInstance", function() { return getEnumInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnumInstanceById", function() { return getEnumInstanceById; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEnumInstanceByName", function() { return getEnumInstanceByName; });
/* harmony import */ var src_util_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/util/random.ts");
/* harmony import */ var src_util_combined_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/util/combined-number.ts");
/* harmony import */ var src_util_base62__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/util/base62.ts");



function isFormEntry(entity) {
  return entity.meta.type.baseType && entity.meta.type.baseType.fullName === 'Forms.FormEntry';
}
function isSectionOrTable(entity) {
  return !isFormEntry(entity) && 'Form' in entity;
}
function isNestedSectionOrTable(entity) {
  return 'ParentSection' in entity;
}
function isSignature(entity) {
  return entity.meta.type.fullName === 'Signature';
}

/**
 * Either set the child's `Form` property, or propogate it from the parent when it is set
 * @param parent The parent entity (either a FormEntry or Section/RepeatingSection/TableRow entity)
 * @param child The child entity
 */
function propagateFormProperty(parent, child) {
  // In case the parent's Form property is not yet set, propagate when it is set
  if (isSectionOrTable(parent) && parent.Form) child.Form = parent.Form;else parent.meta.type.getProperty('Form').changed.subscribeOne(e => child.Form = e.newValue);
}

/**
 * Set "backreference" properties (i.e. `Form` and `ParentSection`) on a child entity
 * @param parent The parent entity (either a FormEntry or Section/RepeatingSection/TableRow entity)
 * @param child The child entity
 */
function setBackReferenceProperties(parent, child) {
  if (isNestedSectionOrTable(child)) {
    child.ParentSection = parent;
    propagateFormProperty(parent, child);
  } else child.Form = parent;
}

/**
 * Generate an id based on the given entry version and list item index
 * @param {number} version The form entry version to be saved
 * @param {number} listItemIndex The item's index in the list
 * @returns {string} The generated list item Id
 */
function generateListItemId(version, listItemIndex) {
  if (version > 0xffff) throw new Error('Value ' + version + ' exceeds maximum unsigned short value of ' + 0xffff + '.');
  if (listItemIndex > 0xffff) throw new Error('Value ' + listItemIndex + ' exceeds maximum unsigned short value of ' + 0xffff + '.');
  const randomByte1 = Object(src_util_random__WEBPACK_IMPORTED_MODULE_0__["randomInt"])(255);
  const randomByte2 = Object(src_util_random__WEBPACK_IMPORTED_MODULE_0__["randomInt"])(255);
  const num = Object(src_util_combined_number__WEBPACK_IMPORTED_MODULE_1__["combineUInt16sWithPadding"])(version, listItemIndex, randomByte1, randomByte2);
  const id = Object(src_util_base62__WEBPACK_IMPORTED_MODULE_2__["toBase62"])(num);
  // console.log(`generateListItemId(${version}, ${listItemIndex}) => ${id}`);
  return id;
}

/**
 * Get a map of list item ids to their index in the list
 * @param list The list of entities which have an Id property
 * @returns A map of id to entity for all of the items in the list
 */
function getListItemIdMap(list) {
  const idMap = {};
  for (let i = 0; i < list.length; i++) {
    if (list[i]) {
      const id = list[i].Id;
      if (id && !idMap.hasOwnProperty(id)) {
        idMap[id] = list[i];
      }
    }
  }
  return idMap;
}

/**
 * Ensures that the given id is unique to the list,
 * and returns a unique pseudo-random id if it is not
 * @param list The list of items
 * @param item The item in the list who's Id is being validated
 * @param id The id to check for uniqueness
 * @param incorporateOriginal Whether to incorporate the original id when generating a unique id
 * @param idMap An optional pre-built map of ids to items
 * @returns The unique list item Id to use
 */
function ensureUniqueListItemId(list, item, id) {
  let idMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  // Generate the id map on-demand if needed
  if (!idMap) {
    idMap = getListItemIdMap(list);
  }
  let itemForId = idMap[id];

  // If the Id isn't used or is used by the item being checked, then return it
  if (!itemForId || itemForId === item) {
    return id;
  }

  // Otherwise, fall back to a pseudo-random string
  for (let attempts = 0; attempts < 10; attempts++) {
    id = 'U-' + Object(src_util_random__WEBPACK_IMPORTED_MODULE_0__["randomText"])(5 + attempts, true);
    itemForId = idMap[id];
    if (!itemForId) {
      return id;
    }
  }

  // Don't assign an id rather than knowingly use a duplicate
  return null;
}

/**
 * Ensures the list has the specified number of items when min and max are the same.
 * @param list The list to update
 * @param min The minimum number of items
 * @param max The maximum number of items
 */
function ensureListLength(list, itemType, min, max) {
  if (Number.isInteger(min) && Number.isInteger(max) && min === max) {
    // Add items if less than min
    if (list.length < min) {
      const newItems = [];
      while (newItems.length < min - list.length) newItems.push(itemType.createSync({}));
      list.splice(list.length, 0, ...newItems);
    }

    // Remove items if greater than max
    else if (list.length > Math.max(max, 0)) list.splice(max);
  }
}

/**
 * Get the form entry for the given entity (either a descendant of the form entry or the form entry itself)
 * @param entity Either a descendant of the form entry, or the form entry itself
 */
function getFormEntry(entity) {
  if (!entity) throw new Error('Can\'t get form entry for a null entity.');
  if (isFormEntry(entity)) return entity;
  if (isSectionOrTable(entity)) return entity.Form;
  throw new Error("Can't get form entry for entity '".concat(entity.meta.type.fullName, "|").concat(entity.meta.id || '?', "'."));
}

/**
 * Initializes common properties of child entities: `Form`, `ParentSection`, and `Id`
 * @param parent The parent object that owns the child entity or entities
 * @param propertyName The property of the parent that contains the child entity or entities
 */
function ensureChildProperties(parent, propertyName) {
  const value = parent.get(propertyName);
  if (Array.isArray(value)) {
    value.forEach(item => setBackReferenceProperties(parent, item));
  } else if (value) {
    setBackReferenceProperties(parent, value);
  }
  if (Array.isArray(value)) {
    // Attempt to get the form entry from the parent object
    let formEntry;
    try {
      formEntry = getFormEntry(parent);
    } catch (_unused) {
      // TODO: Log error to App Insights?
    }

    // Build a map of Ids once so that the list doesn't have to be traversed repeatedly to ensure unique Ids
    // NOTE: Store the id map on the list so that the id for an item that is deleted doesn't get reused, since it could have been referenced
    const idMap = value['__idMap'] || (value['__idMap'] = getListItemIdMap(value));

    // TODO: Make this more efficient by only processing added items?
    value.forEach((item, index) => {
      // Only generate Ids for new objects, or objects that don't already have an id
      if (item.meta.isNew || !item.Id) {
        let id;
        if (formEntry) {
          // Generate an encoded id based on the entry version and the items index in the list
          try {
            const currentEntryVersion = formEntry.Entry ? formEntry.Entry.Version || 0 : 0;
            let attempts = 0;
            do {
              id = generateListItemId(currentEntryVersion + 1, index);
            } while (idMap[id] && ++attempts <= 10);
          } catch (e) {
            // If an error occurs, fall back to a pseudo-random string
            // TODO: Log error to App Insights?
            id = 'E-' + Object(src_util_random__WEBPACK_IMPORTED_MODULE_0__["randomText"])(5, true);
          }
        } else {
          // Fall back to generate a random id
          id = 'F-' + Object(src_util_random__WEBPACK_IMPORTED_MODULE_0__["randomText"])(5, true);
        }
        // Ensure that the list item's Id will be unique, generating a psuedo random Id if necessary
        id = ensureUniqueListItemId(value, item, id, idMap);
        // Assign the item's Id property
        item.Id = id;
        // Update the id map for future use
        idMap[id] = item;
      }
    });
  }
}
function getInitialSectionItems(container, itemType, count, itemInitializer) {
  const items = [];
  if (container.meta.isNew) {
    for (let i = 0; i < count; i++) items.push(Object.assign({}, itemInitializer));
  }
  return items;
}
/**
 * Ensures that enum instances are created for the given enum type
 */
function ensureEnumInstances(type, enumValues) {
  const instances = type.known().reduce((obj, v) => {
    obj[v.meta.id] = v;
    return obj;
  }, {});
  const EnumType = type.jstype;
  if (Array.isArray(enumValues)) {
    return enumValues.map(name => {
      return instances[name] || new EnumType(name, {
        Name: name,
        DisplayName: name
      });
    });
  } else {
    return Object.keys(enumValues).map(value => {
      return instances[value] || new EnumType(value, {
        Id: parseInt(value, 10),
        Name: enumValues[value],
        DisplayName: enumValues[value]
      });
    });
  }
}

/**
 * Override of `Type.get` that ensure that enum values are created
 */
function getEnumInstance(type) {
  const enumValues = type['enum'];
  if (!enumValues) {
    // TODO: Warn about an invalid call to `ensureEnumInstances`?
    return;
  }

  // Ensure that all enum instances are created
  ensureEnumInstances(type, enumValues);

  // Call the original Type.get prototype method
  const Type = type.constructor;
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return Type.prototype.get.apply(type, args);
}
function getEnumInstanceById(type, id) {
  const enumValues = type['enum'];
  if (!enumValues) {
    // TODO: Warn about an invalid call to `ensureEnumInstances`?
    return;
  }

  // Ensure that all enum instances are created
  const instances = ensureEnumInstances(type, enumValues);

  // Get the first instance with the matching id
  return instances.filter(i => i.Id === id)[0] || null;
}
function getEnumInstanceByName(type, name) {
  const enumValues = type['enum'];
  if (!enumValues) {
    // TODO: Warn about an invalid call to `ensureEnumInstances`?
    return;
  }

  // Ensure that all enum instances are created
  const instances = ensureEnumInstances(type, enumValues);

  // Get the first instance with the matching name
  return instances.filter(i => i.Name === name)[0] || null;
}

/***/ }),

/***/ "./src/framework/model/countries.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCountryCode", function() { return getCountryCode; });
/* harmony import */ var core_js_modules_esnext_string_replace_all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/esnext.string.replace-all.js");
/* harmony import */ var core_js_modules_esnext_string_replace_all_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_string_replace_all_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/i18n-iso-countries@7.5.0/node_modules/i18n-iso-countries/index.js");
/* harmony import */ var i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1__);


const countryNameWithParensExpr = /^([^(]+)\s+[（(]([^)]+)[)）]\s*$/g;
const countryNameWithCommaExpr = /^([^,]+),\s+([^)]+)\s*$/g;
function getCountryCode(name, locale) {
  let countryCode = i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1___default.a.getAlpha2Code(name, locale);
  if (countryCode) return countryCode;

  // If the country name has an alternative name or some other text in parentheses,
  // then remove the parenthesized value and try again.
  if (countryNameWithParensExpr.test(name)) {
    const cleansedName = name.replace(countryNameWithParensExpr, '$1');
    countryCode = i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1___default.a.getAlpha2Code(cleansedName, locale);
    if (countryCode) return countryCode;
  }

  // If the country name has an alternative name after a comma,
  // then exclude the portion after the comma and try again.
  if (countryNameWithCommaExpr.test(name)) {
    const cleansedName = name.replace(countryNameWithCommaExpr, '$1');
    countryCode = i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1___default.a.getAlpha2Code(cleansedName, locale);
    if (countryCode) return countryCode;
  }

  // Try to find the country by replacing spaces with dashes
  if (name.includes(' ')) {
    const nameWithoutSpaces = name.replaceAll(' ', '-');
    countryCode = i18n_iso_countries__WEBPACK_IMPORTED_MODULE_1___default.a.getAlpha2Code(nameWithoutSpaces, locale);
    if (countryCode) return countryCode;
  }
  return null;
}

/***/ }),

/***/ "./src/framework/model/extensions/address-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressExtensions", function() { return AddressExtensions; });
/* harmony import */ var _util_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/util/helpers.ts");
/* harmony import */ var _countries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/model/countries.ts");


const AddressExtensions = {
  Country: {
    type: String,
    set: function (country) {
      const model = this.meta.type.model;
      if (country) this.CountryCode = Object(_countries__WEBPACK_IMPORTED_MODULE_1__["getCountryCode"])(country.trim(), model.$locale || 'en');else this.CountryCode = null;
    }
  },
  validateRequiredAddress: function (enforceableFields) {
    // Store the model to use for localization when building the error message
    const model = this.meta.type.model;
    const countryLabelUS = model.getResource('united-states');
    let error = '';
    let errorCount = 0;

    // NOTE: Iterate through the list in reverse in order to avoid an Oxford comma in the error message...
    for (let f = enforceableFields.length - 1; f >= 0; f--) {
      const field = enforceableFields[f];

      // Skip this field if it has a value
      const value = this.get(field);
      if (Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["hasValue"])(value)) continue;

      // Rename Postal Code to Zip Code if US Address
      let label = model.getResource('address-' + field.toLowerCase());
      if (field === 'PostalCode' && this.Country === countryLabelUS) label = model.getResource('address-zip-code');
      if (errorCount === 0) error = label;else if (errorCount === 1) error = Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["$format"])(model.getResource('this-and-that'), label, error);else error = Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["$format"])(model.getResource('this-comma-that'), label, error);
      errorCount++;
    }
    if (errorCount > 0) error = Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["$format"])(errorCount === 1 ? model.getResource('required-one') : model.getResource('required-many'), error);
    return error;
  },
  validateZipCode: function () {
    // Store the model to use for localization when building the error message
    const model = this.meta.type.model;
    const countryLabelUS = model.getResource('united-states');
    if (this.Country === countryLabelUS) {
      // Make sure that a US zip code is used if United States is chosen as the country
      if (Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["hasValue"])(this.PostalCode) && !/^\s*(\d{5})(-\d{4})?\s*$/.test(this.PostalCode)) {
        return model.getResource('address-zip-code-invalid');
      }
    }
  }
};

/***/ }),

/***/ "./src/framework/model/extensions/entity-init-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyEntityInitExtensions", function() { return applyEntityInitExtensions; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);

function ensurePropertyInitialized(property, entity) {
  if (!property.value(entity)) entity.update(property.name, {});
}
function isDynamicEntity(property) {
  return Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(property.propertyType) && property.propertyType.meta.baseType && property.propertyType.meta.baseType.fullName === 'DynamicEntity';
}
function isName(property) {
  return Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(property.propertyType) && property.propertyType.meta.fullName === 'Name';
}
function isAddress(property) {
  return Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(property.propertyType) && property.propertyType.meta.fullName === 'Address';
}

/**
 * Ensures properties of type Name, Address, and DynamicEntity subtypes are initialized for existing entities.
 * These properties are initialized using default value rules for new entities.
 */
function applyEntityInitExtensions(model) {
  for (const type of Object.values(model.model.types)) {
    const referenceProperties = type.properties.filter(p => !p.isList && (isDynamicEntity(p) || isName(p) || isAddress(p)));
    if (referenceProperties.length) type.initExisting.subscribe(e => referenceProperties.forEach(property => ensurePropertyInitialized(property, e.entity)));
  }
}

/***/ }),

/***/ "./src/framework/model/extensions/form-entry-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEntryWithOrder", function() { return isEntryWithOrder; });
function isEntryWithOrder(entry) {
  return !!entry.Order;
}

/***/ }),

/***/ "./src/framework/model/extensions/lookup-field/cascade-filter-manager.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CascadeFilterManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCascadeFilterManager", function() { return getCascadeFilterManager; });
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.object.from-entries.js");
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_flat_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.array.flat-map.js");
/* harmony import */ var core_js_modules_es_array_flat_map_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_flat_map_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_unscopables_flat_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.array.unscopables.flat-map.js");
/* harmony import */ var core_js_modules_es_array_unscopables_flat_map_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_unscopables_flat_map_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var vue_class_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/vue-class-component@7.1.0/node_modules/vue-class-component/dist/vue-class-component.esm.js");
/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@8.2.1_prettier@1.18.2/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;



function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }




let CascadeFilterManager = (_dec = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_6__["Prop"])(), _dec2 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_6__["Prop"])(), _dec3 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_6__["Prop"])(), _dec4 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_6__["Prop"])(), _dec5 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_6__["Watch"])('filteredIndexes'), Object(vue_class_component__WEBPACK_IMPORTED_MODULE_5__["default"])(_class = (_class2 = class CascadeFilterManager extends vue__WEBPACK_IMPORTED_MODULE_4___default.a {
  constructor() {
    super(...arguments);
    _initializerDefineProperty(this, "lookupManager", _descriptor, this);
    _initializerDefineProperty(this, "cascadeProperty", _descriptor2, this);
    _initializerDefineProperty(this, "indexProperty", _descriptor3, this);
    _initializerDefineProperty(this, "priorFilters", _descriptor4, this);
  }
  created() {
    this.lookupManager.$once('synthetic-indexes-changed', () => {
      // ensure synthetic index properties are initialized based on the initial value of the cascade property
      for (const index of this.lookupManager.syntheticIndexes) {
        const valueFromFilterField = this.isList ? this.listValue[0] : this.value;
        if (this.indexProperty.isList) this.indexProperty.value(index).push(valueFromFilterField);else this.indexProperty.value(index, valueFromFilterField);
      }
    });
  }
  get ready() {
    return this.lookupManager.ready;
  }
  get value() {
    return this.cascadeProperty.value(this.container);
  }
  get listValue() {
    return this.cascadeProperty.value(this.container);
  }
  get isList() {
    return Array.isArray(this.value);
  }
  get container() {
    return this.lookupManager.container;
  }
  get indexes() {
    return this.lookupManager.indexes;
  }
  get format() {
    return this.cascadeProperty.format;
  }
  get filteredIndexes() {
    const prerequisites = Object.fromEntries(this.priorFilters.map(prior => {
      const prop = this.container.meta.type.getProperty(prior.filterField);
      const requiredFunc = typeof prop.required === 'function' ? prop.required : typeof prop.required === 'object' ? prop.required.function : null;
      return [prior.filterField, prop.required === true || requiredFunc && requiredFunc.bind(this.container)()];
    }));
    if (this.indexProperty === null) return [];else return this.indexes.filter(idx => this.stringify(this.indexProperty.value(idx)) !== '').filter(idx => this.priorFilters.every(prior => {
      const priorFormat = this.container.meta.type.getProperty(prior.filterField).format || null;
      const priorValue = this.container[prior.filterField];
      const indexValueFormatted = this.stringify(idx[prior.indexProperty], priorFormat);
      const indexValue = idx[prior.indexProperty];
      if (Array.isArray(indexValue) && Array.isArray(priorValue)) return !prerequisites[prior.filterField] && !priorValue.length || priorValue.some(v => indexValue.includes(this.stringify(v, priorFormat)));else if (Array.isArray(indexValue)) return !prerequisites[prior.filterField] && priorValue === null || indexValue.some(v => priorValue === this.stringify(v, priorFormat));else if (Array.isArray(priorValue)) return !prerequisites[prior.filterField] && !priorValue.length || priorValue.some(v => indexValueFormatted === this.stringify(v, priorFormat));
      return !prerequisites[prior.filterField] && priorValue === null || indexValueFormatted === this.stringify(priorValue, priorFormat);
    }));
  }

  /**
   * When the filtered options no longer include the currently selected value, clear the value.
   * @param indexes The new set of filtered options.
   */
  filteredIndexesChanged(indexes) {
    const allowedStrings = indexes.flatMap(this.extract).map(val => this.stringify(val));
    const isAllowed = val => allowedStrings.includes(this.stringify(val));
    if (this.isList) this.setFieldValue(this.listValue.filter(isAllowed));else if (!isAllowed(this.value)) this.setFieldValue(null);
  }
  setFieldValue(value) {
    if (this.isList) {
      const list = this.listValue;
      list.batchUpdate(() => Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_3__["updateArray"])(list, value));
    } else this.cascadeProperty.value(this.container, value);
  }
  parse(value) {
    return this.format ? this.format.convertFromString(value) : value;
  }
  stringify(value) {
    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.format;
    if (value === null) return '';
    return format ? format.convertToString(value) : '' + value;
  }
  extract(index) {
    return this.indexProperty.value(index);
  }
}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lookupManager", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cascadeProperty", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "indexProperty", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "priorFilters", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class2.prototype, "filteredIndexesChanged", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "filteredIndexesChanged"), _class2.prototype)), _class2)) || _class);

function getCascadeFilterManager(_ref) {
  let {
    lookupManager,
    cascadeProperty,
    indexProperty,
    priorFilters
  } = _ref;
  return new CascadeFilterManager({
    propsData: {
      lookupManager,
      cascadeProperty,
      indexProperty,
      priorFilters
    }
  });
}

/***/ }),

/***/ "./src/framework/model/extensions/lookup-field/lookup-manager.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLookupManagers", function() { return findLookupManagers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIndex", function() { return getIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LookupManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLookupManager", function() { return getLookupManager; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_util_deferred__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/util/deferred.ts");
/* harmony import */ var src_util_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/util/model.ts");
/* harmony import */ var src_web_api_entry_views_entry_set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/web-api/entry-views/entry-set.ts");
/* harmony import */ var src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/web-api/entry-views/entry-view-util.ts");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var vue_class_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/vue-class-component@7.1.0/node_modules/vue-class-component/dist/vue-class-component.esm.js");
/* harmony import */ var vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/vue-property-decorator@8.2.1_prettier@1.18.2/node_modules/vue-property-decorator/lib/vue-property-decorator.js");
/* harmony import */ var _lookup_model_extension__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/framework/model/extensions/lookup-field/lookup-model-extension.ts");
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }









const FILTER_RECURSION_LIMIT = 12;
/**
 * It is currently possible for two lookup fields to have different index types,
 * but share a lookup view. This results in trying to construct an index with an
 * already-pooled id. The long term fix is to ensure these fields use the same type,
 * but for compatibility reasons it is currently simpler to handle this edge case
 * by obtaining the pooled instance via the baseType.
 */
function getPooledIndex(type, id) {
  while (type) {
    const instance = type.get(id);
    if (instance) return instance;
    type = type.baseType;
  }
  return null;
}
function findLookupManagers(entity) {
  const managers = [];
  Object(src_util_model__WEBPACK_IMPORTED_MODULE_2__["visitEntity"])(entity, (e, p) => {
    const lookupManager = e[p.name + '_LookupManager'];
    if (lookupManager) managers.push(lookupManager);
  }, {
    followCircularProperties: false,
    followLookups: true
  });
  return managers;
}
function getIndex(model, indexType, state) {
  if (state.Id) {
    const pooledIndex = getPooledIndex(indexType, state.Id);
    if (pooledIndex) return pooledIndex;
  }
  if (state.AdditionalValues) {
    for (const av of state.AdditionalValues) {
      let val = av.Value;
      const prop = indexType.getProperty(av.FieldId);
      if (prop) {
        if (prop.isList && typeof val === 'string') val = JSON.parse(val);else if (prop.propertyType === Boolean) val = val === 'True';else if (prop.propertyType === Number) val = Number(val);
      }
      state[av.FieldId] = val;
    }
  }
  return model.construct(indexType.fullName, state);
}
let LookupManager = (_dec = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), _dec2 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), _dec3 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), _dec4 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), _dec5 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), _dec6 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), _dec7 = Object(vue_property_decorator__WEBPACK_IMPORTED_MODULE_7__["Prop"])(), Object(vue_class_component__WEBPACK_IMPORTED_MODULE_6__["default"])(_class = (_class2 = class LookupManager extends vue__WEBPACK_IMPORTED_MODULE_5___default.a {
  constructor() {
    super(...arguments);
    _initializerDefineProperty(this, "viewId", _descriptor, this);
    _initializerDefineProperty(this, "indexType", _descriptor2, this);
    _initializerDefineProperty(this, "summaryFormat", _descriptor3, this);
    _initializerDefineProperty(this, "descriptionFormat", _descriptor4, this);
    _initializerDefineProperty(this, "container", _descriptor5, this);
    _initializerDefineProperty(this, "lookupProperty", _descriptor6, this);
    _initializerDefineProperty(this, "entryViewService", _descriptor7, this);
    this.entrySet = void 0;
    this.indexes = [];
    this.initializing = false;
    this.isValid = true;
    // Indexes that are no longer part of the entry set, but represent the current value for the lookup field
    this.syntheticIndexes = new Set();
    this.filteredIndexes = [];
    this.defaultIndexes = [];
    this.readyTask = void 0;
    this.isUpdatingFilter = false;
    this.recursionDepth = 0;
    // used to represent the most current "id" of the invocation of the function defaultChanged
    this.lastSetDefaultValueId = 0;
  }
  async created() {
    if (this.entryViewService.isValidView(this.viewId)) this.initialize();else this.isValid = false;
  }
  async initialize() {
    this.initializing = true;
    this.readyTask = new src_util_deferred__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
    this.entrySet = await src_web_api_entry_views_entry_set__WEBPACK_IMPORTED_MODULE_3__["default"].get(this.entryViewService, this.entryType.fullName, this.viewId);
    await this.entrySet.refresh();
    const indexes = this.entrySet.listIndex().map(o => getIndex(this.entryViewService.model, this.indexType, o));
    if (!this.container.meta.isNew) {
      const missing = (this.lookupProperty.isList ? this.listValue : [this.value]).filter(e => e && !this.entrySet.getIndexItem(e.Id));
      for (const entry of missing) {
        const syntheticIndex = getIndex(this.entryViewService.model, this.indexType, {
          Id: "".concat(this.entrySet.view, "|fake|").concat(entry.Id),
          Summary: entry.toString(this.summaryFormat),
          Description: this.descriptionFormat ? '- ' + entry.toString(this.descriptionFormat) : ''
        });
        this.syntheticIndexes.add(syntheticIndex);
        indexes.unshift(syntheticIndex);
      }
      this.$emit('synthetic-indexes-changed', this.syntheticIndexes);
    }
    this.indexes = indexes;

    // allow computed/watchers to run before setting loading to false
    await this.$nextTick();
    await this.container.initialized;
    this.updateFilteredIndexes();
    this.initializing = false;
    this.readyTask.resolve();
  }
  whenReady(callback) {
    if (this.initializing) this.ready.then(callback);else callback();
  }
  get allowUnknownEntry() {
    return !this.container.meta.isNew;
  }
  get entryType() {
    return this.lookupProperty.propertyType.meta;
  }
  get ready() {
    return this.readyTask.promise;
  }
  get isList() {
    return this.lookupProperty.isList;
  }
  get value() {
    return this.lookupProperty.value(this.container);
  }
  get listValue() {
    return this.lookupProperty.value(this.container);
  }
  get hasValue() {
    return this.isList ? this.listValue.length > 0 : !!this.value;
  }
  updateFilteredIndexes() {
    let fromRule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    // prevent recursion due to defaulting triggering filter evaluation
    if (this.isUpdatingFilter) {
      this.recursionDepth++;
      if (this.recursionDepth > FILTER_RECURSION_LIMIT) return;
    }
    if (!this.indexes) this.filteredIndexes = [];else this.filteredIndexes = this.indexes.filter(o => {
      return Object(_lookup_model_extension__WEBPACK_IMPORTED_MODULE_8__["isIncluded"])(this.container, this.lookupProperty, o);
    });
    if (fromRule) this.clearInvalidValues();
    this.isUpdatingFilter = true;
    try {
      this.updateDefaultIndexes(fromRule);
    } finally {
      setTimeout(() => {
        this.isUpdatingFilter = false;
        this.recursionDepth = 0;
      });
    }
  }

  /**
   * When the filtered options no longer include the currently selected value, clear the value.
   */
  clearInvalidValues() {
    const filteredIndexes = this.filteredIndexes;
    if (this.isList) {
      if (this.listValue && this.listValue.some(entry => !filteredIndexes.some(o => Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(o) === entry.Id))) this.setLookupValue(this.listValue.filter(entry => filteredIndexes.some(o => Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(o) === entry.Id)));
    } else {
      if (this.value && !filteredIndexes.some(o => Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(o) === this.value.Id)) this.setLookupValue(null);
    }
  }
  updateDefaultIndexes() {
    let fromRule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const oldDefaultIndexes = this.defaultIndexes;
    if (!this.indexes) this.defaultIndexes = [];else this.defaultIndexes = this.filteredIndexes.filter(o => {
      return Object(_lookup_model_extension__WEBPACK_IMPORTED_MODULE_8__["isDefaulted"])(this.container, this.lookupProperty, o);
    });
    if (fromRule) this.setDefaultValue(oldDefaultIndexes.length !== 0);
  }
  /**
   * Sets a default value (or values) for the lookup using the given default indexes.
   */
  async setDefaultValue(previouslyHadDefaultIndexes) {
    this.lastSetDefaultValueId++;
    const setDefaultValueId = this.lastSetDefaultValueId;
    const defaultIndexes = this.defaultIndexes;
    if (defaultIndexes.length) {
      if (this.isList) {
        const entries = await Promise.all(defaultIndexes.map(o => Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(o)).map(id => this.getEntryById(id)));
        if (setDefaultValueId === this.lastSetDefaultValueId) this.setLookupValue(entries);
      } else {
        const entry = await this.getEntryById(Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(defaultIndexes[0]));
        if (setDefaultValueId === this.lastSetDefaultValueId) this.setLookupValue(entry);
      }
    }
    // Only clear out selected values due to no default indexes if there previously were default indexes.
    else if (previouslyHadDefaultIndexes) {
      this.setLookupValue(this.isList ? [] : null);
    }
  }
  getEntryById(id) {
    let ignoreFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return this.entrySet.getEntry(ignoreFilter ? this.indexes.find(o => Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(o) === id) : this.filteredIndexes.find(o => Object(src_web_api_entry_views_entry_view_util__WEBPACK_IMPORTED_MODULE_4__["getEntryId"])(o) === id));
  }
  setLookupValue(value) {
    const isInited = this.lookupProperty.isInited(this.container) && !Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["Property$pendingInit"])(this.container, this.lookupProperty);
    this.lookupProperty.value(this.container, value, {
      isInited
    });
  }
}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewId", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "indexType", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "summaryFormat", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "descriptionFormat", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "container", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lookupProperty", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "entryViewService", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);

function getLookupManager(_ref) {
  let {
    lookupInfo,
    indexType,
    lookupProperty,
    container,
    entryViewService
  } = _ref;
  return new LookupManager({
    propsData: {
      entryViewService,
      viewId: lookupInfo.viewId,
      indexType,
      container,
      lookupProperty,
      summaryFormat: lookupInfo.summaryFormat,
      descriptionFormat: lookupInfo.descriptionFormat
    }
  });
}

/***/ }),

/***/ "./src/framework/model/extensions/lookup-field/lookup-model-extension.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIncluded", function() { return isIncluded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDefaulted", function() { return isDefaulted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendModelWithLookups", function() { return extendModelWithLookups; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cascade_filter_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/model/extensions/lookup-field/cascade-filter-manager.ts");
/* harmony import */ var _lookup_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/framework/model/extensions/lookup-field/lookup-manager.ts");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/framework/model/core.ts");
/* harmony import */ var src_web_api_base_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/web-api/base-service.ts");
/* harmony import */ var src_framework_logging_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/framework/logging/error.ts");






function isRootLookupProperty(propDef) {
  return typeof propDef === 'object' && propDef['$lookupFieldInfo'];
}
function isNestedLookupProperty(propDef) {
  return typeof propDef === 'object' && propDef['$lookupViewId'];
}
function isCascadeFilterProperty(propDef) {
  return typeof propDef === 'object' && propDef['$cascadeFilterInfo'];
}
function getManagerPropName(lookupProperty) {
  return "".concat(lookupProperty.name, "_LookupManager");
}
function getIsIncludedMethodName(lookupProperty) {
  return "".concat(lookupProperty.name, "_IsIncluded");
}

/**
 * Determines whether a lookup index should be included - either there is no filter,
 * or the index passes the filter.
 * @param container The object that contains the lookup field
 * @param lookupProperty The property for the lookup field
 * @param index The index option to test
 * @returns True, if the index should be an included option for the lookup
 */
function isIncluded(container, lookupProperty, index) {
  try {
    const isIncludedMethod = getIsIncludedMethodName(lookupProperty);

    // Include the index if there is no filter
    if (!container[isIncludedMethod]) return true;

    // Invoke the "InIncluded" expression
    return container[isIncludedMethod](index);
  } catch (e) {
    return false;
  }
}

/**
 * Adds a rule to the specified type which ensures a lookup manager's filtered indexes are
 * kept up to date as dependent model properties change.
 */
function addLookupFilterRules(type, lookupProperty, lookupInfo) {
  // Don't allow a lookup to be prefilled with invalid values
  lookupProperty.changed.subscribe(function () {
    const entry = Object(_core__WEBPACK_IMPORTED_MODULE_3__["getFormEntry"])(this);
    if (entry.meta.isNew) {
      const manager = this[getManagerPropName(lookupProperty)];
      if (manager) manager.whenReady(() => manager.clearInvalidValues());
    }
  });

  // Ensure that lookup value(s) is/are valid when a filter predicate changes
  type.addRule({
    name: "".concat(lookupProperty.containingType.fullName, ".").concat(lookupProperty.name, ".UpdateFilteredIndexes"),
    execute() {
      const manager = this[getManagerPropName(lookupProperty)];
      if (manager) manager.whenReady(() => manager.updateFilteredIndexes(true));
    },
    onChangeOf: type.getPaths("{".concat(lookupInfo.filterPaths.join(','), "}"))
  }).register();
}
function getIsDefaultedMethodName(lookupProperty) {
  return "".concat(lookupProperty.name, "_IsDefaulted");
}

/**
 * Determines if the index should be a default option based solely on static data on the index itself
 */
function isStaticallyDefaulted(option) {
  return option.AdditionalValues.some(v => v.FieldId === 'Default' && v.Value === 'True');
}

/**
 * Determines whether a lookup index should be a default, based on either static
 * default criteria on the index, or the dynamic IsDefaulted expression.
 * @param container The object that contains the lookup field
 * @param lookupProperty The property for the lookup field
 * @param index The index option to test
 * @returns True, if the index should be a default value for the lookup
 */
function isDefaulted(container, lookupProperty, index) {
  if (isStaticallyDefaulted(index)) return true;
  try {
    const isDefaultedMethod = getIsDefaultedMethodName(lookupProperty);
    if (!container[isDefaultedMethod]) return false;
    return container[isDefaultedMethod](index);
  } catch (e) {
    return false;
  }
}

/**
 * Adds rules to the specified type which ensures a lookup manager's default indexes are
 * established and default filter is applied initially, and as as dependent model properties change.
 */
function addLookupDefaultRules(type, lookupProperty, lookupInfo) {
  // Apply the default filter when the entry is initialized
  // - for new entries if the value has not been prefilled
  // - for existing entries when there is no persisted value
  type.addRule({
    name: "".concat(lookupProperty.containingType.fullName, ".").concat(lookupProperty.name, ".SetInitialDefaultValue"),
    execute() {
      const manager = this[getManagerPropName(lookupProperty)];
      if (manager) {
        manager.whenReady(() => {
          // Wait for the entry to initialize to ensure that prefilled or persisted lookup values have been resolved
          Object(_core__WEBPACK_IMPORTED_MODULE_3__["getFormEntry"])(this).initialized.then(() => {
            const isInited = lookupProperty.isInited(this) && !Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["Property$pendingInit"])(this, lookupProperty);
            if (!isInited) manager.updateDefaultIndexes(true);
          });
        });
      }
    }
  }).onInit().register();

  // Apply the default filter whenever one of the default filter predicates changes
  type.addRule({
    name: "".concat(lookupProperty.containingType.fullName, ".").concat(lookupProperty.name, ".UpdateDefaultIndexesAndSetDefaultValue"),
    execute() {
      const manager = this[getManagerPropName(lookupProperty)];
      if (manager) manager.whenReady(() => manager.updateDefaultIndexes(true));
    },
    onChangeOf: type.getPaths("{".concat(lookupInfo.defaultPaths.join(','), "}"))
  }).register();

  // Ensure that a default filter rule will run if a calculation that it depends on is changed.
  // A property with a default value rule may have a persisted value, in which case it will not run unless one of its predicates
  // fires a change event. A calculation will not fire a change event the first time it runs if it didn't previously have a value,
  // which may be the case for existing instances if the calculation is never accessed (ex: a hidden field), or is not accessed
  // prior to the event that would trigger it to change (i.e. setting the default action). So, in order to ensure that the default
  // filter's calculated predicates fire a change event, we must ensure that the calculation is accessed when the object is initialized.
  type.addRule({
    name: "".concat(lookupProperty.containingType.fullName, ".").concat(lookupProperty.name, ".AccessDefaultValuePredicates"),
    execute() {
      type.getPaths("{".concat(lookupInfo.defaultPaths.join(','), "}")).forEach(p => p.value(this));
    }
  }).onInitExisting().register();
}
function extendModelWithLookups(model, options, entryViewService, getLookupManager, getCascadeFilterManager, log, pseudoLoadDeleted, suppressLookupLoadingErrors) {
  /**
   * Adds the LookupManger property to the lookup manager's containingType.
   */
  function addLookupManagerProperty(lookupProperty, lookupInfo, entryViewService, getLookupManager) {
    lookupProperty.containingType.extend({
      [getManagerPropName(lookupProperty)]: {
        get: function () {
          return getLookupManager({
            lookupInfo,
            indexType: model.resolveType(lookupInfo.indexTypeName),
            entryViewService,
            lookupProperty,
            container: this
          });
        },
        type: _lookup_manager__WEBPACK_IMPORTED_MODULE_2__["default"]
      }
    });
    lookupProperty.containingType.addRule(function autoCreateLookupManager() {
      // force the manager to be created by accessing the property
      this.get(getManagerPropName(lookupProperty));
    }).onInit().register();
  }

  /**
   * Adds the CascadeFilterManager property to the cascade filter manager's containingType.
   */
  function addCascadeFilterManagerProperty(cascadeProperty, filterInfo, getCascadeFilterManager) {
    const cascadeManagerProp = "".concat(cascadeProperty.name, "_CascadeFilterManager");
    cascadeProperty.containingType.extend({
      [cascadeManagerProp]: {
        get: {
          function() {
            return getCascadeFilterManager({
              lookupManager: this["".concat(filterInfo.lookupPropertyName, "_LookupManager")],
              cascadeProperty,
              indexProperty: model.resolveType(filterInfo.indexTypeName).getProperty(filterInfo.indexPropertyName),
              priorFilters: filterInfo.priorFilters
            });
          },
          dependsOn: "".concat(filterInfo.lookupPropertyName, "_LookupManager")
        },
        type: _cascade_filter_manager__WEBPACK_IMPORTED_MODULE_1__["default"]
      }
    });
    cascadeProperty.containingType.addRule(function autoCreateCascadeManager() {
      // force the manager to be created by accessing the property
      this.get(cascadeManagerProp);
    }).onInit().register();
  }
  const lookupViews = new Map();

  /**
   * Traverse the model definition and do the following:
   * - harvest lookup view ids for all lookup fields
   * - create rules to update filtered/default options for lookup fields
   * - create rules to initialize lookup/cascade filter managers for any type containing a lookup field
   */
  for (const [typeName, typeDef] of Object.entries(options)) {
    if (!typeName.startsWith('$')) {
      const currentType = model.resolveType(typeName);
      const cascadeManagersToInitialize = [];
      for (const [propName, propDef] of Object.entries(typeDef)) {
        const currentProperty = currentType.getProperty(propName);

        // lookups on secondary forms (not the root) only need the viewId to load entries
        if (isNestedLookupProperty(propDef)) lookupViews.set(currentProperty, propDef['$lookupViewId']);else if (isCascadeFilterProperty(propDef)) {
          if (!options.$disableLookupFiltering) cascadeManagersToInitialize.push(() => addCascadeFilterManagerProperty(currentProperty, propDef['$cascadeFilterInfo'], getCascadeFilterManager));
        }
        // lookups on the root form need more metadata to describe the index type for displaying options
        else if (isRootLookupProperty(propDef)) {
          const lookupInfo = propDef['$lookupFieldInfo'];
          lookupViews.set(currentProperty, lookupInfo.viewId);
          if (!options.$disableLookupFiltering) {
            addLookupManagerProperty(currentProperty, lookupInfo, entryViewService, getLookupManager);
            if (lookupInfo.filterPaths) addLookupFilterRules(currentType, currentProperty, lookupInfo);
            if (lookupInfo.defaultPaths) addLookupDefaultRules(currentType, currentProperty, lookupInfo);
          }
        }
      }
      if (cascadeManagersToInitialize.length) cascadeManagersToInitialize.forEach(addCascadeFilterManager => addCascadeFilterManager());
    }
  }

  /**
   * Attempts to load form entries for lookup properties with a corresponding lookup view using the configured EntryViewService.
   */
  function lookupEntryResolver(instance, property, value) {
    const viewId = lookupViews.get(property);
    const isList = Array.isArray(value);
    if (viewId && value && Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(property.propertyType)) {
      const ids = isList ? value : [value];
      const loaded = {};

      // determine which entries are already in memory
      for (const id of ids) {
        const entry = property.propertyType.meta.get(id);
        if (entry) loaded[id] = entry;
      }
      const unloadedIds = ids.filter(id => !loaded[id]);
      let dataLoaded = Promise.resolve();

      // load remote entry data if necessary
      if (unloadedIds.length) dataLoaded = entryViewService.lookupEntries(viewId, unloadedIds).then(entryData => entryData.forEach(data => loaded[data.Id] = data)).catch(reason => {
        // Capture Axios error if the cause of the failure is a network request error of some kind
        const networkError = Object(src_web_api_base_service__WEBPACK_IMPORTED_MODULE_4__["getAxiosError"])(reason);
        if (log) {
          const additionalProperties = {};
          additionalProperties['Source'] = 'lookupEntryResolver';
          additionalProperties['Value'] = value;
          if (networkError) {
            var _networkError$config, _networkError$config2, _networkError$config3;
            additionalProperties['Url'] = (_networkError$config = networkError.config) === null || _networkError$config === void 0 ? void 0 : _networkError$config.url;
            additionalProperties['Method'] = (_networkError$config2 = networkError.config) === null || _networkError$config2 === void 0 ? void 0 : _networkError$config2.method;
            additionalProperties['Timeout'] = (_networkError$config3 = networkError.config) === null || _networkError$config3 === void 0 ? void 0 : _networkError$config3.timeout;
            additionalProperties['Code'] = networkError.code;
          }
          log.error(Object(src_framework_logging_error__WEBPACK_IMPORTED_MODULE_5__["ensureError"])(reason, 'An unknown error occurred resolving lookup values'), additionalProperties);
        }
        if (!suppressLookupLoadingErrors && networkError) throw reason;
        console.warn('Unable to resolve lookup value:', value, reason);
      });

      // return all entries in order based on provided value
      return dataLoaded.then(() => {
        for (const unloaded of unloadedIds) {
          if (!loaded[unloaded]) {
            if (pseudoLoadDeleted) loaded[unloaded] = {
              Id: 'Deleted|' + unloaded
            };
            if (log) {
              log.trace('Lookup entry not loaded.', {
                Source: 'lookupEntryResolver',
                Unloaded: unloaded
              });
            }
          }
        }
        return ids.map(id => loaded[id]);
      }).then(entries => isList ? entries.filter(entry => entry !== undefined) : entries[0] !== undefined ? entries[0] : null);
    }

    // return null so the framework knows there is no async resolution for this value
    else return null;
  }
  return lookupEntryResolver;
}

/***/ }),

/***/ "./src/framework/model/extensions/name-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NameExtensions", function() { return NameExtensions; });
/* harmony import */ var _util_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/util/helpers.ts");

const NameExtensions = {
  validateRequiredName: function () {
    // Store the model to use for localization when building the error message
    const model = this.meta.type.model;
    let error = '';
    const firstIsMissing = !Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["hasValue"])(this.First);
    const lastIsMissing = !Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["hasValue"])(this.Last);
    if (firstIsMissing && lastIsMissing) {
      error = model.getResource('required-name-first-and-last');
    } else if (firstIsMissing) {
      error = model.getResource('required-name-first');
    } else if (lastIsMissing) {
      error = model.getResource('required-name-last');
    }
    return error;
  }
};

/***/ }),

/***/ "./src/framework/model/extensions/payment-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPaymentExtensions", function() { return applyPaymentExtensions; });
function applyPaymentExtensions(model, entryType) {
  // If the entry does not have an Order property, no payment extensions should be applied
  if (entryType.getProperty('Order')) {
    if (entryType.getProperty('Next_Status')) {
      entryType.extend({
        // For workflow forms, payment is only truly required if the next status is not Incomplete
        Require_Payment: {
          type: Boolean,
          get: {
            function() {
              return this.Require_Payment_Expression && this.Next_Status !== 'Incomplete';
            },
            dependsOn: '{Require_Payment_Expression, Next_Status}'
          }
        }
      });
    } else {
      entryType.extend({
        Require_Payment: {
          type: Boolean,
          get: {
            function() {
              return this.Require_Payment_Expression;
            },
            dependsOn: 'Require_Payment_Expression'
          }
        }
      });
    }

    // conditionally add Save_Card_Agreement property for checkbox
    if (entryType.getProperty('Save_Customer_Card')) {
      entryType.extend({
        Save_Card_Agreement: {
          type: Boolean,
          required: {
            message: model.model.getResource('card-on-file-agreement-validation'),
            function() {
              return true;
            }
          }
        }
      });
    }

    // default the order property if present
    const newOrderState = {
      IsOpen: true
    };
    entryType.initExisting.subscribeOne(e => {
      if (!e.entity['Order']) e.entity.update('Order', newOrderState);
    });
    entryType.extend({
      Order: {
        default() {
          return model.construct('Payment.Order', newOrderState);
        }
      }
    });
    const orderType = model.model.types['Payment.Order'];
    if (orderType) orderType.extend({
      Rebuild_Count: {
        type: Number,
        default: 0
      },
      SubTotal: {
        get: {
          function() {
            return this.LineItems.reduce((subtotal, item) => subtotal + item.Amount, 0);
          },
          dependsOn: 'LineItems{Amount}'
        }
      },
      AdditionalFees: {
        get: {
          function() {
            return this.Fees.filter(fee => !fee.IsProcessingFee).reduce((total, fee) => total + fee.Amount, 0);
          },
          dependsOn: 'Fees{IsProcessingFee,Amount}'
        }
      },
      ProcessingFees: {
        get: {
          function() {
            return this.Fees.filter(fee => fee.IsProcessingFee).reduce((total, fee) => total + fee.Amount, 0);
          },
          dependsOn: 'Fees{IsProcessingFee,Amount}'
        }
      },
      OrderAmount: {
        get: {
          function() {
            return this.SubTotal + this.AdditionalFees + this.ProcessingFees;
          },
          dependsOn: '{SubTotal,AdditionalFees,ProcessingFees}'
        }
      },
      AmountDue: {
        get: {
          function() {
            return this.OrderAmount - this.AmountPaid;
          },
          dependsOn: '{OrderAmount,AmountPaid}'
        }
      },
      OrderSummary: {
        get: {
          function() {
            const status = this.PaymentStatus.DisplayName;
            switch (status) {
              case 'Paid':
                return this.toString('[AmountPaid] [PaymentStatus.Name]');
              case 'Refunded':
                return this.toString('[RefundAmount] [PaymentStatus.Name]');
              case 'Declined':
                // if AmountDeclined is falsy, OrderSummary should show OrderAmount
                if (this.AmountDeclined) return this.toString('[AmountDeclined] [PaymentStatus.Name]');
              // eslint-disable-next-line no-fallthrough
              default:
                return this.toString('[OrderAmount] [PaymentStatus.Name]');
            }
          },
          dependsOn: '{PaymentStatus,AmountPaid,RefundAmount,OrderAmount,AmountDeclined}'
        }
      }
    });
  }
}

/***/ }),

/***/ "./src/framework/model/extensions/signature-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureExtensions", function() { return SignatureExtensions; });
/* harmony import */ var _util_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/util/helpers.ts");

const SignatureExtensions = {
  validateRequiredSignature() {
    // Store the model to use for localization when building the error message
    const model = this.meta.type.model;
    let error = '';
    if (!Object(_util_helpers__WEBPACK_IMPORTED_MODULE_0__["hasValue"])(this.Svg)) {
      error = model.getResource('required');
    }
    return error;
  }
};

/***/ }),

/***/ "./src/framework/model/extensions/workflow-action-extensions.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyWorkflowActionExtensions", function() { return applyWorkflowActionExtensions; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function addWorkflowActionsProperty(entryType, actionDataMap, formsModel) {
  entryType.extend({
    Action_IsLocked: Boolean,
    Attempted_Action: String,
    Workflow_Actions: {
      type: 'Forms.WorkflowAction[]',
      get() {
        return Object.keys(actionDataMap).map(actionType => {
          const actionData = actionDataMap[actionType];
          if (actionData) return formsModel.construct(actionType, _objectSpread(_objectSpread({}, actionData), {}, {
            Form: this
          }));else return null;
        }).filter(a => a !== null);
      }
    },
    Allowed_Actions: {
      type: 'Forms.WorkflowAction[]',
      get: {
        function() {
          return this.Workflow_Actions.filter(a => a.IsAllowed && !a.IsArchived);
        },
        dependsOn: 'Workflow_Actions{IsAllowed,IsArchived}'
      }
    }
  });
  const entryMetaType = entryType.getProperty('Entry').propertyType;
  if (Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(entryMetaType) && entryMetaType.meta.getProperty('Action')) {
    entryType.extend({
      initDefaultAction() {
        // Use setTimeout to ensure that setting the default action occurs after all other initialization
        // events and rules have occurred. Setting the default action is the first "change" to the entry and
        // may rely on some other initialization logic (ex: lookup initialization).
        const firstAllowedAction = this['Allowed_Actions'][0];
        if (firstAllowedAction) this.Entry.Action = firstAllowedAction.ActionName;
      }
    });
    entryType.addRule({
      name: 'UpdateDefaultAction',
      execute() {
        const firstAllowedAction = this['Allowed_Actions'][0];
        if (!this.Action_IsLocked && !this.Form_ReadOnly) {
          if (this.Attempted_Action && !this.Allowed_Actions.find(a => a.ActionName === this.Attempted_Action)) this.Attempted_Action = null;
          if (!this.Attempted_Action) {
            if (firstAllowedAction) this.Entry.Action = firstAllowedAction.ActionName;else this.Entry.Action = null;
          }
        }
      },
      // this rule intentionally only runs in response to allowed actions changing
      onChangeOf: entryType.getPaths('{Allowed_Actions}')
    }).register();
  }
}
function getActiveEntryStatus(entry, statusIdOrName) {
  const newStatus = entry.Entry_Statuses.find(s => s.Id === Number(statusIdOrName) || s.Name === statusIdOrName);
  if (newStatus == null || newStatus.ReplacementId == null) return newStatus;else return getActiveEntryStatus(entry, newStatus.ReplacementId);
}
function addWorkflowNextStatusProperty(entryType) {
  entryType.extend({
    Next_Status: {
      type: String,
      get: {
        function() {
          const entryMeta = this.Entry;
          const action = this.Workflow_Actions.find(a => a.ActionName === entryMeta.Action);
          let nextStatus = entryMeta.Status;
          if (typeof nextStatus !== 'string') nextStatus = getActiveEntryStatus(this, nextStatus).Name;
          if (action && action.NewStatus !== null) nextStatus = getActiveEntryStatus(this, action.NewStatus).Name || nextStatus;
          return nextStatus;
        },
        dependsOn: '{Entry{Action,Status}, Workflow_Actions{NewStatus}, Entry_Statuses}'
      }
    }
  });
}
function applyWorkflowActionExtensions(formsModel, entryType, actionDataMap) {
  if (formsModel.resolveType('Forms.WorkflowAction')) {
    addWorkflowActionsProperty(entryType, actionDataMap, formsModel);
    if (entryType.getProperty('Entry_Statuses')) {
      addWorkflowNextStatusProperty(entryType);
    }
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/calculation-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CalculationConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Prevents calculated properties from being serialized or deserialized.
 */
class CalculationConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.isCalculated;
  }
  serialize() {
    // no need to serialize calculated properties
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
  deserialize() {
    // disallow deserializing calculated properties
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/date-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DateConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);

class DateConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.propertyType === Date && prop.format.specifier === 'd';
  }
  serialize(context, value, prop) {
    return {
      key: prop.name,
      value: value ? value.getFullYear() + (value.getMonth() < 9 ? '-0' : '-') + (value.getMonth() + 1) + (value.getDate() < 10 ? '-0' : '-') + value.getDate() : null
    };
  }
  deserialize(context, value, prop) {
    if (typeof value === 'string') return this.parseDate(value);
    return value;
  }
  parseDate(date) {
    const parts = date.split('-').map(Number);
    return new Date(parts[0], parts[1] - 1, parts[2]);
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/date-time-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DateTimeConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Handles deserialization of JSON date strings
 */
class DateTimeConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.propertyType === Date && !['d', 't'].includes(prop.format.specifier);
  }
  deserialize(context, value, prop) {
    if (typeof value === 'string') return new Date(value);
    return value;
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/entry-extension-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EntryExtensionConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);


// Certain properties are "extensions" but still need to be persisted/deserialized.
const exceptionRegex = /(_QuantityLimit)|(_QuantityUsed)$/i;

/**
 * Prevents entry pseudo-properties from being serialized/deserialized.
 */
class EntryExtensionConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    // do not filter properties on entry index types
    if (prop.containingType.fullName === 'Forms.FormEntryIndex' || prop.containingType.baseType && prop.containingType.baseType.fullName === 'Forms.FormEntryIndex') return false;else if (!context || !context.meta.type.model) return false;
    // Property name must look like 'SomeProperty_PseudoProperty'
    else return /([A-Z][a-z]+_)[A-Z][a-z]+/g.test(prop.name) && !exceptionRegex.test(prop.name);
  }
  serialize() {
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
  deserialize() {
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/entry-meta-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EntryMetaConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);

function getActiveEntryStatus(statuses, statusIdOrName) {
  let newStatus = statuses.filter(s => !s.IsArchived).find(s => s.Id === Number(statusIdOrName) || s.Name === statusIdOrName);
  if (!newStatus) newStatus = statuses.find(s => s.Id === Number(statusIdOrName) || s.Name === statusIdOrName);
  if (newStatus == null || newStatus.ReplacementId == null) return newStatus;else return getActiveEntryStatus(statuses, newStatus.ReplacementId);
}
const INCOMPLETE_STATUS_ID = 0;

// If the status list is missing the entry's status for some reason, pick either the incomplete status, or the first non-incomplete status
// based on whether or not the entry is incomplete.
function getDefaultStatus(statuses, isEntryIncomplete) {
  return statuses.find(s => isEntryIncomplete ? s.Id === INCOMPLETE_STATUS_ID : s.Id !== INCOMPLETE_STATUS_ID && !s.IsArchived);
}

/**
 * Handles deserialization of entry status ids into status names.
 */
class EntryMetaConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.name === 'Entry' && Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(prop.propertyType) && (prop.propertyType.meta.baseType || prop.propertyType.meta).fullName === 'Forms.EntryMeta';
  }
  deserialize(context, value, prop) {
    const entryMeta = value;
    const statuses = context['Entry_Statuses'];
    // if the EntryMeta object is already an entity instance, its status will already be correct
    if (statuses && entryMeta && !(entryMeta instanceof _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["Entity"])) {
      const isEntryIncomplete = !entryMeta.DateSubmitted;
      let status = null;
      if (entryMeta.Status !== null && entryMeta.Status !== undefined) status = getActiveEntryStatus(statuses, entryMeta.Status);
      status = status || getDefaultStatus(statuses, isEntryIncomplete);
      entryMeta.Status = status.Name;
    }
    return super.deserialize(context, value, prop);
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/enum-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EnumConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/model/core.ts");



/**
 * Handles serialization/deserialization of enum values
 */
class EnumConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    const propModelType = prop.propertyType && prop.propertyType['meta'];

    // Not a model type
    if (!propModelType) return false;

    // Convert if the model type is an enum
    return propModelType.enum != null;
  }
  serialize(context, value, prop) {
    if (value) {
      const propModelType = prop.propertyType && prop.propertyType['meta'];
      return {
        key: prop.name,
        value: Array.isArray(propModelType.enum) ? value.Name : value.Id
      };
    }
  }
  deserialize(context, value, prop) {
    if (value) {
      if (typeof value === 'string') {
        return Object(_core__WEBPACK_IMPORTED_MODULE_1__["getEnumInstanceById"])(prop.propertyType['meta'], value) || Object(_core__WEBPACK_IMPORTED_MODULE_1__["getEnumInstanceByName"])(prop.propertyType['meta'], value);
      } else if (typeof value === 'object') {
        if (value.Id) {
          return Object(_core__WEBPACK_IMPORTED_MODULE_1__["getEnumInstanceById"])(prop.propertyType['meta'], value.Id);
        } else if (value.Name) {
          return Object(_core__WEBPACK_IMPORTED_MODULE_1__["getEnumInstanceByName"])(prop.propertyType['meta'], value.Name);
        }
      }
    }
    return value;
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/ignore-circular-reference-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IgnoreCircularReferenceConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/forms-model.ts");



/**
 * Excludes certain properties from serialization because they represent circular references.
 */
class IgnoreCircularReferenceConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    if (prop.name === 'ParentSection') return true;
    // Convert any 'Form' property that is not the FormEntry's FormRef property
    if (prop.name === 'Form' && prop.containingType.fullName !== src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__["FORM_ENTRY_TYPE_NAME"]) return true;
  }
  serialize() {
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/ignore-fileupload-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IgnoreFileUploadConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Prevents FileData properties from being deserialized into new entries.
 */
class IgnoreFileUploadConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  constructor(entryTypeName) {
    super();
    this.entryTypeName = void 0;
    this.entryTypeName = entryTypeName;
  }
  shouldConvert(context, prop) {
    if (!context || prop.propertyType.name !== 'FileDataRef') return false;
    const entry = context.meta.type.fullName === this.entryTypeName ? context : context.Form;
    return entry && entry.meta.isNew;
  }
  deserialize(context, value, prop) {
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/ignore-signature-properties-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IgnoreSignaturePropertiesConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);

class IgnoreSignaturePropertiesConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.containingType.fullName === 'Signature' && context.meta.isNew;
  }

  /**
   * Prevents deserializing Signature sub-properties (Svg/Png/etc) for new instances.
   */
  deserialize(context, value, prop) {
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/initialize-back-references-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return InitializeBackReferencesConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/forms-model.ts");



/**
 * Even though we generate rules to ensure the back references are set when entities
 * are initialized, we need this converter to prevent default value rules from being
 * triggered during the initialization of existing entries.
 */
class InitializeBackReferencesConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    const shouldConvert = prop.name !== 'ParentSection' && prop.name !== 'Form' && Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(prop.propertyType) && (!!prop.propertyType.meta.getProperty('ParentSection') || !!prop.propertyType.meta.getProperty('Form'));
    return shouldConvert;
  }
  deserialize(context, value, prop) {
    const type = Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(prop.propertyType) && prop.propertyType.meta;
    if (value) {
      if (Array.isArray(value)) value = value.map(item => this.deserialize(context, item, prop));else {
        // avoid modifying the provided object
        if (!Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntity"])(value)) value = Object.assign({}, value);
        if (type.getProperty('ParentSection')) value.ParentSection = context;
        if (type.getProperty('Form')) value.Form = context.meta.type.baseType.fullName === src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__["FORM_ENTRY_TYPE_NAME"] ? context : context.Form;
      }
    }
    return value;
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/lookup-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LookupConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_util_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/util/model.ts");



/**
 * Prevents calculated properties from being serialized or deserialized.
 */
class LookupConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return Object(src_util_model__WEBPACK_IMPORTED_MODULE_1__["isLookupField"])(prop);
  }
  serialize(context, value, property) {
    if (Array.isArray(value)) {
      const lookupValue = value;
      return {
        key: property.name,
        value: lookupValue.map(e => e.Id)
      };
    } else if (value) {
      const lookupValue = value;
      return {
        key: property.name,
        value: lookupValue.Id
      };
    }
    return {
      key: property.name,
      value: null
    };
  }
  deserialize(context, value, property) {
    return value;
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/order-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OrderConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/forms-model.ts");



/**
 * Prevents the order off the entry from being serialized or deserialized.
 */
class OrderConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.name === 'Order' && Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(prop.propertyType) && prop.propertyType.meta.fullName === src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__["ORDER_TYPE_NAME"];
  }
  serialize() {
    return _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["IgnoreProperty"];
  }
  deserialize(context, value, property) {
    return super.deserialize(context, value, property);
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/time-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TimeConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);

class TimeConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.propertyType === Date && prop.format.specifier === 't';
  }
  serialize(context, value, prop) {
    return {
      key: prop.name,
      value: value ? (value.getHours() < 10 ? '0' : '') + value.getHours() + (value.getMinutes() < 10 ? ':0' : ':') + value.getMinutes() + (value.getSeconds() < 10 ? ':0' : ':') + value.getSeconds() : null
    };
  }
  deserialize(context, value, prop) {
    if (typeof value === 'string') {
      const fullDate = new Date(value);

      // if a date could not be created from the time data provided, then assume the value is only the time component and
      // deserialize to a common date
      if (isNaN(fullDate.getDate())) return new Date(1970, 0, 1, Number(value.substr(0, 2)), Number(value.substr(3, 2)), Number(value.substr(6, 2)));else return fullDate;
    }
    return value;
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/converters/yesno-converter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return YesNoConverter; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);


/**
 * Preserves legacy prefill options for Yes/No fields
 */
class YesNoConverter extends _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["PropertyConverter"] {
  shouldConvert(context, prop) {
    return prop.propertyType === Boolean;
  }
  deserialize(context, value, prop) {
    // Needed to handle legacy string "true" and "false" variants
    if (typeof value === 'string') {
      if (value.toLowerCase() === 'true') value = true;else if (value.toLowerCase() === 'false') value = false;else if (prop.defaultValue !== undefined) {
        value = prop.format.convertFromString(value);
        if (value === null) value = prop.defaultValue;
      }
    }
    return value;
  }
}

/***/ }),

/***/ "./src/framework/model/serialization/injectors/storage-property-injector.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return StoragePropertyInjector; });
/**
 * Adds properties specific to Cognito storage layer.
 */
class StoragePropertyInjector {
  inject(entity) {
    const results = [];
    if (entity.meta.type.baseType) results.push({
      key: '$type',
      value: 'Cognito.' + entity.meta.type.fullName
    });
    if (entity['$version']) results.push({
      key: '$version',
      value: entity['$version']
    });
    if (entity['$etag']) results.push({
      key: '$etag',
      value: entity['$etag']
    });
    return results;
  }
}

/***/ }),

/***/ "./src/framework/payment/helpers.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "roundToPrecision", function() { return roundToPrecision; });
/**
 * Rounds the given number to a particular number of digits
 * NOTE: Ported from 'Cognito.Forms.roundToEven'
 * @param num The number to rund
 * @param digits The number of digits to round to
 */
function roundToPrecision(num, digits) {
  digits = digits || 0;
  const multiplier = Math.pow(10, digits);
  const nFixed = +(digits ? num * multiplier : num).toFixed(8);
  const nInt = Math.floor(nFixed);
  const nDecimals = nFixed - nInt;
  const e = 1e-8;
  const remainder = nDecimals > 0.5 - e && nDecimals < 0.5 + e ? nInt % 2 === 0 ? nInt : nInt + 1 : Math.round(nFixed);
  return digits ? remainder / multiplier : remainder;
}

/***/ }),

/***/ "./src/framework/payment/order-builder.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OrderBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rebuildOrder", function() { return rebuildOrder; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/framework/payment/helpers.ts");

class OrderBuilder {
  constructor(entry, requirePayment) {
    // -------------- Properties --------------
    this.entry = void 0;
    this.lineItemMetaData = [];
    this.transactionFees = [];
    this.processingFees = [];
    this.applicationFee = null;
    this.requirePayment = void 0;
    this.domesticCountryCode = 'US';
    this.processingFeeDescription = null;
    this.processorName = null;
    this.europeanCountries = void 0;
    this.processorFeeModes = void 0;
    // -------------- Injections --------------
    this.$culture = void 0;
    this.$resource = void 0;
    this.$namespace = void 0;
    // -------------- Data --------------
    this.idIndex = 0;
    this.cardData = null;
    this.additionalFees = 0;
    this.processorFee = 0;
    const model = entry.meta.type.model;
    this.$namespace = model.$namespace;
    this.$culture = model.$culture;
    this.$resource = model.getResource.bind(model);
    this.entry = entry;
    this.lineItemMetaData = entry.Line_Item_Metadata;
    this.transactionFees = entry.Transaction_Fees;
    this.processingFees = entry.Processing_Fees;
    this.applicationFee = entry.Application_Fee;
    this.requirePayment = requirePayment;
    this.domesticCountryCode = entry.Domestic_Country_Code;
    this.processingFeeDescription = entry.Processing_Fee_Description;
    this.europeanCountries = entry.European_Countries;
    this.processorFeeModes = entry.Processor_Fee_Modes;
  }

  // -------------- Computed --------------
  get billingFields() {
    if (!this.billingFieldPaths) return null;
    const values = {};
    Object.keys(this.billingFieldPaths).forEach(billingField => {
      const path = this.billingFieldPaths[billingField];
      if (!path) return;
      const paths = path.split('.');
      let parentEntity = this.entry;
      let property = null;

      // Find the property and the parent instance
      for (let i = 0; i < paths.length; i++) {
        const p = paths[i];
        // Can not be in a dynamic container
        property = parentEntity.meta.type.getPath(p);
        if (i !== paths.length - 1) parentEntity = parentEntity ? parentEntity[p] : null;

        // If the parent is unset/empty (Lookup), return
        if (!parentEntity) return;
      }
      const val = property.value(parentEntity);
      if (val) values[billingField] = val;
    });
    return values;
  }
  get billingFieldPaths() {
    return {
      Name: this.entry.Billing_Name_Field,
      Email: this.entry.Billing_Email_Field,
      Address: this.entry.Billing_Address_Field,
      Phone: this.entry.Billing_Phone_Field
    };
  }
  get subtotal() {
    return this.sum(this.lineItems, 'Amount');
  }
  get fees() {
    if (!this.transactionFees && !this.processingFees) return null;
    const subtotal = this.subtotal;

    // Fees should not be present if there is no money due
    if (subtotal <= 0) return [];

    // Parse the transaction fees list
    const fees = [];

    // Calculate the amount for each fee and the display value
    this.transactionFees.forEach(tFee => {
      if (!tFee.Description) return;
      let amount = tFee.FixedAmount || 0;
      if (tFee.PercentageAmount) {
        amount += this.roundCurrency(subtotal * tFee.PercentageAmount);
      }
      fees.push({
        Name: tFee.Description,
        Amount: amount,
        Description: tFee.Description,
        IsProcessingFee: false
      });
    });
    this.additionalFees = this.sum(fees, 'Amount');

    // Calculate the amount for each processing fee, the display value, and set the description
    const processingFee = this.calculateProcessingFee();
    if (processingFee) {
      fees.push(processingFee);
    }
    return fees;
  }
  get orderAmount() {
    return this.subtotal + this.sum(this.fees, 'Amount');
  }
  get lineItems() {
    return this.updateLineItems();
  }

  // -------------- Methods --------------
  getOrderInfo() {
    const orderInfo = {};
    Object.keys(this.billingFields).forEach(key => {
      orderInfo[key] = this.billingFields[key];
    });
    orderInfo.Amount = this.orderAmount;
    return orderInfo;
  }
  updateLineItems() {
    let lineItems = [];
    this.lineItemMetaData.forEach(lineItemData => {
      const lst = this.entry.meta.type.getPath(lineItemData.path);
      lineItemData.propertyList = lst['properties'] ? lst['properties'] : [lst];
    });
    this.lineItemMetaData.forEach(lineItemData => {
      const propertyList = lineItemData.propertyList.slice();
      this.idIndex = 0;

      // Create the line items for the property
      const propertyLineItems = this.generateLineItems(lineItemData, propertyList, this.entry, '', '');

      // If line items were created, add the line items to the list
      if (propertyLineItems) {
        lineItems = lineItems.concat(propertyLineItems);
      }
    });
    lineItems = lineItems.sort((item1, item2) => {
      return this.idCompare(item1.GroupId.split('-'), item2.GroupId.split('-'));
    });

    // Line items should appear in the order they appear on the form unless they have a group
    // Grouped line items should appear in the order they appear on the form
    // The group is placed where it is first encountered
    return lineItems.map(gLineItem => {
      return {
        Name: gLineItem.Name,
        Description: gLineItem.Description,
        Group: gLineItem.Group,
        Amount: gLineItem.Amount ? gLineItem.Amount : 0
      };
    });
  }
  idCompare(item1, item2) {
    const i1 = parseInt(item1[0]) || -1;
    const i2 = parseInt(item2[0]) || -1;
    if (i1 === i2) return i1 === -1 ? 0 : this.idCompare(item1.slice(1), item2.slice(1));
    return i1 > i2 ? 1 : -1;
  }

  // Create line items for the given property list
  generateLineItems(lineItemData, propertyList, parentEntity, group, groupId) {
    const property = propertyList[0];

    // If the field is always hidden, its value should be constant to differentiate it from conditionally visible fields
    let isConstant = false;
    const visibleProp = parentEntity.meta.type.getProperty("".concat(property.path, "_Visible"));
    if (visibleProp) isConstant = visibleProp.isConstant;

    // Conditionally hidden fields do not generate line items
    if (parentEntity["".concat(property.path, "_Visible")] === false && !isConstant && !parentEntity["".concat(property.path, "_IncludeInInvoice")]) return [];

    // Non-container, leaf property
    if (propertyList.length === 1) {
      // TODO: For choice checkboxes, amount property doesn't look right
      return this.createLineItems(lineItemData, propertyList, parentEntity, group, groupId);
    }
    this.idIndex++;
    const instance = parentEntity[property.path];
    let lineItems = [];

    // Dynamic container (ie: repeating section)
    if (Array.isArray(instance)) {
      lineItems = this.createListLineItems(instance, lineItemData, propertyList, parentEntity, group, groupId);
    } else {
      propertyList = propertyList.slice(1);
      // Non-dynamic container (ie: section)
      lineItems = this.generateLineItems(lineItemData, propertyList, instance, group, groupId);
    }
    this.idIndex--;
    return lineItems;
  }

  // Create line items for a dynamic container (ie: repeating section)
  createListLineItems(entityList, lineItemData, propertyList, parentEntity, group, groupId) {
    let containerLineItems = [];
    const listProp = propertyList[0];
    const itemLabel = parentEntity["".concat(listProp.path, "_ItemLabel")];
    if (!groupId) groupId = lineItemData.id.slice();
    const groupIdLastHalf = groupId.splice(this.idIndex);
    this.idIndex++;

    // Create line items for each item in the container
    for (const instance of entityList) {
      group = (itemLabel || 'Item') + ' ' + instance.ItemNumber;
      // Add the item number to the group id so that sorting will factor in the item number
      const itemGroupId = groupId.concat([instance.ItemNumber]).concat(groupIdLastHalf);
      const lineItems = this.generateLineItems(lineItemData, propertyList.slice(1), instance, group, itemGroupId);
      if (lineItems) {
        containerLineItems = containerLineItems.concat(lineItems);
      }
    }
    this.idIndex--;
    return containerLineItems;
  }

  // Create line items for a single property
  createLineItems(lineItemData, propertyList, parentEntity, group, groupId) {
    const property = propertyList[0];
    const parentType = parentEntity.meta.type;
    // Get the name property if it exists
    const name = this.getLineItemName(lineItemData, property, parentEntity, parentType);
    if (!groupId) {
      groupId = lineItemData.id;
    }
    groupId = groupId.join('-');
    if (!property.isList) {
      const lineItem = this.createLineItem(property, lineItemData, name, group, groupId, parentEntity, parentType);
      return lineItem ? [lineItem] : [];
    }
    const selectedChoicesProperty = parentEntity.meta.type.getProperty(property.path);
    if (!selectedChoicesProperty) return;
    const selectedChoices = selectedChoicesProperty.value(parentEntity);
    if (lineItemData.type === 'Lookup') {
      return this.createLookupCheckboxLineItems(lineItemData, selectedChoices, name, group, groupId);
    } else if (lineItemData.type === 'Choice') {
      return this.createChoiceCheckboxLineItems(lineItemData, selectedChoices, name, group, groupId, parentEntity, parentType);
    }
  }
  createLineItem(property, lineItemData, name, group, groupId, parentEntity, parentType) {
    const amountProperty = lineItemData.amountProperty ? parentType.getProperty(lineItemData.amountProperty) : property;
    const amount = amountProperty.value(parentEntity);

    // Create the description
    const description = this.getLineItemDescription(lineItemData, property, parentEntity, parentType);

    // Negative line items should not be created (unless allowed)
    const lineItemIsNegative = amount < 0 && !lineItemData.allowNegatives;

    // $0 line items should not be created for non-Choice/Lookup/YesNo fields
    const zeroDollarLineItem = !amount && !['Choice', 'Lookup', 'YesNo'].includes(lineItemData.type);

    // For quantity-specified line items, if the quantity isn't specified don't create the line item
    const hasUnspecifiedQuantity = lineItemData.quantitySelected && (!description || description.indexOf('(') === -1);

    // Choice/Lookups with no value selected should not have line items
    const choiceOrLookupHasNoValue = ['Choice', 'Lookup'].includes(lineItemData.type) && property.value(parentEntity) === null;

    // YesNo fields with a false value should not have line items.
    const yesNoHasFalseValue = ['YesNo'].includes(lineItemData.type) && property.value(parentEntity) === false;
    if (zeroDollarLineItem || lineItemIsNegative || hasUnspecifiedQuantity || choiceOrLookupHasNoValue || yesNoHasFalseValue) return null;

    // Return the line item
    return {
      Amount: this.roundCurrency(amount),
      Name: name,
      Group: group,
      Description: description,
      GroupId: groupId
    };
  }
  createLookupCheckboxLineItems(lineItemData, selectedChoices, name, group, groupId) {
    return selectedChoices.map(lookupEntry => {
      const description = lookupEntry.toString(lineItemData.lookup.labelFormat);
      let parent = lookupEntry;
      if (!lineItemData.lookup.pricePath || !parent.meta.type.getPath(lineItemData.lookup.pricePath)) return null;
      const paths = lineItemData.lookup.pricePath.split('.');

      // Note: The price path can not be in a repeating section
      paths.slice(0, -1).forEach(path => {
        parent = parent[path];
      });
      const price = parent[paths.slice(-1)[0]];
      return {
        Amount: price,
        Name: name,
        Group: group,
        Description: description,
        GroupId: groupId
      };
    }).filter(lineItem => !!lineItem);
  }
  createChoiceCheckboxLineItems(lineItemData, selectedChoices, name, group, groupId, parentEntity, parentType) {
    const property = lineItemData.propertyList[lineItemData.propertyList.length - 1];
    const choicesProperty = parentEntity.meta.type.getProperty(property.path + '_Choices');
    if (!choicesProperty) return [];
    const choiceOptions = choicesProperty.value(parentEntity);
    return selectedChoices.map(label => {
      const choiceOption = choiceOptions.find(c => c.Label === label);
      if (choiceOption) return {
        Amount: choiceOption.Price,
        Name: name,
        Group: group,
        Description: label,
        GroupId: groupId
      };else return null;
    }).filter(item => !!item);
  }

  // Get the description for a line item
  getLineItemDescription(lineItemData, property, parentEntity, parentType) {
    let description = '';
    if (lineItemData.descriptionProperty) description = parentEntity[lineItemData.descriptionProperty] || '';else if (lineItemData.type === 'Choice' || lineItemData.type === 'Lookup') description = parentEntity.toString("[".concat(property.path, "]"));
    if (lineItemData.quantitySelected) {
      const quantitySelected = parentType.getProperty(lineItemData.quantitySelected);
      const quantityValue = quantitySelected ? quantitySelected.value(parentEntity) : null;
      if (quantityValue) description += ' (' + quantityValue + ')';else return null;
    }
    return description.trim();
  }
  getLineItemName(lineItemData, property, parentEntity, parentType) {
    if (lineItemData.nameProperty) {
      const nameProperty = parentType.getProperty(lineItemData.nameProperty);
      if (nameProperty) return nameProperty.value(parentEntity);
    }
    if (property.label) {
      if (property.labelIsFormat) {
        if (lineItemData.isWithinTable) {
          // Labels for fields in tables are evaulated in the table's parent context (since the labels are used as column headers)
          const tableParentEntity = parentEntity['ParentSection'] || parentEntity['Form'];
          return tableParentEntity.toString(property.label);
        } else {
          return parentEntity.toString(property.label);
        }
      } else {
        return property.label;
      }
    }
  }
  calculateProcessingFee() {
    const subtotal = this.roundCurrency(this.subtotal + this.additionalFees);
    let processingFees = [];
    if (!subtotal || !this.processingFees || !(this.requirePayment || this.entry.Require_Payment || this.entry.Save_Customer_Card)) return null;
    const processingFeeDescription = this.processingFeeDescription ? this.processingFeeDescription : this.$resource('payment-processing-fees');
    const fee = {
      Name: processingFeeDescription,
      Amount: 0,
      Description: processingFeeDescription,
      IsProcessingFee: true
    };
    if (this.processingFees.length > 1) {
      const cardData = this.entry.Entry.PaymentToken ? this.entry.Entry.PaymentToken.Card : null;
      if (!cardData) {
        // If there is no card data when using the Stripe Element, assume the largest of the fees
        processingFees.push(this.getMaximumFee());
      } else processingFees.push(this.getCardFee(cardData));
    } else processingFees = this.processingFees;
    if (!processingFees.length && !this.applicationFee) return null;
    const fees = {
      processing: {
        percent: this.sum(processingFees, 'PercentageAmount'),
        fixed: this.sum(processingFees, 'FixedAmount')
      },
      application: {
        percent: this.applicationFee ? this.applicationFee.PercentageAmount || 0 : 0,
        fixed: this.applicationFee ? this.applicationFee.FixedAmount || 0 : 0
      }
    };
    let feeAmt = this.roundCurrency(subtotal + fees.processing.fixed + fees.application.fixed);
    feeAmt = this.roundCurrency(feeAmt / (1 - (fees.processing.percent + fees.application.percent))) - subtotal;
    const totalWithFees = subtotal + feeAmt;
    const processorFee = this.roundCurrency(totalWithFees * fees.processing.percent + fees.processing.fixed);
    const applicationFee = this.applicationFee ? this.roundCurrency(totalWithFees * fees.application.percent + fees.application.fixed) : 0;
    fee.Amount = applicationFee + processorFee;
    this.processorFee = fee.Amount;

    // Calculate the amount for each processing fee, the display value, and set the description
    return fee;
  }
  getMaximumFee() {
    const subtotal = this.roundCurrency(this.subtotal + this.additionalFees);
    let maxFee = null;
    let maxFeeAmount = 0;
    this.processingFees.forEach(fee => {
      const feeAmount = fee.FixedAmount + fee.PercentageAmount * subtotal;
      if (feeAmount > maxFeeAmount) {
        maxFee = fee;
        maxFeeAmount = feeAmount;
      }
    });
    return maxFee;
  }
  getCardFee(cardData) {
    if (!this.processingFees) return null;
    const isAmex = cardData.Brand === 'amex';
    const isEuropean = this.europeanCountries.indexOf(cardData.Country) >= 0;
    const isInternational = this.domesticCountryCode !== cardData.Country;
    const fees = this.processingFees.filter(fee => {
      if (!fee.Modes) fee.Modes = this.getFlags(fee.Mode, this.processorFeeModes);
      if (fee.Modes.indexOf('Any') >= 0) return true;
      if (isAmex && fee.Modes.indexOf('AMEX') >= 0) return true;
      if (!isAmex && fee.Modes.indexOf('NonAMEX') >= 0) return true;
      if (isEuropean && fee.Modes.indexOf('EuropeanCards') >= 0) return true;
      if (!isEuropean && fee.Modes.indexOf('NonEuropeanCards') >= 0) return true;
      if (isInternational && fee.Modes.indexOf('International') >= 0) return true;
      if (!isInternational && fee.Modes.indexOf('Domestic') >= 0) return true;
      return false;
    });
    if (fees.length === 1) return fees[0];

    // These fees take priority over other fees. For example, if the card is AMEX and Domestic, there will be two fees. However,
    // the AMEX fee is higher priority than the Domestic fee
    const priorityFees = fees.filter(fee => {
      return fee.Modes.indexOf('AMEX') >= 0 || fee.Modes.indexOf('International') >= 0 || fee.Modes.indexOf('EuropeanCards') >= 0;
    });
    return priorityFees.length >= 1 ? priorityFees[0] : fees[0];
  }
  getFlags(value, options) {
    const flags = [];
    if (value === 0) return flags;

    // Keys from smallest value to largest value
    const keys = Object.keys(options).sort((k1, k2) => {
      return options[k1] > options[k2] ? 1 : -1;
    });
    for (let i = keys.length - 1; i >= 0; i--) {
      const key = keys[i];
      const val = options[key];
      if (value >= val) {
        flags.push(key);
        value -= val;
      }
    }
    return flags;
  }
  roundCurrency(num) {
    return Object(_helpers__WEBPACK_IMPORTED_MODULE_0__["roundToPrecision"])(num, this.$culture.numberFormat.CurrencyDecimalDigits);
  }
  sum(lst, property) {
    if (lst.length === 0) return 0;
    return lst.length === 1 ? lst[0][property] : lst.map(f => {
      return f[property];
    }).reduce((f1, f2) => {
      return f1 + f2;
    }, 0);
  }
}
function rebuildOrder(entry, order, rebuildOrderOptions) {
  if (!order || order.AmountPaid) {
    return false;
  }
  const Fee = entry.meta.type.model.$namespace.Payment.Fee;
  const LineItem = entry.meta.type.model.$namespace.Payment.LineItem;
  const orderBuilder = new OrderBuilder(entry, rebuildOrderOptions === null || rebuildOrderOptions === void 0 ? void 0 : rebuildOrderOptions.requirePayment);
  order.LineItems.splice(0, order.LineItems.length, ...orderBuilder.lineItems.map(d => new LineItem(d)));
  order.Fees.splice(0, order.Fees.length, ...orderBuilder.fees.map(d => new Fee(d)));
  const billingFields = orderBuilder.billingFields;
  order.update('BillingName', billingFields.Name);
  order.update('EmailAddress', billingFields.Email);
  order.update('BillingAddress', billingFields.Address);
  order.update('PhoneNumber', billingFields.Phone);
  order.Rebuild_Count += 1;
  return true;
}

/***/ }),

/***/ "./src/localization/countries lazy recursive ^\\.\\/.*\\.json$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./bg.json": [
		"./src/localization/countries/bg.json",
		"bg-json"
	],
	"./da.json": [
		"./src/localization/countries/da.json",
		"da-json"
	],
	"./de.json": [
		"./src/localization/countries/de.json",
		"de-json"
	],
	"./el.json": [
		"./src/localization/countries/el.json",
		"el-json"
	],
	"./en.json": [
		"./src/localization/countries/en.json",
		"en-json"
	],
	"./es.json": [
		"./src/localization/countries/es.json",
		"es-json"
	],
	"./fi.json": [
		"./src/localization/countries/fi.json",
		"fi-json"
	],
	"./fr.json": [
		"./src/localization/countries/fr.json",
		"fr-json"
	],
	"./hi.json": [
		"./src/localization/countries/hi.json",
		"hi-json"
	],
	"./hr.json": [
		"./src/localization/countries/hr.json",
		"hr-json"
	],
	"./hu.json": [
		"./src/localization/countries/hu.json",
		"hu-json"
	],
	"./it.json": [
		"./src/localization/countries/it.json",
		"it-json"
	],
	"./ja.json": [
		"./src/localization/countries/ja.json",
		"ja-json"
	],
	"./nb.json": [
		"./src/localization/countries/nb.json",
		"nb-json"
	],
	"./nl.json": [
		"./src/localization/countries/nl.json",
		"nl-json"
	],
	"./pl.json": [
		"./src/localization/countries/pl.json",
		"pl-json"
	],
	"./pt.json": [
		"./src/localization/countries/pt.json",
		"pt-json"
	],
	"./sv.json": [
		"./src/localization/countries/sv.json",
		"sv-json"
	],
	"./th.json": [
		"./src/localization/countries/th.json",
		"th-json"
	],
	"./tr.json": [
		"./src/localization/countries/tr.json",
		"tr-json"
	],
	"./zh.json": [
		"./src/localization/countries/zh.json",
		"zh-json"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(function() {
		return __webpack_require__.t(id, 3);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = "./src/localization/countries lazy recursive ^\\.\\/.*\\.json$";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./src/localization/resources lazy recursive ^\\.\\/.*$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./bg": [
		"./src/localization/resources/bg.js",
		"bg"
	],
	"./bg.js": [
		"./src/localization/resources/bg.js",
		"bg"
	],
	"./da": [
		"./src/localization/resources/da.js",
		"da"
	],
	"./da.js": [
		"./src/localization/resources/da.js",
		"da"
	],
	"./de": [
		"./src/localization/resources/de.js",
		"de"
	],
	"./de.js": [
		"./src/localization/resources/de.js",
		"de"
	],
	"./el": [
		"./src/localization/resources/el.js",
		"el"
	],
	"./el.js": [
		"./src/localization/resources/el.js",
		"el"
	],
	"./en": [
		"./src/localization/resources/en.js",
		"en"
	],
	"./en.js": [
		"./src/localization/resources/en.js",
		"en"
	],
	"./es": [
		"./src/localization/resources/es.js",
		"es"
	],
	"./es.js": [
		"./src/localization/resources/es.js",
		"es"
	],
	"./fi": [
		"./src/localization/resources/fi.js",
		"fi"
	],
	"./fi.js": [
		"./src/localization/resources/fi.js",
		"fi"
	],
	"./fr": [
		"./src/localization/resources/fr.js",
		"fr"
	],
	"./fr.js": [
		"./src/localization/resources/fr.js",
		"fr"
	],
	"./hi": [
		"./src/localization/resources/hi.js",
		"hi"
	],
	"./hi.js": [
		"./src/localization/resources/hi.js",
		"hi"
	],
	"./hr": [
		"./src/localization/resources/hr.js",
		"hr"
	],
	"./hr.js": [
		"./src/localization/resources/hr.js",
		"hr"
	],
	"./hu": [
		"./src/localization/resources/hu.js",
		"hu"
	],
	"./hu.js": [
		"./src/localization/resources/hu.js",
		"hu"
	],
	"./it": [
		"./src/localization/resources/it.js",
		"it"
	],
	"./it.js": [
		"./src/localization/resources/it.js",
		"it"
	],
	"./ja": [
		"./src/localization/resources/ja.js",
		"ja"
	],
	"./ja.js": [
		"./src/localization/resources/ja.js",
		"ja"
	],
	"./nb": [
		"./src/localization/resources/nb.js",
		"nb"
	],
	"./nb.js": [
		"./src/localization/resources/nb.js",
		"nb"
	],
	"./nl": [
		"./src/localization/resources/nl.js",
		"nl"
	],
	"./nl.js": [
		"./src/localization/resources/nl.js",
		"nl"
	],
	"./pl": [
		"./src/localization/resources/pl.js",
		"pl"
	],
	"./pl.js": [
		"./src/localization/resources/pl.js",
		"pl"
	],
	"./pt": [
		"./src/localization/resources/pt.js",
		"pt"
	],
	"./pt.js": [
		"./src/localization/resources/pt.js",
		"pt"
	],
	"./sv": [
		"./src/localization/resources/sv.js",
		"sv"
	],
	"./sv.js": [
		"./src/localization/resources/sv.js",
		"sv"
	],
	"./th": [
		"./src/localization/resources/th.js",
		"th"
	],
	"./th.js": [
		"./src/localization/resources/th.js",
		"th"
	],
	"./tl": [
		"./src/localization/resources/tl.js",
		"tl"
	],
	"./tl.js": [
		"./src/localization/resources/tl.js",
		"tl"
	],
	"./tr": [
		"./src/localization/resources/tr.js",
		"tr"
	],
	"./tr.js": [
		"./src/localization/resources/tr.js",
		"tr"
	],
	"./zh": [
		"./src/localization/resources/zh.js",
		"zh"
	],
	"./zh.js": [
		"./src/localization/resources/zh.js",
		"zh"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(function() {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = function webpackAsyncContextKeys() {
	return Object.keys(map);
};
webpackAsyncContext.id = "./src/localization/resources lazy recursive ^\\.\\/.*$";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./src/mixins/form-status.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormStatus", function() { return FormStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormStatusProp", function() { return FormStatusProp; });
let FormStatus = /*#__PURE__*/function (FormStatus) {
  FormStatus["Default"] = "default";
  FormStatus["Success"] = "success";
  FormStatus["InProgress"] = "validating";
  FormStatus["Error"] = "error";
  FormStatus["Captcha"] = "captcha";
  FormStatus["Authenticating"] = "authenticating";
  return FormStatus;
}({});
const FormStatusProp = {
  type: String,
  default: FormStatus.Default,
  validator: value => {
    return Object.values(FormStatus).includes(value);
  }
};

/***/ }),

/***/ "./src/style/_toast-message.scss":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_toast-message.scss");
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1__);

            

var options = {"attributes":{"class":"cog-style"}};

options.insert = "head";
options.singleton = false;

var update = _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a, options);


if (true) {
  if (!_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals;

    module.hot.accept(
      "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_toast-message.scss",
      function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!./src/style/_toast-message.scss");
/* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1__);
(function () {
        if (!isEqualLocals(oldLocals, _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals, undefined)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals;

              update(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this)
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

/* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_toast_message_scss__WEBPACK_IMPORTED_MODULE_1___default.a.locals || {});

/***/ }),

/***/ "./src/util/base62.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toBase62", function() { return toBase62; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromBase62", function() { return fromBase62; });
function toBase62(number) {
  if (typeof number === 'undefined' || number === null) {
    return '';
  }
  if (typeof number !== 'number') {
    throw new Error('Function `toBase62` recieved invalid \'number\' parameter of type \'' + typeof number + '\'.');
  } else if (number === 0) {
    return '';
  }
  const digits = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let text = '';
  let value = number;
  while (value > 0) {
    const remainder = value % 62;
    value = Math.floor(value / 62);
    text = digits.charAt(remainder) + text;
  }
  return text;
}
function fromBase62(text) {
  if (typeof text === 'undefined' || text === null) {
    return 0;
  }
  if (typeof text !== 'string') {
    throw new Error('Function `fromBase62` recieved invalid \'text\' parameter of type \'' + typeof text + '\'.');
  } else if (text.length === 0) {
    return 0;
  }
  const digits = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  let number = 0;
  for (let i = text.length - 1; i >= 0; i--) {
    const c = text[i];
    const idx = digits.indexOf(c);
    const b = text.length - 1 - i;
    const pow = Math.pow(62, b);
    number += pow * idx;
  }
  return number;
}

/***/ }),

/***/ "./src/util/combined-number.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineUInt16sWithPadding", function() { return combineUInt16sWithPadding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitUInt32WithPadding", function() { return splitUInt32WithPadding; });
function combineUInt16sWithPadding(n1, n2, randomByte1, randomByte2) {
  if (n1 > 0xffff) {
    throw new Error('Value ' + n1 + ' exceeds maximum unsigned short value of ' + 0xffff + '.');
  }
  const n1Bytes = n1 > 0xff ? 2 : 1;
  if (n2 > 0xffff) {
    throw new Error('Value ' + n2 + ' exceeds maximum unsigned short value of ' + 0xffff + '.');
  }
  const n2Bytes = n2 > 0xff ? 2 : 1;
  if (n1Bytes > 1 && n2Bytes > 1) {
    throw new Error('Both values ' + n1 + ' and ' + n2 + ' exceeds maximum byte value of ' + 0xff + '.');
  }
  let result = 0;
  let randomByte;
  if (arguments.length > 2 && typeof randomByte1 === 'number') {
    randomByte = randomByte1;
  } else {
    randomByte = Math.floor(Math.random() * 255);
  }
  randomByte = randomByte & 0xff;

  // Bytes for n2
  result += n2;

  // Bytes for n1
  result += n1 << (n2Bytes === 2 ? 16 : 8) >>> 0;
  if (n1Bytes === 1 && n2Bytes === 1) {
    // Random byte
    result += randomByte << 16;

    // Generate another random byte for the header
    if (arguments.length > 3 && typeof randomByte2 === 'number') {
      randomByte = randomByte2;
    } else {
      randomByte = Math.floor(Math.random() * 255);
    }
    randomByte = randomByte & 0xff;
  }

  // Header byte: n1 and n2 byte size, and random bits
  let headerByte = 0;
  headerByte += n2Bytes;
  headerByte += n1Bytes << 2;
  headerByte += randomByte << 4 & 0x000000f0;
  result += headerByte << 24 >>> 0;
  return result;
}
function splitUInt32WithPadding(i) {
  const headerByte = (i & 0xff000000) >>> 24;
  let n2;
  const n2Bytes = headerByte & 0x07 & 0x3;
  if (n2Bytes === 2) {
    n2 = i & 0x0000ffff;
  } else {
    n2 = i & 0x000000ff;
  }
  let n1;
  const n1Bytes = (headerByte & 0x0f) >> 2 & 0x3;
  if (n2Bytes === 2) {
    n1 = i >>> 16 & 0xff;
  } else if (n1Bytes === 2) {
    n1 = i >>> 8 & 0xffff;
  } else {
    n1 = i >>> 8 & 0xff;
  }
  return [n1, n2];
}

/***/ }),

/***/ "./src/util/helpers.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasValue", function() { return hasValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$format", function() { return $format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasProp", function() { return hasProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shallowClone", function() { return shallowClone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeEmptyProps", function() { return removeEmptyProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFormatPrecision", function() { return getFormatPrecision; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalizeString", function() { return capitalizeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalizeKeys", function() { return capitalizeKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeExtraSpace", function() { return removeExtraSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeHtml", function() { return escapeHtml; });
/**
 * Determine whether the given value satisfies "required" validation
 * NOTE: Taken from 'RequiredRule.hasVavlue' in ExoWeb
 * @param val The value to test for requiredness
 */
function hasValue(val) {
  return val !== undefined && val !== null && (typeof val !== 'string' || val.trim() !== '') && (!(val instanceof Array) || val.length > 0);
}

/**
 * Evaluates a numerical index based format string, akin to `String.format()` in .NET.
 * NOTE: Take from $format in ExoWeb...
 * @param template The format template string
 * @param values The values to insert for tokens in the template string
 */

function $format(template) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (!args || args.length === 0) return template;
  const source = args.length === 1 && args[0] instanceof Array ? args[0] : args;
  return template.replace(/\{([0-9]+)\}/ig, function (match, p1) {
    const index = parseInt(p1, 10);
    let result = source[index];
    if (result !== null && result !== undefined && typeof result !== 'string') {
      // Convert non string values to string
      result = result.toString();
    }
    return result;
  });
}

/**
 * Shorthand for `Object.hasOwnProperty`
 */
// todo: necessary?
function hasProp(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/**
 * Clones the top-level own properties of an object
 * @param obj The object to clone
 */
// todo: necessary? Object.assign() accomplishes the same
function shallowClone(obj) {
  const result = {};
  for (const prop in obj) {
    if (hasProp(obj, prop)) {
      result[prop] = obj[prop];
    }
  }
  return result;
}

/**
 * Performs a deep removal of null and undefined properties from an object.
 * @param obj The object from which to remove properties
 */
function removeEmptyProps(obj) {
  Object.keys(obj).forEach(k => {
    if (obj[k] && typeof obj[k] === 'object') removeEmptyProps(obj[k]);else if (obj[k] === null || obj[k] === undefined) delete obj[k];
  });
  return obj;
}
;

/**
 * Gets the precision of the format
 * @param format String of the format ex. "C", "P1", "N0"
 * @returns Number
 */
function getFormatPrecision(format) {
  if (format === 'C') return 2;
  let precision = parseInt(format.replace(/[^0-9]/, '')) || 0;
  if (format.startsWith('P')) precision += 2;
  return precision;
}

/**
 * Returns a string with the first letter Capitalized
 * @param val
 * @returns String
 */
function capitalizeString(val) {
  if (!val) return val;else return val.charAt(0).toUpperCase() + val.substr(1);
}

/**
 * Recursively capitalizes property keys within an object. Does not modify the provided object.
 * @param obj The object on which to recursively capitalize property keys.
 * @returns Object
 */
function capitalizeKeys(obj) {
  if (!obj) return;else if (typeof obj === 'string') return obj;
  const keys = Object.keys(obj);
  let n = keys.length;
  const newObj = {};
  while (n--) {
    const key = keys[n];
    let data;
    if (Array.isArray(obj[key])) data = obj[key].map(z => {
      return capitalizeKeys(z);
    });else if (typeof obj[key] === 'object') data = capitalizeKeys(obj[key]);else data = obj[key];
    newObj[capitalizeString(key)] = data;
  }
  return newObj;
}
;
function removeExtraSpace(text) {
  return text.replace(/ {2,}/g, ' ').trim();
}
;
function escapeHtml(value) {
  return value ? value.replace(/&/g, '&amp;').replace(/""/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : value;
}

/***/ }),

/***/ "./src/util/model.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLookupField", function() { return isLookupField; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "visitEntity", function() { return visitEntity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "visitType", function() { return visitType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unregisterEntity", function() { return unregisterEntity; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/framework/forms-model.ts");



/**
 * Determine if the field is a lookup based off property name and type.
 * @param property
 * @returns boolean
 */
function isLookupField(property) {
  const type = Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(property.propertyType) && property.propertyType.meta;
  return property.name !== 'ParentSection' && property.name !== 'Form' && type && type.baseType && type.baseType.fullName === src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__["FORM_ENTRY_TYPE_NAME"];
}

/**
 * Recursively visit all model properties of the provided entity.
 */
function visitEntity(entity, callback, options) {
  const visited = new Set();
  function visit(entity) {
    let parentProperty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (entity === null || entity === undefined || visited.has(entity)) return;
    visited.add(entity);
    for (const p of entity.meta.type.properties) {
      // Don't visit circular properties
      if (!options.followCircularProperties && (p.name === 'ParentSection' || p.name === 'Form' && p.containingType.fullName !== src_framework_forms_model__WEBPACK_IMPORTED_MODULE_1__["FORM_ENTRY_TYPE_NAME"])) continue;
      callback(entity, p, parentProperty);
      if (!options.followLookups && isLookupField(p)) continue;
      if (Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(p.propertyType)) {
        if (p.isList) (p.value(entity) || []).forEach(item => visit(item, p));else visit(p.value(entity), p);
      }
    }
  }
  visit(entity);
}
function visitType(type, callback) {
  const visited = new Set();
  let path = '';
  function visit(type) {
    if (type === null || type === undefined || visited.has(type)) return;
    visited.add(type);
    callback(type, path);
    for (const p of type.properties) {
      if (Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(p.propertyType)) {
        if (path.length) path += '.';
        path += p.name;
        visit(p.propertyType.meta);
        path = path.substring(0, path.lastIndexOf('.'));
      }
    }
  }
  visit(type);
}

/**
 * Remove the given entity from the model.js instance pool and known objects array
 */
function unregisterEntity(instance) {
  const key = instance.meta.id.toLowerCase();
  for (let t = instance.meta.type; t; t = t.baseType) {
    // Remove the entity from the pool
    const pool = t.__pool__;
    if (pool && key in pool) {
      delete pool[key];
    }

    // Remove the entity from the known entities list
    const known = t.__known__;
    if (known) {
      const indexOfEntity = known.indexOf(instance);
      if (indexOfEntity) known.splice(indexOfEntity, 1);
    }
  }
}

/***/ }),

/***/ "./src/util/random.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomInt", function() { return randomInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomText", function() { return randomText; });
function randomInt() {
  let max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 9;
  // https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-with-javascript/
  const scaleFactor = max + 1;
  return Math.floor(Math.random() * scaleFactor);
}
function randomText() {
  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  let includeDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let str = '';
  while (str.length < length) {
    const remainingLength = length - str.length;
    // https://gist.github.com/6174/6062387
    let chunk = Math.random().toString(36).substring(2);
    if (!includeDigits) chunk = chunk.replace(/[0-9]/g, '');
    const chunkLength = Math.min(chunk.length, remainingLength);
    str += chunk.substr(0, chunkLength);
  }
  return str;
}

/***/ }),

/***/ "./src/web-api/base-service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequestCancelledError", function() { return RequestCancelledError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CaptchaError", function() { return CaptchaError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvalidSharedLinkError", function() { return InvalidSharedLinkError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicLinksDisabledError", function() { return PublicLinksDisabledError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StripePaymentIntentError", function() { return StripePaymentIntentError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InternalServerError", function() { return InternalServerError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForbiddenError", function() { return ForbiddenError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAxiosError", function() { return isAxiosError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAxiosError", function() { return getAxiosError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseService", function() { return BaseService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceWithSession", function() { return ServiceWithSession; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/axios@0.19.0/node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../libs/vuemodel/lib/index.js");
/* harmony import */ var _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _framework_forms_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/framework/forms-model.ts");
/* harmony import */ var axios_lib_helpers_combineURLs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/axios@0.19.0/node_modules/axios/lib/helpers/combineURLs.js");
/* harmony import */ var axios_lib_helpers_combineURLs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios_lib_helpers_combineURLs__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var axios_lib_helpers_buildURL__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/axios@0.19.0/node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var axios_lib_helpers_buildURL__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios_lib_helpers_buildURL__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var axios_lib_helpers_isAbsoluteURL__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/axios@0.19.0/node_modules/axios/lib/helpers/isAbsoluteURL.js");
/* harmony import */ var axios_lib_helpers_isAbsoluteURL__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(axios_lib_helpers_isAbsoluteURL__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _custom_response_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/web-api/custom-response-error.ts");
/* harmony import */ var _components_ToastMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/components/ToastMessage.ts");
/* harmony import */ var src_util_site_url__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/util/site-url.ts");
/* harmony import */ var src_framework_logging_error__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/framework/logging/error.ts");










class RequestCancelledError extends Error {
  constructor(innerError) {
    super('cancelled');
    this.innerError = void 0;
    this.innerError = innerError;
  }
}
class CaptchaError extends Error {
  constructor(innerError) {
    super('Captcha validation required.');
    this.innerError = void 0;
    this.innerError = innerError;
  }
}
class InvalidSharedLinkError extends Error {
  constructor(notAvailableMessage, innerError) {
    super('Invalid Shared Link');
    this.notAvailableMessage = void 0;
    this.innerError = void 0;
    this.notAvailableMessage = notAvailableMessage;
    this.innerError = innerError;
  }
}
class PublicLinksDisabledError extends Error {
  constructor(innerError) {
    super('Public Links Disabled');
    this.innerError = void 0;
    this.innerError = innerError;
  }
}
class StripePaymentIntentError extends Error {
  constructor(innerError) {
    super('Stripe PaymentIntent Failure');
    this.innerError = void 0;
    this.innerError = innerError;
  }
}
class InternalServerError extends Error {
  constructor(innerError) {
    super('Internal server error.');
    this.innerError = void 0;
    this.innerError = innerError;
  }
}
class ForbiddenError extends Error {
  constructor(innerError) {
    super('You do not have permission to edit this entry.');
    this.innerError = void 0;
    this.innerError = innerError;
  }
}
function isJsonErrorInfo(data) {
  return typeof data === 'object' && data.hasOwnProperty('Type') && data.hasOwnProperty('Message') && data.hasOwnProperty('Data');
}
function isAxiosError(error) {
  return error instanceof Error && error.isAxiosError;
}
function getAxiosError(error) {
  if (isAxiosError(error)) return error;
  if (Object(src_framework_logging_error__WEBPACK_IMPORTED_MODULE_9__["hasInnerError"])(error)) {
    const error2 = error.innerError;
    if (isAxiosError(error2)) return error2;
    if (error2 instanceof _custom_response_error__WEBPACK_IMPORTED_MODULE_6__["CustomResponseError"]) {
      const error3 = error2.innerError;
      if (isAxiosError(error3)) return error3;
    }
  }
}
class BaseService {
  constructor(apiKey, sessionToken, baseUrl) {
    this.apiKey = void 0;
    this.sessionToken = void 0;
    this.client = void 0;
    this.apiKey = apiKey;
    this.sessionToken = sessionToken;
    this.client = axios__WEBPACK_IMPORTED_MODULE_0___default.a.create({
      baseURL: baseUrl || Object(src_util_site_url__WEBPACK_IMPORTED_MODULE_8__["getSiteUrl"])() || window.location.origin,
      method: 'GET',
      xsrfCookieName: null // prevent axios from reading document.cookies (https://github.com/axios/axios/pull/406)
    });

    this.client.defaults.headers.post['Content-Type'] = 'application/json; charset=utf-8';
    this.client.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    this.client.interceptors.request.use(BaseService.modelSerialization);
    this.client.interceptors.response.use(this.receiveServerTime.bind(this));
    if (location.href.startsWith(Object(src_util_site_url__WEBPACK_IMPORTED_MODULE_8__["getSiteUrl"])())) this.client.interceptors.response.use(this.receiveSessionToken.bind(this));
  }

  /**
   * Generates the URI that the service would use to make a request with the provided configuration.
   * @param config request configuration used to generate a URI.
   */
  getUri(config) {
    config = Object.assign({}, this.client.defaults, config);
    if (config.baseURL && !axios_lib_helpers_isAbsoluteURL__WEBPACK_IMPORTED_MODULE_5___default()(config.url)) config.url = axios_lib_helpers_combineURLs__WEBPACK_IMPORTED_MODULE_3___default()(config.baseURL, config.url);
    return axios_lib_helpers_buildURL__WEBPACK_IMPORTED_MODULE_4___default()(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  }

  /**
   * Use custom serialization on model instances
   */
  static modelSerialization(config) {
    if (config.data instanceof _cognitoforms_vuemodel__WEBPACK_IMPORTED_MODULE_1___default.a.Entity) {
      config.headers['Content-Type'] = 'application/json+cognito; charset=utf-8';
      config.data = config.data.serialize();
    }
    return config;
  }
  async transformServiceRequestOptions(options) {
    const config = options;
    config.url = options.endpoint;
    config.params = config.params || {};
    config.headers = config.headers || {};
    if (this.sessionToken) config.headers['X-SessionToken'] = this.sessionToken;
    if (options.isCognitoJson) config.headers['Content-Type'] = 'application/json+cognito, charset=utf-8';
    if (options.passive === true) config.headers['X-Passive-Request'] = 1;
    return config;
  }
  async serviceRequest(options) {
    const config = await this.transformServiceRequestOptions(typeof options === 'string' ? {
      endpoint: options,
      method: 'get'
    } : options);
    const result = {
      response: null,
      error: null
    };

    // Handle the response
    try {
      result.response = await this.client.request(config);
    }
    // Handle the error
    catch (err) {
      if (isAxiosError(err) || axios__WEBPACK_IMPORTED_MODULE_0___default.a.isCancel(err)) {
        result.error = this.transformErrorFromResponse(err);
      } else {
        result.error = err;
      }
    }
    return result;
  }
  transformErrorFromResponse(err) {
    if (axios__WEBPACK_IMPORTED_MODULE_0___default.a.isCancel(err)) return new RequestCancelledError(err);

    // Check for a failure that returns a response of type object, i.e. 'JsonErrorInfo'
    if (err.response && err.response.data && isJsonErrorInfo(err.response.data)) return new _custom_response_error__WEBPACK_IMPORTED_MODULE_6__["CustomResponseError"](err.response.data, err.response.status, err.response.statusText, err);
    return err;
  }

  /**
   * Determine the server time offset relative to the client time during posts
   */
  receiveServerTime(res) {
    const serverTime = res.headers['x-server-time'];
    if (serverTime) {
      try {
        _framework_forms_model__WEBPACK_IMPORTED_MODULE_2__["FormsModel"].config.serverTimeOffset = new Date(serverTime).getTime() - new Date().getTime();
      } catch (e) {}
    }
    return res;
  }
  receiveSessionToken(res) {
    const sessionToken = res.headers['x-sessiontoken'];
    if (sessionToken) {
      try {
        const event = new CustomEvent('received-session-token');
        event['token'] = sessionToken;
        document.dispatchEvent(event);
      } catch (e) {}
    }
    return res;
  }
}
class ServiceWithSession extends BaseService {
  constructor(session) {
    super(session.apiKey, session.token);
    this.session = void 0;
    this.session = session;
    this.client.interceptors.response.use(this.receiveAccessToken.bind(this));
    this.client.interceptors.request.use(this.addOrganizationHeader.bind(this));
  }
  getValidationHeaders() {
    let validationMethod = null;
    let validationToken = null;
    if (this.session && this.session.botValidation && this.session.botValidation.method && this.session.botValidation.token) {
      validationMethod = this.session.botValidation.method;
      validationToken = this.session.botValidation.token;
    }
    return validationMethod && validationToken ? {
      [validationMethod]: validationToken
    } : null;
  }
  receiveAccessToken(res) {
    // capture fresh accessToken
    if (res.data && res.data['accessToken']) this.session.accessToken = res.data['accessToken'];
    return res;
  }
  addOrganizationHeader(config) {
    if (this.session.organizationId) config.headers['X-Organization'] = this.session.organizationId;
    return config;
  }
  parseError(error) {
    if (isAxiosError(error) && error.response && error.response.data === 'captcha') return new CaptchaError(error);else if (isAxiosError(error) && error.response && error.response.data.error === 'Invalid Shared Link') return new InvalidSharedLinkError('Invalid Shared Link', error);else if (isAxiosError(error) && error.response && error.response.data.error === 'Public Links Disabled') return new PublicLinksDisabledError(error);else if (isAxiosError(error) && error.response && error.response.data.error === 'Stripe PaymentIntent Failure') return new StripePaymentIntentError(error);else if (isAxiosError(error) && error.response && error.response.status === 500) {
      const errorHeading = this.session.getResource('entry-submission-error-heading');
      Object(_components_ToastMessage__WEBPACK_IMPORTED_MODULE_7__["default"])(this.session.formId, {
        type: 'error',
        message: errorHeading || 'Internal server error'
      });
      return new InternalServerError(error);
    } else return this.parseSvcError(error);
  }
  parseSvcError(error) {
    if (error instanceof _custom_response_error__WEBPACK_IMPORTED_MODULE_6__["CustomResponseError"]) {
      if (error.type === 'Forbidden') return new ForbiddenError(error);else if (error.data.error === 'Invalid Shared Link') return new InvalidSharedLinkError(error.data.message, error);else if (error.data.error === 'Public Links Disabled') return new PublicLinksDisabledError(error);else if (error.data.error === 'Stripe PaymentIntent Failure') return new StripePaymentIntentError(error);
    }
    return error;
  }
}

/***/ }),

/***/ "./src/web-api/concurrent-entry-service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConcurrentEntryConflict", function() { return ConcurrentEntryConflict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ConcurrentEntryService; });
/* harmony import */ var _entry_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/web-api/entry-service.ts");
/* harmony import */ var _custom_response_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/web-api/custom-response-error.ts");
/* harmony import */ var _diff_patch_CognitoJsonPatchFormatter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/web-api/diff-patch/CognitoJsonPatchFormatter.ts");
/* harmony import */ var _diff_patch_CognitoJsonDiffPatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/web-api/diff-patch/CognitoJsonDiffPatcher.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../libs/types/server-types/forms/model/view-type.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__);





const jsonPatchFormatter = new _diff_patch_CognitoJsonPatchFormatter__WEBPACK_IMPORTED_MODULE_2__["CognitoJsonPatchFormatter"]();
class ConcurrentEntryConflict extends Error {
  constructor(entry, order) {
    super('Entry Conflict');
    this.entry = void 0;
    this.order = void 0;
    this.entry = entry;
    this.order = order;
  }
}
class ConcurrentEntryService extends _entry_service__WEBPACK_IMPORTED_MODULE_0__["EntryService"] {
  get diffPatcher() {
    return _diff_patch_CognitoJsonDiffPatcher__WEBPACK_IMPORTED_MODULE_3__["diffPatcher"];
  }
  get jsonPatchFormatter() {
    return jsonPatchFormatter;
  }
  constructor(session, isAdmin) {
    super(session);
    this.initialEntryJson = {};
    this.isAdmin = false;
    this.viewId = undefined;
    this.viewType = undefined;
    this.isAdmin = isAdmin;
  }
  async submit(entry, embedUrl, entryToken) {
    let result;
    let delta;
    const entryJson = entry.serialize({
      force: false,
      useAliases: true
    });
    const order = entry.Order;
    if (entry.meta.isNew) result = await this.performActionForNewEntry(entry.Entry.Action, entryJson, order, embedUrl);else {
      delta = this.diffPatcher.diff(this.initialEntryJson, entryJson);
      const diffPatch = this.jsonPatchFormatter.format(delta);
      result = await this.performActionForExistingEntry(entry.Id, entry.Entry.Version, entry.Entry.Action, diffPatch, order, entryJson.Entry.PaymentToken, embedUrl, entryToken, entry.Entry.Role, entryJson.Entry.User);
    }
    if (result.response && result.response.data) {
      const data = result.response.data;
      const submissionResult = Object(_entry_service__WEBPACK_IMPORTED_MODULE_0__["parseStoreResult"])(data);

      // In the following submission results, the server stored the submitted entry data
      if (submissionResult.status === _entry_service__WEBPACK_IMPORTED_MODULE_0__["SubmissionResultStatus"].Success || submissionResult.status === _entry_service__WEBPACK_IMPORTED_MODULE_0__["SubmissionResultStatus"].CardDeclined || submissionResult.status === _entry_service__WEBPACK_IMPORTED_MODULE_0__["SubmissionResultStatus"].OrderMismatch || submissionResult.status === _entry_service__WEBPACK_IMPORTED_MODULE_0__["SubmissionResultStatus"].PaymentDeclined) this.initialEntryJson = submissionResult.entry;
      submissionResult.entry.Entry.Action = entry.Entry.Action;
      submissionResult.entry.Entry.Role = entry.Entry.Role;

      // Add the session token to document links to support downloads on the public form confirmation page
      if (data.entryDocuments) {
        submissionResult.documents = data.entryDocuments.map(doc => {
          doc.link = doc.link + (this.isAdmin ? '' : '&sessionToken=' + encodeURIComponent(this.sessionToken));
          return doc;
        });
      }
      return submissionResult;
    }
    throw this.parseSubmissionError(result.error, delta, entry.Entry.Action, entry.Entry.Role);
  }
  async save(entry, embedUrl, entryToken, resumePage) {
    if (!this.session.flags.saveAndResume) throw new Error('Entry saving is unsupported.');
    let result;
    let delta;
    const entryJson = entry.serialize({
      force: false,
      useAliases: true
    });
    const order = entry.Order;
    if (entry.meta.isNew) result = await this.saveNewEntry(entryJson, order, embedUrl, resumePage);else {
      delta = this.diffPatcher.diff(this.initialEntryJson, entryJson);
      const diffPatch = this.jsonPatchFormatter.format(delta);
      result = await this.saveExistingEntry(entry.Id, entry.Entry.Version, diffPatch, order, embedUrl, entryToken, resumePage, entryJson.Entry.User, entryJson.Entry.Role);
    }
    if (result.response && result.response.data) {
      const data = result.response.data;
      const saveResult = Object(_entry_service__WEBPACK_IMPORTED_MODULE_0__["parseStoreResult"])(data);
      this.initialEntryJson = this.diffPatcher.clone(saveResult.entry);
      saveResult.emailAddress = data.saveAndResumeRecipients;
      saveResult.emailMessage = data.emailMessage;
      saveResult.link = data.link;
      saveResult.entry.Entry.Action = entry.Entry.Action;
      saveResult.entry.Entry.Role = entry.Entry.Role;
      // Avoid loss of changes made while save request was in flight
      const postSaveEntryJson = entry.serialize({
        force: false,
        useAliases: true
      });
      delta = this.diffPatcher.diff(this.initialEntryJson, postSaveEntryJson);
      if (delta) saveResult.entry = this.diffPatcher.patch(saveResult.entry, delta);
      return saveResult;
    }
    throw this.parseSubmissionError(result.error, delta, entry.Entry.Action, entry.Entry.Role);
  }
  async emailResumeLink(entryId, recipient, message, embedUrl) {
    const result = await this.serviceRequest({
      method: 'post',
      endpoint: 'svc/save-resume/send-email',
      data: {
        entryId,
        recipient,
        message,
        embedUrl
      }
    });
    if (result.error) throw this.parseError(result.error);
  }
  async resume(formId, entryToken) {
    const result = await this.serviceRequest({
      method: 'get',
      endpoint: 'svc/resume-entry',
      params: {
        formId,
        entryToken
      }
    });
    if (result.response && result.response.data) {
      // Parse entry JSON into POJO
      result.response.data.entry = JSON.parse(result.response.data.entryJson);
      delete result.response.data.entryJson;
      this.initialEntryJson = result.response.data.entry;
      return result.response.data;
    }
    throw this.parseError(result.error);
  }
  updateInitialEntryJson(entryJson) {
    this.initialEntryJson = entryJson;
  }
  registerView(viewId) {
    let viewType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__["ViewType"].Table;
    this.viewId = viewId;
    this.viewType = viewType;
  }
  parseSubmissionError(error, delta, action, role) {
    if (error instanceof _custom_response_error__WEBPACK_IMPORTED_MODULE_1__["CustomResponseError"] && error.data && error.data.Type === 'Entry Conflict') {
      this.initialEntryJson = error.data.Data.entry;
      const patchedEntry = this.diffPatcher.patch(this.diffPatcher.clone(this.initialEntryJson), delta);
      patchedEntry.Entry.Action = action;
      patchedEntry.Entry.Role = role;
      return new ConcurrentEntryConflict(patchedEntry, error.data.Data.order);
    }
    return this.parseError(error);
  }
  performActionForExistingEntry(entryId, entryVersion, action, patch, order, paymentToken, embedUrl, entryToken, role, user) {
    return this.serviceRequest({
      method: 'post',
      endpoint: 'svc/update-entry/perform-action' + (this.isAdmin ? '/admin' : ''),
      isCognitoJson: true,
      headers: this.getValidationHeaders(),
      data: {
        FormId: this.session.formId,
        EntryId: entryId,
        EntryVersion: entryVersion,
        Action: action,
        Patch: patch,
        EntryToken: entryToken,
        EmbedUrl: embedUrl,
        OrderAmount: order ? order.OrderAmount : null,
        PaymentToken: paymentToken || null,
        Role: this.isAdmin && role ? role : null,
        UserInfo: user,
        IsStoragePatch: true,
        ViewId: this.viewId,
        IsFormView: this.viewType === _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__["ViewType"].Form
      }
    });
  }
  performActionForNewEntry(action, entry, order, embedUrl) {
    return this.serviceRequest({
      method: 'post',
      endpoint: 'svc/update-entry/perform-action/new-entry' + (this.isAdmin ? '/admin' : ''),
      isCognitoJson: true,
      headers: this.getValidationHeaders(),
      data: {
        FormId: this.session.formId,
        Action: action,
        EntryJson: JSON.stringify(entry),
        AccessToken: this.session.accessToken,
        EmbedUrl: embedUrl,
        OrderAmount: order ? order.OrderAmount : null,
        IsStoragePatch: true,
        ViewId: this.viewId,
        IsFormView: this.viewType === _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__["ViewType"].Form
      }
    });
  }
  saveNewEntry(entry, order, embedUrl, resumePage) {
    return this.serviceRequest({
      method: 'post',
      endpoint: 'svc/update-entry/save/new-entry' + (this.isAdmin ? '/admin' : ''),
      isCognitoJson: true,
      headers: this.getValidationHeaders(),
      data: {
        FormId: this.session.formId,
        EntryJson: JSON.stringify(entry),
        AccessToken: this.session.accessToken,
        EmbedUrl: embedUrl,
        OrderAmount: order ? order.OrderAmount : null,
        LastPageViewed: resumePage,
        IsStoragePatch: true,
        ViewId: this.viewId,
        GenerateAssignment: this.isAdmin && this.viewType === _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__["ViewType"].Form
      }
    });
  }
  saveExistingEntry(entryId, entryVersion, patch, order, embedUrl, entryToken, resumePage, user, role) {
    return this.serviceRequest({
      method: 'post',
      endpoint: 'svc/update-entry/save' + (this.isAdmin ? '/admin' : ''),
      isCognitoJson: true,
      headers: this.getValidationHeaders(),
      data: {
        FormId: this.session.formId,
        EntryId: entryId,
        EntryVersion: entryVersion,
        Patch: patch,
        EntryToken: entryToken,
        EmbedUrl: embedUrl,
        OrderAmount: order ? order.OrderAmount : null,
        LastPageViewed: resumePage,
        UserInfo: user,
        Role: role,
        IsStoragePatch: true,
        ViewId: this.viewId,
        GenerateAssignment: this.isAdmin && this.viewType === _cognitoforms_types_server_types_forms_model_view_type__WEBPACK_IMPORTED_MODULE_4__["ViewType"].Form
      }
    });
  }
}

/***/ }),

/***/ "./src/web-api/custom-response-error.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomResponseError", function() { return CustomResponseError; });
class CustomResponseError extends Error {
  constructor(errorInfo, status, statusText, innerError) {
    super(errorInfo.Message);
    this.type = void 0;
    this.data = void 0;
    this.status = void 0;
    this.statusText = void 0;
    this.innerError = void 0;
    this.type = errorInfo.Type;
    this.data = errorInfo.Data;
    this.status = status;
    this.statusText = statusText;
    this.innerError = innerError;
  }
}

/***/ }),

/***/ "./src/web-api/diff-patch/CognitoJsonDiffPatcher.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffPatcher", function() { return diffPatcher; });
/* harmony import */ var jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/jsondiffpatch@0.4.1/node_modules/jsondiffpatch/dist/jsondiffpatch.umd.js");
/* harmony import */ var jsondiffpatch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _custom_patch_pipes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/web-api/diff-patch/custom-patch-pipes.ts");


const diffPatcher = Object(jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__["create"])({
  propertyFilter: (propertyName, context) => {
    // Don't include changes from null to null
    // eslint-disable-next-line eqeqeq
    if (context.left[propertyName] == null && context.right[propertyName] == null) return false;else if (propertyName.startsWith('$')) return false;
    // Remove pseudo properties like Choice_Price since they never get serialized by model.js
    // eslint-disable-next-line eqeqeq
    else if (propertyName.lastIndexOf('_') > 0) return false;
    // root properties don't have a child name
    // eslint-disable-next-line eqeqeq
    else if (context.childName == null && ['Entry', 'Form', 'Id', 'Order'].includes(propertyName)) return false;else if (['ItemNumber'].includes(propertyName)) return false;else return true;
  },
  // Formatters don't support textDiff
  textDiff: {
    minLength: Number.MAX_SAFE_INTEGER
  },
  // Used to differentiate between array objects
  objectHash: obj => {
    return obj.Id || JSON.stringify(obj);
  },
  arrays: {
    detectMove: false
  }
});
diffPatcher.processor.pipes.diff.replace('collectChildren', _custom_patch_pipes__WEBPACK_IMPORTED_MODULE_1__["addIdsToRepeatingSectionObjects"]);
diffPatcher.processor.pipes.patch.replace('trivial', _custom_patch_pipes__WEBPACK_IMPORTED_MODULE_1__["applyTrivialPatch"]);
diffPatcher.processor.pipes.patch.replace('arrays', _custom_patch_pipes__WEBPACK_IMPORTED_MODULE_1__["arrayFilterPreventModificationsFromMissingItems"]);
diffPatcher.processor.pipes.patch.replace('arraysCollectChildren', _custom_patch_pipes__WEBPACK_IMPORTED_MODULE_1__["arraysCollectPreventDuplicateCollections"]);


/***/ }),

/***/ "./src/web-api/diff-patch/CognitoJsonPatchFormatter.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CognitoJsonPatchFormatter", function() { return CognitoJsonPatchFormatter; });
/* harmony import */ var jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/jsondiffpatch@0.4.1/node_modules/jsondiffpatch/dist/jsondiffpatch.umd.js");
/* harmony import */ var jsondiffpatch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__);


// Copied from https://github.com/benjamine/jsondiffpatch/blob/master/src/formatters/jsonpatch.js
const isMoveOp = _ref => {
  let {
    op
  } = _ref;
  return op === 'move';
};
const isRemoveOp = _ref2 => {
  let {
    op
  } = _ref2;
  return op === 'remove';
};
const last = arr => arr[arr.length - 1];
const sortBy = (arr, pred) => {
  arr.sort(pred);
  return arr;
};
const compareByIndexDesc = (indexA, indexB) => {
  const lastA = parseInt(indexA, 10);
  const lastB = parseInt(indexB, 10);
  if (!(isNaN(lastA) || isNaN(lastB))) {
    return lastB - lastA;
  } else {
    return 0;
  }
};
const opsByDescendingOrder = removeOps => sortBy(removeOps, (a, b) => {
  const splitA = a.path.split('/');
  const splitB = b.path.split('/');
  if (splitA.length !== splitB.length) {
    return splitA.length - splitB.length;
  } else {
    return compareByIndexDesc(last(splitA), last(splitB));
  }
});
// end copied code

class CognitoJsonPatchFormatter extends jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__["formatters"].jsonpatch.default {
  static reorderOps(diff) {
    const [moveOps, removedOps, restOps] = jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__["formatters"].jsonpatch.partitionOps(diff, [isMoveOp, isRemoveOp]);
    const removeOpsReverse = opsByDescendingOrder(removedOps);
    return [...removeOpsReverse, ...moveOps, ...restOps];
  }
  format(delta, left) {
    return CognitoJsonPatchFormatter.reorderOps(super.format(delta, left));
  }
  recurse(context, delta, left, key, leftKey, movedFrom, isLast) {
    if (key !== '$id') super.recurse(context, delta, left, key, leftKey, movedFrom, isLast);
  }
}

/***/ }),

/***/ "./src/web-api/diff-patch/custom-patch-pipes.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addIdsToRepeatingSectionObjects", function() { return addIdsToRepeatingSectionObjects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayFilterPreventModificationsFromMissingItems", function() { return arrayFilterPreventModificationsFromMissingItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arraysCollectPreventDuplicateCollections", function() { return arraysCollectPreventDuplicateCollections; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyTrivialPatch", function() { return applyTrivialPatch; });
/* harmony import */ var jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/jsondiffpatch@0.4.1/node_modules/jsondiffpatch/dist/jsondiffpatch.umd.js");
/* harmony import */ var jsondiffpatch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__);

const compare = {
  numerically(a, b) {
    return a - b;
  },
  numericallyBy(name) {
    return (a, b) => a[name] - b[name];
  }
};

// https://github.com/benjamine/jsondiffpatch/blob/master/packages/jsondiffpatch/src/contexts/context.ts
// Added properties for intelisense
class Context {
  constructor() {
    this.result = void 0;
    this.hasResult = void 0;
    this.exiting = void 0;
    this.next = void 0;
    this.nextPipe = void 0;
    this.root = void 0;
    this.children = void 0;
    this.nextAfterChildren = void 0;
    this.options = void 0;
  }
  setResult(result) {
    this.result = result;
    this.hasResult = true;
    return this;
  }
  exit() {
    this.exiting = true;
    return this;
  }
  switchTo(next, pipe) {
    if (typeof next === 'string' || next instanceof jsondiffpatch__WEBPACK_IMPORTED_MODULE_0__["Pipe"]) {
      this.nextPipe = next;
    } else {
      this.next = next;
      if (pipe) {
        this.nextPipe = pipe;
      }
    }
    return this;
  }
  push(child, name) {
    child.parent = this;
    if (typeof name !== 'undefined') {
      child.childName = name;
    }
    child.root = this.root || this;
    child.options = child.options || this.options;
    if (!this.children) {
      this.children = [child];
      this.nextAfterChildren = this.next || null;
      this.next = child;
    } else {
      this.children[this.children.length - 1].next = child;
      this.children.push(child);
    }
    child.next = this;
    return this;
  }
}

// https://github.com/benjamine/jsondiffpatch/blob/master/packages/jsondiffpatch/src/contexts/patch.ts
// Added properties for intelisense
class PatchContext extends Context {
  constructor(left, delta) {
    super();
    this.left = void 0;
    this.delta = void 0;
    this.pipe = void 0;
    this.nested = void 0;
    this.left = left;
    this.delta = delta;
    this.pipe = 'patch';
  }
}

// https://github.com/benjamine/jsondiffpatch/blob/master/packages/jsondiffpatch/src/filters/nested.ts
// collectChildrenDiffFilter()
// Add ids to the delta if the object contains an Id
const addIdsToRepeatingSectionObjects = context => {
  if (!context || !context.children) {
    return;
  }
  const length = context.children.length;
  let child;
  let result = context.result;
  for (let index = 0; index < length; index++) {
    child = context.children[index];
    if (typeof child.result === 'undefined') {
      continue;
    }
    result = result || {};
    result[child.childName] = child.result;
  }
  if (result && context.leftIsArray) {
    result._t = 'a';
  }
  context.setResult(result).exit();

  // Start Cognito-specific patching logic for repeating sections
  // Add ids to the delta if the object contains an Id
  if (context.hasResult && context.result && (context.right.Id || context.left.Id) && !(context.right.Id || context.left.Id).includes('-')) {
    context.result.$id = context.right.Id || context.left.Id;
  }
  // End Cognito-specific patching logic for repeating sections
};

addIdsToRepeatingSectionObjects.filterName = 'addIdsToRepeatingSectionObjects';

// https://github.com/benjamine/jsondiffpatch/blob/master/packages/jsondiffpatch/src/filters/arrays.ts
// nestedPatchFilter()
const arrayFilterPreventModificationsFromMissingItems = context => {
  if (!context.nested) {
    return;
  }
  if (context.delta._t !== 'a') {
    return;
  }
  let index;
  const ARRAY_MOVE = 3;
  const delta = context.delta;
  const array = context.left;
  if (!array) return;

  // first, separate removals, insertions and modifications
  let toRemove = [];
  let toInsert = [];
  const toModify = [];
  for (index in delta) {
    if (index !== '_t') {
      if (index[0] === '_') {
        // removed item from original array
        if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {
          toRemove.push(parseInt(index.slice(1), 10));
        } else {
          throw new Error('only removal or move can be applied at original array indices,' + " invalid diff type: ".concat(delta[index][2]));
        }
      } else {
        if (delta[index].length === 1) {
          // added item at new array
          toInsert.push({
            index: parseInt(index, 10),
            value: delta[index][0]
          });
        } else {
          // modified item at new array
          toModify.push({
            index: parseInt(index, 10),
            delta: delta[index]
          });
        }
      }
    }
  }

  // remove items, in reverse order to avoid sawing our own floor
  toRemove = toRemove.sort(compare.numerically);
  for (index = toRemove.length - 1; index >= 0; index--) {
    const indexDiff = delta["_".concat(toRemove[index])];
    const itemIndex = array.findIndex(item => context.options.objectHash(indexDiff[0]) === context.options.objectHash(item));
    if (itemIndex !== -1) {
      array.splice(itemIndex, 1);
      if (indexDiff && indexDiff[2] === ARRAY_MOVE) {
        // reinsert later
        toInsert.push({
          index: array.length + toInsert.length,
          value: indexDiff[0]
        });
      }
    }
  }

  // insert items, in reverse order to avoid moving our own floor
  toInsert = toInsert.sort(compare.numericallyBy('index'));
  const toInsertLength = toInsert.length;
  for (index = 0; index < toInsertLength; index++) {
    const insertion = toInsert[index];
    array.splice(insertion.index, 0, insertion.value);
  }

  // apply modifications
  const toModifyLength = toModify.length;
  let child;
  if (toModifyLength > 0) {
    for (index = 0; index < toModifyLength; index++) {
      const modification = toModify[index];
      // Start Cognito-specific patching logic for repeating sections
      if (modification.delta.$id != null) {
        // Prevent modifications to objects that are not in the array
        const leftSide = context.left.find(left => left.Id === modification.delta.$id);
        if (leftSide) {
          delete modification.delta.$id;
          child = new PatchContext(leftSide, modification.delta);
          context.push(child, modification.index);
        }
      }
      // End Cognito-specific patching logic for repeating sections
      else {
        child = new PatchContext(context.left[modification.index], modification.delta);
        context.push(child, modification.index);
      }
    }
  }
  if (!context.children) {
    context.setResult(context.left).exit();
    return;
  }
  context.exit();
};
arrayFilterPreventModificationsFromMissingItems.filterName = 'arrayFilterPreventModificationsFromMissingItems';

// https://github.com/benjamine/jsondiffpatch/blob/master/packages/jsondiffpatch/src/filters/arrays.ts
// collectChildrenPatchFilter()
const arraysCollectPreventDuplicateCollections = context => {
  if (!context || !context.children) {
    return;
  }
  if (context.delta._t !== 'a') {
    return;
  }
  const length = context.children.length;
  for (let index = 0; index < length; index++) {
    const child = context.children[index];
    // Start Cognito-specific patching logic for repeating sections
    // Prevent adding results that are already in the array
    if (context.left.map(left => left.Id).indexOf(child.result.Id) === -1) context.left[child.childName] = child.result;
    // End Cognito-specific patching logic for repeating sections
  }

  context.setResult(context.left).exit();
};
arraysCollectPreventDuplicateCollections.filterName = 'arraysCollectPreventDuplicateCollections';

// https://github.com/benjamine/jsondiffpatch/blob/master/packages/jsondiffpatch/src/filters/trivial.ts
// trivialMatchesPatchFilter()
const applyTrivialPatch = context => {
  if (typeof context.delta === 'undefined') {
    context.setResult(context.left).exit();
    return;
  }
  context.nested = !Array.isArray(context.delta);
  if (context.nested) {
    return;
  }
  const nonNestedDelta = context.delta;
  if (nonNestedDelta.length === 1) {
    // Start Cognito-specific patching logic
    // Prevent overwriting an existing array with the array intialization patch
    if (Array.isArray(context.left) && context.left.length) {
      let result = context.left;
      if (Array.isArray(context.delta[0])) result = context.delta[0].concat(result);
      context.setResult(result).exit();
    } else
      // End Cognito-specific patching logic
      context.setResult(nonNestedDelta[0]).exit();
    return;
  }
  if (nonNestedDelta.length === 2) {
    if (context.left instanceof RegExp) {
      const regexArgs = /^\/(.*)\/([gimyu]+)$/.exec(nonNestedDelta[1]);
      if (regexArgs) {
        context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();
        return;
      }
    }

    // Start Cognito-specific patching logic
    // Prevent overwriting an existing array with the array intialization patch
    if (Array.isArray(context.left) && context.left.length) {
      let result = context.left;
      if (Array.isArray(context.delta[1])) result = context.delta[1].concat(result);
      context.setResult(result).exit();
    } else
      // End Cognito-specific patching logic
      context.setResult(nonNestedDelta[1]).exit();
    return;
  }
  if (nonNestedDelta.length === 3 && nonNestedDelta[2] === 0) {
    context.setResult(undefined).exit();
  }
};
applyTrivialPatch.filterName = 'applyTrivialPatch';

/***/ }),

/***/ "./src/web-api/entry-service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryParseEntryToken", function() { return tryParseEntryToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResumeMode", function() { return ResumeMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmissionResultStatus", function() { return SubmissionResultStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntryService", function() { return EntryService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateByPage", function() { return validateByPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateEntry", function() { return validateEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseStoreResult", function() { return parseStoreResult; });
/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/web-api/base-service.ts");
/* harmony import */ var src_util_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/util/model.ts");
function _wrapRegExp() { _wrapRegExp = function (re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { var i = g[name]; if ("number" == typeof i) groups[name] = result[i];else { for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) k++; groups[name] = result[i[k]]; } return groups; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) { result.groups = buildGroups(result, this); var indices = result.indices; indices && (indices.groups = buildGroups(indices, this)); } return result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if ("string" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { var group = groups[name]; return "$" + (Array.isArray(group) ? group.join("$") : group); })); } if ("function" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


// Regex for an entry token
const entryTokenRegex = /*#__PURE__*/_wrapRegExp(/#?(.{44}[*!])/, {
  entryToken: 1
});
function tryParseEntryToken(token) {
  token = decodeURIComponent(token);
  const match = token.match(entryTokenRegex);
  if (match) return {
    success: true,
    entryToken: match.groups.entryToken
  };else return {
    success: false
  };
}
let ResumeMode = /*#__PURE__*/function (ResumeMode) {
  ResumeMode["View"] = "View";
  ResumeMode["Edit"] = "Edit";
  return ResumeMode;
}({});
let SubmissionResultStatus = /*#__PURE__*/function (SubmissionResultStatus) {
  SubmissionResultStatus["Success"] = "Success";
  SubmissionResultStatus["AlreadyPaid"] = "AlreadyPaid";
  SubmissionResultStatus["QuantityLimitExceeded"] = "QuantityLimitExceeded";
  SubmissionResultStatus["PaymentDeclined"] = "PaymentDeclined";
  SubmissionResultStatus["CardDeclined"] = "CardDeclined";
  SubmissionResultStatus["OrderMismatch"] = "OrderMismatch";
  SubmissionResultStatus["AlreadySubmitted"] = "AlreadySubmitted";
  SubmissionResultStatus["Unknown"] = "Unknown";
  SubmissionResultStatus["Error"] = "Error";
  return SubmissionResultStatus;
}({});
class EntryService extends _base_service__WEBPACK_IMPORTED_MODULE_0__["ServiceWithSession"] {}
;
function generateReverseMapping(entry) {
  if (!entry.Page_Index) return {
    1: entry.meta.type.properties.map(p => p.name)
  };
  const reverseMap = {};
  for (const field of Object.keys(entry.Page_Index)) {
    const pageNum = entry.Page_Index[field];
    if (!reverseMap[pageNum]) reverseMap[pageNum] = [];
    reverseMap[pageNum].push(field);
  }
  return reverseMap;
}
async function validateProperty(entity, prop, parent, parentHidden) {
  // If this isn't an entity type, return
  if (!entity || !entity.meta || !entity.meta.conditions) return true;

  // Only validate fields that are visible on entry
  const isFieldShown = property => {
    if (entity[property.name] === undefined) return false;

    // Skip over fields on hidden pages
    if (!parent && entity.Page_Index) {
      const pageNumber = entity.Page_Index[property.name];
      const pageVisibleProp = "Page".concat(pageNumber, "Visible");
      if (entity[pageVisibleProp] === false) return false;
    }

    // Skip fields that are hidden
    if (entity[property.name + '_Visible'] === false) return false;

    // Skip payment since suppressed here
    if (property.name === 'Save_Card_Agreement') return false;
    if (parentHidden) return false;
    return true;
  };
  const isLookup = Object(src_util_model__WEBPACK_IMPORTED_MODULE_1__["isLookupField"])(prop);
  if (isLookup) {
    const lookupManager = entity[prop.name + '_LookupManager'];
    if (lookupManager) await lookupManager.ready;
  }

  // If the specified property has a condition that isn't met, return false
  const conditions = entity.meta.conditions;
  const relevantConditions = conditions.filter(condition => {
    return condition.properties.find(p => p.name === prop.name);
  });
  if (isFieldShown(prop)) {
    if (relevantConditions.some(c => c.properties.some(p => p.name === prop.name))) return false;
  }
  // Need to always validate hidden quantity limits
  else if (entity[prop.name + '_QuantityLimit'] !== undefined) {
    if (relevantConditions.some(c => c.condition.type.code.endsWith('.QuantityValidation'))) return false;
  }

  // Recursively check sections and repeating sections for unmet conditions
  // Avoid recursively validating invisible children, lookups, and 'entity.Form'
  if (!isLookup && prop.name !== 'Form') {
    const child = entity[prop.name];

    // Rating scales reference their parent section, skip this property
    if (child === parent) return true;
    const fieldShown = isFieldShown(prop);

    // Recursively check each element in repeating sections and tables
    if (prop.isList) {
      if (!Array.isArray(child)) return true;
      for (const item of child) {
        if (!item || !item.meta) return true;
        for (const p of item.meta.type.properties) {
          if (!(await validateProperty(item, p, entity, !fieldShown))) return false;
        }
      }
    }
    // Recursively check sections
    else if (typeof child === 'object') {
      if (!child || !child.meta) return true;
      for (const p of child.meta.type.properties) {
        if (!(await validateProperty(child, p, entity, !fieldShown))) return false;
      }
    }
  }
  return true;
}
async function validateByPage(entry, startingPage, endingPage) {
  const reverseMap = generateReverseMapping(entry);
  const maxPage = Math.max.apply(undefined, Object.keys(reverseMap));
  for (let i = 1; i < maxPage + 1; i++) {
    // Need this for blank pages
    if (reverseMap[i]) {
      // Get all fields on page 'i'
      const fields = reverseMap[i];
      for (const propName of fields) {
        const property = entry.meta.type.properties.find(p => p.name === propName);

        // This should only evaluate QLs on unavailable pages
        if (startingPage && endingPage && (i < startingPage || i > endingPage)) {
          if (!(await validateProperty(entry, property, null, true))) return i;
          continue;
        }
        // If this field is not valid, return the page number
        if (!(await validateProperty(entry, property, null, false))) return i;
      }
    }
  }
  return 0;
}
async function validateEntry(entity) {
  for (const prop of entity.meta.type.properties) {
    if (!(await validateProperty(entity, prop, null, false))) return false;
  }
  return true;
}

// TODO: Do we need to transform the result? It seems like it would be easier to reason about if the data the client worked with was the same shape as the data the server responded with.
function parseStoreResult(responseData) {
  const sr = responseData.submissionResult || {
    Status: 'Unknown'
  };

  // Return the entry submission result
  return {
    status: SubmissionResultStatus[sr.Status],
    message: responseData.exceptionMessage || sr.Message,
    entry: responseData.entry,
    order: responseData.order,
    responseData: sr.Data,
    entryToken: responseData.entryToken,
    auditRecordId: sr.AuditRecordId,
    confirmationMessage: sr.ConfirmationMessage
  };
}

/***/ }),

/***/ "./src/web-api/entry-views/entry-set-filtering.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compileExpression", function() { return compileExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKeywordFunction", function() { return getKeywordFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStatusFunction", function() { return getStatusFunction; });
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__);


// temporary type declaration for accessing entry statuses, see getStatusFunction

// Compile a Javascript function from a custom filter expression
function compileExpression(fn, Cognito) {
  let expression = '';
  for (const exportFn in fn.Exports) {
    if (Object.prototype.hasOwnProperty.call(fn.Exports, exportFn)) {
      expression += "const ".concat(exportFn, "=").concat(fn.Exports[exportFn], ";");
    }
  }
  if (expression) {
    expression += "return function() { return ".concat(fn.Body, "; }");
    // eslint-disable-next-line no-new-func
    const compile = Function('Cognito', expression);
    return compile(Cognito);
  } else {
    // eslint-disable-next-line no-new-func
    return Function("return ".concat(fn.Body, ";"));
  }
}

// Determines whether the entity contains the specified keyword
function matchesKeyword(entity, keyword, visited) {
  var _entity$meta$type$bas;
  // If entity is null or is an instance of EntryMeta, break
  if (entity == null || ((_entity$meta$type$bas = entity.meta.type.baseType) === null || _entity$meta$type$bas === void 0 ? void 0 : _entity$meta$type$bas.fullName) === 'Forms.EntryMeta') return false;

  // Push the entity onto the stack to prevent recursive visitation of the same entity
  visited.add(entity);

  // Search all instance properties of the entity
  const properties = entity.meta.type.properties;
  for (const property of properties) {
    // If property produces value of type FormRef/FormEntry or is an internal property, break
    if (property.name === 'Form' || property.name === 'ParentSection' || property.name.indexOf('_') > 0) continue;
    const value = property.value(entity);
    if (value != null) {
      // Perform a case-insensitive search of value properties
      if (!Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_0__["isEntityType"])(property.propertyType)) {
        if (value.toString().toLowerCase().indexOf(keyword) > -1) return true;
      }

      // Recursively search child entities and entity lists
      else {
        if (value instanceof Array) {
          for (let i = 0; i < value.length; i++) {
            if (!visited.has(value[i]) && matchesKeyword(value[i], keyword, visited)) return true;
          }
        } else if (!visited.has(value) && matchesKeyword(value, keyword, visited)) return true;
      }
    }
  }
  return false;
}
function getKeywordFunction(filter) {
  let keywordFn;
  if (filter.Keyword) {
    const keywordRegex = /"(.+?)"|(\S+)/g;
    const keywords = [];
    let keyword;
    while ((keyword = keywordRegex.exec(filter.Keyword)) !== null) keywords.push((keyword[1] || keyword[2]).toLowerCase());
    keywordFn = function () {
      for (let k = 0; k < keywords.length; k++) if (!matchesKeyword(this, keywords[k], new Set())) return false;
      return true;
    };
  }
  return keywordFn;
}
function getStatusFunction(filter, entryType) {
  let statusFn;
  if (filter.EntryStatus.length > 0 || filter.PaymentStatus.length > 0) {
    var _Cognito$Forms$EntryS;
    let entryStatus = filter.EntryStatus.length > 0 ? filter.EntryStatus : null;
    const paymentStatus = filter.PaymentStatus.length > 0 ? filter.PaymentStatus : null;
    // If an entry status filter is present, map status id filters to status names if necessary
    if (entryStatus && (_Cognito$Forms$EntryS = Cognito.Forms.EntryStatuses) !== null && _Cognito$Forms$EntryS !== void 0 && (_Cognito$Forms$EntryS = _Cognito$Forms$EntryS[entryType]) !== null && _Cognito$Forms$EntryS !== void 0 && _Cognito$Forms$EntryS.length) {
      const entryStatuses = Cognito.Forms.EntryStatuses[entryType];
      entryStatus = entryStatus.map(function (statusId) {
        if (isNaN(statusId)) return statusId;
        return Cognito.Forms.getEntryStatusById(entryStatuses, statusId).Name;
      });
    }
    statusFn = function () {
      var _form$Order;
      const form = this['ItemNumber'] ? this['Form'] : this;
      return (!entryStatus || entryStatus.indexOf(form.Entry.Status) > -1) && (!paymentStatus || ((_form$Order = form.Order) === null || _form$Order === void 0 ? void 0 : _form$Order.PaymentStatus) && paymentStatus.indexOf(form.Order.PaymentStatus.Name) > -1);
    };
  }
  return statusFn;
}

/***/ }),

/***/ "./src/web-api/entry-views/entry-set.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EntrySet; });
/* harmony import */ var _entry_view_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/web-api/entry-views/entry-view-util.ts");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../libs/model.js/lib/index.js");
/* harmony import */ var _cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _entry_set_filtering__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/web-api/entry-views/entry-set-filtering.ts");
/* harmony import */ var src_util_deferred__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/util/deferred.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../libs/types/server-types/forms/model/index-type.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__);
var _EntrySet;





// Default sorting by server-side sort key
function defaultSort(a, b) {
  const ak = a.SortKey;
  const bk = b.SortKey;
  return ak === bk ? 0 : ak < bk ? -1 : 1;
}
class EntrySet {
  constructor(viewService, entryType, view, role, user, userShort, filterCriteria, unfilteredParent) {
    this.service = void 0;
    this.entryType = void 0;
    this.indexes = new Map();
    this.entries = new Map();
    this.formId = void 0;
    this.view = void 0;
    this.userShort = void 0;
    this.role = void 0;
    this.user = void 0;
    this.timestamp = '';
    this.filterCriteria = void 0;
    this.sortCriteria = void 0;
    /**
     * Array of FormEntryIndex objects that this entry set contains, order matches that of Grid UI.
     */
    this.indexList = void 0;
    /**
     * Mapping of entry ID to the corresponding entry's position in `indexList`.
     */
    this.entryPosition = void 0;
    /**
     * An optional entry set. Used to fetch the full unfiltered set of entries,
     * and to determine if current entry set is filtered: If `unfilteredParent` is defined, `this` entry set is filtered.
     */
    this.unfilteredParent = void 0;
    this.refreshPromise = void 0;
    this.pollEntryPromise = void 0;
    this.filterPromise = void 0;
    this.service = viewService;
    this.entryType = entryType;
    this.formId = view.split('-')[0];
    this.view = view;
    this.role = role;
    this.user = user;
    this.userShort = userShort;
    this.filterCriteria = filterCriteria;
    this.unfilteredParent = unfilteredParent;
  }
  static async get(viewService, entryType, view, role, user, userShort) {
    let key = "".concat(viewService.id, "::").concat(view);
    if (userShort && role) key += "::".concat(userShort, "::").concat(role.Id);
    const instance = EntrySet.instances.get(key) || new EntrySet(viewService, entryType, view, role, user, userShort);
    this.instances.set(key, instance);
    await instance.initializeFromCache();
    return instance;
  }
  get isUserSpecific() {
    return !!this.userShort;
  }
  get userSpecificSettings() {
    return this.isUserSpecific ? {
      userShort: this.userShort,
      roleId: this.role.Id
    } : null;
  }
  // Refresh entry set
  async refresh(progressCallback) {
    if (this.refreshPromise) return this.refreshPromise;
    const task = new src_util_deferred__WEBPACK_IMPORTED_MODULE_3__["Deferred"]();
    this.refreshPromise = task.promise;

    // If current instance is a filtered set, refresh will fetch indexes unnecessarily
    if (this.unfilteredParent) {
      // Refresh the parent, refilter it, and return the filtered child entry set
      task.resolve(await this.unfilteredParent.filter(this.filterCriteria, this.sortCriteria));
    }
    // If current instance uses a server-side filter or is unfiltered, refresh without refiltering
    else {
      const indexes = await this.service.getIndex(this.formId, this.view, this.userSpecificSettings, this.timestamp, progressCallback);
      this.compileTransactionalIndexes(indexes);
      await this.cacheIndexes();
      await this.sort(this.sortCriteria);
      task.resolve();
    }
    this.refreshPromise = null;
    return task.promise;
  }
  // Poll for entry changes
  async pollEntry(entryId) {
    if (this.pollEntryPromise) return this.pollEntryPromise;
    const task = new src_util_deferred__WEBPACK_IMPORTED_MODULE_3__["Deferred"]();
    this.pollEntryPromise = task.promise;

    // If current instance is a filtered set, poll entry in parent and return refiltered child
    if (this.unfilteredParent) {
      await this.unfilteredParent.filter(this.filterCriteria, this.sortCriteria, this, entryId);
    }
    // If current instance uses a server-side filter or is unfiltered, refresh without refiltering
    else {
      const indexes = await this.service.getSpecificIndex(entryId, this.formId, this.view, this.userSpecificSettings, this.timestamp);
      this.compileTransactionalIndexes(indexes);
      await this.cacheIndexes();
      await this.sort(this.sortCriteria);
    }
    task.resolve();
    this.pollEntryPromise = null;
    return task.promise;
  }
  async cacheIndexes() {
    return this.service.cacheIndexes(this.formId, this.view, Array.from(this.indexes.values()), this.timestamp, this.userSpecificSettings);
  }
  async initializeFromCache() {
    const cachedIndexes = await this.service.loadCachedIndexes(this.formId, this.view, this.userSpecificSettings);
    if (cachedIndexes) {
      this.indexes = new Map(cachedIndexes.entries.map(index => [Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getEntryId"])(index), index]));
      this.timestamp = cachedIndexes.timestamp;
    }
  }

  // Compiles "transactional" (add/update/delete/etc.) indexes into the actual list of indexes representing entries which are in this entry set
  compileTransactionalIndexes(indexes) {
    let latestTimestamp = this.timestamp;
    let atobErrorLogged = false;
    for (const index of indexes) {
      const id = Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getEntryId"])(index);

      // Track the most recent timestamp
      if (Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getTimestamp"])(index) > latestTimestamp) {
        latestTimestamp = Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getTimestamp"])(index);
      }

      // Clear the cache and start over when a checkpoint is encountered
      if (index.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__["IndexType"].Checkpoint || index.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__["IndexType"].Flush) {
        this.indexes.clear();
      }
      // Add items to the index that are being added or updated
      else if (index.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__["IndexType"].Add || index.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__["IndexType"].Update) {
        // Decode the sort key
        if (!index['sortDecoded'] && index.SortKey !== undefined) {
          try {
            index.SortKey = atob(index.SortKey);
          } catch (e) {
            !atobErrorLogged && console.log("Client-side atob error - error: ".concat(e, ", sortKey: ").concat(index.SortKey));
            atobErrorLogged = true;
          }
          index['sortDecoded'] = true;
        }
        this.indexes.set(id, index);
        this.validateCachedEntry(id, index);
      } else if (index.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_4__["IndexType"].Delete) {
        this.indexes.delete(id);
        this.entries.delete(id);
      }
    }
    this.timestamp = latestTimestamp;
  }
  /**
   * Apply filter to an unfiltered entry set.
   * The caller (`this`) must contain a full set of entries (view `{formId}-0`) to remove effect of server-side filters.
   * @param filter Plain JS object representing the filter
   * @param sortCriteria Sort criteria to apply to the filtered set
   * @param entryId Entry to poll for changes to (only applicable when polling a filtered set)
   * @returns An entry set containing a filtered subset of the caller entry set
   */
  async filter(filter, sortCriteria, filteredSet, entryId) {
    // Use filterPromise as a "lock" to queue multiple filter calls
    const filterTask = new src_util_deferred__WEBPACK_IMPORTED_MODULE_3__["Deferred"]();
    while (this.filterPromise) await this.filterPromise;
    this.filterPromise = filterTask.promise;
    const filterFn = await this.getFilterFunction(filter);

    // If filterFn is undefined, return the current unfiltered entry set
    if (!filterFn) {
      this.sortCriteria = sortCriteria;
      await this.refresh();
      this.filterPromise = null;
      return this;
    }

    // Store and clear the original sort criteria to avoid sorting the original entry set before applying the filter
    this.sortCriteria = null;
    if (entryId) {
      await this.pollEntry(entryId);
    } else {
      await this.refresh();
    }
    await this.loadAllEntries();
    if (!filteredSet) filteredSet = new EntrySet(this.service, this.entryType, this.view, this.role, this.user, this.userShort, filter, this);
    filteredSet.timestamp = null;
    filteredSet.entries.clear();
    filteredSet.indexes.clear();

    // Add entries that match the filter
    for (const [id, index] of this.indexes) {
      if (filterFn.call(await this.getEntry(index))) {
        filteredSet.indexes.set(id, index);
        if (this.entries.has(id)) filteredSet.entries.set(id, this.entries.get(id));
      }
    }

    // Restore the sort criteria for the original entry set
    this.sortCriteria = sortCriteria;

    // Sort the filtered set
    await filteredSet.sort(sortCriteria);

    // Release the filter promise "lock"
    filterTask.resolve(filteredSet);
    this.filterPromise = null;
    return filteredSet;
  }

  /**
   * Gets a Javascript function that can be used to filter entries on the client
   */
  async getFilterFunction(filter) {
    if (filter.Invalid) return function () {
      return false;
    };

    // Keyword Filter
    const keywordFn = Object(_entry_set_filtering__WEBPACK_IMPORTED_MODULE_2__["getKeywordFunction"])(filter);

    // Custom Filter
    if (filter.Expression) {
      const fn = await this.service.getFilter(this.formId, filter);
      const filterExpression = Object(_entry_set_filtering__WEBPACK_IMPORTED_MODULE_2__["compileExpression"])(fn, this.service.model.modelOptions.$namespace);
      const customFilter = function () {
        try {
          return filterExpression.call(this);
        } catch (e) {
          return false;
        }
      };
      if (keywordFn) return function () {
        return customFilter.call(this) && keywordFn.call(this);
      };else return customFilter;
    }

    // Entry/Payment Status Filter
    const statusFn = Object(_entry_set_filtering__WEBPACK_IMPORTED_MODULE_2__["getStatusFunction"])(filter, "Cognito.".concat(this.entryType));

    // Combine keyword and status filter functions, as appropriate
    if (keywordFn && statusFn) return function () {
      return statusFn.call(this) && keywordFn.call(this);
    };else if (keywordFn) return keywordFn;else if (statusFn) return statusFn;else return null;
  }

  /**
   * Adds `model.js` property chains to model `fieldInfos`
   */
  getPropertyChains(fieldInfos) {
    const formEntryType = this.service.model.resolveType(this.entryType);
    fieldInfos.forEach(fieldInfo => {
      const propertyPath = formEntryType.getPath(fieldInfo.Path);
      fieldInfo.property = propertyPath;
    });
    return fieldInfos;
  }
  size() {
    return this.indexes.size;
  }
  get length() {
    return this.size();
  }

  // Exists to provide access to isEntityType to gridview.js
  isEntityType(propertyType) {
    return Object(_cognitoforms_model_js__WEBPACK_IMPORTED_MODULE_1__["isEntityType"])(propertyType);
  }

  /**
   * Sorts the entry set using the specified criteria
   * @param sortCriteria JS function representing the sort criteria, parameter is optional (for unsorted entry sets)
   */
  async sort(sortCriteria) {
    this.indexList = Array.from(this.indexes.values());
    // If no sortCriteria, sort immediately using the server sort key
    if (!sortCriteria) {
      this.indexList.sort(defaultSort);
      this.rebuildEntryPosition();
    }
    // Otherwise, sort asynchronously using client sort criteria
    else {
      this.sortCriteria = sortCriteria;
      await this.loadAllEntries();
      this.indexList.sort((index1, index2) => {
        return this.sortCriteria(this.getCachedEntry(Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getEntryId"])(index1)), this.getCachedEntry(Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getEntryId"])(index2)));
      });
      this.rebuildEntryPosition();
    }
  }
  getSortCriteria() {
    return this.sortCriteria;
  }

  /**
   * Reconciles `entryPosition` (map of entry => grid row) with the newly sorted `indexList`
   */
  rebuildEntryPosition() {
    this.entryPosition = new Map(this.indexList.map((idx, pos) => [Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getEntryId"])(idx), pos]));
  }
  listIndex() {
    return this.indexList;
  }
  indexOfEntryId(entryId) {
    return this.entryPosition.get(entryId);
  }
  entryIndexAt(index) {
    return this.indexList[index];
  }

  /**
   * Fetches entry key located at a specified row in the entries grid
   */
  entryKeyAt(index) {
    const entryIndex = this.entryIndexAt(index);
    return Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["keyFromIndex"])(entryIndex);
  }

  /**
   * Fetches entry located at a specified row in the entries grid
   */
  entryAt(index, callback) {
    const entryIndex = this.entryIndexAt(index);
    const id = Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["keyFromIndex"])(entryIndex).EntryId;
    const typeCacheEntry = this.getCachedEntry(id);
    // If entry is cached, it can be fetched synchronously for SlickGrid use
    if (typeCacheEntry) {
      return typeCacheEntry;
    }
    // If asynchronous then after promise resolves, perform callback to rerender SlickGrid row
    else {
      this.getEntry(entryIndex).then(callback);
      return null;
    }
  }
  getIndexItem(id) {
    return this.indexes.get(id);
  }
  async loadAllEntries() {
    const entryPromises = [];
    for (const index of this.indexes.values()) {
      entryPromises.push(this.getEntry(index));
    }
    return Promise.all(entryPromises);
  }
  validateCachedEntry(entryId, index) {
    // for filtered sets, this.entries is empty because the entries were pulled from type cache.
    // deserialized entry instances don't have an $etag property with which to compare.
    const cachedEntry = this.entries.get(entryId) || this.getCachedEntry(entryId);
    if (cachedEntry && cachedEntry.$etag !== index.EntryETag) {
      this.entries.delete(entryId);
      this.service.model.resetEntry('Forms.FormEntry', entryId);
    }
  }
  getCachedEntry(id) {
    const entry = this.service.model.model.types['Forms.FormEntry'].get(id);
    if (entry && !entry.$etag) console.warn('A FormEntry is cached in the model without an $etag. This could lead to interaction with stale data. Id=', id);

    // if the cached entry has a different role than the current entry set, it needs to be reconstructed
    if (entry && this.role && this.role.Name !== entry.Entry.Role) return null;
    return entry;
  }
  async constructEntry(state) {
    const id = state.Id;
    const typeCacheEntry = this.getCachedEntry(id);
    let entry = null;
    if (typeCacheEntry) {
      entry = typeCacheEntry;
    } else {
      // use sync construction to ensure we can mark the entry with an etag before anyone else pulls it from the type cache
      entry = this.service.model.construct(this.entryType, state, true);
      entry.$etag = state.$etag;
    }
    await entry.initialized;
    return entry;
  }
  async getEntry(index) {
    const id = Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["getEntryId"])(index);
    const typeCacheEntry = this.getCachedEntry(id);
    if (typeCacheEntry && typeCacheEntry.$etag === index.EntryETag) {
      await typeCacheEntry.initialized;
      this.markEntryInitialized(typeCacheEntry);
      return typeCacheEntry;
    }
    const entryJson = await this.getEntryJson(Object(_entry_view_util__WEBPACK_IMPORTED_MODULE_0__["keyFromIndex"])(index));
    const entry = await this.constructEntry(entryJson);
    this.markEntryInitialized(entry);
    return entry;
  }
  async getEntryByKey(entryKey) {
    let isAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const entryJson = await this.getEntryJson(entryKey, isAdmin);
    return this.constructEntry(entryJson);
  }
  async loadEntryData(entryKeys) {
    let isAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const entries = await this.service.loadEntryData(this.view, isAdmin, ...entryKeys);
    for (const e of entries) {
      if (e.Entry) {
        var _this$role;
        e.Entry.User = this.user;
        e.Entry.Role = (_this$role = this.role) === null || _this$role === void 0 ? void 0 : _this$role.Name;
      }
      this.entries.set(e.Id, e);
    }
  }
  async getEntryJson(entryKey) {
    let isAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const id = entryKey.EntryId;
    const entryData = this.entries.get(id);
    if (entryData && entryData.$etag === entryKey.EntryETag) return entryData;
    await this.loadEntryData([entryKey], isAdmin);
    return this.entries.get(id);
  }
  markEntryInitialized(entry) {
    entry['__initialized__'] = true;
  }
  isEntryInitialized(entry) {
    return entry['__initialized__'] === true;
  }
}
_EntrySet = EntrySet;
EntrySet.instances = new Map();

/***/ }),

/***/ "./src/web-api/entry-views/entry-view-util.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getViewId", function() { return getViewId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTimestamp", function() { return getTimestamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEntryId", function() { return getEntryId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyFromIndex", function() { return keyFromIndex; });
function getViewId(index) {
  return index.Id.split('|')[0];
}
function getTimestamp(index) {
  return index.Id.split('|')[1];
}
function getEntryId(index) {
  return index.Id.split('|')[2];
}
function keyFromIndex(_ref) {
  let {
    Id,
    EntryETag,
    OrderETag,
    OrderId
  } = _ref;
  let EntryId = Id.split('|')[2];
  let Scope = '';
  const dot = EntryId.indexOf('.');
  if (dot > 0) {
    Scope = EntryId.substr(dot + 1);
    EntryId = EntryId.substr(0, dot);
  }
  return {
    EntryId,
    Scope,
    EntryETag,
    OrderETag,
    OrderId
  };
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,