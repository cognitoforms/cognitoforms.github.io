(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ViewsSharedScript0"],{

/***/ "../../../Cognito.Services/Views/Shared/SelectInput/cognito-select-input.js":
/*!*******************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Views/Shared/SelectInput/cognito-select-input.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function (isInIframe) {
Cognito.ready("cognito-select-input", ["ExoWeb.context"], function () {
	context.model.meta.addType("Cognito.SelectInput");
	context.model.meta.addType("Cognito.SelectInputOption");

	$extend("Cognito.SelectInputOption", function (SelectInputOption) {
		SelectInputOption.meta.addProperty({ name: "display", type: String });
		SelectInputOption.meta.addProperty({ name: "value", type: String });
	});

	$extend("Cognito.SelectInput", function (SelectInput) {
		SelectInput.meta.addProperty({ name: "options", type: Cognito.SelectInputOption, isList: true });

		SelectInput.meta.addProperty({ name: "selectedOption", type: Cognito.SelectInputOption }).calculated({
			calculate: function (args) {
				computeSelectedOption(this);
			},
			onChangeOf: ["options"]
		});
		SelectInput.meta.addProperty({ name: "allowInput", type: Boolean }).defaultValue(true);
		SelectInput.meta.addProperty({ name: "allowBlankOption", type: Boolean }).defaultValue(true);
		SelectInput.meta.addProperty({ name: "dataType", type: String }).defaultValue("Text");
		SelectInput.meta.addProperty({ name: "placeholder", type: String });
		SelectInput.meta.addProperty({ name: "badgeIsActive", type: Boolean }).defaultValue(false);
		SelectInput.meta.addProperty({ name: "useTokenFormat", type: Boolean }).defaultValue(false);

		SelectInput.meta.addProperty({ name: "value", type: String }).calculated({
			calculate: function () {
				if (this.get_selectedOption()) {
					var val = this.get_selectedOption().get_value();
					return this.get_useTokenFormat() ? "[" + val + "]" : val;
				}
				return this.placeholder ? this.placeholder : null;
			},
			onChangeOf: ["selectedOption"]
		}).addChanged(function (sender, args) {
			if (!args.calculated) {
				if (args.newValue === null)
					sender.set_selectedOption(null);
				else if (sender.get_useTokenFormat() && args.newValue.match(Cognito.Forms.tokenRegex)) {
					var newSelectedOption = computeSelectedOption(sender, args.newValue);
					// Invalid token was typed
					if (!newSelectedOption)
						sender.set_value("");
					// Valid token was typed
					else if (newSelectedOption !== sender.get_selectedOption())
						sender.set_selectedOption(newSelectedOption);
				}
			}
		});

		SelectInput.meta.addProperty({ name: "inputText", type: String }).calculated({
			calculate: function () {
				return this.get_value();
			},
			onChangeOf: ["value"]
		});

		SelectInput.meta.addProperty({ name: "filteredOptions", type: Cognito.SelectInputOption, isList: true }).calculated({
			calculate: function () {
				var text = this.get_inputText();

				var opt = this.get_selectedOption();
				// If the text matches the currently selected option, show all options (i.e. options should only be filtered as the user is typing)
				if (!text || (opt && (opt.get_display() || opt.get_value()) === text))
					return this.get_options();

				var filtered = this.get_options().filter(function (o) {
					var val = o.get_display() || o.get_value();
					return val && val.toLowerCase().indexOf(text.toLowerCase()) === 0;
				});

				// If there are no matching options, show all options
				if (!filtered.length)
					return this.get_options();

				return filtered;
			},
			onChangeOf: ["options", "inputText"]
		});

		SelectInput.meta.addProperty({ name: "isText", type: Boolean }).calculated({
			calculate: function () {
				return this.get_allowInput() && (!this.get_selectedOption() || !this.get_selectedOption().get_display());
			},
			onChangeOf: ["selectedOption", "allowInput"]
		});

		SelectInput.meta.addProperty({ name: "useTextbox", type: Boolean }).calculated({
			calculate: function () {
				return this.get_isText() && this.get_dataType() === "Text";
			},
			onChangeOf: ["isText", "dataType"]
		})

		SelectInput.meta.addProperty({ name: "useDatePicker", type: Boolean }).calculated({
			calculate: function () {
				return this.get_isText() && this.get_dataType() === "Date";
			},
			onChangeOf: ["isText", "dataType"]
		});

		SelectInput.meta.addProperty({ name: "useTimePicker", type: Boolean }).calculated({
			calculate: function () {
				return this.get_isText() && this.get_dataType() === "Time";
			},
			onChangeOf: ["isText", "dataType"]
		});

		SelectInput.meta.addProperty({ name: "hasOptions", type: Boolean }).calculated({
			calculate: function () {
				return this.get_options().length > 0;
			},
			onChangeOf: ["options"]
		});
	});

	function computeSelectedOption(selectInput, value) {
		value = value || selectInput.get_value();
		if (!value)
			return null;

		// If we're using tokens, only match the selected option if the value is a field reference
		if (selectInput.get_useTokenFormat()) {
			if (value.match(Cognito.Forms.tokenRegex))
				value = value.substring(1, value.length - 1);
			else
				return null;
		}

		if (value && !selectInput.get_selectedOption())
			return selectInput.get_options().filter(function (o) { return o.get_value() === value; })[0] || null;
	}

	function deactivate(selectInputElement, forceClear) {
		var input = $(".c-select-input.active");
		input.removeClass("active");
		var list = $(".c-select-input-list.active");
		list.removeClass("active").removeAttr("style");
		input.append(list);

		input.closest('.c-modal-content').off("scroll", deactivate);
		$('#c-content').off("scroll", deactivate);

		if (selectInputElement) {
			var selectInput = $parentContextData(selectInputElement);
			var className = selectInput.get_dataType() === "Date" ? ".c-datepicker" : (selectInput.get_dataType() === "Time" ? ".c-timepicker" : ".input");
			var inputElement = $(selectInputElement).find("input" + className)[0];
			if (forceClear) {
				selectInput.set_selectedOption(null);
				selectInput.set_value("");
			}
			else if (inputElement.value.match(Cognito.Forms.tokenRegex)) {
				var selectedOption = computeSelectedOption(selectInput, inputElement.value);
				if (selectedOption)
					selectInput.set_selectedOption(selectedOption);
				else
					inputElement.value = null;
			}
		}
	}

	$(document).on("click", ".c-select-input:not(.no-options) .input", function (e) {
		var $this = $(this);
		var selectInput = $this.closest(".c-select-input");
		var $modalScrollContainer = $this.closest('.c-modal-content');
		var $iframe = $('#c-content');

		// Remove dropdown list on scroll to emulate native <select>
		if ($modalScrollContainer.length)
			$modalScrollContainer.one("scroll", deactivate);

		if ($iframe.length)
			$iframe.one("scroll", deactivate);

		$('.cognito-datepicker').remove();
		var timepicker = selectInput.find('.c-timepicker').data('timepicker');
		if (timepicker)
			timepicker.hideWidget();


		if (!selectInput.hasClass("active")) {
			// Clone select list and append to body to over getting clipped by overflow setting of container.
			var list = selectInput.find("ul");

			var bcr = selectInput[0].getBoundingClientRect();
			// Set CSS of select list
			list.css(list.offset());
			list.css("min-width", selectInput.width() + "px");

			// If the select input is within 100px from the bottom of the viewport, display list on top.
			if (bcr.bottom > window.innerHeight - 100) {
				list.css("transition", "none");
				list.css("max-height", bcr.top + "px");
				list.css("margin-top", (selectInput.outerHeight() * -1 - list.height()) + "px");
			}
			else {
				list.css("max-height", (window.innerHeight - bcr.bottom) + "px");
			}

			$("body").append(list);
			// Add class after a tick so the css transition will trigger.
			setTimeout(function () {
				list.addClass("active");
				selectInput.addClass("active");
				$(window).one("click", function (e) {
					deactivate()
					e.stopPropagation();
				});
			});
		}
		else {
			deactivate();
		}
	}).on("click", ".c-select-input-list li", function () {
		var input = $(".c-select-input.active")[0];
		deactivate();
		var optionModel = $parentContextData(this);
		var inputModel = $parentContextData(input);
		// Set to null, then set the value to always trigger change on the property
		inputModel.set_selectedOption(null);
		inputModel.set_selectedOption(optionModel);
		$(this).parent().find(".selected").removeClass("selected");
		$(this).addClass("selected");
	}).on("click", ".c-select-input .pill .remove-pill", function () {
		var $selectInput = $(this).closest(".c-select-input");
		$parentContextData(this).set_selectedOption(null);
		$selectInput.find("input")[0].focus();
		$selectInput.find("li.selected").removeClass("selected");
		deactivate($selectInput[0], true);
		setTimeout(function () {
			$selectInput.find("li.selected").removeClass("selected");
		});
	}).on("click", ".c-select-input .c-editor-date-icon", function (e) {
		// Ensure no option is selected and show the datepicker
		var container = $(this).closest(".c-select-input");
		$parentContextData(container[0]).set_selectedOption(null);
		var datepicker = container.find(".c-datepicker");
		datepicker.data("datepicker").show();
	}).on("click", ".c-select-input .c-editor-time-icon", function (e) {
		// Ensure no option is selected and show the timepicker
		var container = $(this).closest(".c-select-input");
		$parentContextData(container[0]).set_selectedOption(null);
		var timepicker = container.find(".c-timepicker");
		timepicker.data("timepicker").showOrHighlight();
	});

	// Make accessible
	$(document).on("keydown", ".c-select-input", function (e) {
		if ((e.which === 40) || (e.which === 38)) {
			// prevent page scrolling
			e.preventDefault();
		}
	});

	$(document).on("keydown", ".c-select-input .input", function (e) {
		var $this = $(this);
		var selected = $(this).attr('data-selected') || -1;
		var numOptions = +$('.c-select-input-list.active').find("li").length;

		// Reveal list on up/down press
		if ((e.which === 40 || e.which === 38) && !$this.parent().hasClass("active")) {
			$(this).trigger("click");
		}
		else {
			if (e.which === 40) {
				selected = Math.min(+selected + 1, numOptions - 1);
				$this.closest(".c-select-input").attr("data-selected", selected);
			}
			else if (e.which === 38) {
				selected = Math.max(+selected - 1, 0);
				$this.closest(".c-select-input").attr("data-selected", selected);
			}
			else if (e.which === 27 || e.which === 9 || (e.shiftKey && e.which === 9)) {
				deactivate();
			}

			$(this).attr('data-selected', selected);

			if ((e.which === 40) || (e.which === 38)) {
				$(".c-select-input-list.active").find("li.selected").removeClass("selected");
				$(".c-select-input-list.active").find("li").eq(selected).addClass("selected");
			}
		}
	}).on("keyup", ".c-select-input .input", function (e) {
		if (e.which === 13) {
			$(".c-select-input-list.active").find("li.selected").trigger('click');
		}
	}).on("keydown", ".c-select-input .remove-pill", function (e) {
		if (e.which === 13) {
			setTimeout(function () {
				$(e.target).closest(".input").focus();
			});
		}
	}).on("change", ".c-select-input input.input", function (e) {
		// Remove selected class from list options if the user types in an arbitrary value
		setTimeout(function () {
			var val = $(this).val();
			if (!val || !$parentContextData(this).get_options().some(function (o) { return o.get_value() === val; }))
				$(this).closest(".c-select-input").find(".c-select-input-list li").removeClass("selected");
		}.bind(this), 100);
	}).on("input", ".c-select-input input.input", function (e) {
		var val = $(this).val();
		var control = $parentContextData(this);
		control.set_inputText(val);
	});


	$(document).on("focus", ".c-select-input input", function () {
		$(this).parent().addClass('badge-hidden');
		$(this).parents(".c-select-input-container").find(".c-validation").text("");
	});

	Cognito.Forms.SelectInput = {
		isSelectingOption: false
	}

	$(document).on("mousedown", ".c-select-input-list li", function () {
		Cognito.Forms.SelectInput.isSelectingOption = true;
	})
	.on("mouseup", ".c-select-input-list li", function () {
		Cognito.Forms.SelectInput.isSelectingOption = false;
	})
	.on("blur", ".c-select-input input", function () {
		var inputEl = $(this);

		// If the place holder is not cleared while the value is being
		// selected, it will flash when the option is selected and the
		// input element loses focus
		var placeholder = this.placeholder;
		this.placeholder = "";

		// Need to wait a tick for invalid email addresses to get cleared,
		// otherwise the badge will appear to the left of the invalid email
		// address rather than the placeholder text.
		var badgeAndPlaceholderFunc = function () {
			inputValue = inputEl.val() ? inputEl.val() : placeholder;
			inputEl.parent().removeClass('badge-hidden').find('.input-text-placeholder').text(inputValue);
			inputEl.attr("placeholder", placeholder)
		};

		// Wait for the mouse up event after the input option has been selected
		var intervalId = setInterval(function () {
			if (!Cognito.Forms.SelectInput.isSelectingOption) {
				window.clearInterval(intervalId);
				badgeAndPlaceholderFunc();
			}
		}, 100);

		if (!Cognito.Forms.SelectInput.isSelectingOption)
			deactivate(inputEl.parents(".c-select-input")[0]);
	});
});
})(typeof exports === 'undefined');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,