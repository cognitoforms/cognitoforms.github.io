(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["app-insights"],{

/***/ "./src/framework/logging/app-insights.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AppInsights; });
/* harmony import */ var _microsoft_applicationinsights_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@microsoft+applicationinsights-web@2.5.4/node_modules/@microsoft/applicationinsights-web/dist-esm/applicationinsights-web.js");

class AppInsights {
  constructor(key, endpointUrl) {
    this.appInsights = void 0;
    const initializer = new _microsoft_applicationinsights_web__WEBPACK_IMPORTED_MODULE_0__["ApplicationInsights"]({
      config: {
        isCookieUseDisabled: true,
        instrumentationKey: key,
        endpointUrl: endpointUrl,
        enableUnhandledPromiseRejectionTracking: true,
        maxBatchInterval: 10000,
        // if app insights is already globally loaded, avoid doubling up on automatic telemetry collection
        disableExceptionTracking: this.hasGlobalAppInsights,
        disableAjaxTracking: this.hasGlobalAppInsights,
        disableFetchTracking: this.hasGlobalAppInsights
      }
    });
    initializer.loadAppInsights();
    this.appInsights = initializer.appInsights;
  }
  get hasGlobalAppInsights() {
    return !!window['appInsights'];
  }

  // ---------Methods----------
  log(error) {
    let additionalProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.appInsights.trackException({
      id: '',
      exception: error,
      properties: additionalProperties
    });
  }
  pageView() {
    let additionalProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (!this.hasGlobalAppInsights) this.appInsights.trackPageView({
      properties: additionalProperties
    });
  }
  addTelemetryInitializer(telemetryInitializer) {
    this.appInsights.addTelemetryInitializer(telemetryInitializer);
  }
  logCustomEvent(eventName) {
    let additionalProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.appInsights.trackEvent({
      name: eventName,
      properties: additionalProperties
    });
  }
  logMetric(metricName, amount) {
    let additionalProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    this.appInsights.trackMetric({
      name: metricName,
      average: amount,
      properties: additionalProperties
    });
  }
  logTrace(message) {
    let additionalProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.appInsights.trackTrace({
      message,
      properties: additionalProperties
    });
  }
  startTrackEvent(name) {
    this.appInsights.startTrackEvent(name);
  }
  stopTrackEvent(name, properties, measurements) {
    this.appInsights.stopTrackEvent(name, properties, measurements);
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2xvZ2dpbmcvYXBwLWluc2lnaHRzLnRzIl0sIm5hbWVzIjpbIkFwcEluc2lnaHRzIiwiY29uc3RydWN0b3IiLCJrZXkiLCJlbmRwb2ludFVybCIsImFwcEluc2lnaHRzIiwiaW5pdGlhbGl6ZXIiLCJBcHBsaWNhdGlvbkluc2lnaHRzSW5pdGlhbGl6ZXIiLCJjb25maWciLCJpc0Nvb2tpZVVzZURpc2FibGVkIiwiaW5zdHJ1bWVudGF0aW9uS2V5IiwiZW5hYmxlVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvblRyYWNraW5nIiwibWF4QmF0Y2hJbnRlcnZhbCIsImRpc2FibGVFeGNlcHRpb25UcmFja2luZyIsImhhc0dsb2JhbEFwcEluc2lnaHRzIiwiZGlzYWJsZUFqYXhUcmFja2luZyIsImRpc2FibGVGZXRjaFRyYWNraW5nIiwibG9hZEFwcEluc2lnaHRzIiwid2luZG93IiwibG9nIiwiZXJyb3IiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInRyYWNrRXhjZXB0aW9uIiwiaWQiLCJleGNlcHRpb24iLCJwcm9wZXJ0aWVzIiwicGFnZVZpZXciLCJ0cmFja1BhZ2VWaWV3IiwiYWRkVGVsZW1ldHJ5SW5pdGlhbGl6ZXIiLCJ0ZWxlbWV0cnlJbml0aWFsaXplciIsImxvZ0N1c3RvbUV2ZW50IiwiZXZlbnROYW1lIiwidHJhY2tFdmVudCIsIm5hbWUiLCJsb2dNZXRyaWMiLCJtZXRyaWNOYW1lIiwiYW1vdW50IiwidHJhY2tNZXRyaWMiLCJhdmVyYWdlIiwibG9nVHJhY2UiLCJtZXNzYWdlIiwidHJhY2tUcmFjZSIsInN0YXJ0VHJhY2tFdmVudCIsInN0b3BUcmFja0V2ZW50IiwibWVhc3VyZW1lbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUFBO0FBQUE7QUFBMkc7QUFLNUYsTUFBTUEsV0FBVyxDQUFDO0VBQ2hDQyxXQUFXQSxDQUFDQyxHQUFXLEVBQUVDLFdBQW1CLEVBQUU7SUFBQSxLQW9CdENDLFdBQVc7SUFuQmxCLE1BQU1DLFdBQVcsR0FBRyxJQUFJQyxzRkFBOEIsQ0FBQztNQUN0REMsTUFBTSxFQUFFO1FBQ1BDLG1CQUFtQixFQUFFLElBQUk7UUFDekJDLGtCQUFrQixFQUFFUCxHQUFHO1FBQ3ZCQyxXQUFXLEVBQUVBLFdBQVc7UUFDeEJPLHVDQUF1QyxFQUFFLElBQUk7UUFDN0NDLGdCQUFnQixFQUFFLEtBQUs7UUFDdkI7UUFDQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDQyxvQkFBb0I7UUFDbkRDLG1CQUFtQixFQUFFLElBQUksQ0FBQ0Qsb0JBQW9CO1FBQzlDRSxvQkFBb0IsRUFBRSxJQUFJLENBQUNGO01BQzVCO0lBQ0QsQ0FBQyxDQUFtQjtJQUVwQlIsV0FBVyxDQUFDVyxlQUFlLENBQUMsQ0FBQztJQUU3QixJQUFJLENBQUNaLFdBQVcsR0FBR0MsV0FBVyxDQUFDRCxXQUFXO0VBQzNDO0VBSUEsSUFBSVMsb0JBQW9CQSxDQUFBLEVBQUc7SUFDMUIsT0FBTyxDQUFDLENBQUNJLE1BQU0sQ0FBQyxhQUFhLENBQUM7RUFDL0I7O0VBRUE7RUFDQUMsR0FBR0EsQ0FBQ0MsS0FBWSxFQUFxRDtJQUFBLElBQW5EQyxvQkFBMEMsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtJQUNsRSxJQUFJLENBQUNqQixXQUFXLENBQUNvQixjQUFjLENBQUM7TUFDL0JDLEVBQUUsRUFBRSxFQUFFO01BQ05DLFNBQVMsRUFBRVAsS0FBSztNQUNoQlEsVUFBVSxFQUFFUDtJQUNiLENBQUMsQ0FBQztFQUNIO0VBRUFRLFFBQVFBLENBQUEsRUFBdUQ7SUFBQSxJQUF0RFIsb0JBQTZDLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7SUFDNUQsSUFBSSxDQUFDLElBQUksQ0FBQ1Isb0JBQW9CLEVBQzdCLElBQUksQ0FBQ1QsV0FBVyxDQUFDeUIsYUFBYSxDQUFDO01BQUVGLFVBQVUsRUFBRVA7SUFBcUIsQ0FBQyxDQUFDO0VBQ3RFO0VBRUFVLHVCQUF1QkEsQ0FBQ0Msb0JBQThELEVBQUU7SUFDdkYsSUFBSSxDQUFDM0IsV0FBVyxDQUFDMEIsdUJBQXVCLENBQUNDLG9CQUFvQixDQUFDO0VBQy9EO0VBRUFDLGNBQWNBLENBQUNDLFNBQWlCLEVBQXdEO0lBQUEsSUFBdERiLG9CQUE2QyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJO0lBQ3JGLElBQUksQ0FBQ2pCLFdBQVcsQ0FBQzhCLFVBQVUsQ0FBQztNQUFFQyxJQUFJLEVBQUVGLFNBQVM7TUFBRU4sVUFBVSxFQUFFUDtJQUFxQixDQUFDLENBQUM7RUFDbkY7RUFFQWdCLFNBQVNBLENBQUNDLFVBQWtCLEVBQUVDLE1BQWMsRUFBd0Q7SUFBQSxJQUF0RGxCLG9CQUE2QyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJO0lBQ2pHLElBQUksQ0FBQ2pCLFdBQVcsQ0FBQ21DLFdBQVcsQ0FBQztNQUM1QkosSUFBSSxFQUFFRSxVQUFVO01BQ2hCRyxPQUFPLEVBQUVGLE1BQU07TUFDZlgsVUFBVSxFQUFFUDtJQUNiLENBQUMsQ0FBQztFQUNIO0VBRUFxQixRQUFRQSxDQUFDQyxPQUFlLEVBQXdEO0lBQUEsSUFBdER0QixvQkFBNkMsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtJQUM3RSxJQUFJLENBQUNqQixXQUFXLENBQUN1QyxVQUFVLENBQUM7TUFDM0JELE9BQU87TUFDUGYsVUFBVSxFQUFFUDtJQUNiLENBQUMsQ0FBQztFQUNIO0VBRUF3QixlQUFlQSxDQUFDVCxJQUFZLEVBQUU7SUFDN0IsSUFBSSxDQUFDL0IsV0FBVyxDQUFDd0MsZUFBZSxDQUFDVCxJQUFJLENBQUM7RUFDdkM7RUFFQVUsY0FBY0EsQ0FBQ1YsSUFBWSxFQUFFUixVQUFxQyxFQUFFbUIsWUFBdUMsRUFBRTtJQUM1RyxJQUFJLENBQUMxQyxXQUFXLENBQUN5QyxjQUFjLENBQUNWLElBQUksRUFBRVIsVUFBVSxFQUFFbUIsWUFBWSxDQUFDO0VBQ2hFO0FBQ0QsQyIsImZpbGUiOiJhcHAtaW5zaWdodHMuYzY2MmE4MmQxYWIzZjMwMTA3NDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IElUZWxlbWV0cnlJdGVtIH0gZnJvbSAnQG1pY3Jvc29mdC9hcHBsaWNhdGlvbmluc2lnaHRzLXdlYic7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uSW5zaWdodHMgYXMgQXBwbGljYXRpb25JbnNpZ2h0c0luaXRpYWxpemVyIH0gZnJvbSAnQG1pY3Jvc29mdC9hcHBsaWNhdGlvbmluc2lnaHRzLXdlYic7XHJcbmltcG9ydCB0eXBlIHsgQXBwbGljYXRpb25JbnNpZ2h0cyB9IGZyb20gJ0BtaWNyb3NvZnQvYXBwbGljYXRpb25pbnNpZ2h0cy1hbmFseXRpY3MtanMvdHlwZXMvYXBwbGljYXRpb25pbnNpZ2h0cy1hbmFseXRpY3MtanMnO1xyXG5pbXBvcnQgdHlwZSB7IEluaXRpYWxpemF0aW9uIH0gZnJvbSAnQG1pY3Jvc29mdC9hcHBsaWNhdGlvbmluc2lnaHRzLXdlYi9kaXN0LWVzbS9Jbml0aWFsaXphdGlvbic7XHJcbmltcG9ydCB0eXBlIHsgT2JqZWN0TG9va3VwIH0gZnJvbSAnc3JjL3V0aWwnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwSW5zaWdodHMge1xyXG5cdGNvbnN0cnVjdG9yKGtleTogc3RyaW5nLCBlbmRwb2ludFVybDogc3RyaW5nKSB7XHJcblx0XHRjb25zdCBpbml0aWFsaXplciA9IG5ldyBBcHBsaWNhdGlvbkluc2lnaHRzSW5pdGlhbGl6ZXIoe1xyXG5cdFx0XHRjb25maWc6IHtcclxuXHRcdFx0XHRpc0Nvb2tpZVVzZURpc2FibGVkOiB0cnVlLFxyXG5cdFx0XHRcdGluc3RydW1lbnRhdGlvbktleToga2V5LFxyXG5cdFx0XHRcdGVuZHBvaW50VXJsOiBlbmRwb2ludFVybCxcclxuXHRcdFx0XHRlbmFibGVVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uVHJhY2tpbmc6IHRydWUsXHJcblx0XHRcdFx0bWF4QmF0Y2hJbnRlcnZhbDogMTAwMDAsXHJcblx0XHRcdFx0Ly8gaWYgYXBwIGluc2lnaHRzIGlzIGFscmVhZHkgZ2xvYmFsbHkgbG9hZGVkLCBhdm9pZCBkb3VibGluZyB1cCBvbiBhdXRvbWF0aWMgdGVsZW1ldHJ5IGNvbGxlY3Rpb25cclxuXHRcdFx0XHRkaXNhYmxlRXhjZXB0aW9uVHJhY2tpbmc6IHRoaXMuaGFzR2xvYmFsQXBwSW5zaWdodHMsXHJcblx0XHRcdFx0ZGlzYWJsZUFqYXhUcmFja2luZzogdGhpcy5oYXNHbG9iYWxBcHBJbnNpZ2h0cyxcclxuXHRcdFx0XHRkaXNhYmxlRmV0Y2hUcmFja2luZzogdGhpcy5oYXNHbG9iYWxBcHBJbnNpZ2h0c1xyXG5cdFx0XHR9XHJcblx0XHR9KSBhcyBJbml0aWFsaXphdGlvbjtcclxuXHJcblx0XHRpbml0aWFsaXplci5sb2FkQXBwSW5zaWdodHMoKTtcclxuXHJcblx0XHR0aGlzLmFwcEluc2lnaHRzID0gaW5pdGlhbGl6ZXIuYXBwSW5zaWdodHM7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFwcEluc2lnaHRzIDogQXBwbGljYXRpb25JbnNpZ2h0cztcclxuXHJcblx0Z2V0IGhhc0dsb2JhbEFwcEluc2lnaHRzKCkge1xyXG5cdFx0cmV0dXJuICEhd2luZG93WydhcHBJbnNpZ2h0cyddO1xyXG5cdH1cclxuXHJcblx0Ly8gLS0tLS0tLS0tTWV0aG9kcy0tLS0tLS0tLS1cclxuXHRsb2coZXJyb3I6IEVycm9yLCBhZGRpdGlvbmFsUHJvcGVydGllczogT2JqZWN0TG9va3VwPHN0cmluZz4gPSBudWxsKSB7XHJcblx0XHR0aGlzLmFwcEluc2lnaHRzLnRyYWNrRXhjZXB0aW9uKHtcclxuXHRcdFx0aWQ6ICcnLFxyXG5cdFx0XHRleGNlcHRpb246IGVycm9yLFxyXG5cdFx0XHRwcm9wZXJ0aWVzOiBhZGRpdGlvbmFsUHJvcGVydGllc1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRwYWdlVmlldyhhZGRpdGlvbmFsUHJvcGVydGllczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBudWxsKSB7XHJcblx0XHRpZiAoIXRoaXMuaGFzR2xvYmFsQXBwSW5zaWdodHMpXHJcblx0XHRcdHRoaXMuYXBwSW5zaWdodHMudHJhY2tQYWdlVmlldyh7IHByb3BlcnRpZXM6IGFkZGl0aW9uYWxQcm9wZXJ0aWVzIH0pO1xyXG5cdH1cclxuXHJcblx0YWRkVGVsZW1ldHJ5SW5pdGlhbGl6ZXIodGVsZW1ldHJ5SW5pdGlhbGl6ZXI6IChpdGVtOiBJVGVsZW1ldHJ5SXRlbSkgPT4gYm9vbGVhbiB8IHZvaWQpIHtcclxuXHRcdHRoaXMuYXBwSW5zaWdodHMuYWRkVGVsZW1ldHJ5SW5pdGlhbGl6ZXIodGVsZW1ldHJ5SW5pdGlhbGl6ZXIpO1xyXG5cdH1cclxuXHJcblx0bG9nQ3VzdG9tRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IG51bGwpIHtcclxuXHRcdHRoaXMuYXBwSW5zaWdodHMudHJhY2tFdmVudCh7IG5hbWU6IGV2ZW50TmFtZSwgcHJvcGVydGllczogYWRkaXRpb25hbFByb3BlcnRpZXMgfSk7XHJcblx0fVxyXG5cclxuXHRsb2dNZXRyaWMobWV0cmljTmFtZTogc3RyaW5nLCBhbW91bnQ6IG51bWJlciwgYWRkaXRpb25hbFByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gbnVsbCkge1xyXG5cdFx0dGhpcy5hcHBJbnNpZ2h0cy50cmFja01ldHJpYyh7XHJcblx0XHRcdG5hbWU6IG1ldHJpY05hbWUsXHJcblx0XHRcdGF2ZXJhZ2U6IGFtb3VudCxcclxuXHRcdFx0cHJvcGVydGllczogYWRkaXRpb25hbFByb3BlcnRpZXNcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0bG9nVHJhY2UobWVzc2FnZTogc3RyaW5nLCBhZGRpdGlvbmFsUHJvcGVydGllczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBudWxsKSB7XHJcblx0XHR0aGlzLmFwcEluc2lnaHRzLnRyYWNrVHJhY2Uoe1xyXG5cdFx0XHRtZXNzYWdlLFxyXG5cdFx0XHRwcm9wZXJ0aWVzOiBhZGRpdGlvbmFsUHJvcGVydGllc1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRzdGFydFRyYWNrRXZlbnQobmFtZTogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmFwcEluc2lnaHRzLnN0YXJ0VHJhY2tFdmVudChuYW1lKTtcclxuXHR9XHJcblxyXG5cdHN0b3BUcmFja0V2ZW50KG5hbWU6IHN0cmluZywgcHJvcGVydGllczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSwgbWVhc3VyZW1lbnRzOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9KSB7XHJcblx0XHR0aGlzLmFwcEluc2lnaHRzLnN0b3BUcmFja0V2ZW50KG5hbWUsIHByb3BlcnRpZXMsIG1lYXN1cmVtZW50cyk7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=