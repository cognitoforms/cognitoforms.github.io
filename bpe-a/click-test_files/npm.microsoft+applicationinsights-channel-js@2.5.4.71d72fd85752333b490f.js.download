(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.microsoft+applicationinsights-channel-js@2.5.4"],{

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/*! exports provided: EnvelopeCreator, DependencyEnvelopeCreator, EventEnvelopeCreator, ExceptionEnvelopeCreator, MetricEnvelopeCreator, PageViewEnvelopeCreator, PageViewPerformanceEnvelopeCreator, TraceEnvelopeCreator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EnvelopeCreator", function() { return EnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DependencyEnvelopeCreator", function() { return DependencyEnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEnvelopeCreator", function() { return EventEnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExceptionEnvelopeCreator", function() { return ExceptionEnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetricEnvelopeCreator", function() { return MetricEnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageViewEnvelopeCreator", function() { return PageViewEnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageViewPerformanceEnvelopeCreator", function() { return PageViewPerformanceEnvelopeCreator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraceEnvelopeCreator", function() { return TraceEnvelopeCreator; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");



// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload
var baseType = "baseType";
var baseData = "baseData";
var EnvelopeCreator = /** @class */ (function () {
    function EnvelopeCreator() {
    }
    EnvelopeCreator.extractPropsAndMeasurements = function (data, properties, measurements) {
        if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(data)) {
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    var value = data[key];
                    if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNumber(value)) {
                        measurements[key] = value;
                    }
                    else if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isString(value)) {
                        properties[key] = value;
                    }
                    else if (Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["hasJSON"])()) {
                        properties[key] = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getJSON"])().stringify(value);
                    }
                }
            }
        }
    };
    // TODO: Do we want this to take logger as arg or use this._logger as nonstatic?
    EnvelopeCreator.createEnvelope = function (logger, envelopeType, telemetryItem, data) {
        var envelope = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Envelope"](logger, data, envelopeType);
        if (telemetryItem[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["SampleRate"]]) {
            envelope.sampleRate = telemetryItem[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["SampleRate"]];
        }
        envelope.iKey = telemetryItem.iKey;
        var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, "");
        envelope.name = envelope.name.replace("{0}", iKeyNoDashes);
        // extract all extensions from ctx
        EnvelopeCreator.extractPartAExtensions(telemetryItem, envelope);
        // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags
        if (!telemetryItem.tags) {
            telemetryItem.tags = [];
        }
        return envelope;
    };
    /*
     * Maps Part A data from CS 4.0
     */
    EnvelopeCreator.extractPartAExtensions = function (item, env) {
        // todo: switch to keys from common in this method
        if (!env.tags) {
            env.tags = {};
        }
        if (!item.ext) {
            item.ext = {};
        }
        if (!item.tags) {
            item.tags = [];
        }
        if (item.ext.user) {
            if (item.ext.user.authId) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].userAuthUserId] = item.ext.user.authId;
            }
            var userId = item.ext.user.id || item.ext.user.localId;
            if (userId) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].userId] = userId;
            }
        }
        if (item.ext.app) {
            if (item.ext.app.sesId) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].sessionId] = item.ext.app.sesId;
            }
        }
        if (item.ext.device) {
            if (item.ext.device.id || item.ext.device.localId) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceId] = item.ext.device.id || item.ext.device.localId;
            }
            if (item.ext.device.deviceClass) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceType] = item.ext.device.deviceClass;
            }
            if (item.ext.device.ip) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceIp] = item.ext.device.ip;
            }
        }
        if (item.ext.web) {
            var web = item.ext.web;
            if (web.browserLang) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceLanguage] = web.browserLang;
            }
            if (web.browserVer) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceBrowserVersion] = web.browserVer;
            }
            if (web.browser) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceBrowser] = web.browser;
            }
            env.data = env.data || {};
            env.data.baseData = env.data.baseData || {};
            env.data.baseData.properties = env.data.baseData.properties || {};
            if (web.domain) {
                env.data.baseData.properties['domain'] = web.domain;
            }
            if (web.isManual) {
                env.data.baseData.properties['isManual'] = web.isManual.toString();
            }
            if (web.screenRes) {
                env.data.baseData.properties['screenRes'] = web.screenRes;
            }
            if (web.userConsent) {
                env.data.baseData.properties['userConsent'] = web.userConsent.toString();
            }
        }
        if (item.ext.device) {
            if (item.ext.device.model) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceModel] = item.ext.device.model;
            }
        }
        if (item.ext.os && item.ext.os.name) {
            env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceOS] = item.ext.os.name;
        }
        if (item.ext.device) {
            if (item.ext.device.deviceType) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].deviceType] = item.ext.device.deviceType;
            }
        }
        // No support for mapping Trace.traceState to 2.0 as it is currently empty
        if (item.ext.trace) {
            if (item.ext.trace.parentID) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].operationParentId] = item.ext.trace.parentID;
            }
            if (item.ext.trace.name) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].operationName] = item.ext.trace.name;
            }
            if (item.ext.trace.traceID) {
                env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].operationId] = item.ext.trace.traceID;
            }
        }
        // Sample 4.0 schema
        //  {
        //     "time" : "2018-09-05T22:51:22.4936Z",
        //     "name" : "MetricWithNamespace",
        //     "iKey" : "ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e",
        //     "ext": {  "cloud": {
        //          "role": "WATSON3",
        //          "roleInstance": "CO4AEAP00000260"
        //      },
        //      "device": {}, "correlation": {} },
        //      "tags": [
        //        { "amazon.region" : "east2" },
        //        { "os.expid" : "wp:02df239" }
        //     ]
        //   }
        var tgs = {};
        var _loop_1 = function (i) {
            var tg = item.tags[i];
            // CoreUtils.objKeys returns an array of keys
            _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].arrForEach(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].objKeys(tg), function (key) {
                tgs[key] = tg[key];
            });
            item.tags.splice(i, 1);
        };
        // deals with tags.push({object})
        for (var i = item.tags.length - 1; i >= 0; i--) {
            _loop_1(i);
        }
        // deals with tags[key]=value
        for (var tg in item.tags) {
            tgs[tg] = item.tags[tg];
        }
        env.tags = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, env.tags, tgs);
        if (!env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].internalSdkVersion]) {
            // Append a version in case it is not already set
            env.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["CtxTagKeys"].internalSdkVersion] = "javascript:" + EnvelopeCreator.Version;
        }
    };
    EnvelopeCreator.Version = "2.5.4";
    return EnvelopeCreator;
}());

var DependencyEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DependencyEnvelopeCreator, _super);
    function DependencyEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DependencyEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var customMeasurements = telemetryItem.baseData.measurements || {};
        var customProperties = telemetryItem.baseData.properties || {};
        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);
        var bd = telemetryItem.baseData;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(bd)) {
            logger.warnToConsole("Invalid input for dependency data");
            return null;
        }
        var id = bd.id;
        var absoluteUrl = bd.target;
        var command = bd.name;
        var duration = bd.duration;
        var success = bd.success;
        var resultCode = bd.responseCode;
        var requestAPI = bd.type;
        var correlationContext = bd.correlationContext;
        var method = bd.properties && bd.properties[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["HttpMethod"]] ? bd.properties[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["HttpMethod"]] : "GET";
        var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["RemoteDependencyData"](logger, id, absoluteUrl, command, duration, success, resultCode, method, requestAPI, correlationContext, customProperties, customMeasurements);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["RemoteDependencyData"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["RemoteDependencyData"].envelopeType, telemetryItem, data);
    };
    DependencyEnvelopeCreator.DependencyEnvelopeCreator = new DependencyEnvelopeCreator();
    return DependencyEnvelopeCreator;
}(EnvelopeCreator));

var EventEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](EventEnvelopeCreator, _super);
    function EventEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EventEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var customProperties = {};
        var customMeasurements = {};
        if (telemetryItem.baseType !== _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"].dataType) {
            customProperties['baseTypeSource'] = telemetryItem.baseType; // save the passed in base type as a property
        }
        if (telemetryItem.baseType === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"].dataType) {
            customProperties = telemetryItem.baseData.properties || {};
            customMeasurements = telemetryItem.baseData.measurements || {};
        }
        else {
            if (telemetryItem.baseData) {
                EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.baseData, customProperties, customMeasurements);
            }
        }
        // Exract root level properties from part C telemetryItem.data
        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);
        var eventName = telemetryItem.baseData.name;
        var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"](logger, eventName, customProperties, customMeasurements);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"].envelopeType, telemetryItem, data);
    };
    EventEnvelopeCreator.EventEnvelopeCreator = new EventEnvelopeCreator();
    return EventEnvelopeCreator;
}(EnvelopeCreator));

var ExceptionEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ExceptionEnvelopeCreator, _super);
    function ExceptionEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExceptionEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var bd = telemetryItem.baseData;
        var baseData = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].CreateFromInterface(logger, bd);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].envelopeType, telemetryItem, data);
    };
    ExceptionEnvelopeCreator.ExceptionEnvelopeCreator = new ExceptionEnvelopeCreator();
    return ExceptionEnvelopeCreator;
}(EnvelopeCreator));

var MetricEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](MetricEnvelopeCreator, _super);
    function MetricEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MetricEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var props = telemetryItem.baseData.properties || {};
        var measurements = telemetryItem.baseData.measurements || {};
        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, props, measurements);
        var name = telemetryItem.baseData.name;
        var average = telemetryItem.baseData.average;
        var sampleCount = telemetryItem.baseData.sampleCount;
        var min = telemetryItem.baseData.min;
        var max = telemetryItem.baseData.max;
        var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Metric"](logger, name, average, sampleCount, min, max, props, measurements);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Metric"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Metric"].envelopeType, telemetryItem, data);
    };
    MetricEnvelopeCreator.MetricEnvelopeCreator = new MetricEnvelopeCreator();
    return MetricEnvelopeCreator;
}(EnvelopeCreator));

var PageViewEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PageViewEnvelopeCreator, _super);
    function PageViewEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageViewEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        // Since duration is not part of the domain properties in Common Schema, extract it from part C
        var duration;
        if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData) &&
            !_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData.properties) &&
            !_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData.properties.duration)) {
            duration = telemetryItem.baseData.properties.duration;
            delete telemetryItem.baseData.properties.duration;
        }
        else if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.data) &&
            !_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.data["duration"])) {
            duration = telemetryItem.data["duration"];
            delete telemetryItem.data["duration"];
        }
        var bd = telemetryItem.baseData;
        // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel
        var currentContextId;
        if (telemetryItem.ext && telemetryItem.ext.trace && telemetryItem.ext.trace.traceID) {
            currentContextId = telemetryItem.ext.trace.traceID;
        }
        var id = bd.id || currentContextId;
        var name = bd.name;
        var url = bd.uri;
        var properties = bd.properties || {};
        var measurements = bd.measurements || {};
        // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
        if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(bd.refUri)) {
            properties["refUri"] = bd.refUri;
        }
        // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
        if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(bd.pageType)) {
            properties["pageType"] = bd.pageType;
        }
        // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
        if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(bd.isLoggedIn)) {
            properties["isLoggedIn"] = bd.isLoggedIn.toString();
        }
        // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property
        if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(bd.properties)) {
            var pageTags = bd.properties;
            for (var key in pageTags) {
                if (pageTags.hasOwnProperty(key)) {
                    properties[key] = pageTags[key];
                }
            }
        }
        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, properties, measurements);
        var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageView"](logger, name, url, duration, properties, measurements, id);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageView"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageView"].envelopeType, telemetryItem, data);
    };
    PageViewEnvelopeCreator.PageViewEnvelopeCreator = new PageViewEnvelopeCreator();
    return PageViewEnvelopeCreator;
}(EnvelopeCreator));

var PageViewPerformanceEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](PageViewPerformanceEnvelopeCreator, _super);
    function PageViewPerformanceEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageViewPerformanceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var bd = telemetryItem.baseData;
        var name = bd.name;
        var url = bd.uri || bd.url;
        var properties = bd.properties || {};
        var measurements = bd.measurements || {};
        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, properties, measurements);
        var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageViewPerformance"](logger, name, url, undefined, properties, measurements, bd);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageViewPerformance"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageViewPerformance"].envelopeType, telemetryItem, data);
    };
    PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator = new PageViewPerformanceEnvelopeCreator();
    return PageViewPerformanceEnvelopeCreator;
}(EnvelopeCreator));

var TraceEnvelopeCreator = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](TraceEnvelopeCreator, _super);
    function TraceEnvelopeCreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TraceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {
        this._logger = logger;
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(telemetryItem.baseData)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var message = telemetryItem.baseData.message;
        var severityLevel = telemetryItem.baseData.severityLevel;
        var props = telemetryItem.baseData.properties || {};
        var measurements = telemetryItem.baseData.measurements || {};
        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, props, measurements);
        var baseData = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Trace"](logger, message, severityLevel, props, measurements);
        var data = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Data"](_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Trace"].dataType, baseData);
        return EnvelopeCreator.createEnvelope(logger, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Trace"].envelopeType, telemetryItem, data);
    };
    TraceEnvelopeCreator.TraceEnvelopeCreator = new TraceEnvelopeCreator();
    return TraceEnvelopeCreator;
}(EnvelopeCreator));

//# sourceMappingURL=EnvelopeCreator.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Offline.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Offline.js ***!
  \******************************************************************************************************************************************************************************************************************/
/*! exports provided: OfflineListener, Offline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OfflineListener", function() { return OfflineListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Offline", function() { return Offline; });
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");

/**
 * @description Monitors browser for offline events
 * @export default - Offline: Static instance of OfflineListener
 * @class OfflineListener
 */
var OfflineListener = /** @class */ (function () {
    function OfflineListener() {
        this._onlineStatus = true;
        var _window = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["getWindow"])();
        var _document = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["getDocument"])();
        var isListening = false;
        var _this = this;
        try {
            if (_window) {
                if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["EventHelper"].Attach(_window, 'online', this._setOnline.bind(_this))) {
                    _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["EventHelper"].Attach(_window, 'offline', this._setOffline.bind(_this));
                    isListening = true;
                }
            }
            if (_document) {
                // Also attach to the document.body or document
                var target = _document.body || _document;
                if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].isUndefined(target.ononline)) {
                    target.ononline = this._setOnline.bind(_this);
                    target.onoffline = this._setOffline.bind(_this);
                    isListening = true;
                }
            }
        }
        catch (e) {
            // this makes react-native less angry
            isListening = false;
        }
        this.isListening = isListening;
    }
    OfflineListener.prototype.isOnline = function () {
        var _navigator = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["getNavigator"])();
        if (this.isListening) {
            return this._onlineStatus;
        }
        else if (_navigator && !_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_0__["CoreUtils"].isNullOrUndefined(_navigator.onLine)) {
            return _navigator.onLine;
        }
        else {
            // Cannot determine online status - report as online
            return true;
        }
    };
    OfflineListener.prototype.isOffline = function () {
        return !this.isOnline();
    };
    OfflineListener.prototype._setOnline = function () {
        this._onlineStatus = true;
    };
    OfflineListener.prototype._setOffline = function () {
        this._onlineStatus = false;
    };
    OfflineListener.Offline = new OfflineListener;
    return OfflineListener;
}());

var Offline = OfflineListener.Offline;
//# sourceMappingURL=Offline.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/*! exports provided: ArraySendBuffer, SessionStorageSendBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArraySendBuffer", function() { return ArraySendBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionStorageSendBuffer", function() { return SessionStorageSendBuffer; });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");


/*
 * An array based send buffer.
 */
var ArraySendBuffer = /** @class */ (function () {
    function ArraySendBuffer(config) {
        this._config = config;
        this._buffer = [];
    }
    ArraySendBuffer.prototype.enqueue = function (payload) {
        this._buffer.push(payload);
    };
    ArraySendBuffer.prototype.count = function () {
        return this._buffer.length;
    };
    ArraySendBuffer.prototype.clear = function () {
        this._buffer.length = 0;
    };
    ArraySendBuffer.prototype.getItems = function () {
        return this._buffer.slice(0);
    };
    ArraySendBuffer.prototype.batchPayloads = function (payload) {
        if (payload && payload.length > 0) {
            var batch = this._config.emitLineDelimitedJson() ?
                payload.join("\n") :
                "[" + payload.join(",") + "]";
            return batch;
        }
        return null;
    };
    ArraySendBuffer.prototype.markAsSent = function (payload) {
        this.clear();
    };
    ArraySendBuffer.prototype.clearSent = function (payload) {
        // not supported
    };
    return ArraySendBuffer;
}());

/*
 * Session storege buffer holds a copy of all unsent items in the browser session storage.
 */
var SessionStorageSendBuffer = /** @class */ (function () {
    function SessionStorageSendBuffer(logger, config) {
        this._bufferFullMessageSent = false;
        this._logger = logger;
        this._config = config;
        var bufferItems = this.getBuffer(SessionStorageSendBuffer.BUFFER_KEY);
        var notDeliveredItems = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
        this._buffer = bufferItems.concat(notDeliveredItems);
        // If the buffer has too many items, drop items from the end.
        if (this._buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {
            this._buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;
        }
        // update DataLossAnalyzer with the number of recovered items
        // Uncomment if you want to use DataLossanalyzer
        // DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;
        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);
        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);
    }
    SessionStorageSendBuffer.prototype.enqueue = function (payload) {
        if (this._buffer.length >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {
            // sent internal log only once per page view
            if (!this._bufferFullMessageSent) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].SessionStorageBufferFull, "Maximum buffer size reached: " + this._buffer.length, true);
                this._bufferFullMessageSent = true;
            }
            return;
        }
        this._buffer.push(payload);
        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);
    };
    SessionStorageSendBuffer.prototype.count = function () {
        return this._buffer.length;
    };
    SessionStorageSendBuffer.prototype.clear = function () {
        this._buffer.length = 0;
        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);
        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);
        this._bufferFullMessageSent = false;
    };
    SessionStorageSendBuffer.prototype.getItems = function () {
        return this._buffer.slice(0);
    };
    SessionStorageSendBuffer.prototype.batchPayloads = function (payload) {
        if (payload && payload.length > 0) {
            var batch = this._config.emitLineDelimitedJson() ?
                payload.join("\n") :
                "[" + payload.join(",") + "]";
            return batch;
        }
        return null;
    };
    SessionStorageSendBuffer.prototype.markAsSent = function (payload) {
        this._buffer = this.removePayloadsFromBuffer(payload, this._buffer);
        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);
        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
        if (sentElements instanceof Array && payload instanceof Array) {
            sentElements = sentElements.concat(payload);
            if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {
                // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements
                // until we receive a response from the backend and the buffer has free space again (see clearSent method)
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].SessionStorageBufferFull, "Sent buffer reached its maximum size: " + sentElements.length, true);
                sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;
            }
            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);
        }
    };
    SessionStorageSendBuffer.prototype.clearSent = function (payload) {
        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
        sentElements = this.removePayloadsFromBuffer(payload, sentElements);
        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);
    };
    SessionStorageSendBuffer.prototype.removePayloadsFromBuffer = function (payloads, buffer) {
        var remaining = [];
        for (var i in buffer) {
            var contains = false;
            for (var j in payloads) {
                if (payloads[j] === buffer[i]) {
                    contains = true;
                    break;
                }
            }
            if (!contains) {
                remaining.push(buffer[i]);
            }
        }
        ;
        return remaining;
    };
    SessionStorageSendBuffer.prototype.getBuffer = function (key) {
        var prefixedKey = key;
        try {
            prefixedKey = this._config.namePrefix && this._config.namePrefix() ? this._config.namePrefix() + "_" + prefixedKey : prefixedKey;
            var bufferJson = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].getSessionStorage(this._logger, prefixedKey);
            if (bufferJson) {
                var buffer = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getJSON"])().parse(bufferJson);
                if (buffer) {
                    return buffer;
                }
            }
        }
        catch (e) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].FailedToRestoreStorageBuffer, " storage key: " + prefixedKey + ", " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e) });
        }
        return [];
    };
    SessionStorageSendBuffer.prototype.setBuffer = function (key, buffer) {
        var prefixedKey = key;
        try {
            prefixedKey = this._config.namePrefix && this._config.namePrefix() ? this._config.namePrefix() + "_" + prefixedKey : prefixedKey;
            var bufferJson = JSON.stringify(buffer);
            _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].setSessionStorage(this._logger, prefixedKey, bufferJson);
        }
        catch (e) {
            // if there was an error, clear the buffer
            // telemetry is stored in the _buffer array so we won't loose any items
            _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].setSessionStorage(this._logger, prefixedKey, JSON.stringify([]));
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].FailedToSetStorageBuffer, " storage key: " + prefixedKey + ", " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].getExceptionName(e) + ". Buffer cleared", { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e) });
        }
    };
    SessionStorageSendBuffer.BUFFER_KEY = "AI_buffer";
    SessionStorageSendBuffer.SENT_BUFFER_KEY = "AI_sentBuffer";
    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.
    SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;
    return SessionStorageSendBuffer;
}());

//# sourceMappingURL=SendBuffer.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/*! exports provided: Sender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sender", function() { return Sender; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _SendBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SendBuffer */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/SendBuffer.js");
/* harmony import */ var _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EnvelopeCreator */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js");
/* harmony import */ var _Serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Serializer */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Serializer.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/* harmony import */ var _Offline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Offline */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Offline.js");
/* harmony import */ var _TelemetryProcessors_Sample__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TelemetryProcessors/Sample */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js");



 // todo move to channel




function _getResponseText(xhr) {
    try {
        return xhr.responseText;
    }
    catch (e) {
        // Best effort, as XHR may throw while XDR wont so just ignore
    }
    return null;
}
var Sender = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](Sender, _super);
    function Sender() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.priority = 1001;
        _this.identifier = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["BreezeChannelIdentifier"];
        /**
         * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.
         */
        _this._XMLHttpRequestSupported = false;
        return _this;
    }
    Sender.constructEnvelope = function (orig, iKey, logger) {
        var envelope;
        if (iKey !== orig.iKey && !_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["CoreUtils"].isNullOrUndefined(iKey)) {
            envelope = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, orig, { iKey: iKey });
        }
        else {
            envelope = orig;
        }
        switch (envelope.baseType) {
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Event"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["EventEnvelopeCreator"].EventEnvelopeCreator.Create(logger, envelope);
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Trace"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["TraceEnvelopeCreator"].TraceEnvelopeCreator.Create(logger, envelope);
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["PageView"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["PageViewEnvelopeCreator"].PageViewEnvelopeCreator.Create(logger, envelope);
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["PageViewPerformance"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["PageViewPerformanceEnvelopeCreator"].PageViewPerformanceEnvelopeCreator.Create(logger, envelope);
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Exception"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["ExceptionEnvelopeCreator"].ExceptionEnvelopeCreator.Create(logger, envelope);
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Metric"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["MetricEnvelopeCreator"].MetricEnvelopeCreator.Create(logger, envelope);
            case _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["RemoteDependencyData"].dataType:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["DependencyEnvelopeCreator"].DependencyEnvelopeCreator.Create(logger, envelope);
            default:
                return _EnvelopeCreator__WEBPACK_IMPORTED_MODULE_2__["EventEnvelopeCreator"].EventEnvelopeCreator.Create(logger, envelope);
        }
    };
    Sender._getDefaultAppInsightsChannelConfig = function () {
        // set default values
        return {
            endpointUrl: function () { return "https://dc.services.visualstudio.com/v2/track"; },
            emitLineDelimitedJson: function () { return false; },
            maxBatchInterval: function () { return 15000; },
            maxBatchSizeInBytes: function () { return 102400; },
            disableTelemetry: function () { return false; },
            enableSessionStorageBuffer: function () { return true; },
            isRetryDisabled: function () { return false; },
            isBeaconApiDisabled: function () { return true; },
            onunloadDisableBeacon: function () { return false; },
            instrumentationKey: function () { return undefined; },
            namePrefix: function () { return undefined; },
            samplingPercentage: function () { return 100; }
        };
    };
    Sender._getEmptyAppInsightsChannelConfig = function () {
        return {
            endpointUrl: undefined,
            emitLineDelimitedJson: undefined,
            maxBatchInterval: undefined,
            maxBatchSizeInBytes: undefined,
            disableTelemetry: undefined,
            enableSessionStorageBuffer: undefined,
            isRetryDisabled: undefined,
            isBeaconApiDisabled: undefined,
            onunloadDisableBeacon: undefined,
            instrumentationKey: undefined,
            namePrefix: undefined,
            samplingPercentage: undefined
        };
    };
    Sender.prototype.pause = function () {
        throw new Error("Method not implemented.");
    };
    Sender.prototype.resume = function () {
        throw new Error("Method not implemented.");
    };
    Sender.prototype.flush = function () {
        try {
            this.triggerSend();
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].FlushFailed, "flush failed, telemetry will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].dump(e) });
        }
    };
    Sender.prototype.onunloadFlush = function () {
        if ((this._senderConfig.onunloadDisableBeacon() === false || this._senderConfig.isBeaconApiDisabled() === false) && _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].IsBeaconApiSupported()) {
            try {
                this.triggerSend(true, this._beaconSender);
            }
            catch (e) {
                this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].FailedToSendQueuedTelemetry, "failed to flush with beacon sender on page unload, telemetry will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].dump(e) });
            }
        }
        else {
            this.flush();
        }
    };
    Sender.prototype.teardown = function () {
        throw new Error("Method not implemented.");
    };
    Sender.prototype.initialize = function (config, core, extensions, pluginChain) {
        _super.prototype.initialize.call(this, config, core, extensions, pluginChain);
        var ctx = this._getTelCtx();
        var identifier = this.identifier;
        this._serializer = new _Serializer__WEBPACK_IMPORTED_MODULE_3__["Serializer"](core.logger);
        this._consecutiveErrors = 0;
        this._retryAt = null;
        this._lastSend = 0;
        this._sender = null;
        var defaultConfig = Sender._getDefaultAppInsightsChannelConfig();
        this._senderConfig = Sender._getEmptyAppInsightsChannelConfig();
        var _loop_1 = function (field) {
            this_1._senderConfig[field] = function () { return ctx.getConfig(identifier, field, defaultConfig[field]()); };
        };
        var this_1 = this;
        for (var field in defaultConfig) {
            _loop_1(field);
        }
        this._buffer = (this._senderConfig.enableSessionStorageBuffer && _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].canUseSessionStorage())
            ? new _SendBuffer__WEBPACK_IMPORTED_MODULE_1__["SessionStorageSendBuffer"](this.diagLog(), this._senderConfig) : new _SendBuffer__WEBPACK_IMPORTED_MODULE_1__["ArraySendBuffer"](this._senderConfig);
        this._sample = new _TelemetryProcessors_Sample__WEBPACK_IMPORTED_MODULE_7__["Sample"](this._senderConfig.samplingPercentage(), this.diagLog());
        if (!this._senderConfig.isBeaconApiDisabled() && _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].IsBeaconApiSupported()) {
            this._sender = this._beaconSender;
        }
        else {
            if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["CoreUtils"].isUndefined(XMLHttpRequest)) {
                var testXhr = new XMLHttpRequest();
                if ("withCredentials" in testXhr) {
                    this._sender = this._xhrSender;
                    this._XMLHttpRequestSupported = true;
                }
                else if (!_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["CoreUtils"].isUndefined(XDomainRequest)) {
                    this._sender = this._xdrSender; // IE 8 and 9
                }
            }
        }
    };
    Sender.prototype.processTelemetry = function (telemetryItem, itemCtx) {
        itemCtx = this._getTelCtx(itemCtx);
        try {
            // if master off switch is set, don't send any data
            if (this._senderConfig.disableTelemetry()) {
                // Do not send/save data
                return;
            }
            // validate input
            if (!telemetryItem) {
                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].CannotSendEmptyTelemetry, "Cannot send empty telemetry");
                return;
            }
            // validate event
            if (telemetryItem.baseData && !telemetryItem.baseType) {
                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].InvalidEvent, "Cannot send telemetry without baseData and baseType");
                return;
            }
            if (!telemetryItem.baseType) {
                // Default
                telemetryItem.baseType = "EventData";
            }
            // ensure a sender was constructed
            if (!this._sender) {
                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].SenderNotInitialized, "Sender was not initialized");
                return;
            }
            // check if this item should be sampled in, else add sampleRate tag
            if (!this._isSampledIn(telemetryItem)) {
                // Item is sampled out, do not send it
                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TelemetrySampledAndNotSent, "Telemetry item was sampled out and not sent", { SampleRate: this._sample.sampleRate });
                return;
            }
            else {
                telemetryItem[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["SampleRate"]] = this._sample.sampleRate;
            }
            // construct an envelope that Application Insights endpoint can understand
            var aiEnvelope_1 = Sender.constructEnvelope(telemetryItem, this._senderConfig.instrumentationKey(), itemCtx.diagLog());
            if (!aiEnvelope_1) {
                itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].CreateEnvelopeError, "Unable to create an AppInsights envelope");
                return;
            }
            var doNotSendItem_1 = false;
            // this is for running in legacy mode, where customer may already have a custom initializer present
            if (telemetryItem.tags && telemetryItem.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["ProcessLegacy"]]) {
                _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["CoreUtils"].arrForEach(telemetryItem.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["ProcessLegacy"]], function (callBack) {
                    try {
                        if (callBack && callBack(aiEnvelope_1) === false) {
                            doNotSendItem_1 = true;
                            itemCtx.diagLog().warnToConsole("Telemetry processor check returns false");
                        }
                    }
                    catch (e) {
                        // log error but dont stop executing rest of the telemetry initializers
                        // doNotSendItem = true;
                        itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].dump(e) }, true);
                    }
                });
                delete telemetryItem.tags[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["ProcessLegacy"]];
            }
            if (doNotSendItem_1) {
                return; // do not send, no need to execute next plugin
            }
            // check if the incoming payload is too large, truncate if necessary
            var payload = this._serializer.serialize(aiEnvelope_1);
            // flush if we would exceed the max-size limit by adding this item
            var bufferPayload = this._buffer.getItems();
            var batch = this._buffer.batchPayloads(bufferPayload);
            if (batch && (batch.length + payload.length > this._senderConfig.maxBatchSizeInBytes())) {
                this.triggerSend();
            }
            // enqueue the payload
            this._buffer.enqueue(payload);
            // ensure an invocation timeout is set
            this._setupTimer();
        }
        catch (e) {
            itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].FailedAddingTelemetryToBuffer, "Failed adding telemetry to the sender's buffer, some telemetry will be lost: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].dump(e) });
        }
        // hand off the telemetry item to the next plugin
        this.processNext(telemetryItem, itemCtx);
    };
    /**
     * xhr state changes
     */
    Sender.prototype._xhrReadyStateChange = function (xhr, payload, countOfItemsInPayload) {
        if (xhr.readyState === 4) {
            var response = null;
            if (!this._appId) {
                response = this._parseResponse(_getResponseText(xhr) || xhr.response);
                if (response && response.appId) {
                    this._appId = response.appId;
                }
            }
            if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {
                if (!this._senderConfig.isRetryDisabled() && this._isRetriable(xhr.status)) {
                    this._resendPayload(payload);
                    this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TransmissionFailed, ". " +
                        "Response code " + xhr.status + ". Will retry to send " + payload.length + " items.");
                }
                else {
                    this._onError(payload, this._formatErrorMessageXhr(xhr));
                }
            }
            else if (_Offline__WEBPACK_IMPORTED_MODULE_6__["Offline"].isOffline()) {
                // Note: Don't check for staus == 0, since adblock gives this code
                if (!this._senderConfig.isRetryDisabled()) {
                    var offlineBackOffMultiplier = 10; // arbritrary number
                    this._resendPayload(payload, offlineBackOffMultiplier);
                    this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TransmissionFailed, ". Offline - Response Code: " + xhr.status + ". Offline status: " + _Offline__WEBPACK_IMPORTED_MODULE_6__["Offline"].isOffline() + ". Will retry to send " + payload.length + " items.");
                }
            }
            else {
                if (xhr.status === 206) {
                    if (!response) {
                        response = this._parseResponse(_getResponseText(xhr) || xhr.response);
                    }
                    if (response && !this._senderConfig.isRetryDisabled()) {
                        this._onPartialSuccess(payload, response);
                    }
                    else {
                        this._onError(payload, this._formatErrorMessageXhr(xhr));
                    }
                }
                else {
                    this._consecutiveErrors = 0;
                    this._onSuccess(payload, countOfItemsInPayload);
                }
            }
        }
    };
    /**
     * Immediately send buffered data
     * @param async {boolean} - Indicates if the events should be sent asynchronously
     * @param forcedSender {SenderFunction} - Indicates the forcedSender, undefined if not passed
     */
    Sender.prototype.triggerSend = function (async, forcedSender) {
        if (async === void 0) { async = true; }
        try {
            // Send data only if disableTelemetry is false
            if (!this._senderConfig.disableTelemetry()) {
                if (this._buffer.count() > 0) {
                    var payload = this._buffer.getItems();
                    // invoke send
                    if (forcedSender) {
                        forcedSender.call(this, payload, async);
                    }
                    else {
                        this._sender(payload, async);
                    }
                }
                // update lastSend time to enable throttling
                this._lastSend = +new Date;
            }
            else {
                this._buffer.clear();
            }
            clearTimeout(this._timeoutHandle);
            this._timeoutHandle = null;
            this._retryAt = null;
        }
        catch (e) {
            /* Ignore this error for IE under v10 */
            if (!_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getIEVersion() || _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getIEVersion() > 9) {
                this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TransmissionFailed, "Telemetry transmission failed, some telemetry will be lost: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].dump(e) });
            }
        }
    };
    /**
     * error handler
     */
    Sender.prototype._onError = function (payload, message, event) {
        this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].OnError, "Failed to send telemetry.", { message: message });
        this._buffer.clearSent(payload);
    };
    /**
     * partial success handler
     */
    Sender.prototype._onPartialSuccess = function (payload, results) {
        var failed = [];
        var retry = [];
        // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.
        var errors = results.errors.reverse();
        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
            var error = errors_1[_i];
            var extracted = payload.splice(error.index, 1)[0];
            if (this._isRetriable(error.statusCode)) {
                retry.push(extracted);
            }
            else {
                // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).
                failed.push(extracted);
            }
        }
        if (payload.length > 0) {
            this._onSuccess(payload, results.itemsAccepted);
        }
        if (failed.length > 0) {
            this._onError(failed, this._formatErrorMessageXhr(null, ['partial success', results.itemsAccepted, 'of', results.itemsReceived].join(' ')));
        }
        if (retry.length > 0) {
            this._resendPayload(retry);
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TransmissionFailed, "Partial success. " +
                "Delivered: " + payload.length + ", Failed: " + failed.length +
                ". Will retry to send " + retry.length + " our of " + results.itemsReceived + " items");
        }
    };
    /**
     * success handler
     */
    Sender.prototype._onSuccess = function (payload, countOfItemsInPayload) {
        this._buffer.clearSent(payload);
    };
    /**
     * xdr state changes
     */
    Sender.prototype._xdrOnLoad = function (xdr, payload) {
        var responseText = _getResponseText(xdr);
        if (xdr && (responseText + "" === "200" || responseText === "")) {
            this._consecutiveErrors = 0;
            this._onSuccess(payload, 0);
        }
        else {
            var results = this._parseResponse(responseText);
            if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted
                && !this._senderConfig.isRetryDisabled()) {
                this._onPartialSuccess(payload, results);
            }
            else {
                this._onError(payload, this._formatErrorMessageXdr(xdr));
            }
        }
    };
    Sender.prototype._isSampledIn = function (envelope) {
        return this._sample.isSampledIn(envelope);
    };
    /**
     * Send Beacon API request
     * @param payload {string} - The data payload to be sent.
     * @param isAsync {boolean} - not used
     * Note: Beacon API does not support custom headers and we are not able to get
     * appId from the backend for the correct correlation.
     */
    Sender.prototype._beaconSender = function (payload, isAsync) {
        var url = this._senderConfig.endpointUrl();
        var batch = this._buffer.batchPayloads(payload);
        // Chrome only allows CORS-safelisted values for the sendBeacon data argument
        // see: https://bugs.chromium.org/p/chromium/issues/detail?id=720283
        var plainTextBatch = new Blob([batch], { type: 'text/plain;charset=UTF-8' });
        // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.
        var queued = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["getNavigator"])().sendBeacon(url, plainTextBatch);
        if (queued) {
            this._buffer.markAsSent(payload);
            // no response from beaconSender, clear buffer
            this._onSuccess(payload, payload.length);
        }
        else {
            this._xhrSender(payload, true);
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TransmissionFailed, ". " + "Failed to send telemetry with Beacon API, retried with xhrSender.");
        }
    };
    /**
     * Send XMLHttpRequest
     * @param payload {string} - The data payload to be sent.
     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously
     */
    Sender.prototype._xhrSender = function (payload, isAsync) {
        var _this = this;
        var xhr = new XMLHttpRequest();
        var endPointUrl = this._senderConfig.endpointUrl();
        try {
            xhr[_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["DisabledPropertyName"]] = true;
        }
        catch (e) {
            // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would
            // cause the request to fail and we no telemetry would be sent
        }
        xhr.open("POST", endPointUrl, isAsync);
        xhr.setRequestHeader("Content-type", "application/json");
        // append Sdk-Context request header only in case of breeze endpoint
        if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].isInternalApplicationInsightsEndpoint(endPointUrl)) {
            xhr.setRequestHeader(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["RequestHeaders"].sdkContextHeader, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["RequestHeaders"].sdkContextHeaderAppIdRequest);
        }
        xhr.onreadystatechange = function () { return _this._xhrReadyStateChange(xhr, payload, payload.length); };
        xhr.onerror = function (event) { return _this._onError(payload, _this._formatErrorMessageXhr(xhr), event); };
        // compose an array of payloads
        var batch = this._buffer.batchPayloads(payload);
        xhr.send(batch);
        this._buffer.markAsSent(payload);
    };
    /**
     * Parses the response from the backend.
     * @param response - XMLHttpRequest or XDomainRequest response
     */
    Sender.prototype._parseResponse = function (response) {
        try {
            if (response && response !== "") {
                var result = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["getJSON"])().parse(response);
                if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted &&
                    result.itemsReceived - result.itemsAccepted === result.errors.length) {
                    return result;
                }
            }
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].InvalidBackendResponse, "Cannot parse the response. " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_4__["Util"].getExceptionName(e), {
                response: response
            });
        }
        return null;
    };
    /**
     * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).
     * @param payload
     */
    Sender.prototype._resendPayload = function (payload, linearFactor) {
        if (linearFactor === void 0) { linearFactor = 1; }
        if (!payload || payload.length === 0) {
            return;
        }
        this._buffer.clearSent(payload);
        this._consecutiveErrors++;
        for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {
            var item = payload_1[_i];
            this._buffer.enqueue(item);
        }
        // setup timer
        this._setRetryTime(linearFactor);
        this._setupTimer();
    };
    /**
     * Calculates the time to wait before retrying in case of an error based on
     * http://en.wikipedia.org/wiki/Exponential_backoff
     */
    Sender.prototype._setRetryTime = function (linearFactor) {
        var SlotDelayInSeconds = 10;
        var delayInSeconds;
        if (this._consecutiveErrors <= 1) {
            delayInSeconds = SlotDelayInSeconds;
        }
        else {
            var backOffSlot = (Math.pow(2, this._consecutiveErrors) - 1) / 2;
            // tslint:disable-next-line:insecure-random
            var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;
            backOffDelay = linearFactor * backOffDelay;
            delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);
        }
        // TODO: Log the backoff time like the C# version does.
        var retryAfterTimeSpan = Date.now() + (delayInSeconds * 1000);
        // TODO: Log the retry at time like the C# version does.
        this._retryAt = retryAfterTimeSpan;
    };
    /**
     * Sets up the timer which triggers actually sending the data.
     */
    Sender.prototype._setupTimer = function () {
        var _this = this;
        if (!this._timeoutHandle) {
            var retryInterval = this._retryAt ? Math.max(0, this._retryAt - Date.now()) : 0;
            var timerValue = Math.max(this._senderConfig.maxBatchInterval(), retryInterval);
            this._timeoutHandle = setTimeout(function () {
                _this.triggerSend();
            }, timerValue);
        }
    };
    /**
     * Checks if the SDK should resend the payload after receiving this status code from the backend.
     * @param statusCode
     */
    Sender.prototype._isRetriable = function (statusCode) {
        return statusCode === 408 // Timeout
            || statusCode === 429 // Too many requests.
            || statusCode === 500 // Internal server error.
            || statusCode === 503; // Service unavailable.
    };
    Sender.prototype._formatErrorMessageXhr = function (xhr, message) {
        if (xhr) {
            return "XMLHttpRequest,Status:" + xhr.status + ",Response:" + _getResponseText(xhr) || false || false;
        }
        return message;
    };
    /**
     * Send XDomainRequest
     * @param payload {string} - The data payload to be sent.
     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously
     *
     * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added
     * to maintain consistency with the xhrSender's contract
     * Note: XDomainRequest does not support custom headers and we are not able to get
     * appId from the backend for the correct correlation.
     */
    Sender.prototype._xdrSender = function (payload, isAsync) {
        var _this = this;
        var _window = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["getWindow"])();
        var xdr = new XDomainRequest();
        xdr.onload = function () { return _this._xdrOnLoad(xdr, payload); };
        xdr.onerror = function (event) { return _this._onError(payload, _this._formatErrorMessageXdr(xdr), event); };
        // XDomainRequest requires the same protocol as the hosting page.
        // If the protocol doesn't match, we can't send the telemetry :(.
        var hostingProtocol = _window && _window.location && _window.location.protocol || "";
        if (this._senderConfig.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["_InternalMessageId"].TransmissionFailed, ". " +
                "Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.");
            this._buffer.clear();
            return;
        }
        var endpointUrl = this._senderConfig.endpointUrl().replace(/^(https?:)/, "");
        xdr.open('POST', endpointUrl);
        // compose an array of payloads
        var batch = this._buffer.batchPayloads(payload);
        xdr.send(batch);
        this._buffer.markAsSent(payload);
    };
    Sender.prototype._formatErrorMessageXdr = function (xdr, message) {
        if (xdr) {
            return "XDomainRequest,Response:" + _getResponseText(xdr) || false;
        }
        return message;
    };
    return Sender;
}(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_5__["BaseTelemetryPlugin"]));

//# sourceMappingURL=Sender.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Serializer.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Serializer.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/*! exports provided: Serializer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return Serializer; });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");


var Serializer = /** @class */ (function () {
    function Serializer(logger) {
        this._logger = logger;
    }
    /**
     * Serializes the current object to a JSON string.
     */
    Serializer.prototype.serialize = function (input) {
        var output = this._serializeObject(input, "root");
        try {
            return Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getJSON"])().stringify(output);
        }
        catch (e) {
            // if serialization fails return an empty string
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].CannotSerializeObject, (e && _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].isFunction(e.toString)) ? e.toString() : "Error serializing object", null, true);
        }
    };
    Serializer.prototype._serializeObject = function (source, name) {
        var circularReferenceCheck = "__aiCircularRefCheck";
        var output = {};
        if (!source) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].CannotSerializeObject, "cannot serialize object because it is null or undefined", { name: name }, true);
            return output;
        }
        if (source[circularReferenceCheck]) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].CircularReferenceDetected, "Circular reference detected while serializing object", { name: name }, true);
            return output;
        }
        if (!source.aiDataContract) {
            // special case for measurements/properties/tags
            if (name === "measurements") {
                output = this._serializeStringMap(source, "number", name);
            }
            else if (name === "properties") {
                output = this._serializeStringMap(source, "string", name);
            }
            else if (name === "tags") {
                output = this._serializeStringMap(source, "string", name);
            }
            else if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].isArray(source)) {
                output = this._serializeArray(source, name);
            }
            else {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].CannotSerializeObjectNonSerializable, "Attempting to serialize an object which does not implement ISerializable", { name: name }, true);
                try {
                    // verify that the object can be stringified
                    Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getJSON"])().stringify(source);
                    output = source;
                }
                catch (e) {
                    // if serialization fails return an empty string
                    this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].CannotSerializeObject, (e && _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].isFunction(e.toString)) ? e.toString() : "Error serializing object", null, true);
                }
            }
            return output;
        }
        source[circularReferenceCheck] = true;
        for (var field in source.aiDataContract) {
            var contract = source.aiDataContract[field];
            var isRequired = (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].isFunction(contract)) ? (contract() & _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["FieldType"].Required) : (contract & _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["FieldType"].Required);
            var isHidden = (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].isFunction(contract)) ? (contract() & _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["FieldType"].Hidden) : (contract & _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["FieldType"].Hidden);
            var isArray = contract & _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["FieldType"].Array;
            var isPresent = source[field] !== undefined;
            var isObject = _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].isObject(source[field]) && source[field] !== null;
            if (isRequired && !isPresent && !isArray) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].MissingRequiredFieldSpecification, "Missing required field specification. The field is required but not present on source", { field: field, name: name });
                // If not in debug mode, continue and hope the error is permissible
                continue;
            }
            if (isHidden) {
                // Don't serialize hidden fields
                continue;
            }
            var value = void 0;
            if (isObject) {
                if (isArray) {
                    // special case; resurse on each object in the source array
                    value = this._serializeArray(source[field], field);
                }
                else {
                    // recurse on the source object in this field
                    value = this._serializeObject(source[field], field);
                }
            }
            else {
                // assign the source field to the output even if undefined or required
                value = source[field];
            }
            // only emit this field if the value is defined
            if (value !== undefined) {
                output[field] = value;
            }
        }
        delete source[circularReferenceCheck];
        return output;
    };
    Serializer.prototype._serializeArray = function (sources, name) {
        var output;
        if (!!sources) {
            if (!_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].isArray(sources)) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].ItemNotInArray, "This field was specified as an array in the contract but the item is not an array.\r\n", { name: name }, true);
            }
            else {
                output = [];
                for (var i = 0; i < sources.length; i++) {
                    var source = sources[i];
                    var item = this._serializeObject(source, name + "[" + i + "]");
                    output.push(item);
                }
            }
        }
        return output;
    };
    Serializer.prototype._serializeStringMap = function (map, expectedType, name) {
        var output;
        if (map) {
            output = {};
            for (var field in map) {
                var value = map[field];
                if (expectedType === "string") {
                    if (value === undefined) {
                        output[field] = "undefined";
                    }
                    else if (value === null) {
                        output[field] = "null";
                    }
                    else if (!value.toString) {
                        output[field] = "invalid field: toString() is not defined.";
                    }
                    else {
                        output[field] = value.toString();
                    }
                }
                else if (expectedType === "number") {
                    if (value === undefined) {
                        output[field] = "undefined";
                    }
                    else if (value === null) {
                        output[field] = "null";
                    }
                    else {
                        var num = parseFloat(value);
                        if (isNaN(num)) {
                            output[field] = "NaN";
                        }
                        else {
                            output[field] = num;
                        }
                    }
                }
                else {
                    output[field] = "invalid field: " + name + " is of unknown type.";
                    this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, output[field], null, true);
                }
            }
        }
        return output;
    };
    return Serializer;
}());

//# sourceMappingURL=Serializer.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js":
/*!*************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js ***!
  \*************************************************************************************************************************************************************************************************************************************/
/*! exports provided: Sample */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sample", function() { return Sample; });
/* harmony import */ var _SamplingScoreGenerators_SamplingScoreGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SamplingScoreGenerators/SamplingScoreGenerator */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



var Sample = /** @class */ (function () {
    function Sample(sampleRate, logger) {
        // We're using 32 bit math, hence max value is (2^31 - 1)
        this.INT_MAX_VALUE = 2147483647;
        this._logger = _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(logger) ? new _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["DiagnosticLogger"]() : logger;
        if (sampleRate > 100 || sampleRate < 0) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].SampleRateOutOfRange, "Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.", { samplingRate: sampleRate }, true);
            this.sampleRate = 100;
        }
        this.sampleRate = sampleRate;
        this.samplingScoreGenerator = new _SamplingScoreGenerators_SamplingScoreGenerator__WEBPACK_IMPORTED_MODULE_0__["SamplingScoreGenerator"]();
    }
    /**
     * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).
     */
    Sample.prototype.isSampledIn = function (envelope) {
        var samplingPercentage = this.sampleRate; // 0 - 100
        var isSampledIn = false;
        if (samplingPercentage === null || samplingPercentage === undefined || samplingPercentage >= 100) {
            return true;
        }
        else if (envelope.baseType === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Metric"].dataType) {
            // exclude MetricData telemetry from sampling
            return true;
        }
        isSampledIn = this.samplingScoreGenerator.getSamplingScore(envelope) < samplingPercentage;
        return isSampledIn;
    };
    return Sample;
}());

//# sourceMappingURL=Sample.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js":
/*!*****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: HashCodeScoreGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashCodeScoreGenerator", function() { return HashCodeScoreGenerator; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var HashCodeScoreGenerator = /** @class */ (function () {
    function HashCodeScoreGenerator() {
    }
    HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {
        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;
        return score * 100;
    };
    HashCodeScoreGenerator.prototype.getHashCode = function (input) {
        if (input === "") {
            return 0;
        }
        while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) {
            input = input.concat(input);
        }
        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function
        var hash = 5381;
        for (var i = 0; i < input.length; ++i) {
            hash = ((hash << 5) + hash) + input.charCodeAt(i);
            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)
            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.
            hash = hash & hash;
        }
        return Math.abs(hash);
    };
    // We're using 32 bit math, hence max value is (2^31 - 1)
    HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;
    // (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution
    HashCodeScoreGenerator.MIN_INPUT_LENGTH = 8;
    return HashCodeScoreGenerator;
}());

//# sourceMappingURL=HashCodeScoreGenerator.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js":
/*!*****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: SamplingScoreGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SamplingScoreGenerator", function() { return SamplingScoreGenerator; });
/* harmony import */ var _HashCodeScoreGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HashCodeScoreGenerator */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


var SamplingScoreGenerator = /** @class */ (function () {
    function SamplingScoreGenerator() {
        this.hashCodeGeneragor = new _HashCodeScoreGenerator__WEBPACK_IMPORTED_MODULE_0__["HashCodeScoreGenerator"]();
        this.keys = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["ContextTagKeys"]();
    }
    SamplingScoreGenerator.prototype.getSamplingScore = function (item) {
        var score = 0;
        if (item.tags && item.tags[this.keys.userId]) {
            score = this.hashCodeGeneragor.getHashCodeScore(item.tags[this.keys.userId]);
        }
        else if (item.ext && item.ext.user && item.ext.user.id) {
            score = this.hashCodeGeneragor.getHashCodeScore(item.ext.user.id);
        }
        else if (item.tags && item.tags[this.keys.operationId]) {
            score = this.hashCodeGeneragor.getHashCodeScore(item.tags[this.keys.operationId]);
        }
        else if (item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace.traceID) {
            score = this.hashCodeGeneragor.getHashCodeScore(item.ext.telemetryTrace.traceID);
        }
        else {
            // tslint:disable-next-line:insecure-random
            score = (Math.random() * 100);
        }
        return score;
    };
    return SamplingScoreGenerator;
}());

//# sourceMappingURL=SamplingScoreGenerator.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/applicationinsights-channel-js.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/applicationinsights-channel-js.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/*! exports provided: Sender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Sender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sender */ "../../node_modules/.pnpm/@microsoft+applicationinsights-channel-js@2.5.4/node_modules/@microsoft/applicationinsights-channel-js/dist-esm/Sender.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sender", function() { return _Sender__WEBPACK_IMPORTED_MODULE_0__["Sender"]; });


//# sourceMappingURL=applicationinsights-channel-js.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,