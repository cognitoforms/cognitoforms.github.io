(window["cfAcWebpackJsonp"] = window["cfAcWebpackJsonp"] || []).push([[13],{

/***/ "../../libs/api/services/bot-protection.ts":
/*!********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/api/services/bot-protection.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserType = exports.BotProtectionMethod = exports.BotProtection = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var BotProtectionMethod = exports.BotProtectionMethod = /*#__PURE__*/function (BotProtectionMethod) {
  BotProtectionMethod["NoBots"] = "X-NoBots";
  BotProtectionMethod["Recaptcha"] = "X-Recaptcha";
  return BotProtectionMethod;
}({});
var UserType = exports.UserType = /*#__PURE__*/function (UserType) {
  UserType["Unknown"] = "unknown";
  UserType["Bot"] = "bot";
  UserType["Human"] = "human";
  return UserType;
}({});
var BotProtection = exports.BotProtection = /*#__PURE__*/function () {
  function BotProtection(challenge) {
    _classCallCheck(this, BotProtection);
    this._challenge = void 0;
    this._botDetected = false;
    this._evidence = new Map();
    this._detectionCallbacks = [];
    this._challenge = challenge;
  }
  _createClass(BotProtection, [{
    key: "challenge",
    get: function get() {
      var _this = this;
      return this._challenge.map.map(function (i) {
        return _this._challenge.chars[i];
      }).join('');
    }
  }, {
    key: "whenActivityDetected",
    value: function whenActivityDetected(callback) {
      this._detectionCallbacks.push(callback);
      callback(this);
    }
  }, {
    key: "userType",
    get: function get() {
      if (this._botDetected) return UserType.Bot;else if (this._evidence.size > 0) return UserType.Human;else return UserType.Unknown;
    }
  }, {
    key: "getEvidence",
    value: function getEvidence(method) {
      return this._evidence.get(method);
    }
  }, {
    key: "reportBot",
    value: function reportBot() {
      this._botDetected = true;
      this.notifyListeners();
    }
  }, {
    key: "reportHuman",
    value: function reportHuman(evidence) {
      this._botDetected = false;
      this._evidence.set(evidence.method, evidence);
      this.notifyListeners();
    }
  }, {
    key: "notifyListeners",
    value: function notifyListeners() {
      var _this2 = this;
      this._detectionCallbacks.forEach(function (cb) {
        return cb(_this2);
      });
    }
  }]);
  return BotProtection;
}();

/***/ }),

/***/ "../../libs/api/services/service-request.ts":
/*!*********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/api/services/service-request.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServiceRequestError = void 0;
exports.convertToDate = convertToDate;
exports.enableBotProtection = enableBotProtection;
exports.interceptResponses = interceptResponses;
exports.isServiceRequestError = isServiceRequestError;
exports.serviceRequest = serviceRequest;
exports.updateSessionOrganization = updateSessionOrganization;
exports.uploadFileRequest = uploadFileRequest;
var _botProtection = __webpack_require__(/*! ./bot-protection */ "../../libs/api/services/bot-protection.ts");
var _typeCheck = __webpack_require__(/*! @cognitoforms/utils/type-check */ "../../libs/utils/type-check.ts");
var _urlHelper = __webpack_require__(/*! @cognitoforms/utils/url-helper */ "../../libs/utils/url-helper.ts");
var _clientsideConfiguration = __webpack_require__(/*! @cognitoforms/utils/clientside-configuration */ "../../libs/utils/clientside-configuration.ts");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var interceptors = [];
var botProtection = null;
var organizationId = null;
function updateSessionOrganization(orgId) {
  organizationId = orgId;
}
function interceptResponse(_x) {
  return _interceptResponse.apply(this, arguments);
}
function _interceptResponse() {
  _interceptResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response) {
    var _iterator, _step, intercept;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _iterator = _createForOfIteratorHelper(interceptors);
          _context2.prev = 1;
          _iterator.s();
        case 3:
          if ((_step = _iterator.n()).done) {
            _context2.next = 9;
            break;
          }
          intercept = _step.value;
          _context2.next = 7;
          return intercept(response.clone());
        case 7:
          _context2.next = 3;
          break;
        case 9:
          _context2.next = 14;
          break;
        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](1);
          _iterator.e(_context2.t0);
        case 14:
          _context2.prev = 14;
          _iterator.f();
          return _context2.finish(14);
        case 17:
          return _context2.abrupt("return", response);
        case 18:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[1, 11, 14, 17]]);
  }));
  return _interceptResponse.apply(this, arguments);
}
var javascriptDateExpr = /^\/Date\((\d+)\)\/$/;
function convertToDate(str) {
  if (javascriptDateExpr.test(str)) {
    var _javascriptDateExpr$e, _javascriptDateExpr$e2;
    var num = parseInt((_javascriptDateExpr$e = (_javascriptDateExpr$e2 = javascriptDateExpr.exec(str)) === null || _javascriptDateExpr$e2 === void 0 ? void 0 : _javascriptDateExpr$e2[1]) !== null && _javascriptDateExpr$e !== void 0 ? _javascriptDateExpr$e : '', 10);
    if (!isNaN(num)) return new Date(num);
  }
  return null;
}
var DISABLE_BOTPROTECTION = "true" === 'true';
function serviceRequest(_x2, _x3, _x4) {
  return _serviceRequest.apply(this, arguments);
}
function _serviceRequest() {
  _serviceRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(fetchEndpoint, data, options) {
    var _options$siteUrl;
    var fetchInit, _submissionToken, _segments$, _segments, _segments2, submissionToken, segments, _submissionToken2, methods, bp, evidence, _iterator2, _step2, e, requestUrl;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          fetchInit = Object.assign({
            method: 'POST',
            credentials: options && options.authorize === false ? 'omit' : 'include'
          }, options);
          if ((options === null || options === void 0 ? void 0 : options.useCognitoContentType) === true) fetchInit.headers = {
            'Content-Type': 'application/json+cognito; charset=UTF-8'
          };else if (!(data instanceof FormData)) fetchInit.headers = {
            'Content-Type': 'application/json'
          };else fetchInit.headers = {};
          if (!(options !== null && options !== void 0 && options.csrfToken)) {
            _context4.next = 6;
            break;
          }
          fetchInit.headers['CsrfToken'] = options === null || options === void 0 ? void 0 : options.csrfToken;
          _context4.next = 18;
          break;
        case 6:
          if (!(options !== null && options !== void 0 && options.useSubmissionToken)) {
            _context4.next = 18;
            break;
          }
          submissionToken = localStorage.getItem('SubmissionToken');
          segments = (_submissionToken = submissionToken) === null || _submissionToken === void 0 ? void 0 : _submissionToken.split('|');
          if (!(!submissionToken || new Date().getTime() > parseInt((_segments$ = (_segments = segments) === null || _segments === void 0 ? void 0 : _segments[1]) !== null && _segments$ !== void 0 ? _segments$ : '') || organizationId !== ((_segments2 = segments) === null || _segments2 === void 0 ? void 0 : _segments2[2]))) {
            _context4.next = 17;
            break;
          }
          _context4.next = 12;
          return serviceRequest('svc/csrf', null, {
            method: 'GET'
          });
        case 12:
          submissionToken = _context4.sent;
          submissionToken += '|' + (new Date().getTime() + 60 * 60 * 23 * 1000);
          submissionToken += '|' + organizationId;
          segments = (_submissionToken2 = submissionToken) === null || _submissionToken2 === void 0 ? void 0 : _submissionToken2.split('|');
          if (submissionToken) localStorage.setItem('SubmissionToken', submissionToken);
        case 17:
          if (segments && segments[0]) fetchInit.headers['CsrfToken'] = segments[0];
        case 18:
          // Send an organization header with the cached session's organization
          if (organizationId) fetchInit.headers['X-Organization'] = organizationId;
          if (options !== null && options !== void 0 && options.passive) fetchInit.headers['X-Passive-Request'] = '1';
          fetchInit.headers['X-Requested-With'] = 'XMLHttpRequest';
          if (!(options && options.botProtectionMethod && botProtection)) {
            _context4.next = 35;
            break;
          }
          methods = Array.isArray(options.botProtectionMethod) ? options.botProtectionMethod : [options.botProtectionMethod];
          _context4.next = 25;
          return botProtection;
        case 25:
          bp = _context4.sent;
          evidence = methods.map(function (method) {
            return bp.getEvidence(method);
          }).filter(function (e) {
            return e != null;
          });
          if (!evidence.length) {
            _context4.next = 32;
            break;
          }
          _iterator2 = _createForOfIteratorHelper(evidence);
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              e = _step2.value;
              fetchInit.headers[e.method] = e.token;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          _context4.next = 35;
          break;
        case 32:
          if (DISABLE_BOTPROTECTION) {
            _context4.next = 35;
            break;
          }
          bp.reportBot();
          return _context4.abrupt("return", Promise.reject(new Error('A request was attempted before verifying user is not a bot.')));
        case 35:
          if (fetchInit.method === 'POST' || fetchInit.method === 'PUT' || fetchInit.method === 'DELETE' || fetchInit.method === 'PATCH') {
            if (data instanceof FormData) {
              fetchInit.body = data;
            } else fetchInit.body = JSON.stringify(data);
          }
          if (fetchInit.query) fetchEndpoint += (0, _urlHelper.buildQueryString)(fetchInit.query);
          requestUrl = "".concat((_options$siteUrl = options === null || options === void 0 ? void 0 : options.siteUrl) !== null && _options$siteUrl !== void 0 ? _options$siteUrl : _clientsideConfiguration.CognitoConfiguration.SiteUrl).concat(fetchEndpoint);
          return _context4.abrupt("return", fetch(requestUrl, fetchInit).then(interceptResponse).then( /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(response) {
              var statusCode, responseText;
              return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                while (1) switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!response.ok) {
                      _context3.next = 4;
                      break;
                    }
                    if (!(response.headers.get('content-type') === 'application/json; charset=utf-8' || response.headers.get('content-type') === 'application/json')) {
                      _context3.next = 3;
                      break;
                    }
                    return _context3.abrupt("return", response.json());
                  case 3:
                    return _context3.abrupt("return", response.text());
                  case 4:
                    // Throw a specific error which contains details about the error (i.e. status code)
                    statusCode = response.status;
                    _context3.next = 7;
                    return response.text();
                  case 7:
                    responseText = _context3.sent;
                    throw new ServiceRequestError(requestUrl, statusCode, responseText, response.headers, location.href);
                  case 9:
                  case "end":
                    return _context3.stop();
                }
              }, _callee3);
            }));
            return function (_x7) {
              return _ref2.apply(this, arguments);
            };
          }()));
        case 39:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _serviceRequest.apply(this, arguments);
}
function interceptResponses(interceptor) {
  interceptors.push(interceptor);
}
function enableBotProtection() {
  if (!botProtection) botProtection = serviceRequest('svc/auth/bot-challenge', null, {
    method: 'GET'
  }).then(function (challengeData) {
    return new _botProtection.BotProtection(challengeData);
  });
  return botProtection;
}
/**
 * An error that represents failure of a service request
 */
var ServiceRequestError = exports.ServiceRequestError = /*#__PURE__*/function (_Error) {
  _inherits(ServiceRequestError, _Error);
  var _super = _createSuper(ServiceRequestError);
  /**
   * Constructs a new service request error
   */
  function ServiceRequestError(requestUrl, statusCode, responseText, headers, referrerUrl) {
    var _this;
    _classCallCheck(this, ServiceRequestError);
    _this = _super.call(this, "".concat(statusCode, ": ").concat(responseText || 'Request failed'));
    /**
     * The service request URL that failed
     */
    _this.requestUrl = void 0;
    /**
     * The status code that was returned
     */
    _this.statusCode = void 0;
    /**
     * The response text that was returned, if any
     */
    _this.responseText = void 0;
    /**
     * The URL of the page that issued the request
     */
    _this.referrerUrl = void 0;
    /**
     * Deserialized responseText if possible
     */
    _this.data = void 0;
    _this.type = void 0;
    _this.headers = void 0;
    _this.requestUrl = requestUrl;
    _this.statusCode = statusCode;
    _this.responseText = responseText;
    _this.referrerUrl = referrerUrl;
    _this.headers = headers;
    if (statusCode >= 400 && statusCode < 500) {
      try {
        var response = JSON.parse(responseText);
        _this.message = response.Message;
        _this.type = response.Type;
        _this.data = response.Data;
      } catch (e) {}
    }
    return _this;
  }
  return _createClass(ServiceRequestError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Checks whether the given object is a `ServiceRequestError`
 * @param err The object to check
 */
function isServiceRequestError(err) {
  return (0, _typeCheck.isError)(err) && err instanceof ServiceRequestError;
}
function handleFileUploadError(xhr, requestUrl) {
  var error = new Error("XHR request failed: ".concat(xhr.status, " ").concat(xhr.statusText));
  Object.assign(error, {
    status: xhr.status,
    statusText: xhr.statusText,
    responseText: xhr.responseText,
    headers: xhr.getAllResponseHeaders(),
    requestUrl: requestUrl,
    referrerUrl: location.href
  });
  return error;
}
function uploadFileRequest(fetchEndpoint, data, query, onProgress) {
  return new Promise( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
      var xhr, requestUrl;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            xhr = new XMLHttpRequest();
            if (query) fetchEndpoint += (0, _urlHelper.buildQueryString)(query);
            requestUrl = "".concat(_clientsideConfiguration.CognitoConfiguration.SiteUrl).concat(fetchEndpoint);
            xhr.open('POST', requestUrl, true);
            if (organizationId) xhr.setRequestHeader('X-Organization', organizationId);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

            // Event listener for updating the progress of the request
            xhr.upload.addEventListener('progress', function (event) {
              if (event.lengthComputable && onProgress) {
                onProgress(event);
              }
            });
            xhr.onload = function () {
              if (this.status >= 200 && this.status < 300) {
                var contentType = xhr.getResponseHeader('content-type');
                var response = contentType && contentType.includes('application/json') ? JSON.parse(xhr.responseText) : xhr.responseText;
                resolve(response);
              } else {
                reject(handleFileUploadError(xhr, requestUrl));
              }
            };
            xhr.onerror = function () {
              reject(handleFileUploadError(xhr, requestUrl));
            };
            xhr.send(data);
          case 10:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x5, _x6) {
      return _ref.apply(this, arguments);
    };
  }());
}

/***/ }),

/***/ "../../libs/utils/clientside-configuration.ts":
/*!***********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/utils/clientside-configuration.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CognitoConfiguration = void 0;
var _utilities = __webpack_require__(/*! ./utilities */ "../../libs/utils/utilities.ts");
function getConfig() {
  // get configuration from env during pre-render
  if ((0, _utilities.isPrerender)()) {
    var config = {
      ClientAssetsUrl: "https://local.cognito.dev/" + 'client/dist/assets/',
      GoogleAnalyticsId: process.env.GOOGLE_ANALYTICS_ID,
      AdminGoogleAnalyticsId: process.env.ADMIN_GOOGLE_ANALYTICS_ID,
      PendoApiKey: "",
      SpaAssetsUrl: "https://local.cognito.dev/spa/dist/assets/",
      ContentUrl: "https://static-test.cognitoforms.com/content/",
      SiteUrl: "https://local.cognito.dev/",
      AppInsightsConnectionString: "",
      ApiReferenceAssetsUrl: "https://static-test.cognitoforms.com/api-reference/",
      StaticLibrariesUrl: "https://static-test.cognitoforms.com/lib/"
    };
    return config;
  }
  if (!window.CognitoConfiguration) console.error('CognitoConfiguration object not found.');
  return window.CognitoConfiguration;
}
var CognitoConfiguration = exports.CognitoConfiguration = getConfig();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js */ "../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js")))

/***/ }),

/***/ "../../libs/utils/type-check.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/utils/type-check.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDate = isDate;
exports.isError = isError;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * Checks whether the given object is an `Error` object
 * @param err The object to check
 */
function isError(obj) {
  return _typeof(obj) === 'object' && Object.prototype.toString.call(obj) === '[object Error]';
}

/**
 * Checks whether the given object is a `Date` object
 * @param obj The object to check
 */
function isDate(obj) {
  return _typeof(obj) === 'object' && Object.prototype.toString.call(obj) === '[object Date]';
}

/***/ }),

/***/ "../../libs/utils/url-helper.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/utils/url-helper.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildQueryString = buildQueryString;
exports.cleanUrlPath = cleanUrlPath;
exports.convertAbsoluteUrlToRelative = convertAbsoluteUrlToRelative;
/**
 * Converts the given absolute URL to a relative URL
 * Credit: https://stackoverflow.com/questions/6263454/get-relative-url-from-absolute-url/6263526#6263526
 * @param url The absolute URL to convert
 */
function convertAbsoluteUrlToRelative(url) {
  return url.replace(/^(?:\/\/|[^/]+)*\//, '/');
}
/**
 * Returns a query string (including ?) based on the provided key/value pairs.
 * @param QueryParams The params
 */
function buildQueryString(params) {
  var keys = Object.keys(params);
  if (!keys.length) return '';
  return '?' + keys.map(function (k) {
    return "".concat(k, "=").concat(encodeURIComponent(params[k] === null || params[k] === undefined ? '' : params[k]));
  }).join('&');
}
var slashDupes = /[/]+/g;
/**
 * Removes repeated forward slash characters from the provided url.
 * @param url An absolute or relative url.
 */
function cleanUrlPath(url) {
  return url.replaceAll(slashDupes, '/');
}

/***/ }),

/***/ "../../libs/utils/urlize.ts":
/*!*****************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/utils/urlize.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
// Converts strings to URL friendly string
// The characters from url below not included in this list were manually tested and did not break anything.
// https://devnet.kentico.com/docs/6_0/devguide/index.html?url_format_and_configuration.htm
function _default(word) {
  return word.toLowerCase().replace(/ /g, '-').replace(/\//g, '-').replace(/&/g, 'and').replace(/'/g, '').replace(/:/g, '').replace(/"/g, '').replace(/\*/g, '').replace(/</g, '').replace(/>/g, '').replace(/\|/g, '').replace(/%/g, '').replace(/\./g, '').replace(/#/g, '').replace(/\+/g, '').replace(/=/g, '').replace(/„/g, '').replace(/“/g, '');
}
;

/***/ }),

/***/ "../../libs/utils/utilities.ts":
/*!********************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/libs/utils/utilities.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.capitalize = capitalize;
exports.getAbbreviatedNumber = getAbbreviatedNumber;
exports.getDate = getDate;
exports.isElementInViewport = isElementInViewport;
exports.isPrerender = isPrerender;
exports.isWithinFrame = isWithinFrame;
exports.parseDate = parseDate;
exports.slugify = slugify;
Object.defineProperty(exports, "urlize", {
  enumerable: true,
  get: function get() {
    return _urlize.default;
  }
});
var _urlize = _interopRequireDefault(__webpack_require__(/*! ./urlize */ "../../libs/utils/urlize.ts"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Capitalize first letter in string

function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}
;
function parseDate(date) {
  var result = new Date(date);
  // ensure date-only strings are parsed as local dates
  // see https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/
  if (typeof date === 'string' && !date.includes('T')) {
    return new Date(result.getTime() + result.getTimezoneOffset() * 60000);
  }
  return result;
}
var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
function getDate(date) {
  var d = parseDate(date);
  return "".concat(months[d.getMonth()], " ").concat(d.getDate(), ", ").concat(d.getFullYear());
}
;
function isPrerender() {
  return typeof window === 'undefined';
}
function isWithinFrame() {
  if (isPrerender()) return false;
  // https://stackoverflow.com/questions/326069/how-to-identify-if-a-webpage-is-being-loaded-inside-an-iframe-or-directly-into-t/326076#326076
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
}
function slugify(s) {
  // Ensure the slugification of headers and TOC links is the same. Both use this function.
  // https://github.com/valeriangalliat/markdown-it-anchor/blob/e276fe53e259bcd2bf6045b6093f82d3cd606f8c/index.js#L1
  // Also remove special chars, some html entities, and repeating/trailing dashes
  return encodeURIComponent(String(s).trim().toLowerCase().replace(/&shy;/g, '-').replace(/&nbsp;/g, '-').replace(/&ndash;/g, '-').replace(/&mdash;/g, '-').replace(/\s+/g, '-').replace(/\//g, '').replace(/[^a-zA-Z0-9]/g, '-').replace(/-+/g, '-').replace(/-$/g, ''));
}
function getAbbreviatedNumber(num) {
  if (num > 99999) {
    // Round to 1 decimal
    var numString = (num / 1000).toFixed(1);

    // Only show decimal if needed
    if (numString.endsWith('.0')) numString = numString.split('.')[0];
    return numString + 'k';
  }
  return num;
}
;

// https://stackoverflow.com/questions/123999/how-can-i-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433
/**
 * Checks to see if an element is in the viewport, this should be used in a requestAnimationFrame
 *
 * @param el element to check
 * @returns wether the element is in the viewport.
 */
function isElementInViewport(el) {
  var rect = el.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}

/***/ })

}]);