(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ViewsAdminScript4"],{

/***/ "../../../Cognito.Services/Views/Admin/entries.js":
/*!*****************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Views/Admin/entries.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/// <reference path="../../../Cognito.Web.Client/apps/spa/src/views/admin/utils/exoweb.d.ts" />
/* harmony default export */ __webpack_exports__["default"] = (function ({
	emitViewUpdated,
	currentEntryView,
	showNewEntry,
	onCreateNewEntry,
	onExportEntries,
	onPerformBulkAction,
	currentViewEntryCount,
	isLimitedAccess,
	canManageEntries,
	formData,
	isAssignedView,
	onOverrideFormEntryCreation,
	onUpdateHasSelectedEntries,
	setEntryDetailsIsOpen,
	isMobile
}) {

	Cognito.ready("entries", ["pageScripts", "Cognito.Forms", "expression-builder"], function ($) {

		hideEntryDetails();

		//#region Global Variables

		var layoutMode;
		var currentEntryKey;
		var entryHasChanges = false;
		var performingSubmit = false;
		var pendingAction;
		var selectedEntries = [];
		var previousViewData;
		var shareEntryDialog;
		var submittingCashPayment = false;
		var submittingRefund = false;

		var tempColumns;
		var tempSort;
		var tempFilter;

		currentViewEntryCount.value = Cognito.Forms.model.initialEntryCount;
		// #endregion

		/**
		 * Returns a function that will call the underlying callback as long as the form has not changed.
		 * @param {Function} callback The underlying callback to invoke
		 * @returns A function that conditionally calls the given callback.
		 */
		function checkForm(callback) {
			if (!window.Cognito || !Cognito.Forms.model || !Cognito.Forms.model.formId) {
				console.warn('Cannot bind a callback prior to the form id being established.');
				return callback;
			}

			let capturedFormId = Cognito.Forms.model.formId;

			return function checkFormCallback() {
				if (!window.Cognito || !Cognito.Forms || !Cognito.Forms.model || Cognito.Forms.model.formId !== capturedFormId) {
					console.log('Discarding callback due to form change from ' + capturedFormId + ' to ' + (window.Cognito && Cognito.Forms.model && Cognito.Forms.model.formId) + '.');
					return;
				}

				// Call the original callback
				return callback.apply(this, arguments);
			};
		}

		//#region Controller
		var menu = null;
		var previousViewId = null;
		var controller = {

			openActionsMenu: function openActionsMenu(shouldHideDetails, x, y) {
				if (menu) {
					menu.close("entry-view-actions");
				}

				if (!menu || previousViewId != Cognito.Forms.model.currentView.get_Id()) {
					menu = document.querySelector('[data-menu="entry-view-actions__menu--context"] > ul').__vue__.$root.$refs.menu
				}
				previousViewId = Cognito.Forms.model.currentView.get_Id()

				// Close entry details pane before opening context menu
				if (shouldHideDetails) {
					controller.hideEntry();
				}

				var openDialogs = document.getElementsByClassName("c-modal is-active");
				if (openDialogs.length > 0) {
					return;
				}

				setTimeout(function () {
					menu.open("entry-view-actions");
					menu.$emit('open');
					menu.$el.firstChild.focus();
				});

				var container = document.querySelector('.entry-view-actions__menu--context');
				container.style.display = 'none';

				setTimeout(() => {
					container.style.display = 'block';
					container.style.top = y + "px";
					container.style.left = x + "px";
				});
			},

			// Initialize Master
			initMaster: function initMaster(masterController) {
				if (typeof masterController === 'string')
					controller.master = Cognito.Messaging.proxy($("#c-entrylist")[0].contentWindow, masterController);
				else
					controller.master = masterController;

				Cognito.ready("master");
			},

			// Initialize Detail
			initDetail: function initDetail(detailController) {
				if (typeof detailController === 'string')
					controller.detail = Cognito.Messaging.proxy($("#c-entrydetails")[0].contentWindow, detailController);
				else
					controller.detail = detailController;
				controller.detail.setRole(getEntryViewRole().get_Name());
				controller.detail.setSummaryProperty(getSummaryProperty());
				controller.detail.setIsAssignedEntry(isAssignedView.value);
				Cognito.ready("detail");
			},

			// Remove Detail controller
			removeDetail: function removeDetail() {
				delete controller.detail;
				delete Cognito.readyDependencies["detail"];
			},

			// Initialize Refund Order Dialog
			initRefundOrder: function initRefundOrder(refundOrderController) {
				controller.refundOrder = Cognito.Messaging.proxy($("iframe[name=refundOrder]")[0].contentWindow, refundOrderController);
			},

			// Initialize Document Templates Dialog
			initDocumentTemplates: function initDocumentTemplates(documentTemplatesController) {
				controller.documentTemplates = Cognito.Messaging.proxy($("iframe[name=documentTemplates]")[0].contentWindow, documentTemplatesController);
			},

			// Initialize Share Entry Dialog
			initShareEntry: function initShareEntry(shareEntryController) {
				controller.shareEntryDialog = Cognito.Messaging.proxy($("iframe[name=share]")[0].contentWindow, shareEntryController);
				controller.shareEntryDialog.updateNotificationFromAddressBadge();
			},

			// Preview Files
			previewFiles: function previewFiles(files, index) {
				Cognito.showOverlay(function () {
					Cognito.hideOverlay();
				});
			},

			// View Entry
			viewEntry: function viewEntry(entryKey) {
				executeAction(function () {
					Cognito.ready("view-entry", ["detail", "master"], function () {
						currentEntryKey = entryKey;
						controller.master.viewEntry(entryKey, Cognito.Forms.model.currentView.get_Token());
						controller.detail.viewEntry(entryKey, Cognito.Forms.model.currentView.get_Token());
						showEntryDetails();
						updateNavigation();
					});
				});
			},

			// Hide Entry
			hideEntry: function hideEntry(newView) {
				executeAction(function () {
					if (!isEntryDetailsVisible())
						return;

					controller.master.hideEntry();
					currentEntryKey = null;
					hideEntryDetails();
					updateNavigation(newView);
				});
			},

			// New Entry
			newEntry: function newEntry() {
				currentEntryKey = null;
				const viewType = Cognito.Forms.model.currentView.get_Type().get_Name();
				if (viewType === 'Table') {
					// Clear the current entry selection
					controller.master.clearSelection();
					controller.master.hideEntry();

					// Display the details edit view
					controller.detail.newEntry();

					showEntryDetails();
				}
				else if (viewType === 'Form') {
					const roleId = Cognito.Forms.model.currentView.get_RoleId();
					const role = Cognito.Forms.model.currentForm.get_Roles().find(function (r) { return r.get_Id() === roleId; });
					const isPublic = role.get_IsPublic();
					Cognito.formViewAdapter.setNewEntry(role.get_Name(), isPublic);
					onOverrideFormEntryCreation(false);
				}

			},

			// Entry Changed
			entryChanged: function entryChanged() {
				entryHasChanges = true;
			},

			// Discard Entry Changes
			discardChanges: function discardChanges(entryKey, keepNewEntry, showDialog) {
				// Show the "Unsaved Changes" dialog
				if (showDialog && entryHasChanges) {
					Cognito.navigate();
					return;
				}

				entryHasChanges = false;

				controller.detail.discardChanges(entryKey, keepNewEntry);

				// Hide the entry details if a current entryKey does not exist (new entry)
				if (!currentEntryKey && !keepNewEntry)
					hideEntryDetails();

				// Execute the pending action
				executeAction();
			},

			// Entry Added
			entryAdded: function entryAdded(entryKey, viewEntry) {
				currentEntryKey = entryKey;
				entryHasChanges = false;

				var onEntriesGridUpdated = function () {
					controller.master.viewEntry(entryKey)
				}

				if (!Cognito.config.flags.AppNav) {
					if (Cognito.config.flags.UseCosmosIndexes)
						controller.master.pollEntryChanges(entryKey, onEntriesGridUpdated);
					else
						controller.master.refreshEntries(onEntriesGridUpdated);
				}
				else
					controller.master.viewEntry(entryKey);

				// If quantity is exceeded during a race condition, the entry will be saved but the model is invalid, so stay on the edit view
				if (viewEntry !== false) {
					controller.detail.viewEntry(entryKey);
				}

				// Execute the pending action
				executeAction();
			},

			/**
			 * Sets the performingSubmit flag to indicate that a workflow action or a save and resume save is being performed
			 */
			setPerformingSubmit: function setPerformingSubmit(value) {
				performingSubmit = value;
			},

			// Entry Updated
			entryUpdated: function entryUpdated(entryKey, viewEntry, callback) {
				entryHasChanges = false;

				if (!Cognito.config.flags.AppNav) {
					if (Cognito.config.flags.UseCosmosIndexes)
						controller.master.pollEntryChanges(entryKey);
					else
						controller.master.refreshEntries();
				}

				if (currentEntryKey && currentEntryKey.EntryId === entryKey.EntryId && viewEntry !== false)
					controller.detail.viewEntry(entryKey);

				currentEntryKey = entryKey;

				if (callback)
					callback();

				// Execute the pending action
				executeAction();
			},

			// Entry Update Failed
			entryUpdateFailed: function entryUpdateFailed(entryKey) {
				controller.hideMenus();

				// Ensure the current entry is selected. The update may have been triggered by the
				// unsaved changes dialog that was displayed due to selecting another entry.
				controller.master.viewEntry(entryKey, Cognito.Forms.model.currentView.get_Token());

				// If the entry update failed, executing pending actions
				if (pendingAction)
					executeAction();
			},

			// Entry Deleted
			entryDeleted: function entryDeleted(entryKey) {
				entryHasChanges = false;
				if (!Cognito.config.flags.AppNav) {
					if (Cognito.config.flags.UseCosmosIndexes)
						controller.master.pollEntryChanges(entryKey);
					else
						controller.master.refreshEntries();
				}

				if (currentEntryKey && currentEntryKey.EntryId === entryKey.EntryId)
					controller.hideEntry();

				// Execute the pending action
				executeAction();
			},

			// Delete Entries
			deleteEntries: function deleteEntries(entries) {
				deleteEntryDialog.entries = entries;
				deleteEntryDialog.open();
			},

			// Update Entry Status
			updateEntryStatus: function updateEntryStatus(entries, statusName, triggerEntryNotifications, statusId) {

				// Show the change status dialog when changing the status of multiple entries
				if (entries.length > 1) {

					// Clear the incomplete entries flag
					delete changeStatusDialog.incompleteEntries;

					changeStatusDialog.entries = entries;
					changeStatusDialog.statusName = statusName;
					changeStatusDialog.statusId = statusId;
					changeStatusDialog.open();
				}
				else
					changeStatus(entries, statusName, triggerEntryNotifications, changeStatusDialog.incompleteEntries, statusId);

				// Clear the incomplete entries flag
				delete changeStatusDialog.incompleteEntries;
			},

			// Updates the entry read states in the grid. This eventually calls updateEntryReadState with only completed entries
			updateGridReadState: function updateGridReadState(entries, read) {
				controller.master.changeReadStates(entries, read);
			},

			// Update Entry Read State
			updateEntryReadState: function updateEntryReadState(entries, read) {
				changeReadState(entries, read, !read);
			},

			// Import Entries
			importEntries: function importEntries() {
				// Hide menus
				controller.hideMenus();

				displayImportEntriesDialog();
			},

			// Export Entries
			exportEntries: function exportEntries(exportAllFields, selectedEntries) {

				// Hide menus
				controller.hideMenus();

				if (Cognito.config.exportId) {
					controller.openEntryExportDialog(Cognito.config.exportId, "InProgress");
				}
				else {
					var formId = Cognito.Forms.model.currentForm.get_Id();
					var entryView = Cognito.Forms.model.currentView;
					var entryViewSaved = Cognito.Forms.model.currentView.get_noViewChanges();

					Cognito.Forms.exportController.tryStartExport(formId, entryView, entryViewSaved, selectedEntries, exportAllFields, currentViewEntryCount.value, startExportSuccessful, startExportFailed);
				}

				function startExportSuccessful(jsonData, textStatus, xhrData) {
					startEntryExportCallback(jsonData.Id, xhrData);
				}

				function startExportFailed(xhrData) {
					startEntryExportCallback(null, xhrData);
				}

				function startEntryExportCallback(exportId, responseData) {
					if (exportId)
						Cognito.config.exportId = exportId;

					var requestStatus = responseData.status;
					var responseMessage = null;

					if (responseData.responseText) {
						var responseBody = JSON.parse(responseData.responseText);
						responseMessage = responseBody.Message;
					}

					var exportStatus = requestStatus === 200 ? "Pending" : "Failed";

					controller.openEntryExportDialog(exportId, exportStatus, requestStatus, responseMessage);
				}
			},

			openEntryExportDialog: function (exportId, status, startExportRequestStatus, startExportResponseMessage) {
				if (exportId === "expired")
					status = "Expired";

				// Success event handler to download the file
				var handleExportSuccess = function (eventData) {
					Cognito.config.exportId = null;
					$.fileDownload(eventData.downloadUrl, { httpMethod: "GET" });
				}

				var handleExportFailure = function () {
					Cognito.config.exportId = null;
				}

				VueComponents.EntryExportDialog.open(
					{
						exportId: exportId,
						startExportRequestStatus: startExportRequestStatus,
						startExportResponseMessage: startExportResponseMessage,
						userEmail: Cognito.config.userInfo.Email,
						status: status
					},
					[
						{
							eventName: "success",
							eventHandler: handleExportSuccess
						},
						{
							eventName: "failure",
							eventHandler: handleExportFailure
						},

					]
				);
			},

			initViews: function initViews(changingForm) {
				VueComponents.closeAllDialogs();
				Cognito.Forms.model.views = [];
				Cognito.Forms.refreshViews().then(checkForm(function (views) {
					Cognito.ready(null, ["master"], checkForm(function () {
						const view = views.find(function (v) { return v.Id === Cognito.Forms.model.currentView.get_Id(); });
						Cognito.Forms.model.currentView.set_isUserSpecific(view.IsUserSpecific || false);
						const currentViewType = Cognito.Forms.model.currentView.get_Type().get_Name();
						if (currentViewType === 'Form') {
							Cognito.ready(null, ["formViewAdapter"], function () {
								controller.changeView(Cognito.Forms.model.currentView, layoutMode, changingForm);
							});
						}
						else {
							controller.changeView(Cognito.Forms.model.currentView, layoutMode, changingForm);
						}
					}));
				}));
			},

			changeForm: function changeForm(form) {
				$extend(Cognito.Forms.model.entryTypeName, function (entryType) {

					Cognito.Forms.entryType = entryType;

					// Ensure the calculated order property is initialized
					if (entryType.$Order) {
						entryType.$Order.calculated({
							calculate: function () {
								if (!this.hasOwnProperty("_Order")) {
									this.set_Order(null);
								}
							}
						});
					}
				});

				currentEntryKey = null;
				controller.initViews(true);
			},

			// Change View
			changeView: function changeView(view, mode, changingForm) {
				var currentView = Cognito.Forms.model.currentView;

				// Close the details view and clear selections if changing views
				if (view.get_Id() != currentView.get_Id()) {
					if (controller.master) {
						controller.hideEntry(view);
						controller.master.clearSelection();
					}
				}

				// Rollback changes if there is previous view data
				if (!Cognito.Forms.model.currentView.get_noViewChanges() && previousViewData) {
					// Remove the view from the client memory cache
					var entryViewType = Cognito.Forms.EntryView.meta;
					delete entryViewType._pool[currentView.meta.id.toLowerCase()];
					if (entryViewType._known)
						entryViewType._known.remove(currentView);

					Cognito.Forms.model.views[Cognito.Forms.model.views.indexOf(Cognito.Forms.model.currentView)] = Cognito.deserialize(Cognito.Forms.EntryView, previousViewData);

					// Clear the view has changes flag
					Cognito.Forms.model.currentView.set_noViewChanges(true);
				}

				// Store the view data so it can be rolled back if needed. Stringify and parse the data to ensure arrays are copied.
				previousViewData = JSON.parse(JSON.stringify(Cognito.serialize(view)));

				// Reset noViewChanges
				currentView.set_noViewChanges(true);

				ExoWeb.Observer.setValue(Cognito.Forms.model, "currentView", view);

				requestAnimationFrame(function () {
					if (Cognito.config.flags.UserSpecificViews) {
						const newView = Cognito.Forms.model.views.find(function (v) { return v.Id === view.get_Id() });
						if (newView)
							currentViewEntryCount.value = newView.Entries;
						else
							currentViewEntryCount.value = 0;
					}
				});

				const roleId = Cognito.Forms.model.currentView.get_RoleId();
				const role = formData.value.Roles.find(function (r) { return r.Id === roleId; });
				ExoWeb.Observer.setValue(Cognito.Forms.model, "isPublicRole", role.IsPublic);

				Cognito.ready(null, ['detail', 'master'], checkForm(function () {
					controller.master.changeView(view, mode, role, changingForm);

					controller.detail.setIsAssignedEntry(isAssignedView.value);

					controller.detail.changeView(view);
					controller.detail.setSummaryProperty(getSummaryProperty());

					controller.detail.setRole(role.Name);

					updateNavigation();

					if (showNewEntry.value)
						executeAction(() => controller.newEntry());
				}));
			},

			// New View
			newView: function newView() {
				Cognito.Forms.onNewView();
			},

			// Save View
			saveView: async function saveView(view, isOnlyRenaming) {

				// Individual Plan
				if (!Cognito.config.hasPaidPlan) {
					controller.showFeatureWarning("entryviews");
					return;
				}

				// Check if user can manage entries
				if (!canManageEntries.value) {
					return;
				}

				// Clear out the view internal name
				view.set_InternalName(null);

				//refresh the current entry view's sequence key
				if (view.get_Id() && Cognito.config.flags.AppNav)
					view.set_SequenceKey(currentEntryView.value.SequenceKey);

				// Save the view
				Cognito.Forms.saveEntryView(view, function (data) {
					view.isUserSpecific = view.get_SharedWithMe();
					Cognito.deserialize(Cognito.Forms.EntryView, data, view);

					// Set previous view data since new view could be a copy before being saved
					previousViewData = JSON.parse(JSON.stringify(Cognito.serialize(view)));

					// update currentView in the globalStore passed in from EntriesPage.vue
					emitViewUpdated(data.Id, data);

					// Do not refresh grid if only renaming current view name
					if (isOnlyRenaming)
						return;

					// Change to the saved view
					controller.changeView(view, null);
				});

				// Clear the previous view data
				previousViewData = null;

				$(".c-save-view .c-nav-button").addClass("c-nav-disabled");
			},

			// Save View As
			saveViewAs: function saveViewAs() {
				if (!Cognito.config.hasPaidPlan) {
					if (Cognito.Forms.model.views.length > Cognito.config.entryViewLimit)
						this.showFeatureWarning("entryviewsexist");
					else
						this.showFeatureWarning("entryviews");
					return;
				}
				else if (Cognito.Forms.model.views.length >= Cognito.config.entryViewLimit) {
					showViewLimitExceededWarning();
					return;
				}

				var newView = Object.assign({}, Cognito.serialize(Cognito.Forms.model.currentView));
				newView.Id = null;

				controller.openEntryViewSettings(newView, true);
			},

			// View Changed
			viewChanged: function viewChanged() {

				// Flag the view has changes
				Cognito.Forms.model.currentView.set_noViewChanges(false);
			},

			// Delete View
			deleteView: function deleteView(viewId = null) {
				var view = viewId ? Cognito.deserialize(Cognito.Forms.EntryView, Cognito.Forms.model.views.find(function (v) { return v.Id === viewId })) : Cognito.Forms.model.currentView;

				// Switch to the first view in the list that is not the current view
				var defaultView = Cognito.Forms.model.views.find(function (v) { return v.Id !== view.get_Id() });
				Cognito.Forms.onChangeView(defaultView.Id);

				// Then delete the view
				Cognito.Forms.deleteEntryView(view.get_Id(), function () {
					/// Refresh the list of available views
					Cognito.Forms.refreshViews();
				});
			},

			// Copy View
			copyView: function copyView() {
				if (Cognito.Forms.model.views.length >= Cognito.config.entryViewLimit) {
					showViewLimitExceededWarning();
					return;
				}

				// Save the copied view
				Cognito.Forms.copyEntryView(Cognito.Forms.model.currentView, function (copyData) {
					var copy = Cognito.deserialize(Cognito.Forms.EntryView, copyData);
					Cognito.Forms.model.views.add(copy);
					controller.changeView(copy, layoutMode);

					if (!Cognito.config.flags.UserSpecificViews) {
						controller.showRenameView();
					}
				});
			},
			canAccessDestinationView: function canAccessDestinationView() {
				return Cognito.Forms.model.views.map(function (v) { return v.Id; }).includes(Cognito.Forms.model.currentView.get_AfterSubmitDestinationViewId());
			},

			// Show Rename View
			showRenameView: function showRenameView() {
				// Select and focus name text
				var textInput = $(".c-rename-view input:text").get(0);
				textInput.selectionStart = 0;
				textInput.selectionEnd = textInput.value.length;

				controller.hideMenus();

				showMenu($(".c-menu-current-view"));

				window.setTimeout(function () {
					// Add CSS to show the rename textbox
					$(".c-menu-current-view").addClass("c-show-rename");

					$(".entry-views-menu")[0].style.display = 'none';

					// Focus the element now that it is visible
					textInput.focus();
				}, 0);
			},

			// Change Layout
			changeLayout: function changeLayout(mode) {
				Cognito.ready(null, ["master, detail"], function () {
					controller.master.changeLayout(mode);
					controller.detail.changeLayout(mode);
				});
			},

			// Change Columns
			changeColumns: function changeColumns(columns) {
				Cognito.Forms.model.currentView.set_Columns(columns);

				if (controller.master)
					controller.master.changeColumns(columns);
				else
					tempColumns = columns;

				controller.viewChanged();

				if (controller.detail)
					controller.detail.setSummaryProperty(getSummaryProperty());
			},

			// Change Sort
			changeSort: function changeSort(columns) {
				Cognito.Forms.model.currentView.set_SortBy(columns);
				if (controller.master)
					controller.master.changeSort(columns);
				else
					tempSort = columns;

				controller.viewChanged();
			},

			// Change Filter
			changeFilter: function changeFilter(filter) {
				// Close the details view
				controller.hideEntry();

				if (filter.get_allEntryStatuses())
					filter.get_EntryStatus().clear();
				if (filter.get_allPaymentStatuses())
					filter.get_PaymentStatus().clear();

				Cognito.Forms.model.currentView.set_Filter(filter);
				if (controller.master)
					controller.master.changeFilter(filter);
				else
					tempFilter = filter;

				controller.viewChanged();
			},

			// Hide Menus
			hideMenus: function hideMenus() {
				Cognito.timers.hideMenus = window.setTimeout(function () {
					$(".c-menu-expanded").removeClass("c-menu-expanded");
					$(".c-menu-open").removeClass("c-menu-open").css("transition", "").css("max-height", "").css("overflow-y", "");

					// Hide context menus in child windows, protecting against calls occurring before they are registered
					if (controller.master)
						controller.master.hideMenus();

					// Remove CSS used to display the rename textbox
					$(".c-menu-current-view").removeClass("c-show-rename");

					// Show entry view menu
					var entryViewMenu = $(".entry-views-menu");
					if (entryViewMenu.length)
						entryViewMenu[0].style.display = "block";

					//Clear z-index of entry list grid due to scrolling issues in edge
					$("#c-entrylist").removeClass("c-entries-open-menu");
				}, 0);
			},

			// Select Entries
			selectEntries: function selectEntries(entries) {
				// Update EntriesPage value first
				if (selectedEntries.length == 0 || entries.length == 0)
					onUpdateHasSelectedEntries(entries.length > 0);

				selectedEntries = entries;
				var form = Cognito.Forms.model.currentForm;
				// Clear selected entries
				form.set_selectedEntries([]);
				form.set_selectedEntriesLimited([]);

				form.set_selectedEntries(selectedEntries);
				if (selectedEntries.length > 0 && selectedEntries.length <= 1000) {
					form.set_entriesSelected(true);
					form.set_selectedEntriesLimited(selectedEntries.slice(0, 1000));
				}
				else if (selectedEntries.length > 1000) {
					// Limited Access users should always only see actions they can perform, regardless of how many entries selected
					if (isLimitedAccess.value)
						form.set_selectedEntriesLimited(selectedEntries)
					else
						form.set_selectedEntriesLimited([]);

					form.set_entriesSelected(true);
				}
				else {
					form.set_entriesSelected(false);
					form.set_selectedEntriesLimited([]);
				}
			},

			// Update Entry Count
			updateEntryCount: function updateEntryCount(count) {
				currentViewEntryCount.value = count;
				Cognito.Forms.getEntryViews(Cognito.Forms.model.currentForm.get_Id())
					.then(function (views) {
						ExoWeb.Observer.setValue(Cognito.Forms.model, "views", views);
						return views;
					});
			},

			updateEntryDetails: function updateEntryDetails(entryKey) {
				controller.detail.refreshEntry(entryKey);
			},

			// Pay With Cash
			payWithCash: function payWithCash(entryKey, paymentAmount) {
				if (submittingCashPayment)
					return;
				submittingCashPayment = true;

				var viewId = Cognito.Forms.model.currentView.get_Id();
				Cognito.Forms.makePayment(viewId, entryKey.EntryId, null, null, paymentAmount)
					.then(function (data) {
						controller.entryUpdated(data.entryKey, null, function () { submittingCashPayment = false });
					})
					.catch(function () {
						submittingCashPayment = false;
					});
			},

			// Submit Payment
			submitPayment: function submitPayment(entryKey, customerCard) {
				displaySubmitPaymentDialog(entryKey, customerCard, Cognito.Forms.model.currentForm.get_PaymentAccount().get_ProcessorName().toLowerCase());
			},

			// Refund Manual Payment
			refundManualPayment: function refundManualPayment(entryKey) {
				refundOrder(entryKey.EntryId);
			},

			// Refund Payment
			refundPayment: function refundPayment(entryId, refundModel) {
				displayRefundOrderDialog(entryId, refundModel);
			},

			// Share Entry
			shareEntry: function shareEntry(entryKey, emittedRoles, allowSaveAndResumeLink) {
				if (Cognito.config.hasPaidPlan) {
					// Serialize roles
					var roles = Cognito.Forms.model.currentForm.get_Roles();
					if (!roles)
						return;

					VueComponents.ShareEntryDialog.open({
						entryId: entryKey.EntryId,
						entryViewId: Cognito.Forms.model.currentView.get_Id(),
						roles: emittedRoles,
						allowSaveAndResumeLink: allowSaveAndResumeLink,
						isLimitedWorkflowPro: Cognito.config.isLimitedWorkflowPro,
						dateFormat: Sys.CultureInfo.CurrentCulture.dateTimeFormat.ShortDatePattern
					});
				}
				else {
					controller.showFeatureWarning("entrysharing");
				}
			},

			// Close Share Entry
			closeShareEntry: function closeShareEntry(emailSent) {
				if (shareEntryDialog) {
					if (emailSent) {
						var $button = $(".c-modal:visible .c-modal-button:contains('Send')");
						if ($button.length > 0) {
							$button.text("Sending...");
							$button.addClass("sending").delay(1600).queue(function () {
								$button.addClass("done").dequeue();
								$button.text("Send").dequeue().delay(1600).queue(function () {
									$button.removeClass('sending').dequeue().delay(1200).queue(function () {
										$button.removeClass('done').dequeue();
										shareEntryDialog.close();
									});
								});
							});
						}
					}
					else
						shareEntryDialog.close();
				}
			},

			// Manage Document Templates
			manageTemplates: function manageTemplates() {
				if (Cognito.config.flags.NewDocumentTemplatesDialog) {
					var currentForm = Cognito.Forms.model.currentForm;

					VueComponents.ManageDocumentTemplatesDialog.open(
						{
							rawDocumentTemplates: Cognito.serialize(currentForm.get_DocumentTemplates()),
							formRoles: Cognito.serialize(currentForm.get_Roles()),
							tokensList: Cognito.Forms.generateTokens(),
							formName: currentForm.get_Name(),
							hasPaidPlan: Cognito.config.hasPaidPlan,
							encryptEntries: currentForm.get_EncryptEntries(),
							isPaymentForm: Cognito.Forms.model.isPaymentForm,
							isMultiPageForm: formData.value.IsMultiPageForm,
							tokenizeHtml: Cognito.Forms.tokenizeHtml,
							lowerOrganizationCode: Cognito.config.lowerOrganizationCode,
							currentForm: Cognito.serialize(currentForm),
							isFormPersisted: true,
							customTemplateLimit: Cognito.config.customTemplateLimit,
							templateFee: Cognito.config.templateFee,
							tierTemplateFee: Cognito.config.tierTemplateFee,
							planName: Cognito.config.planName,
							saveDocumentTemplates: function (documentTemplates) {
								var documentTemplates = Cognito.deserialize(Cognito.Forms.FormDocumentTemplate, documentTemplates);
								var form = Cognito.Forms.model.currentForm;

								return Cognito.Forms.saveDocumentTemplates(form, null, documentTemplates);
							},
							generateWordTemplate: function (documentTemplates, docTemplateNumber, allowCaching) {
								var documentTemplates = Cognito.deserialize(Cognito.Forms.FormDocumentTemplate, documentTemplates);
								var form = Cognito.Forms.model.currentForm;

								return Cognito.Forms.generateWordTemplate(form, documentTemplates, docTemplateNumber, allowCaching)
							},
							validateWordTemplate: function (documentTemplates, files) {
								// we only pass null for files if we're doing initialization validation
								if (!documentTemplates && !files) {
									form = Cognito.Forms.model.currentForm.get_Id();
									// create a payload to batch validate document templates
									files = Cognito.Forms.model.currentForm.get_DocumentTemplates().filter(function (d) { return d.get_File() !== null; }).map(function (d) { return ({ FileId: d.get_File().get_Id() }); });
								}
								else {
									var documentTemplates = Cognito.deserialize(Cognito.Forms.FormDocumentTemplate, documentTemplates);
									var form = Cognito.Forms.model.currentForm;
								}

								return Cognito.Forms.validateWordTemplate(form, documentTemplates, files);
							},
							annotateWordTemplate: function (documentTemplates, docTemplateNumber) {
								var documentTemplates = Cognito.deserialize(Cognito.Forms.FormDocumentTemplate, documentTemplates);
								var form = Cognito.Forms.model.currentForm;

								return Cognito.Forms.annotateWordTemplate(form, documentTemplates, docTemplateNumber)
							}
						},
						[
							{
								eventName: "templates-updated",
								eventHandler: function (documentTemplates, version) {
									// Need to set this so that we can make subsequent changes to the form after saving once
									// Should only be called on a successful template update
									currentForm.set_Version(version);
									controller.templatesUpdated(Cognito.deserialize(Cognito.Forms.FormDocumentTemplate, documentTemplates));
								}
							}
						]
					);
				}
				else {
					Cognito.Forms.manageDocumentTemplates({
						autoSave: true,
						usePersistedData: true,
						hasExternalChanges: entryHasChanges
					});
				}
			},

			// Exposes document templates save used by the share entry page/dialog
			saveTemplates: function saveTemplates() {
				controller.documentTemplates.save();
			},

			// Document Templates Updated
			templatesUpdated: function templatesUpdated(templates) {
				controller.detail.templatesUpdated(templates);

				// Update the list of templates to reflect changes
				Cognito.Forms.model.currentForm.set_DocumentTemplates(templates);

				if (controller.shareEntryDialog)
					controller.shareEntryDialog.templatesUpdated(templates);

				Cognito.Forms.closeTemplatesDialog();
			},

			savePanelWidth: function savePanelWidth(width) {
				Cognito.config.entryPageSettings.EntryPanelWidth = width;
				Cognito.serviceRequest({
					method: "PUT",
					endpoint: "/forms/admin/" + Cognito.Forms.model.currentForm.meta.id + "/entry-panel-width/" + width,
					success: function (data) {
					}
				});
			},
			// Email Notification
			openEmailNotificationDialog: function openEmailNotificationDialog(entryKey, documentTemplates, availableRoles) {
				if (Cognito.config.hasPaidPlan) {
					var rolesObject = {
						roles: availableRoles,
						showUpsell: false,
						isLimitedWorkflowPro: Cognito.config.isLimitedWorkflowPro,
						openWorkflowUpsell: function () { return controller.showFeatureWarning('workflowlinks'); }
					};

					var themeSettings = Cognito.Forms.model.currentForm.get_ThemeSettings();
					var formHasLogo = themeSettings && !!themeSettings.get_Logo();

					VueComponents.SendEmailDialog.open({
						entryId: entryKey.EntryId,
						documentTemplates: documentTemplates,
						rolesSelect: rolesObject,
						enableEntrySharing: Cognito.Forms.model.currentForm.get_EnableEntrySharing(),
						isPaymentForm: Cognito.Forms.model.isPaymentForm,
						formHasLogo: formHasLogo,
						defaultWorkflowLinkButtontext: Cognito.config.defaultWorkflowLinkButtonText
					});
				} else {
					controller.showFeatureWarning("entrysharing");
				}
			},

			// Feature Not Available
			showFeatureWarning: function showFeatureWarning(feature) {
				if (typeof feature === 'string') {
					VueComponents.UpsellDialog.open({ feature: feature, isOrgOwner: Cognito.config.role === 'Owner', orgCode: Cognito.config.organizationCode });
				}
				else
					VueComponents.UpsellDialog.open({ feature: feature.featureName, isOrgOwner: feature.isOrgOwner, orgCode: Cognito.config.organizationCode });
			},

			openViewEmailDialog: function openViewEmailDialog(data) {
				VueComponents.ViewEmailDialog.open({
					outcome: data
				});
			},

			openViewIntegrationDialog: function openViewIntegrationDialog(data) {
				VueComponents.ViewIntegrationDialog.open({
					outcome: data
				});
			},

			openViewGoogleAnalyticsDialog: function openViewGoogleAnalyticsDialog(data) {
				VueComponents.ViewGoogleAnalyticsDialog.open({
					outcome: data
				});
			},

			openViewEntryChangeDialog: function openViewEntryChangeDialog(data) {
				VueComponents.ViewEntryChangeDialog.open({
					show: data.show,
					title: data.title,
					entryId: data.entryId,
					entryChangeId: data.entryChangeId,
					condensedRecordEntryChangeId: data.condensedRecordEntryChangeId,
					entryChangeCount: data.entryChangeCount,
				});
			},

			openEntryViewSettings: function openEntryViewSettings(view, isNew) {

				// Delete View
				var onDeleteView = function () {
					executeAction(function () {
						controller.deleteView();
					});
				}

				// Save View
				var onSaveView = function (view) {
					executeAction(function () {
						view.isUserSpecific = !!view.SharedWithMe;

						// Existing View
						if (view.Id)
							view = Cognito.deserialize(Cognito.Forms.EntryView, view, Cognito.Forms.model.currentView);
						// New View
						else
							view = Cognito.deserialize(Cognito.Forms.EntryView, view);

						// Save the view
						controller.saveView(view);
						Cognito.Forms.refreshViews();
					});
				}

				var onShowUpsell = function () {
					executeAction(function () {
						controller.showFeatureWarning("tasks");
					});
				}

				var isLastGridView = Cognito.Forms.model.views.filter(function (v) {
					return v.Type === 'Table';
				}).length === 1 && view.Type === 'Table';

				// Open Entry View Settings Dialog
				VueComponents.EntryViewSettingsDialog.open(
					{
						view: view,
						roles: formData.value.Roles,
						entryViews: Cognito.Forms.model.views,
						canDelete: !isLastGridView,
						canCopy: Cognito.Forms.model.views.length < Cognito.config.entryViewLimit,
						isMultiPageForm: formData.value.IsMultiPageForm,
						showTasks: Cognito.Forms.model.showWorkflowTasks,
						isOrgOwner: Cognito.config.role === 'Owner',
						orgCode: Cognito.config.organizationCode,
						emailRoleAssignments: formData.value.EmailRoleAssignments,
						workflowLinksEnabled: formData.value.WorkflowLinksEnabled,
						isTaskDashboardEnabled: Cognito.config.flags.TaskDashboard,
						isAppNavEnabled: Cognito.config.flags.AppNav,
						dateFieldInfos: Cognito.Forms.model.fieldInfos.filter(fieldInfo => fieldInfo.FieldSubType === 'Date'),
						culture: window.Sys.CultureInfo.CurrentCulture
					},
					[
						{
							eventName: "delete-view",
							eventHandler: onDeleteView
						},
						{
							eventName: "save-view",
							eventHandler: onSaveView
						},
						{
							eventName: "show-tasks-upsell",
							eventHandler: onShowUpsell
						}
					]
				);
			}
		};

		Cognito.Forms.controller = controller;
		Cognito.ready("Cognito.Forms.controller");

		if ($("#c-entrylist").length) {
			Cognito.Messaging.trigger("controllerReady", { target: $("#c-entrylist").get(0).contentWindow });
		}

		if ($("#c-entrydetails").length) {
			Cognito.Messaging.trigger("controllerReady", { target: $("#c-entrydetails").get(0).contentWindow });
		}

		//#endregion

		//#region Dialogs

		// Unsaved Changes

		Cognito.onNavigate({
			title: "Unsaved Changes",
			text: "Are you sure you want to discard your changes?",
			open: function () { return entryHasChanges; },
			buttons: [
				{
					label: "Discard Changes",
					isCancel: true,
					click: function () {
						this.close();
						pendingAction = pendingAction || this.continue;
						controller.discardChanges(currentEntryKey);
					}
				},
				{
					label: "Keep Editing",
					click: function () {
						this.close();

						// Reset Flags
						pendingAction = null;
						if (currentEntryKey) {
							// Ensure the current entry is selected. The dialog may have been displayed as a result of selecting another entry.
							controller.master.viewEntry(currentEntryKey, Cognito.Forms.model.currentView.get_Token());
						}
					},
				}
			],
			cancel: function () {
				if (!window.Cognito)
					return;

				// Reset Flags
				pendingAction = null;
				if (currentEntryKey) {
					// Ensure the current entry is selected. The dialog may have been displayed as a result of selecting another entry.
					controller.master.viewEntry(currentEntryKey, Cognito.Forms.model.currentView.get_Token());
				}
			}
		});

		// Delete Entry
		var deleteEntryDialog = $.fn.dialog({
			title: "Delete Entry?",
			text: function () {
				var entriesToDelete = deleteEntryDialog.entries;
				var hasOrders = false;
				for (var i = 0; i < entriesToDelete.length; i++) {
					if (entriesToDelete[i].OrderId) {
						hasOrders = true;
						break;
					}
				}
				var referenceMessage = Cognito.Forms.model.isLookupSource || Cognito.Forms.model.isPeopleSource ? " " + (entriesToDelete.length > 1 ? "They" : "It") + " may be referenced by " : "";
				if (Cognito.Forms.model.isLookupSource && Cognito.Forms.model.isPeopleSource)
					referenceMessage += "Lookup or Person fields on other forms.";
				else if (Cognito.Forms.model.isLookupSource)
					referenceMessage += "Lookup fields on other forms.";
				else if (Cognito.Forms.model.isPeopleSource)
					referenceMessage += "Person fields on other forms.";
				return "Are you sure you want to permanently delete <strong>" + (entriesToDelete.length > 1 ? entriesToDelete.length + " entries" : "this entry") + "</strong>?" + referenceMessage + "<br><br>This action cannot be undone.";
			},
			height: 220,
			width: 450,
			buttons: [
				{
					label: "Cancel",
					isCancel: true
				},
				{
					label: "Delete",
					autoClose: false,
					click: function () {
						// Disable the delete button until the delete has completed to prevent the dialog from being reopen
						$(".c-delete-button").prop("disabled", true);

						// Show the delete progress message
						controller.master.updateProgressMessage("Deleting...");

						// Hide entry details if the entry is being deleted
						if (currentEntryKey) {
							for (var i = 0; i < deleteEntryDialog.entries.length; i++) {
								var entryKey = deleteEntryDialog.entries[i];
								if (entryKey.EntryId == currentEntryKey.EntryId) {
									controller.discardChanges(currentEntryKey);
									controller.hideEntry();
									break;
								}
							}
						}

						// Delete the specified entries and refresh the grid
						Cognito.Forms.deleteEntries({ Entries: deleteEntryDialog.entries, Token: Cognito.Forms.model.currentView.get_Token() },
							function (data) {
								if (!Cognito.config.flags.AppNav) {
									if (deleteEntryDialog.entries.length === 1 && Cognito.config.flags.UseCosmosIndexes)
										controller.master.pollEntryChanges(deleteEntryDialog.entries[0]);
									else
										controller.master.refreshEntries();
								}

								$(".c-delete-button").prop("disabled", false);
							},
							function () {
								$(".c-delete-button").prop("disabled", false);
							});

						this.close();
					}
				}
			]
		});

		// Change Status
		function changeStatus(entries, statusName, triggerEntryNotifications, incompleteEntries, statusId) {

			// Show progress message when bulk changing entries
			if (entries.length > 1)
				controller.master.updateProgressMessage("Changing Status...");

			// Change the status and refresh the master and detail views
			Cognito.Forms.updateEntryStatus({ Entries: entries, Token: Cognito.Forms.model.currentView.get_Token() }, statusId || statusName, triggerEntryNotifications != false, !!incompleteEntries,
				function (data) {
					var failedUpdates = data.filter(function (entryKey) { return entryKey.Status !== "Success"; });
					if (failedUpdates.length) {
						statusUpdatesFailedDialog.count = failedUpdates.length;
						statusUpdatesFailedDialog.open();
					}
					if (currentEntryKey && !entryHasChanges && entries.some(function (entry) { return entry.EntryId === currentEntryKey.EntryId }) && failedUpdates.every(function (entryKey) { return entryKey.EntryId != currentEntryKey.EntryId })) {
						controller.detail.setStatus(statusName);
					}

					if (!Cognito.config.flags.AppNav) {
						if (Cognito.config.flags.UseCosmosIndexes && data.length === 1)
							controller.master.pollEntryChanges(data[0]);
						else
							controller.master.refreshEntries();
					}
				},
				function (data) {
					controller.master.updateProgressMessage();
					window.setTimeout(function () {
						changeStatusDialog.entries = entries;
						changeStatusDialog.statusName = statusName;
						changeStatusDialog.statusId = statusId;
						changeStatusDialog.incompleteEntries = data.length;
						changeStatusDialog.open();
					}, 500);
				});
		}

		function changeReadState(entries, read) {
			if (entries.length > 1) {
				const message = "Marking as " + (read === true ? "Read" : "Unread") + "...";
				controller.master.updateProgressMessage(message);
			}

			Cognito.Forms.updateEntryReadState({ Entries: entries, Token: Cognito.Forms.model.currentView.get_Token() }, read,
				function (data, read) {
					controller.detail.changeReadStates(entries, read);
					controller.master.updateProgressMessage();
				},
				function () {
					controller.master.updateProgressMessage();
				}
			);
		}

		var changeStatusDialog = $.fn.dialog({
			title: "Change Status?",
			text: function () {
				if (changeStatusDialog.incompleteEntries) {
					var message = "<strong>" + (changeStatusDialog.entries.length == 1 ? "This entry is" : changeStatusDialog.incompleteEntries + " of these entries " + (changeStatusDialog.incompleteEntries > 1 ? "are" : "is")) + " Incomplete!</strong>";
					message += "<br /><br />Are you sure you wish to continue?"
					return message;
				}
				else
					return "Are you sure you want to change the status of <strong>" + (changeStatusDialog.entries.length > 1 ? changeStatusDialog.entries.length + " entries" : "this entry") + "</strong> to " + changeStatusDialog.statusName + "?";
			},
			height: 300,
			width: 500,
			buttons: [
				{
					label: "Cancel",
					isCancel: true
				},
				{
					label: "Change Status",
					autoClose: false,
					click: function () {
						changeStatus(this.entries, this.statusName, true, this.incompleteEntries, this.statusId);
						this.close();
					}
				}
			]
		});

		// This is hardcoded to indicate a quantity limit issue, although the update failure can potentially be caused by other things in the future.
		var statusUpdatesFailedDialog = $.fn.dialog({
			title: "Status Update Failures",
			text: function () {
				return "<strong>Unable to change status for " + statusUpdatesFailedDialog.count + " " + (statusUpdatesFailedDialog.count > 1 ? "entries" : "entry") + " because a quantity limit has been reached."
			},
			height: 300,
			width: 500,
			buttons: [
				{
					label: "Close"
				}
			],
			cancel: function () {
			}
		});

		// Credit Payment
		function displaySubmitPaymentDialog(entryKey, customerCard, paymentProcessor) {
			VueComponents.EntryPaymentDialog.open(
				{
					adminApi: AdminForm,
					formId: Cognito.Forms.model.currentForm.get_Id(),
					entryKey: entryKey,
					viewId: Cognito.Forms.model.currentView.get_Id(),
					viewToken: Cognito.Forms.model.currentView.get_Token(),
					role: Cognito.serialize(getEntryViewRole()),
					paymentProcessor: paymentProcessor,
					currencyCode: Cognito.Forms.model.currentForm.get_Localization().get_Currency().get_Code(),
					customerCard: customerCard,
					makePayment: Cognito.Forms.makePayment
				},
				[
					{
						eventName: "update-entry",
						eventHandler: function (args) {
							controller.entryUpdated(args.entryKey);
						}
					}
				]
			);
		}

		function displayRefundOrderDialog(entryId, refundModel) {
			VueComponents.RefundOrderDialog.open(
				{
					model: refundModel,
					entryId: entryId
				},
				[
					{
						eventName: "refund-entry-order",
						eventHandler: function (args) {
							refundOrder(args.entryId, args.refundSuccess, args.refundError);
						}
					}
				]
			);
		}

		function refundOrder(entryId, success, error) {
			if (submittingRefund)
				return;
			submittingRefund = true;
			var viewId = Cognito.Forms.model.currentView.get_Id();
			Cognito.Forms.refundEntryOrder(viewId, entryId,
				function (data) {
					controller.entryUpdated(data.entryKey, null, function () { submittingRefund = false });

					if (success)
						success(data);
				},
				function () {
					submittingRefund = false;
					if (error)
						error();
				}
			);
		}

		// Advanced Filter
		function advancedFilter(callback) {

			// Open the advance filter dialog
			Cognito.openExpressionBuilder({
				rootType: Cognito.Forms.model.currentForm,
				includeTransientProperties: false,
				scope: Cognito.Forms.model.filter.get_scope(),
				property: "Advanced Filter",
				label: "Advanced Filter...",
				expression: Cognito.Forms.model.filter.get_Expression(),
				saveCallback: function filter(newExpression) {
					function updateFilter(expression, summary, invalid) {

						// Store the new filter criteria
						Cognito.Forms.model.filter.set_Expression(expression);

						// Update the expression summary
						Cognito.Forms.model.filter.set_ExpressionSummary(summary);
						Cognito.Forms.model.filter.set_Invalid(invalid);

						// Apply the new filter
						controller.changeFilter(Cognito.Forms.model.filter);
						controller.hideMenus();
					}

					if (newExpression) {
						Cognito.getExpressionBuilderPreview(Cognito.Forms.model.currentForm, Cognito.Forms.model.filter.get_scope(), newExpression,
							function (preview, invalid) { updateFilter(newExpression, invalid ? "Invalid Filter" : preview, invalid); }
						);
					}
					else
						updateFilter(newExpression, "", false);
				},
				openCallback: function open(dialog) {
					// Switch the Save button to Filter for consistency
					$(".c-expression-builder-dialog .c-modal-button").not(".c-modal-button-cancel").text("Filter");
				}
			});
		}

		function displayBulkDownloadDialog(type, documentTemplateId, bulkDownloadId = null) {
			VueComponents.BulkDownloadDialog.open({
				title: type === "File" ? "Download Files" : "Download Documents",
				show: true,
				userEmail: Cognito.config.userInfo.Email,
				selectedEntries: selectedEntries,
				entryViewId: Cognito.Forms.model.currentView.get_Id(),
				downloadType: type,
				documentTemplateId: documentTemplateId,
				bulkDownloadId: bulkDownloadId
			});
		}

		function displayBulkFileDownloadUpsellDialog() {
			controller.showFeatureWarning('bulkfiledownload');
		}

		function displayBulkDocumentDownloadUpsellDialog() {
			controller.showFeatureWarning('bulkdocumentdownload');
		}

		function displayBulkActionDialog(action) {
			controller.master.stopRefreshInterval();
			VueComponents.BulkActionDialog.open({
				action: action.ActionName,
				role: getEntryViewRole().get_Name(),
				userInfo: Cognito.config.userInfo,
				selectedEntries: selectedEntries,
				viewId: Cognito.Forms.model.currentView.get_Id(),
				viewToken: Cognito.Forms.model.currentView.get_Token(),
				adminApi: AdminForm
			}).then(function (dlg) {
				dlg.$once("close", function () {
					controller.master.startRefreshInterval();
				});
			});
		}

		function displayImportEntriesDialog(importId, callback) {
			VueComponents.ImportEntriesDialog.open(
				{
					show: true,
					formInternalName: Cognito.Forms.model.currentForm.get_LoweredInternalName(),
					formDisplayName: Cognito.Forms.model.currentForm.get_Name(),
					importId: importId || '',
					isOrgOwner: Cognito.config.role === 'Owner',
					orgCode: Cognito.config.organizationCode
				},
				[
					{
						eventName: "refresh:entries",
						eventHandler: controller.master.refreshEntries
					},
					{
						eventName: "close",
						eventHandler: function () {
							if (callback && typeof callback === "function") {
								callback();
							}
						}
					}
				]
			)
		}

		// Share Entry
		function displayshareEntryDialog(entryKey) {
			var entryNumber = entryKey.EntryId.split("-")[1];

			shareEntryDialog = $.fn.dialog({
				title: "Share Entry",
				name: "share",
				url: Cognito.config.baseUrl + "forms/admin/view/" + Cognito.Forms.model.currentForm.get_LoweredInternalName() + "/entries/" + entryNumber + "/share?viewToken=" + Cognito.Forms.model.currentView.get_Token(),
				width: 800,
				height: "750px",
				buttons: [
					{
						label: "Close",
						isCancel: false,
						click: function () {
							this.close(true);
						}
					},
					{
						label: "Send",
						autoClose: false,
						click: function () {
							controller.shareEntryDialog.sendEmail();
						}
					}
				]
			});

			shareEntryDialog._dialog.find(".c-modal-button:contains('Send')").addClass("send-animation");

			shareEntryDialog.open();
		}

		// View Limit Exceeded Available
		var viewLimitExceededDialog;
		function showViewLimitExceededWarning() {
			if (!viewLimitExceededDialog) {
				var viewLimitExceededDialog = $.fn.dialog({
					title: "View Limit Reached",
					text: "Only " + Cognito.config.entryViewLimit + " saved views are allowed per form.",
					buttons: [
						{
							label: "Okay",
							autoClose: true,
							isDefault: true
						}
					]
				});
			}
			viewLimitExceededDialog.open();
		}

		// #endregion

		//#region Model Type Definitions

		// Entry View
		$extend(["Cognito.Forms.EntryView", "Cognito.Forms.EntryViewColumn", "Cognito.FieldInfo"], function (type) {

			// Prevent Entry Creation
			type.meta.addProperty({ name: "isGridView", type: Boolean }).calculated({
				calculate: function () {
					return !this.get_Type() || this.get_Type().get_Name() !== 'Form';
				},
				onChangeOf: ["Type.Name"]
			});

			// Available Columns
			type.meta.addProperty({ name: "availableColumns", type: Cognito.Forms.EntryViewColumn, isList: true });

			type.$SharedWithMe.addChanged(function (sender, args) {
				Cognito.Forms.model.currentView.get_Filter().set_sharedWithMe(args.newValue)
			});

			// All Fields
			type.$AllFields.calculated({
				calculate: function () {
					var selectedFields = 0;
					var allFields = 0;
					var columns = this.get_Columns();
					for (var c = 0; c < columns.length; c++) {
						if ($.isNumeric(columns[c].get_FieldId()[0]))
							selectedFields++
					}
					var columns = this.get_availableColumns();
					for (var c = 0; c < columns.length; c++) {
						if ($.isNumeric(columns[c].get_FieldId()[0]))
							allFields++
					}
					return selectedFields == allFields;
				},
				onChangeOf: ["Columns", "availableColumns"]
			})
				.addChanged(function (sender, args) {
					if (!args.calculated) {
						$(".c-view-columns .c-view-form-field input:checkbox").prop('checked', args.newValue);
						controller.changeColumns($(".c-view-columns input:checkbox:checked").map(function () { return $parentContextData(this).get_rawValue(); }).toArray());
					}
				});

			// Force the token to be serialized in cross window calls
			type.$Token._isPersisted = true;

			// Scope Id
			type.meta.addProperty({ name: "scopeId", type: String }).calculated({
				calculate: function () {
					return this.get_Filter().get_ScopeId() || "";
				}
			})
				.addChanged(function (sender, args) {

					if (!args.calculated) {

						// Remove columns that are no longer valid for the specified scope
						var columns = sender.get_Columns().slice();
						var count = columns.length;
						var scope = sender.get_scopeId() || "";
						for (var c = count - 1; c >= 0; c--) {

							if (!scope.startsWith(columns[c].get_field().get_ScopeId() || ""))
								columns.splice(c, 1);
						}
						if (columns.length < count)
							controller.changeColumns(columns);

						// Refresh the column menu
						refreshColumnMenu();

						// Remove sort columns that are no longer valid for the specified scope
						var sortBy = sender.get_SortBy().slice();
						count = sortBy.length;
						for (var c = count - 1; c >= 0; c--) {

							if (!scope.startsWith(sortBy[c].get_field().get_ScopeId() || ""))
								sortBy.splice(c, 1);
						}
						if (sortBy.length < count)
							controller.changeSort(sortBy);

						// Clear the filter, since it is now invalid
						controller.changeFilter(new Cognito.Forms.EntryViewFilter({ ScopeId: scope }));

						// Hide entry details and clear current selections
						controller.hideEntry();
						controller.master.clearSelection();
					}
				});

			// Columns
			type.$Columns.optionValues("availableColumns");

			// Filter
			type.$Filter.calculated({
				calculate: function () { return this.get_Filter() || new Cognito.Forms.EntryViewFilter(); }
			});
			type.meta.addInitExisting(function (view) { if (!view.get_Filter()) view.set_Filter(new Cognito.Forms.EntryViewFilter()); });

			// Sort Summary
			type.meta.addProperty({ name: "sortSummary", type: String }).calculated({
				calculate: function () {
					var sortBy = this.get_SortBy();
					if (sortBy.length == 0)
						return "Most Recent First";

					var description = "Sort by ";
					for (var s = 0; s < sortBy.length; s++) {
						if (s > 0)
							description += ", then by ";
						description += sortBy[s].get_field().get_Name();
						if (!sortBy[s].get_Ascending())
							description += " descending";
					}

					return description;
				},
				onChangeOf: "SortBy{FieldId,Ascending}"
			});

			// Sort Class
			type.meta.addProperty({ name: "sortClass", type: String }).calculated({
				calculate: function () {
					var buttonClass = Cognito.config.flags.AppNav ? 'text-button' : 'c-nav-button';

					if (this.get_SortBy().length)
						return buttonClass + ' c-sort-applied';
					else
						return buttonClass;
				},
				onChangeOf: "SortBy"
			});

			type.meta.addProperty({ name: "canDelete", type: Boolean }).calculated({
				calculate: function () {
					return Cognito.Forms.model.views.length > 1;
				}
			});

			//TODO: when UserSpecificViews is on, delete this
			type.$Name.addChanged(function (sender, args) {
				if (!Cognito.config.flags.UserSpecificViews) {
					if (!args.newValue || args.newValue.trim() == args.oldValue || args.newValue.trim() == "") {
						sender.set_Name(args.oldValue);
						return;
					}

					Cognito.Forms.renameEntryView(Cognito.Forms.model.currentView.get_Id(), sender.get_Name(), function (data) {
						sender.set_InternalName(data);

						// Update the rollback data
						if (previousViewData) {
							previousViewData.Name = sender.get_Name();
							previousViewData.InternalName = sender.get_InternalName();
						}
						updateNavigation();
					});
				}
			});

			type.meta.addProperty({ name: "roleName", type: String }).calculated({
				calculate: function () {
					var form = getForm(this.get_Form().get_Id());
					return getEntryViewRole(form, this).get_Name();
				},
				onInit: true,
				onChangeOf: ["RoleId"]
			});
		});

		// Entry View Column
		$extend("Cognito.Forms.EntryViewColumn", function (type) {

			// Format
			type.meta.set_format("[field.Name]");

			// Field
			type.meta.addProperty({ name: "field", type: Cognito.FieldInfo }).calculated({
				calculate: function () {
					var fieldId = this.get_FieldId();
					return Cognito.deserialize(Cognito.FieldInfo, Cognito.Forms.model.fieldInfos.filter(function (f) { return f.Id == fieldId; })[0]) || null;
				},
				onChangeOf: "FieldId"
			});

		});

		// Entry View Filter
		$extend("Cognito.Forms.EntryViewFilter", function (type) {

			// Scope
			type.meta.addProperty({ name: "scope", type: String }).calculated({
				calculate: function () {
					var scope = this.get_ScopeId();
					return scope ? Cognito.Forms.model.fieldInfos.filter(function (f) { return f.Id == scope; })[0].Path : "";
				}
			});

			// Allowed Entry Statuses
			type.meta.addProperty({ name: "allowedEntryStatuses", type: String, isList: true }).calculated({
				calculate: function () {
					return Cognito.Forms.model.currentForm.get_EntryStatuses().filter(function (s) { return !s.get_IsArchived(); }).map(function (s) { return s.get_Id().toString() });
				}
			});

			// Entry Status
			type.$EntryStatus.optionValues("allowedEntryStatuses");

			// All Entry Statuses
			type.meta.addProperty({ name: "allEntryStatuses", type: Boolean }).calculated({
				calculate: function () {
					try { if (window.event) window.event.stopPropagation(); } catch (e) { }
					return this.get_allowedEntryStatuses().length == this.get_EntryStatus().length;
				},
				onChangeOf: "EntryStatus"
			})
				.addChanged(function (sender, args) {
					if (!args.calculated) {
						sender.get_EntryStatus().clear();
						if (args.newValue)
							sender.get_EntryStatus().addRange(sender.get_allowedEntryStatuses());
					}
				});

			// Allowed Payment Statuses
			type.meta.addProperty({ name: "allowedPaymentStatuses", type: String, isList: true }).calculated({
				calculate: function () {
					return Cognito.Payment.PaymentStatus.get_All().filter(function (p) { return p.get_Name() !== 'Cancelled' && p.get_Name() !== "New"; }).map(function (p) { return p.get_Name(); });
				}
			});

			// Payment Status
			type.$PaymentStatus.optionValues("allowedPaymentStatuses");

			// All Payment Statuses
			type.meta.addProperty({ name: "allPaymentStatuses", type: Boolean }).calculated({
				calculate: function () {
					try { if (window.event) window.event.stopPropagation(); } catch (e) { }
					return this.get_allowedPaymentStatuses().length == this.get_PaymentStatus().length;
				},
				onChangeOf: "PaymentStatus"
			})
				.addChanged(function (sender, args) {
					if (!args.calculated) {
						sender.get_PaymentStatus().clear();
						if (args.newValue)
							sender.get_PaymentStatus().addRange(sender.get_allowedPaymentStatuses());
					}
				});

			// Filter Summary
			type.meta.addProperty({ name: "filterSummary", type: String }).calculated({
				calculate: function () {

					var summary = "";

					if (this.get_Invalid()) {
						this.set_ExpressionSummary("Invalid Filter");
						return "Invalid Filter";
					}

					// Entry Status
					if (!this.get_allEntryStatuses() && this.get_EntryStatus().length > 0) {
						summary = "Entry is ";
						var statuses = this.get_EntryStatus();

						statuses = statuses.map(function (s) {
							return Cognito.Forms.getEntryStatusById(Cognito.Forms.model.currentForm.get_EntryStatuses(), s).Name;
						});

						for (var s = 0; s < statuses.length; s++) {
							if (s > 0)
								summary += " or ";
							summary += statuses[s];
						}
					}

					// Payment Status
					if (!this.get_allPaymentStatuses() && this.get_PaymentStatus().length > 0) {
						summary = (summary ? summary + " and " : "") + "Order is ";
						var statuses = this.get_PaymentStatus();
						for (var s = 0; s < statuses.length; s++) {
							if (s > 0)
								summary += " or ";
							summary += statuses[s];
						}
					}

					// Expression
					if (this.get_ExpressionSummary())
						summary = this.get_ExpressionSummary() + (summary ? " and " + summary : "");

					// Keywords
					if (this.get_Keyword())
						summary = "Any field containing " + this.get_Keyword() + (summary ? " and " + summary : "");

					return summary;
				},
				onChangeOf: ["ExpressionSummary", "Invalid", "EntryStatus", "PaymentStatus", "Keyword"]
			});

			type.meta.addProperty({ name: "sharedWithMe", type: Boolean }).calculated({
				calculate: function () {
					return Cognito.Forms.model.currentView.get_SharedWithMe();
				}
			});

			// Filter Count
			type.meta.addProperty({ name: "filterCount", type: Number }).calculated({
				calculate: function () {
					var keyword = this.get_Keyword() ? 1 : 0;
					var expressions = this.get_Expression() ? 1 + (this.get_Expression().match(/ and /g) || []).length + (this.get_Expression().match(/ or /g) || []).length : 0;
					var statuses = (this.get_EntryStatus().length == 0 || this.get_allEntryStatuses() ? 0 : 1) + (this.get_PaymentStatus().length == 0 || this.get_allPaymentStatuses() ? 0 : 1);
					var sharedWithMe = this.get_sharedWithMe() ? 1 : 0;
					return keyword + expressions + statuses + sharedWithMe;
				},
				onChangeOf: ["Keyword", "Expression", "EntryStatus", "PaymentStatus", "sharedWithMe"]
			});

			// Filter Class
			type.meta.addProperty({ name: "filterClass", type: String }).calculated({
				calculate: function () {
					var buttonClass = Cognito.config.flags.AppNav ? 'text-button' : 'c-nav-button';

					if (this.get_Invalid())
						return buttonClass + ' c-filter-invalid';

					if (this.get_filterCount())
						return buttonClass + ' c-filter-applied';

					return buttonClass;
				},
				onChangeOf: ["filterCount", "Invalid"]
			});
		});

		// Entry View Sort
		$extend("Cognito.Forms.EntryViewSort", function (type) {

			// Field
			type.meta.addProperty({ name: "field", type: Cognito.FieldInfo }).calculated({
				calculate: function () {
					var fieldId = this.get_FieldId();
					return Cognito.deserialize(Cognito.FieldInfo, Cognito.Forms.model.fieldInfos.filter(function (f) { return f.Id == fieldId; })[0]) || null;
				},
				onChangeOf: "FieldId"
			});

			// Sort Directions
			type.meta.addProperty({ name: "sortDirections", type: String, isList: true }).calculated({
				calculate: function () {
					var field = this.get_field();
					if (field) {
						var fieldType = field.get_FieldType().get_Name();
						var fieldSubType = field.get_FieldSubType() ? field.get_FieldSubType().get_Name() : "";
						if (fieldType == "Number" || fieldType == "Currency" || fieldSubType == "Currency" || fieldSubType == "Decimal")
							return ["0 - 9", "9 - 0"];
						if (fieldSubType == "Date" || fieldSubType == "Time" || fieldSubType == "DateTime")
							return ["Oldest to Newest", "Newest to Oldest"];
						else if (fieldType == "Signature")
							return ["Unsigned, Signed", "Signed, Unsigned"];
						else if (fieldType == "File")
							return ["None to Most", "Most to None"];
						else if (fieldType == "YesNo" || fieldSubType == "YesNo" && field.get_Choices() && field.get_Choices.length == 2) {

							return [field.get_Choices()[1].get_Label() + ", then " + field.get_Choices()[0].get_Label(), field.get_Choices()[0].get_Label() + ", then " + field.get_Choices()[1].get_Label()];
						}
						else
							return ["A - Z", "Z - A"];
					}
					return [];
				},
				onChangeOf: "field"
			});

		});

		// Form
		$extend("Cognito.Forms.Form", function (form) {

			form.meta.addProperty({ name: "workflowActionsList", type: Object, isList: true })
				.calculated({
					calculate: function () {
						var actions = this.get_Actions().filter(function (action) {
							return action.get_IsArchived() !== true;
						});

						return actions.map(function (action) {
							return {
								Id: action.get_Id(),
								ActionName: action.get_ActionName(),
								AllowedWhen: action.get_AllowedWhen(),
								ButtonText: action.get_ButtonText(),
								NewStatus: action.get_NewStatus(),
								Confirmation: action.get_Confirmation(),
								Emails: action.get_Emails(),
								IsArchived: action.get_IsArchived(),
								FieldsToClear: action.get_FieldsToClear(),
								PrefillConfigs: action.get_PrefillConfigs()
							}
						});
					}
				});

			form.meta.addProperty({ name: "roleOptions", type: Object, isList: true }).calculated({
				calculate: function () {
					return Cognito.serialize(this.get_Roles());
				}
			});

			form.meta.addProperty({ name: "entriesSelected", type: Boolean }).calculated({
				calculate: function () {
					return selectedEntries.length > 0;
				}
			});

			form.meta.addProperty({ name: "entryDetailsOpen", type: Boolean });

			form.meta.addProperty({ name: "selectedEntriesLimited", type: Object, isList: true });

			form.meta.addProperty({ name: "documentTemplates", type: Object, isList: true })
				.calculated({
					calculate: function calculate$documentTemplates() {
						return this.get_DocumentTemplates().map(function (d) {
							var document = Cognito.serialize(d);
							document.Description = d.get_description();
							document.NameHtml = d.get_nameHtml();
							return document;
						});
					},
					onChangeOf: ['DocumentTemplates{Number,Name,Description,OutputType}']
				});

			form.meta.addProperty({ name: "isMobile", type: Boolean }).defaultValue(function () { return isMobile.value; });
			Vue.watch(isMobile, () => {
				Cognito.Forms.model.currentForm.set_isMobile(isMobile.value);
			});

			// AppNav Limited Access Mobile version of actions button lives in EntriesPage.vue
			form.meta.addProperty({ name: "showActionsButton", type: Boolean })
				.calculated({
					calculate: function () {
						return !isLimitedAccess.value || !isMobile.value;
					},
					onChangeOf: ["isMobile, isLimitedAccess"]
				})
		})

		$extend(["Cognito.Forms.EntryView", "Cognito.Forms.Form"], function (view, form) {
			var isUserSpecificProp = view.meta.addProperty({ name: "isUserSpecific", type: Boolean, origin: "server" }).defaultValue(false);
			isUserSpecificProp._origin = "server";
			isUserSpecificProp._isPersisted = true;

			form.meta.addProperty({ name: "selectedEntries", type: Object, isList: true });

			form.meta.addProperty({ name: "canManageEntries", type: Boolean }).defaultValue(function () { return canManageEntries.value; });
			Vue.watch(canManageEntries, () => {
				Cognito.Forms.model.currentForm.set_canManageEntries(canManageEntries.value);
			});

			Vue.watch(isAssignedView, () => {
				controller.detail.setIsAssignedEntry(isAssignedView.value);
			});

			view.meta.addProperty({ name: "form", type: Cognito.Forms.Form }).calculated({
				calculate: function () {
					return Cognito.Forms.model.currentForm;
				}
			});

			view.meta.addProperty({ name: "noViewChanges", type: Boolean }).defaultValue(true);

			view.meta.addProperty({ name: "hasViewChanges", type: Boolean }).calculated({
				calculate: function () {
					return !this.get_noViewChanges();
				},
				onChangeOf: ["noViewChanges"]
			});
		})

		//#endregion

		//#region Menu

		// Show Menu
		function showMenu(action, delta) {
			window.setTimeout(function () {
				var menu = action.find("> .c-nav-menu");
				var content = menu.find("> .c-nav-menu-content");
				var menuStyles = getComputedStyle(content[0]);
				var menuPadding = parseInt(menuStyles.paddingTop) + parseInt(menuStyles.paddingBottom);
				var menuHeight = content.height() + menuPadding + (delta || 0);
				var maxHeight = window.document.documentElement.clientHeight - 110;
				var left = action.offset().left;
				var width = menu.width();
				var maxWidth = window.innerWidth;
				left = left + width < maxWidth ? 0 : Math.max(-left, maxWidth - width - left);
				action.addClass("c-menu-expanded");
				menu.addClass("c-menu-open").css("left", left + "px").css("transition", "max-height 0.3s ease").css("max-width", Math.min(width, maxWidth) + "px").css("max-height", Math.min(menuHeight, maxHeight) + "px").css("overflow-y", menuHeight > maxHeight ? "auto" : "hidden");

				// Also resize the parent menu
				var parent = action.parent().closest(".c-nav-action");
				if (parent.length > 0)
					showMenu(parent, menuHeight);

				//Set z-index of entry list grid to -1 to prevent scrolling issues in edge
				$("#c-entrylist").addClass("c-entries-open-menu");

			}, 0);
		}

		$(document.documentElement)

			// Hide/Show context menus
			.on("click", function (event) {

				if (!event.originalEvent || event.originalEvent.dialog || event.dialog)
					return;

				var isMenuButton = $(event.target).closest(Cognito.config.flags.AppNav ? ".text-button" : ".c-nav-button").not(".c-nav-disabled").next(".c-nav-menu").length > 0;

				// Close all menus if the target is a menu button or the click is not inside a menu
				if (isMenuButton || ($(event.target).parents(".c-menu-open").length == 0 && $.contains(document.documentElement, event.target)))
					controller.hideMenus();

				// Open the menu when a menu button is clicked
				if (isMenuButton) {

					// Calculate Menu Size and Position
					var action = $(event.target).parents(".c-nav-action");

					// Only open menus that are currently closed
					if ($(event.target).closest(".c-nav-action").find(".c-nav-menu").css("max-height") != "0px")
						action = $(event.target).closest(".c-nav-action").parents(".c-nav-action");
					if (action.length == 0)
						return;

					// Columns Menu Initialization
					if (action.is(".c-columns"))
						refreshColumnMenu();

					// Sort Menu Initialization
					if (action.is(".c-sort")) {
						var availableColumns = Cognito.Forms.model.currentView.get_Columns().slice();
						availableColumns.unshift(new Cognito.Forms.EntryViewColumn({ FieldId: "Entry.Number", Width: 50 }));
						availableColumns.addRange(Cognito.Forms.model.fieldInfos
							.filter(function (field) { return field.Id != "Entry.Number" && !field.Id.includes('.') && field.FieldType !== "Entity" && field.FieldType !== "EntityList" && !availableColumns.some(function (column) { return column.get_FieldId() == field.Id; }); })
							.map(function (field) { return new Cognito.Forms.EntryViewColumn({ FieldId: field.Id, Width: field.Width }); }));
						Cognito.Forms.model.currentView.set_availableColumns(availableColumns);
						ExoWeb.Observer.setValue(Cognito.Forms.model, "sortBy", ExoWeb.Observer.makeObservable(Cognito.deserialize(Cognito.Forms.EntryViewSort, Cognito.serialize(Cognito.Forms.model.currentView.get_SortBy()))));
						if (Cognito.Forms.model.sortBy.length == 0)
							Cognito.Forms.model.sortBy.add(new Cognito.Forms.EntryViewSort({ Ascending: true }));
					}

					// Filter Menu Initialization
					if (action.is(".c-filter")) {
						ExoWeb.Observer.setValue(Cognito.Forms.model, "filter", Cognito.deserialize(Cognito.Forms.EntryViewFilter, JSON.parse(JSON.stringify(Cognito.serialize(Cognito.Forms.model.currentView.get_Filter() || new Cognito.Forms.EntryViewFilter({ allEntryStatuses: true, allPaymentStatuses: true }))))));
						Cognito.Forms.model.filter.set_ExpressionSummary(Cognito.Forms.model.currentView.get_Filter().get_ExpressionSummary());
						if (Cognito.Forms.model.filter.get_EntryStatus().length == 0)
							Cognito.Forms.model.filter.get_EntryStatus().addRange(Cognito.Forms.model.filter.get_allowedEntryStatuses());
						if (Cognito.Forms.model.filter.get_PaymentStatus().length == 0)
							Cognito.Forms.model.filter.get_PaymentStatus().addRange(Cognito.Forms.model.filter.get_allowedPaymentStatuses());
					}

					// Show Menu
					showMenu(action);
					if (action.parents(".c-nav-action").length > 0) {
						event.stopPropagation();
						showMenu(action.parents(".c-nav-action"));
					}
				}
			});

		//#endregion

		//#region Utility Functions

		// Executes an action if there are no pending changes, otherwise
		// queue the action to be executed after the changes have been confirmed
		function executeAction(action, thisPtr) {

			// Queue the action if provided
			if (action)
				pendingAction = function () { action.apply(thisPtr || this) };

			// If an entry has changes then prompt the user of unsaved changes, if there is no submission being performed
			if (entryHasChanges) {
				if (!performingSubmit)
					Cognito.navigate();
			}
			// Otherwise, execute the pending action
			else if (pendingAction) {
				pendingAction();
				pendingAction = null;
			}
		}

		// Sort views alphabetically with the current view on top
		function reorderViews() {
			var currentView = Cognito.Forms.model.currentView;
			var views = Cognito.Forms.model.views;

			// Remove current view
			var views = views.filter(function (v) { return v != currentView; });

			// Sort the views alphabetically by name
			var views = $transform(views).orderBy("Name");

			// Add current view to the beginning
			views.unshift(currentView);

			// Update the views
			ExoWeb.updateArray(Cognito.Forms.model.views, views);

			return Cognito.Forms.model.views;
		}

		// Update the navigation to reflect the current view and selected entry
		function updateNavigation(view, query) {
			var form = Cognito.Forms.model.currentForm;
			var formName = form.get_LoweredInternalName();
			if (!view)
				view = Cognito.Forms.model.currentView;
			var viewId = view.get_Id().split('-')[1];
			var viewName = view.get_InternalName();
			var entryNumber = currentEntryKey == null ? "" : (currentEntryKey.EntryId.split('-')[1] + (currentEntryKey.Scope ? "." + currentEntryKey.Scope : ""));
			Cognito.Forms.model.currentForm.set_entryDetailsOpen(entryNumber !== "");

			var nav = Cognito.config.navigation;

			var entriesUrl = (viewId && viewId != "0" ? "/" + viewId + "-" + viewName : "") + (entryNumber ? "/" + entryNumber : "") + (query ? "?" + query : "");
			if (!Cognito.config.flags.AppNav)
				entriesUrl = "/entries" + entriesUrl;
			else if (!Cognito.config.hasPaidPlan)
				entriesUrl = '/entries';

			var orgCode = "/" + Cognito.config.lowerOrganizationCode + "/";
			nav.url = orgCode + formName + entriesUrl;
			nav.primary[0].url = orgCode + formName + "/build";
			nav.primary[0].title = form.get_Name();
			for (var p = 0; p < nav.secondary.length; p++)
				nav.secondary[p].url = orgCode + formName + nav.secondary[p].url.substr(nav.secondary[p].url.lastIndexOf('/'));

			Cognito.Messaging.trigger({ event: "navigate", data: nav });
		}

		Cognito.Forms.generateTokens = function () {
			var tokens = [];

			Cognito.Forms.model.fieldInfos.forEach(function (f) {
				if (f.FieldType) {
					var fieldType = f.FieldType;
					if (fieldType !== "Signature" && fieldType !== "File") {
						var hierarchyLevel = f.Path.split('.').length - 1;
						var indentation = "";
						for (var i = 0; i < hierarchyLevel; i++)
							indentation += "    ";

						var internalName = f.Path;

						if (fieldType === "RatingScale" || fieldType === "Entity" || fieldType === "EntityList") {
							internalName = "";
						}

						var isProtected = f.IsProtected;
						if (f.Scope !== 'Entry') { // Entry tokens are added at the end of this function
							tokens.push({
								Name: f.Name,
								InternalName: internalName,
								Path: indentation + f.Name,
								FieldType: fieldType,
								IsProtected: isProtected,
								FieldPath: f.Path
							});
						}

						var path = internalName + ".";

						if (fieldType === "Name") {
							indentation += "    ";

							if (f.Format.indexOf("Prefix") > -1)
								tokens.push({ Name: "Title", InternalName: path + "Prefix", FieldPath: path + "Prefix", Path: indentation + "Title", FieldType: null, IsProtected: isProtected });

							if (f.Format.indexOf("First") > -1)
								tokens.push({ Name: "First", InternalName: path + "First", FieldPath: path + "First", Path: indentation + "First", FieldType: null, IsProtected: isProtected });

							if (f.Format.indexOf("MiddleInitial") > -1)
								tokens.push({ Name: "Middle Initial", InternalName: path + "MiddleInitial", FieldPath: path + "MiddleInitial", Path: indentation + "Middle Initial", FieldType: null, IsProtected: isProtected });

							if (f.Format.indexOf("Middle") > -1)
								tokens.push({ Name: "Middle Name", InternalName: path + "Middle", FieldPath: path + "Middle", Path: indentation + "Middle Name", FieldType: null, IsProtected: isProtected });

							if (f.Format.indexOf("Last") > -1)
								tokens.push({ Name: "Last", InternalName: path + "Last", FieldPath: path + "Last", Path: indentation + "Last", FieldType: null, IsProtected: isProtected });

							if (f.Format.indexOf("Suffix") > -1)
								tokens.push({ Name: "Suffix", InternalName: path + "Suffix", FieldPath: path + "Suffix", Path: indentation + "Suffix", FieldType: null, IsProtected: isProtected });
						}
						else if (fieldType === "Address") {
							indentation += "    ";

							tokens.push({ Name: "Line 1", InternalName: path + "Line1", FieldPath: path + "Line1", Path: indentation + "Line 1", FieldType: null, IsProtected: isProtected });
							tokens.push({ Name: "Line 2", InternalName: path + "Line2", FieldPath: path + "Line2", Path: indentation + "Line 2", FieldType: null, IsProtected: isProtected });
							tokens.push({ Name: "City", InternalName: path + "City", FieldPath: path + "City", Path: indentation + "City", FieldType: null, IsProtected: isProtected });
							tokens.push({ Name: "State", InternalName: path + "State", FieldPath: path + "State", Path: indentation + "State", FieldType: null, IsProtected: isProtected });

							if (f.FieldSubType === "InternationalAddress")
								tokens.push({ Name: "Postal Code", InternalName: path + "PostalCode", FieldPath: path + "PostalCode", Path: indentation + "Postal Code", FieldType: null, IsProtected: isProtected });
							else
								tokens.push({ Name: "Zip Code", InternalName: path + "PostalCode", FieldPath: path + "PostalCode", Path: indentation + "Zip Code", FieldType: null, IsProtected: isProtected });

							if (f.FieldSubType === "InternationalAddress")
								tokens.push({ Name: "Country", InternalName: path + "Country", FieldPath: path + "Country", Path: indentation + "Country", FieldType: null, IsProtected: isProtected });
						}
					}
				}
			});

			tokens.push({ Name: "Entry", InternalName: "", FieldPath: "Entry", Path: "Entry", FieldType: null });
			tokens.push({ Name: "Number", InternalName: "Entry.Number", FieldPath: "Entry.Number", Path: "    Number", FieldType: null });
			tokens.push({ Name: "Status", InternalName: "Entry.Status", FieldPath: "Entry.Status", Path: "    Status", FieldType: null });
			tokens.push({ Name: "Date Created", InternalName: "Entry.DateCreated", FieldPath: "Entry.DateCreated", Path: "    Date Created", FieldType: null });
			tokens.push({ Name: "Date Submitted", InternalName: "Entry.DateSubmitted", FieldPath: "Entry.DateSubmitted", Path: "    Date Submitted", FieldType: null });
			tokens.push({ Name: "Date Updated", InternalName: "Entry.DateUpdated", FieldPath: "Entry.DateUpdated", Path: "    Date Updated", FieldType: null });

			if (Cognito.Forms.model.currentForm && Cognito.Forms.model.currentForm.get_PaymentEnabled())
				tokens.push({ Name: "Order Id", InternalName: "Entry.Order.Id", FieldPath: "Entry.Order.Id", Path: "    Order Id", FieldType: null });

			return tokens;
		};

		// Refreshes the set of available columns on the column menu
		function refreshColumnMenu() {
			var availableColumns = Cognito.Forms.model.currentView.get_Columns().slice();
			var scope = Cognito.Forms.model.currentView.get_scopeId();
			availableColumns.addRange(Cognito.Forms.model.fieldInfos
				.filter(function (field) { return field.Id != "Entry.Number" && scope.startsWith(field.ScopeId || "") && field.FieldType !== "Entity" && field.FieldType !== "EntityList" && field.FieldType !== "RatingScale" && !availableColumns.some(function (column) { return column.get_FieldId() == field.Id; }); })
				.map(function (field) { return new Cognito.Forms.EntryViewColumn({ FieldId: field.Id, Width: field.Width }); }));
			Cognito.Forms.model.currentView.set_availableColumns(availableColumns);
			var columnList = $(".c-view-columns");
			columnList[0].control.set_data(columnList[0].control.get_parent().get_data().get_options());
			columnList[0].control.refresh();
			var instance = columnList.sortable("instance");
			if (instance)
				columnList.sortable("destroy");
			columnList.sortable().bind('sortupdate', function () {
				controller.changeColumns($(".c-view-columns input:checkbox:checked").map(function () { return $parentContextData(this).get_rawValue(); }).toArray());
			});
			showMenu($(".c-columns"));
		}

		function parseQueryString(location) {
			var qs;
			if (Object.prototype.toString.call(location) === "[object Location]") {
				qs = location.search ? location.search.substring(1) : "";
			} else {
				var url = typeof location === "string" ? location : location ? location.toString() : "";
				var qsIdx = url.indexOf('?');
				qs = qsIdx >= 0 ? url.substring(qsIdx + 1) : "";
			}

			var qsObj = {};

			if (qs) {
				qs.split('&').map(function (qsToken) {
					var splitIdx = qsToken.indexOf('=');
					var tokenName, tokenValue;
					if (splitIdx > 0) {
						tokenName = qsToken.substring(0, splitIdx);
						tokenValue = qsToken.substring(splitIdx + 1);
					} else if (splitIdx === qsToken.length - 1) {
						tokenName = qsToken.substring(0, splitIdx);
						tokenValue = "";
					} else {
						tokenName = qsToken;
					}

					qsObj[tokenName] = tokenValue;
				});
			}

			return qsObj;
		}

		function getForm(id) {
			var form = Cognito.Forms.model.currentForm;
			if (form.get_Id() === id)
				return form;
			return form.meta.type.known().filter(function (f) { return f.get_Id() === id; })[0];
		}

		function getEntryViewRole(form, view) {
			if (arguments.length < 2)
				view = Cognito.Forms.model.currentView;

			if (arguments.length === 0)
				form = Cognito.Forms.model.currentForm;

			var role;

			// If this entry view's role is defined, try to find it
			if (view.get_RoleId() !== null) {
				role = form.get_Roles().filter(function (r) {
					return r.get_Id() === view.get_RoleId();
				})[0];

				// If cannot find role on form, check formData as well
				if (role === undefined) {
					role = formData.value.Roles.find(function (r) {
						return r.Id === view.get_RoleId();
					});
				}
			}

			// If the role was undefined or the role wasn't found, default to the internal role
			if (role === undefined) {
				role = form.get_Roles().filter(function (r) {
					return r.get_IsInternal();
				})[0];

				view.set_RoleId(role.get_Id());
				controller.saveView(view);
			}
			return role;
		}

		function getSummaryProperty() {
			var view = Cognito.Forms.model.currentView;
			var columns = view.get_Columns();
			if (columns.length === 0)
				return null;

			for (var i = 0; i < columns.length; i++) {
				var column = columns[i];
				var isField = $.isNumeric(column.get_FieldId().split(".").pop());
				if (!isField)
					continue;

				var fieldInfo = Cognito.Forms.model.fieldInfos.filter(function (fieldInfo) {
					return fieldInfo.Id === column.get_FieldId();
				})[0];

				if (!fieldInfo)
					continue;

				var propertyType = fieldInfo.PropertyType;

				// Accepted property types that don't have a valid format set
				var acceptedTypes = ["String", "Number", "Choice", "YesNo", "Date", "FormEntry", "Time"];

				if (fieldInfo.Format !== null || acceptedTypes.indexOf(propertyType) > -1)
					return fieldInfo.Path;

			}
			return null;
		}

		// #endregion

		//#region Initialize Entries

		Cognito.ready("init-entries", ["entries", "ExoWeb.dom", "Views.Admin.entries.htm", "expression-builder.htm", "admin-component-library", "admin-form-api"], function ($) {

			if (window.matchMedia) {
				var phoneMode = window.matchMedia("(max-width: 400px)");
				if (phoneMode.matches)
					layoutMode = "phone";
				var tabletMode = window.matchMedia("(min-width: 401px) and (max-width: 739px)");
				if (tabletMode.matches)
					layoutMode = "tablet";
				var desktopMode = window.matchMedia("(min-width: 740px)");
				if (desktopMode.matches)
					layoutMode = "desktop";

				phoneMode.addListener(function () { if (phoneMode.matches) controller.changeLayout("phone"); });
				tabletMode.addListener(function () { if (tabletMode.matches) controller.changeLayout("tablet"); });
				desktopMode.addListener(function () { if (desktopMode.matches) controller.changeLayout("desktop"); });
			}

			// Load views from the server when the page loads
			controller.initViews();

			// Store the view data so it can be rolled back if needed. Stringify and parse the data to ensure arrays are copied.
			previousViewData = JSON.parse(JSON.stringify(Cognito.serialize(Cognito.Forms.model.currentView)));

			initializeEventHandlers();
		});

		Cognito.ready("init-layout", ["init-entries", "master", "detail"], function ($) {
			// Update the layout mode
			controller.changeLayout(layoutMode);

			controller.detail.changeView(Cognito.Forms.model.currentView);

			onCreateNewEntry(() => {
				executeAction(() => controller.newEntry());
			});

			if (Cognito.Forms.model.defaultEntry)
				controller.viewEntry(Cognito.Forms.model.defaultEntry);
			else if (showNewEntry.value)
				executeAction(() => controller.newEntry());
			else {
				var query = "";

				// Extract any query string arguments that we want to keep...
				var qsObj = parseQueryString(window.location);
				if (qsObj.hasOwnProperty('import')) {
					query = "import=" + qsObj.import;
					updateNavigation(null, query);
				}

			}

			if (Cognito.Forms.model.importId && Cognito.config.allowImportEntries)
				displayImportEntriesDialog(Cognito.Forms.model.importId, function () {
					if (Cognito.config.entryLimitExceeded === true) {
						// Delay for a moment to allow the currently closing dialog to clean-up
						setTimeout(function () {
							controller.showFeatureWarning("entrylimits");
						}, 100);
					}
				});
			else if (Cognito.Forms.model.importId && !Cognito.config.allowImportEntries)
				controller.showFeatureWarning("entrylimits");
			else if (Cognito.Forms.model.bulkDownloadId)
				displayBulkDownloadDialog(Cognito.Forms.model.downloadType, null, Cognito.Forms.model.bulkDownloadId);
			else if (Cognito.config.formEntryExportId)
				controller.openEntryExportDialog(Cognito.config.formEntryExportId, "Successful", null, null);

			// Apply entry view changes that happened before the grid loaded
			if (tempFilter)
				controller.changeFilter(tempFilter);

			if (tempSort)
				controller.changeSort(tempSort);

			if (tempColumns)
				controller.changeColumns(tempColumns);
		});

		// #endregion

		//#region jQuery Event Handlers

		function initializeEventHandlers() {

			$(document.documentElement)

				// Select Column
				.on("change", ".c-view-columns input", function (event) {
					controller.changeColumns($(".c-view-columns input:checkbox:checked").map(function () { return $parentContextData(this).get_rawValue(); }).toArray());
				})

				// Add Sort Column
				.on("click", ".c-criteria-col.c-add", function (event) {
					Cognito.Forms.model.sortBy.add(new Cognito.Forms.EntryViewSort({ Ascending: true }));
					showMenu($(".c-sort"));
				})

				// Delete Sort Column
				.on("click", ".c-criteria-col.c-delete", function (event) {
					Cognito.Forms.model.sortBy.remove($parentContextData(this));
					showMenu($(".c-sort"));
				})

				// Apply Sort
				.on("click", ".c-sort .c-nav-menu-buttons button", function (event) {
					controller.changeSort(Cognito.Forms.model.sortBy.filter(function (c) { return !!c.get_field(); }));
					controller.hideMenus();
				})

				// Clear Sort
				.on("click", ".c-sort .c-nav-menu-buttons a", function (event) {
					controller.changeSort([]);
					controller.hideMenus();
				})

				// Apply Filter
				.on("click", ".c-filter .c-nav-menu-buttons button", function (event) {
					executeAction(function () {
						controller.changeFilter(Cognito.Forms.model.filter);
						controller.hideMenus();
					});
				})

				// Advanced Filter
				.on("click", ".c-filter-advanced", function (event) {
					advancedFilter();
				})

				// Clear Filter
				.on("click", ".c-filter .c-nav-menu-buttons a", function (event) {
					executeAction(function () {
						controller.changeFilter(new Cognito.Forms.EntryViewFilter({ ScopeId: Cognito.Forms.model.filter.get_ScopeId() }));
						controller.hideMenus();
					});
				})

				// Filter on "Enter" key
				.on("keyup", ".c-filter-keyword", function (event) {
					if (event.keyCode == 13) {
						var keyword = this.value;
						executeAction(function () {
							// In IE11, the lost focus (binding) event is not being handled in time
							Cognito.Forms.model.filter.set_Keyword(keyword);
							controller.changeFilter(Cognito.Forms.model.filter);
							controller.hideMenus();
						});
					}
				})

				// New View
				.on("click", ".c-new-view", function (event) {
					executeAction(function () {
						controller.newView();
					});
				})

				// Save Entry View
				.on("click", ".c-save-view", function (event) {
					if ($(".c-save-view .c-nav-disabled").length == 0)
						controller.saveView(Cognito.Forms.model.currentView);
				})

				// Save Entry View As
				.on("click", ".c-save-view-as", function (event) {
					controller.saveViewAs();
				})

				// New Entry
				.on("click", ".c-new-entry", function (event) {
					executeAction(function () {
						controller.newEntry();
					});
				})

				// Change Status
				.on("click", ".c-nav-menu-content .c-nav-menu .c-action-change-status", function (event) {
					if (selectedEntries.length > 0) {
						executeAction(function () {
							controller.hideMenus();
							controller.updateEntryStatus(selectedEntries, $(this).text().trim(), null, $(this).attr("status-id"));
						}, this);
					}
				})

				// Change Read State
				.on("click", ".c-nav-menu-content .c-nav-menu .c-action-change-read-state", function (event) {
					if (selectedEntries.length > 0) {
						executeAction(function () {
							var read = $(this).text().trim() === "Read";
							controller.hideMenus();
							controller.updateGridReadState(selectedEntries, read);
						}, this);
					}
				})

				// Delete Entries
				.on("click", ".c-action-delete-entries", function (event) {
					if (selectedEntries.length > 0) {
						executeAction(function () {
							controller.hideMenus();
							controller.deleteEntries(selectedEntries);
						});
					}
				})

				// Import Entries
				.on("click", ".c-action-import-entries", function (event) {
					executeAction(function () {
						controller.hideMenus();
						controller.importEntries();
					}, this);
				})

				// Change View
				.on("click", ".c-menu-current-view .c-nav-menu .c-nav-button", function (event) {
					// Id check excludes the "New View" selection
					var id = $(this).attr("id");
					if (id) {

						if (!$(this).hasClass("c-view-enabled")) {
							controller.showFeatureWarning("entryviewsexist");
							return;
						}

						Cognito.Forms.onChangeView(id);
					}
				})

				// Delete View
				.on("click", ".c-view-delete-view", function (event) {
					executeAction(function () {
						//event.stopPropagation();
						controller.deleteView();
						controller.hideMenus();
					});
				})

				// Copy View
				.on("click", ".c-view-copy-view", function (event) {
					executeAction(function () {
						//event.stopPropagation();
						controller.copyView();
					});
				})

				// Rename View
				.on("click", ".c-view-rename", function (event) {
					event.stopPropagation();
					controller.showRenameView();
				})

				// Cancel Rename
				.on("keydown", ".c-rename-view input:text", function (event) {
					if (event.keyCode == 27 || event.keyCode == 9 || event.keyCode == 13) {
						event.stopPropagation();
						controller.hideMenus();

						// Rollback changes
						if (event.keyCode == 27)
							$(this).val(Cognito.Forms.model.currentView.get_Name());
					}
				});

			// Prevent default context menu from opening on top of the Actions submenu
			window.addEventListener('contextmenu', function (event) {
				if (event.target.matches(".entry-view-actions__menu, .entry-view-actions__menu *")) {
					event.preventDefault();
					event.stopPropagation();
				}
			});

			//#region Panel resizing
			(function () {
				if (Cognito.config.flags.AppNav)
					return;

				var $container = $(".c-entries"),
					$left = $("#c-entrylist"),
					$right = $("#c-entrydetails");

				// Variables used during each resize operation
				var _startX = 0,
					_startWidth,
					_containerPixelWidth,
					_maxWidthPct,
					_minWidthPct;

				function parsePercentWidth(widthStyle) {
					return Number(widthStyle.split("%")[0]);
				}

				function parsePixelWidth(widthStyle) {
					return Number(widthStyle.split("px")[0]);
				}

				function resizeDragStart(event) {
					requestAnimationFrame(() => {
						_startX = event.clientX;
						_startWidth = $right.width();
						_containerPixelWidth = $container.width();
						_maxWidthPct = Math.floor(parsePixelWidth($right.css("max-width")) / _containerPixelWidth * 100);
						_minWidthPct = Math.ceil(parsePixelWidth($right.css("min-width")) / _containerPixelWidth * 100);

						$container.addClass("c-resizing");

						$(document.documentElement).on("mouseup mouseout", resizeDragEnd);
						$(document.documentElement).on("mousemove", resizeDrag);
					});

					event.stopPropagation();
					event.preventDefault();
				}

				function setWidth(entryPanelWidth) {
					$right.css({ "width": entryPanelWidth + "%" });
					$left.css("width", (100 - entryPanelWidth) + "%");

					if (Cognito.config.flags.AppNav)
						$toolbar.css("width", (100 - entryPanelWidth) + "%");
				}

				function doResize(x, isEnd) {
					// Since we resize from the left edge of the right panel, moving the cursor left represents increase in width
					var pixelDelta = _startX - x;
					var newWidth = Math.max(_minWidthPct, Math.min(_maxWidthPct, 100 * (_startWidth + pixelDelta) / _containerPixelWidth));

					if (newWidth > 90 && isEnd)
						newWidth = Math.min(100, _maxWidthPct);

					// Clamp the width to an integer to prevent inconsistent browser implementation of floating point percent width
					if (isEnd)
						newWidth = Math.floor(newWidth);

					setWidth(newWidth);
				}

				function resizeDrag(event) {
					requestAnimationFrame(() => {
						if (doResize(event.clientX))
							resizeDragEnd(event);
					});
				}

				function resizeDragEnd(event) {
					doResize(event.clientX, true);

					$(document.documentElement).off("mouseup mouseout", resizeDragEnd);
					$(document.documentElement).off("mousemove", resizeDrag);

					$container.addClass("c-custom-size");
					$container.removeClass("c-resizing");
					_isResizing = false;

					event.preventDefault();
					event.stopPropagation();

					controller.savePanelWidth(Number(parsePercentWidth($right[0].style.width)));
				}

				if (!Cognito.config.AppNav)
					$(".c-panel-resizer").on("mousedown", resizeDragStart);

				if (Cognito.config.entryPageSettings.EntryPanelWidth) {
					$container.addClass("c-custom-size");
					setWidth(Cognito.config.entryPageSettings.EntryPanelWidth);
				}

				// Make sure left and right panels fill the space when window is resized
				function windowResized() {
					if ($container.hasClass("c-custom-size")) {
						clearTimeout(Cognito.timers.panelResizing);
						Cognito.timers.panelResizing = setTimeout(function () {
							var actualPctWidth = $right.width() / $container.width() * 100;
							$container.addClass("c-resizing");
							$left.css("width", (100 - actualPctWidth) + "%");
							if (Cognito.config.flags.AppNav)
								$toolbar.css("width", (100 - actualPctWidth) + "%");
							setTimeout(function () { $container.removeClass("c-resizing"); });
						}, 100);
					}
				}
				$(window).resize(windowResized);
				windowResized();
			})();
			//#endregion

		}

		//#endregion

		// #region menu event handlers

		Cognito.Forms.onOpenEntryViewSettings = function onOpenEntryViewSettings() {
			if (!controller.canAccessDestinationView())
				Cognito.Forms.model.currentView.set_AfterSubmitDestinationViewId(null);
			controller.openEntryViewSettings(Cognito.serialize(Cognito.Forms.model.currentView));
		}

		Cognito.Forms.onRenameView = function onRenameView() {
			controller.showRenameView();
		}

		Cognito.Forms.onCopyView = function onCopyView() {
			controller.copyView();
		}

		Cognito.Forms.onDeleteView = function onDeleteView() {
			controller.deleteView();
		}

		Cognito.Messaging.addHandler("changeView", function (viewId) {
			Cognito.Forms.onChangeView(viewId);
		});
		Cognito.Messaging.addHandler("newView", function (type) {
			Cognito.Forms.onNewView(type);
		});
		Cognito.Messaging.addHandler("reorderView", function (viewIdObject) {
			Cognito.Forms.onReorderView(viewIdObject);
		});
		Cognito.Messaging.addHandler("saveView", function (viewObject) {
			let view = viewObject;
			let isOnlyRenaming = false;
			if (viewObject.view) {
				view = viewObject.view;
				isOnlyRenaming = viewObject.isOnlyRenaming;
			}

			view.isUserSpecific = !!view.SharedWithMe;

			// Existing View
			if (view.Id)
				view = Cognito.deserialize(Cognito.Forms.EntryView, view, Cognito.Forms.model.currentView);
			// New View
			else
				view = Cognito.deserialize(Cognito.Forms.EntryView, view);

			controller.saveView(view, isOnlyRenaming);
		});
		Cognito.Messaging.addHandler("deleteView", function (viewIdObject) {
			controller.deleteView(viewIdObject);
		});

		Cognito.Forms.onChangeView = function onChangeView(viewId) {

			if (viewId && viewId != Cognito.Forms.model.currentView.get_Id()) {

				// Individual Plan
				if (!Cognito.config.hasPaidPlan) {
					controller.showFeatureWarning("entryviewsexist");
					return;
				}

				// Loads the specified view and then changes to the new view
				Cognito.Forms.getEntryView(viewId)
					.then(checkForm(function (data) {
						data.view.isUserSpecific = data.isUserSpecific || false;
						var view = Cognito.deserialize(Cognito.Forms.EntryView, data.view);

						executeAction(function () {
							document.getElementById('grid').classList.add('c-hide-entries-grid');
							controller.changeView(view, layoutMode);
							controller.hideMenus();
						});
					}));
			}
		}

		Cognito.Forms.onNewView = function onNewView(type) {

			// Individual Plan
			if (!Cognito.config.hasPaidPlan) {
				controller.showFeatureWarning("entryviews");
				return;
			}

			// Enforce Entry View Limit
			if (Cognito.Forms.model.views.length >= Cognito.config.entryViewLimit) {
				showViewLimitExceededWarning();
				return;
			}

			const isTaskView = type === 'Task';
			if (isTaskView) {
				type = 'Table';
			}

			// Create the new view
			var form = Cognito.Forms.model.currentForm;
			var view =
			{
				Name: 'New View',
				Form: { Id: form.get_Id() },
				RoleId: formData.value.Roles.find(function (r) { return r.IsInternal; }).Id,
				Type: type,
				Columns: [
					{ FieldId: "Entry.Status", Width: 100 },
					{ FieldId: "Entry.DateSubmitted", Width: 140 }
				],
				PreventEntryCreation: isTaskView ? true : false,
				ShowPageBreaks: true
			};

			// Add order summary for payment forms
			if (form.PaymentEnabled)
				view.Columns.push({ FieldId: "Order.OrderSummary", Width: 120 });

			// Include all fields
			view.AllFields = true;
			if (type == "Form")
				onOverrideFormEntryCreation(false);
			else
				onOverrideFormEntryCreation(true);

			//inititialze SharedWithMe
			if (Cognito.config.flags.UserSpecificViews) {
				view.SharedWithMe = isTaskView;
				view.IsTaskView = isTaskView;
			}

			// Create New View
			controller.openEntryViewSettings(view, true);
		}

		// Reorders the specified view and refreshes to ensure views appear in the correct order
		Cognito.Forms.onReorderView = function onReorderView(e) {
			Cognito.Forms.reorderEntryView(e.viewId, e.afterViewId)
				.then(Cognito.Forms.refreshViews)
		}

		// Refreshed the list of views for the form
		Cognito.Forms.refreshViews = function refreshViews() {
			return Cognito.Forms.getEntryViews(Cognito.Forms.model.currentForm.get_Id())
				.then(function (views) {
					ExoWeb.Observer.setValue(Cognito.Forms.model, "views", views);
					var refetchGrid = Cognito.Forms.model.views.find(function (v) { return v.Id === Cognito.Forms.model.currentView.get_Id() && v.Entries != (currentViewEntryCount.value || 0); });
					if (refetchGrid && controller.master)
						controller.master.refreshEntries();
					return views;
				}).catch(function (response) {
					// If a user loses access to the entries page set all views to 0 and refresh the grid
					if (Cognito.config.flags.UserSpecificViews && response.status == 403) {
						var refetchGrid = false;
						Cognito.Forms.model.views.forEach(function (v) {
							if (v.Entries) {
								v.Entries = 0;
								refetchGrid = true;
							}
						});
						if (refetchGrid)
							controller.master.refreshEntries();
					}
					return response;
				});
		}

		Cognito.Forms.getRoleOptions = function getRoleOptions() {
			return Cognito.serialize(Cognito.Forms.model.currentForm.get_Roles());
		}

		Cognito.Forms.onRoleChanged = function onRoleChanged(e) {
			executeAction(function () {
				Cognito.Forms.model.currentView.set_RoleId(e.Id);
				controller.viewChanged();
				controller.detail.setRole(e.Name);
			});
		}

		Cognito.Forms.onDelete = function onDelete(e) {
			if (selectedEntries.length)
				controller.deleteEntries(selectedEntries);
		}

		onExportEntries((exportData) => {
			const [ exportAllFields, selectedEntries ] = exportData;
			Cognito.Forms.onExport(exportAllFields, selectedEntries);
		});

		Cognito.Forms.onExport = function onExport(exportAllFields, selectedEntries) {
			controller.exportEntries(exportAllFields, selectedEntries);
		}

		Cognito.Forms.onReadStateChange = function onReadStateChange(read) {
			if (selectedEntries.length)
				controller.updateGridReadState(selectedEntries, read);
		}

		Cognito.Forms.onImport = function onImport(e) {
			controller.importEntries();
		}

		Cognito.Forms.onStatusChange = function onStatusChange(status) {
			if (selectedEntries.length)
				controller.updateEntryStatus(selectedEntries, status.Name, null, status.Id);
		}

		Cognito.Forms.onBulkFileDownload = function onBulkFileDownload() {
			if (Cognito.config.allowBulkFileDownload) {
				displayBulkDownloadDialog("File");
			}
			else
				displayBulkFileDownloadUpsellDialog();
		}

		Cognito.Forms.onBulkDocumentDownload = function onBulkDocumentDownload(documentTemplateId) {
			if (Cognito.config.allowBulkDocumentDownload) {
				displayBulkDownloadDialog("Document", documentTemplateId);
			}
			else
				displayBulkDocumentDownloadUpsellDialog();
		}

		onPerformBulkAction((action) => {
			Cognito.Forms.onBulkAction(action);
		});

		Cognito.Forms.onBulkAction = function onBulkAction(action) {
			if (Cognito.config.allowBulkActions)
				displayBulkActionDialog(action);
			else
				controller.showFeatureWarning('bulkactions');
		}

		//#endregion

		// #region Utility
		Cognito.Forms.onFormViewAdapterReady = function onFormViewAdapterReady(formViewAdapter) {
			if (!window.Cognito)
				return;

			Cognito.formViewAdapter = formViewAdapter;

			if (Cognito.Forms.model.currentView.get_Type().get_Name() === 'Form' && !Cognito.formViewAdapter.hasChangeHandler() && Cognito.formViewAdapter.isFormAvailable())
				Cognito.formViewAdapter.addChangesDetected(onEntryChanged)
			Cognito.ready("formViewAdapter");
		}

		Cognito.Forms.onFormViewMounted = function onFormViewMounted(formViewAdapter) {
			Cognito.Forms.onFormViewAdapterReady(formViewAdapter);

			const roleId = Cognito.Forms.model.currentView.get_RoleId();
			const role = Cognito.Forms.model.currentForm.get_Roles().find(function (r) { return r.get_Id() === roleId; });
			const isPublic = role.get_IsPublic();

			// Register the view now that we've remounted the form and previous view data in the form handle is gone
			formViewAdapter.changeView(Cognito.Forms.model.currentView.get_Id(), Cognito.Forms.model.currentView.get_Token());
			formViewAdapter.setCorrectFormAvailability(isPublic);
		}

		Cognito.Forms.beforeFormViewSubmit = function beforeFormViewSubmit() {
			const isRedirectingToEntryView = !!Cognito.Forms.model.currentView.get_AfterSubmitDestinationViewId();
			Cognito.formViewAdapter.setRedirectingToView(isRedirectingToEntryView);
		}

		Cognito.Forms.onFormViewSubmitted = function onFormViewSubmitted() {

			const destinationId = Cognito.Forms.model.currentView.get_AfterSubmitDestinationViewId();

			if (!!destinationId)
				Cognito.Forms.switchToDestinationView(destinationId)
			else
				onOverrideFormEntryCreation(true);
		}

		Cognito.Forms.setEntryNoChanges = function setEntryNoChanges() {
			entryHasChanges = false;
		}

		Cognito.Forms.switchToDestinationView = function switchToDestinationView(viewId) {
			return Cognito.Forms.refreshViews().then(function () {
				var viewIsAccessible = controller.canAccessDestinationView();

				if (viewIsAccessible) {
					Cognito.formViewAdapter.showConfirmationMessage();
					Cognito.Forms.onChangeView(viewId);
				}
				else {
					Cognito.formViewAdapter.showConfirmationPage();

					// Need to show new entry button since we're unexpectedly going to the confirmation page
					onOverrideFormEntryCreation(true);
				}
			});
		}

		function onEntryChanged(event) {
			if (entryHasChanges || event.oldValue == event.newValue)
				return;

			if (Cognito.Forms.onEntryChanged(event))
				controller.entryChanged();
		}

		//#endregion

		function isEntryDetailsVisible() {
			return document.querySelector(".c-entries").hasAttribute("data-show-entry-detail");
		}

		function showEntryDetails() {
			document.querySelector(".c-entries").setAttribute("data-show-entry-detail", "");
			// Need this attribute at a higher level to avoid CSS :has selector.
			// Lower-level one left in place to avoid breaking things.
			document.querySelector(".entries-page").setAttribute("data-has-entry-detail", "");
			setEntryDetailsIsOpen(true);
		}
		function hideEntryDetails() {
			document.querySelector(".c-entries").removeAttribute("data-show-entry-detail");
			document.querySelector(".entries-page").removeAttribute("data-has-entry-detail");
			setEntryDetailsIsOpen(false);
		}
	});
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,