(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["Upload"],{

/***/ "../../libs/element-ui/lib/mixins/locale.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var _locale = __webpack_require__("../../libs/element-ui/lib/locale/index.js");
var _default = exports.default = {
  methods: {
    t() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _locale.t.apply(this, args);
    }
  }
};

/***/ }),

/***/ "../../libs/element-ui/lib/progress.js":
/***/ (function(module, exports) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 98);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 98:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/progress/src/progress.vue?vue&type=template&id=46d753c9
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "div",
    {
      staticClass: "el-progress",
      class: [
        "el-progress--" + _vm.type,
        _vm.status ? "is-" + _vm.status : "",
        {
          "el-progress--without-text": !_vm.showText,
          "el-progress--text-inside": _vm.textInside
        }
      ],
      attrs: {
        role: "progressbar",
        "aria-valuenow": _vm.percentage,
        "aria-valuemin": "0",
        "aria-valuemax": "100"
      }
    },
    [
      _vm.type === "line"
        ? _c("div", { staticClass: "el-progress-bar" }, [
            _c(
              "div",
              {
                staticClass: "el-progress-bar__outer",
                style: { height: _vm.strokeWidth + "px" }
              },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-progress-bar__inner",
                    style: _vm.barStyle
                  },
                  [
                    _vm.showText && _vm.textInside
                      ? _c(
                          "div",
                          { staticClass: "el-progress-bar__innerText" },
                          [_vm._v(_vm._s(_vm.content))]
                        )
                      : _vm._e()
                  ]
                )
              ]
            )
          ])
        : _c(
            "div",
            {
              staticClass: "el-progress-circle",
              style: { height: _vm.width + "px", width: _vm.width + "px" }
            },
            [
              _c("svg", { attrs: { viewBox: "0 0 100 100" } }, [
                _c("path", {
                  staticClass: "el-progress-circle__track",
                  style: _vm.trailPathStyle,
                  attrs: {
                    d: _vm.trackPath,
                    stroke: "#e5e9f2",
                    "stroke-width": _vm.relativeStrokeWidth,
                    fill: "none"
                  }
                }),
                _c("path", {
                  staticClass: "el-progress-circle__path",
                  style: _vm.circlePathStyle,
                  attrs: {
                    d: _vm.trackPath,
                    stroke: _vm.stroke,
                    fill: "none",
                    "stroke-linecap": _vm.strokeLinecap,
                    "stroke-width": _vm.percentage ? _vm.relativeStrokeWidth : 0
                  }
                })
              ])
            ]
          ),
      _vm.showText && !_vm.textInside
        ? _c(
            "div",
            {
              staticClass: "el-progress__text",
              style: { fontSize: _vm.progressTextSize + "px" }
            },
            [
              !_vm.status
                ? [_vm._v(_vm._s(_vm.content))]
                : _c("i", { class: _vm.iconClass })
            ],
            2
          )
        : _vm._e()
    ]
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/progress/src/progress.vue?vue&type=template&id=46d753c9

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/progress/src/progress.vue?vue&type=script&lang=js
/* harmony default export */ var progressvue_type_script_lang_js = ({
  name: 'ElProgress',
  props: {
    type: {
      type: String,
      default: 'line',
      validator: val => ['line', 'circle', 'dashboard'].indexOf(val) > -1
    },
    percentage: {
      type: Number,
      default: 0,
      required: true,
      validator: val => val >= 0 && val <= 100
    },
    status: {
      type: String,
      validator: val => ['success', 'exception', 'warning'].indexOf(val) > -1
    },
    strokeWidth: {
      type: Number,
      default: 6
    },
    strokeLinecap: {
      type: String,
      default: 'round'
    },
    textInside: {
      type: Boolean,
      default: false
    },
    width: {
      type: Number,
      default: 126
    },
    showText: {
      type: Boolean,
      default: true
    },
    color: {
      type: [String, Array, Function],
      default: ''
    },
    format: Function
  },
  computed: {
    barStyle() {
      const style = {};
      style.width = this.percentage + '%';
      style.backgroundColor = this.getCurrentColor(this.percentage);
      return style;
    },
    relativeStrokeWidth() {
      return (this.strokeWidth / this.width * 100).toFixed(1);
    },
    radius() {
      if (this.type === 'circle' || this.type === 'dashboard') {
        return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);
      } else {
        return 0;
      }
    },
    trackPath() {
      const radius = this.radius;
      const isDashboard = this.type === 'dashboard';
      return `
          M 50 50
          m 0 ${isDashboard ? '' : '-'}${radius}
          a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '-' : ''}${radius * 2}
          a ${radius} ${radius} 0 1 1 0 ${isDashboard ? '' : '-'}${radius * 2}
          `;
    },
    perimeter() {
      return 2 * Math.PI * this.radius;
    },
    rate() {
      return this.type === 'dashboard' ? 0.75 : 1;
    },
    strokeDashoffset() {
      const offset = -1 * this.perimeter * (1 - this.rate) / 2;
      return `${offset}px`;
    },
    trailPathStyle() {
      return {
        strokeDasharray: `${this.perimeter * this.rate}px, ${this.perimeter}px`,
        strokeDashoffset: this.strokeDashoffset
      };
    },
    circlePathStyle() {
      return {
        strokeDasharray: `${this.perimeter * this.rate * (this.percentage / 100)}px, ${this.perimeter}px`,
        strokeDashoffset: this.strokeDashoffset,
        transition: 'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease'
      };
    },
    stroke() {
      let ret;
      if (this.color) {
        ret = this.getCurrentColor(this.percentage);
      } else {
        switch (this.status) {
          case 'success':
            ret = '#13ce66';
            break;
          case 'exception':
            ret = '#ff4949';
            break;
          case 'warning':
            ret = '#e6a23c';
            break;
          default:
            ret = '#20a0ff';
        }
      }
      return ret;
    },
    iconClass() {
      if (this.status === 'warning') {
        return 'el-icon-warning';
      }
      if (this.type === 'line') {
        return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-close';
      } else {
        return this.status === 'success' ? 'el-icon-check' : 'el-icon-close';
      }
    },
    progressTextSize() {
      return this.type === 'line' ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;
    },
    content() {
      if (typeof this.format === 'function') {
        return this.format(this.percentage) || '';
      } else {
        return `${this.percentage}%`;
      }
    }
  },
  methods: {
    getCurrentColor(percentage) {
      if (typeof this.color === 'function') {
        return this.color(percentage);
      } else if (typeof this.color === 'string') {
        return this.color;
      } else {
        return this.getLevelColor(percentage);
      }
    },
    getLevelColor(percentage) {
      const colorArray = this.getColorArray().sort((a, b) => a.percentage - b.percentage);
      for (let i = 0; i < colorArray.length; i++) {
        if (colorArray[i].percentage > percentage) {
          return colorArray[i].color;
        }
      }
      return colorArray[colorArray.length - 1].color;
    },
    getColorArray() {
      const color = this.color;
      const span = 100 / color.length;
      return color.map((seriesColor, index) => {
        if (typeof seriesColor === 'string') {
          return {
            color: seriesColor,
            progress: (index + 1) * span
          };
        }
        return seriesColor;
      });
    }
  }
});
// CONCATENATED MODULE: ./packages/progress/src/progress.vue?vue&type=script&lang=js
 /* harmony default export */ var src_progressvue_type_script_lang_js = (progressvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/progress/src/progress.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_progressvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var progress = (component.exports);
// CONCATENATED MODULE: ./packages/progress/index.js


/* istanbul ignore next */
progress.install = function (Vue) {
  Vue.component(progress.name, progress);
};
/* harmony default export */ var packages_progress = __webpack_exports__["default"] = (progress);

/***/ })

/******/ });

/***/ }),

/***/ "../../libs/element-ui/lib/upload.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 58);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent(
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */,
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options =
    typeof scriptExports === 'function' ? scriptExports.options : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
          injectStyles.call(
            this,
            (options.functional ? this.parent : this).$root.$options.shadowRoot
          )
        }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 11:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/migrating.js");

/***/ }),

/***/ 21:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../node_modules/.pnpm/@vue+babel-helper-vue-jsx-merge-props@1.4.0/node_modules/@vue/babel-helper-vue-jsx-merge-props/dist/helper.js");

/***/ }),

/***/ 43:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/progress.js");

/***/ }),

/***/ 58:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "@vue/babel-helper-vue-jsx-merge-props"
var babel_helper_vue_jsx_merge_props_ = __webpack_require__(21);
var babel_helper_vue_jsx_merge_props_default = /*#__PURE__*/__webpack_require__.n(babel_helper_vue_jsx_merge_props_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=template&id=f4120802
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "transition-group",
    {
      class: [
        "el-upload-list",
        "el-upload-list--" + _vm.listType,
        { "is-disabled": _vm.disabled }
      ],
      attrs: { tag: "ul", name: "el-list" }
    },
    _vm._l(_vm.files, function(file) {
      return _c(
        "li",
        {
          key: file.uid,
          class: [
            "el-upload-list__item",
            "is-" + file.status,
            _vm.focusing ? "focusing" : ""
          ],
          attrs: { tabindex: "0" },
          on: {
            keydown: function($event) {
              if (
                !$event.type.indexOf("key") &&
                _vm._k($event.keyCode, "delete", [8, 46], $event.key, [
                  "Backspace",
                  "Delete",
                  "Del"
                ])
              )
                return null
              !_vm.disabled && _vm.$emit("remove", file)
            },
            focus: function($event) {
              _vm.focusing = true
            },
            blur: function($event) {
              _vm.focusing = false
            },
            click: function($event) {
              _vm.focusing = false
            }
          }
        },
        [
          _vm._t(
            "default",
            function() {
              return [
                file.status !== "uploading" &&
                ["picture-card", "picture"].indexOf(_vm.listType) > -1
                  ? _c("img", {
                      staticClass: "el-upload-list__item-thumbnail",
                      attrs: { src: file.url, alt: "" }
                    })
                  : _vm._e(),
                _c(
                  "a",
                  {
                    staticClass: "el-upload-list__item-name",
                    on: {
                      click: function($event) {
                        return _vm.handleClick(file)
                      }
                    }
                  },
                  [
                    _c("i", { staticClass: "el-icon-document" }),
                    _vm._v(_vm._s(file.name) + "\n      ")
                  ]
                ),
                _c(
                  "label",
                  { staticClass: "el-upload-list__item-status-label" },
                  [
                    _c("i", {
                      class: {
                        "el-icon-upload-success": true,
                        "el-icon-circle-check": _vm.listType === "text",
                        "el-icon-check":
                          ["picture-card", "picture"].indexOf(_vm.listType) > -1
                      }
                    })
                  ]
                ),
                !_vm.disabled
                  ? _c("i", {
                      staticClass: "el-icon-close",
                      on: {
                        click: function($event) {
                          return _vm.$emit("remove", file)
                        }
                      }
                    })
                  : _vm._e(),
                !_vm.disabled
                  ? _c("i", { staticClass: "el-icon-close-tip" }, [
                      _vm._v(_vm._s(_vm.t("el.upload.deleteTip")))
                    ])
                  : _vm._e(),
                file.status === "uploading"
                  ? _c("el-progress", {
                      attrs: {
                        type:
                          _vm.listType === "picture-card" ? "circle" : "line",
                        "stroke-width": _vm.listType === "picture-card" ? 6 : 2,
                        percentage: _vm.parsePercentage(file.percentage)
                      }
                    })
                  : _vm._e(),
                _vm.listType === "picture-card"
                  ? _c(
                      "span",
                      { staticClass: "el-upload-list__item-actions" },
                      [
                        _vm.handlePreview && _vm.listType === "picture-card"
                          ? _c(
                              "span",
                              {
                                staticClass: "el-upload-list__item-preview",
                                on: {
                                  click: function($event) {
                                    return _vm.handlePreview(file)
                                  }
                                }
                              },
                              [_c("i", { staticClass: "el-icon-zoom-in" })]
                            )
                          : _vm._e(),
                        !_vm.disabled
                          ? _c(
                              "span",
                              {
                                staticClass: "el-upload-list__item-delete",
                                on: {
                                  click: function($event) {
                                    return _vm.$emit("remove", file)
                                  }
                                }
                              },
                              [_c("i", { staticClass: "el-icon-delete" })]
                            )
                          : _vm._e()
                      ]
                    )
                  : _vm._e()
              ]
            },
            { file: file }
          )
        ],
        2
      )
    }),
    0
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=template&id=f4120802

// EXTERNAL MODULE: external "./mixins/locale"
var locale_ = __webpack_require__(7);
var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);

// EXTERNAL MODULE: external "./progress"
var external_progress_ = __webpack_require__(43);
var external_progress_default = /*#__PURE__*/__webpack_require__.n(external_progress_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=script&lang=js


/* harmony default export */ var upload_listvue_type_script_lang_js = ({
  name: 'ElUploadList',
  mixins: [locale_default.a],
  data() {
    return {
      focusing: false
    };
  },
  components: {
    ElProgress: external_progress_default.a
  },
  props: {
    files: {
      type: Array,
      default() {
        return [];
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    handlePreview: Function,
    listType: String
  },
  methods: {
    parsePercentage(val) {
      return parseInt(val, 10);
    },
    handleClick(file) {
      this.handlePreview && this.handlePreview(file);
    }
  }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=script&lang=js
 /* harmony default export */ var src_upload_listvue_type_script_lang_js = (upload_listvue_type_script_lang_js); 
// EXTERNAL MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(0);

// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_upload_listvue_type_script_lang_js,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var upload_list = (component.exports);
// CONCATENATED MODULE: ./packages/upload/src/ajax.js
function getError(action, option, xhr) {
  let msg;
  if (xhr.response) {
    msg = `${xhr.response.error || xhr.response}`;
  } else if (xhr.responseText) {
    msg = `${xhr.responseText}`;
  } else {
    msg = `fail to post ${action} ${xhr.status}`;
  }
  const err = new Error(msg);
  err.status = xhr.status;
  err.method = 'post';
  err.url = action;
  return err;
}
function getBody(xhr) {
  const text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }
  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}
function upload(option) {
  if (typeof XMLHttpRequest === 'undefined') {
    return;
  }
  const xhr = new XMLHttpRequest();
  const action = option.action;
  if (xhr.upload) {
    xhr.upload.onprogress = function progress(e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }
      option.onProgress(e);
    };
  }
  const formData = new FormData();
  if (option.data) {
    Object.keys(option.data).forEach(key => {
      formData.append(key, option.data[key]);
    });
  }
  formData.append(option.filename, option.file, option.file.name);
  xhr.onerror = function error(e) {
    option.onError(e);
  };
  xhr.onload = function onload() {
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(action, option, xhr));
    }
    option.onSuccess(getBody(xhr));
  };
  xhr.open('post', action, true);
  if (option.withCredentials && 'withCredentials' in xhr) {
    xhr.withCredentials = true;
  }
  const headers = option.headers || {};
  for (let item in headers) {
    if (headers.hasOwnProperty(item) && headers[item] !== null) {
      xhr.setRequestHeader(item, headers[item]);
    }
  }
  xhr.send(formData);
  return xhr;
}
// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=template&id=4c315758
var upload_draggervue_type_template_id_4c315758_render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c(
    "div",
    {
      staticClass: "el-upload-dragger",
      class: {
        "is-dragover": _vm.dragover
      },
      on: {
        drop: function($event) {
          $event.preventDefault()
          return _vm.onDrop.apply(null, arguments)
        },
        dragover: function($event) {
          $event.preventDefault()
          return _vm.onDragover.apply(null, arguments)
        },
        dragleave: function($event) {
          $event.preventDefault()
          _vm.dragover = false
        }
      }
    },
    [_vm._t("default")],
    2
  )
}
var upload_draggervue_type_template_id_4c315758_staticRenderFns = []
upload_draggervue_type_template_id_4c315758_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=template&id=4c315758

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js
/* harmony default export */ var upload_draggervue_type_script_lang_js = ({
  name: 'ElUploadDrag',
  props: {
    disabled: Boolean
  },
  inject: {
    uploader: {
      default: ''
    }
  },
  data() {
    return {
      dragover: false
    };
  },
  methods: {
    onDragover() {
      if (!this.disabled) {
        this.dragover = true;
      }
    },
    onDrop(e) {
      if (this.disabled || !this.uploader) return;
      const accept = this.uploader.accept;
      this.dragover = false;
      if (!accept) {
        this.$emit('file', e.dataTransfer.files);
        return;
      }
      this.$emit('file', [].slice.call(e.dataTransfer.files).filter(file => {
        const {
          type,
          name
        } = file;
        const extension = name.indexOf('.') > -1 ? `.${name.split('.').pop()}` : '';
        const baseType = type.replace(/\/.*$/, '');
        return accept.split(',').map(type => type.trim()).filter(type => type).some(acceptedType => {
          if (/\..+$/.test(acceptedType)) {
            return extension === acceptedType;
          }
          if (/\/\*$/.test(acceptedType)) {
            return baseType === acceptedType.replace(/\/\*$/, '');
          }
          if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
            return type === acceptedType;
          }
          return false;
        });
      }));
    }
  }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js
 /* harmony default export */ var src_upload_draggervue_type_script_lang_js = (upload_draggervue_type_script_lang_js); 
// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue





/* normalize component */

var upload_dragger_component = Object(componentNormalizer["a" /* default */])(
  src_upload_draggervue_type_script_lang_js,
  upload_draggervue_type_template_id_4c315758_render,
  upload_draggervue_type_template_id_4c315758_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var upload_dragger = (upload_dragger_component.exports);
// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload.vue?vue&type=script&lang=js



/* harmony default export */ var uploadvue_type_script_lang_js = ({
  inject: ['uploader'],
  components: {
    UploadDragger: upload_dragger
  },
  props: {
    type: String,
    action: {
      type: String,
      required: true
    },
    name: {
      type: String,
      default: 'file'
    },
    data: Object,
    headers: Object,
    withCredentials: Boolean,
    multiple: Boolean,
    accept: String,
    onStart: Function,
    onProgress: Function,
    onSuccess: Function,
    onError: Function,
    beforeUpload: Function,
    drag: Boolean,
    onPreview: {
      type: Function,
      default: function () {}
    },
    onRemove: {
      type: Function,
      default: function () {}
    },
    fileList: Array,
    autoUpload: Boolean,
    listType: String,
    httpRequest: {
      type: Function,
      default: upload
    },
    disabled: Boolean,
    limit: Number,
    onExceed: Function
  },
  data() {
    return {
      mouseover: false,
      reqs: {}
    };
  },
  methods: {
    isImage(str) {
      return str.indexOf('image') !== -1;
    },
    handleChange(ev) {
      const files = ev.target.files;
      if (!files) return;
      this.uploadFiles(files);
    },
    uploadFiles(files) {
      if (this.limit && this.fileList.length + files.length > this.limit) {
        this.onExceed && this.onExceed(files, this.fileList);
        return;
      }
      let postFiles = Array.prototype.slice.call(files);
      if (!this.multiple) {
        postFiles = postFiles.slice(0, 1);
      }
      if (postFiles.length === 0) {
        return;
      }
      postFiles.forEach(rawFile => {
        this.onStart(rawFile);
        if (this.autoUpload) this.upload(rawFile);
      });
    },
    upload(rawFile) {
      this.$refs.input.value = null;
      if (!this.beforeUpload) {
        return this.post(rawFile);
      }
      const before = this.beforeUpload(rawFile);
      if (before && before.then) {
        before.then(processedFile => {
          const fileType = Object.prototype.toString.call(processedFile);
          if (fileType === '[object File]' || fileType === '[object Blob]') {
            if (fileType === '[object Blob]') {
              processedFile = new File([processedFile], rawFile.name, {
                type: rawFile.type
              });
            }
            for (const p in rawFile) {
              if (rawFile.hasOwnProperty(p)) {
                processedFile[p] = rawFile[p];
              }
            }
            this.post(processedFile);
          } else {
            this.post(rawFile);
          }
        }, () => {
          this.onRemove(null, rawFile);
        });
      } else if (before !== false) {
        this.post(rawFile);
      } else {
        this.onRemove(null, rawFile);
      }
    },
    abort(file) {
      const {
        reqs
      } = this;
      if (file) {
        let uid = file;
        if (file.uid) uid = file.uid;
        if (reqs[uid]) {
          reqs[uid].abort();
        }
      } else {
        Object.keys(reqs).forEach(uid => {
          if (reqs[uid]) reqs[uid].abort();
          delete reqs[uid];
        });
      }
    },
    post(rawFile) {
      const {
        uid
      } = rawFile;
      const options = {
        headers: this.headers,
        withCredentials: this.withCredentials,
        file: rawFile,
        data: this.data,
        filename: this.name,
        action: this.action,
        onProgress: e => {
          this.onProgress(e, rawFile);
        },
        onSuccess: res => {
          this.onSuccess(res, rawFile);
          delete this.reqs[uid];
        },
        onError: err => {
          this.onError(err, rawFile);
          delete this.reqs[uid];
        }
      };
      const req = this.httpRequest(options);
      this.reqs[uid] = req;
      if (req && req.then) {
        req.then(options.onSuccess, options.onError);
      }
    },
    handleClick() {
      if (!this.disabled) {
        this.$refs.input.value = null;
        this.$refs.input.click();
      }
    },
    handleKeydown(e) {
      if (e.target !== e.currentTarget) return;
      if (e.keyCode === 13 || e.keyCode === 32) {
        this.handleClick();
      }
    }
  },
  render(h) {
    let {
      handleClick,
      drag,
      name,
      handleChange,
      multiple,
      accept,
      listType,
      uploadFiles,
      disabled,
      handleKeydown
    } = this;
    const data = {
      class: {
        'el-upload': true
      },
      on: {
        click: handleClick,
        keydown: handleKeydown
      }
    };
    data.class[`el-upload--${listType}`] = true;
    return h("div", babel_helper_vue_jsx_merge_props_default()([{}, data, {
      "attrs": {
        "tabindex": "0"
      }
    }]), [drag ? h("upload-dragger", {
      "attrs": {
        "disabled": disabled
      },
      "on": {
        "file": uploadFiles
      }
    }, [this.$slots.default]) : this.$slots.default, h("input", {
      "class": "el-upload__input",
      "attrs": {
        "type": "file",
        "name": name,
        "multiple": multiple,
        "accept": accept
      },
      "ref": "input",
      "on": {
        "change": handleChange
      }
    })]);
  }
});
// CONCATENATED MODULE: ./packages/upload/src/upload.vue?vue&type=script&lang=js
 /* harmony default export */ var src_uploadvue_type_script_lang_js = (uploadvue_type_script_lang_js); 
// CONCATENATED MODULE: ./packages/upload/src/upload.vue
var upload_render, upload_staticRenderFns




/* normalize component */

var upload_component = Object(componentNormalizer["a" /* default */])(
  src_uploadvue_type_script_lang_js,
  upload_render,
  upload_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src_upload = (upload_component.exports);
// EXTERNAL MODULE: external "./mixins/migrating"
var migrating_ = __webpack_require__(11);
var migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);

// CONCATENATED MODULE: C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/babel-loader@8.3.0_@babel+core@7.25.2_webpack@4.46.0/node_modules/babel-loader/lib!C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/vue-loader@15.11.1_css-loader@5.2.7_prettier@1.18.2_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/index.vue?vue&type=script&lang=js





function noop() {}
/* harmony default export */ var srcvue_type_script_lang_js = ({
  name: 'ElUpload',
  mixins: [migrating_default.a],
  components: {
    ElProgress: external_progress_default.a,
    UploadList: upload_list,
    Upload: src_upload
  },
  provide() {
    return {
      uploader: this
    };
  },
  inject: {
    elForm: {
      default: ''
    }
  },
  props: {
    action: {
      type: String,
      required: true
    },
    headers: {
      type: Object,
      default() {
        return {};
      }
    },
    data: Object,
    multiple: Boolean,
    name: {
      type: String,
      default: 'file'
    },
    drag: Boolean,
    dragger: Boolean,
    withCredentials: Boolean,
    showFileList: {
      type: Boolean,
      default: true
    },
    accept: String,
    type: {
      type: String,
      default: 'select'
    },
    beforeUpload: Function,
    beforeRemove: Function,
    onRemove: {
      type: Function,
      default: noop
    },
    onChange: {
      type: Function,
      default: noop
    },
    onPreview: {
      type: Function
    },
    onSuccess: {
      type: Function,
      default: noop
    },
    onProgress: {
      type: Function,
      default: noop
    },
    onError: {
      type: Function,
      default: noop
    },
    fileList: {
      type: Array,
      default() {
        return [];
      }
    },
    autoUpload: {
      type: Boolean,
      default: true
    },
    listType: {
      type: String,
      default: 'text' // text,picture,picture-card
    },
    httpRequest: Function,
    disabled: Boolean,
    limit: Number,
    onExceed: {
      type: Function,
      default: noop
    }
  },
  data() {
    return {
      uploadFiles: [],
      dragOver: false,
      draging: false,
      tempIndex: 1
    };
  },
  computed: {
    uploadDisabled() {
      return this.disabled || (this.elForm || {}).disabled;
    }
  },
  watch: {
    listType(type) {
      if (type === 'picture-card' || type === 'picture') {
        this.uploadFiles = this.uploadFiles.map(file => {
          if (!file.url && file.raw) {
            try {
              file.url = URL.createObjectURL(file.raw);
            } catch (err) {
              console.error('[Element Error][Upload]', err);
            }
          }
          return file;
        });
      }
    },
    fileList: {
      immediate: true,
      handler(fileList) {
        this.uploadFiles = fileList.map(item => {
          item.uid = item.uid || Date.now() + this.tempIndex++;
          item.status = item.status || 'success';
          return item;
        });
      }
    }
  },
  methods: {
    handleStart(rawFile) {
      rawFile.uid = Date.now() + this.tempIndex++;
      let file = {
        status: 'ready',
        name: rawFile.name,
        size: rawFile.size,
        percentage: 0,
        uid: rawFile.uid,
        raw: rawFile
      };
      if (this.listType === 'picture-card' || this.listType === 'picture') {
        try {
          file.url = URL.createObjectURL(rawFile);
        } catch (err) {
          console.error('[Element Error][Upload]', err);
          return;
        }
      }
      this.uploadFiles.push(file);
      this.onChange(file, this.uploadFiles);
    },
    handleProgress(ev, rawFile) {
      const file = this.getFile(rawFile);
      this.onProgress(ev, file, this.uploadFiles);
      file.status = 'uploading';
      file.percentage = ev.percent || 0;
    },
    handleSuccess(res, rawFile) {
      const file = this.getFile(rawFile);
      if (file) {
        file.status = 'success';
        file.response = res;
        this.onSuccess(res, file, this.uploadFiles);
        this.onChange(file, this.uploadFiles);
      }
    },
    handleError(err, rawFile) {
      const file = this.getFile(rawFile);
      const fileList = this.uploadFiles;
      file.status = 'fail';
      fileList.splice(fileList.indexOf(file), 1);
      this.onError(err, file, this.uploadFiles);
      this.onChange(file, this.uploadFiles);
    },
    handleRemove(file, raw) {
      if (raw) {
        file = this.getFile(raw);
      }
      let doRemove = () => {
        this.abort(file);
        let fileList = this.uploadFiles;
        fileList.splice(fileList.indexOf(file), 1);
        this.onRemove(file, fileList);
      };
      if (!this.beforeRemove) {
        doRemove();
      } else if (typeof this.beforeRemove === 'function') {
        const before = this.beforeRemove(file, this.uploadFiles);
        if (before && before.then) {
          before.then(() => {
            doRemove();
          }, noop);
        } else if (before !== false) {
          doRemove();
        }
      }
    },
    getFile(rawFile) {
      let fileList = this.uploadFiles;
      let target;
      fileList.every(item => {
        target = rawFile.uid === item.uid ? item : null;
        return !target;
      });
      return target;
    },
    abort(file) {
      this.$refs['upload-inner'].abort(file);
    },
    clearFiles() {
      this.uploadFiles = [];
    },
    submit() {
      this.uploadFiles.filter(file => file.status === 'ready').forEach(file => {
        this.$refs['upload-inner'].upload(file.raw);
      });
    },
    getMigratingConfig() {
      return {
        props: {
          'default-file-list': 'default-file-list is renamed to file-list.',
          'show-upload-list': 'show-upload-list is renamed to show-file-list.',
          'thumbnail-mode': 'thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan'
        }
      };
    }
  },
  beforeDestroy() {
    this.uploadFiles.forEach(file => {
      if (file.url && file.url.indexOf('blob:') === 0) {
        URL.revokeObjectURL(file.url);
      }
    });
  },
  render(h) {
    let uploadList;
    if (this.showFileList) {
      uploadList = h(upload_list, {
        "attrs": {
          "disabled": this.uploadDisabled,
          "listType": this.listType,
          "files": this.uploadFiles,
          "handlePreview": this.onPreview
        },
        "on": {
          "remove": this.handleRemove
        }
      }, [props => {
        if (this.$scopedSlots.file) {
          return this.$scopedSlots.file({
            file: props.file
          });
        }
      }]);
    }
    const uploadData = {
      props: {
        type: this.type,
        drag: this.drag,
        action: this.action,
        multiple: this.multiple,
        'before-upload': this.beforeUpload,
        'with-credentials': this.withCredentials,
        headers: this.headers,
        name: this.name,
        data: this.data,
        accept: this.accept,
        fileList: this.uploadFiles,
        autoUpload: this.autoUpload,
        listType: this.listType,
        disabled: this.uploadDisabled,
        limit: this.limit,
        'on-exceed': this.onExceed,
        'on-start': this.handleStart,
        'on-progress': this.handleProgress,
        'on-success': this.handleSuccess,
        'on-error': this.handleError,
        'on-preview': this.onPreview,
        'on-remove': this.handleRemove,
        'http-request': this.httpRequest
      },
      ref: 'upload-inner'
    };
    const trigger = this.$slots.trigger || this.$slots.default;
    const uploadComponent = h("upload", babel_helper_vue_jsx_merge_props_default()([{}, uploadData]), [trigger]);
    return h("div", [this.listType === 'picture-card' ? uploadList : '', this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== 'picture-card' ? uploadList : '']);
  }
});
// CONCATENATED MODULE: ./packages/upload/src/index.vue?vue&type=script&lang=js
 /* harmony default export */ var upload_srcvue_type_script_lang_js = (srcvue_type_script_lang_js); 
// CONCATENATED MODULE: ./packages/upload/src/index.vue
var src_render, src_staticRenderFns




/* normalize component */

var src_component = Object(componentNormalizer["a" /* default */])(
  upload_srcvue_type_script_lang_js,
  src_render,
  src_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var src = (src_component.exports);
// CONCATENATED MODULE: ./packages/upload/index.js


/* istanbul ignore next */
src.install = function (Vue) {
  Vue.component(src.name, src);
};
/* harmony default export */ var packages_upload = __webpack_exports__["default"] = (src);

/***/ }),

/***/ 7:
/***/ (function(module, exports) {

module.exports = __webpack_require__("../../libs/element-ui/lib/mixins/locale.js");

/***/ })

/******/ });

/***/ }),

/***/ "../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cognitoforms_element_ui_lib_upload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../libs/element-ui/lib/upload.js");
/* harmony import */ var _cognitoforms_element_ui_lib_upload__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_element_ui_lib_upload__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _mixins_record_focus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/mixins/record-focus.ts");
/* harmony import */ var _Button_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/components/Button.vue");
/* harmony import */ var _FileIcon_vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/components/FileIcon.vue");
/* harmony import */ var _assets_ex_outline_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/assets/ex-outline.svg");
/* harmony import */ var _assets_download_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/assets/download.svg");
/* harmony import */ var _util_deferred__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/util/deferred.ts");
/* harmony import */ var src_web_api_base_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/web-api/base-service.ts");
/* harmony import */ var src_framework_public_events__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/framework/public/events.ts");
/* harmony import */ var src_framework_eventing_form_event__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/framework/eventing/form-event.ts");
/* harmony import */ var src_util_debounce__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/util/debounce.ts");












vue__WEBPACK_IMPORTED_MODULE_1___default.a.use(_cognitoforms_element_ui_lib_upload__WEBPACK_IMPORTED_MODULE_0___default.a);
function getMegabytes(file) {
  return file.size / 1024 / 1024;
}
const rasterImageTypes = ['png', 'gif', 'jpg', 'jpeg', 'tif', 'tiff', 'bmp'];
/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'CUpload',
  components: {
    IEx: _assets_ex_outline_svg__WEBPACK_IMPORTED_MODULE_5__["default"],
    IDownload: _assets_download_svg__WEBPACK_IMPORTED_MODULE_6__["default"],
    CButton: _Button_vue__WEBPACK_IMPORTED_MODULE_3__["default"],
    CFileIcon: _FileIcon_vue__WEBPACK_IMPORTED_MODULE_4__["default"]
  },
  mixins: [_mixins_record_focus__WEBPACK_IMPORTED_MODULE_2__["default"]],
  inject: ['$resource', 'formEvents', 'flags'],
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    encrypt: Boolean,
    fileService: {
      type: Object,
      required: true
    },
    value: {
      type: [Object, Array],
      default: () => []
    },
    allowedTypes: {
      type: Array,
      default: undefined
    },
    bannedTypes: {
      type: Array,
      default: () => []
    },
    maxSize: {
      type: Number,
      default: undefined
    },
    maxFiles: {
      type: Number,
      default: undefined
    },
    id: {
      type: String,
      required: true
    },
    readonly: Boolean
  },
  data() {
    const internalValue = !this.value && this.multiple ? [] : this.value;
    return {
      updating: false,
      initialFiles: [],
      internalValue,
      error: '',
      uploadRef: null,
      cancellationMap: {},
      uidMap: {},
      debouncedReset: Object(src_util_debounce__WEBPACK_IMPORTED_MODULE_11__["default"])(this.reset),
      resetPromise: new _util_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]()
    };
  },
  computed: {
    /**
     * The list of files for the file input.
     */
    uploadFiles() {
      this.$nextTick(() => this.resetPromise.resolve());
      return this.uploadRef ? this.uploadRef.uploadFiles : [];
    },
    limitReached() {
      return this.internalValue.length === this.maxFiles;
    },
    isList() {
      return Array.isArray(this.internalValue);
    },
    lowerCaseAllowedTypes() {
      // Necessary since the getExtension method always returns a lowercase string
      return this.allowedTypes ? this.allowedTypes.map(t => t.toLowerCase()) : [];
    }
  },
  watch: {
    value(val) {
      this.internalValue = val;

      // Reset the file list if files are changed from *outside* the component.
      if (!this.updating) this.reset(false);
    }
  },
  async mounted() {
    this.$el.querySelector('.el-upload').setAttribute('tabindex', '-1');
    if (this.formEvents) this.formEvents.on(src_framework_public_events__WEBPACK_IMPORTED_MODULE_9__["FormEvents"].ResetEntry, this.debouncedReset);
    await this.reset();
    this.uploadRef = this.$refs.upload;
  },
  destroyed() {
    this.formEvents.off(src_framework_public_events__WEBPACK_IMPORTED_MODULE_9__["FormEvents"].ResetEntry, this.debouncedReset);
  },
  methods: {
    async reset() {
      let cancelUploads = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (!this.resetPromise.pending) this.resetPromise = new _util_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]();
      const fileList = Array.isArray(this.internalValue) ? this.internalValue : [this.internalValue];
      this.initialFiles = await Promise.all(fileList.map(this.fileDataToFile.bind(this)));
      if (cancelUploads) this.uploadFiles.forEach(file => this.cancelUpload(file.uid));
      return this.resetPromise;
    },
    getDisplayFileSize(file) {
      if (file.size > 100000) return "".concat(Math.round(file.size / 1024 / 1024 * 10) / 10, " MB");else if (file.size > 1000) return "".concat(Math.round(file.size / 1024 * 10) / 10, " KB");else return "".concat(file.size, " bytes");
    },
    uploadClicked() {
      this.error = '';
    },
    getDownloadText(file) {
      return this.$resource('fileupload-download-text') + ' ' + file.name;
    },
    getRemoveText(file) {
      return this.$resource('remove-item').replace('{item}', file.name);
    },
    async fileDataToFile(file) {
      return {
        uid: file.Id,
        url: await this.fileService.getDownloadUrl(file),
        name: file.Name,
        size: file.Size
      };
    },
    getFileRef(file) {
      return this.isList ? this.internalValue.find(f => f.Id === file.uid) : this.internalValue;
    },
    hasThumbnail(file) {
      const fileDataRef = this.getFileRef(file);
      return fileDataRef && fileDataRef.Id && rasterImageTypes.includes(this.getExtension(file));
    },
    getThumbnail(file) {
      return this.fileService.getThumbnailUrl(this.getFileRef(file));
    },
    getExtension(file) {
      return file.name ? file.name.split('.').pop().toLowerCase() : '???';
    },
    // https://github.com/ElemeFE/element/blob/dev/packages/upload/src/upload.vue
    uploadFile(options) {
      const cancelPromise = new _util_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]();
      this.cancellationMap[options.file.uid] = cancelPromise.resolve.bind(cancelPromise);
      return this.fileService.upload(options.file, {
        onProgress: options.onProgress,
        encrypt: this.encrypt,
        cancelPromise: cancelPromise.promise
      }).then(async fileData => {
        // Make sure Element's file object has correct information
        Object.assign(this.uploadRef.uploadFiles.find(f => f.uid === options.file.uid), await this.fileDataToFile(fileData));
        this.uidMap[fileData.Id] = options.file.uid;
        this.uploaded(fileData);
        delete this.cancellationMap[options.file.uid];
      }, e => {
        this.uploadError(options.file, e.request && e.request.status === 415 ? this.$resource('fileupload-excluded-file-type-message') : null, e instanceof src_web_api_base_service__WEBPACK_IMPORTED_MODULE_8__["RequestCancelledError"]);
      });
    },
    uploaded(fileDataRef) {
      this.updating = true;
      this.$emit('change', this.isList ? this.internalValue.concat(fileDataRef) : fileDataRef);
      this.$emit('file-uploaded', fileDataRef);
      this.$nextTick(() => {
        this.updating = false;
      });
    },
    uploadError(file, msg, wasCancelled) {
      const idx = this.uploadRef.uploadFiles.findIndex(f => f.uid === file.uid);
      if (idx >= 0) this.uploadRef.uploadFiles.splice(idx, 1);
      if (!wasCancelled) this.error = msg || this.$resource('fileupload-failed-upload-message', {
        fileName: file.name
      });
    },
    cancelUpload(targetId) {
      const cancel = this.cancellationMap[targetId];
      if (cancel) {
        cancel();
        delete this.cancellationMap[targetId];
      }
    },
    removeFile(targetId) {
      this.updating = true;
      this.error = '';
      this.recordFocus();
      // Either emit null if using a single file, or the list excluding the deleted file
      this.$emit('change', this.isList ? this.internalValue.filter(f => f.Id !== targetId) : null);

      // Keep uploadFiles in sync with internalValue
      this.uploadRef.uploadFiles.splice(this.uploadRef.uploadFiles.findIndex(f => f.uid === targetId), 1);
      this.$nextTick(() => {
        this.updating = false;
      });
    },
    /**
     * Handle case when multiple files are selected/dragged at once, and the count exceeds the limit.
     * el-upload blocks the entire batch of files, so we just want to display an error message explaining
     * what happened.
     */
    limitExceeded(files) {
      this.error = this.$resource('fileupload-max-file-count-exceeded-message', {
        maxFileCount: this.maxFiles
      });
    },
    async downloadFile(file) {
      if (!this.fileService) return;
      const fileDataRef = this.getFileRef(file);
      this.fileService.downloadFile(fileDataRef);
    },
    async previewFile(file) {
      if (!this.fileService) return;
      const fileDataRef = this.getFileRef(file);
      const size = getMegabytes(file);
      const extension = this.getExtension(file);
      let downloadUrl = this.fileService.getDownloadUrl(fileDataRef);
      let shouldPreview = false;
      switch (extension) {
        case 'doc':
        case 'docx':
        case 'ppt':
        case 'pptx':
          if (size < 10) shouldPreview = true;
          break;
        case 'xls':
        case 'xlsx':
          if (size < 5) shouldPreview = true;
          break;
        case 'pdf':
          downloadUrl += '&at=0';
          break;
        default:
          if (!rasterImageTypes.includes(extension)) break;
          downloadUrl += '&at=0';
          break;
      }
      if (shouldPreview) downloadUrl = await this.fileService.getPreviewUrl(fileDataRef);
      window.open(downloadUrl, '_blank');
    },
    beforeUpload(file) {
      this.error = '';

      // File type blacklisted
      if (this.bannedTypes.includes(this.getExtension(file))) {
        this.error = this.$resource('fileupload-excluded-file-type-message');
        return false;
      }

      // File type not whitelisted
      if (this.lowerCaseAllowedTypes.length !== 0 && !this.lowerCaseAllowedTypes.includes(this.getExtension(file))) {
        this.error = this.$resource('fileupload-invalid-file-type-message', {
          allowedTypes: this.allowedTypes.join(', ')
        });
        return false;
      }

      // File too big
      if (this.maxSize && getMegabytes(file) > this.maxSize) {
        this.error = this.$resource('fileupload-max-size-exceeded-message', {
          maxSize: this.maxSize
        });
        return false;
      }

      // File too small
      if (file.size === 0) {
        this.error = this.$resource('fileupload-zero-byte-file-message');
        return false;
      }
    },
    /**
     * Using this map allows us to reuse the file list item when the upload completes.
     * Without the mapping of FileData Id => file uid, the vue key would change,
     * causing the DOM to rerender the list item even though it still corresponds
     * to the same file.
     */
    key(id) {
      return this.uidMap[id] || id;
    },
    pasteFile(event) {
      if (this.$el.contains(document.activeElement) && !this.readonly) {
        const items = (event.clipboardData || event.originalEvent.clipboardData).items;
        for (const item of items) {
          if (item.kind === 'file') {
            const file = item.getAsFile();
            this.$refs.upload.handleStart(file);
            this.$refs.upload.$refs['upload-inner'].upload(file);
          }
        }
      }
    },
    handleUploadClicks(event) {
      if (!this.$refs.uploadButton.$el.contains(event.target)) event.stopPropagation();
    },
    tryDownloadFile(file, event) {
      if (this.flags.fileDownloadsDisabled) {
        event.stopPropagation();
        this.formEvents.emit(new src_framework_eventing_form_event__WEBPACK_IMPORTED_MODULE_10__["FormEvent"](src_framework_public_events__WEBPACK_IMPORTED_MODULE_9__["FormEvents"].TryDownloadOverLimit));
      } else {
        this.downloadFile(file);
      }
    },
    tryPreviewFile(file, event) {
      if (this.flags.fileDownloadsDisabled) {
        event.stopPropagation();
        this.formEvents.emit(new src_framework_eventing_form_event__WEBPACK_IMPORTED_MODULE_10__["FormEvent"](src_framework_public_events__WEBPACK_IMPORTED_MODULE_9__["FormEvents"].TryDownloadOverLimit));
      } else {
        this.previewFile(file);
      }
    }
  }
});

/***/ }),

/***/ "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/runtime/api.js")(false);
// Module
exports.push([module.i, "html .cog-upload .el-upload-dragger.is-dragover > div, :root:root:root:root:root .cog-upload .el-upload-dragger.is-dragover > div {\n  background: hsla(var(--background-hsl), 0.1);\n  border-color: var(--highlight);\n}\nhtml .cog-upload .el-upload-dragger > div, :root:root:root:root:root .cog-upload .el-upload-dragger > div {\n  display: flex;\n  align-items: center;\n  background: hsla(var(--background-hsl), 0.12);\n  border: var(--input__border-width) solid transparent;\n  border-radius: calc(var(--border-radius) * 0.7);\n  padding: calc(var(--gutter) / 2);\n}\nhtml .cog-upload .el-upload__input, :root:root:root:root:root .cog-upload .el-upload__input {\n  display: none;\n}\nhtml .cog-upload:not(.is-read-only), :root:root:root:root:root .cog-upload:not(.is-read-only) {\n  border: hsla(var(--background-hsl), 0.5) var(--input__border-width) solid;\n  border-radius: var(--border-radius);\n  padding: 2px;\n}\nhtml .cog-upload__drag-text, :root:root:root:root:root .cog-upload__drag-text {\n  margin-left: 0.5em;\n}\nhtml .cog-upload__list, :root:root:root:root:root .cog-upload__list {\n  margin: calc(var(--gutter) / 6) 0;\n  padding-right: calc(var(--gutter) / 4);\n  padding-left: calc(var(--gutter) / 4);\n  list-style: none;\n  transition: calc(var(--speed) / 4);\n}\nhtml .cog-upload__list:empty, :root:root:root:root:root .cog-upload__list:empty {\n  margin: 0;\n}\nhtml .cog-upload__list li, :root:root:root:root:root .cog-upload__list li {\n  display: flex;\n  position: relative;\n  align-items: center;\n  padding: calc(var(--gutter) / 4);\n  transition: calc(var(--speed) / 4);\n}\nhtml .cog-upload__list li:hover, :root:root:root:root:root .cog-upload__list li:hover {\n  background: hsla(var(--background-hsl), 0.1);\n}\nhtml .cog-upload__list li + li, :root:root:root:root:root .cog-upload__list li + li {\n  margin-top: calc(var(--gutter) / 6);\n}\nhtml .cog-upload__list .cog-upload__thumbnail,\nhtml .cog-upload__list .cog-i-file, :root:root:root:root:root .cog-upload__list .cog-upload__thumbnail,\n:root:root:root:root:root .cog-upload__list .cog-i-file {\n  max-width: 1.7em;\n  margin-right: 0.2em;\n  font-size: 1.5em;\n  transition: calc(var(--speed) / 4);\n}\nhtml .cog-upload__list progress, :root:root:root:root:root .cog-upload__list progress {\n  position: absolute;\n  right: var(--gutter);\n  width: calc(45px - 2em);\n  height: 3px;\n  background-color: hsla(var(--background-hsl), 0.3);\n  border: 0;\n  margin-right: 1em;\n  -webkit-appearance: none;\n  appearance: none;\n}\nhtml .cog-upload__list progress::-webkit-progress-bar, :root:root:root:root:root .cog-upload__list progress::-webkit-progress-bar {\n  background-color: hsla(var(--background-hsl), 0.5);\n}\nhtml .cog-upload__list progress::-webkit-progress-value, :root:root:root:root:root .cog-upload__list progress::-webkit-progress-value {\n  background-color: var(--highlight);\n}\nhtml .cog-upload__list progress::-moz-progress-bar, :root:root:root:root:root .cog-upload__list progress::-moz-progress-bar {\n  background-color: var(--highlight);\n}\nhtml .cog-upload__list progress::-ms-fill, :root:root:root:root:root .cog-upload__list progress::-ms-fill {\n  border: 0;\n}\nhtml .cog-upload__list-enter-active, html .cog-upload__list-leave-active, :root:root:root:root:root .cog-upload__list-enter-active, :root:root:root:root:root .cog-upload__list-leave-active {\n  overflow: hidden;\n}\nhtml .cog-upload__list-enter-to, html .cog-upload__list-leave, :root:root:root:root:root .cog-upload__list-enter-to, :root:root:root:root:root .cog-upload__list-leave {\n  max-height: 5em;\n  opacity: 1;\n}\nhtml .cog-upload__list-enter-to .cog-i-file, html .cog-upload__list-leave .cog-i-file, :root:root:root:root:root .cog-upload__list-enter-to .cog-i-file, :root:root:root:root:root .cog-upload__list-leave .cog-i-file {\n  transform: scale(1);\n}\nhtml .cog-upload__file-info, :root:root:root:root:root .cog-upload__file-info {\n  max-width: calc(100% - 7.5em);\n  margin-left: calc(var(--gutter) / 4);\n}\nhtml .cog-upload__thumbnail:not(.error) + .cog-i-file, :root:root:root:root:root .cog-upload__thumbnail:not(.error) + .cog-i-file {\n  display: none;\n}\nhtml .cog-upload__thumbnail.error, :root:root:root:root:root .cog-upload__thumbnail.error {\n  display: none;\n}\nhtml a.cog-upload__link, :root:root:root:root:root a.cog-upload__link {\n  display: inline-block;\n}\nhtml .cog-upload__link, :root:root:root:root:root .cog-upload__link {\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\nhtml .cog-upload__file-size, :root:root:root:root:root .cog-upload__file-size {\n  margin-top: -0.35em;\n  opacity: 0.6;\n  color: var(--color);\n  font-size: var(--small-text);\n}\nhtml .cog-upload__list button, :root:root:root:root:root .cog-upload__list button {\n  margin-left: auto;\n}\nhtml .cog-upload__list button + button, :root:root:root:root:root .cog-upload__list button + button {\n  margin-left: 0.3em;\n}\nhtml .cog-upload__list-enter, html .cog-upload__list-leave-to, :root:root:root:root:root .cog-upload__list-enter, :root:root:root:root:root .cog-upload__list-leave-to {\n  max-height: 0;\n  padding: 0 !important;\n  opacity: 0;\n}\nhtml .cog-upload__list-enter .cog-i-file, html .cog-upload__list-leave-to .cog-i-file, :root:root:root:root:root .cog-upload__list-enter .cog-i-file, :root:root:root:root:root .cog-upload__list-leave-to .cog-i-file {\n  transform: scale(0.1);\n}\nhtml .cog-i-download, :root:root:root:root:root .cog-i-download {\n  fill: transparent;\n  stroke: currentcolor;\n}\nhtml .cog-i-download__arrow, html .cog-i-download__ground, :root:root:root:root:root .cog-i-download__arrow, :root:root:root:root:root .cog-i-download__ground {\n  transition: calc(var(--speed) / 4);\n}\nhtml .cog-form:not([data-width~=\"325\"]) .el-upload-dragger > div, :root:root:root:root:root .cog-form:not([data-width~=\"325\"]) .el-upload-dragger > div {\n  padding: calc(var(--gutter) / 4);\n}\nhtml .cog-form:not([data-width~=\"325\"]) .cog-upload__list, :root:root:root:root:root .cog-form:not([data-width~=\"325\"]) .cog-upload__list {\n  padding-right: 0;\n  padding-left: 0;\n}", ""]);


/***/ }),

/***/ "../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/cjs.js?!../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&");
/* harmony import */ var _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1__);

            

var options = {"attributes":{"class":"cog-style"}};

options.insert = "head";
options.singleton = false;

var update = _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a, options);


if (true) {
  if (!_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals;

    module.hot.accept(
      "../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&",
      function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&");
/* harmony import */ _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1__);
(function () {
        if (!isEqualLocals(oldLocals, _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals, undefined)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = _node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals;

              update(_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this)
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

/* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_1___default.a.locals || {});

/***/ }),

/***/ "../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=template&id=44fc689e&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function render() {
  var _vm = this,
    _c = _vm._self._c
  return _c("div", { staticClass: "cog-input" }, [
    _c(
      "div",
      {
        staticClass: "cog-upload",
        class: { "is-read-only": _vm.readonly },
        on: { paste: _vm.pasteFile }
      },
      [
        _c(
          "el-upload",
          {
            ref: "upload",
            attrs: {
              "show-file-list": false,
              "http-request": _vm.uploadFile,
              "on-preview": _vm.previewFile,
              "before-upload": _vm.beforeUpload,
              "file-list": _vm.initialFiles,
              disabled: _vm.readonly,
              limit: _vm.maxFiles,
              "on-exceed": _vm.limitExceeded,
              multiple: !_vm.maxFiles || _vm.maxFiles > 1,
              drag: !_vm.readonly && !_vm.limitReached,
              "list-type": "picture",
              action: ""
            }
          },
          [
            !_vm.readonly && !_vm.limitReached
              ? [
                  _c(
                    "div",
                    { on: { click: _vm.handleUploadClicks } },
                    [
                      _c(
                        "c-button",
                        {
                          ref: "uploadButton",
                          staticClass:
                            "cog-button--secondary cog-upload__upload-button",
                          on: { click: _vm.uploadClicked }
                        },
                        [
                          _vm._v(
                            "\n\t\t\t\t\t\t" +
                              _vm._s(
                                _vm.$resource(
                                  "fileupload-default-upload-button-text"
                                )
                              ) +
                              "\n\t\t\t\t\t"
                          )
                        ]
                      ),
                      _vm._v(" "),
                      _c(
                        "span",
                        {
                          staticClass: "cog-upload__drag-text",
                          on: {
                            click: function($event) {
                              $event.stopPropagation()
                            }
                          }
                        },
                        [
                          _vm._v(
                            _vm._s(_vm.$resource("fileupload-dropzone-message"))
                          )
                        ]
                      )
                    ],
                    1
                  )
                ]
              : _vm._e()
          ],
          2
        ),
        _vm._v(" "),
        _c(
          "transition-group",
          {
            staticClass: "cog-upload__list",
            attrs: { name: "cog-upload__list", tag: "ul" },
            on: {
              click: function($event) {
                $event.stopPropagation()
              }
            }
          },
          _vm._l(_vm.uploadFiles, function(file, i) {
            return _c(
              "li",
              { key: _vm.key(file.uid), ref: "uploadItems", refInFor: true },
              [
                _vm.hasThumbnail(file)
                  ? _c("img", {
                      staticClass: "cog-upload__thumbnail",
                      attrs: {
                        src: _vm.getThumbnail(file),
                        onerror: "this.className += ' error'"
                      }
                    })
                  : _vm._e(),
                _vm._v(" "),
                _c("c-file-icon", {
                  key: "icon-" + i,
                  attrs: { extension: _vm.getExtension(file) }
                }),
                _vm._v(" "),
                _c("div", { staticClass: "cog-upload__file-info" }, [
                  _c(
                    "a",
                    {
                      key: "anchor-" + file.uid,
                      staticClass: "cog-upload__link",
                      attrs: { href: file.url, target: "_blank" },
                      on: {
                        click: function($event) {
                          $event.preventDefault()
                          return _vm.tryPreviewFile(file, $event)
                        }
                      }
                    },
                    [_vm._v(_vm._s(file.name))]
                  ),
                  _vm._v(" "),
                  _c("div", { staticClass: "cog-upload__file-size" }, [
                    _vm._v(_vm._s(_vm.getDisplayFileSize(file)))
                  ])
                ]),
                _vm._v(" "),
                file.percentage === 100 || file.status === "success"
                  ? [
                      _c(
                        "c-button",
                        {
                          key: "download-button-" + file.uid,
                          staticClass: "cog-upload__download-button",
                          attrs: {
                            "no-style": "",
                            title: _vm.getDownloadText(file)
                          },
                          on: {
                            click: function($event) {
                              return _vm.tryDownloadFile(file, $event)
                            }
                          }
                        },
                        [_c("i-download")],
                        1
                      ),
                      _vm._v(" "),
                      !_vm.readonly
                        ? _c(
                            "c-button",
                            {
                              key: "remove-button-" + file.uid,
                              staticClass: "cog-upload__remove-button",
                              attrs: {
                                "no-style": "",
                                title: _vm.getRemoveText(file)
                              },
                              on: {
                                click: function($event) {
                                  return _vm.removeFile(file.uid)
                                }
                              }
                            },
                            [_c("i-ex")],
                            1
                          )
                        : _vm._e()
                    ]
                  : [
                      _c("progress", {
                        key: "progress-" + file.uid,
                        attrs: { max: "100" },
                        domProps: { value: file.percentage }
                      }),
                      _vm._v(" "),
                      _c(
                        "c-button",
                        {
                          staticClass: "cog-upload__remove-button",
                          attrs: {
                            "no-style": "",
                            title: _vm.getRemoveText(file)
                          },
                          on: {
                            click: function($event) {
                              return _vm.cancelUpload(file.uid)
                            }
                          }
                        },
                        [_c("i-ex")],
                        1
                      )
                    ]
              ],
              2
            )
          }),
          0
        ),
        _vm._v(" "),
        _c("transition", { attrs: { name: "cog-error-message" } }, [
          _vm.error && !_vm.readonly
            ? _c("div", { staticClass: "cog-error-message" }, [
                _vm._v(_vm._s(_vm.error))
              ])
            : _vm._e()
        ])
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./src/assets/download.svg":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

      /* harmony default export */ __webpack_exports__["default"] = ({
        functional: true,
        render(_h, _vm) {
          const { _c, _v, data, children = [] } = _vm;

          const {
            class: classNames,
            staticClass,
            style,
            staticStyle,
            attrs = {},
            ...rest
          } = data;

          return _c(
            'svg',
            {
              class: ["cog-icon cog-i-download",classNames,staticClass],
              style: [style,staticStyle],
              attrs: Object.assign({"viewBox":"0 0 18 18","focusable":"false","class":"cog-icon cog-i-download"}, attrs),
              ...rest,
            },
            children.concat([_c('defs'),_c('g',[_c('path',{staticClass:"cog-i-download__ground",attrs:{"d":"M2.03 15.18h13.94"}}),_c('g',{staticClass:"cog-i-download__arrow"},[_c('path',{attrs:{"stroke-linecap":"square","d":"M4.64 7.2L9 11.56l4.36-4.36"}}),_c('path',{attrs:{"d":"M9 1.97v9.59"}})])])])
          )
        }
      });
    

/***/ }),

/***/ "./src/components/Upload.vue":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/Upload.vue?vue&type=template&id=44fc689e&");
/* harmony import */ var _Upload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/components/Upload.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&");
/* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _Upload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (true) {
  var api = __webpack_require__("../../node_modules/.pnpm/vue-hot-reload-api@2.3.4/node_modules/vue-hot-reload-api/dist/index.js")
  api.install(__webpack_require__("vue"))
  if (api.compatible) {
    module.hot.accept()
    if (!api.isRecorded('44fc689e')) {
      api.createRecord('44fc689e', component.options)
    } else {
      api.reload('44fc689e', component.options)
    }
    module.hot.accept("./src/components/Upload.vue?vue&type=template&id=44fc689e&", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/components/Upload.vue?vue&type=template&id=44fc689e&");
(function () {
      api.rerender('44fc689e', {
        render: _Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__["render"],
        staticRenderFns: _Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]
      })
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))
  }
}
component.options.__file = "src/components/Upload.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/Upload.vue?vue&type=script&lang=js&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/babel-loader@8.0.5_@babel+core@7.22.6_webpack@4.46.0/node_modules/babel-loader/lib/index.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_pnpm_babel_loader_8_0_5_babel_core_7_22_6_webpack_4_46_0_node_modules_babel_loader_lib_index_js_ref_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_style_loader_2_0_0_webpack_4_46_0_node_modules_style_loader_dist_cjs_js_ref_5_oneOf_1_0_node_modules_pnpm_css_loader_3_2_0_webpack_4_46_0_node_modules_css_loader_dist_cjs_js_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_pnpm_sass_loader_10_1_1_sass_1_44_0_webpack_4_46_0_node_modules_sass_loader_dist_cjs_js_node_modules_pnpm_sass_resources_loader_2_0_1_node_modules_sass_resources_loader_lib_loader_js_ref_5_oneOf_1_3_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_style_index_0_id_44fc689e_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/style-loader@2.0.0_webpack@4.46.0/node_modules/style-loader/dist/cjs.js?!../../node_modules/.pnpm/css-loader@3.2.0_webpack@4.46.0/node_modules/css-loader/dist/cjs.js!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/.pnpm/sass-loader@10.1.1_sass@1.44.0_webpack@4.46.0/node_modules/sass-loader/dist/cjs.js!../../node_modules/.pnpm/sass-resources-loader@2.0.1/node_modules/sass-resources-loader/lib/loader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=style&index=0&id=44fc689e&lang=scss&");
/* empty/unused harmony star reexport */

/***/ }),

/***/ "./src/components/Upload.vue?vue&type=template&id=44fc689e&":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/loaders/templateLoader.js?!../../node_modules/.pnpm/vue-loader@15.10.0_css-loader@3.2.0_lodash@4.17.21_vue-template-compiler@2.7.15_webpack@4.46.0/node_modules/vue-loader/lib/index.js?!./src/components/Upload.vue?vue&type=template&id=44fc689e&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_loaders_templateLoader_js_ref_5_node_modules_pnpm_vue_loader_15_10_0_css_loader_3_2_0_lodash_4_17_21_vue_template_compiler_2_7_15_webpack_4_46_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Upload_vue_vue_type_template_id_44fc689e___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L2xpYnMvZWxlbWVudC11aS9saWIvbWl4aW5zL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L2xpYnMvZWxlbWVudC11aS9saWIvcHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9saWJzL2VsZW1lbnQtdWkvbGliL3VwbG9hZC5qcyIsIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVXBsb2FkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VcGxvYWQudnVlPzQwOTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVXBsb2FkLnZ1ZT80NTE1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1VwbG9hZC52dWU/M2E5YyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2Rvd25sb2FkLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VcGxvYWQudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1VwbG9hZC52dWU/ZjdmMyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9VcGxvYWQudnVlPzU5ZDkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVXBsb2FkLnZ1ZT9hYWQ5Il0sIm5hbWVzIjpbIlZ1ZSIsInVzZSIsIl9VcGxvYWQiLCJnZXRNZWdhYnl0ZXMiLCJmaWxlIiwic2l6ZSIsInJhc3RlckltYWdlVHlwZXMiLCJuYW1lIiwiY29tcG9uZW50cyIsIklFeCIsIklEb3dubG9hZCIsIkNCdXR0b24iLCJDRmlsZUljb24iLCJtaXhpbnMiLCJyZWNvcmRGb2N1cyIsImluamVjdCIsIm1vZGVsIiwicHJvcCIsImV2ZW50IiwicHJvcHMiLCJlbmNyeXB0IiwiQm9vbGVhbiIsImZpbGVTZXJ2aWNlIiwidHlwZSIsIk9iamVjdCIsInJlcXVpcmVkIiwidmFsdWUiLCJBcnJheSIsImRlZmF1bHQiLCJhbGxvd2VkVHlwZXMiLCJ1bmRlZmluZWQiLCJiYW5uZWRUeXBlcyIsIm1heFNpemUiLCJOdW1iZXIiLCJtYXhGaWxlcyIsImlkIiwiU3RyaW5nIiwicmVhZG9ubHkiLCJkYXRhIiwiaW50ZXJuYWxWYWx1ZSIsIm11bHRpcGxlIiwidXBkYXRpbmciLCJpbml0aWFsRmlsZXMiLCJlcnJvciIsInVwbG9hZFJlZiIsImNhbmNlbGxhdGlvbk1hcCIsInVpZE1hcCIsImRlYm91bmNlZFJlc2V0IiwiZGVib3VuY2UiLCJyZXNldCIsInJlc2V0UHJvbWlzZSIsIkRlZmVycmVkIiwiY29tcHV0ZWQiLCJ1cGxvYWRGaWxlcyIsIiRuZXh0VGljayIsInJlc29sdmUiLCJsaW1pdFJlYWNoZWQiLCJsZW5ndGgiLCJpc0xpc3QiLCJpc0FycmF5IiwibG93ZXJDYXNlQWxsb3dlZFR5cGVzIiwibWFwIiwidCIsInRvTG93ZXJDYXNlIiwid2F0Y2giLCJ2YWwiLCJtb3VudGVkIiwiJGVsIiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsImZvcm1FdmVudHMiLCJvbiIsIkZvcm1FdmVudHMiLCJSZXNldEVudHJ5IiwiJHJlZnMiLCJ1cGxvYWQiLCJkZXN0cm95ZWQiLCJvZmYiLCJtZXRob2RzIiwiY2FuY2VsVXBsb2FkcyIsImFyZ3VtZW50cyIsInBlbmRpbmciLCJmaWxlTGlzdCIsIlByb21pc2UiLCJhbGwiLCJmaWxlRGF0YVRvRmlsZSIsImJpbmQiLCJmb3JFYWNoIiwiY2FuY2VsVXBsb2FkIiwidWlkIiwiZ2V0RGlzcGxheUZpbGVTaXplIiwiY29uY2F0IiwiTWF0aCIsInJvdW5kIiwidXBsb2FkQ2xpY2tlZCIsImdldERvd25sb2FkVGV4dCIsIiRyZXNvdXJjZSIsImdldFJlbW92ZVRleHQiLCJyZXBsYWNlIiwiSWQiLCJ1cmwiLCJnZXREb3dubG9hZFVybCIsIk5hbWUiLCJTaXplIiwiZ2V0RmlsZVJlZiIsImZpbmQiLCJmIiwiaGFzVGh1bWJuYWlsIiwiZmlsZURhdGFSZWYiLCJpbmNsdWRlcyIsImdldEV4dGVuc2lvbiIsImdldFRodW1ibmFpbCIsImdldFRodW1ibmFpbFVybCIsInNwbGl0IiwicG9wIiwidXBsb2FkRmlsZSIsIm9wdGlvbnMiLCJjYW5jZWxQcm9taXNlIiwib25Qcm9ncmVzcyIsInByb21pc2UiLCJ0aGVuIiwiZmlsZURhdGEiLCJhc3NpZ24iLCJ1cGxvYWRlZCIsImUiLCJ1cGxvYWRFcnJvciIsInJlcXVlc3QiLCJzdGF0dXMiLCJSZXF1ZXN0Q2FuY2VsbGVkRXJyb3IiLCIkZW1pdCIsIm1zZyIsIndhc0NhbmNlbGxlZCIsImlkeCIsImZpbmRJbmRleCIsInNwbGljZSIsImZpbGVOYW1lIiwidGFyZ2V0SWQiLCJjYW5jZWwiLCJyZW1vdmVGaWxlIiwiZmlsdGVyIiwibGltaXRFeGNlZWRlZCIsImZpbGVzIiwibWF4RmlsZUNvdW50IiwiZG93bmxvYWRGaWxlIiwicHJldmlld0ZpbGUiLCJleHRlbnNpb24iLCJkb3dubG9hZFVybCIsInNob3VsZFByZXZpZXciLCJnZXRQcmV2aWV3VXJsIiwid2luZG93Iiwib3BlbiIsImJlZm9yZVVwbG9hZCIsImpvaW4iLCJrZXkiLCJwYXN0ZUZpbGUiLCJjb250YWlucyIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIml0ZW1zIiwiY2xpcGJvYXJkRGF0YSIsIm9yaWdpbmFsRXZlbnQiLCJpdGVtIiwia2luZCIsImdldEFzRmlsZSIsImhhbmRsZVN0YXJ0IiwiaGFuZGxlVXBsb2FkQ2xpY2tzIiwidXBsb2FkQnV0dG9uIiwidGFyZ2V0Iiwic3RvcFByb3BhZ2F0aW9uIiwidHJ5RG93bmxvYWRGaWxlIiwiZmxhZ3MiLCJmaWxlRG93bmxvYWRzRGlzYWJsZWQiLCJlbWl0IiwiRm9ybUV2ZW50IiwiVHJ5RG93bmxvYWRPdmVyTGltaXQiLCJ0cnlQcmV2aWV3RmlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQywyQ0FBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGFBQWE7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEU7Ozs7Ozs7QUNkQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxnQ0FBZ0M7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGtCQUFrQjtBQUNsRjtBQUNBLHlEQUF5RCxjQUFjO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGlDQUFpQztBQUNsRix3SEFBd0gsbUJBQW1CLEVBQUU7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDBCQUEwQixFQUFFO0FBQy9ELHlDQUF5QyxlQUFlO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsK0RBQStEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJGQUEyRiwyQkFBMkIsRUFBRTtBQUN4SDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCLGlDQUFpQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDRDQUE0QztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsYUFBYTtBQUNiO0FBQ0EseUJBQXlCLFNBQVMseUJBQXlCLEVBQUU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCLEVBQUU7QUFDekMsY0FBYyxPQUFPLEdBQUcsT0FBTyxXQUFXLHVCQUF1QixFQUFFO0FBQ25FLGNBQWMsT0FBTyxHQUFHLE9BQU8sV0FBVyx1QkFBdUIsRUFBRTtBQUNuRTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQixNQUFNLGVBQWU7QUFDNUU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNEJBQTRCLHFEQUFxRCxNQUFNLGVBQWU7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBHO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7O0FBTUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVAsVUFBVSxFOzs7Ozs7O0FDcGdCVjtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxnQ0FBZ0M7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGtCQUFrQjtBQUNsRjtBQUNBLHlEQUF5RCxjQUFjO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGlDQUFpQztBQUNsRix3SEFBd0gsbUJBQW1CLEVBQUU7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDBCQUEwQixFQUFFO0FBQy9ELHlDQUF5QyxlQUFlO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsK0RBQStEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJGQUEyRiwyQkFBMkIsRUFBRTtBQUN4SDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLCtDQUFvQjs7QUFFN0MsT0FBTzs7QUFFUDtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLHdJQUF1Qzs7QUFFaEUsT0FBTzs7QUFFUDtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLHVDQUFZOztBQUVyQyxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGNBQWM7QUFDZCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLDZCQUE2QixrQ0FBa0M7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtREFBbUQ7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsNkJBQTZCLG1DQUFtQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhDQUE4QztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHdDQUF3QyxpQ0FBaUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHdDQUF3QyxnQ0FBZ0M7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxnSDtBQUNBO0FBQ0E7O0FBRUE7Ozs7OztBQU1BOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUNBQW1DO0FBQ2hELEdBQUc7QUFDSCxhQUFhLGlCQUFpQjtBQUM5QixHQUFHO0FBQ0gsMEJBQTBCLE9BQU8sR0FBRyxXQUFXO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx1REFBdUQsc0JBQXNCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHNIO0FBQ0E7Ozs7OztBQU1BOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixTQUFTO0FBQ3RDLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esc0c7QUFDQTtBQUNBOzs7OztBQUtBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxzRkFBc0Y7QUFDdEY7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1HO0FBQ0E7QUFDQTs7Ozs7QUFLQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUDtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLDRDQUFpQjs7QUFFMUMsT0FBTzs7QUFFUCxVQUFVLEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BwQ1Y7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSwwQ0FBQSxDQUFBQyxHQUFBLENBQUFDLDBFQUFBO0FBRUEsU0FBQUMsYUFBQUMsSUFBQTtFQUNBLE9BQUFBLElBQUEsQ0FBQUMsSUFBQTtBQUNBO0FBRUEsTUFBQUMsZ0JBQUE7QUFFQTtFQUNBQyxJQUFBO0VBQ0FDLFVBQUE7SUFBQUMsbUVBQUE7SUFBQUMsdUVBQUE7SUFBQUMsNERBQUE7SUFBQUM7RUFBQTtFQUNBQyxNQUFBLEdBQUFDLDREQUFBO0VBQ0FDLE1BQUE7RUFDQUMsS0FBQTtJQUNBQyxJQUFBO0lBQ0FDLEtBQUE7RUFDQTtFQUNBQyxLQUFBO0lBQ0FDLE9BQUEsRUFBQUMsT0FBQTtJQUNBQyxXQUFBO01BQUFDLElBQUEsRUFBQUMsTUFBQTtNQUFBQyxRQUFBO0lBQUE7SUFDQUMsS0FBQTtNQUFBSCxJQUFBLEdBQUFDLE1BQUEsRUFBQUcsS0FBQTtNQUFBQyxPQUFBLEVBQUFBLENBQUE7SUFBQTtJQUNBQyxZQUFBO01BQUFOLElBQUEsRUFBQUksS0FBQTtNQUFBQyxPQUFBLEVBQUFFO0lBQUE7SUFDQUMsV0FBQTtNQUFBUixJQUFBLEVBQUFJLEtBQUE7TUFBQUMsT0FBQSxFQUFBQSxDQUFBO0lBQUE7SUFDQUksT0FBQTtNQUFBVCxJQUFBLEVBQUFVLE1BQUE7TUFBQUwsT0FBQSxFQUFBRTtJQUFBO0lBQ0FJLFFBQUE7TUFBQVgsSUFBQSxFQUFBVSxNQUFBO01BQUFMLE9BQUEsRUFBQUU7SUFBQTtJQUNBSyxFQUFBO01BQUFaLElBQUEsRUFBQWEsTUFBQTtNQUFBWCxRQUFBO0lBQUE7SUFDQVksUUFBQSxFQUFBaEI7RUFDQTtFQUNBaUIsS0FBQTtJQUNBLE1BQUFDLGFBQUEsU0FBQWIsS0FBQSxTQUFBYyxRQUFBLGFBQUFkLEtBQUE7SUFDQTtNQUNBZSxRQUFBO01BQ0FDLFlBQUE7TUFDQUgsYUFBQTtNQUNBSSxLQUFBO01BQ0FDLFNBQUE7TUFDQUMsZUFBQTtNQUNBQyxNQUFBO01BQ0FDLGNBQUEsRUFBQUMsa0VBQUEsTUFBQUMsS0FBQTtNQUNBQyxZQUFBLE1BQUFDLHVEQUFBO0lBQ0E7RUFDQTtFQUNBQyxRQUFBO0lBQ0E7QUFDQTtBQUNBO0lBQ0FDLFlBQUE7TUFDQSxLQUFBQyxTQUFBLFlBQUFKLFlBQUEsQ0FBQUssT0FBQTtNQUNBLFlBQUFYLFNBQUEsUUFBQUEsU0FBQSxDQUFBUyxXQUFBO0lBQ0E7SUFDQUcsYUFBQTtNQUNBLFlBQUFqQixhQUFBLENBQUFrQixNQUFBLFVBQUF2QixRQUFBO0lBQ0E7SUFDQXdCLE9BQUE7TUFDQSxPQUFBL0IsS0FBQSxDQUFBZ0MsT0FBQSxNQUFBcEIsYUFBQTtJQUNBO0lBQ0FxQixzQkFBQTtNQUNBO01BQ0EsWUFBQS9CLFlBQUEsUUFBQUEsWUFBQSxDQUFBZ0MsR0FBQSxDQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUMsV0FBQTtJQUNBO0VBQ0E7RUFDQUMsS0FBQTtJQUNBdEMsTUFBQXVDLEdBQUE7TUFDQSxLQUFBMUIsYUFBQSxHQUFBMEIsR0FBQTs7TUFFQTtNQUNBLFVBQUF4QixRQUFBLEVBQ0EsS0FBQVEsS0FBQTtJQUNBO0VBQ0E7RUFDQSxNQUFBaUIsUUFBQTtJQUNBLEtBQUFDLEdBQUEsQ0FBQUMsYUFBQSxlQUFBQyxZQUFBO0lBRUEsU0FBQUMsVUFBQSxFQUNBLEtBQUFBLFVBQUEsQ0FBQUMsRUFBQSxDQUFBQyxzRUFBQSxDQUFBQyxVQUFBLE9BQUExQixjQUFBO0lBRUEsV0FBQUUsS0FBQTtJQUNBLEtBQUFMLFNBQUEsUUFBQThCLEtBQUEsQ0FBQUMsTUFBQTtFQUNBO0VBQ0FDLFVBQUE7SUFDQSxLQUFBTixVQUFBLENBQUFPLEdBQUEsQ0FBQUwsc0VBQUEsQ0FBQUMsVUFBQSxPQUFBMUIsY0FBQTtFQUNBO0VBQ0ErQixPQUFBO0lBQ0EsTUFBQTdCLE1BQUE7TUFBQSxJQUFBOEIsYUFBQSxHQUFBQyxTQUFBLENBQUF2QixNQUFBLFFBQUF1QixTQUFBLFFBQUFsRCxTQUFBLEdBQUFrRCxTQUFBO01BQ0EsVUFBQTlCLFlBQUEsQ0FBQStCLE9BQUEsRUFDQSxLQUFBL0IsWUFBQSxPQUFBQyx1REFBQTtNQUNBLE1BQUErQixRQUFBLEdBQUF2RCxLQUFBLENBQUFnQyxPQUFBLE1BQUFwQixhQUFBLFNBQUFBLGFBQUEsU0FBQUEsYUFBQTtNQUNBLEtBQUFHLFlBQUEsU0FBQXlDLE9BQUEsQ0FBQUMsR0FBQSxDQUFBRixRQUFBLENBQUFyQixHQUFBLE1BQUF3QixjQUFBLENBQUFDLElBQUE7TUFDQSxJQUFBUCxhQUFBLEVBQ0EsS0FBQTFCLFdBQUEsQ0FBQWtDLE9BQUEsQ0FBQW5GLElBQUEsU0FBQW9GLFlBQUEsQ0FBQXBGLElBQUEsQ0FBQXFGLEdBQUE7TUFDQSxZQUFBdkMsWUFBQTtJQUNBO0lBQ0F3QyxtQkFBQXRGLElBQUE7TUFDQSxJQUFBQSxJQUFBLENBQUFDLElBQUEsV0FDQSxVQUFBc0YsTUFBQSxDQUFBQyxJQUFBLENBQUFDLEtBQUEsQ0FBQXpGLElBQUEsQ0FBQUMsSUFBQSx1Q0FDQSxJQUFBRCxJQUFBLENBQUFDLElBQUEsU0FDQSxVQUFBc0YsTUFBQSxDQUFBQyxJQUFBLENBQUFDLEtBQUEsQ0FBQXpGLElBQUEsQ0FBQUMsSUFBQSxnQ0FFQSxVQUFBc0YsTUFBQSxDQUFBdkYsSUFBQSxDQUFBQyxJQUFBO0lBQ0E7SUFDQXlGLGNBQUE7TUFDQSxLQUFBbkQsS0FBQTtJQUNBO0lBQ0FvRCxnQkFBQTNGLElBQUE7TUFDQSxZQUFBNEYsU0FBQSxxQ0FBQTVGLElBQUEsQ0FBQUcsSUFBQTtJQUNBO0lBQ0EwRixjQUFBN0YsSUFBQTtNQUNBLFlBQUE0RixTQUFBLGdCQUFBRSxPQUFBLFdBQUE5RixJQUFBLENBQUFHLElBQUE7SUFDQTtJQUNBLE1BQUE4RSxlQUFBakYsSUFBQTtNQUNBO1FBQ0FxRixHQUFBLEVBQUFyRixJQUFBLENBQUErRixFQUFBO1FBQ0FDLEdBQUEsYUFBQTlFLFdBQUEsQ0FBQStFLGNBQUEsQ0FBQWpHLElBQUE7UUFDQUcsSUFBQSxFQUFBSCxJQUFBLENBQUFrRyxJQUFBO1FBQ0FqRyxJQUFBLEVBQUFELElBQUEsQ0FBQW1HO01BQ0E7SUFDQTtJQUNBQyxXQUFBcEcsSUFBQTtNQUNBLFlBQUFzRCxNQUFBLFFBQUFuQixhQUFBLENBQUFrRSxJQUFBLENBQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBUCxFQUFBLEtBQUEvRixJQUFBLENBQUFxRixHQUFBLFNBQUFsRCxhQUFBO0lBQ0E7SUFDQW9FLGFBQUF2RyxJQUFBO01BQ0EsTUFBQXdHLFdBQUEsUUFBQUosVUFBQSxDQUFBcEcsSUFBQTtNQUNBLE9BQUF3RyxXQUFBLElBQUFBLFdBQUEsQ0FBQVQsRUFBQSxJQUFBN0YsZ0JBQUEsQ0FBQXVHLFFBQUEsTUFBQUMsWUFBQSxDQUFBMUcsSUFBQTtJQUNBO0lBQ0EyRyxhQUFBM0csSUFBQTtNQUNBLFlBQUFrQixXQUFBLENBQUEwRixlQUFBLE1BQUFSLFVBQUEsQ0FBQXBHLElBQUE7SUFDQTtJQUNBMEcsYUFBQTFHLElBQUE7TUFDQSxPQUFBQSxJQUFBLENBQUFHLElBQUEsR0FBQUgsSUFBQSxDQUFBRyxJQUFBLENBQUEwRyxLQUFBLE1BQUFDLEdBQUEsR0FBQW5ELFdBQUE7SUFDQTtJQUNBO0lBQ0FvRCxXQUFBQyxPQUFBO01BQ0EsTUFBQUMsYUFBQSxPQUFBbEUsdURBQUE7TUFDQSxLQUFBTixlQUFBLENBQUF1RSxPQUFBLENBQUFoSCxJQUFBLENBQUFxRixHQUFBLElBQUE0QixhQUFBLENBQUE5RCxPQUFBLENBQUErQixJQUFBLENBQUErQixhQUFBO01BQ0EsWUFBQS9GLFdBQUEsQ0FBQXFELE1BQUEsQ0FBQXlDLE9BQUEsQ0FBQWhILElBQUE7UUFBQWtILFVBQUEsRUFBQUYsT0FBQSxDQUFBRSxVQUFBO1FBQUFsRyxPQUFBLE9BQUFBLE9BQUE7UUFBQWlHLGFBQUEsRUFBQUEsYUFBQSxDQUFBRTtNQUFBLEdBQ0FDLElBQUEsT0FBQUMsUUFBQTtRQUNBO1FBQ0FqRyxNQUFBLENBQUFrRyxNQUFBLE1BQUE5RSxTQUFBLENBQUFTLFdBQUEsQ0FBQW9ELElBQUEsQ0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFqQixHQUFBLEtBQUEyQixPQUFBLENBQUFoSCxJQUFBLENBQUFxRixHQUFBLGNBQUFKLGNBQUEsQ0FBQW9DLFFBQUE7UUFDQSxLQUFBM0UsTUFBQSxDQUFBMkUsUUFBQSxDQUFBdEIsRUFBQSxJQUFBaUIsT0FBQSxDQUFBaEgsSUFBQSxDQUFBcUYsR0FBQTtRQUNBLEtBQUFrQyxRQUFBLENBQUFGLFFBQUE7UUFDQSxZQUFBNUUsZUFBQSxDQUFBdUUsT0FBQSxDQUFBaEgsSUFBQSxDQUFBcUYsR0FBQTtNQUNBLEdBQUFtQyxDQUFBO1FBQ0EsS0FBQUMsV0FBQSxDQUFBVCxPQUFBLENBQUFoSCxJQUFBLEVBQUF3SCxDQUFBLENBQUFFLE9BQUEsSUFBQUYsQ0FBQSxDQUFBRSxPQUFBLENBQUFDLE1BQUEsZ0JBQUEvQixTQUFBLGtEQUFBNEIsQ0FBQSxZQUFBSSw4RUFBQTtNQUNBO0lBQ0E7SUFDQUwsU0FBQWYsV0FBQTtNQUNBLEtBQUFuRSxRQUFBO01BQ0EsS0FBQXdGLEtBQUEsZ0JBQUF2RSxNQUFBLFFBQUFuQixhQUFBLENBQUFvRCxNQUFBLENBQUFpQixXQUFBLElBQUFBLFdBQUE7TUFDQSxLQUFBcUIsS0FBQSxrQkFBQXJCLFdBQUE7TUFDQSxLQUFBdEQsU0FBQTtRQUFBLEtBQUFiLFFBQUE7TUFBQTtJQUNBO0lBQ0FvRixZQUFBekgsSUFBQSxFQUFBOEgsR0FBQSxFQUFBQyxZQUFBO01BQ0EsTUFBQUMsR0FBQSxRQUFBeEYsU0FBQSxDQUFBUyxXQUFBLENBQUFnRixTQUFBLENBQUEzQixDQUFBLElBQUFBLENBQUEsQ0FBQWpCLEdBQUEsS0FBQXJGLElBQUEsQ0FBQXFGLEdBQUE7TUFDQSxJQUFBMkMsR0FBQSxPQUNBLEtBQUF4RixTQUFBLENBQUFTLFdBQUEsQ0FBQWlGLE1BQUEsQ0FBQUYsR0FBQTtNQUVBLEtBQUFELFlBQUEsRUFDQSxLQUFBeEYsS0FBQSxHQUFBdUYsR0FBQSxTQUFBbEMsU0FBQTtRQUFBdUMsUUFBQSxFQUFBbkksSUFBQSxDQUFBRztNQUFBO0lBQ0E7SUFDQWlGLGFBQUFnRCxRQUFBO01BQ0EsTUFBQUMsTUFBQSxRQUFBNUYsZUFBQSxDQUFBMkYsUUFBQTtNQUNBLElBQUFDLE1BQUE7UUFDQUEsTUFBQTtRQUNBLFlBQUE1RixlQUFBLENBQUEyRixRQUFBO01BQ0E7SUFDQTtJQUNBRSxXQUFBRixRQUFBO01BQ0EsS0FBQS9GLFFBQUE7TUFDQSxLQUFBRSxLQUFBO01BRUEsS0FBQTdCLFdBQUE7TUFDQTtNQUNBLEtBQUFtSCxLQUFBLGdCQUFBdkUsTUFBQSxRQUFBbkIsYUFBQSxDQUFBb0csTUFBQSxDQUFBakMsQ0FBQSxJQUFBQSxDQUFBLENBQUFQLEVBQUEsS0FBQXFDLFFBQUE7O01BRUE7TUFDQSxLQUFBNUYsU0FBQSxDQUFBUyxXQUFBLENBQUFpRixNQUFBLE1BQUExRixTQUFBLENBQUFTLFdBQUEsQ0FBQWdGLFNBQUEsQ0FBQTNCLENBQUEsSUFBQUEsQ0FBQSxDQUFBakIsR0FBQSxLQUFBK0MsUUFBQTtNQUNBLEtBQUFsRixTQUFBO1FBQUEsS0FBQWIsUUFBQTtNQUFBO0lBQ0E7SUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0FtRyxjQUFBQyxLQUFBO01BQ0EsS0FBQWxHLEtBQUEsUUFBQXFELFNBQUE7UUFBQThDLFlBQUEsT0FBQTVHO01BQUE7SUFDQTtJQUNBLE1BQUE2RyxhQUFBM0ksSUFBQTtNQUNBLFVBQUFrQixXQUFBLEVBQ0E7TUFFQSxNQUFBc0YsV0FBQSxRQUFBSixVQUFBLENBQUFwRyxJQUFBO01BQ0EsS0FBQWtCLFdBQUEsQ0FBQXlILFlBQUEsQ0FBQW5DLFdBQUE7SUFDQTtJQUNBLE1BQUFvQyxZQUFBNUksSUFBQTtNQUNBLFVBQUFrQixXQUFBLEVBQ0E7TUFDQSxNQUFBc0YsV0FBQSxRQUFBSixVQUFBLENBQUFwRyxJQUFBO01BQ0EsTUFBQUMsSUFBQSxHQUFBRixZQUFBLENBQUFDLElBQUE7TUFDQSxNQUFBNkksU0FBQSxRQUFBbkMsWUFBQSxDQUFBMUcsSUFBQTtNQUVBLElBQUE4SSxXQUFBLFFBQUE1SCxXQUFBLENBQUErRSxjQUFBLENBQUFPLFdBQUE7TUFDQSxJQUFBdUMsYUFBQTtNQUVBLFFBQUFGLFNBQUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtVQUNBLElBQUE1SSxJQUFBLE9BQ0E4SSxhQUFBO1VBQ0E7UUFDQTtRQUNBO1VBQ0EsSUFBQTlJLElBQUEsTUFDQThJLGFBQUE7VUFDQTtRQUNBO1VBQ0FELFdBQUE7VUFDQTtRQUNBO1VBQ0EsS0FBQTVJLGdCQUFBLENBQUF1RyxRQUFBLENBQUFvQyxTQUFBLEdBQ0E7VUFDQUMsV0FBQTtVQUNBO01BQ0E7TUFFQSxJQUFBQyxhQUFBLEVBQ0FELFdBQUEsY0FBQTVILFdBQUEsQ0FBQThILGFBQUEsQ0FBQXhDLFdBQUE7TUFFQXlDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixXQUFBO0lBQ0E7SUFDQUssYUFBQW5KLElBQUE7TUFDQSxLQUFBdUMsS0FBQTs7TUFFQTtNQUNBLFNBQUFaLFdBQUEsQ0FBQThFLFFBQUEsTUFBQUMsWUFBQSxDQUFBMUcsSUFBQTtRQUNBLEtBQUF1QyxLQUFBLFFBQUFxRCxTQUFBO1FBQ0E7TUFDQTs7TUFFQTtNQUNBLFNBQUFwQyxxQkFBQSxDQUFBSCxNQUFBLGdCQUFBRyxxQkFBQSxDQUFBaUQsUUFBQSxNQUFBQyxZQUFBLENBQUExRyxJQUFBO1FBQ0EsS0FBQXVDLEtBQUEsUUFBQXFELFNBQUE7VUFBQW5FLFlBQUEsT0FBQUEsWUFBQSxDQUFBMkgsSUFBQTtRQUFBO1FBQ0E7TUFDQTs7TUFFQTtNQUNBLFNBQUF4SCxPQUFBLElBQUE3QixZQUFBLENBQUFDLElBQUEsU0FBQTRCLE9BQUE7UUFDQSxLQUFBVyxLQUFBLFFBQUFxRCxTQUFBO1VBQUFoRSxPQUFBLE9BQUFBO1FBQUE7UUFDQTtNQUNBOztNQUVBO01BQ0EsSUFBQTVCLElBQUEsQ0FBQUMsSUFBQTtRQUNBLEtBQUFzQyxLQUFBLFFBQUFxRCxTQUFBO1FBQ0E7TUFDQTtJQUNBO0lBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ0F5RCxJQUFBdEgsRUFBQTtNQUNBLFlBQUFXLE1BQUEsQ0FBQVgsRUFBQSxLQUFBQSxFQUFBO0lBQ0E7SUFDQXVILFVBQUF4SSxLQUFBO01BQ0EsU0FBQWlELEdBQUEsQ0FBQXdGLFFBQUEsQ0FBQUMsUUFBQSxDQUFBQyxhQUFBLFdBQUF4SCxRQUFBO1FBQ0EsTUFBQXlILEtBQUEsSUFBQTVJLEtBQUEsQ0FBQTZJLGFBQUEsSUFBQTdJLEtBQUEsQ0FBQThJLGFBQUEsQ0FBQUQsYUFBQSxFQUFBRCxLQUFBO1FBQ0EsV0FBQUcsSUFBQSxJQUFBSCxLQUFBO1VBQ0EsSUFBQUcsSUFBQSxDQUFBQyxJQUFBO1lBQ0EsTUFBQTlKLElBQUEsR0FBQTZKLElBQUEsQ0FBQUUsU0FBQTtZQUNBLEtBQUF6RixLQUFBLENBQUFDLE1BQUEsQ0FBQXlGLFdBQUEsQ0FBQWhLLElBQUE7WUFDQSxLQUFBc0UsS0FBQSxDQUFBQyxNQUFBLENBQUFELEtBQUEsaUJBQUFDLE1BQUEsQ0FBQXZFLElBQUE7VUFDQTtRQUNBO01BQ0E7SUFDQTtJQUNBaUssbUJBQUFuSixLQUFBO01BQ0EsVUFBQXdELEtBQUEsQ0FBQTRGLFlBQUEsQ0FBQW5HLEdBQUEsQ0FBQXdGLFFBQUEsQ0FBQXpJLEtBQUEsQ0FBQXFKLE1BQUEsR0FDQXJKLEtBQUEsQ0FBQXNKLGVBQUE7SUFDQTtJQUNBQyxnQkFBQXJLLElBQUEsRUFBQWMsS0FBQTtNQUNBLFNBQUF3SixLQUFBLENBQUFDLHFCQUFBO1FBQ0F6SixLQUFBLENBQUFzSixlQUFBO1FBQ0EsS0FBQWxHLFVBQUEsQ0FBQXNHLElBQUEsS0FBQUMsNEVBQUEsQ0FBQXJHLHNFQUFBLENBQUFzRyxvQkFBQTtNQUNBLE9BQ0E7UUFDQSxLQUFBL0IsWUFBQSxDQUFBM0ksSUFBQTtNQUNBO0lBQ0E7SUFDQTJLLGVBQUEzSyxJQUFBLEVBQUFjLEtBQUE7TUFDQSxTQUFBd0osS0FBQSxDQUFBQyxxQkFBQTtRQUNBekosS0FBQSxDQUFBc0osZUFBQTtRQUNBLEtBQUFsRyxVQUFBLENBQUFzRyxJQUFBLEtBQUFDLDRFQUFBLENBQUFyRyxzRUFBQSxDQUFBc0csb0JBQUE7TUFDQSxPQUNBO1FBQ0EsS0FBQTlCLFdBQUEsQ0FBQTVJLElBQUE7TUFDQTtJQUNBO0VBQ0E7QUFDQSxHOzs7Ozs7O0FDdlhBLDJCQUEyQixtQkFBTyxDQUFDLHNHQUE0RztBQUMvSTtBQUNBLGNBQWMsUUFBUyxzSUFBc0ksaURBQWlELG1DQUFtQyxHQUFHLDZHQUE2RyxrQkFBa0Isd0JBQXdCLGtEQUFrRCx5REFBeUQsb0RBQW9ELHFDQUFxQyxHQUFHLCtGQUErRixrQkFBa0IsR0FBRyxpR0FBaUcsOEVBQThFLHdDQUF3QyxpQkFBaUIsR0FBRyxpRkFBaUYsdUJBQXVCLEdBQUcsdUVBQXVFLHNDQUFzQywyQ0FBMkMsMENBQTBDLHFCQUFxQix1Q0FBdUMsR0FBRyxtRkFBbUYsY0FBYyxHQUFHLDZFQUE2RSxrQkFBa0IsdUJBQXVCLHdCQUF3QixxQ0FBcUMsdUNBQXVDLEdBQUcseUZBQXlGLGlEQUFpRCxHQUFHLHVGQUF1Rix3Q0FBd0MsR0FBRyxvTkFBb04scUJBQXFCLHdCQUF3QixxQkFBcUIsdUNBQXVDLEdBQUcseUZBQXlGLHVCQUF1Qix5QkFBeUIsNEJBQTRCLGdCQUFnQix1REFBdUQsY0FBYyxzQkFBc0IsNkJBQTZCLHFCQUFxQixHQUFHLHFJQUFxSSx1REFBdUQsR0FBRyx5SUFBeUksdUNBQXVDLEdBQUcsK0hBQStILHVDQUF1QyxHQUFHLDZHQUE2RyxjQUFjLEdBQUcsZ01BQWdNLHFCQUFxQixHQUFHLDBLQUEwSyxvQkFBb0IsZUFBZSxHQUFHLDBOQUEwTix3QkFBd0IsR0FBRyxpRkFBaUYsa0NBQWtDLHlDQUF5QyxHQUFHLHFJQUFxSSxrQkFBa0IsR0FBRyw2RkFBNkYsa0JBQWtCLEdBQUcseUVBQXlFLDBCQUEwQixHQUFHLHVFQUF1RSxvQkFBb0IscUJBQXFCLDRCQUE0Qix3QkFBd0IsR0FBRyxpRkFBaUYsd0JBQXdCLGlCQUFpQix3QkFBd0IsaUNBQWlDLEdBQUcscUZBQXFGLHNCQUFzQixHQUFHLHVHQUF1Ryx1QkFBdUIsR0FBRywwS0FBMEssa0JBQWtCLDBCQUEwQixlQUFlLEdBQUcsME5BQTBOLDBCQUEwQixHQUFHLG1FQUFtRSxzQkFBc0IseUJBQXlCLEdBQUcsa0tBQWtLLHVDQUF1QyxHQUFHLCtKQUErSixxQ0FBcUMsR0FBRyxpSkFBaUoscUJBQXFCLG9CQUFvQixHQUFHOzs7Ozs7Ozs7QUNGemlNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUo7QUFDdkosWUFBOHhCOztBQUU5eEIsZUFBZSxjQUFjOztBQUU3QjtBQUNBOztBQUVBLGFBQWEsOEpBQUcsQ0FBQywydEJBQU87OztBQUd4QixJQUFJLElBQVU7QUFDZCxPQUFPLDJ0QkFBTztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDJ0QkFBTzs7QUFFM0I7QUFDQSxNQUFNLHdzQkFBNnZCO0FBQ253QixNQUFNO0FBQUE7QUFBQTtBQUNOLHNDQUFzQywydEJBQU87QUFDN0M7O0FBRUE7QUFDQTs7QUFFQSwwQkFBMEIsMnRCQUFPOztBQUVqQyxxQkFBcUIsMnRCQUFPO0FBQzVCLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRWUsMHhCQUFPLGFBQWEsRTs7Ozs7Ozs7QUNuRW5DO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGFBQWE7QUFDYixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNLGdDQUFnQyxFQUFFO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQ0FBc0M7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZEQUE2RDtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLGlCQUFpQjtBQUNqQjtBQUNBLDJCQUEyQix1Q0FBdUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQ0FBbUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1Q0FBdUM7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxhQUFhO0FBQzdDLG1DQUFtQztBQUNuQyx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixTQUFTLDRCQUE0QixFQUFFO0FBQ2pFO0FBQ0EseUJBQXlCLG1DQUFtQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUMvTkEsTUFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQiw4QkFBOEI7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNEVBQTRFO0FBQ2hIO0FBQ0EsYUFBYTtBQUNiLDJEQUEyRCw0Q0FBNEMseUJBQXlCLFVBQVUsb0NBQW9DLGFBQWEsT0FBTyw2REFBNkQsYUFBYSxPQUFPLG9CQUFvQjtBQUN2UztBQUNBO0FBQ0EsT0FBTzs7Ozs7Ozs7O0FDMUJQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBcUY7QUFDM0I7QUFDTDtBQUMwQjs7O0FBRy9FO0FBQ2tOO0FBQ2xOLGdCQUFnQiw0TkFBVTtBQUMxQixFQUFFLDRFQUFNO0FBQ1IsRUFBRSxpRkFBTTtBQUNSLEVBQUUsMEZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJLElBQVU7QUFDZCxZQUFZLG1CQUFPLENBQUMsaUdBQW9LO0FBQ3hMLGNBQWMsbUJBQU8sQ0FBQyxLQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsNERBQTZDLEVBQUU7QUFBQTtBQUNyRTtBQUNBLGdCQUFnQixpRkFBTTtBQUN0Qix5QkFBeUIsMEZBQWU7QUFDeEMsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDZSxnRjs7Ozs7Ozs7QUN2Q2Y7QUFBQTtBQUFBLHdDQUFvWCxDQUFnQix1YUFBRyxFQUFDLEM7Ozs7Ozs7O0FDQXhZO0FBQUE7QUFBQSx3Qzs7Ozs7Ozs7QUNBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiVXBsb2FkLjcwOWI0Yjc5M2Q1MDk3MjZjMzllLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2xvY2FsZSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvbG9jYWxlXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBtZXRob2RzOiB7XG4gICAgdCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9sb2NhbGUudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cbn07IiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0L1wiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5OCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBub3JtYWxpemVDb21wb25lbnQ7IH0pO1xuLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5mdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciAvKiBzZXJ2ZXIgb25seSAqLyxcbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID1cbiAgICB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJyA/IHNjcmlwdEV4cG9ydHMub3B0aW9ucyA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikge1xuICAgIC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgKG9wdGlvbnMuZnVuY3Rpb25hbCA/IHRoaXMucGFyZW50IDogdGhpcykuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFU00gQ09NUEFUIEZMQUdcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS01IUM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMS4xX2Nzcy1sb2FkZXJANS4yLjdfcHJldHRpZXJAMS4xOC4yX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9wYWNrYWdlcy9wcm9ncmVzcy9zcmMvcHJvZ3Jlc3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ2ZDc1M2M5XG52YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7XG4gICAgICBzdGF0aWNDbGFzczogXCJlbC1wcm9ncmVzc1wiLFxuICAgICAgY2xhc3M6IFtcbiAgICAgICAgXCJlbC1wcm9ncmVzcy0tXCIgKyBfdm0udHlwZSxcbiAgICAgICAgX3ZtLnN0YXR1cyA/IFwiaXMtXCIgKyBfdm0uc3RhdHVzIDogXCJcIixcbiAgICAgICAge1xuICAgICAgICAgIFwiZWwtcHJvZ3Jlc3MtLXdpdGhvdXQtdGV4dFwiOiAhX3ZtLnNob3dUZXh0LFxuICAgICAgICAgIFwiZWwtcHJvZ3Jlc3MtLXRleHQtaW5zaWRlXCI6IF92bS50ZXh0SW5zaWRlXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBhdHRyczoge1xuICAgICAgICByb2xlOiBcInByb2dyZXNzYmFyXCIsXG4gICAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiBfdm0ucGVyY2VudGFnZSxcbiAgICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IFwiMFwiLFxuICAgICAgICBcImFyaWEtdmFsdWVtYXhcIjogXCIxMDBcIlxuICAgICAgfVxuICAgIH0sXG4gICAgW1xuICAgICAgX3ZtLnR5cGUgPT09IFwibGluZVwiXG4gICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJlbC1wcm9ncmVzcy1iYXJcIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImVsLXByb2dyZXNzLWJhcl9fb3V0ZXJcIixcbiAgICAgICAgICAgICAgICBzdHlsZTogeyBoZWlnaHQ6IF92bS5zdHJva2VXaWR0aCArIFwicHhcIiB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImVsLXByb2dyZXNzLWJhcl9faW5uZXJcIixcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS5iYXJTdHlsZVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dUZXh0ICYmIF92bS50ZXh0SW5zaWRlXG4gICAgICAgICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJlbC1wcm9ncmVzcy1iYXJfX2lubmVyVGV4dFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5jb250ZW50KSldXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJlbC1wcm9ncmVzcy1jaXJjbGVcIixcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaGVpZ2h0OiBfdm0ud2lkdGggKyBcInB4XCIsIHdpZHRoOiBfdm0ud2lkdGggKyBcInB4XCIgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJzdmdcIiwgeyBhdHRyczogeyB2aWV3Qm94OiBcIjAgMCAxMDAgMTAwXCIgfSB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJwYXRoXCIsIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImVsLXByb2dyZXNzLWNpcmNsZV9fdHJhY2tcIixcbiAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0udHJhaWxQYXRoU3R5bGUsXG4gICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICBkOiBfdm0udHJhY2tQYXRoLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IFwiI2U1ZTlmMlwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBfdm0ucmVsYXRpdmVTdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogXCJub25lXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBfYyhcInBhdGhcIiwge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZWwtcHJvZ3Jlc3MtY2lyY2xlX19wYXRoXCIsXG4gICAgICAgICAgICAgICAgICBzdHlsZTogX3ZtLmNpcmNsZVBhdGhTdHlsZSxcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGQ6IF92bS50cmFja1BhdGgsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogX3ZtLnN0cm9rZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogX3ZtLnN0cm9rZUxpbmVjYXAsXG4gICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IF92bS5wZXJjZW50YWdlID8gX3ZtLnJlbGF0aXZlU3Ryb2tlV2lkdGggOiAwXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApLFxuICAgICAgX3ZtLnNob3dUZXh0ICYmICFfdm0udGV4dEluc2lkZVxuICAgICAgICA/IF9jKFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZWwtcHJvZ3Jlc3NfX3RleHRcIixcbiAgICAgICAgICAgICAgc3R5bGU6IHsgZm9udFNpemU6IF92bS5wcm9ncmVzc1RleHRTaXplICsgXCJweFwiIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICFfdm0uc3RhdHVzXG4gICAgICAgICAgICAgICAgPyBbX3ZtLl92KF92bS5fcyhfdm0uY29udGVudCkpXVxuICAgICAgICAgICAgICAgIDogX2MoXCJpXCIsIHsgY2xhc3M6IF92bS5pY29uQ2xhc3MgfSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAyXG4gICAgICAgICAgKVxuICAgICAgICA6IF92bS5fZSgpXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvcHJvZ3Jlc3Mvc3JjL3Byb2dyZXNzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NmQ3NTNjOVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiBDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2JhYmVsLWxvYWRlckA4LjMuMF9AYmFiZWwrY29yZUA3LjI1LjJfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWI/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3BhY2thZ2VzL3Byb2dyZXNzL3NyYy9wcm9ncmVzcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHByb2dyZXNzdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMgPSAoe1xuICBuYW1lOiAnRWxQcm9ncmVzcycsXG4gIHByb3BzOiB7XG4gICAgdHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2xpbmUnLFxuICAgICAgdmFsaWRhdG9yOiB2YWwgPT4gWydsaW5lJywgJ2NpcmNsZScsICdkYXNoYm9hcmQnXS5pbmRleE9mKHZhbCkgPiAtMVxuICAgIH0sXG4gICAgcGVyY2VudGFnZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMCxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdmFsaWRhdG9yOiB2YWwgPT4gdmFsID49IDAgJiYgdmFsIDw9IDEwMFxuICAgIH0sXG4gICAgc3RhdHVzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWxpZGF0b3I6IHZhbCA9PiBbJ3N1Y2Nlc3MnLCAnZXhjZXB0aW9uJywgJ3dhcm5pbmcnXS5pbmRleE9mKHZhbCkgPiAtMVxuICAgIH0sXG4gICAgc3Ryb2tlV2lkdGg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDZcbiAgICB9LFxuICAgIHN0cm9rZUxpbmVjYXA6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdyb3VuZCdcbiAgICB9LFxuICAgIHRleHRJbnNpZGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgd2lkdGg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDEyNlxuICAgIH0sXG4gICAgc2hvd1RleHQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICBmb3JtYXQ6IEZ1bmN0aW9uXG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgYmFyU3R5bGUoKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgICAgc3R5bGUud2lkdGggPSB0aGlzLnBlcmNlbnRhZ2UgKyAnJSc7XG4gICAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmdldEN1cnJlbnRDb2xvcih0aGlzLnBlcmNlbnRhZ2UpO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG4gICAgcmVsYXRpdmVTdHJva2VXaWR0aCgpIHtcbiAgICAgIHJldHVybiAodGhpcy5zdHJva2VXaWR0aCAvIHRoaXMud2lkdGggKiAxMDApLnRvRml4ZWQoMSk7XG4gICAgfSxcbiAgICByYWRpdXMoKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnY2lyY2xlJyB8fCB0aGlzLnR5cGUgPT09ICdkYXNoYm9hcmQnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCg1MCAtIHBhcnNlRmxvYXQodGhpcy5yZWxhdGl2ZVN0cm9rZVdpZHRoKSAvIDIsIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhY2tQYXRoKCkge1xuICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXM7XG4gICAgICBjb25zdCBpc0Rhc2hib2FyZCA9IHRoaXMudHlwZSA9PT0gJ2Rhc2hib2FyZCc7XG4gICAgICByZXR1cm4gYFxuICAgICAgICAgIE0gNTAgNTBcbiAgICAgICAgICBtIDAgJHtpc0Rhc2hib2FyZCA/ICcnIDogJy0nfSR7cmFkaXVzfVxuICAgICAgICAgIGEgJHtyYWRpdXN9ICR7cmFkaXVzfSAwIDEgMSAwICR7aXNEYXNoYm9hcmQgPyAnLScgOiAnJ30ke3JhZGl1cyAqIDJ9XG4gICAgICAgICAgYSAke3JhZGl1c30gJHtyYWRpdXN9IDAgMSAxIDAgJHtpc0Rhc2hib2FyZCA/ICcnIDogJy0nfSR7cmFkaXVzICogMn1cbiAgICAgICAgICBgO1xuICAgIH0sXG4gICAgcGVyaW1ldGVyKCkge1xuICAgICAgcmV0dXJuIDIgKiBNYXRoLlBJICogdGhpcy5yYWRpdXM7XG4gICAgfSxcbiAgICByYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2Rhc2hib2FyZCcgPyAwLjc1IDogMTtcbiAgICB9LFxuICAgIHN0cm9rZURhc2hvZmZzZXQoKSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSAtMSAqIHRoaXMucGVyaW1ldGVyICogKDEgLSB0aGlzLnJhdGUpIC8gMjtcbiAgICAgIHJldHVybiBgJHtvZmZzZXR9cHhgO1xuICAgIH0sXG4gICAgdHJhaWxQYXRoU3R5bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6IGAke3RoaXMucGVyaW1ldGVyICogdGhpcy5yYXRlfXB4LCAke3RoaXMucGVyaW1ldGVyfXB4YCxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogdGhpcy5zdHJva2VEYXNob2Zmc2V0XG4gICAgICB9O1xuICAgIH0sXG4gICAgY2lyY2xlUGF0aFN0eWxlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHt0aGlzLnBlcmltZXRlciAqIHRoaXMucmF0ZSAqICh0aGlzLnBlcmNlbnRhZ2UgLyAxMDApfXB4LCAke3RoaXMucGVyaW1ldGVyfXB4YCxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogdGhpcy5zdHJva2VEYXNob2Zmc2V0LFxuICAgICAgICB0cmFuc2l0aW9uOiAnc3Ryb2tlLWRhc2hhcnJheSAwLjZzIGVhc2UgMHMsIHN0cm9rZSAwLjZzIGVhc2UnXG4gICAgICB9O1xuICAgIH0sXG4gICAgc3Ryb2tlKCkge1xuICAgICAgbGV0IHJldDtcbiAgICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICAgIHJldCA9IHRoaXMuZ2V0Q3VycmVudENvbG9yKHRoaXMucGVyY2VudGFnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdHVzKSB7XG4gICAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgICAgICByZXQgPSAnIzEzY2U2Nic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdleGNlcHRpb24nOlxuICAgICAgICAgICAgcmV0ID0gJyNmZjQ5NDknO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd2FybmluZyc6XG4gICAgICAgICAgICByZXQgPSAnI2U2YTIzYyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0ID0gJyMyMGEwZmYnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgaWNvbkNsYXNzKCkge1xuICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAnd2FybmluZycpIHtcbiAgICAgICAgcmV0dXJuICdlbC1pY29uLXdhcm5pbmcnO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2xpbmUnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnID8gJ2VsLWljb24tY2lyY2xlLWNoZWNrJyA6ICdlbC1pY29uLWNpcmNsZS1jbG9zZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09ICdzdWNjZXNzJyA/ICdlbC1pY29uLWNoZWNrJyA6ICdlbC1pY29uLWNsb3NlJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHByb2dyZXNzVGV4dFNpemUoKSB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlID09PSAnbGluZScgPyAxMiArIHRoaXMuc3Ryb2tlV2lkdGggKiAwLjQgOiB0aGlzLndpZHRoICogMC4xMTExMTEgKyAyO1xuICAgIH0sXG4gICAgY29udGVudCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5mb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMucGVyY2VudGFnZSkgfHwgJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5wZXJjZW50YWdlfSVgO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldEN1cnJlbnRDb2xvcihwZXJjZW50YWdlKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuY29sb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3IocGVyY2VudGFnZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmNvbG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldExldmVsQ29sb3IocGVyY2VudGFnZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRMZXZlbENvbG9yKHBlcmNlbnRhZ2UpIHtcbiAgICAgIGNvbnN0IGNvbG9yQXJyYXkgPSB0aGlzLmdldENvbG9yQXJyYXkoKS5zb3J0KChhLCBiKSA9PiBhLnBlcmNlbnRhZ2UgLSBiLnBlcmNlbnRhZ2UpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xvckFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjb2xvckFycmF5W2ldLnBlcmNlbnRhZ2UgPiBwZXJjZW50YWdlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yQXJyYXlbaV0uY29sb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2xvckFycmF5W2NvbG9yQXJyYXkubGVuZ3RoIC0gMV0uY29sb3I7XG4gICAgfSxcbiAgICBnZXRDb2xvckFycmF5KCkge1xuICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmNvbG9yO1xuICAgICAgY29uc3Qgc3BhbiA9IDEwMCAvIGNvbG9yLmxlbmd0aDtcbiAgICAgIHJldHVybiBjb2xvci5tYXAoKHNlcmllc0NvbG9yLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHNlcmllc0NvbG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2xvcjogc2VyaWVzQ29sb3IsXG4gICAgICAgICAgICBwcm9ncmVzczogKGluZGV4ICsgMSkgKiBzcGFuXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWVzQ29sb3I7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy9wcm9ncmVzcy9zcmMvcHJvZ3Jlc3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXG4gLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX3Byb2dyZXNzdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMgPSAocHJvZ3Jlc3N2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyk7IFxuLy8gRVhURVJOQUwgTU9EVUxFOiBDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcbnZhciBjb21wb25lbnROb3JtYWxpemVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy9wcm9ncmVzcy9zcmMvcHJvZ3Jlc3MudnVlXG5cblxuXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuXG52YXIgY29tcG9uZW50ID0gT2JqZWN0KGNvbXBvbmVudE5vcm1hbGl6ZXJbXCJhXCIgLyogZGVmYXVsdCAqL10pKFxuICBzcmNfcHJvZ3Jlc3N2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBwcm9ncmVzcyA9IChjb21wb25lbnQuZXhwb3J0cyk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3Byb2dyZXNzL2luZGV4LmpzXG5cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb2dyZXNzLmluc3RhbGwgPSBmdW5jdGlvbiAoVnVlKSB7XG4gIFZ1ZS5jb21wb25lbnQocHJvZ3Jlc3MubmFtZSwgcHJvZ3Jlc3MpO1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHBhY2thZ2VzX3Byb2dyZXNzID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAocHJvZ3Jlc3MpO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2Rpc3QvXCI7XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDU4KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIG5vcm1hbGl6ZUNvbXBvbmVudDsgfSk7XG4vKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyIC8qIHNlcnZlciBvbmx5ICovLFxuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPVxuICAgIHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7XG4gICAgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24oaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaykgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDExOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL21peGlucy9taWdyYXRpbmdcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQHZ1ZS9iYWJlbC1oZWxwZXItdnVlLWpzeC1tZXJnZS1wcm9wc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3Byb2dyZXNzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gRVNNIENPTVBBVCBGTEFHXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJAdnVlL2JhYmVsLWhlbHBlci12dWUtanN4LW1lcmdlLXByb3BzXCJcbnZhciBiYWJlbF9oZWxwZXJfdnVlX2pzeF9tZXJnZV9wcm9wc18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcbnZhciBiYWJlbF9oZWxwZXJfdnVlX2pzeF9tZXJnZV9wcm9wc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihiYWJlbF9oZWxwZXJfdnVlX2pzeF9tZXJnZV9wcm9wc18pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiBDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9yZWYtLTUhQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWI/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3BhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLWxpc3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWY0MTIwODAyXG52YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX2MoXG4gICAgXCJ0cmFuc2l0aW9uLWdyb3VwXCIsXG4gICAge1xuICAgICAgY2xhc3M6IFtcbiAgICAgICAgXCJlbC11cGxvYWQtbGlzdFwiLFxuICAgICAgICBcImVsLXVwbG9hZC1saXN0LS1cIiArIF92bS5saXN0VHlwZSxcbiAgICAgICAgeyBcImlzLWRpc2FibGVkXCI6IF92bS5kaXNhYmxlZCB9XG4gICAgICBdLFxuICAgICAgYXR0cnM6IHsgdGFnOiBcInVsXCIsIG5hbWU6IFwiZWwtbGlzdFwiIH1cbiAgICB9LFxuICAgIF92bS5fbChfdm0uZmlsZXMsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgIHJldHVybiBfYyhcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiBmaWxlLnVpZCxcbiAgICAgICAgICBjbGFzczogW1xuICAgICAgICAgICAgXCJlbC11cGxvYWQtbGlzdF9faXRlbVwiLFxuICAgICAgICAgICAgXCJpcy1cIiArIGZpbGUuc3RhdHVzLFxuICAgICAgICAgICAgX3ZtLmZvY3VzaW5nID8gXCJmb2N1c2luZ1wiIDogXCJcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiMFwiIH0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgISRldmVudC50eXBlLmluZGV4T2YoXCJrZXlcIikgJiZcbiAgICAgICAgICAgICAgICBfdm0uX2soJGV2ZW50LmtleUNvZGUsIFwiZGVsZXRlXCIsIFs4LCA0Nl0sICRldmVudC5rZXksIFtcbiAgICAgICAgICAgICAgICAgIFwiQmFja3NwYWNlXCIsXG4gICAgICAgICAgICAgICAgICBcIkRlbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgXCJEZWxcIlxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAhX3ZtLmRpc2FibGVkICYmIF92bS4kZW1pdChcInJlbW92ZVwiLCBmaWxlKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgX3ZtLmZvY3VzaW5nID0gdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICBfdm0uZm9jdXNpbmcgPSBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgX3ZtLmZvY3VzaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3QoXG4gICAgICAgICAgICBcImRlZmF1bHRcIixcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGZpbGUuc3RhdHVzICE9PSBcInVwbG9hZGluZ1wiICYmXG4gICAgICAgICAgICAgICAgW1wicGljdHVyZS1jYXJkXCIsIFwicGljdHVyZVwiXS5pbmRleE9mKF92bS5saXN0VHlwZSkgPiAtMVxuICAgICAgICAgICAgICAgICAgPyBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tdGh1bWJuYWlsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBmaWxlLnVybCwgYWx0OiBcIlwiIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tbmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uaGFuZGxlQ2xpY2soZmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImVsLWljb24tZG9jdW1lbnRcIiB9KSxcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhmaWxlLm5hbWUpICsgXCJcXG4gICAgICBcIilcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJlbC11cGxvYWQtbGlzdF9faXRlbS1zdGF0dXMtbGFiZWxcIiB9LFxuICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImVsLWljb24tdXBsb2FkLXN1Y2Nlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZWwtaWNvbi1jaXJjbGUtY2hlY2tcIjogX3ZtLmxpc3RUeXBlID09PSBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZWwtaWNvbi1jaGVja1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJwaWN0dXJlLWNhcmRcIiwgXCJwaWN0dXJlXCJdLmluZGV4T2YoX3ZtLmxpc3RUeXBlKSA+IC0xXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgIV92bS5kaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgPyBfYyhcImlcIiwge1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImVsLWljb24tY2xvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRlbWl0KFwicmVtb3ZlXCIsIGZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICAhX3ZtLmRpc2FibGVkXG4gICAgICAgICAgICAgICAgICA/IF9jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImVsLWljb24tY2xvc2UtdGlwXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnQoXCJlbC51cGxvYWQuZGVsZXRlVGlwXCIpKSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgICAgZmlsZS5zdGF0dXMgPT09IFwidXBsb2FkaW5nXCJcbiAgICAgICAgICAgICAgICAgID8gX2MoXCJlbC1wcm9ncmVzc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5saXN0VHlwZSA9PT0gXCJwaWN0dXJlLWNhcmRcIiA/IFwiY2lyY2xlXCIgOiBcImxpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IF92bS5saXN0VHlwZSA9PT0gXCJwaWN0dXJlLWNhcmRcIiA/IDYgOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogX3ZtLnBhcnNlUGVyY2VudGFnZShmaWxlLnBlcmNlbnRhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICBfdm0ubGlzdFR5cGUgPT09IFwicGljdHVyZS1jYXJkXCJcbiAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJlbC11cGxvYWQtbGlzdF9faXRlbS1hY3Rpb25zXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uaGFuZGxlUHJldmlldyAmJiBfdm0ubGlzdFR5cGUgPT09IFwicGljdHVyZS1jYXJkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJlbC11cGxvYWQtbGlzdF9faXRlbS1wcmV2aWV3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5oYW5kbGVQcmV2aWV3KGZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImVsLWljb24tem9vbS1pblwiIH0pXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICFfdm0uZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJlbC11cGxvYWQtbGlzdF9faXRlbS1kZWxldGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRlbWl0KFwicmVtb3ZlXCIsIGZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKFwiaVwiLCB7IHN0YXRpY0NsYXNzOiBcImVsLWljb24tZGVsZXRlXCIgfSldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IGZpbGU6IGZpbGUgfVxuICAgICAgICAgIClcbiAgICAgICAgXSxcbiAgICAgICAgMlxuICAgICAgKVxuICAgIH0pLFxuICAgIDBcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLWxpc3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWY0MTIwODAyXG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCIuL21peGlucy9sb2NhbGVcIlxudmFyIGxvY2FsZV8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIGxvY2FsZV9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihsb2NhbGVfKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcIi4vcHJvZ3Jlc3NcIlxudmFyIGV4dGVybmFsX3Byb2dyZXNzXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xudmFyIGV4dGVybmFsX3Byb2dyZXNzX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3Byb2dyZXNzXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IEM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vYmFiZWwtbG9hZGVyQDguMy4wX0BiYWJlbCtjb3JlQDcuMjUuMl93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYiFDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYj8/dnVlLWxvYWRlci1vcHRpb25zIS4vcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQtbGlzdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcblxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB1cGxvYWRfbGlzdHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzID0gKHtcbiAgbmFtZTogJ0VsVXBsb2FkTGlzdCcsXG4gIG1peGluczogW2xvY2FsZV9kZWZhdWx0LmFdLFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c2luZzogZmFsc2VcbiAgICB9O1xuICB9LFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxQcm9ncmVzczogZXh0ZXJuYWxfcHJvZ3Jlc3NfZGVmYXVsdC5hXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgZmlsZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaGFuZGxlUHJldmlldzogRnVuY3Rpb24sXG4gICAgbGlzdFR5cGU6IFN0cmluZ1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcGFyc2VQZXJjZW50YWdlKHZhbCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApO1xuICAgIH0sXG4gICAgaGFuZGxlQ2xpY2soZmlsZSkge1xuICAgICAgdGhpcy5oYW5kbGVQcmV2aWV3ICYmIHRoaXMuaGFuZGxlUHJldmlldyhmaWxlKTtcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy91cGxvYWQvc3JjL3VwbG9hZC1saXN0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1xuIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY191cGxvYWRfbGlzdHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzID0gKHVwbG9hZF9saXN0dnVlX3R5cGVfc2NyaXB0X2xhbmdfanMpOyBcbi8vIEVYVEVSTkFMIE1PRFVMRTogQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXG52YXIgY29tcG9uZW50Tm9ybWFsaXplciA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQtbGlzdC52dWVcblxuXG5cblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5cbnZhciBjb21wb25lbnQgPSBPYmplY3QoY29tcG9uZW50Tm9ybWFsaXplcltcImFcIiAvKiBkZWZhdWx0ICovXSkoXG4gIHNyY191cGxvYWRfbGlzdHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHVwbG9hZF9saXN0ID0gKGNvbXBvbmVudC5leHBvcnRzKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvdXBsb2FkL3NyYy9hamF4LmpzXG5mdW5jdGlvbiBnZXRFcnJvcihhY3Rpb24sIG9wdGlvbiwgeGhyKSB7XG4gIGxldCBtc2c7XG4gIGlmICh4aHIucmVzcG9uc2UpIHtcbiAgICBtc2cgPSBgJHt4aHIucmVzcG9uc2UuZXJyb3IgfHwgeGhyLnJlc3BvbnNlfWA7XG4gIH0gZWxzZSBpZiAoeGhyLnJlc3BvbnNlVGV4dCkge1xuICAgIG1zZyA9IGAke3hoci5yZXNwb25zZVRleHR9YDtcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBgZmFpbCB0byBwb3N0ICR7YWN0aW9ufSAke3hoci5zdGF0dXN9YDtcbiAgfVxuICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnN0YXR1cyA9IHhoci5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSAncG9zdCc7XG4gIGVyci51cmwgPSBhY3Rpb247XG4gIHJldHVybiBlcnI7XG59XG5mdW5jdGlvbiBnZXRCb2R5KHhocikge1xuICBjb25zdCB0ZXh0ID0geGhyLnJlc3BvbnNlVGV4dCB8fCB4aHIucmVzcG9uc2U7XG4gIGlmICghdGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxufVxuZnVuY3Rpb24gdXBsb2FkKG9wdGlvbikge1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgY29uc3QgYWN0aW9uID0gb3B0aW9uLmFjdGlvbjtcbiAgaWYgKHhoci51cGxvYWQpIHtcbiAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBwcm9ncmVzcyhlKSB7XG4gICAgICBpZiAoZS50b3RhbCA+IDApIHtcbiAgICAgICAgZS5wZXJjZW50ID0gZS5sb2FkZWQgLyBlLnRvdGFsICogMTAwO1xuICAgICAgfVxuICAgICAgb3B0aW9uLm9uUHJvZ3Jlc3MoZSk7XG4gICAgfTtcbiAgfVxuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICBpZiAob3B0aW9uLmRhdGEpIHtcbiAgICBPYmplY3Qua2V5cyhvcHRpb24uZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKGtleSwgb3B0aW9uLmRhdGFba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgZm9ybURhdGEuYXBwZW5kKG9wdGlvbi5maWxlbmFtZSwgb3B0aW9uLmZpbGUsIG9wdGlvbi5maWxlLm5hbWUpO1xuICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICBvcHRpb24ub25FcnJvcihlKTtcbiAgfTtcbiAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIG9ubG9hZCgpIHtcbiAgICBpZiAoeGhyLnN0YXR1cyA8IDIwMCB8fCB4aHIuc3RhdHVzID49IDMwMCkge1xuICAgICAgcmV0dXJuIG9wdGlvbi5vbkVycm9yKGdldEVycm9yKGFjdGlvbiwgb3B0aW9uLCB4aHIpKTtcbiAgICB9XG4gICAgb3B0aW9uLm9uU3VjY2VzcyhnZXRCb2R5KHhocikpO1xuICB9O1xuICB4aHIub3BlbigncG9zdCcsIGFjdGlvbiwgdHJ1ZSk7XG4gIGlmIChvcHRpb24ud2l0aENyZWRlbnRpYWxzICYmICd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICB9XG4gIGNvbnN0IGhlYWRlcnMgPSBvcHRpb24uaGVhZGVycyB8fCB7fTtcbiAgZm9yIChsZXQgaXRlbSBpbiBoZWFkZXJzKSB7XG4gICAgaWYgKGhlYWRlcnMuaGFzT3duUHJvcGVydHkoaXRlbSkgJiYgaGVhZGVyc1tpdGVtXSAhPT0gbnVsbCkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaXRlbSwgaGVhZGVyc1tpdGVtXSk7XG4gICAgfVxuICB9XG4gIHhoci5zZW5kKGZvcm1EYXRhKTtcbiAgcmV0dXJuIHhocjtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IEM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMS4xX2Nzcy1sb2FkZXJANS4yLjdfcHJldHRpZXJAMS4xOC4yX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3JlZi0tNSFDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYj8/dnVlLWxvYWRlci1vcHRpb25zIS4vcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQtZHJhZ2dlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NGMzMTU3NThcbnZhciB1cGxvYWRfZHJhZ2dlcnZ1ZV90eXBlX3RlbXBsYXRlX2lkXzRjMzE1NzU4X3JlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIF92bSA9IHRoaXMsXG4gICAgX2MgPSBfdm0uX3NlbGYuX2NcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAge1xuICAgICAgc3RhdGljQ2xhc3M6IFwiZWwtdXBsb2FkLWRyYWdnZXJcIixcbiAgICAgIGNsYXNzOiB7XG4gICAgICAgIFwiaXMtZHJhZ292ZXJcIjogX3ZtLmRyYWdvdmVyXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgZHJvcDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICByZXR1cm4gX3ZtLm9uRHJvcC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgICAgIH0sXG4gICAgICAgIGRyYWdvdmVyOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIHJldHVybiBfdm0ub25EcmFnb3Zlci5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgICAgIH0sXG4gICAgICAgIGRyYWdsZWF2ZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBfdm0uZHJhZ292ZXIgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sXG4gICAgMlxuICApXG59XG52YXIgdXBsb2FkX2RyYWdnZXJ2dWVfdHlwZV90ZW1wbGF0ZV9pZF80YzMxNTc1OF9zdGF0aWNSZW5kZXJGbnMgPSBbXVxudXBsb2FkX2RyYWdnZXJ2dWVfdHlwZV90ZW1wbGF0ZV9pZF80YzMxNTc1OF9yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLWRyYWdnZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRjMzE1NzU4XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IEM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vYmFiZWwtbG9hZGVyQDguMy4wX0BiYWJlbCtjb3JlQDcuMjUuMl93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYiFDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTEuMV9jc3MtbG9hZGVyQDUuMi43X3ByZXR0aWVyQDEuMTguMl92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYj8/dnVlLWxvYWRlci1vcHRpb25zIS4vcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQtZHJhZ2dlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHVwbG9hZF9kcmFnZ2VydnVlX3R5cGVfc2NyaXB0X2xhbmdfanMgPSAoe1xuICBuYW1lOiAnRWxVcGxvYWREcmFnJyxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDogQm9vbGVhblxuICB9LFxuICBpbmplY3Q6IHtcbiAgICB1cGxvYWRlcjoge1xuICAgICAgZGVmYXVsdDogJydcbiAgICB9XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdvdmVyOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvbkRyYWdvdmVyKCkge1xuICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuZHJhZ292ZXIgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Ecm9wKGUpIHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICF0aGlzLnVwbG9hZGVyKSByZXR1cm47XG4gICAgICBjb25zdCBhY2NlcHQgPSB0aGlzLnVwbG9hZGVyLmFjY2VwdDtcbiAgICAgIHRoaXMuZHJhZ292ZXIgPSBmYWxzZTtcbiAgICAgIGlmICghYWNjZXB0KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2ZpbGUnLCBlLmRhdGFUcmFuc2Zlci5maWxlcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVtaXQoJ2ZpbGUnLCBbXS5zbGljZS5jYWxsKGUuZGF0YVRyYW5zZmVyLmZpbGVzKS5maWx0ZXIoZmlsZSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfSA9IGZpbGU7XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IG5hbWUuaW5kZXhPZignLicpID4gLTEgPyBgLiR7bmFtZS5zcGxpdCgnLicpLnBvcCgpfWAgOiAnJztcbiAgICAgICAgY29uc3QgYmFzZVR5cGUgPSB0eXBlLnJlcGxhY2UoL1xcLy4qJC8sICcnKTtcbiAgICAgICAgcmV0dXJuIGFjY2VwdC5zcGxpdCgnLCcpLm1hcCh0eXBlID0+IHR5cGUudHJpbSgpKS5maWx0ZXIodHlwZSA9PiB0eXBlKS5zb21lKGFjY2VwdGVkVHlwZSA9PiB7XG4gICAgICAgICAgaWYgKC9cXC4uKyQvLnRlc3QoYWNjZXB0ZWRUeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4dGVuc2lvbiA9PT0gYWNjZXB0ZWRUeXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoL1xcL1xcKiQvLnRlc3QoYWNjZXB0ZWRUeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJhc2VUeXBlID09PSBhY2NlcHRlZFR5cGUucmVwbGFjZSgvXFwvXFwqJC8sICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKC9eW15cXC9dK1xcL1teXFwvXSskLy50ZXN0KGFjY2VwdGVkVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlID09PSBhY2NlcHRlZFR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQtZHJhZ2dlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcbiAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfdXBsb2FkX2RyYWdnZXJ2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyA9ICh1cGxvYWRfZHJhZ2dlcnZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzKTsgXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLWRyYWdnZXIudnVlXG5cblxuXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuXG52YXIgdXBsb2FkX2RyYWdnZXJfY29tcG9uZW50ID0gT2JqZWN0KGNvbXBvbmVudE5vcm1hbGl6ZXJbXCJhXCIgLyogZGVmYXVsdCAqL10pKFxuICBzcmNfdXBsb2FkX2RyYWdnZXJ2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyxcbiAgdXBsb2FkX2RyYWdnZXJ2dWVfdHlwZV90ZW1wbGF0ZV9pZF80YzMxNTc1OF9yZW5kZXIsXG4gIHVwbG9hZF9kcmFnZ2VydnVlX3R5cGVfdGVtcGxhdGVfaWRfNGMzMTU3NThfc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdXBsb2FkX2RyYWdnZXIgPSAodXBsb2FkX2RyYWdnZXJfY29tcG9uZW50LmV4cG9ydHMpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS9iYWJlbC1sb2FkZXJAOC4zLjBfQGJhYmVsK2NvcmVANy4yNS4yX3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliIUM6L1VzZXJzL1R5bGVyVHJvdHRlci9yZXBvcy9Db2duaXRvIEZvcm1zL0NvZ25pdG8uV2ViLkNsaWVudC9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMS4xX2Nzcy1sb2FkZXJANS4yLjdfcHJldHRpZXJAMS4xOC4yX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9wYWNrYWdlcy91cGxvYWQvc3JjL3VwbG9hZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcblxuXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHVwbG9hZHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzID0gKHtcbiAgaW5qZWN0OiBbJ3VwbG9hZGVyJ10sXG4gIGNvbXBvbmVudHM6IHtcbiAgICBVcGxvYWREcmFnZ2VyOiB1cGxvYWRfZHJhZ2dlclxuICB9LFxuICBwcm9wczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBhY3Rpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZmlsZSdcbiAgICB9LFxuICAgIGRhdGE6IE9iamVjdCxcbiAgICBoZWFkZXJzOiBPYmplY3QsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBCb29sZWFuLFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIGFjY2VwdDogU3RyaW5nLFxuICAgIG9uU3RhcnQ6IEZ1bmN0aW9uLFxuICAgIG9uUHJvZ3Jlc3M6IEZ1bmN0aW9uLFxuICAgIG9uU3VjY2VzczogRnVuY3Rpb24sXG4gICAgb25FcnJvcjogRnVuY3Rpb24sXG4gICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbixcbiAgICBkcmFnOiBCb29sZWFuLFxuICAgIG9uUHJldmlldzoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7fVxuICAgIH0sXG4gICAgb25SZW1vdmU6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge31cbiAgICB9LFxuICAgIGZpbGVMaXN0OiBBcnJheSxcbiAgICBhdXRvVXBsb2FkOiBCb29sZWFuLFxuICAgIGxpc3RUeXBlOiBTdHJpbmcsXG4gICAgaHR0cFJlcXVlc3Q6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogdXBsb2FkXG4gICAgfSxcbiAgICBkaXNhYmxlZDogQm9vbGVhbixcbiAgICBsaW1pdDogTnVtYmVyLFxuICAgIG9uRXhjZWVkOiBGdW5jdGlvblxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb3VzZW92ZXI6IGZhbHNlLFxuICAgICAgcmVxczoge31cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaXNJbWFnZShzdHIpIHtcbiAgICAgIHJldHVybiBzdHIuaW5kZXhPZignaW1hZ2UnKSAhPT0gLTE7XG4gICAgfSxcbiAgICBoYW5kbGVDaGFuZ2UoZXYpIHtcbiAgICAgIGNvbnN0IGZpbGVzID0gZXYudGFyZ2V0LmZpbGVzO1xuICAgICAgaWYgKCFmaWxlcykgcmV0dXJuO1xuICAgICAgdGhpcy51cGxvYWRGaWxlcyhmaWxlcyk7XG4gICAgfSxcbiAgICB1cGxvYWRGaWxlcyhmaWxlcykge1xuICAgICAgaWYgKHRoaXMubGltaXQgJiYgdGhpcy5maWxlTGlzdC5sZW5ndGggKyBmaWxlcy5sZW5ndGggPiB0aGlzLmxpbWl0KSB7XG4gICAgICAgIHRoaXMub25FeGNlZWQgJiYgdGhpcy5vbkV4Y2VlZChmaWxlcywgdGhpcy5maWxlTGlzdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBwb3N0RmlsZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaWxlcyk7XG4gICAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcbiAgICAgICAgcG9zdEZpbGVzID0gcG9zdEZpbGVzLnNsaWNlKDAsIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHBvc3RGaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcG9zdEZpbGVzLmZvckVhY2gocmF3RmlsZSA9PiB7XG4gICAgICAgIHRoaXMub25TdGFydChyYXdGaWxlKTtcbiAgICAgICAgaWYgKHRoaXMuYXV0b1VwbG9hZCkgdGhpcy51cGxvYWQocmF3RmlsZSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwbG9hZChyYXdGaWxlKSB7XG4gICAgICB0aGlzLiRyZWZzLmlucHV0LnZhbHVlID0gbnVsbDtcbiAgICAgIGlmICghdGhpcy5iZWZvcmVVcGxvYWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zdChyYXdGaWxlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJlZm9yZSA9IHRoaXMuYmVmb3JlVXBsb2FkKHJhd0ZpbGUpO1xuICAgICAgaWYgKGJlZm9yZSAmJiBiZWZvcmUudGhlbikge1xuICAgICAgICBiZWZvcmUudGhlbihwcm9jZXNzZWRGaWxlID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzZWRGaWxlKTtcbiAgICAgICAgICBpZiAoZmlsZVR5cGUgPT09ICdbb2JqZWN0IEZpbGVdJyB8fCBmaWxlVHlwZSA9PT0gJ1tvYmplY3QgQmxvYl0nKSB7XG4gICAgICAgICAgICBpZiAoZmlsZVR5cGUgPT09ICdbb2JqZWN0IEJsb2JdJykge1xuICAgICAgICAgICAgICBwcm9jZXNzZWRGaWxlID0gbmV3IEZpbGUoW3Byb2Nlc3NlZEZpbGVdLCByYXdGaWxlLm5hbWUsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiByYXdGaWxlLnR5cGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgaW4gcmF3RmlsZSkge1xuICAgICAgICAgICAgICBpZiAocmF3RmlsZS5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NlZEZpbGVbcF0gPSByYXdGaWxlW3BdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBvc3QocHJvY2Vzc2VkRmlsZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9zdChyYXdGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICB0aGlzLm9uUmVtb3ZlKG51bGwsIHJhd0ZpbGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoYmVmb3JlICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLnBvc3QocmF3RmlsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uUmVtb3ZlKG51bGwsIHJhd0ZpbGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYWJvcnQoZmlsZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICByZXFzXG4gICAgICB9ID0gdGhpcztcbiAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgIGxldCB1aWQgPSBmaWxlO1xuICAgICAgICBpZiAoZmlsZS51aWQpIHVpZCA9IGZpbGUudWlkO1xuICAgICAgICBpZiAocmVxc1t1aWRdKSB7XG4gICAgICAgICAgcmVxc1t1aWRdLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHJlcXMpLmZvckVhY2godWlkID0+IHtcbiAgICAgICAgICBpZiAocmVxc1t1aWRdKSByZXFzW3VpZF0uYWJvcnQoKTtcbiAgICAgICAgICBkZWxldGUgcmVxc1t1aWRdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHBvc3QocmF3RmlsZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICB1aWRcbiAgICAgIH0gPSByYXdGaWxlO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICBmaWxlOiByYXdGaWxlLFxuICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICAgIGZpbGVuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24sXG4gICAgICAgIG9uUHJvZ3Jlc3M6IGUgPT4ge1xuICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyhlLCByYXdGaWxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25TdWNjZXNzOiByZXMgPT4ge1xuICAgICAgICAgIHRoaXMub25TdWNjZXNzKHJlcywgcmF3RmlsZSk7XG4gICAgICAgICAgZGVsZXRlIHRoaXMucmVxc1t1aWRdO1xuICAgICAgICB9LFxuICAgICAgICBvbkVycm9yOiBlcnIgPT4ge1xuICAgICAgICAgIHRoaXMub25FcnJvcihlcnIsIHJhd0ZpbGUpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlcXNbdWlkXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlcSA9IHRoaXMuaHR0cFJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICB0aGlzLnJlcXNbdWlkXSA9IHJlcTtcbiAgICAgIGlmIChyZXEgJiYgcmVxLnRoZW4pIHtcbiAgICAgICAgcmVxLnRoZW4ob3B0aW9ucy5vblN1Y2Nlc3MsIG9wdGlvbnMub25FcnJvcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVDbGljaygpIHtcbiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLiRyZWZzLmlucHV0LnZhbHVlID0gbnVsbDtcbiAgICAgICAgdGhpcy4kcmVmcy5pbnB1dC5jbGljaygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuO1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgfHwgZS5rZXlDb2RlID09PSAzMikge1xuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZW5kZXIoaCkge1xuICAgIGxldCB7XG4gICAgICBoYW5kbGVDbGljayxcbiAgICAgIGRyYWcsXG4gICAgICBuYW1lLFxuICAgICAgaGFuZGxlQ2hhbmdlLFxuICAgICAgbXVsdGlwbGUsXG4gICAgICBhY2NlcHQsXG4gICAgICBsaXN0VHlwZSxcbiAgICAgIHVwbG9hZEZpbGVzLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBoYW5kbGVLZXlkb3duXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGNsYXNzOiB7XG4gICAgICAgICdlbC11cGxvYWQnOiB0cnVlXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgY2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgICBrZXlkb3duOiBoYW5kbGVLZXlkb3duXG4gICAgICB9XG4gICAgfTtcbiAgICBkYXRhLmNsYXNzW2BlbC11cGxvYWQtLSR7bGlzdFR5cGV9YF0gPSB0cnVlO1xuICAgIHJldHVybiBoKFwiZGl2XCIsIGJhYmVsX2hlbHBlcl92dWVfanN4X21lcmdlX3Byb3BzX2RlZmF1bHQoKShbe30sIGRhdGEsIHtcbiAgICAgIFwiYXR0cnNcIjoge1xuICAgICAgICBcInRhYmluZGV4XCI6IFwiMFwiXG4gICAgICB9XG4gICAgfV0pLCBbZHJhZyA/IGgoXCJ1cGxvYWQtZHJhZ2dlclwiLCB7XG4gICAgICBcImF0dHJzXCI6IHtcbiAgICAgICAgXCJkaXNhYmxlZFwiOiBkaXNhYmxlZFxuICAgICAgfSxcbiAgICAgIFwib25cIjoge1xuICAgICAgICBcImZpbGVcIjogdXBsb2FkRmlsZXNcbiAgICAgIH1cbiAgICB9LCBbdGhpcy4kc2xvdHMuZGVmYXVsdF0pIDogdGhpcy4kc2xvdHMuZGVmYXVsdCwgaChcImlucHV0XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJlbC11cGxvYWRfX2lucHV0XCIsXG4gICAgICBcImF0dHJzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwiZmlsZVwiLFxuICAgICAgICBcIm5hbWVcIjogbmFtZSxcbiAgICAgICAgXCJtdWx0aXBsZVwiOiBtdWx0aXBsZSxcbiAgICAgICAgXCJhY2NlcHRcIjogYWNjZXB0XG4gICAgICB9LFxuICAgICAgXCJyZWZcIjogXCJpbnB1dFwiLFxuICAgICAgXCJvblwiOiB7XG4gICAgICAgIFwiY2hhbmdlXCI6IGhhbmRsZUNoYW5nZVxuICAgICAgfVxuICAgIH0pXSk7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy91cGxvYWQvc3JjL3VwbG9hZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcbiAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfdXBsb2FkdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMgPSAodXBsb2FkdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMpOyBcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQudnVlXG52YXIgdXBsb2FkX3JlbmRlciwgdXBsb2FkX3N0YXRpY1JlbmRlckZuc1xuXG5cblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5cbnZhciB1cGxvYWRfY29tcG9uZW50ID0gT2JqZWN0KGNvbXBvbmVudE5vcm1hbGl6ZXJbXCJhXCIgLyogZGVmYXVsdCAqL10pKFxuICBzcmNfdXBsb2FkdnVlX3R5cGVfc2NyaXB0X2xhbmdfanMsXG4gIHVwbG9hZF9yZW5kZXIsXG4gIHVwbG9hZF9zdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfdXBsb2FkID0gKHVwbG9hZF9jb21wb25lbnQuZXhwb3J0cyk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiLi9taXhpbnMvbWlncmF0aW5nXCJcbnZhciBtaWdyYXRpbmdfID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG52YXIgbWlncmF0aW5nX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKG1pZ3JhdGluZ18pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiBDOi9Vc2Vycy9UeWxlclRyb3R0ZXIvcmVwb3MvQ29nbml0byBGb3Jtcy9Db2duaXRvLldlYi5DbGllbnQvbm9kZV9tb2R1bGVzLy5wbnBtL2JhYmVsLWxvYWRlckA4LjMuMF9AYmFiZWwrY29yZUA3LjI1LjJfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhQzovVXNlcnMvVHlsZXJUcm90dGVyL3JlcG9zL0NvZ25pdG8gRm9ybXMvQ29nbml0by5XZWIuQ2xpZW50L25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjExLjFfY3NzLWxvYWRlckA1LjIuN19wcmV0dGllckAxLjE4LjJfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWI/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3BhY2thZ2VzL3VwbG9hZC9zcmMvaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXG5cblxuXG5cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmN2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyA9ICh7XG4gIG5hbWU6ICdFbFVwbG9hZCcsXG4gIG1peGluczogW21pZ3JhdGluZ19kZWZhdWx0LmFdLFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxQcm9ncmVzczogZXh0ZXJuYWxfcHJvZ3Jlc3NfZGVmYXVsdC5hLFxuICAgIFVwbG9hZExpc3Q6IHVwbG9hZF9saXN0LFxuICAgIFVwbG9hZDogc3JjX3VwbG9hZFxuICB9LFxuICBwcm92aWRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1cGxvYWRlcjogdGhpc1xuICAgIH07XG4gIH0sXG4gIGluamVjdDoge1xuICAgIGVsRm9ybToge1xuICAgICAgZGVmYXVsdDogJydcbiAgICB9XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgYWN0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgaGVhZGVyczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YTogT2JqZWN0LFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdmaWxlJ1xuICAgIH0sXG4gICAgZHJhZzogQm9vbGVhbixcbiAgICBkcmFnZ2VyOiBCb29sZWFuLFxuICAgIHdpdGhDcmVkZW50aWFsczogQm9vbGVhbixcbiAgICBzaG93RmlsZUxpc3Q6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBhY2NlcHQ6IFN0cmluZyxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnc2VsZWN0J1xuICAgIH0sXG4gICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbixcbiAgICBiZWZvcmVSZW1vdmU6IEZ1bmN0aW9uLFxuICAgIG9uUmVtb3ZlOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IG5vb3BcbiAgICB9LFxuICAgIG9uQ2hhbmdlOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IG5vb3BcbiAgICB9LFxuICAgIG9uUHJldmlldzoge1xuICAgICAgdHlwZTogRnVuY3Rpb25cbiAgICB9LFxuICAgIG9uU3VjY2Vzczoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBub29wXG4gICAgfSxcbiAgICBvblByb2dyZXNzOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IG5vb3BcbiAgICB9LFxuICAgIG9uRXJyb3I6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogbm9vcFxuICAgIH0sXG4gICAgZmlsZUxpc3Q6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXV0b1VwbG9hZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGxpc3RUeXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAndGV4dCcgLy8gdGV4dCxwaWN0dXJlLHBpY3R1cmUtY2FyZFxuICAgIH0sXG4gICAgaHR0cFJlcXVlc3Q6IEZ1bmN0aW9uLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGxpbWl0OiBOdW1iZXIsXG4gICAgb25FeGNlZWQ6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogbm9vcFxuICAgIH1cbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBsb2FkRmlsZXM6IFtdLFxuICAgICAgZHJhZ092ZXI6IGZhbHNlLFxuICAgICAgZHJhZ2luZzogZmFsc2UsXG4gICAgICB0ZW1wSW5kZXg6IDFcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHVwbG9hZERpc2FibGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZWQgfHwgKHRoaXMuZWxGb3JtIHx8IHt9KS5kaXNhYmxlZDtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgbGlzdFR5cGUodHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT09ICdwaWN0dXJlLWNhcmQnIHx8IHR5cGUgPT09ICdwaWN0dXJlJykge1xuICAgICAgICB0aGlzLnVwbG9hZEZpbGVzID0gdGhpcy51cGxvYWRGaWxlcy5tYXAoZmlsZSA9PiB7XG4gICAgICAgICAgaWYgKCFmaWxlLnVybCAmJiBmaWxlLnJhdykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZmlsZS51cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUucmF3KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbRWxlbWVudCBFcnJvcl1bVXBsb2FkXScsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbGVMaXN0OiB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICBoYW5kbGVyKGZpbGVMaXN0KSB7XG4gICAgICAgIHRoaXMudXBsb2FkRmlsZXMgPSBmaWxlTGlzdC5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgaXRlbS51aWQgPSBpdGVtLnVpZCB8fCBEYXRlLm5vdygpICsgdGhpcy50ZW1wSW5kZXgrKztcbiAgICAgICAgICBpdGVtLnN0YXR1cyA9IGl0ZW0uc3RhdHVzIHx8ICdzdWNjZXNzJztcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaGFuZGxlU3RhcnQocmF3RmlsZSkge1xuICAgICAgcmF3RmlsZS51aWQgPSBEYXRlLm5vdygpICsgdGhpcy50ZW1wSW5kZXgrKztcbiAgICAgIGxldCBmaWxlID0ge1xuICAgICAgICBzdGF0dXM6ICdyZWFkeScsXG4gICAgICAgIG5hbWU6IHJhd0ZpbGUubmFtZSxcbiAgICAgICAgc2l6ZTogcmF3RmlsZS5zaXplLFxuICAgICAgICBwZXJjZW50YWdlOiAwLFxuICAgICAgICB1aWQ6IHJhd0ZpbGUudWlkLFxuICAgICAgICByYXc6IHJhd0ZpbGVcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5saXN0VHlwZSA9PT0gJ3BpY3R1cmUtY2FyZCcgfHwgdGhpcy5saXN0VHlwZSA9PT0gJ3BpY3R1cmUnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmlsZS51cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHJhd0ZpbGUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbRWxlbWVudCBFcnJvcl1bVXBsb2FkXScsIGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnVwbG9hZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKGZpbGUsIHRoaXMudXBsb2FkRmlsZXMpO1xuICAgIH0sXG4gICAgaGFuZGxlUHJvZ3Jlc3MoZXYsIHJhd0ZpbGUpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGUocmF3RmlsZSk7XG4gICAgICB0aGlzLm9uUHJvZ3Jlc3MoZXYsIGZpbGUsIHRoaXMudXBsb2FkRmlsZXMpO1xuICAgICAgZmlsZS5zdGF0dXMgPSAndXBsb2FkaW5nJztcbiAgICAgIGZpbGUucGVyY2VudGFnZSA9IGV2LnBlcmNlbnQgfHwgMDtcbiAgICB9LFxuICAgIGhhbmRsZVN1Y2Nlc3MocmVzLCByYXdGaWxlKSB7XG4gICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRGaWxlKHJhd0ZpbGUpO1xuICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgZmlsZS5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgIGZpbGUucmVzcG9uc2UgPSByZXM7XG4gICAgICAgIHRoaXMub25TdWNjZXNzKHJlcywgZmlsZSwgdGhpcy51cGxvYWRGaWxlcyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoZmlsZSwgdGhpcy51cGxvYWRGaWxlcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVFcnJvcihlcnIsIHJhd0ZpbGUpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGUocmF3RmlsZSk7XG4gICAgICBjb25zdCBmaWxlTGlzdCA9IHRoaXMudXBsb2FkRmlsZXM7XG4gICAgICBmaWxlLnN0YXR1cyA9ICdmYWlsJztcbiAgICAgIGZpbGVMaXN0LnNwbGljZShmaWxlTGlzdC5pbmRleE9mKGZpbGUpLCAxKTtcbiAgICAgIHRoaXMub25FcnJvcihlcnIsIGZpbGUsIHRoaXMudXBsb2FkRmlsZXMpO1xuICAgICAgdGhpcy5vbkNoYW5nZShmaWxlLCB0aGlzLnVwbG9hZEZpbGVzKTtcbiAgICB9LFxuICAgIGhhbmRsZVJlbW92ZShmaWxlLCByYXcpIHtcbiAgICAgIGlmIChyYXcpIHtcbiAgICAgICAgZmlsZSA9IHRoaXMuZ2V0RmlsZShyYXcpO1xuICAgICAgfVxuICAgICAgbGV0IGRvUmVtb3ZlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmFib3J0KGZpbGUpO1xuICAgICAgICBsZXQgZmlsZUxpc3QgPSB0aGlzLnVwbG9hZEZpbGVzO1xuICAgICAgICBmaWxlTGlzdC5zcGxpY2UoZmlsZUxpc3QuaW5kZXhPZihmaWxlKSwgMSk7XG4gICAgICAgIHRoaXMub25SZW1vdmUoZmlsZSwgZmlsZUxpc3QpO1xuICAgICAgfTtcbiAgICAgIGlmICghdGhpcy5iZWZvcmVSZW1vdmUpIHtcbiAgICAgICAgZG9SZW1vdmUoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuYmVmb3JlUmVtb3ZlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGJlZm9yZSA9IHRoaXMuYmVmb3JlUmVtb3ZlKGZpbGUsIHRoaXMudXBsb2FkRmlsZXMpO1xuICAgICAgICBpZiAoYmVmb3JlICYmIGJlZm9yZS50aGVuKSB7XG4gICAgICAgICAgYmVmb3JlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZG9SZW1vdmUoKTtcbiAgICAgICAgICB9LCBub29wKTtcbiAgICAgICAgfSBlbHNlIGlmIChiZWZvcmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgZG9SZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0RmlsZShyYXdGaWxlKSB7XG4gICAgICBsZXQgZmlsZUxpc3QgPSB0aGlzLnVwbG9hZEZpbGVzO1xuICAgICAgbGV0IHRhcmdldDtcbiAgICAgIGZpbGVMaXN0LmV2ZXJ5KGl0ZW0gPT4ge1xuICAgICAgICB0YXJnZXQgPSByYXdGaWxlLnVpZCA9PT0gaXRlbS51aWQgPyBpdGVtIDogbnVsbDtcbiAgICAgICAgcmV0dXJuICF0YXJnZXQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSxcbiAgICBhYm9ydChmaWxlKSB7XG4gICAgICB0aGlzLiRyZWZzWyd1cGxvYWQtaW5uZXInXS5hYm9ydChmaWxlKTtcbiAgICB9LFxuICAgIGNsZWFyRmlsZXMoKSB7XG4gICAgICB0aGlzLnVwbG9hZEZpbGVzID0gW107XG4gICAgfSxcbiAgICBzdWJtaXQoKSB7XG4gICAgICB0aGlzLnVwbG9hZEZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUuc3RhdHVzID09PSAncmVhZHknKS5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICB0aGlzLiRyZWZzWyd1cGxvYWQtaW5uZXInXS51cGxvYWQoZmlsZS5yYXcpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRNaWdyYXRpbmdDb25maWcoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICdkZWZhdWx0LWZpbGUtbGlzdCc6ICdkZWZhdWx0LWZpbGUtbGlzdCBpcyByZW5hbWVkIHRvIGZpbGUtbGlzdC4nLFxuICAgICAgICAgICdzaG93LXVwbG9hZC1saXN0JzogJ3Nob3ctdXBsb2FkLWxpc3QgaXMgcmVuYW1lZCB0byBzaG93LWZpbGUtbGlzdC4nLFxuICAgICAgICAgICd0aHVtYm5haWwtbW9kZSc6ICd0aHVtYm5haWwtbW9kZSBoYXMgYmVlbiBkZXByZWNhdGVkLCB5b3UgY2FuIGltcGxlbWVudCB0aGUgc2FtZSBlZmZlY3QgYWNjb3JkaW5nIHRvIHRoaXMgY2FzZTogaHR0cDovL2VsZW1lbnQuZWxlbWUuaW8vIy96aC1DTi9jb21wb25lbnQvdXBsb2FkI3lvbmctaHUtdG91LXhpYW5nLXNoYW5nLWNodWFuJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICB0aGlzLnVwbG9hZEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICBpZiAoZmlsZS51cmwgJiYgZmlsZS51cmwuaW5kZXhPZignYmxvYjonKSA9PT0gMCkge1xuICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGZpbGUudXJsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgcmVuZGVyKGgpIHtcbiAgICBsZXQgdXBsb2FkTGlzdDtcbiAgICBpZiAodGhpcy5zaG93RmlsZUxpc3QpIHtcbiAgICAgIHVwbG9hZExpc3QgPSBoKHVwbG9hZF9saXN0LCB7XG4gICAgICAgIFwiYXR0cnNcIjoge1xuICAgICAgICAgIFwiZGlzYWJsZWRcIjogdGhpcy51cGxvYWREaXNhYmxlZCxcbiAgICAgICAgICBcImxpc3RUeXBlXCI6IHRoaXMubGlzdFR5cGUsXG4gICAgICAgICAgXCJmaWxlc1wiOiB0aGlzLnVwbG9hZEZpbGVzLFxuICAgICAgICAgIFwiaGFuZGxlUHJldmlld1wiOiB0aGlzLm9uUHJldmlld1xuICAgICAgICB9LFxuICAgICAgICBcIm9uXCI6IHtcbiAgICAgICAgICBcInJlbW92ZVwiOiB0aGlzLmhhbmRsZVJlbW92ZVxuICAgICAgICB9XG4gICAgICB9LCBbcHJvcHMgPT4ge1xuICAgICAgICBpZiAodGhpcy4kc2NvcGVkU2xvdHMuZmlsZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiRzY29wZWRTbG90cy5maWxlKHtcbiAgICAgICAgICAgIGZpbGU6IHByb3BzLmZpbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgIH1cbiAgICBjb25zdCB1cGxvYWREYXRhID0ge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICBkcmFnOiB0aGlzLmRyYWcsXG4gICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24sXG4gICAgICAgIG11bHRpcGxlOiB0aGlzLm11bHRpcGxlLFxuICAgICAgICAnYmVmb3JlLXVwbG9hZCc6IHRoaXMuYmVmb3JlVXBsb2FkLFxuICAgICAgICAnd2l0aC1jcmVkZW50aWFscyc6IHRoaXMud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICBhY2NlcHQ6IHRoaXMuYWNjZXB0LFxuICAgICAgICBmaWxlTGlzdDogdGhpcy51cGxvYWRGaWxlcyxcbiAgICAgICAgYXV0b1VwbG9hZDogdGhpcy5hdXRvVXBsb2FkLFxuICAgICAgICBsaXN0VHlwZTogdGhpcy5saXN0VHlwZSxcbiAgICAgICAgZGlzYWJsZWQ6IHRoaXMudXBsb2FkRGlzYWJsZWQsXG4gICAgICAgIGxpbWl0OiB0aGlzLmxpbWl0LFxuICAgICAgICAnb24tZXhjZWVkJzogdGhpcy5vbkV4Y2VlZCxcbiAgICAgICAgJ29uLXN0YXJ0JzogdGhpcy5oYW5kbGVTdGFydCxcbiAgICAgICAgJ29uLXByb2dyZXNzJzogdGhpcy5oYW5kbGVQcm9ncmVzcyxcbiAgICAgICAgJ29uLXN1Y2Nlc3MnOiB0aGlzLmhhbmRsZVN1Y2Nlc3MsXG4gICAgICAgICdvbi1lcnJvcic6IHRoaXMuaGFuZGxlRXJyb3IsXG4gICAgICAgICdvbi1wcmV2aWV3JzogdGhpcy5vblByZXZpZXcsXG4gICAgICAgICdvbi1yZW1vdmUnOiB0aGlzLmhhbmRsZVJlbW92ZSxcbiAgICAgICAgJ2h0dHAtcmVxdWVzdCc6IHRoaXMuaHR0cFJlcXVlc3RcbiAgICAgIH0sXG4gICAgICByZWY6ICd1cGxvYWQtaW5uZXInXG4gICAgfTtcbiAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy4kc2xvdHMudHJpZ2dlciB8fCB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGNvbnN0IHVwbG9hZENvbXBvbmVudCA9IGgoXCJ1cGxvYWRcIiwgYmFiZWxfaGVscGVyX3Z1ZV9qc3hfbWVyZ2VfcHJvcHNfZGVmYXVsdCgpKFt7fSwgdXBsb2FkRGF0YV0pLCBbdHJpZ2dlcl0pO1xuICAgIHJldHVybiBoKFwiZGl2XCIsIFt0aGlzLmxpc3RUeXBlID09PSAncGljdHVyZS1jYXJkJyA/IHVwbG9hZExpc3QgOiAnJywgdGhpcy4kc2xvdHMudHJpZ2dlciA/IFt1cGxvYWRDb21wb25lbnQsIHRoaXMuJHNsb3RzLmRlZmF1bHRdIDogdXBsb2FkQ29tcG9uZW50LCB0aGlzLiRzbG90cy50aXAsIHRoaXMubGlzdFR5cGUgIT09ICdwaWN0dXJlLWNhcmQnID8gdXBsb2FkTGlzdCA6ICcnXSk7XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy91cGxvYWQvc3JjL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1xuIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHVwbG9hZF9zcmN2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyA9IChzcmN2dWVfdHlwZV9zY3JpcHRfbGFuZ19qcyk7IFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy91cGxvYWQvc3JjL2luZGV4LnZ1ZVxudmFyIHNyY19yZW5kZXIsIHNyY19zdGF0aWNSZW5kZXJGbnNcblxuXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuXG52YXIgc3JjX2NvbXBvbmVudCA9IE9iamVjdChjb21wb25lbnROb3JtYWxpemVyW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShcbiAgdXBsb2FkX3NyY3Z1ZV90eXBlX3NjcmlwdF9sYW5nX2pzLFxuICBzcmNfcmVuZGVyLFxuICBzcmNfc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjID0gKHNyY19jb21wb25lbnQuZXhwb3J0cyk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL3VwbG9hZC9pbmRleC5qc1xuXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5zcmMuaW5zdGFsbCA9IGZ1bmN0aW9uIChWdWUpIHtcbiAgVnVlLmNvbXBvbmVudChzcmMubmFtZSwgc3JjKTtcbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBwYWNrYWdlc191cGxvYWQgPSBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChzcmMpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9taXhpbnMvbG9jYWxlXCIpO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTsiLCI8dGVtcGxhdGU+XHJcblx0PGRpdiBjbGFzcz1cImNvZy1pbnB1dFwiPlxyXG5cdFx0PGRpdiBjbGFzcz1cImNvZy11cGxvYWRcIiA6Y2xhc3M9XCJ7J2lzLXJlYWQtb25seSc6IHJlYWRvbmx5fVwiIEBwYXN0ZT1cInBhc3RlRmlsZVwiPlxyXG5cdFx0XHQ8ZWwtdXBsb2FkXHJcblx0XHRcdFx0cmVmPVwidXBsb2FkXCJcclxuXHRcdFx0XHQ6c2hvdy1maWxlLWxpc3Q9XCJmYWxzZVwiXHJcblx0XHRcdFx0Omh0dHAtcmVxdWVzdD1cInVwbG9hZEZpbGVcIlxyXG5cdFx0XHRcdDpvbi1wcmV2aWV3PVwicHJldmlld0ZpbGVcIlxyXG5cdFx0XHRcdDpiZWZvcmUtdXBsb2FkPVwiYmVmb3JlVXBsb2FkXCJcclxuXHRcdFx0XHQ6ZmlsZS1saXN0PVwiaW5pdGlhbEZpbGVzXCJcclxuXHRcdFx0XHQ6ZGlzYWJsZWQ9XCJyZWFkb25seVwiXHJcblx0XHRcdFx0OmxpbWl0PVwibWF4RmlsZXNcIlxyXG5cdFx0XHRcdDpvbi1leGNlZWQ9XCJsaW1pdEV4Y2VlZGVkXCJcclxuXHRcdFx0XHQ6bXVsdGlwbGU9XCIhbWF4RmlsZXMgfHwgbWF4RmlsZXMgPiAxXCJcclxuXHRcdFx0XHQ6ZHJhZz1cIiFyZWFkb25seSAmJiAhbGltaXRSZWFjaGVkXCJcclxuXHRcdFx0XHRsaXN0LXR5cGU9XCJwaWN0dXJlXCJcclxuXHRcdFx0XHRhY3Rpb249XCJcIlxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PHRlbXBsYXRlIHYtaWY9XCIhcmVhZG9ubHkgJiYgIWxpbWl0UmVhY2hlZFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBAY2xpY2s9XCJoYW5kbGVVcGxvYWRDbGlja3NcIj5cclxuXHRcdFx0XHRcdFx0PGMtYnV0dG9uIHJlZj1cInVwbG9hZEJ1dHRvblwiIGNsYXNzPVwiY29nLWJ1dHRvbi0tc2Vjb25kYXJ5IGNvZy11cGxvYWRfX3VwbG9hZC1idXR0b25cIiBAY2xpY2s9XCJ1cGxvYWRDbGlja2VkXCI+XHJcblx0XHRcdFx0XHRcdFx0e3sgJHJlc291cmNlKCdmaWxldXBsb2FkLWRlZmF1bHQtdXBsb2FkLWJ1dHRvbi10ZXh0JykgfX1cclxuXHRcdFx0XHRcdFx0PC9jLWJ1dHRvbj5cclxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJjb2ctdXBsb2FkX19kcmFnLXRleHRcIiBAY2xpY2suc3RvcD57eyAkcmVzb3VyY2UoJ2ZpbGV1cGxvYWQtZHJvcHpvbmUtbWVzc2FnZScpIH19PC9zcGFuPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC90ZW1wbGF0ZT5cclxuXHRcdFx0PC9lbC11cGxvYWQ+XHJcblxyXG5cdFx0XHQ8dHJhbnNpdGlvbi1ncm91cCBuYW1lPVwiY29nLXVwbG9hZF9fbGlzdFwiIHRhZz1cInVsXCIgY2xhc3M9XCJjb2ctdXBsb2FkX19saXN0XCIgQGNsaWNrLnN0b3A+XHJcblx0XHRcdFx0PGxpIHYtZm9yPVwiKGZpbGUsIGkpIGluIHVwbG9hZEZpbGVzXCIgOmtleT1cImtleShmaWxlLnVpZClcIiByZWY9XCJ1cGxvYWRJdGVtc1wiPlxyXG5cdFx0XHRcdFx0PGltZyB2LWlmPVwiaGFzVGh1bWJuYWlsKGZpbGUpXCIgY2xhc3M9XCJjb2ctdXBsb2FkX190aHVtYm5haWxcIiA6c3JjPVwiZ2V0VGh1bWJuYWlsKGZpbGUpXCIgb25lcnJvcj1cInRoaXMuY2xhc3NOYW1lICs9ICcgZXJyb3InXCIgLz5cclxuXHRcdFx0XHRcdDxjLWZpbGUtaWNvbiA6a2V5PVwiJ2ljb24tJytpXCIgOmV4dGVuc2lvbj1cImdldEV4dGVuc2lvbihmaWxlKVwiIC8+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29nLXVwbG9hZF9fZmlsZS1pbmZvXCI+XHJcblx0XHRcdFx0XHRcdDxhIDprZXk9XCInYW5jaG9yLScrZmlsZS51aWRcIiBjbGFzcz1cImNvZy11cGxvYWRfX2xpbmtcIiA6aHJlZj1cImZpbGUudXJsXCIgdGFyZ2V0PVwiX2JsYW5rXCIgQGNsaWNrLnByZXZlbnQ9XCJ0cnlQcmV2aWV3RmlsZShmaWxlLCAkZXZlbnQpXCI+e3sgZmlsZS5uYW1lIH19PC9hPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29nLXVwbG9hZF9fZmlsZS1zaXplXCI+e3sgZ2V0RGlzcGxheUZpbGVTaXplKGZpbGUpIH19PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDx0ZW1wbGF0ZSB2LWlmPVwiZmlsZS5wZXJjZW50YWdlID09PSAxMDAgfHwgZmlsZS5zdGF0dXMgPT09ICdzdWNjZXNzJ1wiPlxyXG5cdFx0XHRcdFx0XHQ8Yy1idXR0b24gOmtleT1cIidkb3dubG9hZC1idXR0b24tJytmaWxlLnVpZFwiIGNsYXNzPVwiY29nLXVwbG9hZF9fZG93bmxvYWQtYnV0dG9uXCIgbm8tc3R5bGUgOnRpdGxlPVwiZ2V0RG93bmxvYWRUZXh0KGZpbGUpXCIgQGNsaWNrPVwidHJ5RG93bmxvYWRGaWxlKGZpbGUsICRldmVudClcIj5cclxuXHRcdFx0XHRcdFx0XHQ8aS1kb3dubG9hZCAvPlxyXG5cdFx0XHRcdFx0XHQ8L2MtYnV0dG9uPlxyXG5cdFx0XHRcdFx0XHQ8Yy1idXR0b24gdi1pZj1cIiFyZWFkb25seVwiIDprZXk9XCIncmVtb3ZlLWJ1dHRvbi0nK2ZpbGUudWlkXCIgY2xhc3M9XCJjb2ctdXBsb2FkX19yZW1vdmUtYnV0dG9uXCIgbm8tc3R5bGUgOnRpdGxlPVwiZ2V0UmVtb3ZlVGV4dChmaWxlKVwiIEBjbGljaz1cInJlbW92ZUZpbGUoZmlsZS51aWQpXCI+XHJcblx0XHRcdFx0XHRcdFx0PGktZXggLz5cclxuXHRcdFx0XHRcdFx0PC9jLWJ1dHRvbj5cclxuXHRcdFx0XHRcdDwvdGVtcGxhdGU+XHJcblx0XHRcdFx0XHQ8dGVtcGxhdGUgdi1lbHNlPlxyXG5cdFx0XHRcdFx0XHQ8cHJvZ3Jlc3MgOmtleT1cIidwcm9ncmVzcy0nK2ZpbGUudWlkXCIgbWF4PVwiMTAwXCIgOnZhbHVlPVwiZmlsZS5wZXJjZW50YWdlXCI+PC9wcm9ncmVzcz5cclxuXHRcdFx0XHRcdFx0PGMtYnV0dG9uIGNsYXNzPVwiY29nLXVwbG9hZF9fcmVtb3ZlLWJ1dHRvblwiIG5vLXN0eWxlIDp0aXRsZT1cImdldFJlbW92ZVRleHQoZmlsZSlcIiBAY2xpY2s9XCJjYW5jZWxVcGxvYWQoZmlsZS51aWQpXCI+XHJcblx0XHRcdFx0XHRcdFx0PGktZXggLz5cclxuXHRcdFx0XHRcdFx0PC9jLWJ1dHRvbj5cclxuXHRcdFx0XHRcdDwvdGVtcGxhdGU+XHJcblx0XHRcdFx0PC9saT5cclxuXHRcdFx0PC90cmFuc2l0aW9uLWdyb3VwPlxyXG5cdFx0XHQ8dHJhbnNpdGlvblx0bmFtZT1cImNvZy1lcnJvci1tZXNzYWdlXCI+XHJcblx0XHRcdFx0PGRpdiB2LWlmPVwiZXJyb3IgJiYgIXJlYWRvbmx5XCIgY2xhc3M9XCJjb2ctZXJyb3ItbWVzc2FnZVwiPnt7IGVycm9yIH19PC9kaXY+XHJcblx0XHRcdDwvdHJhbnNpdGlvbj5cclxuXHRcdDwvZGl2PlxyXG5cdDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHRpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XHJcblx0aW1wb3J0IHsgVXBsb2FkIH0gZnJvbSAnQGNvZ25pdG9mb3Jtcy9lbGVtZW50LXVpJztcclxuXHRpbXBvcnQgcmVjb3JkRm9jdXMgZnJvbSAnLi4vbWl4aW5zL3JlY29yZC1mb2N1cyc7XHJcblx0aW1wb3J0IENCdXR0b24gZnJvbSAnLi9CdXR0b24udnVlJztcclxuXHRpbXBvcnQgQ0ZpbGVJY29uIGZyb20gJy4vRmlsZUljb24udnVlJztcclxuXHRpbXBvcnQgSUV4IGZyb20gJy4vLi4vYXNzZXRzL2V4LW91dGxpbmUuc3ZnJztcclxuXHRpbXBvcnQgSURvd25sb2FkIGZyb20gJy4vLi4vYXNzZXRzL2Rvd25sb2FkLnN2Zyc7XHJcblx0aW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICcuLi91dGlsL2RlZmVycmVkJztcclxuXHRpbXBvcnQgeyBSZXF1ZXN0Q2FuY2VsbGVkRXJyb3IgfSBmcm9tICdzcmMvd2ViLWFwaS9iYXNlLXNlcnZpY2UnO1xyXG5cdGltcG9ydCB7IEZvcm1FdmVudHMgfSBmcm9tICdzcmMvZnJhbWV3b3JrL3B1YmxpYy9ldmVudHMnO1xyXG5cdGltcG9ydCB7IEZvcm1FdmVudCB9IGZyb20gJ3NyYy9mcmFtZXdvcmsvZXZlbnRpbmcvZm9ybS1ldmVudCc7XHJcblx0aW1wb3J0IGRlYm91bmNlIGZyb20gJ3NyYy91dGlsL2RlYm91bmNlJztcclxuXHJcblx0VnVlLnVzZShVcGxvYWQpO1xyXG5cclxuXHRmdW5jdGlvbiBnZXRNZWdhYnl0ZXMoZmlsZSkge1xyXG5cdFx0cmV0dXJuIGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0O1xyXG5cdH1cclxuXHJcblx0Y29uc3QgcmFzdGVySW1hZ2VUeXBlcyA9IFsncG5nJywgJ2dpZicsICdqcGcnLCAnanBlZycsICd0aWYnLCAndGlmZicsICdibXAnXTtcclxuXHJcblx0ZXhwb3J0IGRlZmF1bHQge1xyXG5cdFx0bmFtZTogJ0NVcGxvYWQnLFxyXG5cdFx0Y29tcG9uZW50czogeyBJRXgsIElEb3dubG9hZCwgQ0J1dHRvbiwgQ0ZpbGVJY29uIH0sXHJcblx0XHRtaXhpbnM6IFtyZWNvcmRGb2N1c10sXHJcblx0XHRpbmplY3Q6IFsnJHJlc291cmNlJywgJ2Zvcm1FdmVudHMnLCAnZmxhZ3MnXSxcclxuXHRcdG1vZGVsOiB7XHJcblx0XHRcdHByb3A6ICd2YWx1ZScsXHJcblx0XHRcdGV2ZW50OiAnY2hhbmdlJ1xyXG5cdFx0fSxcclxuXHRcdHByb3BzOiB7XHJcblx0XHRcdGVuY3J5cHQ6IEJvb2xlYW4sXHJcblx0XHRcdGZpbGVTZXJ2aWNlOiB7IHR5cGU6IE9iamVjdCwgcmVxdWlyZWQ6IHRydWUgfSxcclxuXHRcdFx0dmFsdWU6IHsgdHlwZTogW09iamVjdCwgQXJyYXldLCBkZWZhdWx0OiAoKSA9PiBbXSB9LFxyXG5cdFx0XHRhbGxvd2VkVHlwZXM6IHsgdHlwZTogQXJyYXksIGRlZmF1bHQ6IHVuZGVmaW5lZCB9LFxyXG5cdFx0XHRiYW5uZWRUeXBlczogeyB0eXBlOiBBcnJheSwgZGVmYXVsdDogKCkgPT4gW10gfSxcclxuXHRcdFx0bWF4U2l6ZTogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IHVuZGVmaW5lZCB9LFxyXG5cdFx0XHRtYXhGaWxlczogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IHVuZGVmaW5lZCB9LFxyXG5cdFx0XHRpZDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcblx0XHRcdHJlYWRvbmx5OiBCb29sZWFuXHJcblx0XHR9LFxyXG5cdFx0ZGF0YSgpIHtcclxuXHRcdFx0Y29uc3QgaW50ZXJuYWxWYWx1ZSA9ICF0aGlzLnZhbHVlICYmIHRoaXMubXVsdGlwbGUgPyBbXSA6IHRoaXMudmFsdWU7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0dXBkYXRpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdGluaXRpYWxGaWxlczogW10sXHJcblx0XHRcdFx0aW50ZXJuYWxWYWx1ZSxcclxuXHRcdFx0XHRlcnJvcjogJycsXHJcblx0XHRcdFx0dXBsb2FkUmVmOiBudWxsLFxyXG5cdFx0XHRcdGNhbmNlbGxhdGlvbk1hcDoge30sXHJcblx0XHRcdFx0dWlkTWFwOiB7fSxcclxuXHRcdFx0XHRkZWJvdW5jZWRSZXNldDogZGVib3VuY2UodGhpcy5yZXNldCksXHJcblx0XHRcdFx0cmVzZXRQcm9taXNlOiBuZXcgRGVmZXJyZWQoKVxyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHRcdGNvbXB1dGVkOiB7XHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBUaGUgbGlzdCBvZiBmaWxlcyBmb3IgdGhlIGZpbGUgaW5wdXQuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHR1cGxvYWRGaWxlcygpIHtcclxuXHRcdFx0XHR0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLnJlc2V0UHJvbWlzZS5yZXNvbHZlKCkpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnVwbG9hZFJlZiA/IHRoaXMudXBsb2FkUmVmLnVwbG9hZEZpbGVzIDogW107XHJcblx0XHRcdH0sXHJcblx0XHRcdGxpbWl0UmVhY2hlZCgpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbFZhbHVlLmxlbmd0aCA9PT0gdGhpcy5tYXhGaWxlcztcclxuXHRcdFx0fSxcclxuXHRcdFx0aXNMaXN0KCkge1xyXG5cdFx0XHRcdHJldHVybiBBcnJheS5pc0FycmF5KHRoaXMuaW50ZXJuYWxWYWx1ZSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGxvd2VyQ2FzZUFsbG93ZWRUeXBlcygpIHtcclxuXHRcdFx0XHQvLyBOZWNlc3Nhcnkgc2luY2UgdGhlIGdldEV4dGVuc2lvbiBtZXRob2QgYWx3YXlzIHJldHVybnMgYSBsb3dlcmNhc2Ugc3RyaW5nXHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuYWxsb3dlZFR5cGVzID8gdGhpcy5hbGxvd2VkVHlwZXMubWFwKHQgPT4gdC50b0xvd2VyQ2FzZSgpKSA6IFtdO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0d2F0Y2g6IHtcclxuXHRcdFx0dmFsdWUodmFsKSB7XHJcblx0XHRcdFx0dGhpcy5pbnRlcm5hbFZhbHVlID0gdmFsO1xyXG5cclxuXHRcdFx0XHQvLyBSZXNldCB0aGUgZmlsZSBsaXN0IGlmIGZpbGVzIGFyZSBjaGFuZ2VkIGZyb20gKm91dHNpZGUqIHRoZSBjb21wb25lbnQuXHJcblx0XHRcdFx0aWYgKCF0aGlzLnVwZGF0aW5nKVxyXG5cdFx0XHRcdFx0dGhpcy5yZXNldChmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRhc3luYyBtb3VudGVkKCkge1xyXG5cdFx0XHR0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCcuZWwtdXBsb2FkJykuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuZm9ybUV2ZW50cylcclxuXHRcdFx0XHR0aGlzLmZvcm1FdmVudHMub24oRm9ybUV2ZW50cy5SZXNldEVudHJ5LCB0aGlzLmRlYm91bmNlZFJlc2V0KTtcclxuXHJcblx0XHRcdGF3YWl0IHRoaXMucmVzZXQoKTtcclxuXHRcdFx0dGhpcy51cGxvYWRSZWYgPSB0aGlzLiRyZWZzLnVwbG9hZDtcclxuXHRcdH0sXHJcblx0XHRkZXN0cm95ZWQoKSB7XHJcblx0XHRcdHRoaXMuZm9ybUV2ZW50cy5vZmYoRm9ybUV2ZW50cy5SZXNldEVudHJ5LCB0aGlzLmRlYm91bmNlZFJlc2V0KTtcclxuXHRcdH0sXHJcblx0XHRtZXRob2RzOiB7XHJcblx0XHRcdGFzeW5jIHJlc2V0KGNhbmNlbFVwbG9hZHMgPSB0cnVlKSB7XHJcblx0XHRcdFx0aWYgKCF0aGlzLnJlc2V0UHJvbWlzZS5wZW5kaW5nKVxyXG5cdFx0XHRcdFx0dGhpcy5yZXNldFByb21pc2UgPSBuZXcgRGVmZXJyZWQoKTtcclxuXHRcdFx0XHRjb25zdCBmaWxlTGlzdCA9IEFycmF5LmlzQXJyYXkodGhpcy5pbnRlcm5hbFZhbHVlKSA/IHRoaXMuaW50ZXJuYWxWYWx1ZSA6IFt0aGlzLmludGVybmFsVmFsdWVdO1xyXG5cdFx0XHRcdHRoaXMuaW5pdGlhbEZpbGVzID0gYXdhaXQgUHJvbWlzZS5hbGwoZmlsZUxpc3QubWFwKHRoaXMuZmlsZURhdGFUb0ZpbGUuYmluZCh0aGlzKSkpO1xyXG5cdFx0XHRcdGlmIChjYW5jZWxVcGxvYWRzKVxyXG5cdFx0XHRcdFx0dGhpcy51cGxvYWRGaWxlcy5mb3JFYWNoKGZpbGUgPT4gdGhpcy5jYW5jZWxVcGxvYWQoZmlsZS51aWQpKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5yZXNldFByb21pc2U7XHJcblx0XHRcdH0sXHJcblx0XHRcdGdldERpc3BsYXlGaWxlU2l6ZShmaWxlKSB7XHJcblx0XHRcdFx0aWYgKGZpbGUuc2l6ZSA+IDEwMDAwMClcclxuXHRcdFx0XHRcdHJldHVybiBgJHtNYXRoLnJvdW5kKChmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCkgKiAxMCkgLyAxMH0gTUJgO1xyXG5cdFx0XHRcdGVsc2UgaWYgKGZpbGUuc2l6ZSA+IDEwMDApXHJcblx0XHRcdFx0XHRyZXR1cm4gYCR7TWF0aC5yb3VuZCgoZmlsZS5zaXplIC8gMTAyNCkgKiAxMCkgLyAxMH0gS0JgO1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHJldHVybiBgJHtmaWxlLnNpemV9IGJ5dGVzYDtcclxuXHRcdFx0fSxcclxuXHRcdFx0dXBsb2FkQ2xpY2tlZCgpIHtcclxuXHRcdFx0XHR0aGlzLmVycm9yID0gJyc7XHJcblx0XHRcdH0sXHJcblx0XHRcdGdldERvd25sb2FkVGV4dChmaWxlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuJHJlc291cmNlKCdmaWxldXBsb2FkLWRvd25sb2FkLXRleHQnKSArICcgJyArIGZpbGUubmFtZTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Z2V0UmVtb3ZlVGV4dChmaWxlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuJHJlc291cmNlKCdyZW1vdmUtaXRlbScpLnJlcGxhY2UoJ3tpdGVtfScsIGZpbGUubmFtZSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGFzeW5jIGZpbGVEYXRhVG9GaWxlKGZpbGUpIHtcclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0dWlkOiBmaWxlLklkLFxyXG5cdFx0XHRcdFx0dXJsOiBhd2FpdCB0aGlzLmZpbGVTZXJ2aWNlLmdldERvd25sb2FkVXJsKGZpbGUpLFxyXG5cdFx0XHRcdFx0bmFtZTogZmlsZS5OYW1lLFxyXG5cdFx0XHRcdFx0c2l6ZTogZmlsZS5TaXplXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Z2V0RmlsZVJlZihmaWxlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuaXNMaXN0ID8gdGhpcy5pbnRlcm5hbFZhbHVlLmZpbmQoZiA9PiBmLklkID09PSBmaWxlLnVpZCkgOiB0aGlzLmludGVybmFsVmFsdWU7XHJcblx0XHRcdH0sXHJcblx0XHRcdGhhc1RodW1ibmFpbChmaWxlKSB7XHJcblx0XHRcdFx0Y29uc3QgZmlsZURhdGFSZWYgPSB0aGlzLmdldEZpbGVSZWYoZmlsZSk7XHJcblx0XHRcdFx0cmV0dXJuIGZpbGVEYXRhUmVmICYmIGZpbGVEYXRhUmVmLklkICYmIHJhc3RlckltYWdlVHlwZXMuaW5jbHVkZXModGhpcy5nZXRFeHRlbnNpb24oZmlsZSkpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRnZXRUaHVtYm5haWwoZmlsZSkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmZpbGVTZXJ2aWNlLmdldFRodW1ibmFpbFVybCh0aGlzLmdldEZpbGVSZWYoZmlsZSkpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRnZXRFeHRlbnNpb24oZmlsZSkge1xyXG5cdFx0XHRcdHJldHVybiBmaWxlLm5hbWUgPyBmaWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKS50b0xvd2VyQ2FzZSgpIDogJz8/Pyc7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9FbGVtZUZFL2VsZW1lbnQvYmxvYi9kZXYvcGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQudnVlXHJcblx0XHRcdHVwbG9hZEZpbGUob3B0aW9ucykge1xyXG5cdFx0XHRcdGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgRGVmZXJyZWQoKTtcclxuXHRcdFx0XHR0aGlzLmNhbmNlbGxhdGlvbk1hcFtvcHRpb25zLmZpbGUudWlkXSA9IGNhbmNlbFByb21pc2UucmVzb2x2ZS5iaW5kKGNhbmNlbFByb21pc2UpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmZpbGVTZXJ2aWNlLnVwbG9hZChvcHRpb25zLmZpbGUsIHsgb25Qcm9ncmVzczogb3B0aW9ucy5vblByb2dyZXNzLCBlbmNyeXB0OiB0aGlzLmVuY3J5cHQsIGNhbmNlbFByb21pc2U6IGNhbmNlbFByb21pc2UucHJvbWlzZSB9KVxyXG5cdFx0XHRcdFx0LnRoZW4oYXN5bmMgZmlsZURhdGEgPT4ge1xyXG5cdFx0XHRcdFx0XHQvLyBNYWtlIHN1cmUgRWxlbWVudCdzIGZpbGUgb2JqZWN0IGhhcyBjb3JyZWN0IGluZm9ybWF0aW9uXHJcblx0XHRcdFx0XHRcdE9iamVjdC5hc3NpZ24odGhpcy51cGxvYWRSZWYudXBsb2FkRmlsZXMuZmluZChmID0+IGYudWlkID09PSBvcHRpb25zLmZpbGUudWlkKSwgYXdhaXQgdGhpcy5maWxlRGF0YVRvRmlsZShmaWxlRGF0YSkpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnVpZE1hcFtmaWxlRGF0YS5JZF0gPSBvcHRpb25zLmZpbGUudWlkO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnVwbG9hZGVkKGZpbGVEYXRhKTtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsbGF0aW9uTWFwW29wdGlvbnMuZmlsZS51aWRdO1xyXG5cdFx0XHRcdFx0fSwgZSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMudXBsb2FkRXJyb3Iob3B0aW9ucy5maWxlLCBlLnJlcXVlc3QgJiYgZS5yZXF1ZXN0LnN0YXR1cyA9PT0gNDE1ID8gdGhpcy4kcmVzb3VyY2UoJ2ZpbGV1cGxvYWQtZXhjbHVkZWQtZmlsZS10eXBlLW1lc3NhZ2UnKSA6IG51bGwsIGUgaW5zdGFuY2VvZiBSZXF1ZXN0Q2FuY2VsbGVkRXJyb3IpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHVwbG9hZGVkKGZpbGVEYXRhUmVmKSB7XHJcblx0XHRcdFx0dGhpcy51cGRhdGluZyA9IHRydWU7XHJcblx0XHRcdFx0dGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5pc0xpc3QgPyB0aGlzLmludGVybmFsVmFsdWUuY29uY2F0KGZpbGVEYXRhUmVmKSA6IGZpbGVEYXRhUmVmKTtcclxuXHRcdFx0XHR0aGlzLiRlbWl0KCdmaWxlLXVwbG9hZGVkJywgZmlsZURhdGFSZWYpO1xyXG5cdFx0XHRcdHRoaXMuJG5leHRUaWNrKCgpID0+IHsgdGhpcy51cGRhdGluZyA9IGZhbHNlOyB9KTtcclxuXHRcdFx0fSxcclxuXHRcdFx0dXBsb2FkRXJyb3IoZmlsZSwgbXNnLCB3YXNDYW5jZWxsZWQpIHtcclxuXHRcdFx0XHRjb25zdCBpZHggPSB0aGlzLnVwbG9hZFJlZi51cGxvYWRGaWxlcy5maW5kSW5kZXgoZiA9PiBmLnVpZCA9PT0gZmlsZS51aWQpO1xyXG5cdFx0XHRcdGlmIChpZHggPj0gMClcclxuXHRcdFx0XHRcdHRoaXMudXBsb2FkUmVmLnVwbG9hZEZpbGVzLnNwbGljZShpZHgsIDEpO1xyXG5cclxuXHRcdFx0XHRpZiAoIXdhc0NhbmNlbGxlZClcclxuXHRcdFx0XHRcdHRoaXMuZXJyb3IgPSBtc2cgfHwgdGhpcy4kcmVzb3VyY2UoJ2ZpbGV1cGxvYWQtZmFpbGVkLXVwbG9hZC1tZXNzYWdlJywgeyBmaWxlTmFtZTogZmlsZS5uYW1lIH0pO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjYW5jZWxVcGxvYWQodGFyZ2V0SWQpIHtcclxuXHRcdFx0XHRjb25zdCBjYW5jZWwgPSB0aGlzLmNhbmNlbGxhdGlvbk1hcFt0YXJnZXRJZF07XHJcblx0XHRcdFx0aWYgKGNhbmNlbCkge1xyXG5cdFx0XHRcdFx0Y2FuY2VsKCk7XHJcblx0XHRcdFx0XHRkZWxldGUgdGhpcy5jYW5jZWxsYXRpb25NYXBbdGFyZ2V0SWRdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0cmVtb3ZlRmlsZSh0YXJnZXRJZCkge1xyXG5cdFx0XHRcdHRoaXMudXBkYXRpbmcgPSB0cnVlO1xyXG5cdFx0XHRcdHRoaXMuZXJyb3IgPSAnJztcclxuXHJcblx0XHRcdFx0dGhpcy5yZWNvcmRGb2N1cygpO1xyXG5cdFx0XHRcdC8vIEVpdGhlciBlbWl0IG51bGwgaWYgdXNpbmcgYSBzaW5nbGUgZmlsZSwgb3IgdGhlIGxpc3QgZXhjbHVkaW5nIHRoZSBkZWxldGVkIGZpbGVcclxuXHRcdFx0XHR0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLmlzTGlzdCA/IHRoaXMuaW50ZXJuYWxWYWx1ZS5maWx0ZXIoZiA9PiBmLklkICE9PSB0YXJnZXRJZCkgOiBudWxsKTtcclxuXHJcblx0XHRcdFx0Ly8gS2VlcCB1cGxvYWRGaWxlcyBpbiBzeW5jIHdpdGggaW50ZXJuYWxWYWx1ZVxyXG5cdFx0XHRcdHRoaXMudXBsb2FkUmVmLnVwbG9hZEZpbGVzLnNwbGljZSh0aGlzLnVwbG9hZFJlZi51cGxvYWRGaWxlcy5maW5kSW5kZXgoZiA9PiBmLnVpZCA9PT0gdGFyZ2V0SWQpLCAxKTtcclxuXHRcdFx0XHR0aGlzLiRuZXh0VGljaygoKSA9PiB7IHRoaXMudXBkYXRpbmcgPSBmYWxzZTsgfSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBIYW5kbGUgY2FzZSB3aGVuIG11bHRpcGxlIGZpbGVzIGFyZSBzZWxlY3RlZC9kcmFnZ2VkIGF0IG9uY2UsIGFuZCB0aGUgY291bnQgZXhjZWVkcyB0aGUgbGltaXQuXHJcblx0XHRcdCAqIGVsLXVwbG9hZCBibG9ja3MgdGhlIGVudGlyZSBiYXRjaCBvZiBmaWxlcywgc28gd2UganVzdCB3YW50IHRvIGRpc3BsYXkgYW4gZXJyb3IgbWVzc2FnZSBleHBsYWluaW5nXHJcblx0XHRcdCAqIHdoYXQgaGFwcGVuZWQuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRsaW1pdEV4Y2VlZGVkKGZpbGVzKSB7XHJcblx0XHRcdFx0dGhpcy5lcnJvciA9IHRoaXMuJHJlc291cmNlKCdmaWxldXBsb2FkLW1heC1maWxlLWNvdW50LWV4Y2VlZGVkLW1lc3NhZ2UnLCB7IG1heEZpbGVDb3VudDogdGhpcy5tYXhGaWxlcyB9KTtcclxuXHRcdFx0fSxcclxuXHRcdFx0YXN5bmMgZG93bmxvYWRGaWxlKGZpbGUpIHtcclxuXHRcdFx0XHRpZiAoIXRoaXMuZmlsZVNlcnZpY2UpXHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdGNvbnN0IGZpbGVEYXRhUmVmID0gdGhpcy5nZXRGaWxlUmVmKGZpbGUpO1xyXG5cdFx0XHRcdHRoaXMuZmlsZVNlcnZpY2UuZG93bmxvYWRGaWxlKGZpbGVEYXRhUmVmKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0YXN5bmMgcHJldmlld0ZpbGUoZmlsZSkge1xyXG5cdFx0XHRcdGlmICghdGhpcy5maWxlU2VydmljZSlcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRjb25zdCBmaWxlRGF0YVJlZiA9IHRoaXMuZ2V0RmlsZVJlZihmaWxlKTtcclxuXHRcdFx0XHRjb25zdCBzaXplID0gZ2V0TWVnYWJ5dGVzKGZpbGUpO1xyXG5cdFx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZ2V0RXh0ZW5zaW9uKGZpbGUpO1xyXG5cclxuXHRcdFx0XHRsZXQgZG93bmxvYWRVcmwgPSB0aGlzLmZpbGVTZXJ2aWNlLmdldERvd25sb2FkVXJsKGZpbGVEYXRhUmVmKTtcclxuXHRcdFx0XHRsZXQgc2hvdWxkUHJldmlldyA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRzd2l0Y2ggKGV4dGVuc2lvbikge1xyXG5cdFx0XHRcdGNhc2UgJ2RvYyc6XHJcblx0XHRcdFx0Y2FzZSAnZG9jeCc6XHJcblx0XHRcdFx0Y2FzZSAncHB0JzpcclxuXHRcdFx0XHRjYXNlICdwcHR4JzpcclxuXHRcdFx0XHRcdGlmIChzaXplIDwgMTApXHJcblx0XHRcdFx0XHRcdHNob3VsZFByZXZpZXcgPSB0cnVlO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAneGxzJzpcclxuXHRcdFx0XHRjYXNlICd4bHN4JzpcclxuXHRcdFx0XHRcdGlmIChzaXplIDwgNSlcclxuXHRcdFx0XHRcdFx0c2hvdWxkUHJldmlldyA9IHRydWU7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdwZGYnOlxyXG5cdFx0XHRcdFx0ZG93bmxvYWRVcmwgKz0gJyZhdD0wJztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRpZiAoIXJhc3RlckltYWdlVHlwZXMuaW5jbHVkZXMoZXh0ZW5zaW9uKSlcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRkb3dubG9hZFVybCArPSAnJmF0PTAnO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoc2hvdWxkUHJldmlldylcclxuXHRcdFx0XHRcdGRvd25sb2FkVXJsID0gYXdhaXQgdGhpcy5maWxlU2VydmljZS5nZXRQcmV2aWV3VXJsKGZpbGVEYXRhUmVmKTtcclxuXHJcblx0XHRcdFx0d2luZG93Lm9wZW4oZG93bmxvYWRVcmwsICdfYmxhbmsnKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0YmVmb3JlVXBsb2FkKGZpbGUpIHtcclxuXHRcdFx0XHR0aGlzLmVycm9yID0gJyc7XHJcblxyXG5cdFx0XHRcdC8vIEZpbGUgdHlwZSBibGFja2xpc3RlZFxyXG5cdFx0XHRcdGlmICh0aGlzLmJhbm5lZFR5cGVzLmluY2x1ZGVzKHRoaXMuZ2V0RXh0ZW5zaW9uKGZpbGUpKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5lcnJvciA9IHRoaXMuJHJlc291cmNlKCdmaWxldXBsb2FkLWV4Y2x1ZGVkLWZpbGUtdHlwZS1tZXNzYWdlJyk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBGaWxlIHR5cGUgbm90IHdoaXRlbGlzdGVkXHJcblx0XHRcdFx0aWYgKHRoaXMubG93ZXJDYXNlQWxsb3dlZFR5cGVzLmxlbmd0aCAhPT0gMCAmJiAhdGhpcy5sb3dlckNhc2VBbGxvd2VkVHlwZXMuaW5jbHVkZXModGhpcy5nZXRFeHRlbnNpb24oZmlsZSkpKSB7XHJcblx0XHRcdFx0XHR0aGlzLmVycm9yID0gdGhpcy4kcmVzb3VyY2UoJ2ZpbGV1cGxvYWQtaW52YWxpZC1maWxlLXR5cGUtbWVzc2FnZScsIHsgYWxsb3dlZFR5cGVzOiB0aGlzLmFsbG93ZWRUeXBlcy5qb2luKCcsICcpIH0pO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRmlsZSB0b28gYmlnXHJcblx0XHRcdFx0aWYgKHRoaXMubWF4U2l6ZSAmJiBnZXRNZWdhYnl0ZXMoZmlsZSkgPiB0aGlzLm1heFNpemUpIHtcclxuXHRcdFx0XHRcdHRoaXMuZXJyb3IgPSB0aGlzLiRyZXNvdXJjZSgnZmlsZXVwbG9hZC1tYXgtc2l6ZS1leGNlZWRlZC1tZXNzYWdlJywgeyBtYXhTaXplOiB0aGlzLm1heFNpemUgfSk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBGaWxlIHRvbyBzbWFsbFxyXG5cdFx0XHRcdGlmIChmaWxlLnNpemUgPT09IDApIHtcclxuXHRcdFx0XHRcdHRoaXMuZXJyb3IgPSB0aGlzLiRyZXNvdXJjZSgnZmlsZXVwbG9hZC16ZXJvLWJ5dGUtZmlsZS1tZXNzYWdlJyk7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVXNpbmcgdGhpcyBtYXAgYWxsb3dzIHVzIHRvIHJldXNlIHRoZSBmaWxlIGxpc3QgaXRlbSB3aGVuIHRoZSB1cGxvYWQgY29tcGxldGVzLlxyXG5cdFx0XHQgKiBXaXRob3V0IHRoZSBtYXBwaW5nIG9mIEZpbGVEYXRhIElkID0+IGZpbGUgdWlkLCB0aGUgdnVlIGtleSB3b3VsZCBjaGFuZ2UsXHJcblx0XHRcdCAqIGNhdXNpbmcgdGhlIERPTSB0byByZXJlbmRlciB0aGUgbGlzdCBpdGVtIGV2ZW4gdGhvdWdoIGl0IHN0aWxsIGNvcnJlc3BvbmRzXHJcblx0XHRcdCAqIHRvIHRoZSBzYW1lIGZpbGUuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRrZXkoaWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy51aWRNYXBbaWRdIHx8IGlkO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRwYXN0ZUZpbGUoZXZlbnQpIHtcclxuXHRcdFx0XHRpZiAodGhpcy4kZWwuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgJiYgIXRoaXMucmVhZG9ubHkpIHtcclxuXHRcdFx0XHRcdGNvbnN0IGl0ZW1zID0gKGV2ZW50LmNsaXBib2FyZERhdGEgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhKS5pdGVtcztcclxuXHRcdFx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xyXG5cdFx0XHRcdFx0XHRpZiAoaXRlbS5raW5kID09PSAnZmlsZScpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBmaWxlID0gaXRlbS5nZXRBc0ZpbGUoKTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLiRyZWZzLnVwbG9hZC5oYW5kbGVTdGFydChmaWxlKTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLiRyZWZzLnVwbG9hZC4kcmVmc1sndXBsb2FkLWlubmVyJ10udXBsb2FkKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRoYW5kbGVVcGxvYWRDbGlja3MoZXZlbnQpIHtcclxuXHRcdFx0XHRpZiAoIXRoaXMuJHJlZnMudXBsb2FkQnV0dG9uLiRlbC5jb250YWlucyhldmVudC50YXJnZXQpKVxyXG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRyeURvd25sb2FkRmlsZShmaWxlLCBldmVudCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLmZsYWdzLmZpbGVEb3dubG9hZHNEaXNhYmxlZCkge1xyXG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdFx0XHR0aGlzLmZvcm1FdmVudHMuZW1pdChuZXcgRm9ybUV2ZW50KEZvcm1FdmVudHMuVHJ5RG93bmxvYWRPdmVyTGltaXQpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLmRvd25sb2FkRmlsZShmaWxlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdHRyeVByZXZpZXdGaWxlKGZpbGUsIGV2ZW50KSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuZmxhZ3MuZmlsZURvd25sb2Fkc0Rpc2FibGVkKSB7XHJcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRcdHRoaXMuZm9ybUV2ZW50cy5lbWl0KG5ldyBGb3JtRXZlbnQoRm9ybUV2ZW50cy5UcnlEb3dubG9hZE92ZXJMaW1pdCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHRoaXMucHJldmlld0ZpbGUoZmlsZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuI3skc3BlY2lmaWNpdHktYmFzZX0ge1xyXG5cclxuXHQuY29nLXVwbG9hZCB7XHJcblxyXG5cdFx0LmVsLXVwbG9hZC1kcmFnZ2VyIHtcclxuXHJcblx0XHRcdCYuaXMtZHJhZ292ZXIgPiBkaXYge1xyXG5cdFx0XHRcdGJhY2tncm91bmQ6IGhzbGEodmFyKC0tYmFja2dyb3VuZC1oc2wpLCAuMSk7XHJcblx0XHRcdFx0Ym9yZGVyLWNvbG9yOiB2YXIoLS1oaWdobGlnaHQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQmID4gZGl2IHtcclxuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xyXG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0XHRcdFx0YmFja2dyb3VuZDogJGJnQ29sb3I7XHJcblx0XHRcdFx0Ym9yZGVyOiB2YXIoLS1pbnB1dF9fYm9yZGVyLXdpZHRoKSBzb2xpZCB0cmFuc3BhcmVudDtcclxuXHRcdFx0XHRib3JkZXItcmFkaXVzOiBjYWxjKHZhcigtLWJvcmRlci1yYWRpdXMpICogLjcpO1xyXG5cdFx0XHRcdHBhZGRpbmc6ICRndXR0ZXItaGFsZjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC5lbC11cGxvYWRfX2lucHV0IHtcclxuXHRcdFx0ZGlzcGxheTogbm9uZTtcclxuXHRcdH1cclxuXHJcblx0XHQmOm5vdCguaXMtcmVhZC1vbmx5KSB7XHJcblx0XHRcdGJvcmRlcjogaHNsYSh2YXIoLS1iYWNrZ3JvdW5kLWhzbCksIC41KSB2YXIoLS1pbnB1dF9fYm9yZGVyLXdpZHRoKSBzb2xpZDtcclxuXHRcdFx0Ym9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7XHJcblx0XHRcdHBhZGRpbmc6IDJweDtcclxuXHRcdH1cclxuXHJcblx0XHQmX19kcmFnLXRleHQge1xyXG5cdFx0XHRtYXJnaW4tbGVmdDogLjVlbTtcclxuXHRcdH1cclxuXHJcblx0XHQmX19saXN0IHtcclxuXHRcdFx0bWFyZ2luOiAkZ3V0dGVyLXNpeHRoIDA7XHJcblx0XHRcdHBhZGRpbmctcmlnaHQ6ICRndXR0ZXItcXVhcnRlcjtcclxuXHRcdFx0cGFkZGluZy1sZWZ0OiAkZ3V0dGVyLXF1YXJ0ZXI7XHJcblx0XHRcdGxpc3Qtc3R5bGU6IG5vbmU7XHJcblx0XHRcdHRyYW5zaXRpb246ICRzcGVlZC1xdWFydGVyO1xyXG5cclxuXHRcdFx0JjplbXB0eSB7XHJcblx0XHRcdFx0bWFyZ2luOiAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsaSB7XHJcblx0XHRcdFx0ZGlzcGxheTogZmxleDtcclxuXHRcdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHRcdFx0XHRwYWRkaW5nOiAkZ3V0dGVyLXF1YXJ0ZXI7XHJcblx0XHRcdFx0dHJhbnNpdGlvbjogJHNwZWVkLXF1YXJ0ZXI7XHJcblxyXG5cdFx0XHRcdCY6aG92ZXIge1xyXG5cdFx0XHRcdFx0YmFja2dyb3VuZDogaHNsYSh2YXIoLS1iYWNrZ3JvdW5kLWhzbCksIC4xKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxpICsgbGkge1xyXG5cdFx0XHRcdG1hcmdpbi10b3A6ICRndXR0ZXItc2l4dGg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC5jb2ctdXBsb2FkX190aHVtYm5haWwsXHJcblx0XHRcdC5jb2ctaS1maWxlIHtcclxuXHRcdFx0XHRtYXgtd2lkdGg6IDEuN2VtO1xyXG5cdFx0XHRcdG1hcmdpbi1yaWdodDogLjJlbTtcclxuXHRcdFx0XHRmb250LXNpemU6IDEuNWVtO1xyXG5cdFx0XHRcdHRyYW5zaXRpb246ICRzcGVlZC1xdWFydGVyO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwcm9ncmVzcyB7XHJcblx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0XHRcdHJpZ2h0OiB2YXIoLS1ndXR0ZXIpO1xyXG5cdFx0XHRcdHdpZHRoOiBjYWxjKDQ1cHggLSAyZW0pO1xyXG5cdFx0XHRcdGhlaWdodDogM3B4O1xyXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6IGhzbGEodmFyKC0tYmFja2dyb3VuZC1oc2wpLCAuMyk7XHJcblx0XHRcdFx0Ym9yZGVyOiAwO1xyXG5cdFx0XHRcdG1hcmdpbi1yaWdodDogMWVtO1xyXG5cdFx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcclxuXHRcdFx0XHRhcHBlYXJhbmNlOiBub25lO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwcm9ncmVzczo6LXdlYmtpdC1wcm9ncmVzcy1iYXIge1xyXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6IGhzbGEodmFyKC0tYmFja2dyb3VuZC1oc2wpLCAuNSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHByb2dyZXNzOjotd2Via2l0LXByb2dyZXNzLXZhbHVlIHtcclxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1oaWdobGlnaHQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwcm9ncmVzczo6LW1vei1wcm9ncmVzcy1iYXIge1xyXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2hsaWdodCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHByb2dyZXNzOjotbXMtZmlsbCB7XHJcblx0XHRcdFx0Ym9yZGVyOiAwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Jl9fbGlzdC1lbnRlci1hY3RpdmUsXHJcblx0XHQmX19saXN0LWxlYXZlLWFjdGl2ZSB7XHJcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XHJcblx0XHR9XHJcblxyXG5cdFx0Jl9fbGlzdC1lbnRlci10byxcclxuXHRcdCZfX2xpc3QtbGVhdmUge1xyXG5cdFx0XHRtYXgtaGVpZ2h0OiA1ZW07XHJcblx0XHRcdG9wYWNpdHk6IDE7XHJcblxyXG5cdFx0XHQuY29nLWktZmlsZSB7XHJcblx0XHRcdFx0dHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdCZfX2ZpbGUtaW5mbyB7XHJcblx0XHRcdG1heC13aWR0aDogY2FsYygxMDAlIC0gNy41ZW0pO1xyXG5cdFx0XHRtYXJnaW4tbGVmdDogJGd1dHRlci1xdWFydGVyO1xyXG5cdFx0fVxyXG5cclxuXHRcdCZfX3RodW1ibmFpbDpub3QoLmVycm9yKSArIC5jb2ctaS1maWxlIHtcclxuXHRcdFx0ZGlzcGxheTogbm9uZTtcclxuXHRcdH1cclxuXHJcblx0XHQmX190aHVtYm5haWwuZXJyb3Ige1xyXG5cdFx0XHRkaXNwbGF5OiBub25lO1xyXG5cdFx0fVxyXG5cclxuXHRcdEBpbmNsdWRlIGF0LXJvb3Qge1xyXG5cclxuXHRcdFx0YS5jb2ctdXBsb2FkX19saW5rIHtcclxuXHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQmX19saW5rIHtcclxuXHRcdFx0bWF4LXdpZHRoOiAxMDAlO1xyXG5cdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xyXG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuXHRcdH1cclxuXHJcblx0XHQmX19maWxlLXNpemUge1xyXG5cdFx0XHRtYXJnaW4tdG9wOiAtLjM1ZW07XHJcblx0XHRcdG9wYWNpdHk6IC42O1xyXG5cdFx0XHRjb2xvcjogdmFyKC0tY29sb3IpO1xyXG5cdFx0XHRmb250LXNpemU6IHZhcigtLXNtYWxsLXRleHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdCZfX2xpc3QgYnV0dG9uIHtcclxuXHRcdFx0bWFyZ2luLWxlZnQ6IGF1dG87XHJcblx0XHR9XHJcblxyXG5cdFx0Jl9fbGlzdCBidXR0b24gKyBidXR0b24ge1xyXG5cdFx0XHRtYXJnaW4tbGVmdDogLjNlbTtcclxuXHRcdH1cclxuXHJcblx0XHQmX19saXN0LWVudGVyLFxyXG5cdFx0Jl9fbGlzdC1sZWF2ZS10byB7XHJcblx0XHRcdG1heC1oZWlnaHQ6IDA7XHJcblx0XHRcdHBhZGRpbmc6IDAgIWltcG9ydGFudDtcclxuXHRcdFx0b3BhY2l0eTogMDtcclxuXHJcblx0XHRcdC5jb2ctaS1maWxlIHtcclxuXHRcdFx0XHQvLyB3aGVuIHNldCBhdCB6ZXJvIGNhdXNlZCBidWcgMTkyODNcclxuXHRcdFx0XHR0cmFuc2Zvcm06IHNjYWxlKC4xKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LmNvZy1pLWRvd25sb2FkIHtcclxuXHRcdGZpbGw6IHRyYW5zcGFyZW50O1xyXG5cdFx0c3Ryb2tlOiBjdXJyZW50Y29sb3I7XHJcblxyXG5cdFx0Jl9fYXJyb3csXHJcblx0XHQmX19ncm91bmQge1xyXG5cdFx0XHR0cmFuc2l0aW9uOiAkc3BlZWQtcXVhcnRlcjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC5jb2ctZm9ybTpub3QoW2RhdGEtd2lkdGh+PSczMjUnXSkge1xyXG5cclxuXHRcdC5lbC11cGxvYWQtZHJhZ2dlciA+IGRpdiB7XHJcblx0XHRcdHBhZGRpbmc6ICRndXR0ZXItcXVhcnRlcjtcclxuXHRcdH1cclxuXHJcblx0XHQuY29nLXVwbG9hZF9fbGlzdCB7XHJcblx0XHRcdHBhZGRpbmctcmlnaHQ6IDA7XHJcblx0XHRcdHBhZGRpbmctbGVmdDogMDtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jc3MtbG9hZGVyQDMuMi4wX3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJodG1sIC5jb2ctdXBsb2FkIC5lbC11cGxvYWQtZHJhZ2dlci5pcy1kcmFnb3ZlciA+IGRpdiwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZCAuZWwtdXBsb2FkLWRyYWdnZXIuaXMtZHJhZ292ZXIgPiBkaXYge1xcbiAgYmFja2dyb3VuZDogaHNsYSh2YXIoLS1iYWNrZ3JvdW5kLWhzbCksIDAuMSk7XFxuICBib3JkZXItY29sb3I6IHZhcigtLWhpZ2hsaWdodCk7XFxufVxcbmh0bWwgLmNvZy11cGxvYWQgLmVsLXVwbG9hZC1kcmFnZ2VyID4gZGl2LCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkIC5lbC11cGxvYWQtZHJhZ2dlciA+IGRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQ6IGhzbGEodmFyKC0tYmFja2dyb3VuZC1oc2wpLCAwLjEyKTtcXG4gIGJvcmRlcjogdmFyKC0taW5wdXRfX2JvcmRlci13aWR0aCkgc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmFkaXVzOiBjYWxjKHZhcigtLWJvcmRlci1yYWRpdXMpICogMC43KTtcXG4gIHBhZGRpbmc6IGNhbGModmFyKC0tZ3V0dGVyKSAvIDIpO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkIC5lbC11cGxvYWRfX2lucHV0LCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkIC5lbC11cGxvYWRfX2lucHV0IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbmh0bWwgLmNvZy11cGxvYWQ6bm90KC5pcy1yZWFkLW9ubHkpLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkOm5vdCguaXMtcmVhZC1vbmx5KSB7XFxuICBib3JkZXI6IGhzbGEodmFyKC0tYmFja2dyb3VuZC1oc2wpLCAwLjUpIHZhcigtLWlucHV0X19ib3JkZXItd2lkdGgpIHNvbGlkO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7XFxuICBwYWRkaW5nOiAycHg7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2RyYWctdGV4dCwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fZHJhZy10ZXh0IHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjVlbTtcXG59XFxuaHRtbCAuY29nLXVwbG9hZF9fbGlzdCwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdCB7XFxuICBtYXJnaW46IGNhbGModmFyKC0tZ3V0dGVyKSAvIDYpIDA7XFxuICBwYWRkaW5nLXJpZ2h0OiBjYWxjKHZhcigtLWd1dHRlcikgLyA0KTtcXG4gIHBhZGRpbmctbGVmdDogY2FsYyh2YXIoLS1ndXR0ZXIpIC8gNCk7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgdHJhbnNpdGlvbjogY2FsYyh2YXIoLS1zcGVlZCkgLyA0KTtcXG59XFxuaHRtbCAuY29nLXVwbG9hZF9fbGlzdDplbXB0eSwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdDplbXB0eSB7XFxuICBtYXJnaW46IDA7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2xpc3QgbGksIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QgbGkge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiBjYWxjKHZhcigtLWd1dHRlcikgLyA0KTtcXG4gIHRyYW5zaXRpb246IGNhbGModmFyKC0tc3BlZWQpIC8gNCk7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2xpc3QgbGk6aG92ZXIsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QgbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogaHNsYSh2YXIoLS1iYWNrZ3JvdW5kLWhzbCksIDAuMSk7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2xpc3QgbGkgKyBsaSwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdCBsaSArIGxpIHtcXG4gIG1hcmdpbi10b3A6IGNhbGModmFyKC0tZ3V0dGVyKSAvIDYpO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0IC5jb2ctdXBsb2FkX190aHVtYm5haWwsXFxuaHRtbCAuY29nLXVwbG9hZF9fbGlzdCAuY29nLWktZmlsZSwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdCAuY29nLXVwbG9hZF9fdGh1bWJuYWlsLFxcbjpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QgLmNvZy1pLWZpbGUge1xcbiAgbWF4LXdpZHRoOiAxLjdlbTtcXG4gIG1hcmdpbi1yaWdodDogMC4yZW07XFxuICBmb250LXNpemU6IDEuNWVtO1xcbiAgdHJhbnNpdGlvbjogY2FsYyh2YXIoLS1zcGVlZCkgLyA0KTtcXG59XFxuaHRtbCAuY29nLXVwbG9hZF9fbGlzdCBwcm9ncmVzcywgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdCBwcm9ncmVzcyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogdmFyKC0tZ3V0dGVyKTtcXG4gIHdpZHRoOiBjYWxjKDQ1cHggLSAyZW0pO1xcbiAgaGVpZ2h0OiAzcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKHZhcigtLWJhY2tncm91bmQtaHNsKSwgMC4zKTtcXG4gIGJvcmRlcjogMDtcXG4gIG1hcmdpbi1yaWdodDogMWVtO1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuaHRtbCAuY29nLXVwbG9hZF9fbGlzdCBwcm9ncmVzczo6LXdlYmtpdC1wcm9ncmVzcy1iYXIsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QgcHJvZ3Jlc3M6Oi13ZWJraXQtcHJvZ3Jlc3MtYmFyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbGEodmFyKC0tYmFja2dyb3VuZC1oc2wpLCAwLjUpO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0IHByb2dyZXNzOjotd2Via2l0LXByb2dyZXNzLXZhbHVlLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0IHByb2dyZXNzOjotd2Via2l0LXByb2dyZXNzLXZhbHVlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2hsaWdodCk7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2xpc3QgcHJvZ3Jlc3M6Oi1tb3otcHJvZ3Jlc3MtYmFyLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0IHByb2dyZXNzOjotbW96LXByb2dyZXNzLWJhciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1oaWdobGlnaHQpO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0IHByb2dyZXNzOjotbXMtZmlsbCwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdCBwcm9ncmVzczo6LW1zLWZpbGwge1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0LWVudGVyLWFjdGl2ZSwgaHRtbCAuY29nLXVwbG9hZF9fbGlzdC1sZWF2ZS1hY3RpdmUsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QtZW50ZXItYWN0aXZlLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWxlYXZlLWFjdGl2ZSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0LWVudGVyLXRvLCBodG1sIC5jb2ctdXBsb2FkX19saXN0LWxlYXZlLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWVudGVyLXRvLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWxlYXZlIHtcXG4gIG1heC1oZWlnaHQ6IDVlbTtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2xpc3QtZW50ZXItdG8gLmNvZy1pLWZpbGUsIGh0bWwgLmNvZy11cGxvYWRfX2xpc3QtbGVhdmUgLmNvZy1pLWZpbGUsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QtZW50ZXItdG8gLmNvZy1pLWZpbGUsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QtbGVhdmUgLmNvZy1pLWZpbGUge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG59XFxuaHRtbCAuY29nLXVwbG9hZF9fZmlsZS1pbmZvLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19maWxlLWluZm8ge1xcbiAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSA3LjVlbSk7XFxuICBtYXJnaW4tbGVmdDogY2FsYyh2YXIoLS1ndXR0ZXIpIC8gNCk7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX3RodW1ibmFpbDpub3QoLmVycm9yKSArIC5jb2ctaS1maWxlLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX190aHVtYm5haWw6bm90KC5lcnJvcikgKyAuY29nLWktZmlsZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX190aHVtYm5haWwuZXJyb3IsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX3RodW1ibmFpbC5lcnJvciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5odG1sIGEuY29nLXVwbG9hZF9fbGluaywgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCBhLmNvZy11cGxvYWRfX2xpbmsge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saW5rLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saW5rIHtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbmh0bWwgLmNvZy11cGxvYWRfX2ZpbGUtc2l6ZSwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fZmlsZS1zaXplIHtcXG4gIG1hcmdpbi10b3A6IC0wLjM1ZW07XFxuICBvcGFjaXR5OiAwLjY7XFxuICBjb2xvcjogdmFyKC0tY29sb3IpO1xcbiAgZm9udC1zaXplOiB2YXIoLS1zbWFsbC10ZXh0KTtcXG59XFxuaHRtbCAuY29nLXVwbG9hZF9fbGlzdCBidXR0b24sIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy11cGxvYWRfX2xpc3QgYnV0dG9uIHtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0IGJ1dHRvbiArIGJ1dHRvbiwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLXVwbG9hZF9fbGlzdCBidXR0b24gKyBidXR0b24ge1xcbiAgbWFyZ2luLWxlZnQ6IDAuM2VtO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0LWVudGVyLCBodG1sIC5jb2ctdXBsb2FkX19saXN0LWxlYXZlLXRvLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWVudGVyLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWxlYXZlLXRvIHtcXG4gIG1heC1oZWlnaHQ6IDA7XFxuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5odG1sIC5jb2ctdXBsb2FkX19saXN0LWVudGVyIC5jb2ctaS1maWxlLCBodG1sIC5jb2ctdXBsb2FkX19saXN0LWxlYXZlLXRvIC5jb2ctaS1maWxlLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWVudGVyIC5jb2ctaS1maWxlLCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctdXBsb2FkX19saXN0LWxlYXZlLXRvIC5jb2ctaS1maWxlIHtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMC4xKTtcXG59XFxuaHRtbCAuY29nLWktZG93bmxvYWQsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy1pLWRvd25sb2FkIHtcXG4gIGZpbGw6IHRyYW5zcGFyZW50O1xcbiAgc3Ryb2tlOiBjdXJyZW50Y29sb3I7XFxufVxcbmh0bWwgLmNvZy1pLWRvd25sb2FkX19hcnJvdywgaHRtbCAuY29nLWktZG93bmxvYWRfX2dyb3VuZCwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLWktZG93bmxvYWRfX2Fycm93LCA6cm9vdDpyb290OnJvb3Q6cm9vdDpyb290IC5jb2ctaS1kb3dubG9hZF9fZ3JvdW5kIHtcXG4gIHRyYW5zaXRpb246IGNhbGModmFyKC0tc3BlZWQpIC8gNCk7XFxufVxcbmh0bWwgLmNvZy1mb3JtOm5vdChbZGF0YS13aWR0aH49XFxcIjMyNVxcXCJdKSAuZWwtdXBsb2FkLWRyYWdnZXIgPiBkaXYsIDpyb290OnJvb3Q6cm9vdDpyb290OnJvb3QgLmNvZy1mb3JtOm5vdChbZGF0YS13aWR0aH49XFxcIjMyNVxcXCJdKSAuZWwtdXBsb2FkLWRyYWdnZXIgPiBkaXYge1xcbiAgcGFkZGluZzogY2FsYyh2YXIoLS1ndXR0ZXIpIC8gNCk7XFxufVxcbmh0bWwgLmNvZy1mb3JtOm5vdChbZGF0YS13aWR0aH49XFxcIjMyNVxcXCJdKSAuY29nLXVwbG9hZF9fbGlzdCwgOnJvb3Q6cm9vdDpyb290OnJvb3Q6cm9vdCAuY29nLWZvcm06bm90KFtkYXRhLXdpZHRofj1cXFwiMzI1XFxcIl0pIC5jb2ctdXBsb2FkX19saXN0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxufVwiLCBcIlwiXSk7XG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0eWxlLWxvYWRlckAyLjAuMF93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jc3MtbG9hZGVyQDMuMi4wX3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjEwLjBfY3NzLWxvYWRlckAzLjIuMF9sb2Rhc2hANC4xNy4yMV92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2Fzcy1sb2FkZXJAMTAuMS4xX3Nhc3NAMS40NC4wX3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2Fzcy1yZXNvdXJjZXMtbG9hZGVyQDIuMC4xL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS01LW9uZU9mLTEtMyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMC4wX2Nzcy1sb2FkZXJAMy4yLjBfbG9kYXNoQDQuMTcuMjFfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwbG9hZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00NGZjNjg5ZSZsYW5nPXNjc3MmXCI7XG5cbnZhciBvcHRpb25zID0ge1wiYXR0cmlidXRlc1wiOntcImNsYXNzXCI6XCJjb2ctc3R5bGVcIn19O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XG4gIGlmICghYSAmJiBiIHx8IGEgJiYgIWIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcDtcblxuICBmb3IgKHAgaW4gYSkge1xuICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09ICdkZWZhdWx0Jykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAocCBpbiBiKSB7XG4gICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghYVtwXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbiAgICB2YXIgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcbiAgICAgIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY3NzLWxvYWRlckAzLjIuMF93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMC4wX2Nzcy1sb2FkZXJAMy4yLjBfbG9kYXNoQDQuMTcuMjFfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Nhc3MtbG9hZGVyQDEwLjEuMV9zYXNzQDEuNDQuMF93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Nhc3MtcmVzb3VyY2VzLWxvYWRlckAyLjAuMS9ub2RlX21vZHVsZXMvc2Fzcy1yZXNvdXJjZXMtbG9hZGVyL2xpYi9sb2FkZXIuanM/P3JlZi0tNS1vbmVPZi0xLTMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGxvYWQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NDRmYzY4OWUmbGFuZz1zY3NzJlwiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscywgdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gIHZhciBfdm0gPSB0aGlzLFxuICAgIF9jID0gX3ZtLl9zZWxmLl9jXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvZy1pbnB1dFwiIH0sIFtcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImNvZy11cGxvYWRcIixcbiAgICAgICAgY2xhc3M6IHsgXCJpcy1yZWFkLW9ubHlcIjogX3ZtLnJlYWRvbmx5IH0sXG4gICAgICAgIG9uOiB7IHBhc3RlOiBfdm0ucGFzdGVGaWxlIH1cbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZWwtdXBsb2FkXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmOiBcInVwbG9hZFwiLFxuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgXCJzaG93LWZpbGUtbGlzdFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgXCJodHRwLXJlcXVlc3RcIjogX3ZtLnVwbG9hZEZpbGUsXG4gICAgICAgICAgICAgIFwib24tcHJldmlld1wiOiBfdm0ucHJldmlld0ZpbGUsXG4gICAgICAgICAgICAgIFwiYmVmb3JlLXVwbG9hZFwiOiBfdm0uYmVmb3JlVXBsb2FkLFxuICAgICAgICAgICAgICBcImZpbGUtbGlzdFwiOiBfdm0uaW5pdGlhbEZpbGVzLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogX3ZtLnJlYWRvbmx5LFxuICAgICAgICAgICAgICBsaW1pdDogX3ZtLm1heEZpbGVzLFxuICAgICAgICAgICAgICBcIm9uLWV4Y2VlZFwiOiBfdm0ubGltaXRFeGNlZWRlZCxcbiAgICAgICAgICAgICAgbXVsdGlwbGU6ICFfdm0ubWF4RmlsZXMgfHwgX3ZtLm1heEZpbGVzID4gMSxcbiAgICAgICAgICAgICAgZHJhZzogIV92bS5yZWFkb25seSAmJiAhX3ZtLmxpbWl0UmVhY2hlZCxcbiAgICAgICAgICAgICAgXCJsaXN0LXR5cGVcIjogXCJwaWN0dXJlXCIsXG4gICAgICAgICAgICAgIGFjdGlvbjogXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgIV92bS5yZWFkb25seSAmJiAhX3ZtLmxpbWl0UmVhY2hlZFxuICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICB7IG9uOiB7IGNsaWNrOiBfdm0uaGFuZGxlVXBsb2FkQ2xpY2tzIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjLWJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IFwidXBsb2FkQnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29nLWJ1dHRvbi0tc2Vjb25kYXJ5IGNvZy11cGxvYWRfX3VwbG9hZC1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS51cGxvYWRDbGlja2VkIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcblxcdFxcdFxcdFxcdFxcdFxcdFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRyZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZpbGV1cGxvYWQtZGVmYXVsdC11cGxvYWQtYnV0dG9uLXRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXFx0XFx0XFx0XFx0XFx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX19kcmFnLXRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiRyZXNvdXJjZShcImZpbGV1cGxvYWQtZHJvcHpvbmUtbWVzc2FnZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgIF0sXG4gICAgICAgICAgMlxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcInRyYW5zaXRpb24tZ3JvdXBcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX19saXN0XCIsXG4gICAgICAgICAgICBhdHRyczogeyBuYW1lOiBcImNvZy11cGxvYWRfX2xpc3RcIiwgdGFnOiBcInVsXCIgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgX3ZtLl9sKF92bS51cGxvYWRGaWxlcywgZnVuY3Rpb24oZmlsZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICAgIHsga2V5OiBfdm0ua2V5KGZpbGUudWlkKSwgcmVmOiBcInVwbG9hZEl0ZW1zXCIsIHJlZkluRm9yOiB0cnVlIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfdm0uaGFzVGh1bWJuYWlsKGZpbGUpXG4gICAgICAgICAgICAgICAgICA/IF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX190aHVtYm5haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0uZ2V0VGh1bWJuYWlsKGZpbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25lcnJvcjogXCJ0aGlzLmNsYXNzTmFtZSArPSAnIGVycm9yJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwiYy1maWxlLWljb25cIiwge1xuICAgICAgICAgICAgICAgICAga2V5OiBcImljb24tXCIgKyBpLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZXh0ZW5zaW9uOiBfdm0uZ2V0RXh0ZW5zaW9uKGZpbGUpIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29nLXVwbG9hZF9fZmlsZS1pbmZvXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiBcImFuY2hvci1cIiArIGZpbGUudWlkLFxuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNvZy11cGxvYWRfX2xpbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBmaWxlLnVybCwgdGFyZ2V0OiBcIl9ibGFua1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50cnlQcmV2aWV3RmlsZShmaWxlLCAkZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhmaWxlLm5hbWUpKV1cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX19maWxlLXNpemVcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmdldERpc3BsYXlGaWxlU2l6ZShmaWxlKSkpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgZmlsZS5wZXJjZW50YWdlID09PSAxMDAgfHwgZmlsZS5zdGF0dXMgPT09IFwic3VjY2Vzc1wiXG4gICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYy1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcImRvd25sb2FkLWJ1dHRvbi1cIiArIGZpbGUudWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX19kb3dubG9hZC1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vLXN0eWxlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF92bS5nZXREb3dubG9hZFRleHQoZmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRyeURvd25sb2FkRmlsZShmaWxlLCAkZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgW19jKFwiaS1kb3dubG9hZFwiKV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICFfdm0ucmVhZG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjLWJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJyZW1vdmUtYnV0dG9uLVwiICsgZmlsZS51aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX19yZW1vdmUtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vLXN0eWxlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdm0uZ2V0UmVtb3ZlVGV4dChmaWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnJlbW92ZUZpbGUoZmlsZS51aWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfYyhcImktZXhcIildLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInByb2dyZXNzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJwcm9ncmVzcy1cIiArIGZpbGUudWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbWF4OiBcIjEwMFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogZmlsZS5wZXJjZW50YWdlIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjLWJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjb2ctdXBsb2FkX19yZW1vdmUtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuby1zdHlsZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdm0uZ2V0UmVtb3ZlVGV4dChmaWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uY2FuY2VsVXBsb2FkKGZpbGUudWlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtfYyhcImktZXhcIildLFxuICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAyXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSksXG4gICAgICAgICAgMFxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRyYW5zaXRpb25cIiwgeyBhdHRyczogeyBuYW1lOiBcImNvZy1lcnJvci1tZXNzYWdlXCIgfSB9LCBbXG4gICAgICAgICAgX3ZtLmVycm9yICYmICFfdm0ucmVhZG9ubHlcbiAgICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2ctZXJyb3ItbWVzc2FnZVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5lcnJvcikpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0pXG4gICAgICBdLFxuICAgICAgMVxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJcbiAgICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgICAgICAgcmVuZGVyKF9oLCBfdm0pIHtcbiAgICAgICAgICBjb25zdCB7IF9jLCBfdiwgZGF0YSwgY2hpbGRyZW4gPSBbXSB9ID0gX3ZtO1xuXG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3M6IGNsYXNzTmFtZXMsXG4gICAgICAgICAgICBzdGF0aWNDbGFzcyxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgc3RhdGljU3R5bGUsXG4gICAgICAgICAgICBhdHRycyA9IHt9LFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH0gPSBkYXRhO1xuXG4gICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgJ3N2ZycsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbXCJjb2ctaWNvbiBjb2ctaS1kb3dubG9hZFwiLGNsYXNzTmFtZXMsc3RhdGljQ2xhc3NdLFxuICAgICAgICAgICAgICBzdHlsZTogW3N0eWxlLHN0YXRpY1N0eWxlXSxcbiAgICAgICAgICAgICAgYXR0cnM6IE9iamVjdC5hc3NpZ24oe1widmlld0JveFwiOlwiMCAwIDE4IDE4XCIsXCJmb2N1c2FibGVcIjpcImZhbHNlXCIsXCJjbGFzc1wiOlwiY29nLWljb24gY29nLWktZG93bmxvYWRcIn0sIGF0dHJzKSxcbiAgICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbi5jb25jYXQoW19jKCdkZWZzJyksX2MoJ2cnLFtfYygncGF0aCcse3N0YXRpY0NsYXNzOlwiY29nLWktZG93bmxvYWRfX2dyb3VuZFwiLGF0dHJzOntcImRcIjpcIk0yLjAzIDE1LjE4aDEzLjk0XCJ9fSksX2MoJ2cnLHtzdGF0aWNDbGFzczpcImNvZy1pLWRvd25sb2FkX19hcnJvd1wifSxbX2MoJ3BhdGgnLHthdHRyczp7XCJzdHJva2UtbGluZWNhcFwiOlwic3F1YXJlXCIsXCJkXCI6XCJNNC42NCA3LjJMOSAxMS41Nmw0LjM2LTQuMzZcIn19KSxfYygncGF0aCcse2F0dHJzOntcImRcIjpcIk05IDEuOTd2OS41OVwifX0pXSldKV0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9VcGxvYWQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQ0ZmM2ODllJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1VwbG9hZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1VwbG9hZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVXBsb2FkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQ0ZmM2ODllJmxhbmc9c2NzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxcVHlsZXJUcm90dGVyXFxcXHJlcG9zXFxcXENvZ25pdG8gRm9ybXNcXFxcQ29nbml0by5XZWIuQ2xpZW50XFxcXG5vZGVfbW9kdWxlc1xcXFwucG5wbVxcXFx2dWUtaG90LXJlbG9hZC1hcGlAMi4zLjRcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNDRmYzY4OWUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNDRmYzY4OWUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNDRmYzY4OWUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1VwbG9hZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NDRmYzY4OWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNDRmYzY4OWUnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnRzL1VwbG9hZC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iYWJlbC1sb2FkZXJAOC4wLjVfQGJhYmVsK2NvcmVANy4yMi42X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGxvYWQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9iYWJlbC1sb2FkZXJAOC4wLjVfQGJhYmVsK2NvcmVANy4yMi42X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Z1ZS1sb2FkZXJAMTUuMTAuMF9jc3MtbG9hZGVyQDMuMi4wX2xvZGFzaEA0LjE3LjIxX3Z1ZS10ZW1wbGF0ZS1jb21waWxlckAyLjcuMTVfd2VicGFja0A0LjQ2LjAvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9VcGxvYWQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0eWxlLWxvYWRlckAyLjAuMF93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTUtb25lT2YtMS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9jc3MtbG9hZGVyQDMuMi4wX3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjEwLjBfY3NzLWxvYWRlckAzLjIuMF9sb2Rhc2hANC4xNy4yMV92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2Fzcy1sb2FkZXJAMTAuMS4xX3Nhc3NAMS40NC4wX3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2Fzcy1yZXNvdXJjZXMtbG9hZGVyQDIuMC4xL25vZGVfbW9kdWxlcy9zYXNzLXJlc291cmNlcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS01LW9uZU9mLTEtMyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMC4wX2Nzcy1sb2FkZXJAMy4yLjBfbG9kYXNoQDQuMTcuMjFfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1VwbG9hZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00NGZjNjg5ZSZsYW5nPXNjc3MmXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vdnVlLWxvYWRlckAxNS4xMC4wX2Nzcy1sb2FkZXJAMy4yLjBfbG9kYXNoQDQuMTcuMjFfdnVlLXRlbXBsYXRlLWNvbXBpbGVyQDIuNy4xNV93ZWJwYWNrQDQuNDYuMC9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cmVmLS01IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS92dWUtbG9hZGVyQDE1LjEwLjBfY3NzLWxvYWRlckAzLjIuMF9sb2Rhc2hANC4xNy4yMV92dWUtdGVtcGxhdGUtY29tcGlsZXJAMi43LjE1X3dlYnBhY2tANC40Ni4wL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVXBsb2FkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NGZjNjg5ZSZcIiJdLCJzb3VyY2VSb290IjoiIn0=