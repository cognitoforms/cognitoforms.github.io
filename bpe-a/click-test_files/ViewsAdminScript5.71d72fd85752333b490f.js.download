(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ViewsAdminScript5"],{

/***/ "../../../Cognito.Services/Views/Admin/entry-details.js":
/*!***********************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Views/Admin/entry-details.js ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/// <reference path="../../../Cognito.Web.Client/apps/spa/src/views/admin/utils/exoweb.d.ts" />
/* harmony default export */ __webpack_exports__["default"] = (function ({ canManageEntries }) {
	var utils = {};

	//#region Global Variables

	/** @type string */
	var token;
	var subscribedToEntryChanges = false;
	var customerCard;
	/** @type string */
	var entryViewRole;

	// #endregion

	Cognito.ready("entrydetails", ["Cognito.Forms", "EntryDetails", "entryview"], function ($) {

		//#region Observable global model properties

		Sys.Observer.makeObservable(Cognito.Forms.model);

		$extend("Cognito.Forms.EntryView", function (type) {
			var isUserSpecificProp = type.meta.addProperty({ name: "isUserSpecific", type: Boolean, origin: "server" }).defaultValue(false);
			isUserSpecificProp._origin = "server";
			isUserSpecificProp._isPersisted = true;
		});

		var _read;
		Object.defineProperty(Cognito.Forms.model, 'read', {
			get: function () {
				return _read;
			},
			set: function (val) {
				_read = val;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'read');
			}
		});

		var _summaryProp;
		Object.defineProperty(Cognito.Forms.model, 'summaryProp', {
			get: function () {
				return _summaryProp;
			},
			set: function (prop) {
				_summaryProp = prop;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'summaryProp');
			}
		});

		var _entryHasChanges = false;
		Object.defineProperty(Cognito.Forms.model, 'entryHasChanges', {
			get: function () {
				return _entryHasChanges;
			},
			set: function (hasChanges) {
				_entryHasChanges = hasChanges;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'entryHasChanges');
			}
		});

		var _isUserSpecific = false;
		Object.defineProperty(Cognito.Forms.model, 'isUserSpecific', {
			get: function () {
				return _isUserSpecific;
			},
			set: function (value) {
				_isUserSpecific = value;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'isUserSpecific');
			}
		});


		// Flag to be set when performing an action so that changed events will be temporarily ignored
		var _performingWorkflowAction = false;
		Object.defineProperty(Cognito.Forms.model, 'performingWorkflowAction', {
			get: function () {
				return _performingWorkflowAction;
			},
			set: function (value) {
				_performingWorkflowAction = value;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'performingWorkflowAction');
			}
		});

		// Flag to be set when performing save and resume save so that changed events will be temporarily ignored
		var _performingSaveAndResume = false;
		Object.defineProperty(Cognito.Forms.model, 'performingSaveAndResume', {
			get: function () {
				return _performingSaveAndResume;
			},
			set: function (value) {
				_performingSaveAndResume = value;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'performingSaveAndResume');
			}
		});

		var _buttonStatus = 'default';
		Object.defineProperty(Cognito.Forms.model, 'buttonStatus', {
			get: function () {
				return _buttonStatus;
			},
			set: function (value) {
				_buttonStatus = value;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'buttonStatus');
			}
		});

		var _isAssignedEntry = false;
		Object.defineProperty(Cognito.Forms.model, 'isAssignedEntry', {
			get: function () {
				return _isAssignedEntry;
			},
			set: function (value) {
				_isAssignedEntry = value;
				Sys.Observer.raisePropertyChanged(Cognito.Forms.model, 'isAssignedEntry');
			}
		});

		//#endregion

		//#region Controller

		// Top Controller
		if (ExoWeb.evalPath(window.parent, 'Cognito.Forms.controller')) {
			Cognito.ready("Cognito.Forms.controller");
		}
		else {
			Cognito.Messaging.addHandler("controllerReady", function () {
				Cognito.ready("Cognito.Forms.controller");
			});
		}

		// Detail Controller
		Cognito.Forms.detailController = {

			changeView: function changeView(view) {
				var viewId = view.get_Id();
				token = view.get_Token();
				Cognito.Forms.model.isUserSpecific = view.get_isUserSpecific();
				Cognito.entryAdapter.changeView(viewId, token, false);
			},

			/**
			 * Sets the role for the current entry view
			 * @param {string} role
			 */
			setRole: function setRole(role) {
				if (entryViewRole === role)
					return;

				entryViewRole = role;
				if (Cognito.entryAdapter.currentEntryKey)
					Cognito.Forms.detailController.viewEntry(Cognito.entryAdapter.currentEntryKey);
			},

			setStatus: function setStatus() {
				if (Cognito.entryAdapter.currentEntryKey)
					Cognito.Forms.detailController.viewEntry(Cognito.entryAdapter.currentEntryKey);
			},

			setSummaryProperty: function setSummaryProperty(prop) {
				Cognito.Forms.model.summaryProp = prop;
			},

			activityPerformed: function activityPerformed() {
				Cognito.entryAdapter.activityPerformed();
			},

			setIsAssignedEntry: function setIsAssignedEntry(value) {
				Cognito.Forms.model.isAssignedEntry = value;
			},

			// View Entry
			viewEntry: function viewEntry(entryKey) {
				var switchingEntries = false;
				// View entry for first time
				if (!Cognito.entryAdapter.currentEntryKey || Cognito.entryAdapter.currentEntryKey.EntryId != entryKey.EntryId) {
					switchingEntries = true;
					customerCard = null;
				}

				var readonly = !(canManageEntries.value || Cognito.Forms.model.isAssignedEntry);

				// Show the specified entry
				Cognito.entryAdapter.setExistingEntry(entryKey, entryViewRole, readonly).then(function () {
					if (Cognito.entryAdapter.currentEntryKey.EntryId === entryKey.EntryId) {

						Cognito.Forms.model.read = Cognito.entryAdapter.currentEntryKey.Read !== false;

						if (switchingEntries) {
							utils.reconcileOrder();
							utils.propagateEntryState();
						}

						if (!readonly) {
							utils.editEntry(false);
						}
					}
				}).catch(function (err) {
					console.error('Error encountered opening entry details:', err);
					Cognito.Forms.onClose();
				});
			},

			// Used to refresh the details view when the entry is updated by another session
			refreshEntry: function refreshEntry(entryKey) {
				if (entryKey.EntryId === Cognito.entryAdapter.currentEntryKey.EntryId && entryKey.EntryETag !== Cognito.entryAdapter.currentEntryKey.EntryETag) {
					if (!Cognito.Forms.model.entryHasChanges && !!Cognito.entryAdapter.getEntryProperty("Id"))
						Cognito.Forms.detailController.viewEntry(entryKey);
				}
			},

			// New Entry
			newEntry: function newEntry() {
				customerCard = null;

				Cognito.entryAdapter.setNewEntry(entryViewRole).then(function () {
					utils.editEntry(true);
				});
			},

			// Change Layout
			changeLayout: function changeLayout(mode) {
				$("#c-admin").removeClass("c-phone").removeClass("c-tablet").removeClass("c-desktop").addClass("c-" + mode);
			},

			// Discard Entry Changes
			discardChanges: function (entryKey, keepNewEntry) {
				if (entryKey && entryKey.EntryId) {
					// Confirm the current entry is the same as the entry being reset
					if (Cognito.entryAdapter.currentEntryKey && Cognito.entryAdapter.currentEntryKey.EntryId == entryKey.EntryId) {
						Cognito.entryAdapter.setExistingEntry(entryKey, entryViewRole).then(function () {
							if (Cognito.entryAdapter.currentEntryKey.EntryId === entryKey.EntryId) {
								Cognito.Forms.model.read = Cognito.entryAdapter.currentEntryKey.Read !== false;
								// Ensure workflow entry details display in edit mode by default
								utils.editEntry(false);
							}
						}).catch(function () {
							Cognito.Forms.onClose();
						});
					}
				}
				else {
					// For workflow forms, start editing a new entry
					if (keepNewEntry)
						Cognito.Forms.controller.newEntry();
				}
			},

			templatesUpdated: function templatesUpdated(templates) {
				// Update the form's document templates with the data from the dialog.
				ExoWeb.updateArray(Cognito.Forms.model.currentForm.get_DocumentTemplates(), templates);
			},

			changeReadStates: function changeReadStates(entries, read) {
				for (let i = 0; i < entries.length; i++) {
					if (Cognito.entryAdapter.currentEntryKey && entries[i].EntryId === Cognito.entryAdapter.currentEntryKey.EntryId) {

						// Disallow marking Incomplete entries as Unread
						if (Cognito.entryAdapter.getEntryStatus() == Cognito.Forms.EntryStatus.Incomplete)
							continue;

						Cognito.entryAdapter.currentEntryKey.Read = read;
						Cognito.Forms.model.read = read;
					}
				}
			}
		};

		//#endregion

	});

	Cognito.ready("entrydetails-utility-functions", ["Cognito.Forms"], function () {

		//#region Create Document

		// Downloads a file when a document is clicked on the Create Document menu
		function createDocument(template) {
			Cognito.Forms.generateDocument(Cognito.entryAdapter.getEntry(), Cognito.entryAdapter.hasOrder() ? Cognito.entryAdapter.getOrder() : null, template, Cognito.Forms.model.entryHasChanges);
		}

		utils.createDocument = createDocument;

		//#endregion

		// #region Utility Functions

		Cognito.Forms.registerEntryAdapter = function (entryAdapter) {
			if (!Cognito.entryAdapter || Cognito.entryAdapter !== entryAdapter) {
				subscribedToEntryChanges = false;
			}
			Cognito.entryAdapter = entryAdapter;
			Cognito.ready('entry-adapter');
			if (Cognito.readyDependencies['detail-controller'] === true) {
				// Re-notify the controller that the detail view is ready
				Cognito.Forms.controller.initDetail(Cognito.Forms.detailController);
			}
		};

		Cognito.Forms.unregisterEntryAdapter = function () {
			subscribedToEntryChanges = false;
			Cognito.entryAdapter = null;
			delete Cognito.readyDependencies['entry-adapter'];

			// If the entries page has a reference to entry-details, remove it
			if (Cognito.readyDependencies['detail-controller'] === true) {
				Cognito.Forms.controller.removeDetail();
			}
		};

		function propagateEntryState() {
			// Automatically promote the state of Unread entries to Read after one second
			if (canManageEntries.value && Cognito.entryAdapter.currentEntryKey.Read === false) {
				var entryViewed = Cognito.entryAdapter.getEntryProperty("Id");
				window.setTimeout(function () {
					if (entryViewed == Cognito.entryAdapter.getEntryProperty("Id")) {
						Cognito.Forms.controller.updateGridReadState([Cognito.entryAdapter.currentEntryKey], true);
						Cognito.Forms.model.read = !!Cognito.entryAdapter.currentEntryKey.Read;
					}
				}, 1000);
			}
		}

		utils.propagateEntryState = propagateEntryState;

		function formatDate(date) {
			if (!date)
				return "";

			return date.localeFormat(Sys.CultureInfo.CurrentCulture.dateTimeFormat.ShortDatePattern + " " + Sys.CultureInfo.CurrentCulture.dateTimeFormat.ShortTimePattern);
		}
		Cognito.Forms.formatDate = formatDate;

		function editEntry(isNew) {
			Cognito.entryAdapter.toggleEdit(true);

			Cognito.entryAdapter.validateEntry(false);

			if (isNew)
				setHasChanges(true);
			else {
				setHasChanges(false);

				// Subscribe to change notification
				if (!subscribedToEntryChanges) {
					subscribedToEntryChanges = true;
					Cognito.entryAdapter.addChangesDetected(onEntryChanged);
				}
			}
		}

		utils.editEntry = editEntry;

		function onEntryChanged(event) {
			if (Cognito.Forms.model.entryHasChanges || event.oldValue == event.newValue)
				return;

			if (Cognito.Forms.onEntryChanged(event))
				setHasChanges(true);
		}

		function setHasChanges(hasChanges) {
			Cognito.Forms.model.entryHasChanges = hasChanges;

			if (hasChanges)
				Cognito.Forms.controller.entryChanged();
		}

		function getAction(actionId) {
			return Cognito.Forms.model.currentForm.get_Actions().filter(function (a) { return a.get_Id().toString() === actionId; })[0];
		}

		Cognito.Forms.resetButtonStatus = function () {
			Cognito.Forms.model.buttonStatus = 'default';
		}

		Cognito.Forms.performWorkflowAction = function (actionId) {
			var action = getAction(actionId);

			var isNew = Cognito.entryAdapter.getEntryProperty("Id") == null;
			var oldStatus = isNew ? "" : Cognito.entryAdapter.getEntryStatus();

			Cognito.Forms.model.performingWorkflowAction = true;
			Cognito.Forms.controller.setPerformingSubmit(true);

			Cognito.Forms.model.buttonStatus = "validating";

			Cognito.entryAdapter.performAction(action.get_ActionName())
				.then(function (data) {
					if (data) {
						Cognito.Forms.model.buttonStatus = "success";
						saveEntrySuccess(isNew, oldStatus, data, data.status);
					}
					else
						saveEntryError();
				})
				.catch(function (err) {
					console.error(err);
					saveEntryError();
				})
				.finally(function () {
					Cognito.Forms.model.performingWorkflowAction = false;
				});
		}

		Cognito.Forms.discardChanges = function () {
			Cognito.Forms.controller.discardChanges(Cognito.entryAdapter.currentEntryKey, true, true);
		}

		Cognito.Forms.saveAndResumeEntry = function saveIncompleteEntry() {
			Cognito.Forms.model.performingSaveAndResume = true;
			Cognito.Forms.controller.setPerformingSubmit(true);
			Cognito.Forms.model.buttonStatus = "validating";

			var isNew = Cognito.entryAdapter.getEntryProperty("Id") == null;
			var oldStatus = isNew ? "" : Cognito.entryAdapter.getEntryStatus();

			Cognito.entryAdapter.saveIncompleteEntry(function (result) {
				Cognito.Forms.model.buttonStatus = "success";
				saveEntrySuccess(isNew, oldStatus, result, result.status);

				// After a slight delay (to allow the button status to get updated), set performing save to false
				setTimeout(function () {
					Cognito.Forms.model.performingSaveAndResume = false;
				}, 10);
			}, saveEntryError);
		}

		Cognito.Forms.tryDownloadOverLimit = function () {
			Cognito.Forms.controller.showFeatureWarning("storagelimits");
		}

		function saveEntrySuccess(isNew, oldStatus, data, submissionStatus) {
			Cognito.Forms.controller.setPerformingSubmit(false);

			// If we're not on the current entry, return
			// The entry and order will be updated when the entry is selected or
			// changes observed when retrieving the index
			if (!isNew && Cognito.entryAdapter.currentEntryKey.EntryId !== data.entry.Id)
				return;

			// For a new entry, set the entry key so the handle can retrieve the entry (including the eTag)
			if (isNew)
				Cognito.entryAdapter.currentEntryKey = { EntryId: data.entry.Id };

			var _finish = function (success) {
				if (data.hasOwnProperty("canDownloadFiles"))
					Cognito.config.canDownloadFiles = data.canDownloadFiles;

				if (!isNew && Cognito.entryAdapter.currentEntryKey.EntryId !== data.entry.Id)
					return;

				var isModelValid = success || !Cognito.Forms.hasErrors();
				if (isNew) {
					Cognito.Forms.controller.entryAdded(Cognito.entryAdapter.currentEntryKey, isModelValid);
					// If we're staying in edit mode, call editEntry again, but as existing entry
					if (!isModelValid)
						utils.editEntry(false);
				}
				else
					Cognito.Forms.controller.entryUpdated(Cognito.entryAdapter.currentEntryKey, false);

				setHasChanges(false);
			};

			if (submissionStatus !== "Success") {
				if (submissionStatus === "QuantityLimitExceeded") {
					_finish(false);
				} else {
					Cognito.Forms.controller.entryUpdateFailed(Cognito.entryAdapter.currentEntryKey);
				}
			}
			else {
				_finish(true);
			}
		}

		function saveEntryError() {
			Cognito.Forms.model.buttonStatus = "error";
			Cognito.Forms.controller.setPerformingSubmit(false);

			Cognito.Forms.controller.entryUpdateFailed(Cognito.entryAdapter.currentEntryKey);

			// After a slight delay (to allow the button status to get updated), set performing action to false
			setTimeout(function () {
				Cognito.Forms.model.performingSaveAndResume = false;
			}, 10);
		}

		function endPrint() {
			if (!document.querySelector(".c-entries").hasAttribute("data-show-entry-detail"))
				return;

			// undo resizing that was done in print()
			document.querySelector('.c-entry-details-embedded-form .cog-form').style.minWidth = null;
			document.querySelector('.c-entry-details-embedded-form .cog-form').style.setProperty('--gutter', null);
			const evt = document.createEvent('UIEvents');
			evt.initUIEvent('resize', true, false, window, 0);
			window.dispatchEvent(evt);

			// Reset read only to original state
			if (canManageEntries.value || Cognito.Forms.model.isAssignedEntry)
				Cognito.entryAdapter.setFormReadOnly(false);

			// Remove print:hidden-by-entry-details classes
			var hiddenPrintEls = document.querySelectorAll('.print\\:hidden-by-entry-details');
			for (var i = 0; i < hiddenPrintEls.length; i++)
				hiddenPrintEls[i].classList.remove('print:hidden-by-entry-details');

			// Reset activity log
			window.dispatchEvent(new Event('printFinished'));
		}

		utils.endPrint = endPrint;

		function beginPrint() {
			if (!document.querySelector(".c-entries").hasAttribute("data-show-entry-detail"))
				return;

			// Set entry to read only for printing purposes
			Cognito.entryAdapter.setFormReadOnly(true);

			const form = document.querySelector('.c-entry-details-embedded-form .cog-form');

			// Print full text of text boxes no matter how long
			let textBoxes = form.querySelectorAll('input[type="text"]:not(.cog-signature__keyboard-input), textarea');

			for (let i = 0; i < textBoxes.length; i++) {
				textBoxes[i].parentElement.setAttribute('data-print-text', textBoxes[i].value.length ? textBoxes[i].value : '\xa0');
			}

			// Set form layout to at least 800px before printing
			form.style.minWidth = '800px';
			// sacrifice some white space to increase odds of printing on one sheet
			form.style.setProperty('--gutter', '22px');

			document.querySelector('.c-entries-utility').classList.add('print:hidden-by-entry-details');
			document.querySelector('[id="c-entrylist"]').classList.add('print:hidden-by-entry-details');
			if (Cognito.config.flags.AppNav) {
				let navClosed = document.querySelector('[id="app"]').classList.contains('admin--nav-collapsed');
				if (navClosed)	// hide everything inside the nav without losing the spacing afforded by the nav element
					Array.from(document.querySelector('.nav').children).forEach(function (c) { c.classList.add('print:hidden-by-entry-details'); })
				else
					document.querySelector('.nav').classList.add('print:hidden-by-entry-details');
				document.querySelector('[id="resizable-content"]').classList.add('print:hidden-by-entry-details');
			}
			else
				document.querySelector('.app-nav__container').classList.add('print:hidden-by-entry-details');
		}

		utils.beginPrint = beginPrint;

		function print() {
			// Make visibility adjustments before printing, ex: set form to read-only and hide app navigation, etc.
			beginPrint();

			const evt = document.createEvent('UIEvents');
			evt.initUIEvent('resize', true, false, window, 0);
			window.dispatchEvent(evt);

			// observe that the resize has taken effect
			const formElObserver = new MutationObserver(function (mutations, observer) {
				for (var i = 0; mutations.length > i; i++) {
					if (mutations[i].attributeName === 'data-width') {
						setTimeout(function () {
							window.print();
						})
						observer.disconnect();
					}
				}
			});
			formElObserver.observe(document.querySelector('.c-entry-details-embedded-form .cog-form'), { attributes: true });
		}

		utils.print = print;

		// #endregion

		//#region Payment

		function reconcileOrder() {
			var entryId = Cognito.entryAdapter.getEntryId();
			var viewId = Cognito.entryAdapter.entrySet.view;
			var hasOrder = Cognito.entryAdapter.hasOrder();
			var hasCustomerCard = !!Cognito.entryAdapter.getCustomerCard();

			if (hasOrder || hasCustomerCard) {
				$(".c-forms-payment-summary .icon-spin").removeClass("hide");
				Cognito.Forms.reconcilePayment(viewId, entryId,
					function (data) {
						if (Cognito.entryAdapter.currentEntryKey.EntryId == data.entryKey.EntryId) {
							customerCard = data.customerCard;
							if (data.entryKey.EntryETag != Cognito.entryAdapter.currentEntryKey.EntryETag) {
								data.entryKey.Read = data.read;
								Cognito.Forms.controller.entryUpdated(data.entryKey);
							}
							$(".c-forms-payment-summary .icon-spin").addClass("hide");
						}
					},
					function (data) {
						$(".c-forms-payment-summary .icon-spin").addClass("hide");
					});
			}
		}

		utils.reconcileOrder = reconcileOrder;

		//#endregion

		// #region DOM Ready

		Cognito.ready("entrydetails-onDomReady", ["entrydetails", "ExoWeb.dom"],
			function onDomReady() {

				// Print Configuration
				var originalEvent = window.print;
				window.print = function () {
					if ($(".c-entries").hasClass("c-entries-edit-view")) {
						originalEvent();
						utils.endPrint();
					}
					else
						originalEvent();
				}

				if (window.matchMedia) {
					var mediaQueryList = window.matchMedia('print');
					mediaQueryList.addListener(function (mql) {
						if (mql.matches)
							utils.beginPrint();
						else
							utils.endPrint();
					});
				}
				else {
					window.onbeforeprint = utils.beginPrint;
					window.onafterprint = utils.endPrint;
				}

			}
		);

		// #endregion

		// #region Page Initialization

		Cognito.ready('detail-controller', ['entrydetails', 'entry-adapter', "Cognito.Forms.controller"], function () {
			// Notify the controller that the detail view is ready
			Cognito.Forms.controller.initDetail(Cognito.Forms.detailController);
		});

		// #endregion

		Cognito.ready("entrydetails-toolbar-functions", ["Cognito.Forms"], function () {

			// #region toolbar event handlers

			Cognito.Forms.onClose = function onClose() {
				if (!Cognito.Forms.model.entryHasChanges)
					Cognito.entryAdapter.currentEntryKey = null;
				customerCard = null;
				Cognito.Forms.controller.hideEntry();

				// Fix #45484 - Kick slickgrid when entry is done sliding offscreen.
				// Check if the element exists before we add event listeners
				var entryList = document.querySelector('[data-admin-layout] [id="c-entrylist"]');
                if (entryList){
                    entryList.addEventListener('transitionend', entryOffScreen);
                    function entryOffScreen(e) {
                        if (e.propertyName === 'width') {
                            window.dispatchEvent(new Event('resize'));
                            document.querySelector('[id="c-entrylist"]').removeEventListener('transitionend', entryOffScreen);
                        }
                    }
                }

                var entryDetails = document.querySelector('[data-app-layout] [id="c-entrydetails"]');
                if (entryDetails){
                    entryDetails.addEventListener('transitionend', entryOffScreen);
                    function entryOffScreen(e) {
                        if (e.propertyName === 'transform') {
                            window.dispatchEvent(new Event('resize'));
                            document.querySelector('[id="c-entrydetails"]').removeEventListener('transitionend', entryOffScreen);
                        }
                    }
                }
				
			}

			Cognito.Forms.onShareEntry = function onShareEntry(event) {
				Cognito.Forms.controller.shareEntry(Cognito.entryAdapter.currentEntryKey, event.emittedRoles, event.canShareSaveAndResume);
			}

			Cognito.Forms.onEmailNotification = function onEmailNotification(event) {
				Cognito.Forms.controller.openEmailNotificationDialog(Cognito.entryAdapter.currentEntryKey, event.documents, event.shareableRoles);
			}

			Cognito.Forms.onPrintEntry = function onPrintEntry() {
				utils.print();
			}

			Cognito.Forms.onCreateDocument = function onCreateDocument(e) {

				var template = Cognito.Forms.model.currentForm.get_DocumentTemplates().filter(function (template) {
					return template.get_Number() === e.Number;
				})[0];
				utils.createDocument(template);

			}

			Cognito.Forms.onManageDocumentTemplates = function onManageDocumentTemplates() {
				Cognito.Forms.controller.manageTemplates();
			}

			Cognito.Forms.onChangeReadState = function onChangeReadState(read) {
				Cognito.Forms.controller.updateGridReadState([Cognito.entryAdapter.currentEntryKey], read);
				Cognito.Forms.model.read = read;
			}

			Cognito.Forms.onDelete = function onDelete() {
				Cognito.Forms.controller.deleteEntries([Cognito.entryAdapter.currentEntryKey]);
			}

			// #endregion

		});

		Cognito.ready("entrydetails-other-functions", ["Cognito.Forms"], function () {

			// #region Other event handler functions

			Cognito.Forms.payOrder = function payOrder(isCash) {
				if (isCash) {
					Cognito.Forms.controller.payWithCash(Cognito.entryAdapter.currentEntryKey, Cognito.entryAdapter.getEntryProperty("Order.OrderAmount"));
				}
				else {
					Cognito.Forms.controller.submitPayment(Cognito.entryAdapter.currentEntryKey, customerCard);
				}
			}

			Cognito.Forms.refundOrder = function refundOrder(isCash) {
				if (isCash)
					Cognito.Forms.controller.refundManualPayment(Cognito.entryAdapter.currentEntryKey);
				else {
					// Get order details, then open the refund dialog
					const entryKey = Cognito.entryAdapter.currentEntryKey;
					const refundObject = Cognito.entryAdapter.getOrder(entryKey);
					const refundModel = {
						refundAmount: Cognito.entryAdapter.format(refundObject.AmountPaid, "c"),
						paymentAccountIsActive: refundObject.PaymentAccountStatus === "Active",
						processorName: refundObject.ProcessorName
					};
					Cognito.Forms.controller.refundPayment(entryKey.EntryId, refundModel);
				}
			}

			Cognito.Forms.payOrderWithSquarePos = function payOrderWithSquarePos(squareRegisterLink, isAndroid) {
				if (isAndroid)
					window.location = squareRegisterLink;
				else
					window.open(squareRegisterLink);
			}

			Cognito.Forms.showFeatureWarning = function (feature) {
				return Cognito.Forms.controller.showFeatureWarning(feature);
			};

			Cognito.Forms.openViewEmailDialog = function (data) {
				return Cognito.Forms.controller.openViewEmailDialog(data);
			};

			Cognito.Forms.openViewIntegrationDialog = function (data) {
				return Cognito.Forms.controller.openViewIntegrationDialog(data);
			};

			Cognito.Forms.openViewGoogleAnalyticsDialog = function (data) {
				return Cognito.Forms.controller.openViewGoogleAnalyticsDialog(data);
			};

			Cognito.Forms.openViewEntryChangeDialog = function (data) {
				return Cognito.Forms.controller.openViewEntryChangeDialog(data);
			};

			// #endregion
		});

	});
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,