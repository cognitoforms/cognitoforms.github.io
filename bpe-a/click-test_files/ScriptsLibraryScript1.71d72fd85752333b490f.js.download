(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ScriptsLibraryScript1"],{

/***/ "../../../Cognito.Services/Scripts/library/cognito-lookup-field.js":
/*!**********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/library/cognito-lookup-field.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function() {
Cognito.ready("lookup-field", ["Cognito.Forms", "set-field-lookups", "ExoWeb.types", "entryview-script", "entryType"], function ($) {
	function resolvePath(obj, path) {
		if (!path)
			return;

		return path.split(".").reduce(function (accum, step) {
			return (accum ? accum[step] : null);
		}, obj);
	}

	var _requests = [];

	function requestEntrySet(viewId, token, callback) {
		var request = function () { Cognito.Forms.db.getEntrySet(viewId, "", token, null, null, callback); };
		if (!Cognito.Forms.db.database)
			_requests.push(request);
		else
			request();
	}

	function requestEntry(index, token, callback) {
		var request = function () { Cognito.Forms.db.getEntry(Cognito.Forms.db.getEntryKey(index), token, callback); };
		if (!Cognito.Forms.db.database)
			_requests.push(request);
		else
			request();
	}

	// We need the _Lookup properties to be available as soon as possible for UI binding, so allow buffering
	// entry set requests to prevent the calculation from failing.
	Cognito.ready("lookup-field-requests", ["Cognito.Forms", "entryview"], function ($) {
		while (_requests.length)
			_requests.pop()();
	});

	var formTypes = Cognito.dynamicTypes["Cognito.Forms.FormEntry"].Types;
	var formsIds = Object.keys(Cognito.Forms.model.lookups);
	for (var i = 0; i < formsIds.length; i++) {
		var lookups = Cognito.Forms.model.lookups[formsIds[i]];
		var formType = formTypes[formsIds[i]] || Cognito.Forms.model.entryType;	// In preview, the current forms type is not included in dynamic types list for FormEntry
		for (var key in lookups) {
			var lookup = lookups[key];
			var container = resolvePath(formType, lookup.PropertyPath.substring(0, lookup.PropertyPath.lastIndexOf("."))) || formType;
			var property = container.meta.property(lookup.PropertyPath.substring(lookup.PropertyPath.lastIndexOf(".") + 1));
			lookup.property = property;
			property._token = lookup.Token;
		}
	}

	// Only process the root level form field lookups
	var _lookups = Cognito.Forms.model.lookups[Cognito.Forms.model.formId];
	var _entryType = Cognito.Forms.model.entryType || Cognito.getJsType(Cognito.Forms.model.entryTypeName);
	for (key in _lookups) {
		(function () {	// closures...
			if (_lookups.hasOwnProperty(key)) {
				var lookupData = _lookups[key];
				var propContainer = resolvePath(_entryType, lookupData.PropertyPath.substring(0, lookupData.PropertyPath.lastIndexOf("."))) || _entryType;
				var lookupProperty = propContainer.meta.property(lookupData.PropertyPath.substring(lookupData.PropertyPath.lastIndexOf(".") + 1)); // this is the property referencing the child form type
				var indexType = Cognito.getJsType(lookupData.IndexTypeName) || Cognito.Forms.FormEntryIndex;

				// Cache the options for this lookup field to prevent multiple instances of the field from requesting the indexes from the server
				var _optionsPromise = null;
				var _currentEntry;

				var loadedProperty = propContainer.meta.addProperty({
					name: lookupProperty.get_name() + "_LookupLoaded",
					type: Boolean
				});

				var optionsProperty = propContainer.meta.addProperty({ name: lookupProperty.get_name() + "_LookupOptions", type: indexType, isList: true, format: "[Summary]" });

				function extractFieldId(property) {
					return (property._storageName || "").substring(1);
				}

				function getCascadeFilterProperties(filter) {
					return {
						// the property representing the cascade filter field on the current form
						rootProperty: propContainer.meta.type.get_properties().filter(function (p) { return extractFieldId(p) == filter.FieldId; })[0],
						// the property representing the source form field that is being filtered
						sourceProperty: indexType.meta.property("_" + filter.SourceFieldId.replace(/\./g, "_"))
					};
				}

				function strEndsWith(str, test) {
					return str.substr(str.length - test.length) === test;
				}

				if (indexType !== Cognito.Forms.FormEntryIndex) {
					lookupData.CascadeFilters.map(function (filter) {
						return getCascadeFilterProperties(filter);
					}).filter(function (filter) {
						return !!filter.rootProperty && !!filter.sourceProperty;
					}).forEach(function (filter, i, filters) {
						var filterFieldOptionsProperty = propContainer.meta.addProperty({ name: filter.rootProperty.get_name() + "_Options", type: filter.rootProperty.get_jstype(), isList: true, format: filter.sourceProperty.get_format() }).calculated({
							calculate: function () {
								var rootInstance = this;
								var selectedValue = filter.rootProperty.value(this);

								// Before lookup options are loaded, we need to ensure the current value of the filter field is valid by constructing the options from it
								if (!loadedProperty.value(this)) {
									if (filter.rootProperty.get_isList())
										return selectedValue;
									else if (selectedValue !== null)
										return [selectedValue];
									else
										return [];
								}

								// Cache requiredness of filter fields for this calculation of the options
								var required = filters.map(function (f) {
									var requiredPropName = f.rootProperty.get_name() + "_IsRequired";
									return (rootInstance.meta.property(requiredPropName) && rootInstance.get(requiredPropName))
										// just check for the Required condition to handle the required always case (if a field is always required, the _IsRequired property is not added to the model)
										|| rootInstance.meta.conditions().filter(function (c) {
											return strEndsWith(c.type.code || c.type.get_code(), ".Required")
												&& c.targets && c.targets.filter(function (t) {
													return t.properties.indexOf(f.rootProperty) !== -1;
												}).length;
										}).length;
								});

								// start with all options for the lookup field
								var values = optionsProperty.value(rootInstance)
									// filter the options by applying previous cascade filters
									.filter(function (option) {
										return filters.slice(0, i).every(function (priorFilter, i) {
											function meetsFilter(sourceValue) {
												// normalize values by converting to string using the property format defined by the source form (this allows comparison of things like dates, which are normally compared by reference)
												var normalizedSourceValue = priorFilter.sourceProperty.get_format().convert(sourceValue);

												if (priorFilter.rootProperty.get_isList()) {
													// if a filter field is not required and has no value, it does not filter subsequent filter field options
													return (!required[i] && !priorFilter.rootProperty.value(rootInstance).length)
														// see if any of the selected options for the prior filter match the current option
														|| priorFilter.rootProperty.value(rootInstance).some(function (v) {
															var normalizedRootValue = priorFilter.sourceProperty.get_format().convert(v);
															return normalizedRootValue === normalizedSourceValue
														});
												}

												var normalizedRootValue = priorFilter.sourceProperty.get_format().convert(priorFilter.rootProperty.value(rootInstance));
												// if a filter field is not required and has no value, it does not filter subsequent filter field options
												return (!required[i] && priorFilter.rootProperty.value(rootInstance) == null)
													|| normalizedRootValue === normalizedSourceValue;
											}

											var rawSourceValue = priorFilter.sourceProperty.value(option);
											if (priorFilter.sourceProperty.get_isList()) {
												var rootValue = priorFilter.rootProperty.value(rootInstance);
												// if the prior filter field doesn't have a value, and the list value of the filter property on the lookup source is empty, the option is included
												var hasRootValue = priorFilter.rootProperty.get_isList() ? rootValue.length : rootValue != null;
												return (!rawSourceValue.length && !hasRootValue) || rawSourceValue.some(meetsFilter);
											}
											return meetsFilter(rawSourceValue);
										});
									})
									// select the value of the filter property from the lookup source
									.map(function (option) {
										return filter.sourceProperty.value(option);
									});

								// if the targeted property is a list, flatten the values
								if (values[0] instanceof Array) {
									values = Array.prototype.concat.apply([], values);
								}

								var formattedValues = values.map(function (v) { return filter.rootProperty.format(v); });
								values = values
									.filter(function (v, idx, arr) {
										return v !== undefined
											&& v !== null
											&& v !== ""
											&& idx === formattedValues.indexOf(filter.rootProperty.format(v));
									})
									.sort(function (a, b) {
										if (a < b)
											return -1;
										if (a > b)
											return 1;
										return 0;
									});

								// Since Dates are compared by reference and not by value in JS, we need to see if the options list contains a date that matches the value of the filter field to prevent
								// incorrectly clearing a valid selected value
								if (selectedValue && !filter.rootProperty.get_isList() && filter.rootProperty.get_jstype() === Date) {
									// Use the property format to normalize the date objects
									var matchIndex = values.map(function (v) { return filter.sourceProperty.get_format().convert(v); }).indexOf(filter.sourceProperty.get_format().convert(selectedValue));
									// If we found an option with the same normalized value as the selected value, replace the reference at the matched index with the reference to the selected value
									if (matchIndex !== -1)
										values.splice(matchIndex, 1, selectedValue);
								}
								return values;
							},
							onChangeOf: [loadedProperty.get_name(), optionsProperty.get_name()].concat(filters.slice(0, i).map(function (f) { return f.rootProperty.get_name(); }))
						});

						// Calculate the allowed values for the filter field because the field value can be cleared when editing an existing entry since the lookup options are not immediately available
						new ExoWeb.Model.Rule.allowedValues(propContainer.meta, {
							property: filter.rootProperty,
							source: filterFieldOptionsProperty,
							// We don't actually care about validating the allowed values, since the user cannot enter an invalid value
							isValid: function () { return true; }
						});
					});
				}

				optionsProperty._internal = true;

				optionsProperty.calculated({
					calculate: function () {
						var instance = this;

						function getEntryIdFromIndex(i) {
							return i.get_Id().split("|")[2];
						}

						// Converts an index to the appropriate dynamic index subtype
						function convertEntryIndex(index) {

							var subType = new indexType();

							for (var prop in index) {
								if (prop.indexOf("_") === 0 && index.hasOwnProperty(prop))
									subType[prop] = index[prop];
							}

							// Initialize subtype instance from FormEntryIndex instance
							subType.meta.type.get_baseproperties().forEach(function (p) {
								p.value(subType, p.value(index));
							});

							// Populate properties for additional values exposed on the index
							index.get_AdditionalValues().forEach(function (val) {
								var prop = subType.meta.property(val.get_FieldId());
								val = val.get_Value();
								if (prop && val !== null) {
									if (prop._jstype === Boolean)
										prop.value(subType, val === "True");
									else if (prop._jstype === Date)
										prop.value(subType, Cognito.deserializeDate(val, prop));
									else if (prop.get_isList())
										prop.value(subType).addRange(JSON.parse(val));
									else
										prop.value(subType, new prop._jstype(val).valueOf());
								}
							});

							// Set the container
							subType.set_Container(instance);

							return subType;
						}

						function createIndexFromInstance(lookupInstance) {
							var idx = new Cognito.Forms.FormEntryIndex();
							idx.set_Id("fake|idx|" + lookupInstance.get_Id());
							idx.set_Summary(lookupInstance.toString(lookupData.SummaryFormat));
							idx.set_Description(lookupInstance.toString(lookupData.DescriptionFormat));
							lookupData.CascadeFilters
								.map(getCascadeFilterProperties)
								.forEach(function (filter) {
									if (filter.sourceProperty && filter.rootProperty) {
										var valueOnLookup = filter.rootProperty.value(lookupInstance);
										var value = filter.rootProperty.get_isList() ? valueOnLookup[0] : valueOnLookup;

										if (filter.sourceProperty.get_isList())
											filter.sourceProperty.value(idx).push(value);
										else
											filter.sourceProperty.value(idx, value);
									}
								});
							return idx;
						}

						if (!_optionsPromise || _currentEntry !== Cognito.Forms.model.entry) {
							// Request entry index and asynchronously set value of the options property
							_optionsPromise = $.Deferred();
							_currentEntry = Cognito.Forms.model.entry;
							requestEntrySet(lookupData.ViewId, lookupData.Token, function (indexes) {
								_optionsPromise.resolve(indexes);
							});
						}

						setTimeout(function () {
							_optionsPromise.then(function (indexes) {
								if (Array.isArray(instance.meta._instancesPendingInit) && instance.meta._instancesPendingInit.indexOf(instance) > -1) {
									var initPromise = $.Deferred();
									instance.meta.type.addInitExisting(function () {
										initPromise.resolve(indexes);
									}, instance, true);

									return initPromise;
								}
								return indexes;
							}).then(function (indexes) {
								window.context.server.ignoreChanges(function () {
									var lookupValue = lookupProperty.value(instance);

									if (lookupValue) {
										var selectedInstanceMap = (lookupProperty.get_isList() ? lookupValue : [lookupValue]).reduce(function (map, instance) {
											if (typeof instance === 'string')
												throw new Error('Lookup not yet loaded when accessed.');
											var id = instance.get_Id();
											if (id) map[id] = instance;
											return map;
										}, {});

										// Determine selected instances for which we already have an index
										var alreadyLoaded = {};
										indexes.forEach(function (idx) {
											var id = getEntryIdFromIndex(idx);
											if (selectedInstanceMap.hasOwnProperty(id)) {
												alreadyLoaded[id] = true;
												idx._alwaysInclude = true;
											}
											else {
												idx._alwaysInclude = false;
											}
										});

										// Add index for selected instances that did not have an index loaded
										for (var selectedId in selectedInstanceMap) {
											if (!alreadyLoaded[selectedId]) {
												var index = createIndexFromInstance(selectedInstanceMap[selectedId]);
												index._alwaysInclude = true;
												indexes.unshift(index);
											}
										}
									}

									// Coerce indexes to a subtype if necessary
									if (indexes.length > 0 && indexes[0].meta.type !== indexType.meta) {
										indexes = indexes.map(convertEntryIndex);
									}

									// Set the base options available for lookup
									optionsProperty.value(instance, indexes);

									var lookupValue = lookupProperty.value(instance);
									// Set the lookup index property, if possible
									if (lookupValue) {
										var selectedValue = null;
										if (lookupProperty.get_isList()) {
											if (lookupValue.length) {
												var ids = lookupValue.map(function (instance) { return instance.get_Id(); });
												var selections = [];
												for (var i = 0; i < indexes.length; i++) {
													if (ids.contains(getEntryIdFromIndex(indexes[i])))
														selections.push(indexes[i]);
												}
												selectedValue = selections;
											}
										}
										else {
											var id = lookupValue.get_Id();
											for (i = 0; i < indexes.length; i++) {
												if (indexes[i].get_Id().split("|")[2] === id) {
													selectedValue = indexes[i];
													break;
												}
											}
										}

										if (selectedValue) {
											optionsProperty.value(instance)._suppressEntryLoad = true;
											valueProperty.value(instance, selectedValue, { initializing: true });
											optionsProperty.value(instance)._suppressEntryLoad = false;
										}
									}

									loadedProperty.value(instance, true);
								})();
							});
						});

						return optionsProperty.value(instance) || [];
					}
				});

				// This is the property the field UI binds to
				var valueProperty = propContainer.meta.addProperty({
					name: lookupProperty.get_name() + "_LookupValue",
					type: indexType,
					isList: lookupProperty.get_isList(),
					format: "[Summary]" + (lookupData.HasDescription ? " [Description]" : "")
				});

				// Load the full entry when the user changes the choice/radio/checkbox selection
				valueProperty
					.addChanged(function (sender, args) {
						if (!optionsProperty.value(sender)._suppressEntryLoad) {
							// Different update pattern for lists
							if (lookupProperty.get_isList() && args.newValue) {
								var list = lookupProperty.value(sender);
								$.when.apply(null, args.newValue.map(function (item, i) {
									var promise = $.Deferred();
									requestEntry(item, lookupData.Token, function (entry) {
										promise.resolve(entry);
									});
									return promise;
								})).then(function () {
									var entries = [].slice.call(arguments);
									list.beginUpdate();
									list.clear();
									list.addRange(entries);
									list.endUpdate();
								});
							}
							else {
								if (args.newValue) {
									// request entry and asynchronously set value of the lookup field property
									requestEntry(args.newValue, lookupData.Token, function (entry) {
										lookupProperty.value(sender, entry);
									});
								}
								else {
									lookupProperty.value(sender, null);
								}
							}
						}
					});

				var filteredOptionsProp = propContainer.meta.addProperty({ name: lookupProperty.get_name() + "_FilteredLookupOptions", isList: true, type: indexType, format: "[Summary]" })
					.calculated({
						calculate: function () {
							return optionsProperty.value(this);
						}
					});

				filteredOptionsProp._internal = true;

				// Filter the lookup options where the IsIncluded property is true
				propContainer.meta.addRule({
					execute: function (sender, change) {
						var allOptions = optionsProperty.value(sender);
						var val = filteredOptionsProp.value(sender);
						val.beginUpdate();
						val.clear();

						var optionsChanged = change.property === optionsProperty;
						val.addRange(allOptions.filter(function (o) {
							// This ensures IsIncluded has been marked as needing to recalculate, since it may not have been hit when this rule runs since they share dependencies
							if (!o._alwaysInclude && o.get_IsIncluded)
								o.meta.pendingInit(o.meta.property("IsIncluded"), true);
							return (o._alwaysInclude && optionsChanged) || !o.get_IsIncluded || o.get_IsIncluded();
						}));

						val._lastUpdateTrigger = change.property;

						window.context.server.ignoreChanges(function () {
							val.endUpdate();
						})();
					},
					onChangeOf: lookupData.FilterWatchPaths.concat([optionsProperty.get_name()])
				});

				new ExoWeb.Model.Rule.allowedValues(propContainer.meta, {
					property: valueProperty,
					source: function (sender) {
						// filteredOptionsProp must be evaluated here to ensure it triggers async loading of the options
						var filteredOptions = filteredOptionsProp.value(sender);

						if (!loadedProperty.value(sender)) {
							var val = valueProperty.value(sender);
							if (valueProperty.get_isList())
								return val;
							else if (val !== null)
								return [val];
							else
								return [];
						}
						return filteredOptions;
					},
					onChangeOf: [filteredOptionsProp, loadedProperty]
				});

				if (lookupData.HasDefaultValue) {
					var initializedProp = propContainer.meta.addProperty({ name: lookupProperty.get_name() + '_Initialized', type: Boolean });

					// Calculate default value of lookup field using a combination of the static default value (if applicable) and the dynamic default value (if applicable)
					propContainer.meta.addRule({
						execute: function (sender, change) {
							var initializing = !initializedProp.value(sender);
							var filteredOptions = filteredOptionsProp.value(sender);

							var defaults = filteredOptions.filter(function (option) {
								var ret = false;
								// Static
								var defaultVal = option.get_AdditionalValues().filter(function (v) { return v.get_FieldId() === "Default"; });
								if (defaultVal.length)
									ret = defaultVal[0].get_Value() === "True";
								// Dynamic
								if (!ret && option.get_IsDefaulted) {
									// Because this rule and option.IsDefaulted both depend on the same predicates, there can be a timing issue where IsDefaulted
									// is not marked as needing to be recalculated until after this rule runs, so this rule sees the stale value
									option.meta.pendingInit(option.meta.property("IsDefaulted"), true);
									ret = option.get_IsDefaulted();
								}
								return ret;
							});

							var isNewEntry;
							if (sender.get_Entry)
								isNewEntry = sender.get_Entry() === null || sender.get_Entry().get_Number() === null;
							else
								isNewEntry = sender.get_Form().get_Entry() === null || sender.get_Form().get_Entry().get_Number() === null;

							var hasNoValue = false;
							if (lookupProperty.get_isList())
								hasNoValue = isNewEntry && lookupProperty.value(sender).length === 0;
							else
								hasNoValue = isNewEntry && !lookupProperty.value(sender);

							// set a default value for the lookup
							if ((!initializing || hasNoValue) && defaults.length) {
								if (lookupProperty.get_isList()) {
									var valueList = valueProperty.value(sender);
									valueList.beginUpdate();
									valueList.clear();
									valueList.addRange(defaults);
									valueList.endUpdate();
								}
								else
									valueProperty.value(sender, defaults[0] || null);
							}
							// clear the lookup as a result of the default calculation
							else if (!initializing && !defaults.length) {
								if (lookupProperty.get_isList())
									valueProperty.value(sender).clear();
								else
									valueProperty.value(sender, null);
							}

							initializedProp.value(sender, true);
						},
						onChangeOf: lookupData.DefaultValueWatchPaths.concat([filteredOptionsProp.get_name()]),
						onInitNew: true,
						onInitExisting: false
					});
				}
				propContainer.meta.addRule({
					execute: function (sender, change) {
						// Force options property to calculate in case UI does not
						optionsProperty.value(sender);
					},
					onInitNew: true,
					onInitExisting: true
				});
			}
		})();
	}
});
})();

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,