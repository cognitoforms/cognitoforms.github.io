(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ScriptsLibraryScript4"],{

/***/ "../../../Cognito.Services/Scripts/library/fileupload.js":
/*!************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/library/fileupload.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(( true ? exports : undefined).exec = function (isInIframe) {
; (function ($) {
		
	var uploadInProgress;

	// Global function for use by model.js FormEntry file fields 
	Cognito.getThumbnailUrl = function getThumbnailUrl(fileId, fileName) {
		var extension = fileName.split('.');
		extension = extension[extension.length - 1].toLowerCase();
		switch (extension) {
			case 'png':
			case 'gif':
			case 'jpg':
			case 'jpeg':
			case 'tif':
			case 'tiff':
			case 'bmp':
				// Cannot view thumbnails for images that have not been uploaded yet
				if (!fileId)
					return Cognito.config.baseUrl + "content/images/file-type-icon-default.png";
				return Cognito.config.baseUrl + "forms/" + Cognito.config.mode + "/thumbnail?id=" + fileId + "&sessionToken=" + encodeURIComponent(Cognito.config.sessionToken);;
			case 'doc':
			case 'docx':
				return Cognito.config.baseUrl + "content/images/file-type-icon-doc.png";
			case 'xls':
			case 'xlsx':
				return Cognito.config.baseUrl + "content/images/file-type-icon-xls.png";
			case 'ppt':
			case 'pptx':
				return Cognito.config.baseUrl + "content/images/file-type-icon-ppt.png";
			case 'pdf':
				return Cognito.config.baseUrl + "content/images/file-type-icon-pdf.png";
			case 'zip':
				return Cognito.config.baseUrl + "content/images/file-type-icon-zip.png";
			default:
				return Cognito.config.baseUrl + "content/images/file-type-icon-default.png";
		}
	};
	
	// Extend the FileDataRef type to support file upload user interface properties
	$extend('Cognito.FileDataRef', function (type) {
		
		uploadInProgress = new ExoWeb.Model.ConditionType.Error("Cognito.UploadInProgress", Cognito.resources["fileupload-upload-inprogress-message"], null, "client");

		// Progress
		type.meta.addProperty({
			name: "Progress",
			type: String
		});

		// DownloadUrl
		var downloadUrlProperty = type.meta.addProperty({
			name: "DownloadUrl",
			type: String,
		});

		// Url
		type.meta.addProperty({
			name: "Url",
			type: String,
		})
			.calculated({
				fn: function () {
					var extension = this.get_Name().split('.');
					extension = extension[extension.length - 1].toLowerCase();
					var downloadUrl = this.get_DownloadUrl();
					switch (extension) {
						case 'doc':
						case 'docx':
						case 'ppt':
						case 'pptx':
							if (this.get_Size() / 1048576 < 10)
								return "http://view.officeapps.live.com/op/view.aspx?src=" + encodeURIComponent(downloadUrl);
							else
								return downloadUrl;
						case 'xls':
						case 'xlsx':
							if (this.get_Size() / 1048576 < 5)
								return "http://view.officeapps.live.com/op/view.aspx?src=" + encodeURIComponent(downloadUrl);
							else
								return downloadUrl;
						case 'png':
						case 'gif':
						case 'jpg':
						case 'jpeg':
						case 'tif':
						case 'tiff':
						case 'bmp':
						case 'pdf':
							return downloadUrl + "&at=0";
						default:
							return downloadUrl;
					}
				},
				basedOn: ["Name", "DownloadUrl", "Size"]
			});

		// DownloadUrl
		downloadUrlProperty
			.calculated({
				fn: function () {
					return Cognito.config.baseUrl + "forms/" + Cognito.config.mode + "/file?id=" + this.get_Id() + "&ct=" + encodeURIComponent(this.get_ContentType()) + "&sessionToken=" + encodeURIComponent(Cognito.config.sessionToken);
				},
				onChangeOf: ["Id"]
			});

		// ThumbnailUrl
		type.meta.addProperty({
			name: "ThumbnailUrl",
			type: String,
		})
			.calculated({
				fn: function () {
					return Cognito.getThumbnailUrl(this.get_Id(), this.get_Name());
				},
				onChangeOf: ["Id", "Name"]
			});

		// Description
		type.meta.addProperty({
			name: "Description",
			type: String,
		})
			.calculated({
				fn: function () {
					if (this.get_Progress()) {
						return Cognito.resources["fileupload-desc-progress-message"].replace("{progress}", this.get_Progress());
					}
					else {
						var size = this.get_Size();
						if (size < 1024)
							return Cognito.resources["fileupload-desc-size-in-bytes-message"].replace("{size}", size);
						if (size < 1048576)
							return (size / 1024).toFixed(2) + " KB";
						if (size < 1073741824)
							return (size / 1048576).toFixed(2) + " MB";
						else
							return (size / 1073741824).toFixed(2) + " GB";
					}
				},
				onChangeOf: ["Progress", "Size"]
			});

	});

	// Check for File API support
	var supportsFileApi = $("<input type='file'/>").get(0).files !== undefined;

	// Check for image paste support
	var supportsPaste = !!navigator.userAgent && !!navigator.userAgent.match(/Chrome\/[1][4-9]|Chrome\/[2-9][0-9]/);

	// Gets the file upload control that triggered the specified event, also extracting options from data attributes
	function getFileUpload(e) {

		var eventTarget = e.target || e.srcElement;

		var editor = $(eventTarget).closest('.c-fileupload').first();

		var input;
		var inputs = editor.find("input[type='file']");
		if (inputs.length > 1) {
			if ($(eventTarget).is("input")) {
				input = eventTarget;
			} else {
				input = editor.find("input:visible")[0];
			}
		} else {
			input = inputs[0];
		}

		return {
			input: input,
			editor: editor,
			form: editor.find("form"),
			adapter: $parentContextData(editor.children(0)[0]),
			validation: editor.find(".c-validation"),
			allowedTypes: editor.attr('data-allowed-types') ? (editor.attr('data-allowed-types') || '').toLowerCase().split(",") : null,
			excludedTypes: ((editor.attr('data-excluded-types') || '') + Cognito.config.excludedFileTypes).toLowerCase().split(","),
			maxSize: parseFloat(editor.attr('data-max-file-size')),
			maxFileCount: parseInt(editor.attr('data-max-file-count'))
		}
	}

	// Validates the file being uploaded
	function validate(fileUpload, file) {

		// Validate the file type
		var extension = file.get_Name().split('.').pop().toLowerCase();
		if (fileUpload.allowedTypes && !fileUpload.allowedTypes.contains(extension)) {
			showError(fileUpload, Cognito.resources["fileupload-invalid-file-type-message"].replace("{allowedTypes}", fileUpload.allowedTypes.join(", ")));
			return false;
		}
		else if (fileUpload.excludedTypes && fileUpload.excludedTypes.contains(extension)) {
			showError(fileUpload, Cognito.resources["fileupload-excluded-file-type-message"]);
			return false;
		}

		// Validate file count
		if (!file.get_Id() && fileUpload.maxFileCount && fileUpload.adapter.get_isEntityList() && (fileUpload.adapter.get_rawValue().length) >= fileUpload.maxFileCount) {
			showError(fileUpload, Cognito.resources["fileupload-max-file-count-exceeded-message"].replace("{maxFileCount}", fileUpload.maxFileCount));
			return false;
		}

		// Validate file size
		if (file.get_Size() === 0) {
			showError(fileUpload, Cognito.resources["fileupload-zero-byte-file-message"]);
			return false;
		}
		if (fileUpload.maxSize && file.get_Size() && file.get_Size() / 1024 / 1024 > fileUpload.maxSize) {
			showError(fileUpload, Cognito.resources["fileupload-max-size-exceeded-message"].replace("{maxSize}", fileUpload.maxSize));
			return false;
		}

		// Return true to indicate that the file passes validation
		return true;
	}

	// Initiates the upload of the specified files
	function upload(fileUpload, files) {

		// Clear any validation warnings
		if (fileUpload.validation.text().length != 0)
			fileUpload.validation.slideUp().empty();

		// Initiate the upload
		var pendingFiles = [];
		for (var i = 0; i < files.length; i++) {

			var file = files[i];

			// Create the new FileDataRef
			var fileData = new Cognito.FileDataRef({ Name: file.name, Size: file.size || 0, Progress: "0%" });

			// Perform initial file validation
			if (!validate(fileUpload, fileData))
				continue;

			// Add the pending file upload to the model
			if (fileUpload.adapter.get_isEntityList()) {
				fileUpload.adapter.get_rawValue().add(fileData);
			}
			else
				fileUpload.adapter.get_propertyChain().value(fileUpload.adapter.get_target(), fileData);

			// Track the files to upload an initial after updating the model
			pendingFiles.push([fileUpload, file, fileData]);
		}

		// Show any validation warnings
		fileUpload.validation.slideDown();

		// Animate the opacity to highlight the newly added files
		if (fileUpload.adapter._propertyPath && fileUpload.adapter.get_isEntityList()) {
			var newFiles = fileUpload.editor.find(".c-fileupload-file :gt(" + (fileUpload.adapter.get_rawValue().length - 1) + ")");
			newFiles.css({ opacity: 0 }).animate({ opacity: 1 }, 500);
		}

		// Upload the newly added files
		for (var i = 0; i < pendingFiles.length; i++)
			uploadFile.apply(this, pendingFiles[i]);
	}

	// Adds an error message to the validation region if not already there
	function showError(fileUpload, message) {
		if (fileUpload.validation.html().indexOf(message) < 0)
			fileUpload.validation.append(message);
	}

	// Upload a single file
	function uploadFile(fileUpload, file, fileData) {

		// Add a marker to easily identify the file upload fields with an upload in progress. This marker is used
		// to easily select those fields for validation purpose. We need to enforce validation on those fields when
		// saving (Save & Resume) a form. 
		var $field = $(fileUpload.input).parents(".c-field");
		if ($field.length > 0)
			$field.addClass("c-upload-in-progress");

		// Create an error reflecting the fact that the file is being uploaded
		var uploadError = new ExoWeb.Model.Condition(uploadInProgress, null, fileUpload.adapter.get_target(), [fileUpload.adapter.get_propertyPath()]);

		// Create success function to update the model when the file upload is complete
		var success = function (data) {

			// Deserialize the successfully uploaded file data reference
			var newFileData = Cognito.deserialize(Cognito.FileDataRef, data);

			// Validate the file one more time
			if (!validate(fileUpload, newFileData)) {
				deleteFile(fileUpload, fileData);
				return;
			}

			// Find the existing file entry to update
			if (fileUpload.adapter.get_isEntityList()) {
				var fileList = fileUpload.adapter.get_rawValue();
				var index = fileList.indexOf(fileData);
				fileList.beginUpdate();
				fileList.removeAt(index);
				fileList.insert(index, newFileData);
				fileList.endUpdate();
			}

			// Or set the file data property
			else {
				fileUpload.adapter.get_propertyChain().value(fileUpload.adapter.get_target(), newFileData);
			}

			// Destroy the upload in progress error
			uploadError.destroy();

			// Remove marker
			if ($field.length > 0)
				$field.removeClass("c-upload-in-progress");

			// Optionally hide the upload button if this is a single file upload
			if (fileUpload.maxFileCount == 1 || !fileUpload.adapter.get_isEntityList()) {

				// Edge and IE do not track the next focusable element correctly
				// Set focus on the new file's anchor
				if ($(".c-edge, .c-ie").length !== 0)
					fileUpload.editor.find("a").get(0).focus();
			}
			
			else {
				// Edge and IE do not track the next focusable element correctly
				// Set focus on the upload button 
				if ($(".c-edge, .c-ie").length !== 0)
					fileUpload.editor.find(".c-upload-button button").get(0).focus();
			}


			var jqEvent = Cognito.fire("uploadFile.cognito", { data: { file: { name: newFileData.get_Name(), id: newFileData.get_Id(), size: newFileData.get_Size() } } });
		};

		// Create error function to remove files from the model that fail to upload
		var error = function (jqXHR) {
			if (jqXHR.status === 401) {
				return;
			}

			// Remove the file that failed to upload
			if (fileUpload.adapter.get_isEntityList()) {
				var fileList = fileUpload.adapter.get_rawValue();
				var index = fileList.indexOf(fileData);
				fileList.removeAt(index);
			}
			else
				fileUpload.adapter.get_propertyChain().value(fileUpload.adapter.get_target(), null);

			// Destroy the upload in progress error
			uploadError.destroy();

			// Display an error message
			showError(fileUpload, Cognito.resources["fileupload-failed-upload-message"].replace("{fileName}", file.name));
			if (fileUpload.validation.height() == 0)
				fileUpload.validation.slideDown();
		}

		// Initiate the file upload
		if (window.FormData) {
			var formData = new FormData();
			formData.append("file", file);

			// Asynchronously post the file to the server
			Cognito.serviceRequest({
				endpoint: "forms/" + Cognito.config.mode + "/file" + (Cognito.config.encryptUploads ? "?encrypt=" : ""),
				method: "POST",
				data: formData,
				processData: false,
				contentType: false,
				overrideContentType: true,

				// Update the progress bar during the upload
				uploadProgress: function (event, position, total, percentComplete) {
					fileData.set_Progress((percentComplete > 98 ? 98 : percentComplete) + "%");
				},

				// Replace the pending file data reference with the file returned from the server
				success: success,

				// Display an error informing the user that the upload failed
				error: error
			});
		}
		else {
			// Create a form element to post the file and move the file upload field into that form element
			var $form = $("<form>").appendTo(fileUpload.editor.find((".c-upload-button")));
			fileUpload.editor.find("input").appendTo($form);
			fileUpload.form = $form;

			// Create a unique id to represent the file upload
			var fileId = "c-file-" + (new Date().getTime());
			var filePostUrl = Cognito.config.baseUrl + "forms/" + Cognito.config.mode + "/file?sessionToken=" + encodeURIComponent(Cognito.config.sessionToken);

			// Create an iframe that is positioned outside the viewing area
			var iframe = $("<iframe class='c-fileupload-frame' name='" + fileId + "' />")
				.css({ position: 'absolute', top: '-1000px', left: '-1000px' })
				.appendTo(window.document.body);

			// Set the form action and target
			fileUpload.form.attr("method", "post");
			fileUpload.form.attr("enctype", "multipart/form-data");
			fileUpload.form.attr("action", filePostUrl);
			fileUpload.form.attr("target", fileId);

			// Subscribe to the frame load event to be notified when the file is uploaded
			iframe.bind("load", function () {
				// Defer execution to ensure correct timing in IE9
				window.setTimeout(function () {

					// By this point the file should have been successfully deserialized
					for (var i = 0; i < uploadedFiles.length; i++) {
						var uploadedFile = uploadedFiles[i];
						if (file.name.toLowerCase().endsWith(uploadedFile.Name.toLowerCase())) {
							success(uploadedFile);
							return;
						}
					}

					error();

				}, 100);
			});

			// Submit the form
			fileUpload.form[0].submit();
		}
	}

	// Deletes the specified file
	function deleteFile(fileUpload, fileData) {

		// Clear any validation warnings
		if (fileUpload.validation.text().length != 0)
			fileUpload.validation.slideUp().empty();

		// List of files
		if (fileUpload.adapter.get_isEntityList()) {
			fileUpload.adapter.get_rawValue().remove(fileData);
		}

		// Single file
		else
			fileUpload.adapter.get_propertyChain().value(fileUpload.adapter.get_target(), null);
	}

	// Register to receive window messages if iframe posting will be required
	var uploadedFiles = [];
	if (!window.FormData) {

		function onFileUpload(fileInfo) {
			// Ensure event originated from cognito
			if (this.origin + "/" === Cognito.config.baseUrl)
				uploadedFiles.push(fileInfo);
		}

		Cognito.Messaging.addHandler("file-posting", onFileUpload);
	}

	Cognito.ready("register-fileupload-events", "ExoWeb.dom", function ($) {
		// Subscribe to the change event on the file input control to initiate uploads
		$(Cognito.config.flags.AppNav ? 'body' : '.cognito')
			.on('change', '.c-fileupload input', function (e) {

				// Get the file upload control
				var fileUpload = getFileUpload(e);

				// Upload the specified files
				if (supportsFileApi)
					upload(fileUpload, fileUpload.input.files);
				else
					upload(fileUpload, [{ name: $(fileUpload.input).val(), size: -1 }]);

				// Reset the upload control
				var dropzone = fileUpload.editor.find('.c-fileupload-dropzone');
				dropzone.html(dropzone.html());
			})

			// Subscribe to the click event and the keypress event to handle file deletions
			.on('click keypress', '.c-fileupload-delete', function (e) {
				// Exit early if the key pressed is not the enter key or the space key
				if (e.type === "keypress" && e.which !== 13 && e.which !== 32)
					return;

				// Get the file upload control
				var fileUpload = getFileUpload(e);

				// Get the delete div that was clicked
				var file = $(e.target || e.srcElement).parents('.c-fileupload-file');

				// Hide the parent file div being deleted
				file.animate({ opacity: 0 }, 500, function () {
					// Edge and IE do not track the next focusable element correctly
					if ($(".c-edge, .c-ie").length !== 0) {
						var nextFocusableElement = $(fileUpload.input).prev().get(0);
						var $nextFile = file.next();
						if ($nextFile.length > 0) {
							nextFocusableElement = $nextFile.find("a").get(0);
						}
					}

					// List of files
					if (fileUpload.adapter.get_isEntityList()) {

						// Remove the file from the model
						//var fileDataList = fileUpload.adapter.get_rawValue();
						//var index = parseInt(file.attr("data-index"));
						deleteFile(fileUpload, $parentContextData(file[0]));
					}
					// Single file
					else
						deleteFile(fileUpload, fileUpload.adapter.get_propertyChain().value(fileUpload.adapter.get_target()));

					// In Edge or IE, set focus on the next focusable element after the item is deleted
					if ($(".c-edge, .c-ie").length !== 0) {
						nextFocusableElement.focus();
					}
				});

				// stop default behavior, stop propagation
				return false;
			})

			// Subscribe to the click event and the keypress event to handle file downloads
			.on('click keypress', '.c-fileupload-download', function (e) {
				var downloadUrl = $(this).find("button").val();
				window.open(downloadUrl, '_blank');
			})

			// Subscribe to the keypress event to open the file picker dialog when the enter key is pressed
			.on('click', '.c-upload-button button', function () {
				$(this).next().click();
			});

		// Tracks the current paste target
		var pasteTarget;

		// Subscribe to paste events (if supported) to initiate uploads
		if (supportsPaste) {

			$(Cognito.config.flags.AppNav ? 'body' : '.cognito')

				// Set focus to the dropzone to support paste operations
				.on('click', '.c-fileupload', function (e) {
					var fileUpload = getFileUpload(e);
					if (!fileUpload.allowedTypes || fileUpload.allowedTypes.contains('png') || fileUpload.allowedTypes.contains('jpg')) {
						//if (pasteTarget != null)
						//	pasteTarget.editor.find(".c-fileupload-dropzone-message").text("or drag files here.");
						pasteTarget = fileUpload;
						//pasteTarget.editor.find(".c-fileupload-dropzone-message").text("paste images, or drag files here.");
					}
				})

				// Pasting into dropzone
				.on('paste', function (e) {
					// Exit immediately if there is not a current paste target
					if (!pasteTarget)
						return;

					// Otherwise, attempt to upload the pasted image
					clipboardData = e.originalEvent.clipboardData;
					for (var i = 0; i < clipboardData.items.length; i++) {
						var item = clipboardData.items[i];

						if (item.type.match(/image.*/) && item.kind === "file") {
							file = item.getAsFile();
							file.name = item.type.replace('/', '.');

							// Upload the pasted image
							upload(pasteTarget, [file]);

							// Prevent cascading paste operations
							e.preventDefault();
							e.stopPropagation();

							// Immediately exit
							return;
						}
					}
				})
		}

		// Subscribe to drag-drop events (if supported) to initiate uploads
		if (supportsFileApi) {

			$(Cognito.config.flags.AppNav ? 'body' : '.cognito')

				// Dragging into dropzone
				.on('dragenter', '.c-fileupload-dropzone', function (e) {
					e.stopPropagation();
					e.preventDefault();

					// Add the dropzone active class
					$(this).addClass("c-fileupload-dropzone-active");
				})

				.on('dragenter dragover dragleave', '.c-fileupload-dropzone .c-upload-button, .c-fileupload-dropzone .c-fileupload-dropzone-message', function (e) {
					$(this).closest('.c-fileupload-dropzone').addClass("c-fileupload-dropzone-active");

					e.stopPropagation();
					e.preventDefault();
				})

				// Dragging over dropzone
				.on('dragover', '.c-fileupload-dropzone', function (e) {
					e.stopPropagation();
					e.preventDefault();
				})

				// Dragging out of dropzone
				.on('dragleave', '.c-fileupload-dropzone', function (e) {
					e.stopPropagation();
					e.preventDefault();

					// Remove the dropzone active class
					$(this).removeClass("c-fileupload-dropzone-active");
				})

				// Dropping into dropzone
				.on('drop', '.c-fileupload-dropzone', function (e) {
					e.stopPropagation();
					e.preventDefault();

					// Remove the dropzone active class
					$(this).removeClass("c-fileupload-dropzone-active");

					// Get the file upload corresponding to the current drop event
					var fileUpload = getFileUpload(e);

					// Upload the files
					upload(fileUpload, e.originalEvent.dataTransfer.files);
				});

			// Suppress the default behavior of drop events for the document to avoid accidental navigation
			$(document)
				.on('dragenter', function (e) {
					e.stopPropagation();
					e.preventDefault();
				})
				.on('dragover', function (e) {
					e.stopPropagation();
					e.preventDefault();
				})
				.on('drop', function (e) {
					e.stopPropagation();
					e.preventDefault();
				});
		}
		// Otherwise, hide the dropzone
		else
			$(Cognito.config.flags.AppNav ? 'body' : '.cognito').addClass("c-fileupload-dropzone-hidden");
	});

})(ExoJQuery);
})(typeof exports === 'undefined');


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,