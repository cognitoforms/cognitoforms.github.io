(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["ScriptsLibraryScript3"],{

/***/ "../../../Cognito.Services/Scripts/library/expression-validation.js":
/*!***********************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Services/Scripts/library/expression-validation.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

ï»¿(( true ? exports : undefined).exec = function (isInIframe) {
; (function ($) {

	Cognito.ExpressionValidationTypes = {
		// Condition types
		DefaultValueConditionType: new ExoWeb.Model.ConditionType.Error("DefaultValueExpression", "The default value expression is invalid.", []),
		IncrementByConditionType: new ExoWeb.Model.ConditionType.Error("IncrementByExpression", "The increment by expression is invalid.", []),
		MinValueConditionType: new ExoWeb.Model.ConditionType.Error("MinValueExpression", "The min value expression is invalid.", []),
		MaxValueConditionType: new ExoWeb.Model.ConditionType.Error("MaxValueExpression", "The max value expression is invalid.", []),
		CalculationConditionType: new ExoWeb.Model.ConditionType.Error("CalculationExpression", "The calculation expression is invalid.", []),
		ColumnSummaryConditionType: new ExoWeb.Model.ConditionType.Error("ColumnSummaryExpression", "The summary expression is invalid.", []),
		LineItemNameConditionType: new ExoWeb.Model.ConditionType.Error("LineItemNameExpression", "The line item name expression is invalid.", []),
		LineItemDescriptionConditionType: new ExoWeb.Model.ConditionType.Error("LineItemDescriptionExpression", "The line item description expression is invalid.", []),
		RequiredConditionType: new ExoWeb.Model.ConditionType.Error("RequiredExpression", "The required expression is invalid.", []),
		ErrorConditionType: new ExoWeb.Model.ConditionType.Error("ErrorExpression", "The error expression is invalid.", []),
		ErrorMessageConditionType: new ExoWeb.Model.ConditionType.Error("ErrorMessageExpression", "The error message expression is invalid.", []),
		QuantityConditionType: new ExoWeb.Model.ConditionType.Error("QuantityExpression", "The quantity expression is invalid.", []),
		QuantityErrorConditionType: new ExoWeb.Model.ConditionType.Error("QuantityErrorExpression", "The error expression is invalid.", []),
		QuantitySelectedFieldConditionType: new ExoWeb.Model.ConditionType.Error("QuantitySelectedField", "The error expression is invalid.", []),
		Lookup: {
			LabelFormatConditionType: new ExoWeb.Model.ConditionType.Error("LookupLabelFormatError", "The specified format is invalid.", []),
			DescriptionFormatConditionType: new ExoWeb.Model.ConditionType.Error("LookupDescriptionFormatError", "The specified format is invalid.", []),
			FilterConditionType: new ExoWeb.Model.ConditionType.Error("LookupFilterError", "The specified filter is invalid.", []),
			DefaultValueFilterConditionType: new ExoWeb.Model.ConditionType.Error("LookupDefaultValueFilterError", "The specified filter is invalid.", []),
			PriceConditionType: new ExoWeb.Model.ConditionType.Error("LookupPriceError", "The specified price is invalid.", []),
			QuantityAvailableConditionType: new ExoWeb.Model.ConditionType.Error("LookupQuantityAvailableError", "The specified quantity available is invalid.", []),
			CascadeFiltersConditionType: new ExoWeb.Model.ConditionType.Error("LookupCascadeFiltersError", "A cascade filter is configured incorrectly.", []),
		},
	};

	var module;

	// Get current module
	Cognito.modelReady(function () {
		module = Cognito.config.modules[0];
	});

	// <summary>Validates all expressions for a single element.</summary>
	/// <param name="element" type="jQuery Object">Element whose expressions attempting to validate.</param>
	/// <param name="rootType" type="TypeMeta">Root type of the model.</param>
	/// <param name="scope" type="String">Path to the element being validated</param>
	/// <param name="elementDefinition" type="String">Serialized definition of element.</param>
	Cognito.validateElementExpressions = function Cognito$validateElementExpressions(element, rootType, scope, elementDefinition, localization) {
		if (Cognito.isUpdatingValidation)
			return;
		validateElementRequest(rootType, scope, elementDefinition, localization, function (validationResults) {
			applyElementConditions(element, Cognito.deserialize(Cognito.ValidationResult, validationResults));
		});
	};

	/// <summary>Validates a single string expression.</summary>
	/// <param name="containingType" type="TypeMeta">TypeMeta validating expression against.</param>
	/// <param name="expression" type="String">String expression to validate (should start with '=').</param>
	/// <returns type="ValidationResult">Validation for the expression.</returns>
	Cognito.validatePropertyExpression = function Cognito$validatePropertyExpression(rootType, scope, property, label, fieldType, fieldSubType, format, expression, localization, callback) {

		validateExpressionRequest(rootType, scope, property, label, fieldType, fieldSubType, format, expression, localization, callback);
	};

	/// <summary>Attempts to rename expressions based on an old type meta.</summary>
	/// <param name="serializedOldRootType" type="String">Serialized type meta which will be used to attempt a rename.</param>
	/// <param name="newFieldPath" type="String">New field path for rename support (i.e. Form1.Section.Field).</param>
	/// <param name="oldFieldPath" type="String">Old field path for rename support (i.e. Form1.Section.Field).</param>
	/// <returns type="List<ValidationResult>">The validation result of the rename proccess.</returns>
	Cognito.renameExpressions = function Cognito$renameExpressions(serializedOldRootType, newFieldPath, oldFieldPath, localization, callback) {

		renameExpressionsRequest(serializedOldRootType, newFieldPath, oldFieldPath, localization, callback);
	};

	Cognito.applyElementsConditions = function Cognito$applyElementsConditions(elements, validationResults) {
		applyElementsConditions(elements, validationResults);
	};

	//#region Service Requests

	// Validates all expressions in an element
	function validateElementRequest(rootType, scope, elementDefinition, localization, callback) {
		var endpoint = "validateElementExpressions" + ((rootType && rootType.get_Id()) ? ("?form=" + rootType.get_Id()) : "");

		// Abort all pending element validation requests
		Cognito.abortRequests(endpoint);

		module.serviceRequest({
			dataType: "json",
			endpoint: endpoint,
			method: "POST",
			contentType: "application/json+cognito; charset=utf-8",
			data: {
				RootTypeId: typeof (rootType) === "string" ? rootType : null,
				RootType: rootType instanceof Object ? Cognito.serialize(rootType) : null,
				Scope: scope,
				ElementDefinition: elementDefinition,
				Localization: Cognito.serialize(localization)
			},
			success: callback
		});
	};

	// Validates a single string expression
	function validateExpressionRequest(rootType, scope, property, label, fieldType, fieldSubType, format, expression, localization, callback) {
		var endpoint = "validatePropertyExpression" + ((rootType && rootType.get_Id()) ? ("?form=" + rootType.get_Id()) : "");

		module.serviceRequest({
			dataType: "json",
			endpoint: endpoint,
			contentType: "application/json+cognito; charset=utf-8",
			method: "POST",
			data:
			{
				RootTypeId: typeof (rootType) === "string" ? rootType : null,
				RootType: rootType instanceof Object ? Cognito.serialize(rootType) : null,
				Scope: scope,
				Property: property,
				Label: label,
				FieldType: fieldType,
				FieldSubType: fieldSubType,
				Format: format,
				Expression: expression,
				Localization: Cognito.serialize(localization)
			},
			success: callback
		});
	};

	// Attempts to rename expressions based on an old type meta
	function renameExpressionsRequest(serializedOldRootType, newFieldPath, oldFieldPath, localization, callback) {
		module.serviceRequest({
			dataType: "json",
			endpoint: "renameExpressions",
			contentType: "application/json+cognito; charset=utf-8",
			method: "POST",
			data:
			{
				NewRootType: null,
				OldRootType: serializedOldRootType,
				NewFieldPath: newFieldPath,
				OldFieldPath: oldFieldPath,
				Localization: Cognito.serialize(localization)
			},
			success: callback
		});
	};

	//#endregion

	//#region Utility Functions

	// Traverses list of elements to clear existing conditions and apply new conditions
	function applyElementsConditions(elements, validationResults) {
		for (var i = 0; i < elements.length; i++) {
			var element = $(elements[i]);

			// Clear existing conditions and check if conditions exist for element
			clearElementConditions(element);
			var elementValidation = Cognito.deserialize(Cognito.ValidationResult, validationResults[element.uuid()]);

			// Traverse children for section/table
			if (element.isSection() || element.isTable())
				applyElementsConditions(element.childElements().filter(function () { return !$(this).isPlaceholder() }), validationResults);

			// Apply conditions/formatted values
			if (elementValidation)
				updateElementValidation(element, elementValidation);			
		}
	}

	// Clears existing conditions and applies new conditions to element
	function applyElementConditions(element, exceptions) {
		clearElementConditions(element);
		updateElementValidation(element, exceptions);
	}

	/**
	 * Turns "Some.Path" into ["Some", "Some.Path"]
	 */
	function expandPropertyPath(path) {
		return path.split(".").reduce(function (accum, part) {
			if (!accum)
				return [part];

			accum.push(accum[accum.length - 1] + "." + part);
			return accum;
		}, null);
	}
	
	function resolvePath(obj, path) {
		if (!path)
			return;

		return path.split(".").reduce(function (accum, step) {
			return (accum ? accum[step] : null);
		}, obj);
	}

	// Sets new conditions & update values if necessary
	function updateElementValidation(element, elementValidationResults) {
		var field = element.get_field();

		// Element has been deleted, moved, or renamed during validation - skip
		if (field === undefined)
			return;
        
		for (var i = 0; i < elementValidationResults.length; i++) {
			var validationResult = elementValidationResults[i];

			// Validation error
			if (validationResult.get_ExceptionMessage() !== null) {
				var message = validationResult.get_ExceptionMessage();

				// Field validation
				try {
					new ExoWeb.Model.Condition(resolvePath(Cognito.ExpressionValidationTypes, validationResult.get_Property() + "ConditionType"), message, field, expandPropertyPath(validationResult.get_Property()), "client");
				}
				// Element validation
				catch (e) {
					ExoWeb.Observer.setValue(element, validationResult.get_Property() + "ValidationError", message);
				}
			}

			// Update formatted value
			if (validationResult.get_FormattedValue() !== null) {					
				var propChain;
				if (field)
					propChain = ExoWeb.Model.PropertyChain.create(field.meta.type, new ExoWeb.Model.PathTokens(validationResult.get_Property()));
				
				if (propChain && propChain.value(field) !== validationResult.get_FormattedValue()) {
					propChain.value(field, validationResult.get_FormattedValue());
				}
				// Update the name of the property if it is not the current field
				else
					ExoWeb.Observer.setValue(element, validationResult.get_Property(), validationResult.get_FormattedValue());					
			}

			// Force the element to refresh
			Cognito.refreshElement(element);
		}
	}

	// Clears conditions pertaining to expressions
	function clearElementConditions(element) {
		var field = element.get_field();

		// Element has been deleted, moved, or renamed during validation - skip
		if (field === undefined)
			return;

		var _ = Cognito.ExpressionValidationTypes;
		// Clear field specific conditions
		if (field !== null) {
			var condition;
			if (condition = field.meta.getCondition(_.DefaultValueConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.IncrementByConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.MinValueConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.MaxValueConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.CalculationConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.ColumnSummaryConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.LineItemNameConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.LineItemDescriptionConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.RequiredConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.ErrorConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.ErrorMessageConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.QuantityConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.QuantityErrorConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.QuantitySelectedFieldConditionType))
				condition.condition.destroy();

			if (condition = field.meta.getCondition(_.Lookup.PriceConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.Lookup.QuantityAvailableConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.Lookup.FilterConditionType))
				condition.condition.destroy();
			if (condition = field.meta.getCondition(_.Lookup.DefaultValueFilterConditionType))
				condition.condition.destroy();
		}

		// Clear element specific conditions
		if (element.get_visibleValidationError())
			ExoWeb.Observer.setValue(element, "visibleValidationError", null);
		if (element.get_readOnlyValidationError())
			ExoWeb.Observer.setValue(element, "readOnlyValidationError", null);
	}

	function replacePropertyValue(propertyPath, oldStatus, newStatus, expression, doReplace) {
		if (typeof expression === 'string' && expression.indexOf('=') === 0) {
			// 3 groups: (1) before value, (2) value, (3) after value
			var regex = new RegExp('(\\b' + propertyPath.replace(/\./g, '\\.') + '\\s*(?:(?:==?)|(?:!=))\\s*")(' + oldStatus + ')(")', 'gm');
			var newExpression = expression.replace(regex, '$1' + newStatus + '$3');
			if (newExpression !== expression)
				doReplace(newExpression);
		}
	}

	Cognito.handleKnownValueRename = function handleKnownValueRename(form, elements, propertyPath, oldValue, newValue) {
		var formProperties = [
			"AllowSharedEditLinks",
			"AllowSharedViewLinks",
			"RequirePayment",
			"SaveCustomerCard",
			"ReadOnly"
		];

		var fieldProperties = [
			"MinValue",
			"MaxValue",
			"Calculation",
			"Required",
			"Quantity",
			"QuantityError",
			"Error",
			"ErrorMessage",
			"DefaultValue",
			"IncrementBy",
			"LineItemName",
			"LineItemDescription",
			"ColumnSummary"
		];

		var elementProperties = [
			"visible",
			"readOnly"
		];

		form.get_EntryStatuses().forEach(function (status) {
			replacePropertyValue(propertyPath, oldValue, newValue, status.get_AutoAssign(), function (newVal) {
				status.set_AutoAssign(newVal);
			});
		});

		form.get_Actions().forEach(function (action) {
			replacePropertyValue(propertyPath, oldValue, newValue, action.get_AllowedWhen(), function (newVal) {
				action.set_AllowedWhen(newVal);
			});
			action.get_Emails().forEach(function (email) {
				replacePropertyValue(propertyPath, oldValue, newValue, email.get_SendWhen(), function (newVal) {
					email.set_SendWhen(newVal);
				});
			});
		});

		formProperties.forEach(function (prop) {
			replacePropertyValue(propertyPath, oldValue, newValue, form.get(prop), function (newVal) {
				form.set(prop, newVal);
			});
		});

		elements.forEach(function (element) {
			element = $(element);

			elementProperties.forEach(function (prop) {
				replacePropertyValue(propertyPath, oldValue, newValue, element['get_' + prop](), function (newVal) {
					ExoWeb.Observer.setValue(element, prop, newVal);
				});
			});

			var field = element.get_field();
			if (field) {
				fieldProperties.forEach(function (prop) {
					replacePropertyValue(propertyPath, oldValue, newValue, field.get(prop), function (newVal) {
						field.set(prop, newVal);
						// Since DefaultValue surfaces on the builder canvas, refresh the element immediately
						if (prop === 'DefaultValue')
							Cognito.refreshElement(element);
					});
				});
			}
		});
	};

	//#endregion

})(ExoJQuery);
})(typeof exports === 'undefined');

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,