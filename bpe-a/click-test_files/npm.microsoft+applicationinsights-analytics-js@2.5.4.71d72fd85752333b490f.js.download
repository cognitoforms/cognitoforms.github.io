(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.microsoft+applicationinsights-analytics-js@2.5.4"],{

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js ***!
  \************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: ApplicationInsights */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInsights", function() { return ApplicationInsights; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/* harmony import */ var _Telemetry_PageViewManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Telemetry/PageViewManager */ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js");
/* harmony import */ var _Telemetry_PageVisitTimeManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Telemetry/PageVisitTimeManager */ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js");
/* harmony import */ var _Telemetry_PageViewPerformanceManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Telemetry/PageViewPerformanceManager */ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js");
/*!
 * Application Insights JavaScript SDK - Web Analytics, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
 * ApplicationInsights.ts
 * @copyright Microsoft 2018
 */






"use strict";
var durationProperty = "duration";
function _dispatchEvent(target, evnt) {
    if (target && target.dispatchEvent && evnt) {
        target.dispatchEvent(evnt);
    }
}
var ApplicationInsights = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ApplicationInsights, _super);
    function ApplicationInsights() {
        var _this = _super.call(this) || this;
        _this.identifier = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["AnalyticsPluginIdentifier"]; // do not change name or priority
        _this.priority = 180; // take from reserved priority range 100- 200
        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place
        // Counts number of trackAjax invokations.
        // By default we only monitor X ajax call per view to avoid too much load.
        // Default value is set in config.
        // This counter keeps increasing even after the limit is reached.
        _this._trackAjaxAttempts = 0;
        var location = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getLocation"])();
        _this._prevUri = location && location.href || "";
        return _this;
    }
    ApplicationInsights.getDefaultConfig = function (config) {
        if (!config) {
            config = {};
        }
        // set default values
        config.sessionRenewalMs = 30 * 60 * 1000;
        config.sessionExpirationMs = 24 * 60 * 60 * 1000;
        config.disableExceptionTracking = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.disableExceptionTracking);
        config.autoTrackPageVisitTime = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.autoTrackPageVisitTime);
        config.overridePageViewDuration = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.overridePageViewDuration);
        config.enableUnhandledPromiseRejectionTracking = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.enableUnhandledPromiseRejectionTracking);
        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {
            config.samplingPercentage = 100;
        }
        config.isCookieUseDisabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.isCookieUseDisabled);
        config.isStorageUseDisabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.isStorageUseDisabled);
        config.isBrowserLinkTrackingEnabled = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);
        config.enableAutoRouteTracking = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].stringToBoolOrDefault(config.enableAutoRouteTracking);
        config.namePrefix = config.namePrefix || "";
        return config;
    };
    ApplicationInsights.prototype.processTelemetry = function (env, itemCtx) {
        var doNotSendItem = false;
        var telemetryInitializersCount = this._telemetryInitializers.length;
        itemCtx = this._getTelCtx(itemCtx);
        for (var i = 0; i < telemetryInitializersCount; ++i) {
            var telemetryInitializer = this._telemetryInitializers[i];
            if (telemetryInitializer) {
                try {
                    if (telemetryInitializer.apply(null, [env]) === false) {
                        doNotSendItem = true;
                        break;
                    }
                }
                catch (e) {
                    // log error but dont stop executing rest of the telemetry initializers
                    // doNotSendItem = true;
                    itemCtx.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) }, true);
                }
            }
        }
        if (!doNotSendItem) {
            this.processNext(env, itemCtx);
        }
    };
    ApplicationInsights.prototype.trackEvent = function (event, customProperties) {
        try {
            var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(event, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Event"].envelopeType, this.diagLog(), customProperties);
            this.core.track(telemetryItem);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TrackTraceFailed, "trackTrace failed, trace will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.
     * @param   name    A string that identifies this event uniquely within the document.
     */
    ApplicationInsights.prototype.startTrackEvent = function (name) {
        try {
            this._eventTracking.start(name);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].StartTrackEventFailed, "startTrackEvent failed, event will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * Log an extended event that you started timing with `startTrackEvent`.
     * @param   name    The string you used to identify this event in `startTrackEvent`.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    ApplicationInsights.prototype.stopTrackEvent = function (name, properties, measurements) {
        try {
            this._eventTracking.stop(name, undefined, properties); // Todo: Fix to pass measurements once type is updated
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].StopTrackEventFailed, "stopTrackEvent failed, event will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * @description Log a diagnostic message
     * @param {ITraceTelemetry} trace
     * @param ICustomProperties.
     * @memberof ApplicationInsights
     */
    ApplicationInsights.prototype.trackTrace = function (trace, customProperties) {
        try {
            var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(trace, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Trace"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Trace"].envelopeType, this.diagLog(), customProperties);
            this.core.track(telemetryItem);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TrackTraceFailed, "trackTrace failed, trace will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * @description Log a numeric value that is not associated with a specific event. Typically
     * used to send regular reports of performance indicators. To send single measurement, just
     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements
     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements
     * and sending the resulting average at intervals
     * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.
     * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the
     * portal. Defaults to empty.
     * @memberof ApplicationInsights
     */
    ApplicationInsights.prototype.trackMetric = function (metric, customProperties) {
        try {
            var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(metric, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Metric"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Metric"].envelopeType, this.diagLog(), customProperties);
            this.core.track(telemetryItem);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TrackMetricFailed, "trackMetric failed, metric will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * Logs that a page or other item was viewed.
     * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.
     * @param customProperties Additional data used to filter events and metrics. Defaults to empty.
     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration
     */
    ApplicationInsights.prototype.trackPageView = function (pageView, customProperties) {
        try {
            var inPv = pageView || {};
            this._pageViewManager.trackPageView(inPv, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, inPv.properties, inPv.measurements, customProperties));
            if (this.config.autoTrackPageVisitTime) {
                this._pageVisitTimeManager.trackPreviousPageVisit(inPv.name, inPv.uri);
            }
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TrackPVFailed, "trackPageView failed, page view will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API
     * @param pageView Page view item to be sent
     * @param properties Custom properties (Part C) that a user can add to the telemetry item
     * @param systemProperties System level properties (Part A) that a user can add to the telemetry item
     */
    ApplicationInsights.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {
        var doc = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getDocument"])();
        if (doc) {
            pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;
        }
        var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(pageView, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageView"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageView"].envelopeType, this.diagLog(), properties, systemProperties);
        this.core.track(telemetryItem);
        // reset ajaxes counter
        this._trackAjaxAttempts = 0;
    };
    /**
     * @ignore INTERNAL ONLY
     * @param pageViewPerformance
     * @param properties
     */
    ApplicationInsights.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {
        var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(pageViewPerformance, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageViewPerformance"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PageViewPerformance"].envelopeType, this.diagLog(), properties, systemProperties);
        this.core.track(telemetryItem);
    };
    /**
     * Send browser performance metrics.
     * @param pageViewPerformance
     * @param customProperties
     */
    ApplicationInsights.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {
        try {
            this._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);
            this.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TrackPVFailed, "trackPageViewPerformance failed, page view will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,
     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view
     * and send the event.
     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.
     */
    ApplicationInsights.prototype.startTrackPage = function (name) {
        try {
            if (typeof name !== "string") {
                var doc = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getDocument"])();
                name = doc && doc.title || "";
            }
            this._pageTracking.start(name);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].StartTrackFailed, "startTrackPage failed, page view may not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.
     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.
     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.
     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    ApplicationInsights.prototype.stopTrackPage = function (name, url, properties, measurement) {
        try {
            if (typeof name !== "string") {
                var doc = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getDocument"])();
                name = doc && doc.title || "";
            }
            if (typeof url !== "string") {
                var loc = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getLocation"])();
                url = loc && loc.href || "";
            }
            this._pageTracking.stop(name, url, properties, measurement);
            if (this.config.autoTrackPageVisitTime) {
                this._pageVisitTimeManager.trackPreviousPageVisit(name, url);
            }
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].StopTrackFailed, "stopTrackPage failed, page view will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * @ignore INTERNAL ONLY
     * @param exception
     * @param properties
     * @param systemProperties
     */
    ApplicationInsights.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {
        var exceptionPartB = new _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"](this.diagLog(), exception.exception || new Error(_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].NotSpecified), exception.properties, exception.measurements, exception.severityLevel, exception.id).toInterface();
        var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(exceptionPartB, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].envelopeType, this.diagLog(), customProperties, systemProperties);
        this.core.track(telemetryItem);
    };
    /**
     * Log an exception you have caught.
     *
     * @param {IExceptionTelemetry} exception   Object which contains exception to be sent
     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.
     *
     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.
     * @memberof ApplicationInsights
     */
    ApplicationInsights.prototype.trackException = function (exception, customProperties) {
        try {
            this.sendExceptionInternal(exception, customProperties);
        }
        catch (e) {
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].TrackExceptionFailed, "trackException failed, exception will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e) });
        }
    };
    /**
     * @description Custom error handler for Application Insights Analytics
     * @param {IAutoExceptionTelemetry} exception
     * @memberof ApplicationInsights
     */
    ApplicationInsights.prototype._onerror = function (exception) {
        try {
            var properties_1 = {
                url: (exception && exception.url) || (Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getDocument"])() || {}).URL,
                lineNumber: exception.lineNumber,
                columnNumber: exception.columnNumber,
                message: exception.message
            };
            if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception.error)) {
                this._sendCORSException(properties_1.url);
            }
            else {
                if (!_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].isError(exception.error)) {
                    var stack = "window.onerror@" + properties_1.url + ":" + exception.lineNumber + ":" + (exception.columnNumber || 0);
                    exception.error = new Error(exception.message);
                    exception.error.stack = stack;
                }
                this.trackException({ exception: exception.error, severityLevel: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["SeverityLevel"].Error }, properties_1);
            }
        }
        catch (e) {
            var errorString = exception.error ?
                (exception.error.name + ", " + exception.error.message)
                : "null";
            this.diagLog().throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].ExceptionWhileLoggingError, "_onError threw exception while logging error, error will not be collected: "
                + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].dump(e), errorString: errorString });
        }
    };
    ApplicationInsights.prototype.addTelemetryInitializer = function (telemetryInitializer) {
        this._telemetryInitializers.push(telemetryInitializer);
    };
    ApplicationInsights.prototype.initialize = function (config, core, extensions, pluginChain) {
        var _this = this;
        if (this.isInitialized()) {
            return;
        }
        if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(core)) {
            throw Error("Error initializing");
        }
        _super.prototype.initialize.call(this, config, core, extensions, pluginChain);
        this.setInitialized(false); // resetting the initialized state, just in case the following fails
        var ctx = this._getTelCtx();
        var identifier = this.identifier;
        this._globalconfig = {
            instrumentationKey: config.instrumentationKey,
            endpointUrl: config.endpointUrl || "https://dc.services.visualstudio.com/v2/track"
        };
        this.config = ctx.getExtCfg(identifier);
        // load default values if specified
        var defaults = ApplicationInsights.getDefaultConfig();
        if (defaults !== undefined) {
            for (var field in defaults) {
                // for each unspecified field, set the default value
                this.config[field] = ctx.getConfig(identifier, field, defaults[field]);
            }
            if (this._globalconfig) {
                for (var field in defaults) {
                    if (this._globalconfig[field] === undefined) {
                        this._globalconfig[field] = defaults[field];
                    }
                }
            }
        }
        // Todo: move this out of static state
        if (this.config.isCookieUseDisabled) {
            _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].disableCookies();
        }
        // Todo: move this out of static state
        if (this.config.isStorageUseDisabled) {
            _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].disableStorage();
        }
        var configGetters = {
            instrumentationKey: function () { return config.instrumentationKey; },
            accountId: function () { return _this.config.accountId || config.accountId; },
            sessionRenewalMs: function () { return _this.config.sessionRenewalMs || config.sessionRenewalMs; },
            sessionExpirationMs: function () { return _this.config.sessionExpirationMs || config.sessionExpirationMs; },
            sampleRate: function () { return _this.config.samplingPercentage || config.samplingPercentage; },
            cookieDomain: function () { return _this.config.cookieDomain || config.cookieDomain; },
            sdkExtension: function () { return _this.config.sdkExtension || config.sdkExtension; },
            isBrowserLinkTrackingEnabled: function () { return _this.config.isBrowserLinkTrackingEnabled || config.isBrowserLinkTrackingEnabled; },
            appId: function () { return _this.config.appId || config.appId; }
        };
        this._pageViewPerformanceManager = new _Telemetry_PageViewPerformanceManager__WEBPACK_IMPORTED_MODULE_5__["PageViewPerformanceManager"](this.core);
        this._pageViewManager = new _Telemetry_PageViewManager__WEBPACK_IMPORTED_MODULE_3__["PageViewManager"](this, this.config.overridePageViewDuration, this.core, this._pageViewPerformanceManager);
        this._pageVisitTimeManager = new _Telemetry_PageVisitTimeManager__WEBPACK_IMPORTED_MODULE_4__["PageVisitTimeManager"](this.diagLog(), function (pageName, pageUrl, pageVisitTime) { return _this.trackPageVisitTime(pageName, pageUrl, pageVisitTime); });
        this._telemetryInitializers = this._telemetryInitializers || [];
        this._addDefaultTelemetryInitializers(configGetters);
        this._eventTracking = new Timing(this.diagLog(), "trackEvent");
        this._eventTracking.action =
            function (name, url, duration, properties) {
                if (!properties) {
                    properties = {};
                }
                properties[durationProperty] = duration.toString();
                _this.trackEvent({ name: name, properties: properties });
            };
        // initialize page view timing
        this._pageTracking = new Timing(this.diagLog(), "trackPageView");
        this._pageTracking.action = function (name, url, duration, properties, measurements) {
            // duration must be a custom property in order for the collector to extract it
            if (_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isNullOrUndefined(properties)) {
                properties = {};
            }
            properties[durationProperty] = duration.toString();
            var pageViewItem = {
                name: name,
                uri: url,
                properties: properties,
                measurements: measurements
            };
            _this.sendPageViewInternal(pageViewItem, properties);
        };
        var _window = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getWindow"])();
        var _history = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getHistory"])();
        var _location = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["getLocation"])();
        var instance = this;
        if (this.config.disableExceptionTracking === false &&
            !this.config.autoExceptionInstrumented && _window) {
            // We want to enable exception auto collection and it has not been done so yet
            var onerror_1 = "onerror";
            var originalOnError_1 = _window[onerror_1];
            _window.onerror = function (message, url, lineNumber, columnNumber, error) {
                var handled = originalOnError_1 && originalOnError_1(message, url, lineNumber, columnNumber, error);
                if (handled !== true) {
                    instance._onerror({
                        message: message,
                        url: url,
                        lineNumber: lineNumber,
                        columnNumber: columnNumber,
                        error: error
                    });
                }
                return handled;
            };
            this.config.autoExceptionInstrumented = true;
        }
        if (this.config.disableExceptionTracking === false &&
            this.config.enableUnhandledPromiseRejectionTracking === true &&
            !this.config.autoUnhandledPromiseInstrumented && _window) {
            // We want to enable exception auto collection and it has not been done so yet
            var onunhandledrejection = "onunhandledrejection";
            var originalOnUnhandledRejection_1 = _window[onunhandledrejection];
            _window[onunhandledrejection] = function (error) {
                var handled = originalOnUnhandledRejection_1 && originalOnUnhandledRejection_1.call(_window, error);
                if (handled !== true) {
                    instance._onerror({
                        message: error.reason.toString(),
                        error: error.reason instanceof Error ? error.reason : new Error(error.reason.toString()),
                        url: _location ? _location.href : "",
                        lineNumber: 0,
                        columnNumber: 0
                    });
                }
                return handled;
            };
            this.config.autoUnhandledPromiseInstrumented = true;
        }
        /**
         * Create a custom "locationchange" event which is triggered each time the history object is changed
         */
        if (this.config.enableAutoRouteTracking === true
            && _history && _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isFunction(_history.pushState) && _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].isFunction(_history.replaceState)
            && _window
            && typeof Event !== "undefined") {
            var _self_1 = this;
            // Find the properties plugin
            _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["CoreUtils"].arrForEach(extensions, function (extension) {
                if (extension.identifier === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["PropertiesPluginIdentifier"]) {
                    _this._properties = extension;
                }
            });
            _history.pushState = (function (f) { return function pushState() {
                var ret = f.apply(this, arguments);
                _dispatchEvent(_window, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].createDomEvent(_self_1.config.namePrefix + "pushState"));
                _dispatchEvent(_window, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].createDomEvent(_self_1.config.namePrefix + "locationchange"));
                return ret;
            }; })(_history.pushState);
            _history.replaceState = (function (f) { return function replaceState() {
                var ret = f.apply(this, arguments);
                _dispatchEvent(_window, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].createDomEvent(_self_1.config.namePrefix + "replaceState"));
                _dispatchEvent(_window, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].createDomEvent(_self_1.config.namePrefix + "locationchange"));
                return ret;
            }; })(_history.replaceState);
            if (_window.addEventListener) {
                _window.addEventListener(_self_1.config.namePrefix + "popstate", function () {
                    _dispatchEvent(_window, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].createDomEvent(_self_1.config.namePrefix + "locationchange"));
                });
                _window.addEventListener(_self_1.config.namePrefix + "locationchange", function () {
                    if (_self_1._properties && _self_1._properties.context && _self_1._properties.context.telemetryTrace) {
                        _self_1._properties.context.telemetryTrace.traceID = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Util"].generateW3CId();
                        _self_1._properties.context.telemetryTrace.name = _location && _location.pathname || "_unknown_";
                    }
                    if (_this._currUri) {
                        _this._prevUri = _this._currUri;
                        _this._currUri = _location && _location.href || "";
                    }
                    else {
                        _this._currUri = _location && _location.href || "";
                    }
                    setTimeout((function (uri) {
                        // todo: override start time so that it is not affected by autoRoutePVDelay
                        _self_1.trackPageView({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0
                    }).bind(_this, _this._prevUri), _self_1.autoRoutePVDelay);
                });
            }
        }
        this.setInitialized(true);
    };
    /**
     * Log a page visit time
     * @param    pageName    Name of page
     * @param    pageVisitDuration Duration of visit to the page in milleseconds
     */
    ApplicationInsights.prototype.trackPageVisitTime = function (pageName, pageUrl, pageVisitTime) {
        var properties = { PageName: pageName, PageUrl: pageUrl };
        this.trackMetric({
            name: "PageVisitTime",
            average: pageVisitTime,
            max: pageVisitTime,
            min: pageVisitTime,
            sampleCount: 1
        }, properties);
    };
    ApplicationInsights.prototype._addDefaultTelemetryInitializers = function (configGetters) {
        if (!configGetters.isBrowserLinkTrackingEnabled()) {
            var browserLinkPaths_1 = ['/browserLinkSignalR/', '/__browserLink/'];
            var dropBrowserLinkRequests = function (envelope) {
                if (envelope.baseType === _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["RemoteDependencyData"].dataType) {
                    var remoteData = envelope.baseData;
                    if (remoteData) {
                        for (var i = 0; i < browserLinkPaths_1.length; i++) {
                            if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) {
                                return false;
                            }
                        }
                    }
                }
                return true;
            };
            this._addTelemetryInitializer(dropBrowserLinkRequests);
        }
    };
    ApplicationInsights.prototype._addTelemetryInitializer = function (telemetryInitializer) {
        this._telemetryInitializers.push(telemetryInitializer);
    };
    ApplicationInsights.prototype._sendCORSException = function (url) {
        var exception = {
            message: "Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.",
            url: url,
            lineNumber: 0,
            columnNumber: 0,
            error: undefined
        };
        var telemetryItem = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["TelemetryItemCreator"].create(exception, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].dataType, _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["Exception"].envelopeType, this.diagLog(), { url: url });
        this.core.track(telemetryItem);
    };
    ApplicationInsights.Version = "2.5.4"; // Not currently used anywhere
    return ApplicationInsights;
}(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["BaseTelemetryPlugin"]));

/**
 * Used to record timed events and page views.
 */
var Timing = /** @class */ (function () {
    function Timing(logger, name) {
        this._name = name;
        this._events = {};
        this._logger = logger;
    }
    Timing.prototype.start = function (name) {
        if (typeof this._events[name] !== "undefined") {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].StartCalledMoreThanOnce, "start was called more than once for this event without calling stop.", { name: this._name, key: name }, true);
        }
        this._events[name] = +new Date;
    };
    Timing.prototype.stop = function (name, url, properties, measurements) {
        var start = this._events[name];
        if (isNaN(start)) {
            this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_2__["_InternalMessageId"].StopCalledWithoutStart, "stop was called without a corresponding start.", { name: this._name, key: name }, true);
        }
        else {
            var end = +new Date;
            var duration = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_1__["DateTimeUtils"].GetDuration(start, end);
            this.action(name, url, duration, properties, measurements);
        }
        delete this._events[name];
        this._events[name] = undefined;
    };
    return Timing;
}());
//# sourceMappingURL=ApplicationInsights.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js":
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js ***!
  \******************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: PageViewManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageViewManager", function() { return PageViewManager; });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/* harmony import */ var _microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @microsoft/dynamicproto-js */ "../../node_modules/.pnpm/@microsoft+dynamicproto-js@0.5.3/node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js");
/*!
 * Application Insights JavaScript SDK - Web Analytics, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */





/**
 * Class encapsulates sending page views and page view performance telemetry.
 */
var PageViewManager = /** @class */ (function () {
    function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {
        Object(_microsoft_dynamicproto_js__WEBPACK_IMPORTED_MODULE_2__["default"])(PageViewManager, this, function (_self) {
            var arrForEach = _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].arrForEach;
            var isNullOrUndefined = _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["CoreUtils"].isNullOrUndefined;
            var intervalHandle = null;
            var itemQueue = [];
            var pageViewPerformanceSent = false;
            var _logger;
            if (core) {
                _logger = core.logger;
            }
            function _flushChannels() {
                if (core) {
                    arrForEach(core.getTransmissionControls(), function (queues) {
                        arrForEach(queues, function (q) { return q.flush(true); });
                    });
                }
            }
            function _addQueue(cb) {
                itemQueue.push(cb);
                if (!intervalHandle) {
                    intervalHandle = setInterval((function () {
                        var allItems = itemQueue.slice(0);
                        var doFlush = false;
                        itemQueue = [];
                        arrForEach(allItems, function (item) {
                            if (!item()) {
                                // Not processed so rescheduled
                                itemQueue.push(item);
                            }
                            else {
                                doFlush = true;
                            }
                        });
                        if (itemQueue.length === 0) {
                            clearInterval(intervalHandle);
                            intervalHandle = null;
                        }
                        if (doFlush) {
                            // We process at least one item so flush the queue
                            _flushChannels();
                        }
                    }), 100);
                }
            }
            _self.trackPageView = function (pageView, customProperties) {
                var name = pageView.name;
                if (isNullOrUndefined(name) || typeof name !== "string") {
                    var doc = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getDocument"])();
                    name = pageView.name = doc && doc.title || "";
                }
                var uri = pageView.uri;
                if (isNullOrUndefined(uri) || typeof uri !== "string") {
                    var location_1 = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getLocation"])();
                    uri = pageView.uri = location_1 && location_1.href || "";
                }
                // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user
                // do not provide the duration, set duration to undefined
                // Also this is case 4
                if (!pageViewPerformanceManager.isPerformanceTimingSupported()) {
                    appInsights.sendPageViewInternal(pageView, customProperties);
                    _flushChannels();
                    // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)
                    _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].NavigationTimingNotSupported, "trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");
                    return;
                }
                var pageViewSent = false;
                var customDuration;
                // if the performance timing is supported by the browser, calculate the custom duration
                var start = pageViewPerformanceManager.getPerformanceTiming().navigationStart;
                customDuration = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(start, +new Date);
                if (!pageViewPerformanceManager.shouldCollectDuration(customDuration)) {
                    customDuration = undefined;
                }
                // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if
                // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier
                var duration;
                if (!isNullOrUndefined(customProperties) &&
                    !isNullOrUndefined(customProperties.duration)) {
                    duration = customProperties.duration;
                }
                if (overridePageViewDuration || !isNaN(duration)) {
                    if (isNaN(duration)) {
                        // case 3
                        if (!customProperties) {
                            customProperties = {};
                        }
                        customProperties["duration"] = customDuration;
                    }
                    // case 2
                    appInsights.sendPageViewInternal(pageView, customProperties);
                    _flushChannels();
                    pageViewSent = true;
                }
                // now try to send the page view performance telemetry
                var maxDurationLimit = 60000;
                if (!customProperties) {
                    customProperties = {};
                }
                // Queue the event for processing
                _addQueue(function () {
                    var processed = false;
                    try {
                        if (pageViewPerformanceManager.isPerformanceTimingDataReady()) {
                            processed = true;
                            var pageViewPerformance = {
                                name: name,
                                uri: uri
                            };
                            pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);
                            if (!pageViewPerformance.isValid && !pageViewSent) {
                                // If navigation timing gives invalid numbers, then go back to "override page view duration" mode.
                                // That's the best value we can get that makes sense.
                                customProperties["duration"] = customDuration;
                                appInsights.sendPageViewInternal(pageView, customProperties);
                            }
                            else {
                                if (!pageViewSent) {
                                    customProperties["duration"] = pageViewPerformance.durationMs;
                                    appInsights.sendPageViewInternal(pageView, customProperties);
                                }
                                if (!pageViewPerformanceSent) {
                                    appInsights.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);
                                    pageViewPerformanceSent = true;
                                }
                            }
                        }
                        else if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(start, +new Date) > maxDurationLimit) {
                            // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry
                            // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready
                            processed = true;
                            if (!pageViewSent) {
                                customProperties["duration"] = maxDurationLimit;
                                appInsights.sendPageViewInternal(pageView, customProperties);
                            }
                        }
                    }
                    catch (e) {
                        _logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].CRITICAL, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].TrackPVFailedCalc, "trackPageView failed on page load calculation: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].getExceptionName(e), { exception: _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e) });
                    }
                    return processed;
                });
            };
        });
    }
// Removed Stub for PageViewManager.prototype.trackPageView.
    return PageViewManager;
}());

//# sourceMappingURL=PageViewManager.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js":
/*!*****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js ***!
  \*****************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: PageViewPerformanceManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageViewPerformanceManager", function() { return PageViewPerformanceManager; });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/*!
 * Application Insights JavaScript SDK - Web Analytics, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




/**
 * Class encapsulates sending page view performance telemetry.
 */
var PageViewPerformanceManager = /** @class */ (function () {
    function PageViewPerformanceManager(core) {
        this.MAX_DURATION_ALLOWED = 3600000; // 1h
        if (core) {
            this._logger = core.logger;
        }
    }
    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {
        pageViewPerformance.isValid = false;
        /*
         * http://www.w3.org/TR/navigation-timing/#processing-model
         *  |-navigationStart
         *  |             |-connectEnd
         *  |             ||-requestStart
         *  |             ||             |-responseStart
         *  |             ||             |              |-responseEnd
         *  |             ||             |              |
         *  |             ||             |              |         |-loadEventEnd
         *  |---network---||---request---|---response---|---dom---|
         *  |--------------------------total----------------------|
         */
        var navigationTiming = this.getPerformanceNavigationTiming();
        var timing = this.getPerformanceTiming();
        if (navigationTiming || timing) {
            if (navigationTiming) {
                var total = navigationTiming.duration;
                var network = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(navigationTiming.startTime, navigationTiming.connectEnd);
                var request = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(navigationTiming.requestStart, navigationTiming.responseStart);
                var response = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(navigationTiming.responseStart, navigationTiming.responseEnd);
                var dom = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(navigationTiming.responseEnd, navigationTiming.loadEventEnd);
            }
            else {
                var total = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(timing.navigationStart, timing.loadEventEnd);
                var network = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(timing.navigationStart, timing.connectEnd);
                var request = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(timing.requestStart, timing.responseStart);
                var response = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(timing.responseStart, timing.responseEnd);
                var dom = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["DateTimeUtils"].GetDuration(timing.responseEnd, timing.loadEventEnd);
            }
            if (total === 0) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].ErrorPVCalc, "error calculating page view performance.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else if (!this.shouldCollectDuration(total, network, request, response, dom)) {
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].InvalidDurationValue, "Invalid page load duration value. Browser perf data won't be sent.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {
                // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT
                // in this case, don't report client performance from this page
                this._logger.throwInternal(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["LoggingSeverity"].WARNING, _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["_InternalMessageId"].ClientPerformanceMathError, "client performance math error.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else {
                pageViewPerformance.durationMs = total;
                // // convert to timespans
                pageViewPerformance.perfTotal = pageViewPerformance.duration = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].msToTimeSpan(total);
                pageViewPerformance.networkConnect = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].msToTimeSpan(network);
                pageViewPerformance.sentRequest = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].msToTimeSpan(request);
                pageViewPerformance.receivedResponse = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].msToTimeSpan(response);
                pageViewPerformance.domProcessing = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].msToTimeSpan(dom);
                pageViewPerformance.isValid = true;
            }
        }
    };
    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {
        if (this.isPerformanceTimingSupported()) {
            return Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getPerformance"])().timing;
        }
        return null;
    };
    PageViewPerformanceManager.prototype.getPerformanceNavigationTiming = function () {
        if (this.isPerformanceNavigationTimingSupported()) {
            return Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getPerformance"])().getEntriesByType("navigation")[0];
        }
        return null;
    };
    /**
     * Returns true is window PerformanceNavigationTiming API is supported, false otherwise.
     */
    PageViewPerformanceManager.prototype.isPerformanceNavigationTimingSupported = function () {
        var perf = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getPerformance"])();
        return perf && perf.getEntriesByType && perf.getEntriesByType("navigation").length > 0;
    };
    /**
     * Returns true is window performance timing API is supported, false otherwise.
     */
    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {
        var perf = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getPerformance"])();
        return perf && perf.timing;
    };
    /**
     * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.
     * Returns true if ready, false otherwise.
     */
    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {
        var perf = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getPerformance"])();
        var timing = perf ? perf.timing : 0;
        return timing
            && timing.domainLookupStart > 0
            && timing.navigationStart > 0
            && timing.responseStart > 0
            && timing.requestStart > 0
            && timing.loadEventEnd > 0
            && timing.responseEnd > 0
            && timing.connectEnd > 0
            && timing.domLoading > 0;
    };
    /**
     * This method tells if given durations should be excluded from collection.
     */
    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {
        var durations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            durations[_i] = arguments[_i];
        }
        var _navigator = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getNavigator"])() || {};
        // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en
        var botAgentNames = ['googlebot', 'adsbot-google', 'apis-google', 'mediapartners-google'];
        var userAgent = _navigator.userAgent;
        var isGoogleBot = false;
        if (userAgent) {
            for (var i = 0; i < botAgentNames.length; i++) {
                isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i]) !== -1;
            }
        }
        if (isGoogleBot) {
            // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.
            return false;
        }
        else {
            // for other page views, don't report if it's outside of a reasonable range
            for (var i = 0; i < durations.length; i++) {
                if (durations[i] >= this.MAX_DURATION_ALLOWED) {
                    return false;
                }
            }
        }
        return true;
    };
    return PageViewPerformanceManager;
}());

//# sourceMappingURL=PageViewPerformanceManager.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js":
/*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: PageVisitTimeManager, PageVisitData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageVisitTimeManager", function() { return PageVisitTimeManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageVisitData", function() { return PageVisitData; });
/* harmony import */ var _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @microsoft/applicationinsights-common */ "../../node_modules/.pnpm/@microsoft+applicationinsights-common@2.5.4/node_modules/@microsoft/applicationinsights-common/dist-esm/applicationinsights-common.js");
/* harmony import */ var _microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-core-js */ "../../node_modules/.pnpm/@microsoft+applicationinsights-core-js@2.5.4/node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js");
/*!
 * Application Insights JavaScript SDK - Web Analytics, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */




/**
 * Used to track page visit durations
 */
var PageVisitTimeManager = /** @class */ (function () {
    /**
     * Creates a new instance of PageVisitTimeManager
     * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)
     * @returns {}
     */
    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {
        this.prevPageVisitDataKeyName = "prevPageVisitData";
        this.pageVisitTimeTrackingHandler = pageVisitTimeTrackingHandler;
        this._logger = logger;
    }
    /**
     * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time
     * @param currentPageName Name of page to begin timing for visit duration
     * @param currentPageUrl Url of page to begin timing for visit duration
     */
    PageVisitTimeManager.prototype.trackPreviousPageVisit = function (currentPageName, currentPageUrl) {
        try {
            // Restart timer for new page view
            var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, currentPageUrl);
            // If there was a page already being timed, track the visit time for it now.
            if (prevPageVisitTimeData) {
                this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);
            }
        }
        catch (e) {
            this._logger.warnToConsole("Auto track page visit time failed, metric will not be collected: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e));
        }
    };
    /**
     * Stops timing of current page (if exists) and starts timing for duration of visit to pageName
     * @param pageName Name of page to begin timing visit duration
     * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.
     */
    PageVisitTimeManager.prototype.restartPageVisitTimer = function (pageName, pageUrl) {
        try {
            var prevPageVisitData = this.stopPageVisitTimer();
            this.startPageVisitTimer(pageName, pageUrl);
            return prevPageVisitData;
        }
        catch (e) {
            this._logger.warnToConsole("Call to restart failed: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e));
            return null;
        }
    };
    /**
     * Starts timing visit duration of pageName
     * @param pageName
     * @returns {}
     */
    PageVisitTimeManager.prototype.startPageVisitTimer = function (pageName, pageUrl) {
        try {
            if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].canUseSessionStorage()) {
                if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].getSessionStorage(this._logger, this.prevPageVisitDataKeyName) != null) {
                    throw new Error("Cannot call startPageVisit consecutively without first calling stopPageVisit");
                }
                var currPageVisitData = new PageVisitData(pageName, pageUrl);
                var currPageVisitDataStr = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getJSON"])().stringify(currPageVisitData);
                _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].setSessionStorage(this._logger, this.prevPageVisitDataKeyName, currPageVisitDataStr);
            }
        }
        catch (e) {
            // TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out
            this._logger.warnToConsole("Call to start failed: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e));
        }
    };
    /**
     * Stops timing of current page, if exists.
     * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.
     */
    PageVisitTimeManager.prototype.stopPageVisitTimer = function () {
        try {
            if (_microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].canUseSessionStorage()) {
                // Define end time of page's visit
                var pageVisitEndTime = Date.now();
                // Try to retrieve  page name and start time from session storage
                var pageVisitDataJsonStr = _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].getSessionStorage(this._logger, this.prevPageVisitDataKeyName);
                if (pageVisitDataJsonStr && Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["hasJSON"])()) {
                    // if previous page data exists, set end time of visit
                    var prevPageVisitData = Object(_microsoft_applicationinsights_core_js__WEBPACK_IMPORTED_MODULE_1__["getJSON"])().parse(pageVisitDataJsonStr);
                    prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;
                    // Remove data from storage since we already used it
                    _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].removeSessionStorage(this._logger, this.prevPageVisitDataKeyName);
                    // Return page visit data
                    return prevPageVisitData;
                }
                else {
                    return null;
                }
            }
            return null;
        }
        catch (e) {
            this._logger.warnToConsole("Stop page visit timer failed: " + _microsoft_applicationinsights_common__WEBPACK_IMPORTED_MODULE_0__["Util"].dump(e));
            return null;
        }
    };
    return PageVisitTimeManager;
}());

var PageVisitData = /** @class */ (function () {
    function PageVisitData(pageName, pageUrl) {
        this.pageVisitStartTime = Date.now();
        this.pageName = pageName;
        this.pageUrl = pageUrl;
    }
    return PageVisitData;
}());

//# sourceMappingURL=PageVisitTimeManager.js.map

/***/ }),

/***/ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/applicationinsights-analytics-js.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** C:/Users/TylerTrotter/repos/Cognito Forms/Cognito.Web.Client/node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/applicationinsights-analytics-js.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/*! exports provided: ApplicationInsights */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _JavaScriptSDK_ApplicationInsights__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JavaScriptSDK/ApplicationInsights */ "../../node_modules/.pnpm/@microsoft+applicationinsights-analytics-js@2.5.4/node_modules/@microsoft/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationInsights", function() { return _JavaScriptSDK_ApplicationInsights__WEBPACK_IMPORTED_MODULE_0__["ApplicationInsights"]; });

/*!
 * Application Insights JavaScript SDK - Web Analytics, 2.5.4
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */



//# sourceMappingURL=applicationinsights-analytics-js.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,