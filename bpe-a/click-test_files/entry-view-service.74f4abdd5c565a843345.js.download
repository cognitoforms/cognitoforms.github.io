(window["cfWebpackJsonp"] = window["cfWebpackJsonp"] || []).push([["entry-view-service"],{

/***/ "./src/web-api/entry-views/encryption.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encode", function() { return encode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decode", function() { return decode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encrypt", function() { return encrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEncryptedRecord", function() { return isEncryptedRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decrypt", function() { return decrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCryptoSupported", function() { return isCryptoSupported; });
/* harmony import */ var core_js_modules_es_array_buffer_slice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.array-buffer.slice.js");
/* harmony import */ var core_js_modules_es_array_buffer_slice_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_buffer_slice_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_typed_array_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.typed-array.uint8-array.js");
/* harmony import */ var core_js_modules_es_typed_array_uint8_array_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_uint8_array_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_typed_array_fill_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.typed-array.fill.js");
/* harmony import */ var core_js_modules_es_typed_array_fill_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_fill_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_typed_array_set_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.typed-array.set.js");
/* harmony import */ var core_js_modules_es_typed_array_set_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_set_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_typed_array_sort_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.typed-array.sort.js");
/* harmony import */ var core_js_modules_es_typed_array_sort_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_sort_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_buffer_constructor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.array-buffer.constructor.js");
/* harmony import */ var core_js_modules_es_array_buffer_constructor_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_buffer_constructor_js__WEBPACK_IMPORTED_MODULE_5__);






// Encodes a Unicode string and returns a binary array
function encode(s) {
  if (window.TextEncoder) return new TextEncoder().encode(s);
  const encoded = encodeURIComponent(s);
  const binary = encoded.replace(/%([0-9A-F]{2})/g, (match, p1) => String.fromCharCode('0x' + p1));
  const data = new Uint8Array(binary.length);
  Array.prototype.forEach.call(binary, (ch, i) => {
    data[i] = ch.charCodeAt(0);
  });
  return data;
}
;

//  Decodes a binary array and returns a Unicode string
function decode(data) {
  if (window.TextDecoder) return new TextDecoder().decode(data);
  if (data instanceof ArrayBuffer) data = new Uint8Array(data);
  const binary = Array.prototype.map.call(data, ch => String.fromCharCode(ch)).join('');
  const encoded = binary.replace(/(.)/g, (m, p) => {
    let code = p.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) code = '0' + code;
    return '%' + code;
  });
  return decodeURIComponent(encoded);
}
async function encrypt(data, encryptionKey, additionalData) {
  try {
    const iv = crypto.getRandomValues(new Uint8Array(12));
    const alg = {
      name: 'AES-GCM',
      iv: iv,
      additionalData,
      tagLength: 128
    };
    const buffer = await crypto.subtle.encrypt(alg, encryptionKey, encode(JSON.stringify(data)));
    return {
      Data: buffer,
      IV: iv
    };
  } catch (e) {
    return null;
  }
}
function isEncryptedRecord(record) {
  return record.Data && record.IV;
}

// Decrypts the specified encrypted entity
async function decrypt(encrypted, encryptionKey, additionalData) {
  try {
    const alg = {
      name: 'AES-GCM',
      iv: encrypted.IV,
      additionalData,
      tagLength: 128
    };
    const buffer = await crypto.subtle.decrypt(alg, encryptionKey, encrypted.Data);
    return JSON.parse(decode(buffer));
  } catch (e) {
    return null;
  }
}

// Gets or creates a crypto key for the specified form
async function isCryptoSupported(keySeed) {
  try {
    const crypto = window.crypto || window.msCrypto; // for IE11
    if (crypto.webkitSubtle) crypto.subtle = window.crypto.webkitSubtle; // for Safari

    const cryptoSeed = await crypto.subtle.digest('SHA-256', encode(keySeed));
    const key = await window.crypto.subtle.generateKey({
      name: 'AES-GCM',
      length: 256
    }, false, ['encrypt', 'decrypt']);
    const test = {
      Id: '0-0',
      Validation: '1234$%^&ABCD'
    };
    const encrypted = await encrypt(test, key, cryptoSeed);
    if (encrypted) {
      const decrypted = await decrypt(encrypted, key, cryptoSeed);
      if (decrypted && decrypted.Validation === test.Validation) return cryptoSeed;
    }
  } catch (e) {}
}

/***/ }),

/***/ "./src/web-api/entry-views/entry-view-service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EntryViewService; });
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/core-js@3.31.0/node_modules/core-js/modules/es.object.from-entries.js");
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/web-api/base-service.ts");
/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/idb@3.0.2/node_modules/idb/build/idb.js");
/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(idb__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../libs/types/server-types/forms/model/index-type.ts");
/* harmony import */ var _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var src_util_deferred__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/util/deferred.ts");
/* harmony import */ var src_framework_model_extensions_lookup_field_lookup_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/framework/model/extensions/lookup-field/lookup-manager.ts");
/* harmony import */ var src_framework_model_extensions_lookup_field_cascade_filter_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/framework/model/extensions/lookup-field/cascade-filter-manager.ts");
/* harmony import */ var _encryption__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/web-api/entry-views/encryption.ts");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }







const BATCH_TIME = 1;

/**
 * Controls how many entries can be loaded by a single network request when loading non-lookup entries.
 */
const BATCH_SIZE = 100;

/**
 * Controls how many requests for entry batches can be made for a particular view.
 */
const MAX_CONCURRENT_BATCH_REQUESTS = 3;
class EntryLookupBatch {
  constructor(request) {
    this._ids = new Set();
    this._views = new Set();
    this._request = void 0;
    this._request = request;
  }
  get viewList() {
    return Array.from(this._views);
  }
  get idList() {
    return Array.from(this._ids);
  }
  get idSet() {
    return new Set(this._ids);
  }
  addView(view) {
    this._views.add(view);
  }
  addEntryIds(ids) {
    for (const id of ids) this._ids.add(id);
  }
  getEntries(ids) {
    return this._request.then(entryData => {
      const relevantIds = new Set(ids);
      return entryData.filter(e => relevantIds.has(e.Id));
    });
  }
}
let _id = 0;
let crypto;
const cryptoKeys = {};
class EntryViewService extends _base_service__WEBPACK_IMPORTED_MODULE_1__["ServiceWithSession"] {
  constructor(model, session, log) {
    let pseudoLoadDeleted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let suppressLookupLoadingErrors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    super(session);
    this.id = _id++;
    this.model = void 0;
    this.log = void 0;
    this.db = Promise.resolve(null);
    this.sessionViewTokens = void 0;
    this.additionalViewTokens = void 0;
    this.encryptionSeed = void 0;
    this.loadingPromises = new Set();
    this.entryLookupBatch = void 0;
    this.loadEntryBatches = {};
    this.model = model;
    this.log = log;
    this.sessionViewTokens = session.viewTokens;
    const entryTypeNames = model.entryTypeName.split('.');
    const orgName = entryTypeNames[entryTypeNames.length - 2];
    if (session.flags.entryCaching) {
      this.openIndexedDB(orgName, model.version + 1);
    }
    model.enableLookups(this, src_framework_model_extensions_lookup_field_lookup_manager__WEBPACK_IMPORTED_MODULE_5__["getLookupManager"], src_framework_model_extensions_lookup_field_cascade_filter_manager__WEBPACK_IMPORTED_MODULE_6__["getCascadeFilterManager"], log, pseudoLoadDeleted, suppressLookupLoadingErrors);
  }
  get viewTokens() {
    if (!this.additionalViewTokens) return this.sessionViewTokens;
    return Object.assign({}, this.sessionViewTokens, this.additionalViewTokens);
  }
  registerViewToken(viewId, token) {
    if (!this.additionalViewTokens) this.additionalViewTokens = {};
    this.additionalViewTokens[viewId] = token;
  }
  async openIndexedDB(orgName, version) {
    const onFail = () => this.log.warn('Failed to open indexed DB.');
    try {
      this.db = Object(idb__WEBPACK_IMPORTED_MODULE_2__["openDb"])("Cognito.Forms.".concat(orgName), version, upgrade => {
        if (upgrade.objectStoreNames.contains('FormKey')) upgrade.deleteObjectStore('FormKey');
        if (upgrade.objectStoreNames.contains('FormEntry')) upgrade.deleteObjectStore('FormEntry');
        if (upgrade.objectStoreNames.contains('FormEntryIndex')) upgrade.deleteObjectStore('FormEntryIndex');
        upgrade.createObjectStore('FormKey', {
          keyPath: 'Form'
        });
        upgrade.createObjectStore('FormEntry', {
          keyPath: 'Id'
        });
        upgrade.createObjectStore('FormEntryIndex', {
          keyPath: 'Id'
        });
      }).then(async db => {
        db._db.onversionchange = e => {
          db.close();
          this.openIndexedDB(orgName, e.newVersion);
        };
        if (this.session.encryptionKey) {
          crypto = await Promise.resolve(/* import() */).then(__webpack_require__.bind(null, "./src/web-api/entry-views/encryption.ts"));
          this.encryptionSeed = await crypto.isCryptoSupported(this.session.encryptionKey);
          return this.encryptionSeed ? db : null;
        } else return db;
      }).catch(e => {
        onFail();
        return null;
      });
    } catch (_unused) {
      onFail();
      this.db = Promise.resolve(null);
    }
  }
  async cacheRecord(formId, storeName, record) {
    const db = await this.db;
    if (db) {
      try {
        const keyPath = db.transaction(storeName, 'readonly').objectStore(storeName).keyPath;
        const encrypted = _objectSpread({
          [keyPath]: record[keyPath]
        }, await this.encrypt(formId, record));
        return db.transaction(storeName, 'readwrite').objectStore(storeName).put(encrypted);
      } catch (e) {
        this.log.warn(e);
        this.db = Promise.resolve(null);
        return null;
      }
    }
  }
  async loadRecord(formId, storeName, recordKey) {
    let transaction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    return this.executeWithTracking(async () => {
      const db = await this.db;
      if (db) {
        try {
          if (!transaction) transaction = db.transaction(storeName, 'readonly');
          return this.decrypt(formId, await transaction.objectStore(storeName).get(recordKey));
        } catch (e) {
          this.log.warn(e);
          this.db = Promise.resolve(null);
          return null;
        }
      }
    });
  }
  getCacheKey(view, userShort, roleId) {
    if (!userShort) return view;
    return "".concat(view, "|").concat(userShort, "|").concat(roleId);
  }
  async loadCachedIndexes(formId, view, userSpecificSettings) {
    return this.loadRecord(formId, 'FormEntryIndex', this.getCacheKey(view, userSpecificSettings === null || userSpecificSettings === void 0 ? void 0 : userSpecificSettings.userShort, userSpecificSettings === null || userSpecificSettings === void 0 ? void 0 : userSpecificSettings.roleId));
  }
  async cacheIndexes(formId, view, indexes, timestamp, userSpecificSettings) {
    await this.cacheRecord(formId, 'FormEntryIndex', {
      entries: indexes,
      timestamp,
      Id: this.getCacheKey(view, userSpecificSettings === null || userSpecificSettings === void 0 ? void 0 : userSpecificSettings.userShort, userSpecificSettings === null || userSpecificSettings === void 0 ? void 0 : userSpecificSettings.roleId)
    });
  }
  async encrypt(formId, data) {
    if (this.encryptionSeed) return crypto.encrypt(data, await this.getCryptoKey(formId), this.encryptionSeed);
    return data;
  }
  async decrypt(seed, data) {
    if (data && Object(_encryption__WEBPACK_IMPORTED_MODULE_7__["isEncryptedRecord"])(data)) {
      if (this.encryptionSeed) return await crypto.decrypt(data, await this.getCryptoKey(seed), this.encryptionSeed);else return null;
    }
    return data;
  }
  async getCryptoKey(formId) {
    // See if the key has already been loaded
    let key = cryptoKeys[formId];
    try {
      // Otherwise, attempt to load from db
      if (!key) {
        const db = await this.db;
        if (db) {
          const formKey = await db.transaction('FormKey', 'readonly').objectStore('FormKey').get(formId);

          // Key found in database cache
          if (formKey) key = formKey.Key;
          // Create and cache a new encryption key
          else {
            key = await window.crypto.subtle.generateKey({
              name: 'AES-GCM',
              length: 256
            }, false, ['encrypt', 'decrypt']);
            await db.transaction('FormKey', 'readwrite').objectStore('FormKey').put({
              Form: formId,
              Key: key
            });
          }
          cryptoKeys[formId] = key;
        }
      }
    } catch (e) {
      this.log.warn(e);
      this.db = Promise.resolve(null);
    }
    return key;
  }
  isLookupView(viewId) {
    var _this$viewTokens$view;
    return (_this$viewTokens$view = this.viewTokens[viewId]) === null || _this$viewTokens$view === void 0 ? void 0 : _this$viewTokens$view.startsWith('l-');
  }
  async getIndex(formId, view, userSpecificSettings, timestamp, progressCallback) {
    if (!this.isValidView(view)) return Promise.resolve([]);
    return this.executeWithTracking(async () => {
      // Prevent parallel index building
      let delay = 100;
      let indexes;
      let result;
      let errors = 0;
      while (true) {
        // Allow up to 5 failures before cancelling
        result = await this.serviceRequest({
          method: 'get',
          // lookups should use the public index endpoint, regular views use admin
          endpoint: "forms/".concat(this.isLookupView(view) ? 'public' : 'admin', "/").concat(formId, "/entries/index/").concat(this.viewTokens[view]),
          params: {
            timestamp: timestamp,
            poll: true,
            roleId: userSpecificSettings === null || userSpecificSettings === void 0 ? void 0 : userSpecificSettings.roleId
          }
        });
        if (result.error) {
          if (++errors >= 5) break;
          continue;
        }
        if (result.response && result.response.data) {
          indexes = result.response.data;
          const lck = indexes.find(idx => idx.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_3__["IndexType"].Lock);
          if (lck) {
            if (progressCallback) progressCallback(lck.PercentDone * 100, delay);
            await new Promise(resolve => {
              setTimeout(resolve, delay);
            });
            // If this is a checkpoint lock, poll faster
            if (lck.Id) delay = 100;else delay = delay * 2 > 10000 ? 10000 : delay * 2;
            continue;
          }
        }
        if (progressCallback) progressCallback(100, -500);
        break;
      }
      if (indexes) {
        return this.ensureBatchesLoaded(indexes);
      }
      throw this.parseError(result.error);
    });
  }
  async getSpecificIndex(entryId, formId, view, userSpecificSettings, timestamp) {
    if (!this.isValidView(view)) return Promise.resolve([]);
    return this.executeWithTracking(async () => {
      // Prevent parallel index building
      let pollCount = 0;
      const delay = 100;
      let indexes;
      let result;
      while (pollCount++ < 4) {
        var _result$response;
        result = await this.serviceRequest({
          method: 'get',
          endpoint: "forms/admin/".concat(formId, "/entries/index/").concat(entryId, "/").concat(this.viewTokens[view]),
          params: {
            timestamp: timestamp,
            poll: true,
            roleId: userSpecificSettings === null || userSpecificSettings === void 0 ? void 0 : userSpecificSettings.roleId
          }
        });
        if ((_result$response = result.response) !== null && _result$response !== void 0 && _result$response.data) {
          const index = result.response.data;
          indexes = index ? [index] : [];
          break;
        } else {
          await new Promise(resolve => {
            setTimeout(resolve, delay);
          });
        }
      }
      if (indexes) {
        return this.ensureBatchesLoaded(indexes);
      }
      throw this.parseError(result.error);
    });
  }
  async ensureBatchesLoaded(indexes) {
    // Load indexes from file storage
    let batches = [];
    let lastCheckpoint = 0;
    for (let i = 0; i < indexes.length; i++) {
      const index = indexes[i];
      if (index.Type === _cognitoforms_types_server_types_forms_model_index_type__WEBPACK_IMPORTED_MODULE_3__["IndexType"].Checkpoint) {
        batches = [];
        lastCheckpoint = i;
      }
      if (index.Batch && index.Batch.StorageUrl) batches.push(index);
    }

    // Only worry about indexes after the most recent checkpoint
    if (lastCheckpoint) indexes = indexes.slice(lastCheckpoint);

    // If indexes need to be fetched from file storage, merge them into the existing array
    const requests = batches.map(batch => this.client.get(batch.Batch.StorageUrl));
    if (requests.length) {
      const responses = await Promise.all(requests);
      let j = responses.length - 1;
      for (let i = indexes.length - 1; i >= 0; i--) {
        if (indexes[i].Batch && indexes[i].Batch.StorageUrl) {
          indexes.splice(i + 1, 0, ...responses[j].data);
          j--;
        }
      }
    }
    return indexes;
  }
  async getFilter(formId, filter) {
    const result = await this.serviceRequest({
      method: 'post',
      endpoint: "svc/forms/".concat(formId, "/entry-views/filter"),
      isCognitoJson: true,
      data: filter
    });
    if (result.response && result.response.data) return result.response.data;
    throw this.parseError(result.error);
  }
  async lookupEntries(view, ids) {
    if (!this.isValidView(view)) return Promise.resolve([]);
    if (!this.entryLookupBatch) {
      const request = new src_util_deferred__WEBPACK_IMPORTED_MODULE_4__["Deferred"]();
      const batch = this.entryLookupBatch = new EntryLookupBatch(request.promise);
      setTimeout(() => {
        this.entryLookupBatch = undefined;
        request.resolve(this.lookupEntriesInBatch(batch));
      }, BATCH_TIME);
      this.executeWithTracking(() => request.promise);
    }
    this.entryLookupBatch.addView(view);
    this.entryLookupBatch.addEntryIds(ids);
    return this.entryLookupBatch.getEntries(ids);
  }
  lookupEntriesInBatch(batch) {
    return this.executeWithTracking(async () => {
      const fetchIds = batch.idSet;

      // Try to load entries from cache
      const cachedEntryData = (await this.getCachedEntries(batch.idList)).filter(e => !!e);

      // Separate cached entries from uncached
      cachedEntryData.forEach(e => fetchIds.delete(e.Id));
      this.log.startTrackEvent('LoadingLookupsFromServer');
      const result = await this.serviceRequest({
        method: 'post',
        endpoint: 'forms/public/entrylookup',
        data: {
          Tokens: batch.viewList.map(v => this.viewTokens[v]),
          Entries: Array.from(fetchIds.values()).map(id => ({
            EntryId: id
          }))
          // send etag to see if cached entries are outdated
          .concat(cachedEntryData.map(e => ({
            EntryId: e.Id,
            EntryETag: e.$etag
          })))
        }
      });
      if (result.response && result.response.data) {
        const data = result.response.data;
        const entries = [];
        const deletedEntryIds = new Set();
        const orders = new Map((data.orders || []).map(o => [o.json.Id, o]));
        for (const entryData of data.entries) {
          if (entryData.json) {
            const entry = entryData.json;
            if (entry.Entry.Order && orders.has(entry.Entry.Order.Id)) entry.Order = orders.get(entry.Entry.Order.Id).json;
            entry.$etag = entryData.etag;
            entries.push(entry);
          } else {
            console.warn('Unable to resolve lookup value:', entryData.id);
            deletedEntryIds.add(entryData.id);
          }
        }

        // Cache entries
        await Promise.all(entries.map(e => this.cacheRecord(e.Form.Id, 'FormEntry', e)));

        // Find the number of fields for each form
        const map = new Map();
        cachedEntryData.concat(entries).forEach(entry => {
          map.set(entry.Form.Id, Object.keys(entry).length);
        });
        this.log.stopTrackEvent('LoadingLookupsFromServer', {
          numSourceFormFields: JSON.stringify(Object.fromEntries(map)).toString(),
          numberLoaded: fetchIds.size.toString()
        });

        // Return a combination of entries from server, and cached entries that were not expired
        return entries.concat(cachedEntryData.filter(e => !deletedEntryIds.has(e.Id)));
      }
      throw this.parseError(result.error);
    });
  }
  async getCachedEntries(ids) {
    const formId = ids[0].split('-')[0];
    const db = await this.db;
    if (db) {
      const transaction = (await this.db).transaction('FormEntry', 'readonly');
      return Promise.all(ids.map(id => this.loadRecord(formId, 'FormEntry', id, transaction)));
    } else return [];
  }
  async loadEntryData(view, isAdmin) {
    if (!this.isValidView(view)) return [];
    let batch = this.loadEntryBatches[view];
    if (!batch) {
      const request = new src_util_deferred__WEBPACK_IMPORTED_MODULE_4__["Deferred"]();
      batch = {
        entries: new Map(),
        request: request.promise,
        id: view
      };
      setTimeout(() => {
        delete this.loadEntryBatches[view];
        request.resolve(this.loadEntryDataInBatch(batch, isAdmin).then(entryData => new Map(entryData.map(d => [d.Id, d]))));
      });
      this.executeWithTracking(() => request.promise);
    }
    this.loadEntryBatches[view] = batch;
    for (var _len = arguments.length, entries = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      entries[_key - 2] = arguments[_key];
    }
    for (const key of entries) batch.entries.set(key.EntryId, key);
    const dataMap = await batch.request;
    return entries.map(e => dataMap.get(e.EntryId));
  }
  loadEntryDataInBatch(batch) {
    let isAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return this.executeWithTracking(async () => {
      const indexMap = batch.entries;
      let cachedEntryData = await this.getCachedEntries(Array.from(indexMap.keys()));

      // Entries with out of date etags need to be reloaded
      cachedEntryData = cachedEntryData.filter(entry => {
        if (entry && entry.$etag === indexMap.get(entry.Id).EntryETag) {
          indexMap.delete(entry.Id);
          return true;
        }
        return false;
      });

      // All requested entries were found in cache, no web request needed
      if (indexMap.size === 0) return cachedEntryData;
      const loadedData = [];
      let numRequested = 0;
      const requestQueue = [];
      const keysToLoad = Array.from(indexMap.values());
      while (numRequested < keysToLoad.length) {
        if (requestQueue.length === MAX_CONCURRENT_BATCH_REQUESTS) {
          // wait for a spot in the queue to open up
          await Promise.race(requestQueue);
          continue;
        }
        const currentKeyBatch = keysToLoad.slice(numRequested, numRequested += BATCH_SIZE);
        const request = (async () => {
          const result = await this.serviceRequest({
            method: 'post',
            endpoint: "forms/".concat(isAdmin ? 'admin' : 'public', "/entrybatch"),
            data: {
              Token: this.viewTokens[batch.id],
              Entries: currentKeyBatch
            }
          });
          if (result.response && result.response.data) {
            const data = result.response.data;
            const orders = new Map((data.orders || []).map(o => [o.Id, o]));
            // Cache entries
            await Promise.all(data.entries.map(entry => {
              if (entry.Entry.Order && orders.has(entry.Entry.Order.Id)) entry.Order = orders.get(entry.Entry.Order.Id);
              entry.$etag = indexMap.get(entry.Id).EntryETag;
              return this.cacheRecord(entry.Form.Id, 'FormEntry', entry);
            }));
            loadedData.push(...data.entries);
          } else throw this.parseError(result.error);
          requestQueue.splice(requestQueue.indexOf(request), 1);
        })();
        requestQueue.push(request);
      }

      // once we're past the loop, we've requested everything we need, but may still need to wait on the last tasks in the queue
      await Promise.all(requestQueue);
      return loadedData.concat(cachedEntryData);
    });
  }
  executeWithTracking(action) {
    const task = new src_util_deferred__WEBPACK_IMPORTED_MODULE_4__["Deferred"]();
    this.loadingPromises.add(task.promise);
    const result = action();
    const cleanupTask = () => {
      this.loadingPromises.delete(task.promise);
      task.resolve();
    };
    result.then(cleanupTask, cleanupTask);
    return result;
  }
  get loadingComplete() {
    return new Promise(async resolve => {
      while (this.loadingPromises.size) {
        await Promise.all(this.loadingPromises);
        await new Promise(resolve => setTimeout(resolve)); // allow anything awaiting loading to queue more tasks
      }

      resolve();
    });
  }
  isValidView(viewId) {
    return !!this.viewTokens[viewId];
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,